begin_unit
comment|'#    Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_db'
name|'import'
name|'exception'
name|'as'
name|'db_exc'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'opts'
name|'as'
name|'cells_opts'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'rpcapi'
name|'as'
name|'cells_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'utils'
name|'as'
name|'cells_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'notifications'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# List of fields that can be joined in DB layer.'
nl|'\n'
DECL|variable|_INSTANCE_OPTIONAL_JOINED_FIELDS
name|'_INSTANCE_OPTIONAL_JOINED_FIELDS'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|','
nl|'\n'
string|"'info_cache'"
op|','
string|"'security_groups'"
op|','
nl|'\n'
string|"'pci_devices'"
op|','
string|"'tags'"
op|']'
newline|'\n'
comment|"# These are fields that are optional but don't translate to db columns"
nl|'\n'
DECL|variable|_INSTANCE_OPTIONAL_NON_COLUMN_FIELDS
name|'_INSTANCE_OPTIONAL_NON_COLUMN_FIELDS'
op|'='
op|'['
string|"'fault'"
op|','
string|"'flavor'"
op|','
string|"'old_flavor'"
op|','
nl|'\n'
string|"'new_flavor'"
op|','
string|"'ec2_ids'"
op|']'
newline|'\n'
comment|'# These are fields that are optional and in instance_extra'
nl|'\n'
DECL|variable|_INSTANCE_EXTRA_FIELDS
name|'_INSTANCE_EXTRA_FIELDS'
op|'='
op|'['
string|"'numa_topology'"
op|','
string|"'pci_requests'"
op|','
nl|'\n'
string|"'flavor'"
op|','
string|"'vcpu_model'"
op|']'
newline|'\n'
nl|'\n'
comment|'# These are fields that can be specified as expected_attrs'
nl|'\n'
DECL|variable|INSTANCE_OPTIONAL_ATTRS
name|'INSTANCE_OPTIONAL_ATTRS'
op|'='
op|'('
name|'_INSTANCE_OPTIONAL_JOINED_FIELDS'
op|'+'
nl|'\n'
name|'_INSTANCE_OPTIONAL_NON_COLUMN_FIELDS'
op|'+'
nl|'\n'
name|'_INSTANCE_EXTRA_FIELDS'
op|')'
newline|'\n'
comment|'# These are fields that most query calls load by default'
nl|'\n'
DECL|variable|INSTANCE_DEFAULT_FIELDS
name|'INSTANCE_DEFAULT_FIELDS'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|','
nl|'\n'
string|"'info_cache'"
op|','
string|"'security_groups'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_expected_cols
name|'def'
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return expected_attrs that are columns needing joining.\n\n    NB: This function may modify expected_attrs if one\n    requested attribute requires another.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'expected_attrs'
newline|'\n'
nl|'\n'
dedent|''
name|'simple_cols'
op|'='
op|'['
name|'attr'
name|'for'
name|'attr'
name|'in'
name|'expected_attrs'
nl|'\n'
name|'if'
name|'attr'
name|'in'
name|'_INSTANCE_OPTIONAL_JOINED_FIELDS'
op|']'
newline|'\n'
nl|'\n'
name|'complex_cols'
op|'='
op|'['
string|"'extra.%s'"
op|'%'
name|'field'
nl|'\n'
name|'for'
name|'field'
name|'in'
name|'_INSTANCE_EXTRA_FIELDS'
nl|'\n'
name|'if'
name|'field'
name|'in'
name|'expected_attrs'
op|']'
newline|'\n'
name|'if'
name|'complex_cols'
op|':'
newline|'\n'
indent|'        '
name|'simple_cols'
op|'.'
name|'append'
op|'('
string|"'extra'"
op|')'
newline|'\n'
dedent|''
name|'simple_cols'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'simple_cols'
name|'if'
name|'x'
name|'not'
name|'in'
name|'_INSTANCE_EXTRA_FIELDS'
op|']'
newline|'\n'
name|'return'
name|'simple_cols'
op|'+'
name|'complex_cols'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(berrange): Remove NovaObjectDictCompat'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
name|'class'
name|'Instance'
op|'('
name|'base'
op|'.'
name|'NovaPersistentObject'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|','
nl|'\n'
DECL|class|Instance
name|'base'
op|'.'
name|'NovaObjectDictCompat'
op|')'
op|':'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
comment|'# Version 1.1: Added info_cache'
nl|'\n'
comment|'# Version 1.2: Added security_groups'
nl|'\n'
comment|'# Version 1.3: Added expected_vm_state and admin_state_reset to'
nl|'\n'
comment|'#              save()'
nl|'\n'
comment|'# Version 1.4: Added locked_by and deprecated locked'
nl|'\n'
comment|'# Version 1.5: Added cleaned'
nl|'\n'
comment|'# Version 1.6: Added pci_devices'
nl|'\n'
comment|'# Version 1.7: String attributes updated to support unicode'
nl|'\n'
comment|"# Version 1.8: 'security_groups' and 'pci_devices' cannot be None"
nl|'\n'
comment|'# Version 1.9: Make uuid a non-None real string'
nl|'\n'
comment|'# Version 1.10: Added use_slave to refresh and get_by_uuid'
nl|'\n'
comment|'# Version 1.11: Update instance from database during destroy'
nl|'\n'
comment|'# Version 1.12: Added ephemeral_key_uuid'
nl|'\n'
comment|'# Version 1.13: Added delete_metadata_key()'
nl|'\n'
comment|'# Version 1.14: Added numa_topology'
nl|'\n'
comment|'# Version 1.15: PciDeviceList 1.1'
nl|'\n'
comment|'# Version 1.16: Added pci_requests'
nl|'\n'
comment|'# Version 1.17: Added tags'
nl|'\n'
comment|'# Version 1.18: Added flavor, old_flavor, new_flavor, will use'
nl|'\n'
comment|'#               PciDeviceList version 1.2'
nl|'\n'
comment|'# Version 1.19: Added vcpu_model'
nl|'\n'
comment|'# Version 1.20: Added ec2_ids'
nl|'\n'
comment|'# Version 1.21: TagList 1.1'
nl|'\n'
comment|'# Version 1.22: InstanceNUMATopology 1.2'
nl|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.22'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'user_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'image_ref'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'hostname'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'launch_index'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'key_name'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'key_data'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'power_state'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'memory_mb'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'ephemeral_key_uuid'"
op|':'
name|'fields'
op|'.'
name|'UUIDField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'host'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'node'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'instance_type_id'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'user_data'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'reservation_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# NOTE(sbiswas7): this field is depcrecated,'
nl|'\n'
comment|'# will be removed in instance v2.0'
nl|'\n'
string|"'scheduled_at'"
op|':'
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'terminated_at'"
op|':'
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'availability_zone'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'display_name'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'display_description'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'launched_on'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# NOTE(jdillaman): locked deprecated in favor of locked_by,'
nl|'\n'
comment|'# to be removed in Icehouse'
nl|'\n'
string|"'locked'"
op|':'
name|'fields'
op|'.'
name|'BooleanField'
op|'('
name|'default'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'locked_by'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'os_type'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'architecture'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'vm_mode'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'fields'
op|'.'
name|'UUIDField'
op|'('
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'root_device_name'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'default_ephemeral_device'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'default_swap_device'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'config_drive'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'access_ip_v4'"
op|':'
name|'fields'
op|'.'
name|'IPV4AddressField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'access_ip_v6'"
op|':'
name|'fields'
op|'.'
name|'IPV6AddressField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'auto_disk_config'"
op|':'
name|'fields'
op|'.'
name|'BooleanField'
op|'('
name|'default'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'progress'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'shutdown_terminate'"
op|':'
name|'fields'
op|'.'
name|'BooleanField'
op|'('
name|'default'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'disable_terminate'"
op|':'
name|'fields'
op|'.'
name|'BooleanField'
op|'('
name|'default'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'cell_name'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'metadata'"
op|':'
name|'fields'
op|'.'
name|'DictOfStringsField'
op|'('
op|')'
op|','
nl|'\n'
string|"'system_metadata'"
op|':'
name|'fields'
op|'.'
name|'DictOfNullableStringsField'
op|'('
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'info_cache'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'InstanceInfoCache'"
op|','
nl|'\n'
DECL|variable|nullable
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'security_groups'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'SecurityGroupList'"
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'fault'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'InstanceFault'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'cleaned'"
op|':'
name|'fields'
op|'.'
name|'BooleanField'
op|'('
name|'default'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
nl|'\n'
string|"'pci_devices'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'PciDeviceList'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'numa_topology'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'InstanceNUMATopology'"
op|','
nl|'\n'
DECL|variable|nullable
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'pci_requests'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'InstancePCIRequests'"
op|','
nl|'\n'
DECL|variable|nullable
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'tags'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'TagList'"
op|')'
op|','
nl|'\n'
string|"'flavor'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'Flavor'"
op|')'
op|','
nl|'\n'
string|"'old_flavor'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'Flavor'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'new_flavor'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'Flavor'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'vcpu_model'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'VirtCPUModel'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'ec2_ids'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'EC2Ids'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|obj_extra_fields
name|'obj_extra_fields'
op|'='
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'fault'"
op|':'
op|'['
op|'('
string|"'1.0'"
op|','
string|"'1.0'"
op|')'
op|','
op|'('
string|"'1.13'"
op|','
string|"'1.2'"
op|')'
op|']'
op|','
nl|'\n'
string|"'info_cache'"
op|':'
op|'['
op|'('
string|"'1.1'"
op|','
string|"'1.0'"
op|')'
op|','
op|'('
string|"'1.9'"
op|','
string|"'1.4'"
op|')'
op|','
op|'('
string|"'1.10'"
op|','
string|"'1.5'"
op|')'
op|']'
op|','
nl|'\n'
string|"'security_groups'"
op|':'
op|'['
op|'('
string|"'1.2'"
op|','
string|"'1.0'"
op|')'
op|']'
op|','
nl|'\n'
string|"'pci_devices'"
op|':'
op|'['
op|'('
string|"'1.6'"
op|','
string|"'1.0'"
op|')'
op|','
op|'('
string|"'1.15'"
op|','
string|"'1.1'"
op|')'
op|','
op|'('
string|"'1.18'"
op|','
string|"'1.2'"
op|')'
op|']'
op|','
nl|'\n'
string|"'numa_topology'"
op|':'
op|'['
op|'('
string|"'1.14'"
op|','
string|"'1.0'"
op|')'
op|','
op|'('
string|"'1.16'"
op|','
string|"'1.1'"
op|')'
op|','
op|'('
string|"'1.22'"
op|','
string|"'1.2'"
op|')'
op|']'
op|','
nl|'\n'
string|"'pci_requests'"
op|':'
op|'['
op|'('
string|"'1.16'"
op|','
string|"'1.1'"
op|')'
op|']'
op|','
nl|'\n'
string|"'tags'"
op|':'
op|'['
op|'('
string|"'1.17'"
op|','
string|"'1.0'"
op|')'
op|','
op|'('
string|"'1.21'"
op|','
string|"'1.1'"
op|')'
op|']'
op|','
nl|'\n'
string|"'flavor'"
op|':'
op|'['
op|'('
string|"'1.18'"
op|','
string|"'1.1'"
op|')'
op|']'
op|','
nl|'\n'
string|"'old_flavor'"
op|':'
op|'['
op|'('
string|"'1.18'"
op|','
string|"'1.1'"
op|')'
op|']'
op|','
nl|'\n'
string|"'new_flavor'"
op|':'
op|'['
op|'('
string|"'1.18'"
op|','
string|"'1.1'"
op|')'
op|']'
op|','
nl|'\n'
string|"'vcpu_model'"
op|':'
op|'['
op|'('
string|"'1.19'"
op|','
string|"'1.0'"
op|')'
op|']'
op|','
nl|'\n'
string|"'ec2_ids'"
op|':'
op|'['
op|'('
string|"'1.20'"
op|','
string|"'1.0'"
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reset_metadata_tracking'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reset_metadata_tracking
dedent|''
name|'def'
name|'_reset_metadata_tracking'
op|'('
name|'self'
op|','
name|'fields'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fields'
name|'is'
name|'None'
name|'or'
string|"'system_metadata'"
name|'in'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_orig_system_metadata'
op|'='
op|'('
name|'dict'
op|'('
name|'self'
op|'.'
name|'system_metadata'
op|')'
name|'if'
nl|'\n'
string|"'system_metadata'"
name|'in'
name|'self'
name|'else'
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'fields'
name|'is'
name|'None'
name|'or'
string|"'metadata'"
name|'in'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_orig_metadata'
op|'='
op|'('
name|'dict'
op|'('
name|'self'
op|'.'
name|'metadata'
op|')'
name|'if'
nl|'\n'
string|"'metadata'"
name|'in'
name|'self'
name|'else'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_reset_changes
dedent|''
dedent|''
name|'def'
name|'obj_reset_changes'
op|'('
name|'self'
op|','
name|'fields'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'obj_reset_changes'
op|'('
name|'fields'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reset_metadata_tracking'
op|'('
name|'fields'
op|'='
name|'fields'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_what_changed
dedent|''
name|'def'
name|'obj_what_changed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'changes'
op|'='
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'metadata'"
name|'in'
name|'self'
name|'and'
name|'self'
op|'.'
name|'metadata'
op|'!='
name|'self'
op|'.'
name|'_orig_metadata'
op|':'
newline|'\n'
indent|'            '
name|'changes'
op|'.'
name|'add'
op|'('
string|"'metadata'"
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'system_metadata'"
name|'in'
name|'self'
name|'and'
op|'('
name|'self'
op|'.'
name|'system_metadata'
op|'!='
nl|'\n'
name|'self'
op|'.'
name|'_orig_system_metadata'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'changes'
op|'.'
name|'add'
op|'('
string|"'system_metadata'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'changes'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_obj_from_primitive
name|'def'
name|'_obj_from_primitive'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'objver'
op|','
name|'primitive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'='
name|'super'
op|'('
name|'Instance'
op|','
name|'cls'
op|')'
op|'.'
name|'_obj_from_primitive'
op|'('
name|'context'
op|','
name|'objver'
op|','
nl|'\n'
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reset_metadata_tracking'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|obj_make_compatible
dedent|''
name|'def'
name|'obj_make_compatible'
op|'('
name|'self'
op|','
name|'primitive'
op|','
name|'target_version'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'obj_make_compatible'
op|'('
name|'primitive'
op|','
name|'target_version'
op|')'
newline|'\n'
name|'target_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'target_version'
op|')'
newline|'\n'
name|'unicode_attributes'
op|'='
op|'['
string|"'user_id'"
op|','
string|"'project_id'"
op|','
string|"'image_ref'"
op|','
nl|'\n'
string|"'kernel_id'"
op|','
string|"'ramdisk_id'"
op|','
string|"'hostname'"
op|','
nl|'\n'
string|"'key_name'"
op|','
string|"'key_data'"
op|','
string|"'host'"
op|','
string|"'node'"
op|','
nl|'\n'
string|"'user_data'"
op|','
string|"'availability_zone'"
op|','
nl|'\n'
string|"'display_name'"
op|','
string|"'display_description'"
op|','
nl|'\n'
string|"'launched_on'"
op|','
string|"'locked_by'"
op|','
string|"'os_type'"
op|','
nl|'\n'
string|"'architecture'"
op|','
string|"'vm_mode'"
op|','
string|"'root_device_name'"
op|','
nl|'\n'
string|"'default_ephemeral_device'"
op|','
nl|'\n'
string|"'default_swap_device'"
op|','
string|"'config_drive'"
op|','
nl|'\n'
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'target_version'
op|'<'
op|'('
number|'1'
op|','
number|'7'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(danms): Before 1.7, we couldn't handle unicode in"
nl|'\n'
comment|'# string fields, so squash it here'
nl|'\n'
indent|'            '
name|'for'
name|'field'
name|'in'
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'unicode_attributes'
name|'if'
name|'x'
name|'in'
name|'primitive'
nl|'\n'
name|'and'
name|'primitive'
op|'['
name|'x'
op|']'
name|'is'
name|'not'
name|'None'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'primitive'
op|'['
name|'field'
op|']'
op|'='
name|'primitive'
op|'['
name|'field'
op|']'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|','
string|"'replace'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'target_version'
op|'<'
op|'('
number|'1'
op|','
number|'18'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'system_metadata'"
name|'in'
name|'primitive'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'ftype'
name|'in'
op|'('
string|"''"
op|','
string|"'old_'"
op|','
string|"'new_'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'attrname'
op|'='
string|"'%sflavor'"
op|'%'
name|'ftype'
newline|'\n'
name|'primitive'
op|'.'
name|'pop'
op|'('
name|'attrname'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'['
name|'attrname'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
nl|'\n'
name|'primitive'
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
name|'getattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|','
name|'ftype'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|name
name|'def'
name|'name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'base_name'
op|'='
name|'CONF'
op|'.'
name|'instance_name_template'
op|'%'
name|'self'
op|'.'
name|'id'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# Support templates like "uuid-%(uuid)s", etc.'
nl|'\n'
indent|'            '
name|'info'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|"# NOTE(russellb): Don't use self.iteritems() here, as it will"
nl|'\n'
comment|'# result in infinite recursion on the name property.'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
op|'=='
string|"'name'"
op|':'
newline|'\n'
comment|'# NOTE(danms): prevent recursion'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(danms): Don't trigger lazy-loads"
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'info'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'base_name'
op|'='
name|'CONF'
op|'.'
name|'instance_name_template'
op|'%'
name|'info'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'base_name'
op|'='
name|'self'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'base_name'
newline|'\n'
nl|'\n'
DECL|member|_flavor_from_db
dedent|''
name|'def'
name|'_flavor_from_db'
op|'('
name|'self'
op|','
name|'db_flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load instance flavor information from instance_extra."""'
newline|'\n'
nl|'\n'
name|'flavor_info'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'db_flavor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'obj_from_primitive'
op|'('
name|'flavor_info'
op|'['
string|"'cur'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'flavor_info'
op|'['
string|"'old'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'old_flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'obj_from_primitive'
op|'('
nl|'\n'
name|'flavor_info'
op|'['
string|"'old'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'old_flavor'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'flavor_info'
op|'['
string|"'new'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'new_flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'obj_from_primitive'
op|'('
nl|'\n'
name|'flavor_info'
op|'['
string|"'new'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'new_flavor'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'flavor'"
op|','
string|"'old_flavor'"
op|','
string|"'new_flavor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_from_db_object
name|'def'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'db_inst'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Method to help with migration to objects.\n\n        Converts a database entity to a formal object.\n        """'
newline|'\n'
name|'instance'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'if'
name|'expected_attrs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# Most of the field names match right now, so be quick'
nl|'\n'
dedent|''
name|'for'
name|'field'
name|'in'
name|'instance'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'field'
name|'in'
name|'INSTANCE_OPTIONAL_ATTRS'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'field'
op|'=='
string|"'deleted'"
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'deleted'
op|'='
name|'db_inst'
op|'['
string|"'deleted'"
op|']'
op|'=='
name|'db_inst'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'field'
op|'=='
string|"'cleaned'"
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'cleaned'
op|'='
name|'db_inst'
op|'['
string|"'cleaned'"
op|']'
op|'=='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'field'
op|'=='
string|"'scheduled_at'"
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'scheduled_at'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'['
name|'field'
op|']'
op|'='
name|'db_inst'
op|'['
name|'field'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): We can be called with a dict instead of a'
nl|'\n'
comment|'# SQLAlchemy object, so we have to be careful here'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'db_inst'
op|','
string|"'__dict__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'have_extra'
op|'='
string|"'extra'"
name|'in'
name|'db_inst'
op|'.'
name|'__dict__'
name|'and'
name|'db_inst'
op|'['
string|"'extra'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'have_extra'
op|'='
string|"'extra'"
name|'in'
name|'db_inst'
name|'and'
name|'db_inst'
op|'['
string|"'extra'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'metadata'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|'='
name|'utils'
op|'.'
name|'instance_meta'
op|'('
name|'db_inst'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'system_metadata'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'='
name|'utils'
op|'.'
name|'instance_sys_meta'
op|'('
name|'db_inst'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'fault'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'['
string|"'fault'"
op|']'
op|'='
op|'('
nl|'\n'
name|'objects'
op|'.'
name|'InstanceFault'
op|'.'
name|'get_latest_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'numa_topology'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'have_extra'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'_load_numa_topology'
op|'('
nl|'\n'
name|'db_inst'
op|'['
string|"'extra'"
op|']'
op|'.'
name|'get'
op|'('
string|"'numa_topology'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'numa_topology'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'pci_requests'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'have_extra'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'_load_pci_requests'
op|'('
nl|'\n'
name|'db_inst'
op|'['
string|"'extra'"
op|']'
op|'.'
name|'get'
op|'('
string|"'pci_requests'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'pci_requests'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'vcpu_model'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'have_extra'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'_load_vcpu_model'
op|'('
nl|'\n'
name|'db_inst'
op|'['
string|"'extra'"
op|']'
op|'.'
name|'get'
op|'('
string|"'vcpu_model'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'vcpu_model'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'ec2_ids'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'_load_ec2_ids'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'info_cache'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'db_inst'
op|'['
string|"'info_cache'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'info_cache'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'instance'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'info_cache'"
op|')'
op|':'
newline|'\n'
comment|'# TODO(danms): If this ever happens on a backlevel instance'
nl|'\n'
comment|'# passed to us by a backlevel service, things will break'
nl|'\n'
indent|'                '
name|'instance'
op|'.'
name|'info_cache'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'info_cache'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|','
nl|'\n'
name|'db_inst'
op|'['
string|"'info_cache'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'any'
op|'('
op|'['
name|'x'
name|'in'
name|'expected_attrs'
name|'for'
name|'x'
name|'in'
op|'('
string|"'flavor'"
op|','
nl|'\n'
string|"'old_flavor'"
op|','
nl|'\n'
string|"'new_flavor'"
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'have_extra'
name|'and'
name|'db_inst'
op|'['
string|"'extra'"
op|']'
op|'.'
name|'get'
op|'('
string|"'flavor'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'_flavor_from_db'
op|'('
name|'db_inst'
op|'['
string|"'extra'"
op|']'
op|'['
string|"'flavor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(danms): If we are updating these on a backlevel instance,'
nl|'\n'
comment|"# we'll end up sending back new versions of these objects (see"
nl|'\n'
comment|'# above note for new info_caches'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'pci_devices'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'pci_devices'
op|'='
name|'base'
op|'.'
name|'obj_make_list'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'PciDeviceList'
op|'('
name|'context'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'PciDevice'
op|','
name|'db_inst'
op|'['
string|"'pci_devices'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'pci_devices'"
op|']'
op|'='
name|'pci_devices'
newline|'\n'
dedent|''
name|'if'
string|"'security_groups'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'sec_groups'
op|'='
name|'base'
op|'.'
name|'obj_make_list'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
name|'context'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'SecurityGroup'
op|','
name|'db_inst'
op|'['
string|"'security_groups'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'security_groups'"
op|']'
op|'='
name|'sec_groups'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'tags'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'tags'
op|'='
name|'base'
op|'.'
name|'obj_make_list'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'TagList'
op|'('
name|'context'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Tag'
op|','
name|'db_inst'
op|'['
string|"'tags'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'tags'"
op|']'
op|'='
name|'tags'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_uuid
name|'def'
name|'get_by_uuid'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'uuid'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'expected_attrs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'='
op|'['
string|"'info_cache'"
op|','
string|"'security_groups'"
op|']'
newline|'\n'
dedent|''
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
newline|'\n'
name|'db_inst'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'uuid'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'columns_to_join'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_id
name|'def'
name|'get_by_id'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'inst_id'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'expected_attrs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'='
op|'['
string|"'info_cache'"
op|','
string|"'security_groups'"
op|']'
newline|'\n'
dedent|''
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
newline|'\n'
name|'db_inst'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'inst_id'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'columns_to_join'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
name|'action'
op|'='
string|"'create'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'already created'"
op|')'
newline|'\n'
dedent|''
name|'updates'
op|'='
name|'self'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
newline|'\n'
name|'expected_attrs'
op|'='
op|'['
name|'attr'
name|'for'
name|'attr'
name|'in'
name|'INSTANCE_DEFAULT_FIELDS'
nl|'\n'
name|'if'
name|'attr'
name|'in'
name|'updates'
op|']'
newline|'\n'
name|'if'
string|"'scheduled_at'"
name|'in'
name|'updates'
op|':'
newline|'\n'
comment|"# NOTE(sbiswas7): 'scheduled_at' is not present in models."
nl|'\n'
indent|'            '
name|'del'
name|'updates'
op|'['
string|"'scheduled_at'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'security_groups'"
name|'in'
name|'updates'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|'['
string|"'security_groups'"
op|']'
op|'='
op|'['
name|'x'
op|'.'
name|'name'
name|'for'
name|'x'
name|'in'
nl|'\n'
name|'updates'
op|'['
string|"'security_groups'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'info_cache'"
name|'in'
name|'updates'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|'['
string|"'info_cache'"
op|']'
op|'='
op|'{'
nl|'\n'
string|"'network_info'"
op|':'
name|'updates'
op|'['
string|"'info_cache'"
op|']'
op|'.'
name|'network_info'
op|'.'
name|'json'
op|'('
op|')'
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'updates'
op|'['
string|"'extra'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'numa_topology'
op|'='
name|'updates'
op|'.'
name|'pop'
op|'('
string|"'numa_topology'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'numa_topology'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'.'
name|'append'
op|'('
string|"'numa_topology'"
op|')'
newline|'\n'
name|'updates'
op|'['
string|"'extra'"
op|']'
op|'['
string|"'numa_topology'"
op|']'
op|'='
name|'numa_topology'
op|'.'
name|'_to_json'
op|'('
op|')'
newline|'\n'
dedent|''
name|'pci_requests'
op|'='
name|'updates'
op|'.'
name|'pop'
op|'('
string|"'pci_requests'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'pci_requests'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'.'
name|'append'
op|'('
string|"'pci_requests'"
op|')'
newline|'\n'
name|'updates'
op|'['
string|"'extra'"
op|']'
op|'['
string|"'pci_requests'"
op|']'
op|'='
op|'('
nl|'\n'
name|'pci_requests'
op|'.'
name|'to_json'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'flavor'
op|'='
name|'updates'
op|'.'
name|'pop'
op|'('
string|"'flavor'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'flavor'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'.'
name|'append'
op|'('
string|"'flavor'"
op|')'
newline|'\n'
name|'old'
op|'='
op|'('
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'old_flavor'"
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'old_flavor'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'old_flavor'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
name|'or'
name|'None'
op|')'
newline|'\n'
name|'new'
op|'='
op|'('
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'new_flavor'"
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'new_flavor'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'new_flavor'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
name|'or'
name|'None'
op|')'
newline|'\n'
name|'flavor_info'
op|'='
op|'{'
nl|'\n'
string|"'cur'"
op|':'
name|'self'
op|'.'
name|'flavor'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
nl|'\n'
string|"'old'"
op|':'
name|'old'
op|','
nl|'\n'
string|"'new'"
op|':'
name|'new'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'updates'
op|'['
string|"'extra'"
op|']'
op|'['
string|"'flavor'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'flavor_info'
op|')'
newline|'\n'
dedent|''
name|'vcpu_model'
op|'='
name|'updates'
op|'.'
name|'pop'
op|'('
string|"'vcpu_model'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'vcpu_model'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'.'
name|'append'
op|'('
string|"'vcpu_model'"
op|')'
newline|'\n'
name|'updates'
op|'['
string|"'extra'"
op|']'
op|'['
string|"'vcpu_model'"
op|']'
op|'='
op|'('
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'vcpu_model'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'db_inst'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'updates'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_from_db_object'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|','
name|'db_inst'
op|','
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|destroy
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
name|'action'
op|'='
string|"'destroy'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'already destroyed'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'uuid'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
name|'action'
op|'='
string|"'destroy'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'no uuid'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'host'"
op|')'
name|'or'
name|'not'
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# NOTE(danms): If our host is not set, avoid a race'
nl|'\n'
indent|'            '
name|'constraint'
op|'='
name|'db'
op|'.'
name|'constraint'
op|'('
name|'host'
op|'='
name|'db'
op|'.'
name|'equal_any'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'constraint'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'cell_type'
op|'='
name|'cells_opts'
op|'.'
name|'get_cell_type'
op|'('
op|')'
newline|'\n'
name|'if'
name|'cell_type'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'stale_instance'
op|'='
name|'self'
op|'.'
name|'obj_clone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db_inst'
op|'='
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'constraint'
op|'='
name|'constraint'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_from_db_object'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|','
name|'db_inst'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ConstraintNotMet'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
name|'action'
op|'='
string|"'destroy'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'host changed'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cell_type'
op|'=='
string|"'compute'"
op|':'
newline|'\n'
indent|'            '
name|'cells_api'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
name|'cells_api'
op|'.'
name|'instance_destroy_at_top'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'stale_instance'
op|')'
newline|'\n'
dedent|''
name|'delattr'
op|'('
name|'self'
op|','
name|'base'
op|'.'
name|'get_attrname'
op|'('
string|"'id'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_info_cache
dedent|''
name|'def'
name|'_save_info_cache'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'info_cache'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'self'
op|'.'
name|'info_cache'
op|'.'
name|'obj_alternate_context'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'info_cache'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_security_groups
dedent|''
dedent|''
dedent|''
name|'def'
name|'_save_security_groups'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_groups'
op|'='
name|'self'
op|'.'
name|'security_groups'
name|'or'
op|'['
op|']'
newline|'\n'
name|'for'
name|'secgroup'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'secgroup'
op|'.'
name|'obj_alternate_context'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'secgroup'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'security_groups'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_fault
dedent|''
name|'def'
name|'_save_fault'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(danms): I don't think we need to worry about this, do we?"
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_save_numa_topology
dedent|''
name|'def'
name|'_save_numa_topology'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'numa_topology'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'numa_topology'
op|'.'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'uuid'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'numa_topology'
op|'.'
name|'obj_alternate_context'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'numa_topology'
op|'.'
name|'_save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'objects'
op|'.'
name|'InstanceNUMATopology'
op|'.'
name|'delete_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_pci_requests
dedent|''
dedent|''
name|'def'
name|'_save_pci_requests'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): No need for this yet.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_save_pci_devices
dedent|''
name|'def'
name|'_save_pci_devices'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(yjiang5): All devices held by PCI tracker, only PCI tracker'
nl|'\n'
comment|'# permitted to update the DB. all change to devices from here will'
nl|'\n'
comment|'# be dropped.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_save_flavor
dedent|''
name|'def'
name|'_save_flavor'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'any'
op|'('
op|'['
name|'x'
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
nl|'\n'
op|'('
string|"'flavor'"
op|','
string|"'old_flavor'"
op|','
string|"'new_flavor'"
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
comment|'# FIXME(danms): We can do this smarterly by updating this'
nl|'\n'
comment|'# with all the other extra things at the same time'
nl|'\n'
dedent|''
name|'flavor_info'
op|'='
op|'{'
nl|'\n'
string|"'cur'"
op|':'
name|'self'
op|'.'
name|'flavor'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
nl|'\n'
string|"'old'"
op|':'
op|'('
name|'self'
op|'.'
name|'old_flavor'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'old_flavor'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
name|'or'
name|'None'
op|')'
op|','
nl|'\n'
string|"'new'"
op|':'
op|'('
name|'self'
op|'.'
name|'new_flavor'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'new_flavor'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
name|'or'
name|'None'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_extra_update_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'flavor'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'flavor_info'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'flavor'"
op|','
string|"'old_flavor'"
op|','
string|"'new_flavor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_old_flavor
dedent|''
name|'def'
name|'_save_old_flavor'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'old_flavor'"
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_save_flavor'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_new_flavor
dedent|''
dedent|''
name|'def'
name|'_save_new_flavor'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'new_flavor'"
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_save_flavor'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_vcpu_model
dedent|''
dedent|''
name|'def'
name|'_save_vcpu_model'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|'# TODO(yjiang5): should merge the db accesses for all the extra'
nl|'\n'
comment|'# fields'
nl|'\n'
indent|'        '
name|'if'
string|"'vcpu_model'"
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'vcpu_model'
op|':'
newline|'\n'
indent|'                '
name|'update'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'vcpu_model'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'update'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'db'
op|'.'
name|'instance_extra_update_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'vcpu_model'"
op|':'
name|'update'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_ec2_ids
dedent|''
dedent|''
name|'def'
name|'_save_ec2_ids'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(hanlind): Read-only so no need to save this.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|save
name|'def'
name|'save'
op|'('
name|'self'
op|','
name|'expected_vm_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|','
name|'admin_state_reset'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save updates to this instance\n\n        Column-wise updates will be made based on the result of\n        self.what_changed(). If expected_task_state is provided,\n        it will be checked against the in-database copy of the\n        instance before updates are made.\n\n        :param:context: Security context\n        :param:expected_task_state: Optional tuple of valid task states\n        for the instance to be in\n        :param:expected_vm_state: Optional tuple of valid vm states\n        for the instance to be in\n        :param admin_state_reset: True if admin API is forcing setting\n        of task_state/vm_state\n\n        """'
newline|'\n'
comment|'# Store this on the class because _cell_name_blocks_sync is useless'
nl|'\n'
comment|'# after the db update call below.'
nl|'\n'
name|'self'
op|'.'
name|'_sync_cells'
op|'='
name|'not'
name|'self'
op|'.'
name|'_cell_name_blocks_sync'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'_context'
newline|'\n'
name|'cell_type'
op|'='
name|'cells_opts'
op|'.'
name|'get_cell_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cell_type'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# NOTE(comstud): We need to stash a copy of ourselves'
nl|'\n'
comment|'# before any updates are applied.  When we call the save'
nl|'\n'
comment|'# methods on nested objects, we will lose any changes to'
nl|'\n'
comment|'# them.  But we need to make sure child cells can tell'
nl|'\n'
comment|'# what is changed.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# We also need to nuke any updates to vm_state and task_state'
nl|'\n'
comment|'# unless admin_state_reset is True.  compute cells are'
nl|'\n'
comment|'# authoritative for their view of vm_state and task_state.'
nl|'\n'
indent|'            '
name|'stale_instance'
op|'='
name|'self'
op|'.'
name|'obj_clone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cells_update_from_api'
op|'='
op|'('
name|'cell_type'
op|'=='
string|"'api'"
name|'and'
name|'self'
op|'.'
name|'cell_name'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_sync_cells'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cells_update_from_api'
op|':'
newline|'\n'
DECL|function|_handle_cell_update_from_api
indent|'            '
name|'def'
name|'_handle_cell_update_from_api'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cells_api'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
name|'cells_api'
op|'.'
name|'instance_update_from_api'
op|'('
name|'context'
op|','
name|'stale_instance'
op|','
nl|'\n'
name|'expected_vm_state'
op|','
nl|'\n'
name|'expected_task_state'
op|','
nl|'\n'
name|'admin_state_reset'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'updates'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'changes'
op|'='
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'scheduled_at'"
name|'in'
name|'changes'
op|':'
newline|'\n'
comment|"# NOTE(sbiswas7): Since 'scheduled_at' is removed from models,"
nl|'\n'
comment|'# we need to discard it.'
nl|'\n'
indent|'            '
name|'changes'
op|'.'
name|'remove'
op|'('
string|"'scheduled_at'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'field'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
comment|'# NOTE(danms): For object fields, we construct and call a'
nl|'\n'
comment|'# helper method like self._save_$attrname()'
nl|'\n'
indent|'            '
name|'if'
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'field'
op|')'
name|'and'
nl|'\n'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'fields'
op|'['
name|'field'
op|']'
op|','
name|'fields'
op|'.'
name|'ObjectField'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'getattr'
op|'('
name|'self'
op|','
string|"'_save_%s'"
op|'%'
name|'field'
op|')'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'No save handler for %s'"
op|')'
op|','
name|'field'
op|','
nl|'\n'
name|'instance'
op|'='
name|'self'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'db_exc'
op|'.'
name|'DBReferenceError'
op|':'
newline|'\n'
comment|'# NOTE(melwitt): This will happen if we instance.save()'
nl|'\n'
comment|'# before an instance.create() and FK constraint fails.'
nl|'\n'
comment|'# In practice, this occurs in cells during a delete of'
nl|'\n'
comment|'# an unscheduled instance. Otherwise, it could happen'
nl|'\n'
comment|'# as a result of bug.'
nl|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'field'
name|'in'
name|'changes'
op|':'
newline|'\n'
indent|'                '
name|'if'
op|'('
name|'field'
op|'=='
string|"'cell_name'"
name|'and'
name|'self'
op|'['
name|'field'
op|']'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'self'
op|'['
name|'field'
op|']'
op|'.'
name|'startswith'
op|'('
name|'cells_utils'
op|'.'
name|'BLOCK_SYNC_FLAG'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'updates'
op|'['
name|'field'
op|']'
op|'='
name|'self'
op|'['
name|'field'
op|']'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'cells_utils'
op|'.'
name|'BLOCK_SYNC_FLAG'
op|','
string|"''"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'updates'
op|'['
name|'field'
op|']'
op|'='
name|'self'
op|'['
name|'field'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'updates'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cells_update_from_api'
op|':'
newline|'\n'
indent|'                '
name|'_handle_cell_update_from_api'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
comment|'# Cleaned needs to be turned back into an int here'
nl|'\n'
dedent|''
name|'if'
string|"'cleaned'"
name|'in'
name|'updates'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'updates'
op|'['
string|"'cleaned'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'updates'
op|'['
string|"'cleaned'"
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'updates'
op|'['
string|"'cleaned'"
op|']'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'expected_task_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'self'
op|'.'
name|'VERSION'
op|'=='
string|"'1.9'"
name|'and'
nl|'\n'
name|'expected_task_state'
op|'=='
string|"'image_snapshot'"
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): Icehouse introduced a pending state which'
nl|'\n'
comment|"# Havana doesn't know about. If we're an old instance,"
nl|'\n'
comment|'# tolerate the pending state as well'
nl|'\n'
indent|'                '
name|'expected_task_state'
op|'='
op|'['
nl|'\n'
name|'expected_task_state'
op|','
string|"'image_snapshot_pending'"
op|']'
newline|'\n'
dedent|''
name|'updates'
op|'['
string|"'expected_task_state'"
op|']'
op|'='
name|'expected_task_state'
newline|'\n'
dedent|''
name|'if'
name|'expected_vm_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|'['
string|"'expected_vm_state'"
op|']'
op|'='
name|'expected_vm_state'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_attrs'
op|'='
op|'['
name|'attr'
name|'for'
name|'attr'
name|'in'
name|'_INSTANCE_OPTIONAL_JOINED_FIELDS'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'attr'
op|')'
op|']'
newline|'\n'
name|'if'
string|"'pci_devices'"
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
comment|"# NOTE(danms): We don't refresh pci_devices on save right now"
nl|'\n'
indent|'            '
name|'expected_attrs'
op|'.'
name|'remove'
op|'('
string|"'pci_devices'"
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(alaski): We need to pull system_metadata for the'
nl|'\n'
comment|"# notification.send_update() below.  If we don't there's a KeyError"
nl|'\n'
comment|'# when it tries to extract the flavor.'
nl|'\n'
comment|'# NOTE(danms): If we have sysmeta, we need flavor since the caller'
nl|'\n'
comment|'# might be expecting flavor information as a result'
nl|'\n'
dedent|''
name|'if'
string|"'system_metadata'"
name|'not'
name|'in'
name|'expected_attrs'
op|':'
newline|'\n'
indent|'            '
name|'expected_attrs'
op|'.'
name|'append'
op|'('
string|"'system_metadata'"
op|')'
newline|'\n'
name|'expected_attrs'
op|'.'
name|'append'
op|'('
string|"'flavor'"
op|')'
newline|'\n'
dedent|''
name|'old_ref'
op|','
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
name|'updates'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'self'
op|','
name|'inst_ref'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cells_update_from_api'
op|':'
newline|'\n'
indent|'            '
name|'_handle_cell_update_from_api'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'cell_type'
op|'=='
string|"'compute'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_sync_cells'
op|':'
newline|'\n'
indent|'                '
name|'cells_api'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
name|'cells_api'
op|'.'
name|'instance_update_at_top'
op|'('
name|'context'
op|','
name|'stale_instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): We have to be super careful here not to trigger'
nl|'\n'
comment|'# any lazy-loads that will unmigrate or unbackport something. So,'
nl|'\n'
comment|'# make a copy of the instance for notifications first.'
nl|'\n'
dedent|''
dedent|''
name|'new_ref'
op|'='
name|'self'
op|'.'
name|'obj_clone'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'notifications'
op|'.'
name|'send_update'
op|'('
name|'context'
op|','
name|'old_ref'
op|','
name|'new_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|refresh
name|'def'
name|'refresh'
op|'('
name|'self'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'extra'
op|'='
op|'['
name|'field'
name|'for'
name|'field'
name|'in'
name|'INSTANCE_OPTIONAL_ATTRS'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'field'
op|')'
op|']'
newline|'\n'
name|'current'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'uuid'
op|'='
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
comment|'# NOTE(danms): We orphan the instance copy so we do not unexpectedly'
nl|'\n'
comment|'# trigger a lazy-load (which would mean we failed to calculate the'
nl|'\n'
comment|'# expected_attrs properly)'
nl|'\n'
name|'current'
op|'.'
name|'_context'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'field'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'field'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'field'
op|'=='
string|"'info_cache'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'info_cache'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'['
name|'field'
op|']'
op|'!='
name|'current'
op|'['
name|'field'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'['
name|'field'
op|']'
op|'='
name|'current'
op|'['
name|'field'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_generic
dedent|''
name|'def'
name|'_load_generic'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
name|'attrname'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Never allow us to recursively-load'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'attrname'
op|']'
op|'='
name|'instance'
op|'['
name|'attrname'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
nl|'\n'
name|'action'
op|'='
string|"'obj_load_attr'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'loading %s requires recursion'"
op|'%'
name|'attrname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_fault
dedent|''
dedent|''
name|'def'
name|'_load_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fault'
op|'='
name|'objects'
op|'.'
name|'InstanceFault'
op|'.'
name|'get_latest_for_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_numa_topology
dedent|''
name|'def'
name|'_load_numa_topology'
op|'('
name|'self'
op|','
name|'db_topology'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'db_topology'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'numa_topology'
op|'='
name|'objects'
op|'.'
name|'InstanceNUMATopology'
op|'.'
name|'obj_from_db_obj'
op|'('
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'db_topology'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'numa_topology'
op|'='
name|'objects'
op|'.'
name|'InstanceNUMATopology'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NumaTopologyNotFound'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'numa_topology'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_load_pci_requests
dedent|''
dedent|''
dedent|''
name|'def'
name|'_load_pci_requests'
op|'('
name|'self'
op|','
name|'db_requests'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: also do this if none!'
nl|'\n'
indent|'        '
name|'if'
name|'db_requests'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pci_requests'
op|'='
name|'objects'
op|'.'
name|'InstancePCIRequests'
op|'.'
name|'obj_from_db'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
name|'db_requests'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pci_requests'
op|'='
name|'objects'
op|'.'
name|'InstancePCIRequests'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_flavor
dedent|''
dedent|''
name|'def'
name|'_load_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'uuid'
op|'='
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'flavor'"
op|','
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# NOTE(danms): Before we had instance types in system_metadata,'
nl|'\n'
comment|'# we just looked up the instance_type_id. Since we could still'
nl|'\n'
comment|"# have an instance in the database that doesn't have either"
nl|'\n'
comment|'# newer setup, mirror the original behavior here if the instance'
nl|'\n'
comment|'# is deleted'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'deleted'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_id'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'old_flavor'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'new_flavor'
op|'='
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|"# NOTE(danms): Orphan the instance to make sure we don't lazy-load"
nl|'\n'
comment|'# anything below'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'_context'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'='
name|'instance'
op|'.'
name|'flavor'
newline|'\n'
name|'self'
op|'.'
name|'old_flavor'
op|'='
name|'instance'
op|'.'
name|'old_flavor'
newline|'\n'
name|'self'
op|'.'
name|'new_flavor'
op|'='
name|'instance'
op|'.'
name|'new_flavor'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): The query above may have migrated the flavor from'
nl|'\n'
comment|'# system_metadata. Since we have it anyway, go ahead and refresh'
nl|'\n'
comment|'# our system_metadata from it so that a save will be accurate.'
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'get'
op|'('
string|"'system_metadata'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
DECL|member|_load_vcpu_model
dedent|''
name|'def'
name|'_load_vcpu_model'
op|'('
name|'self'
op|','
name|'db_vcpu_model'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'db_vcpu_model'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vcpu_model'
op|'='
name|'objects'
op|'.'
name|'VirtCPUModel'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'db_vcpu_model'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'db_vcpu_model'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vcpu_model'
op|'='
name|'objects'
op|'.'
name|'VirtCPUModel'
op|'.'
name|'obj_from_primitive'
op|'('
nl|'\n'
name|'db_vcpu_model'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_ec2_ids
dedent|''
dedent|''
name|'def'
name|'_load_ec2_ids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ec2_ids'
op|'='
name|'objects'
op|'.'
name|'EC2Ids'
op|'.'
name|'get_by_instance'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_load_attr
dedent|''
name|'def'
name|'obj_load_attr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attrname'
name|'not'
name|'in'
name|'INSTANCE_OPTIONAL_ATTRS'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
nl|'\n'
name|'action'
op|'='
string|"'obj_load_attr'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'attribute %s not lazy-loadable'"
op|'%'
name|'attrname'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_context'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'OrphanedObjectError'
op|'('
name|'method'
op|'='
string|"'obj_load_attr'"
op|','
nl|'\n'
name|'objtype'
op|'='
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Lazy-loading `%(attr)s\' on %(name)s uuid %(uuid)s"'
op|','
nl|'\n'
op|'{'
string|"'attr'"
op|':'
name|'attrname'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'self'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): We handle some fields differently here so that we'
nl|'\n'
comment|'# can be more efficient'
nl|'\n'
name|'if'
name|'attrname'
op|'=='
string|"'fault'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_fault'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'attrname'
op|'=='
string|"'numa_topology'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_numa_topology'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'attrname'
op|'=='
string|"'pci_requests'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_pci_requests'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'attrname'
op|'=='
string|"'vcpu_model'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_vcpu_model'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'attrname'
op|'=='
string|"'ec2_ids'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_ec2_ids'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'flavor'"
name|'in'
name|'attrname'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_flavor'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# FIXME(comstud): This should be optimized to only load the attr.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_generic'
op|'('
name|'attrname'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
name|'attrname'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_flavor
dedent|''
name|'def'
name|'get_flavor'
op|'('
name|'self'
op|','
name|'namespace'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
op|'('
string|"'%s_'"
op|'%'
name|'namespace'
op|')'
name|'if'
name|'namespace'
name|'is'
name|'not'
name|'None'
name|'else'
string|"''"
newline|'\n'
name|'attr'
op|'='
string|"'%sflavor'"
op|'%'
name|'prefix'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FlavorNotFound'
op|':'
newline|'\n'
comment|"# NOTE(danms): This only happens in the case where we don't"
nl|'\n'
comment|'# have flavor information in sysmeta or extra, and doing'
nl|'\n'
comment|'# this triggers a lookup based on our instance_type_id for'
nl|'\n'
comment|'# (very) legacy instances. That legacy code expects a None here,'
nl|'\n'
comment|'# so emulate it for this helper, even though the actual attribute'
nl|'\n'
comment|'# is not nullable.'
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|set_flavor
dedent|''
dedent|''
name|'def'
name|'set_flavor'
op|'('
name|'self'
op|','
name|'flavor'
op|','
name|'namespace'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
op|'('
string|"'%s_'"
op|'%'
name|'namespace'
op|')'
name|'if'
name|'namespace'
name|'is'
name|'not'
name|'None'
name|'else'
string|"''"
newline|'\n'
name|'attr'
op|'='
string|"'%sflavor'"
op|'%'
name|'prefix'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'flavor'
op|','
name|'objects'
op|'.'
name|'Flavor'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|'**'
name|'flavor'
op|')'
newline|'\n'
dedent|''
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_flavor
dedent|''
name|'def'
name|'delete_flavor'
op|'('
name|'self'
op|','
name|'namespace'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
op|'('
string|"'%s_'"
op|'%'
name|'namespace'
op|')'
name|'if'
name|'namespace'
name|'else'
string|"''"
newline|'\n'
name|'attr'
op|'='
string|"'%sflavor'"
op|'%'
name|'prefix'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|delete_metadata_key
name|'def'
name|'delete_metadata_key'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Optimized metadata delete method.\n\n        This provides a more efficient way to delete a single metadata\n        key, instead of just calling instance.save(). This should be called\n        with the key still present in self.metadata, which it will update\n        after completion.\n        """'
newline|'\n'
name|'db'
op|'.'
name|'instance_metadata_delete'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
name|'key'
op|')'
newline|'\n'
name|'md_was_changed'
op|'='
string|"'metadata'"
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'metadata'
op|'['
name|'key'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_orig_metadata'
op|'.'
name|'pop'
op|'('
name|'key'
op|','
name|'None'
op|')'
newline|'\n'
name|'notifications'
op|'.'
name|'send_update'
op|'('
name|'self'
op|'.'
name|'_context'
op|','
name|'self'
op|','
name|'self'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'md_was_changed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cell_name_blocks_sync
dedent|''
dedent|''
name|'def'
name|'_cell_name_blocks_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'cell_name'"
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'cell_name'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'cell_name'
op|'.'
name|'startswith'
op|'('
name|'cells_utils'
op|'.'
name|'BLOCK_SYNC_FLAG'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_normalize_cell_name
dedent|''
name|'def'
name|'_normalize_cell_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Undo skip_cell_sync()\'s cell_name modification if applied"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'cell_name'"
op|')'
name|'or'
name|'self'
op|'.'
name|'cell_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'cn_changed'
op|'='
string|"'cell_name'"
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'cell_name'
op|'.'
name|'startswith'
op|'('
name|'cells_utils'
op|'.'
name|'BLOCK_SYNC_FLAG'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cell_name'
op|'='
name|'self'
op|'.'
name|'cell_name'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'cells_utils'
op|'.'
name|'BLOCK_SYNC_FLAG'
op|','
string|"''"
op|','
number|'1'
op|')'
newline|'\n'
comment|'# cell_name is not normally an empty string, this means it was None'
nl|'\n'
comment|'# or unset before cells_utils.BLOCK_SYNC_FLAG was applied.'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'cell_name'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'cell_name'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'cn_changed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'cell_name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|skip_cells_sync
name|'def'
name|'skip_cells_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Context manager to save an instance without syncing cells.\n\n        Temporarily disables the cells syncing logic, if enabled.  This should\n        only be used when saving an instance that has been passed down/up from\n        another cell in order to avoid passing it back to the originator to be\n        re-saved.\n        """'
newline|'\n'
name|'cn_changed'
op|'='
string|"'cell_name'"
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'cell_name'"
op|')'
name|'or'
name|'self'
op|'.'
name|'cell_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cell_name'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cell_name'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'cells_utils'
op|'.'
name|'BLOCK_SYNC_FLAG'
op|','
name|'self'
op|'.'
name|'cell_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cn_changed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'cell_name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_normalize_cell_name'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_make_instance_list
dedent|''
dedent|''
dedent|''
name|'def'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'inst_list'
op|','
name|'db_inst_list'
op|','
name|'expected_attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'get_fault'
op|'='
name|'expected_attrs'
name|'and'
string|"'fault'"
name|'in'
name|'expected_attrs'
newline|'\n'
name|'inst_faults'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'get_fault'
op|':'
newline|'\n'
comment|'# Build an instance_uuid:latest-fault mapping'
nl|'\n'
indent|'        '
name|'expected_attrs'
op|'.'
name|'remove'
op|'('
string|"'fault'"
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'inst'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'inst'
name|'in'
name|'db_inst_list'
op|']'
newline|'\n'
name|'faults'
op|'='
name|'objects'
op|'.'
name|'InstanceFaultList'
op|'.'
name|'get_by_instance_uuids'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'for'
name|'fault'
name|'in'
name|'faults'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fault'
op|'.'
name|'instance_uuid'
name|'not'
name|'in'
name|'inst_faults'
op|':'
newline|'\n'
indent|'                '
name|'inst_faults'
op|'['
name|'fault'
op|'.'
name|'instance_uuid'
op|']'
op|'='
name|'fault'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'inst_list'
op|'.'
name|'objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'db_inst'
name|'in'
name|'db_inst_list'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'context'
op|')'
op|','
name|'db_inst'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'expected_attrs'
op|')'
newline|'\n'
name|'if'
name|'get_fault'
op|':'
newline|'\n'
indent|'            '
name|'inst_obj'
op|'.'
name|'fault'
op|'='
name|'inst_faults'
op|'.'
name|'get'
op|'('
name|'inst_obj'
op|'.'
name|'uuid'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'inst_list'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'inst_obj'
op|')'
newline|'\n'
dedent|''
name|'inst_list'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'inst_list'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|InstanceList
name|'class'
name|'InstanceList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
comment|'# Version 1.1: Added use_slave to get_by_host'
nl|'\n'
comment|'#              Instance <= version 1.9'
nl|'\n'
comment|'# Version 1.2: Instance <= version 1.11'
nl|'\n'
comment|'# Version 1.3: Added use_slave to get_by_filters'
nl|'\n'
comment|'# Version 1.4: Instance <= version 1.12'
nl|'\n'
comment|'# Version 1.5: Added method get_active_by_window_joined.'
nl|'\n'
comment|'# Version 1.6: Instance <= version 1.13'
nl|'\n'
comment|'# Version 1.7: Added use_slave to get_active_by_window_joined'
nl|'\n'
comment|'# Version 1.8: Instance <= version 1.14'
nl|'\n'
comment|'# Version 1.9: Instance <= version 1.15'
nl|'\n'
comment|'# Version 1.10: Instance <= version 1.16'
nl|'\n'
comment|'# Version 1.11: Added sort_keys and sort_dirs to get_by_filters'
nl|'\n'
comment|'# Version 1.12: Pass expected_attrs to instance_get_active_by_window_joined'
nl|'\n'
comment|'# Version 1.13: Instance <= version 1.17'
nl|'\n'
comment|'# Version 1.14: Instance <= version 1.18'
nl|'\n'
comment|'# Version 1.15: Instance <= version 1.19'
nl|'\n'
comment|'# Version 1.16: Added get_all() method'
nl|'\n'
comment|'# Version 1.17: Instance <= version 1.20'
nl|'\n'
comment|'# Version 1.18: Instance <= version 1.21'
nl|'\n'
comment|'# Version 1.19: Erronenous removal of get_hung_in_rebooting(). Reverted.'
nl|'\n'
comment|'# Version 1.20: Instance <= version 1.22'
nl|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.20'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'Instance'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# NOTE(danms): Instance was at 1.9 before we added this'
nl|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
op|'['
op|'('
string|"'1.1'"
op|','
string|"'1.9'"
op|')'
op|','
op|'('
string|"'1.2'"
op|','
string|"'1.11'"
op|')'
op|','
op|'('
string|"'1.3'"
op|','
string|"'1.11'"
op|')'
op|','
nl|'\n'
op|'('
string|"'1.4'"
op|','
string|"'1.12'"
op|')'
op|','
op|'('
string|"'1.5'"
op|','
string|"'1.12'"
op|')'
op|','
op|'('
string|"'1.6'"
op|','
string|"'1.13'"
op|')'
op|','
nl|'\n'
op|'('
string|"'1.7'"
op|','
string|"'1.13'"
op|')'
op|','
op|'('
string|"'1.8'"
op|','
string|"'1.14'"
op|')'
op|','
op|'('
string|"'1.9'"
op|','
string|"'1.15'"
op|','
op|')'
op|','
nl|'\n'
op|'('
string|"'1.10'"
op|','
string|"'1.16'"
op|')'
op|','
op|'('
string|"'1.11'"
op|','
string|"'1.16'"
op|')'
op|','
op|'('
string|"'1.12'"
op|','
string|"'1.16'"
op|')'
op|','
nl|'\n'
op|'('
string|"'1.13'"
op|','
string|"'1.17'"
op|')'
op|','
op|'('
string|"'1.14'"
op|','
string|"'1.18'"
op|')'
op|','
op|'('
string|"'1.15'"
op|','
string|"'1.19'"
op|')'
op|','
nl|'\n'
op|'('
string|"'1.16'"
op|','
string|"'1.19'"
op|')'
op|','
op|'('
string|"'1.17'"
op|','
string|"'1.20'"
op|')'
op|','
op|'('
string|"'1.18'"
op|','
string|"'1.21'"
op|')'
op|','
nl|'\n'
op|'('
string|"'1.19'"
op|','
string|"'1.21'"
op|')'
op|','
op|'('
string|"'1.20'"
op|','
string|"'1.22'"
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_filters
name|'def'
name|'get_by_filters'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|'='
string|"'created_at'"
op|','
name|'sort_dir'
op|'='
string|"'desc'"
op|','
name|'limit'
op|'='
name|'None'
op|','
nl|'\n'
name|'marker'
op|'='
name|'None'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'sort_keys'
op|'='
name|'None'
op|','
name|'sort_dirs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sort_keys'
name|'or'
name|'sort_dirs'
op|':'
newline|'\n'
indent|'            '
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_filters_sort'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
name|'limit'
op|'='
name|'limit'
op|','
name|'marker'
op|'='
name|'marker'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|','
name|'sort_keys'
op|'='
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'sort_dirs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
name|'sort_key'
op|','
name|'sort_dir'
op|','
name|'limit'
op|'='
name|'limit'
op|','
nl|'\n'
name|'marker'
op|'='
name|'marker'
op|','
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst_list'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_host
name|'def'
name|'get_by_host'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'host'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|','
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst_list'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_host_and_node
name|'def'
name|'get_by_host_and_node'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'host'
op|','
name|'node'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_host_and_node'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|','
name|'node'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst_list'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_host_and_not_type
name|'def'
name|'get_by_host_and_not_type'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'host'
op|','
name|'type_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_host_and_not_type'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|','
name|'type_id'
op|'='
name|'type_id'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst_list'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_all
name|'def'
name|'get_all'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns all instances on all nodes."""'
newline|'\n'
name|'db_instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
nl|'\n'
name|'context'
op|','
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_instances'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_hung_in_rebooting
name|'def'
name|'get_hung_in_rebooting'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'reboot_window'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_all_hung_in_rebooting'
op|'('
name|'context'
op|','
nl|'\n'
name|'reboot_window'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst_list'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|_get_active_by_window_joined
name|'def'
name|'_get_active_by_window_joined'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|'='
name|'None'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'None'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mriedem): We need to convert the begin/end timestamp strings'
nl|'\n'
comment|'# to timezone-aware datetime objects for the DB API call.'
nl|'\n'
indent|'        '
name|'begin'
op|'='
name|'timeutils'
op|'.'
name|'parse_isotime'
op|'('
name|'begin'
op|')'
newline|'\n'
name|'end'
op|'='
name|'timeutils'
op|'.'
name|'parse_isotime'
op|'('
name|'end'
op|')'
name|'if'
name|'end'
name|'else'
name|'None'
newline|'\n'
name|'db_inst_list'
op|'='
name|'db'
op|'.'
name|'instance_get_active_by_window_joined'
op|'('
nl|'\n'
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'project_id'
op|','
name|'host'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'_expected_cols'
op|'('
name|'expected_attrs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_inst_list'
op|','
nl|'\n'
name|'expected_attrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_active_by_window_joined
name|'def'
name|'get_active_by_window_joined'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|'='
name|'None'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'None'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get instances and joins active during a certain time window.\n\n        :param:context: nova request context\n        :param:begin: datetime for the start of the time window\n        :param:end: datetime for the end of the time window\n        :param:project_id: used to filter instances by project\n        :param:host: used to filter instances on a given compute host\n        :param:expected_attrs: list of related fields that can be joined\n        in the database layer when querying for instances\n        :param use_slave if True, ship this query off to a DB slave\n        :returns: InstanceList\n\n        """'
newline|'\n'
comment|'# NOTE(mriedem): We have to convert the datetime objects to string'
nl|'\n'
comment|'# primitives for the remote call.'
nl|'\n'
name|'begin'
op|'='
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'begin'
op|')'
newline|'\n'
name|'end'
op|'='
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'end'
op|')'
name|'if'
name|'end'
name|'else'
name|'None'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'_get_active_by_window_joined'
op|'('
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
nl|'\n'
name|'project_id'
op|','
name|'host'
op|','
nl|'\n'
name|'expected_attrs'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_security_group_id
name|'def'
name|'get_by_security_group_id'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_secgroup'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
nl|'\n'
name|'context'
op|','
name|'security_group_id'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'instances.info_cache'"
op|','
nl|'\n'
string|"'instances.system_metadata'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_make_instance_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_secgroup'
op|'['
string|"'instances'"
op|']'
op|','
nl|'\n'
op|'['
string|"'info_cache'"
op|','
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_by_security_group
name|'def'
name|'get_by_security_group'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cls'
op|'.'
name|'get_by_security_group_id'
op|'('
name|'context'
op|','
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fill_faults
dedent|''
name|'def'
name|'fill_faults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Batch query the database for our instances\' faults.\n\n        :returns: A list of instance uuids for which faults were found.\n        """'
newline|'\n'
name|'uuids'
op|'='
op|'['
name|'inst'
op|'.'
name|'uuid'
name|'for'
name|'inst'
name|'in'
name|'self'
op|']'
newline|'\n'
name|'faults'
op|'='
name|'objects'
op|'.'
name|'InstanceFaultList'
op|'.'
name|'get_by_instance_uuids'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|','
name|'uuids'
op|')'
newline|'\n'
name|'faults_by_uuid'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'fault'
name|'in'
name|'faults'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fault'
op|'.'
name|'instance_uuid'
name|'not'
name|'in'
name|'faults_by_uuid'
op|':'
newline|'\n'
indent|'                '
name|'faults_by_uuid'
op|'['
name|'fault'
op|'.'
name|'instance_uuid'
op|']'
op|'='
name|'fault'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'uuid'
name|'in'
name|'faults_by_uuid'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'fault'
op|'='
name|'faults_by_uuid'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(danms): Otherwise the caller will cause a lazy-load'
nl|'\n'
comment|'# when checking it, and we know there are none'
nl|'\n'
indent|'                '
name|'instance'
op|'.'
name|'fault'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'fault'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'faults_by_uuid'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

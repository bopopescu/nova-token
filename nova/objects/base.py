begin_unit
comment|'#    Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Nova common internal object model"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
name|'import'
name|'messaging'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'versionutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'object'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotSpecifiedSentinel
name|'class'
name|'NotSpecifiedSentinel'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_attrname
dedent|''
name|'def'
name|'get_attrname'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the mangled name of the attribute\'s underlying storage."""'
newline|'\n'
name|'return'
string|"'_%s'"
op|'%'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_class_properties
dedent|''
name|'def'
name|'make_class_properties'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms/comstud): Inherit fields from super classes.'
nl|'\n'
comment|"# mro() returns the current class first and returns 'object' last, so"
nl|'\n'
comment|'# those can be skipped.  Also be careful to not overwrite any fields'
nl|'\n'
comment|'# that already exist.  And make sure each cls has its own copy of'
nl|'\n'
comment|'# fields and that it is not sharing the dict with a super class.'
nl|'\n'
indent|'    '
name|'cls'
op|'.'
name|'fields'
op|'='
name|'dict'
op|'('
name|'cls'
op|'.'
name|'fields'
op|')'
newline|'\n'
name|'for'
name|'supercls'
name|'in'
name|'cls'
op|'.'
name|'mro'
op|'('
op|')'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'supercls'
op|','
string|"'fields'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'supercls'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
name|'not'
name|'in'
name|'cls'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'                '
name|'cls'
op|'.'
name|'fields'
op|'['
name|'name'
op|']'
op|'='
name|'field'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'cls'
op|'.'
name|'fields'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'field'
op|','
name|'fields'
op|'.'
name|'Field'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ObjectFieldInvalid'
op|'('
nl|'\n'
name|'field'
op|'='
name|'name'
op|','
name|'objname'
op|'='
name|'cls'
op|'.'
name|'obj_name'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|getter
dedent|''
name|'def'
name|'getter'
op|'('
name|'self'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'attrname'
op|'='
name|'get_attrname'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'obj_load_attr'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'name'
op|'='
name|'name'
op|','
name|'field'
op|'='
name|'field'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'attrname'
op|'='
name|'get_attrname'
op|'('
name|'name'
op|')'
newline|'\n'
name|'field_value'
op|'='
name|'field'
op|'.'
name|'coerce'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'field'
op|'.'
name|'read_only'
name|'and'
name|'hasattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
comment|'# Note(yjiang5): _from_db_object() may iterate'
nl|'\n'
comment|'# every field and write, no exception in such situation.'
nl|'\n'
indent|'                '
name|'if'
name|'getattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|'!='
name|'field_value'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'ReadOnlyFieldError'
op|'('
name|'field'
op|'='
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_changed_fields'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'setattr'
op|'('
name|'self'
op|','
name|'attrname'
op|','
name|'field_value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'attr'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Error setting %(attr)s'"
op|')'
op|','
op|'{'
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'setattr'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaObjectMetaclass
dedent|''
dedent|''
name|'class'
name|'NovaObjectMetaclass'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Metaclass that allows tracking of object classes."""'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): This is what controls whether object operations are'
nl|'\n'
comment|'# remoted. If this is not None, use it to remote things over RPC.'
nl|'\n'
DECL|variable|indirection_api
name|'indirection_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'cls'
op|','
name|'names'
op|','
name|'bases'
op|','
name|'dict_'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'cls'
op|','
string|"'_obj_classes'"
op|')'
op|':'
newline|'\n'
comment|'# This means this is a base class using the metaclass. I.e.,'
nl|'\n'
comment|"# the 'NovaObject' class."
nl|'\n'
indent|'            '
name|'cls'
op|'.'
name|'_obj_classes'
op|'='
name|'collections'
op|'.'
name|'defaultdict'
op|'('
name|'list'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|function|_vers_tuple
dedent|''
name|'def'
name|'_vers_tuple'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'tuple'
op|'('
op|'['
name|'int'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'obj'
op|'.'
name|'VERSION'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add the subclass to NovaObject._obj_classes. If the'
nl|'\n'
comment|'# same version already exists, replace it. Otherwise,'
nl|'\n'
comment|'# keep the list with newest version first.'
nl|'\n'
dedent|''
name|'make_class_properties'
op|'('
name|'cls'
op|')'
newline|'\n'
name|'obj_name'
op|'='
name|'cls'
op|'.'
name|'obj_name'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'obj'
name|'in'
name|'enumerate'
op|'('
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cls'
op|'.'
name|'VERSION'
op|'=='
name|'obj'
op|'.'
name|'VERSION'
op|':'
newline|'\n'
indent|'                '
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
name|'i'
op|']'
op|'='
name|'cls'
newline|'\n'
comment|'# Update nova.objects with this newer class.'
nl|'\n'
name|'setattr'
op|'('
name|'objects'
op|','
name|'obj_name'
op|','
name|'cls'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'_vers_tuple'
op|'('
name|'cls'
op|')'
op|'>'
name|'_vers_tuple'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
comment|'# Insert before.'
nl|'\n'
indent|'                '
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|'.'
name|'insert'
op|'('
name|'i'
op|','
name|'cls'
op|')'
newline|'\n'
name|'if'
name|'i'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# Later version than we've seen before. Update"
nl|'\n'
comment|'# nova.objects.'
nl|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'objects'
op|','
name|'obj_name'
op|','
name|'cls'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|'.'
name|'append'
op|'('
name|'cls'
op|')'
newline|'\n'
comment|"# Either this is the first time we've seen the object or it's"
nl|'\n'
comment|"# an older version than anything we'e seen. Update nova.objects"
nl|'\n'
comment|"# only if it's the first time we've seen this object name."
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'objects'
op|','
name|'obj_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'objects'
op|','
name|'obj_name'
op|','
name|'cls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# These are decorators that mark an object's method as remotable."
nl|'\n'
comment|'# If the metaclass is configured to forward object methods to an'
nl|'\n'
comment|'# indirection service, these will result in making an RPC call'
nl|'\n'
comment|'# instead of directly calling the implementation in the object. Instead,'
nl|'\n'
comment|'# the object implementation on the remote end will perform the'
nl|'\n'
comment|'# requested action and the result will be returned here.'
nl|'\n'
DECL|function|remotable_classmethod
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'remotable_classmethod'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for remotable classmethods."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'fn'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'cls'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'.'
name|'object_class_action'
op|'('
nl|'\n'
name|'context'
op|','
name|'cls'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
name|'fn'
op|'.'
name|'__name__'
op|','
name|'cls'
op|'.'
name|'VERSION'
op|','
nl|'\n'
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'fn'
op|'('
name|'cls'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Make this discoverable'
nl|'\n'
dedent|''
name|'wrapper'
op|'.'
name|'remotable'
op|'='
name|'True'
newline|'\n'
name|'wrapper'
op|'.'
name|'original_fn'
op|'='
name|'fn'
newline|'\n'
name|'return'
name|'classmethod'
op|'('
name|'wrapper'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# See comment above for remotable_classmethod()'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that this will use either the provided context, or the one'
nl|'\n'
comment|'# stashed in the object. If neither are present, the object is'
nl|'\n'
comment|'# "orphaned" and remotable methods cannot be called.'
nl|'\n'
DECL|function|remotable
dedent|''
name|'def'
name|'remotable'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for remotable object methods."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'fn'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'_context'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|','
op|'('
name|'context'
op|'.'
name|'RequestContext'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ctxt'
op|'='
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'args'
op|'='
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'OrphanedObjectError'
op|'('
name|'method'
op|'='
name|'fn'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'objtype'
op|'='
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# Force this to be set if it wasn't before."
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_context'
op|'='
name|'ctxt'
newline|'\n'
name|'if'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|','
name|'result'
op|'='
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'.'
name|'object_action'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'self'
op|','
name|'fn'
op|'.'
name|'__name__'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'updates'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'                    '
name|'field'
op|'='
name|'self'
op|'.'
name|'fields'
op|'['
name|'key'
op|']'
newline|'\n'
comment|'# NOTE(ndipanov): Since NovaObjectSerializer will have'
nl|'\n'
comment|'# deserialized any object fields into objects already,'
nl|'\n'
comment|'# we do not try to deserialize them again here.'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'field'
op|'.'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
name|'updates'
op|'.'
name|'get'
op|'('
string|"'obj_what_changed'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fn'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'wrapper'
op|'.'
name|'remotable'
op|'='
name|'True'
newline|'\n'
name|'wrapper'
op|'.'
name|'original_fn'
op|'='
name|'fn'
newline|'\n'
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'NovaObjectMetaclass'
op|')'
newline|'\n'
DECL|class|NovaObject
name|'class'
name|'NovaObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class and object factory.\n\n    This forms the base of all objects that can be remoted or instantiated\n    via RPC. Simply defining a class that inherits from this base class\n    will make it remotely instantiatable. Objects should implement the\n    necessary "get" classmethod routines as well as "save" object methods\n    as appropriate.\n    """'
newline|'\n'
nl|'\n'
comment|'# Object versioning rules'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Each service has its set of objects, each with a version attached. When'
nl|'\n'
comment|'# a client attempts to call an object method, the server checks to see if'
nl|'\n'
comment|'# the version of that object matches (in a compatible way) its object'
nl|'\n'
comment|'# implementation. If so, cool, and if not, fail.'
nl|'\n'
DECL|variable|VERSION
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
comment|'# The fields present in this object as key:field pairs. For example:'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# fields = { 'foo': fields.IntegerField(),"
nl|'\n'
comment|"#            'bar': fields.StringField(),"
nl|'\n'
comment|'#          }'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|obj_extra_fields
name|'obj_extra_fields'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Table of sub-object versioning information'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This contains a list of version mappings, by the field name of'
nl|'\n'
comment|'# the subobject. The mappings must be in order of oldest to'
nl|'\n'
comment|'# newest, and are tuples of (my_version, subobject_version). A'
nl|'\n'
comment|'# request to backport this object to $my_version will cause the'
nl|'\n'
comment|'# subobject to be backported to $subobject_version.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# obj_relationships = {'
nl|'\n'
comment|"#     'subobject1': [('1.2', '1.1'), ('1.4', '1.2')],"
nl|'\n'
comment|"#     'subobject2': [('1.2', '1.0')],"
nl|'\n'
comment|'# }'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# In the above example:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# - If we are asked to backport our object to version 1.3,'
nl|'\n'
comment|'#   subobject1 will be backported to version 1.1, since it was'
nl|'\n'
comment|'#   bumped to version 1.2 when our version was 1.4.'
nl|'\n'
comment|'# - If we are asked to backport our object to version 1.5,'
nl|'\n'
comment|'#   no changes will be made to subobject1 or subobject2, since'
nl|'\n'
comment|'#   they have not changed since version 1.4.'
nl|'\n'
comment|'# - If we are asked to backlevel our object to version 1.1, we'
nl|'\n'
comment|'#   will remove both subobject1 and subobject2 from the primitive,'
nl|'\n'
comment|'#   since they were not added until version 1.2.'
nl|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'context'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'kwargs'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'kwargs'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s(%s)'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'name'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'name'
op|')'
name|'and'
nl|'\n'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|')'
name|'or'
nl|'\n'
string|"'<?>'"
op|')'
op|')'
nl|'\n'
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a canonical name for this object which will be used over\n        the wire for remote hydration.\n        """'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_class_from_name
name|'def'
name|'obj_class_from_name'
op|'('
name|'cls'
op|','
name|'objname'
op|','
name|'objver'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a class from the registry based on a name and version."""'
newline|'\n'
name|'if'
name|'objname'
name|'not'
name|'in'
name|'cls'
op|'.'
name|'_obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Unable to instantiate unregistered object type '"
nl|'\n'
string|"'%(objtype)s'"
op|')'
op|','
name|'dict'
op|'('
name|'objtype'
op|'='
name|'objname'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedObjectError'
op|'('
name|'objtype'
op|'='
name|'objname'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(comstud): If there's not an exact match, return the highest"
nl|'\n'
comment|'# compatible version. The objects stored in the class are sorted'
nl|'\n'
comment|'# such that highest version is first, so only set compatible_match'
nl|'\n'
comment|'# once below.'
nl|'\n'
dedent|''
name|'compatible_match'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'objclass'
name|'in'
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'objname'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'objclass'
op|'.'
name|'VERSION'
op|'=='
name|'objver'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'objclass'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'not'
name|'compatible_match'
name|'and'
nl|'\n'
name|'versionutils'
op|'.'
name|'is_compatible'
op|'('
name|'objver'
op|','
name|'objclass'
op|'.'
name|'VERSION'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'compatible_match'
op|'='
name|'objclass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'compatible_match'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'compatible_match'
newline|'\n'
nl|'\n'
comment|'# As mentioned above, latest version is always first in the list.'
nl|'\n'
dedent|''
name|'latest_ver'
op|'='
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'objname'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'VERSION'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|'('
name|'objname'
op|'='
name|'objname'
op|','
nl|'\n'
name|'objver'
op|'='
name|'objver'
op|','
nl|'\n'
name|'supported'
op|'='
name|'latest_ver'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_obj_from_primitive
name|'def'
name|'_obj_from_primitive'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'objver'
op|','
name|'primitive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'self'
op|'.'
name|'VERSION'
op|'='
name|'objver'
newline|'\n'
name|'objdata'
op|'='
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
newline|'\n'
name|'changes'
op|'='
name|'primitive'
op|'.'
name|'get'
op|'('
string|"'nova_object.changes'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'self'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
name|'in'
name|'objdata'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'field'
op|'.'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'name'
op|','
nl|'\n'
name|'objdata'
op|'['
name|'name'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'changes'
name|'if'
name|'x'
name|'in'
name|'self'
op|'.'
name|'fields'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_from_primitive
name|'def'
name|'obj_from_primitive'
op|'('
name|'cls'
op|','
name|'primitive'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Object field-by-field hydration."""'
newline|'\n'
name|'if'
name|'primitive'
op|'['
string|"'nova_object.namespace'"
op|']'
op|'!='
string|"'nova'"
op|':'
newline|'\n'
comment|"# NOTE(danms): We don't do anything with this now, but it's"
nl|'\n'
comment|'# there for "the future"'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedObjectError'
op|'('
nl|'\n'
name|'objtype'
op|'='
string|"'%s.%s'"
op|'%'
op|'('
name|'primitive'
op|'['
string|"'nova_object.namespace'"
op|']'
op|','
nl|'\n'
name|'primitive'
op|'['
string|"'nova_object.name'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'objname'
op|'='
name|'primitive'
op|'['
string|"'nova_object.name'"
op|']'
newline|'\n'
name|'objver'
op|'='
name|'primitive'
op|'['
string|"'nova_object.version'"
op|']'
newline|'\n'
name|'objclass'
op|'='
name|'cls'
op|'.'
name|'obj_class_from_name'
op|'('
name|'objname'
op|','
name|'objver'
op|')'
newline|'\n'
name|'return'
name|'objclass'
op|'.'
name|'_obj_from_primitive'
op|'('
name|'context'
op|','
name|'objver'
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__deepcopy__
dedent|''
name|'def'
name|'__deepcopy__'
op|'('
name|'self'
op|','
name|'memo'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Efficiently make a deep copy of this object."""'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): A naive deepcopy would copy more than we need,'
nl|'\n'
comment|'# and since we have knowledge of the volatile bits of the'
nl|'\n'
comment|'# object, we can be smarter here. Also, nested entities within'
nl|'\n'
comment|'# some objects may be uncopyable, so we can avoid those sorts'
nl|'\n'
comment|'# of issues by copying only our field data.'
nl|'\n'
nl|'\n'
name|'nobj'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
op|')'
newline|'\n'
name|'nobj'
op|'.'
name|'_context'
op|'='
name|'self'
op|'.'
name|'_context'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'nval'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|','
name|'memo'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'nobj'
op|','
name|'name'
op|','
name|'nval'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'nobj'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'_changed_fields'
op|')'
newline|'\n'
name|'return'
name|'nobj'
newline|'\n'
nl|'\n'
DECL|member|obj_clone
dedent|''
name|'def'
name|'obj_clone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a copy."""'
newline|'\n'
name|'return'
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_obj_make_obj_compatible
dedent|''
name|'def'
name|'_obj_make_obj_compatible'
op|'('
name|'self'
op|','
name|'primitive'
op|','
name|'target_version'
op|','
name|'field'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Backlevel a sub-object based on our versioning rules.\n\n        This is responsible for backporting objects contained within\n        this object\'s primitive according to a set of rules we\n        maintain about version dependencies between objects. This\n        requires that the obj_relationships table in this object is\n        correct and up-to-date.\n\n        :param:primitive: The primitive version of this object\n        :param:target_version: The version string requested for this object\n        :param:field: The name of the field in this object containing the\n                      sub-object to be backported\n        """'
newline|'\n'
nl|'\n'
DECL|function|_do_backport
name|'def'
name|'_do_backport'
op|'('
name|'to_version'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'field'
op|')'
newline|'\n'
name|'if'
name|'obj'
op|':'
newline|'\n'
indent|'                '
name|'obj'
op|'.'
name|'obj_make_compatible'
op|'('
nl|'\n'
name|'primitive'
op|'['
name|'field'
op|']'
op|'['
string|"'nova_object.data'"
op|']'
op|','
nl|'\n'
name|'to_version'
op|')'
newline|'\n'
name|'primitive'
op|'['
name|'field'
op|']'
op|'['
string|"'nova_object.version'"
op|']'
op|'='
name|'to_version'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'target_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'target_version'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
name|'versions'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'obj_relationships'
op|'['
name|'field'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'my_version'
op|','
name|'child_version'
op|'='
name|'versions'
newline|'\n'
name|'my_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'my_version'
op|')'
newline|'\n'
name|'if'
name|'target_version'
op|'<'
name|'my_version'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'index'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# We're backporting to a version from before this"
nl|'\n'
comment|'# subobject was added: delete it from the primitive.'
nl|'\n'
indent|'                    '
name|'del'
name|'primitive'
op|'['
name|'field'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# We're in the gap between index-1 and index, so"
nl|'\n'
comment|'# backport to the older version'
nl|'\n'
indent|'                    '
name|'last_child_version'
op|'='
name|'self'
op|'.'
name|'obj_relationships'
op|'['
name|'field'
op|']'
op|'['
name|'index'
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'_do_backport'
op|'('
name|'last_child_version'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'target_version'
op|'=='
name|'my_version'
op|':'
newline|'\n'
comment|'# This is the first mapping that satisfies the'
nl|'\n'
comment|'# target_version request: backport the object.'
nl|'\n'
indent|'                '
name|'_do_backport'
op|'('
name|'child_version'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|obj_make_compatible
dedent|''
dedent|''
dedent|''
name|'def'
name|'obj_make_compatible'
op|'('
name|'self'
op|','
name|'primitive'
op|','
name|'target_version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make an object representation compatible with a target version.\n\n        This is responsible for taking the primitive representation of\n        an object and making it suitable for the given target_version.\n        This may mean converting the format of object attributes, removing\n        attributes that have been added since the target version, etc. In\n        general:\n\n        - If a new version of an object adds a field, this routine\n          should remove it for older versions.\n        - If a new version changed or restricted the format of a field, this\n          should convert it back to something a client knowing only of the\n          older version will tolerate.\n        - If an object that this object depends on is bumped, then this\n          object should also take a version bump. Then, this routine should\n          backlevel the dependent object (by calling its obj_make_compatible())\n          if the requested version of this object is older than the version\n          where the new dependent object was added.\n\n        :param:primitive: The result of self.obj_to_primitive()\n        :param:target_version: The version string requested by the recipient\n        of the object\n        :raises: nova.exception.UnsupportedObjectError if conversion\n        is not possible for some reason\n        """'
newline|'\n'
name|'for'
name|'key'
op|','
name|'field'
name|'in'
name|'self'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'field'
op|','
name|'fields'
op|'.'
name|'ObjectField'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'key'
name|'not'
name|'in'
name|'self'
op|'.'
name|'obj_relationships'
op|':'
newline|'\n'
comment|"# NOTE(danms): This is really a coding error and shouldn't"
nl|'\n'
comment|'# happen unless we miss something'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ObjectActionError'
op|'('
nl|'\n'
name|'action'
op|'='
string|"'obj_make_compatible'"
op|','
nl|'\n'
name|'reason'
op|'='
string|"'No rule for %s'"
op|'%'
name|'key'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_obj_make_obj_compatible'
op|'('
name|'primitive'
op|','
name|'target_version'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_to_primitive
dedent|''
dedent|''
name|'def'
name|'obj_to_primitive'
op|'('
name|'self'
op|','
name|'target_version'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Simple base-case dehydration.\n\n        This calls to_primitive() for each item in fields.\n        """'
newline|'\n'
name|'primitive'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'self'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'primitive'
op|'['
name|'name'
op|']'
op|'='
name|'field'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'name'
op|','
nl|'\n'
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'target_version'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'obj_make_compatible'
op|'('
name|'primitive'
op|','
name|'target_version'
op|')'
newline|'\n'
dedent|''
name|'obj'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
name|'target_version'
name|'or'
name|'self'
op|'.'
name|'VERSION'
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
name|'primitive'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'['
string|"'nova_object.changes'"
op|']'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
DECL|member|obj_load_attr
dedent|''
name|'def'
name|'obj_load_attr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load an additional attribute from the real object.\n\n        This should use self._conductor, and cache any data that might\n        be useful for future load operations.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Cannot load \'%s\' in the base class"'
op|')'
op|'%'
name|'attrname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save the changed fields back to the store.\n\n        This is optional for subclasses, but is presented here in the base\n        class for consistency among those that do.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|"'Cannot save anything in the base class'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_what_changed
dedent|''
name|'def'
name|'obj_what_changed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a set of fields that have been modified."""'
newline|'\n'
name|'changes'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'_changed_fields'
op|')'
newline|'\n'
name|'for'
name|'field'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'field'
op|')'
name|'and'
nl|'\n'
name|'isinstance'
op|'('
name|'self'
op|'['
name|'field'
op|']'
op|','
name|'NovaObject'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'['
name|'field'
op|']'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'changes'
op|'.'
name|'add'
op|'('
name|'field'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'changes'
newline|'\n'
nl|'\n'
DECL|member|obj_get_changes
dedent|''
name|'def'
name|'obj_get_changes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a dict of changed fields and their new values."""'
newline|'\n'
name|'changes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'changes'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'changes'
newline|'\n'
nl|'\n'
DECL|member|obj_reset_changes
dedent|''
name|'def'
name|'obj_reset_changes'
op|'('
name|'self'
op|','
name|'fields'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the list of fields that have been changed.\n\n        Note that this is NOT "revert to previous values"\n        """'
newline|'\n'
name|'if'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_changed_fields'
op|'-='
name|'set'
op|'('
name|'fields'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_changed_fields'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_attr_is_set
dedent|''
dedent|''
name|'def'
name|'obj_attr_is_set'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test object to see if attrname is present.\n\n        Returns True if the named attribute has a value set, or\n        False if not. Raises AttributeError if attrname is not\n        a valid attribute for this object.\n        """'
newline|'\n'
name|'if'
name|'attrname'
name|'not'
name|'in'
name|'self'
op|'.'
name|'obj_fields'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"%(objname)s object has no attribute \'%(attrname)s\'"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'objname'"
op|':'
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
string|"'attrname'"
op|':'
name|'attrname'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'hasattr'
op|'('
name|'self'
op|','
name|'get_attrname'
op|'('
name|'attrname'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|obj_fields
name|'def'
name|'obj_fields'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'obj_extra_fields'
newline|'\n'
nl|'\n'
comment|'# dictish syntactic sugar'
nl|'\n'
DECL|member|iteritems
dedent|''
name|'def'
name|'iteritems'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'obj_fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'name'
op|')'
name|'or'
nl|'\n'
name|'name'
name|'in'
name|'self'
op|'.'
name|'obj_extra_fields'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'name'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|items
dedent|''
dedent|''
dedent|''
name|'items'
op|'='
name|'lambda'
name|'self'
op|':'
name|'list'
op|'('
name|'self'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|'='
name|'NotSpecifiedSentinel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'if'
name|'key'
name|'not'
name|'in'
name|'self'
op|'.'
name|'obj_fields'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
string|'"\'%s\' object has no attribute \'%s\'"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'!='
name|'NotSpecifiedSentinel'
name|'and'
name|'not'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'updates'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-base objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'updates'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaPersistentObject
dedent|''
dedent|''
dedent|''
name|'class'
name|'NovaPersistentObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class for Persistent objects.\n    This adds the fields that we use in common for all persistent objects.\n    """'
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'created_at'"
op|':'
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'fields'
op|'.'
name|'BooleanField'
op|'('
name|'default'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ObjectListBase
dedent|''
name|'class'
name|'ObjectListBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class for lists of objects.\n\n    This mixin class can be added as a base class for an object that\n    is implementing a list of objects. It adds a single field of \'objects\',\n    which is the list store, and behaves like a list itself. It supports\n    serialization of the list of objects automatically.\n    """'
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'NovaObject'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# This is a dictionary of my_version:child_version mappings so that'
nl|'\n'
comment|'# we can support backleveling our contents based on the version'
nl|'\n'
comment|'# requested of the list object.'
nl|'\n'
DECL|variable|child_versions
name|'child_versions'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ObjectListBase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
string|"'objects'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_changed_fields'
op|'.'
name|'discard'
op|'('
string|"'objects'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List iterator interface."""'
newline|'\n'
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List length."""'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List index access."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'index'
op|','
name|'slice'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_obj'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
op|')'
newline|'\n'
name|'new_obj'
op|'.'
name|'objects'
op|'='
name|'self'
op|'.'
name|'objects'
op|'['
name|'index'
op|']'
newline|'\n'
comment|'# NOTE(danms): We must be mixed in with a NovaObject!'
nl|'\n'
name|'new_obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'new_obj'
op|'.'
name|'_context'
op|'='
name|'self'
op|'.'
name|'_context'
newline|'\n'
name|'return'
name|'new_obj'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'objects'
op|'['
name|'index'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List membership test."""'
newline|'\n'
name|'return'
name|'value'
name|'in'
name|'self'
op|'.'
name|'objects'
newline|'\n'
nl|'\n'
DECL|member|count
dedent|''
name|'def'
name|'count'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List count of value occurrences."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'objects'
op|'.'
name|'count'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List index of value."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'objects'
op|'.'
name|'index'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sort
dedent|''
name|'def'
name|'sort'
op|'('
name|'self'
op|','
name|'cmp'
op|'='
name|'None'
op|','
name|'key'
op|'='
name|'None'
op|','
name|'reverse'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'objects'
op|'.'
name|'sort'
op|'('
name|'cmp'
op|'='
name|'cmp'
op|','
name|'key'
op|'='
name|'key'
op|','
name|'reverse'
op|'='
name|'reverse'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_make_compatible
dedent|''
name|'def'
name|'obj_make_compatible'
op|'('
name|'self'
op|','
name|'primitive'
op|','
name|'target_version'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitives'
op|'='
name|'primitive'
op|'['
string|"'objects'"
op|']'
newline|'\n'
name|'child_target_version'
op|'='
name|'self'
op|'.'
name|'child_versions'
op|'.'
name|'get'
op|'('
name|'target_version'
op|','
string|"'1.0'"
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
name|'item'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'objects'
op|'['
name|'index'
op|']'
op|'.'
name|'obj_make_compatible'
op|'('
nl|'\n'
name|'primitives'
op|'['
name|'index'
op|']'
op|'['
string|"'nova_object.data'"
op|']'
op|','
nl|'\n'
name|'child_target_version'
op|')'
newline|'\n'
name|'primitives'
op|'['
name|'index'
op|']'
op|'['
string|"'nova_object.version'"
op|']'
op|'='
name|'child_target_version'
newline|'\n'
nl|'\n'
DECL|member|obj_what_changed
dedent|''
dedent|''
name|'def'
name|'obj_what_changed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'changes'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'_changed_fields'
op|')'
newline|'\n'
name|'for'
name|'child'
name|'in'
name|'self'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'child'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'changes'
op|'.'
name|'add'
op|'('
string|"'objects'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'changes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaObjectSerializer
dedent|''
dedent|''
name|'class'
name|'NovaObjectSerializer'
op|'('
name|'messaging'
op|'.'
name|'NoOpSerializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A NovaObject-aware Serializer.\n\n    This implements the Oslo Serializer interface and provides the\n    ability to serialize and deserialize NovaObject entities. Any service\n    that needs to accept or return NovaObjects as arguments or result values\n    should pass this to its RPCClient and RPCServer objects.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|conductor
name|'def'
name|'conductor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'_conductor'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'nova'
name|'import'
name|'conductor'
newline|'\n'
name|'self'
op|'.'
name|'_conductor'
op|'='
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_conductor'
newline|'\n'
nl|'\n'
DECL|member|_process_object
dedent|''
name|'def'
name|'_process_object'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'objprim'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'objinst'
op|'='
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'objprim'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'objinst'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'object_backport'
op|'('
name|'context'
op|','
name|'objprim'
op|','
nl|'\n'
name|'e'
op|'.'
name|'kwargs'
op|'['
string|"'supported'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'objinst'
newline|'\n'
nl|'\n'
DECL|member|_process_iterable
dedent|''
name|'def'
name|'_process_iterable'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'action_fn'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process an iterable, taking an action on each value.\n        :param:context: Request context\n        :param:action_fn: Action to take on each item in values\n        :param:values: Iterable container of things to take action on\n        :returns: A new container of the same type (except set) with\n                  items from values having had action applied.\n        """'
newline|'\n'
name|'iterable'
op|'='
name|'values'
op|'.'
name|'__class__'
newline|'\n'
name|'if'
name|'issubclass'
op|'('
name|'iterable'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'iterable'
op|'('
op|'**'
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'action_fn'
op|'('
name|'context'
op|','
name|'v'
op|')'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'values'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# NOTE(danms): A set can't have an unhashable value inside, such as"
nl|'\n'
comment|"# a dict. Convert sets to tuples, which is fine, since we can't"
nl|'\n'
comment|'# send them over RPC anyway.'
nl|'\n'
indent|'            '
name|'if'
name|'iterable'
op|'=='
name|'set'
op|':'
newline|'\n'
indent|'                '
name|'iterable'
op|'='
name|'tuple'
newline|'\n'
dedent|''
name|'return'
name|'iterable'
op|'('
op|'['
name|'action_fn'
op|'('
name|'context'
op|','
name|'value'
op|')'
name|'for'
name|'value'
name|'in'
name|'values'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|serialize_entity
dedent|''
dedent|''
name|'def'
name|'serialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'entity'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|','
name|'dict'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'self'
op|'.'
name|'_process_iterable'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'serialize_entity'
op|','
nl|'\n'
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'hasattr'
op|'('
name|'entity'
op|','
string|"'obj_to_primitive'"
op|')'
name|'and'
nl|'\n'
name|'callable'
op|'('
name|'entity'
op|'.'
name|'obj_to_primitive'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'entity'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'entity'
newline|'\n'
nl|'\n'
DECL|member|deserialize_entity
dedent|''
name|'def'
name|'deserialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'entity'
op|','
name|'dict'
op|')'
name|'and'
string|"'nova_object.name'"
name|'in'
name|'entity'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'self'
op|'.'
name|'_process_object'
op|'('
name|'context'
op|','
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'entity'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|','
name|'dict'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'self'
op|'.'
name|'_process_iterable'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'deserialize_entity'
op|','
nl|'\n'
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'entity'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|obj_to_primitive
dedent|''
dedent|''
name|'def'
name|'obj_to_primitive'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Recursively turn an object into a python primitive.\n\n    A NovaObject becomes a dict, and anything that implements ObjectListBase\n    becomes a list.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'ObjectListBase'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'obj_to_primitive'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'obj'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'obj'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
name|'key'
op|']'
op|'='
name|'obj_to_primitive'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'netaddr'
op|'.'
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|obj_make_list
dedent|''
dedent|''
name|'def'
name|'obj_make_list'
op|'('
name|'context'
op|','
name|'list_obj'
op|','
name|'item_cls'
op|','
name|'db_list'
op|','
op|'**'
name|'extra_args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Construct an object list from a list of primitives.\n\n    This calls item_cls._from_db_object() on each item of db_list, and\n    adds the resulting object to list_obj.\n\n    :param:context: Request context\n    :param:list_obj: An ObjectListBase object\n    :param:item_cls: The NovaObject class of the objects within the list\n    :param:db_list: The list of primitives to convert to objects\n    :param:extra_args: Extra arguments to pass to _from_db_object()\n    :returns: list_obj\n    """'
newline|'\n'
name|'list_obj'
op|'.'
name|'objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'db_item'
name|'in'
name|'db_list'
op|':'
newline|'\n'
indent|'        '
name|'item'
op|'='
name|'item_cls'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'item_cls'
op|'('
op|')'
op|','
name|'db_item'
op|','
nl|'\n'
op|'**'
name|'extra_args'
op|')'
newline|'\n'
name|'list_obj'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
name|'list_obj'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'list_obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'list_obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|serialize_args
dedent|''
name|'def'
name|'serialize_args'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator that will do the arguments serialization before remoting."""'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'obj'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'kw'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'value_arg'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
name|'kw'
op|')'
newline|'\n'
name|'if'
name|'kw'
op|'=='
string|"'exc_val'"
name|'and'
name|'value_arg'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
name|'kw'
op|']'
op|'='
name|'str'
op|'('
name|'value_arg'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'kw'
op|'=='
string|"'exc_tb'"
name|'and'
op|'('
nl|'\n'
name|'not'
name|'isinstance'
op|'('
name|'value_arg'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
name|'and'
name|'value_arg'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
name|'kw'
op|']'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_tb'
op|'('
name|'value_arg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value_arg'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
name|'kw'
op|']'
op|'='
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'value_arg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'fn'
op|','
string|"'__call__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fn'
op|'('
name|'obj'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# NOTE(danms): We wrap a descriptor, so use that protocol'
nl|'\n'
dedent|''
name|'return'
name|'fn'
op|'.'
name|'__get__'
op|'('
name|'None'
op|','
name|'obj'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Make this discoverable'
nl|'\n'
dedent|''
name|'wrapper'
op|'.'
name|'remotable'
op|'='
name|'getattr'
op|'('
name|'fn'
op|','
string|"'remotable'"
op|','
name|'False'
op|')'
newline|'\n'
name|'wrapper'
op|'.'
name|'original_fn'
op|'='
name|'fn'
newline|'\n'
name|'return'
op|'('
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'fn'
op|')'
op|'('
name|'wrapper'
op|')'
name|'if'
name|'hasattr'
op|'('
name|'fn'
op|','
string|"'__call__'"
op|')'
nl|'\n'
name|'else'
name|'classmethod'
op|'('
name|'wrapper'
op|')'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#    Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Nova common internal object model"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'utils'
name|'as'
name|'obj_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
op|'.'
name|'dispatcher'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
op|'.'
name|'proxy'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
op|'.'
name|'serializer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'object'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_attrname
name|'def'
name|'get_attrname'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the mangled name of the attribute\'s underlying storage."""'
newline|'\n'
name|'return'
string|"'_%s'"
op|'%'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_class_properties
dedent|''
name|'def'
name|'make_class_properties'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(danms): Inherit NovaObject's base fields only"
nl|'\n'
indent|'    '
name|'cls'
op|'.'
name|'fields'
op|'.'
name|'update'
op|'('
name|'NovaObject'
op|'.'
name|'fields'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'typefn'
name|'in'
name|'cls'
op|'.'
name|'fields'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|getter
indent|'        '
name|'def'
name|'getter'
op|'('
name|'self'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'attrname'
op|'='
name|'get_attrname'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'obj_load_attr'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
newline|'\n'
nl|'\n'
DECL|function|setter
dedent|''
name|'def'
name|'setter'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'name'
op|'='
name|'name'
op|','
name|'typefn'
op|'='
name|'typefn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_changed_fields'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'setattr'
op|'('
name|'self'
op|','
name|'get_attrname'
op|'('
name|'name'
op|')'
op|','
name|'typefn'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'attr'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Error setting %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'setattr'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'property'
op|'('
name|'getter'
op|','
name|'setter'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaObjectMetaclass
dedent|''
dedent|''
name|'class'
name|'NovaObjectMetaclass'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Metaclass that allows tracking of object classes."""'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): This is what controls whether object operations are'
nl|'\n'
comment|'# remoted. If this is not None, use it to remote things over RPC.'
nl|'\n'
DECL|variable|indirection_api
name|'indirection_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'cls'
op|','
name|'names'
op|','
name|'bases'
op|','
name|'dict_'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'cls'
op|','
string|"'_obj_classes'"
op|')'
op|':'
newline|'\n'
comment|"# This will be set in the 'NovaObject' class."
nl|'\n'
indent|'            '
name|'cls'
op|'.'
name|'_obj_classes'
op|'='
name|'collections'
op|'.'
name|'defaultdict'
op|'('
name|'list'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Add the subclass to NovaObject._obj_classes'
nl|'\n'
indent|'            '
name|'make_class_properties'
op|'('
name|'cls'
op|')'
newline|'\n'
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'cls'
op|'.'
name|'obj_name'
op|'('
op|')'
op|']'
op|'.'
name|'append'
op|'('
name|'cls'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# These are decorators that mark an object's method as remotable."
nl|'\n'
comment|'# If the metaclass is configured to forward object methods to an'
nl|'\n'
comment|'# indirection service, these will result in making an RPC call'
nl|'\n'
comment|'# instead of directly calling the implementation in the object. Instead,'
nl|'\n'
comment|'# the object implementation on the remote end will perform the'
nl|'\n'
comment|'# requested action and the result will be returned here.'
nl|'\n'
DECL|function|remotable_classmethod
dedent|''
dedent|''
dedent|''
name|'def'
name|'remotable_classmethod'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for remotable classmethods."""'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'cls'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'.'
name|'object_class_action'
op|'('
nl|'\n'
name|'context'
op|','
name|'cls'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
name|'fn'
op|'.'
name|'__name__'
op|','
name|'cls'
op|'.'
name|'version'
op|','
nl|'\n'
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'fn'
op|'('
name|'cls'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'return'
name|'classmethod'
op|'('
name|'wrapper'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# See comment above for remotable_classmethod()'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that this will use either the provided context, or the one'
nl|'\n'
comment|'# stashed in the object. If neither are present, the object is'
nl|'\n'
comment|'# "orphaned" and remotable methods cannot be called.'
nl|'\n'
DECL|function|remotable
dedent|''
name|'def'
name|'remotable'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for remotable object methods."""'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'_context'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|','
op|'('
name|'context'
op|'.'
name|'RequestContext'
op|','
nl|'\n'
name|'rpc_common'
op|'.'
name|'CommonRpcContext'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ctxt'
op|'='
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'args'
op|'='
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'OrphanedObjectError'
op|'('
name|'method'
op|'='
name|'fn'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'objtype'
op|'='
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|','
name|'result'
op|'='
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'.'
name|'object_action'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'self'
op|','
name|'fn'
op|'.'
name|'__name__'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'updates'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'_attr_from_primitive'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
name|'updates'
op|'.'
name|'get'
op|'('
string|"'obj_what_changed'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fn'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Object versioning rules'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Each service has its set of objects, each with a version attached. When'
nl|'\n'
comment|'# a client attempts to call an object method, the server checks to see if'
nl|'\n'
comment|'# the version of that object matches (in a compatible way) its object'
nl|'\n'
comment|'# implementation. If so, cool, and if not, fail.'
nl|'\n'
DECL|function|check_object_version
dedent|''
name|'def'
name|'check_object_version'
op|'('
name|'server'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'client_major'
op|','
name|'_client_minor'
op|'='
name|'client'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'server_major'
op|','
name|'_server_minor'
op|'='
name|'server'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'client_minor'
op|'='
name|'int'
op|'('
name|'_client_minor'
op|')'
newline|'\n'
name|'server_minor'
op|'='
name|'int'
op|'('
name|'_server_minor'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Invalid version string'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'client_major'
op|'!='
name|'server_major'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|'('
nl|'\n'
name|'dict'
op|'('
name|'client'
op|'='
name|'client_major'
op|','
name|'server'
op|'='
name|'server_major'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'client_minor'
op|'>'
name|'server_minor'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|'('
nl|'\n'
name|'dict'
op|'('
name|'client'
op|'='
name|'client_minor'
op|','
name|'server'
op|'='
name|'server_minor'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaObject
dedent|''
dedent|''
name|'class'
name|'NovaObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class and object factory.\n\n    This forms the base of all objects that can be remoted or instantiated\n    via RPC. Simply defining a class that inherits from this base class\n    will make it remotely instantiatable. Objects should implement the\n    necessary "get" classmethod routines as well as "save" object methods\n    as appropriate.\n    """'
newline|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'NovaObjectMetaclass'
newline|'\n'
nl|'\n'
comment|'# Version of this object (see rules above check_object_version())'
nl|'\n'
DECL|variable|version
name|'version'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
comment|'# The fields present in this object as key:typefn pairs. For example:'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# fields = { 'foo': int,"
nl|'\n'
comment|"#            'bar': str,"
nl|'\n'
comment|"#            'baz': lambda x: str(x).ljust(8),"
nl|'\n'
comment|'#          }'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# NOTE(danms): The base NovaObject class' fields will be inherited"
nl|'\n'
comment|'# by subclasses, but that is a special case. Objects inheriting from'
nl|'\n'
comment|'# other objects will not receive this merging of fields contents.'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'created_at'"
op|':'
name|'obj_utils'
op|'.'
name|'datetime_or_str_or_none'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'obj_utils'
op|'.'
name|'datetime_or_str_or_none'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'obj_utils'
op|'.'
name|'datetime_or_str_or_none'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'bool'
op|','
nl|'\n'
op|'}'
newline|'\n'
DECL|variable|obj_extra_fields
name|'obj_extra_fields'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_context'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a canonical name for this object which will be used over\n        the wire for remote hydration.\n        """'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_class_from_name
name|'def'
name|'obj_class_from_name'
op|'('
name|'cls'
op|','
name|'objname'
op|','
name|'objver'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a class from the registry based on a name and version."""'
newline|'\n'
name|'if'
name|'objname'
name|'not'
name|'in'
name|'cls'
op|'.'
name|'_obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Unable to instantiate unregistered object type '"
nl|'\n'
string|"'%(objtype)s'"
op|')'
op|'%'
name|'dict'
op|'('
name|'objtype'
op|'='
name|'objname'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedObjectError'
op|'('
name|'objtype'
op|'='
name|'objname'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'compatible_match'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'objclass'
name|'in'
name|'cls'
op|'.'
name|'_obj_classes'
op|'['
name|'objname'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'objclass'
op|'.'
name|'version'
op|'=='
name|'objver'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'objclass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'check_object_version'
op|'('
name|'objclass'
op|'.'
name|'version'
op|','
name|'objver'
op|')'
newline|'\n'
name|'compatible_match'
op|'='
name|'objclass'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'compatible_match'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'compatible_match'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|'('
name|'objname'
op|'='
name|'objname'
op|','
nl|'\n'
name|'objver'
op|'='
name|'objver'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_attr_created_at_from_primitive
dedent|''
name|'_attr_created_at_from_primitive'
op|'='
name|'obj_utils'
op|'.'
name|'dt_deserializer'
newline|'\n'
DECL|variable|_attr_updated_at_from_primitive
name|'_attr_updated_at_from_primitive'
op|'='
name|'obj_utils'
op|'.'
name|'dt_deserializer'
newline|'\n'
DECL|variable|_attr_deleted_at_from_primitive
name|'_attr_deleted_at_from_primitive'
op|'='
name|'obj_utils'
op|'.'
name|'dt_deserializer'
newline|'\n'
nl|'\n'
DECL|member|_attr_from_primitive
name|'def'
name|'_attr_from_primitive'
op|'('
name|'self'
op|','
name|'attribute'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attribute deserialization dispatcher.\n\n        This calls self._attr_foo_from_primitive(value) for an attribute\n        foo with value, if it exists, otherwise it assumes the value\n        is suitable for the attribute\'s setter method.\n        """'
newline|'\n'
name|'handler'
op|'='
string|"'_attr_%s_from_primitive'"
op|'%'
name|'attribute'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'handler'
op|')'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_from_primitive
name|'def'
name|'obj_from_primitive'
op|'('
name|'cls'
op|','
name|'primitive'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Simple base-case hydration.\n\n        This calls self._attr_from_primitive() for each item in fields.\n        """'
newline|'\n'
name|'if'
name|'primitive'
op|'['
string|"'nova_object.namespace'"
op|']'
op|'!='
string|"'nova'"
op|':'
newline|'\n'
comment|"# NOTE(danms): We don't do anything with this now, but it's"
nl|'\n'
comment|'# there for "the future"'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedObjectError'
op|'('
nl|'\n'
name|'objtype'
op|'='
string|"'%s.%s'"
op|'%'
op|'('
name|'primitive'
op|'['
string|"'nova_object.namespace'"
op|']'
op|','
nl|'\n'
name|'primitive'
op|'['
string|"'nova_object.name'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'objname'
op|'='
name|'primitive'
op|'['
string|"'nova_object.name'"
op|']'
newline|'\n'
name|'objver'
op|'='
name|'primitive'
op|'['
string|"'nova_object.version'"
op|']'
newline|'\n'
name|'objdata'
op|'='
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
newline|'\n'
name|'objclass'
op|'='
name|'cls'
op|'.'
name|'obj_class_from_name'
op|'('
name|'objname'
op|','
name|'objver'
op|')'
newline|'\n'
name|'self'
op|'='
name|'objclass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
name|'in'
name|'objdata'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_attr_from_primitive'
op|'('
name|'name'
op|','
name|'objdata'
op|'['
name|'name'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'changes'
op|'='
name|'primitive'
op|'.'
name|'get'
op|'('
string|"'nova_object.changes'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_changed_fields'
op|'='
name|'set'
op|'('
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'changes'
name|'if'
name|'x'
name|'in'
name|'self'
op|'.'
name|'fields'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|variable|_attr_created_at_to_primitive
dedent|''
name|'_attr_created_at_to_primitive'
op|'='
name|'obj_utils'
op|'.'
name|'dt_serializer'
op|'('
string|"'created_at'"
op|')'
newline|'\n'
DECL|variable|_attr_updated_at_to_primitive
name|'_attr_updated_at_to_primitive'
op|'='
name|'obj_utils'
op|'.'
name|'dt_serializer'
op|'('
string|"'updated_at'"
op|')'
newline|'\n'
DECL|variable|_attr_deleted_at_to_primitive
name|'_attr_deleted_at_to_primitive'
op|'='
name|'obj_utils'
op|'.'
name|'dt_serializer'
op|'('
string|"'deleted_at'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attr_to_primitive
name|'def'
name|'_attr_to_primitive'
op|'('
name|'self'
op|','
name|'attribute'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attribute serialization dispatcher.\n\n        This calls self._attr_foo_to_primitive() for an attribute foo,\n        if it exists, otherwise it assumes the attribute itself is\n        primitive-enough to be sent over the RPC wire.\n        """'
newline|'\n'
name|'handler'
op|'='
string|"'_attr_%s_to_primitive'"
op|'%'
name|'attribute'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'handler'
op|')'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'attribute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_to_primitive
dedent|''
dedent|''
name|'def'
name|'obj_to_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Simple base-case dehydration.\n\n        This calls self._attr_to_primitive() for each item in fields.\n        """'
newline|'\n'
name|'primitive'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
name|'get_attrname'
op|'('
name|'name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'primitive'
op|'['
name|'name'
op|']'
op|'='
name|'self'
op|'.'
name|'_attr_to_primitive'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'obj'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
name|'self'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
name|'self'
op|'.'
name|'version'
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
name|'primitive'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'['
string|"'nova_object.changes'"
op|']'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
DECL|member|obj_load_attr
dedent|''
name|'def'
name|'obj_load_attr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load an additional attribute from the real object.\n\n        This should use self._conductor, and cache any data that might\n        be useful for future load operations.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Cannot load \'%(attrname)s\' in the base class"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save the changed fields back to the store.\n\n        This is optional for subclasses, but is presented here in the base\n        class for consistency among those that do.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|"'Cannot save anything in the base class'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_what_changed
dedent|''
name|'def'
name|'obj_what_changed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a set of fields that have been modified."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_changed_fields'
newline|'\n'
nl|'\n'
DECL|member|obj_reset_changes
dedent|''
name|'def'
name|'obj_reset_changes'
op|'('
name|'self'
op|','
name|'fields'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the list of fields that have been changed.\n\n        Note that this is NOT "revert to previous values"\n        """'
newline|'\n'
name|'if'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_changed_fields'
op|'-='
name|'set'
op|'('
name|'fields'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_changed_fields'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# dictish syntactic sugar'
nl|'\n'
DECL|member|iteritems
dedent|''
dedent|''
name|'def'
name|'iteritems'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'obj_extra_fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'hasattr'
op|'('
name|'self'
op|','
name|'get_attrname'
op|'('
name|'name'
op|')'
op|')'
name|'or'
nl|'\n'
name|'name'
name|'in'
name|'self'
op|'.'
name|'obj_extra_fields'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'name'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|items
dedent|''
dedent|''
dedent|''
name|'items'
op|'='
name|'lambda'
name|'self'
op|':'
name|'list'
op|'('
name|'self'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'return'
name|'hasattr'
op|'('
name|'self'
op|','
name|'get_attrname'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-based objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'updates'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For backwards-compatibility with dict-base objects.\n\n        NOTE(danms): May be removed in the future.\n        """'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'updates'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ObjectListBase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ObjectListBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class for lists of objects.\n\n    This mixin class can be added as a base class for an object that\n    is implementing a list of objects. It adds a single field of \'objects\',\n    which is the list store, and behaves like a list itself. It supports\n    serialization of the list of objects automatically.\n    """'
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
name|'list'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__iter__
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List iterator interface."""'
newline|'\n'
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List length."""'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List index access."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'index'
op|','
name|'slice'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_obj'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
op|')'
newline|'\n'
name|'new_obj'
op|'.'
name|'objects'
op|'='
name|'self'
op|'.'
name|'objects'
op|'['
name|'index'
op|']'
newline|'\n'
comment|'# NOTE(danms): We must be mixed in with a NovaObject!'
nl|'\n'
name|'new_obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'new_obj'
op|'.'
name|'_context'
op|'='
name|'self'
op|'.'
name|'_context'
newline|'\n'
name|'return'
name|'new_obj'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'objects'
op|'['
name|'index'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List membership test."""'
newline|'\n'
name|'return'
name|'value'
name|'in'
name|'self'
op|'.'
name|'objects'
newline|'\n'
nl|'\n'
DECL|member|count
dedent|''
name|'def'
name|'count'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List count of value occurrences."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'objects'
op|'.'
name|'count'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List index of value."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'objects'
op|'.'
name|'index'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attr_objects_to_primitive
dedent|''
name|'def'
name|'_attr_objects_to_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialization of object list."""'
newline|'\n'
name|'return'
op|'['
name|'x'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'objects'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_attr_objects_from_primitive
dedent|''
name|'def'
name|'_attr_objects_from_primitive'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialization of object list."""'
newline|'\n'
name|'objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'entity'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'entity'
op|','
name|'context'
op|'='
name|'self'
op|'.'
name|'_context'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'append'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'objects'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaObjectSerializer
dedent|''
dedent|''
name|'class'
name|'NovaObjectSerializer'
op|'('
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
op|'.'
name|'serializer'
op|'.'
name|'Serializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A NovaObject-aware Serializer.\n\n    This implements the Oslo Serializer interface and provides the\n    ability to serialize and deserialize NovaObject entities. Any service\n    that needs to accept or return NovaObjects as arguments or result values\n    should pass this to its RpcProxy and RpcDispatcher objects.\n    """'
newline|'\n'
DECL|member|_process_iterable
name|'def'
name|'_process_iterable'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'action_fn'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process an iterable, taking an action on each value.\n        :param:context: Request context\n        :param:action_fn: Action to take on each item in values\n        :param:values: Iterable container of things to take action on\n        :returns: A new container of the same type (except set) with\n                  items from values having had action applied.\n        """'
newline|'\n'
name|'iterable'
op|'='
name|'values'
op|'.'
name|'__class__'
newline|'\n'
name|'if'
name|'iterable'
op|'=='
name|'set'
op|':'
newline|'\n'
comment|"# NOTE(danms): A set can't have an unhashable value inside, such as"
nl|'\n'
comment|"# a dict. Convert sets to tuples, which is fine, since we can't"
nl|'\n'
comment|'# send them over RPC anyway.'
nl|'\n'
indent|'            '
name|'iterable'
op|'='
name|'tuple'
newline|'\n'
dedent|''
name|'return'
name|'iterable'
op|'('
op|'['
name|'action_fn'
op|'('
name|'context'
op|','
name|'value'
op|')'
name|'for'
name|'value'
name|'in'
name|'values'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|serialize_entity
dedent|''
name|'def'
name|'serialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'entity'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'self'
op|'.'
name|'_process_iterable'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'serialize_entity'
op|','
nl|'\n'
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'hasattr'
op|'('
name|'entity'
op|','
string|"'obj_to_primitive'"
op|')'
name|'and'
nl|'\n'
name|'callable'
op|'('
name|'entity'
op|'.'
name|'obj_to_primitive'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'entity'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'entity'
newline|'\n'
nl|'\n'
DECL|member|deserialize_entity
dedent|''
name|'def'
name|'deserialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'entity'
op|','
name|'dict'
op|')'
name|'and'
string|"'nova_object.name'"
name|'in'
name|'entity'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'entity'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'entity'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'entity'
op|'='
name|'self'
op|'.'
name|'_process_iterable'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'deserialize_entity'
op|','
nl|'\n'
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'entity'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|obj_to_primitive
dedent|''
dedent|''
name|'def'
name|'obj_to_primitive'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Recursively turn an object into a python primitive.\n\n    A NovaObject becomes a dict, and anything that implements ObjectListBase\n    becomes a list.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'ObjectListBase'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'obj_to_primitive'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'obj'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'obj'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
name|'key'
op|']'
op|'='
name|'obj_to_primitive'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

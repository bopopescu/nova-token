begin_unit
comment|'#    Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'collections'
name|'import'
name|'OrderedDict'
newline|'\n'
nl|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'oslo_versionedobjects'
name|'import'
name|'fields'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
comment|'# TODO(berrange) Temporary import for Arch class'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'arch'
newline|'\n'
comment|'# TODO(berrange) Temporary import for CPU* classes'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'cpumodel'
newline|'\n'
comment|'# TODO(berrange) Temporary import for HVType class'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'hv_type'
newline|'\n'
comment|'# TODO(berrange) Temporary import for VMMode class'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_mode'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Import field errors from oslo.versionedobjects'
nl|'\n'
DECL|variable|KeyTypeError
name|'KeyTypeError'
op|'='
name|'fields'
op|'.'
name|'KeyTypeError'
newline|'\n'
DECL|variable|ElementTypeError
name|'ElementTypeError'
op|'='
name|'fields'
op|'.'
name|'ElementTypeError'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Import fields from oslo.versionedobjects'
nl|'\n'
DECL|variable|BooleanField
name|'BooleanField'
op|'='
name|'fields'
op|'.'
name|'BooleanField'
newline|'\n'
DECL|variable|UnspecifiedDefault
name|'UnspecifiedDefault'
op|'='
name|'fields'
op|'.'
name|'UnspecifiedDefault'
newline|'\n'
DECL|variable|IntegerField
name|'IntegerField'
op|'='
name|'fields'
op|'.'
name|'IntegerField'
newline|'\n'
DECL|variable|UUIDField
name|'UUIDField'
op|'='
name|'fields'
op|'.'
name|'UUIDField'
newline|'\n'
DECL|variable|FloatField
name|'FloatField'
op|'='
name|'fields'
op|'.'
name|'FloatField'
newline|'\n'
DECL|variable|StringField
name|'StringField'
op|'='
name|'fields'
op|'.'
name|'StringField'
newline|'\n'
DECL|variable|EnumField
name|'EnumField'
op|'='
name|'fields'
op|'.'
name|'EnumField'
newline|'\n'
DECL|variable|DateTimeField
name|'DateTimeField'
op|'='
name|'fields'
op|'.'
name|'DateTimeField'
newline|'\n'
DECL|variable|DictOfStringsField
name|'DictOfStringsField'
op|'='
name|'fields'
op|'.'
name|'DictOfStringsField'
newline|'\n'
DECL|variable|DictOfNullableStringsField
name|'DictOfNullableStringsField'
op|'='
name|'fields'
op|'.'
name|'DictOfNullableStringsField'
newline|'\n'
DECL|variable|DictOfIntegersField
name|'DictOfIntegersField'
op|'='
name|'fields'
op|'.'
name|'DictOfIntegersField'
newline|'\n'
DECL|variable|ListOfStringsField
name|'ListOfStringsField'
op|'='
name|'fields'
op|'.'
name|'ListOfStringsField'
newline|'\n'
DECL|variable|SetOfIntegersField
name|'SetOfIntegersField'
op|'='
name|'fields'
op|'.'
name|'SetOfIntegersField'
newline|'\n'
DECL|variable|ListOfSetsOfIntegersField
name|'ListOfSetsOfIntegersField'
op|'='
name|'fields'
op|'.'
name|'ListOfSetsOfIntegersField'
newline|'\n'
DECL|variable|ListOfDictOfNullableStringsField
name|'ListOfDictOfNullableStringsField'
op|'='
name|'fields'
op|'.'
name|'ListOfDictOfNullableStringsField'
newline|'\n'
DECL|variable|DictProxyField
name|'DictProxyField'
op|'='
name|'fields'
op|'.'
name|'DictProxyField'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(danms): These are things we need to import for some of our'
nl|'\n'
comment|'# own implementations below, our tests, or other transitional'
nl|'\n'
comment|'# bits of code. These should be removable after we finish our'
nl|'\n'
comment|'# conversion'
nl|'\n'
DECL|variable|Enum
name|'Enum'
op|'='
name|'fields'
op|'.'
name|'Enum'
newline|'\n'
DECL|variable|Field
name|'Field'
op|'='
name|'fields'
op|'.'
name|'Field'
newline|'\n'
DECL|variable|FieldType
name|'FieldType'
op|'='
name|'fields'
op|'.'
name|'FieldType'
newline|'\n'
DECL|variable|Set
name|'Set'
op|'='
name|'fields'
op|'.'
name|'Set'
newline|'\n'
DECL|variable|Dict
name|'Dict'
op|'='
name|'fields'
op|'.'
name|'Dict'
newline|'\n'
DECL|variable|List
name|'List'
op|'='
name|'fields'
op|'.'
name|'List'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Architecture
name|'class'
name|'Architecture'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.arch'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Architecture'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'arch'
op|'.'
name|'ALL'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'arch'
op|'.'
name|'canonicalize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidArchitectureName'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Architecture name \'%s\' is not valid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'Architecture'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUAllocationPolicy
dedent|''
dedent|''
name|'class'
name|'CPUAllocationPolicy'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|DEDICATED
indent|'    '
name|'DEDICATED'
op|'='
string|'"dedicated"'
newline|'\n'
DECL|variable|SHARED
name|'SHARED'
op|'='
string|'"shared"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'DEDICATED'
op|','
name|'SHARED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUAllocationPolicy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'CPUAllocationPolicy'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMode
dedent|''
dedent|''
name|'class'
name|'CPUMode'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.cpumodel'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUMode'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'cpumodel'
op|'.'
name|'ALL_CPUMODES'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMatch
dedent|''
dedent|''
name|'class'
name|'CPUMatch'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.cpumodel'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUMatch'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'cpumodel'
op|'.'
name|'ALL_MATCHES'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUFeaturePolicy
dedent|''
dedent|''
name|'class'
name|'CPUFeaturePolicy'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.cpumodel'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUFeaturePolicy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'cpumodel'
op|'.'
name|'ALL_POLICIES'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskBus
dedent|''
dedent|''
name|'class'
name|'DiskBus'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|FDC
indent|'    '
name|'FDC'
op|'='
string|'"fdc"'
newline|'\n'
DECL|variable|IDE
name|'IDE'
op|'='
string|'"ide"'
newline|'\n'
DECL|variable|SATA
name|'SATA'
op|'='
string|'"sata"'
newline|'\n'
DECL|variable|SCSI
name|'SCSI'
op|'='
string|'"scsi"'
newline|'\n'
DECL|variable|USB
name|'USB'
op|'='
string|'"usb"'
newline|'\n'
DECL|variable|VIRTIO
name|'VIRTIO'
op|'='
string|'"virtio"'
newline|'\n'
DECL|variable|XEN
name|'XEN'
op|'='
string|'"xen"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'FDC'
op|','
name|'IDE'
op|','
name|'SATA'
op|','
name|'SCSI'
op|','
name|'USB'
op|','
name|'VIRTIO'
op|','
name|'XEN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DiskBus'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'DiskBus'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HVType
dedent|''
dedent|''
name|'class'
name|'HVType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.hv_type'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HVType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'hv_type'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'hv_type'
op|'.'
name|'canonicalize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidHypervisorVirtType'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Hypervisor virt type \'%s\' is not valid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'HVType'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OSType
dedent|''
dedent|''
name|'class'
name|'OSType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|LINUX
indent|'    '
name|'LINUX'
op|'='
string|'"linux"'
newline|'\n'
DECL|variable|WINDOWS
name|'WINDOWS'
op|'='
string|'"windows"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'LINUX'
op|','
name|'WINDOWS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'OSType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'OSType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# Some code/docs use upper case or initial caps'
nl|'\n'
comment|'# so canonicalize to all lower case'
nl|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'OSType'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RNGModel
dedent|''
dedent|''
name|'class'
name|'RNGModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|VIRTIO
indent|'    '
name|'VIRTIO'
op|'='
string|'"virtio"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'VIRTIO'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RNGModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'RNGModel'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SCSIModel
dedent|''
dedent|''
name|'class'
name|'SCSIModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|BUSLOGIC
indent|'    '
name|'BUSLOGIC'
op|'='
string|'"buslogic"'
newline|'\n'
DECL|variable|IBMVSCSI
name|'IBMVSCSI'
op|'='
string|'"ibmvscsi"'
newline|'\n'
DECL|variable|LSILOGIC
name|'LSILOGIC'
op|'='
string|'"lsilogic"'
newline|'\n'
DECL|variable|LSISAS1068
name|'LSISAS1068'
op|'='
string|'"lsisas1068"'
newline|'\n'
DECL|variable|LSISAS1078
name|'LSISAS1078'
op|'='
string|'"lsisas1078"'
newline|'\n'
DECL|variable|VIRTIO_SCSI
name|'VIRTIO_SCSI'
op|'='
string|'"virtio-scsi"'
newline|'\n'
DECL|variable|VMPVSCSI
name|'VMPVSCSI'
op|'='
string|'"vmpvscsi"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'BUSLOGIC'
op|','
name|'IBMVSCSI'
op|','
name|'LSILOGIC'
op|','
name|'LSISAS1068'
op|','
nl|'\n'
name|'LSISAS1078'
op|','
name|'VIRTIO_SCSI'
op|','
name|'VMPVSCSI'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SCSIModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'SCSIModel'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|"# Some compat for strings we'd see in the legacy"
nl|'\n'
comment|'# vmware_adaptertype image property'
nl|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'value'
op|'=='
string|'"lsilogicsas"'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'SCSIModel'
op|'.'
name|'LSISAS1068'
newline|'\n'
dedent|''
name|'elif'
name|'value'
op|'=='
string|'"paravirtual"'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'SCSIModel'
op|'.'
name|'VMPVSCSI'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'SCSIModel'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VideoModel
dedent|''
dedent|''
name|'class'
name|'VideoModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|CIRRUS
indent|'    '
name|'CIRRUS'
op|'='
string|'"cirrus"'
newline|'\n'
DECL|variable|QXL
name|'QXL'
op|'='
string|'"qxl"'
newline|'\n'
DECL|variable|VGA
name|'VGA'
op|'='
string|'"vga"'
newline|'\n'
DECL|variable|VMVGA
name|'VMVGA'
op|'='
string|'"vmvga"'
newline|'\n'
DECL|variable|XEN
name|'XEN'
op|'='
string|'"xen"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'CIRRUS'
op|','
name|'QXL'
op|','
name|'VGA'
op|','
name|'VMVGA'
op|','
name|'XEN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VideoModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'VideoModel'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VIFModel
dedent|''
dedent|''
name|'class'
name|'VIFModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|LEGACY_VALUES
indent|'    '
name|'LEGACY_VALUES'
op|'='
op|'{'
string|'"virtuale1000"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|','
nl|'\n'
string|'"virtuale1000e"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000E'
op|','
nl|'\n'
string|'"virtualpcnet32"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_PCNET'
op|','
nl|'\n'
string|'"virtualsriovethernetcard"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_SRIOV'
op|','
nl|'\n'
string|'"virtualvmxnet"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_VMXNET'
op|','
nl|'\n'
string|'"virtualvmxnet3"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_VMXNET3'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VIFModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'network_model'
op|'.'
name|'VIF_MODEL_ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_legacy
dedent|''
name|'def'
name|'_get_legacy'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|"# Some compat for strings we'd see in the legacy"
nl|'\n'
comment|'# hw_vif_model image property'
nl|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'VIFModel'
op|'.'
name|'LEGACY_VALUES'
op|'.'
name|'get'
op|'('
name|'value'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'VIFModel'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMMode
dedent|''
dedent|''
name|'class'
name|'VMMode'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.vm_mode'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMMode'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'vm_mode'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'vm_mode'
op|'.'
name|'canonicalize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidVirtualMachineMode'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Virtual machine mode \'%s\' is not valid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'VMMode'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WatchdogAction
dedent|''
dedent|''
name|'class'
name|'WatchdogAction'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|NONE
indent|'    '
name|'NONE'
op|'='
string|'"none"'
newline|'\n'
DECL|variable|PAUSE
name|'PAUSE'
op|'='
string|'"pause"'
newline|'\n'
DECL|variable|POWEROFF
name|'POWEROFF'
op|'='
string|'"poweroff"'
newline|'\n'
DECL|variable|RESET
name|'RESET'
op|'='
string|'"reset"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'NONE'
op|','
name|'PAUSE'
op|','
name|'POWEROFF'
op|','
name|'RESET'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'WatchdogAction'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'WatchdogAction'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(danms): Remove this on next release of oslo.versionedobjects'
nl|'\n'
DECL|class|FlexibleBoolean
dedent|''
dedent|''
name|'class'
name|'FlexibleBoolean'
op|'('
name|'fields'
op|'.'
name|'Boolean'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'strutils'
op|'.'
name|'bool_from_string'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPAddress
dedent|''
dedent|''
name|'class'
name|'IPAddress'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4Address
dedent|''
dedent|''
name|'class'
name|'IPV4Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6Address
dedent|''
dedent|''
name|'class'
name|'IPV6Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AndV6Address
dedent|''
dedent|''
name|'class'
name|'IPV4AndV6Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'4'
name|'and'
name|'result'
op|'.'
name|'version'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPNetwork
dedent|''
dedent|''
name|'class'
name|'IPNetwork'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4Network
dedent|''
dedent|''
dedent|''
name|'class'
name|'IPV4Network'
op|'('
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|','
name|'version'
op|'='
number|'4'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6Network
dedent|''
dedent|''
dedent|''
name|'class'
name|'IPV6Network'
op|'('
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# FIXME(danms): Remove this after we convert to oslo.versionedobjects' registry"
nl|'\n'
DECL|class|Object
dedent|''
dedent|''
dedent|''
name|'class'
name|'Object'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_obj_name'
op|'='
name|'obj_name'
newline|'\n'
name|'super'
op|'('
name|'Object'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'obj_name'
op|'='
name|'value'
op|'.'
name|'obj_name'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'obj_name'
op|'='
string|'""'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'obj_name'
op|'!='
name|'self'
op|'.'
name|'_obj_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'An object of type %(type)s is required '"
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'self'
op|'.'
name|'_obj_name'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(danms): Avoid circular import from base.py'
nl|'\n'
indent|'        '
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
comment|'# NOTE (ndipanov): If they already got hydrated by the serializer, just'
nl|'\n'
comment|'# pass them back unchanged'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'obj_base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'value'
op|','
name|'obj'
op|'.'
name|'_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Object<%s>"'
op|'%'
name|'self'
op|'.'
name|'_obj_name'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'uuid'"
name|'in'
name|'value'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'ident'
op|'='
string|"'(%s)'"
op|'%'
op|'('
name|'value'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'uuid'"
op|')'
name|'and'
name|'value'
op|'.'
name|'uuid'
name|'or'
nl|'\n'
string|"'UNKNOWN'"
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'id'"
name|'in'
name|'value'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'ident'
op|'='
string|"'(%s)'"
op|'%'
op|'('
name|'value'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'id'"
op|')'
name|'and'
name|'value'
op|'.'
name|'id'
name|'or'
nl|'\n'
string|"'UNKNOWN'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ident'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"'%s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_obj_name'
op|','
name|'ident'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkModel
dedent|''
dedent|''
name|'class'
name|'NetworkModel'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'network_model'
op|'.'
name|'NetworkInfo'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
comment|'# Hmm, do we need this?'
nl|'\n'
indent|'            '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A NetworkModel is required in field %s'"
op|')'
op|'%'
nl|'\n'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'json'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'NetworkModel(%s)'"
op|'%'
op|'('
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
name|'for'
name|'vif'
name|'in'
name|'value'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AutoTypedField
dedent|''
dedent|''
name|'class'
name|'AutoTypedField'
op|'('
name|'fields'
op|'.'
name|'Field'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AutoTypedField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'AUTO_TYPE'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# FIXME(danms): Remove this after oslo.versionedobjects gets it'
nl|'\n'
DECL|class|BaseEnumField
dedent|''
dedent|''
name|'class'
name|'BaseEnumField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''This class should not be directly instantiated. Instead\n    subclass it and set AUTO_TYPE to be a SomeEnum()\n    where SomeEnum is a subclass of Enum.\n    '''"
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'AUTO_TYPE'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'EnumFieldUnset'
op|'('
nl|'\n'
name|'fieldname'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'AUTO_TYPE'
op|','
name|'Enum'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'EnumFieldInvalid'
op|'('
nl|'\n'
name|'typename'
op|'='
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'.'
name|'__class__'
op|'.'
name|'__name'
op|','
nl|'\n'
name|'fieldname'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'BaseEnumField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'valid_values'
op|'='
name|'self'
op|'.'
name|'_type'
op|'.'
name|'_valid_values'
newline|'\n'
name|'args'
op|'='
op|'{'
nl|'\n'
string|"'nullable'"
op|':'
name|'self'
op|'.'
name|'_nullable'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'self'
op|'.'
name|'_default'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'valid_values'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'update'
op|'('
op|'{'
string|"'valid_values'"
op|':'
name|'valid_values'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'='
name|'OrderedDict'
op|'('
name|'sorted'
op|'('
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'%s(%s)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_type'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ArchitectureField
dedent|''
dedent|''
name|'class'
name|'ArchitectureField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Architecture'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUAllocationPolicyField
dedent|''
name|'class'
name|'CPUAllocationPolicyField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUAllocationPolicy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUModeField
dedent|''
name|'class'
name|'CPUModeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMatchField
dedent|''
name|'class'
name|'CPUMatchField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUMatch'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUFeaturePolicyField
dedent|''
name|'class'
name|'CPUFeaturePolicyField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUFeaturePolicy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskBusField
dedent|''
name|'class'
name|'DiskBusField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'DiskBus'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HVTypeField
dedent|''
name|'class'
name|'HVTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'HVType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OSTypeField
dedent|''
name|'class'
name|'OSTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'OSType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RNGModelField
dedent|''
name|'class'
name|'RNGModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'RNGModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SCSIModelField
dedent|''
name|'class'
name|'SCSIModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'SCSIModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VideoModelField
dedent|''
name|'class'
name|'VideoModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'VideoModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VIFModelField
dedent|''
name|'class'
name|'VIFModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'VIFModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMModeField
dedent|''
name|'class'
name|'VMModeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'VMMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WatchdogActionField
dedent|''
name|'class'
name|'WatchdogActionField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'WatchdogAction'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# FIXME(danms): Remove this after oslo.versionedobjects gets it'
nl|'\n'
comment|'# This is a flexible interpretation of boolean'
nl|'\n'
comment|'# values using common user friendly semantics for'
nl|'\n'
comment|"# truth/falsehood. ie strings like 'yes', 'no',"
nl|'\n'
comment|"# 'on', 'off', 't', 'f' get mapped to values you"
nl|'\n'
comment|'# would expect.'
nl|'\n'
DECL|class|FlexibleBooleanField
dedent|''
name|'class'
name|'FlexibleBooleanField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'FlexibleBoolean'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPAddressField
dedent|''
name|'class'
name|'IPAddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AddressField
dedent|''
name|'class'
name|'IPV4AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6AddressField
dedent|''
name|'class'
name|'IPV6AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV6Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AndV6AddressField
dedent|''
name|'class'
name|'IPV4AndV6AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4AndV6Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPNetworkField
dedent|''
name|'class'
name|'IPNetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPNetwork'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4NetworkField
dedent|''
name|'class'
name|'IPV4NetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4Network'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6NetworkField
dedent|''
name|'class'
name|'IPV6NetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV6Network'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfIntegersField
dedent|''
name|'class'
name|'ListOfIntegersField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# FIXME(danms): Remove this after we convert to oslo.versionedobjects' registry"
nl|'\n'
DECL|class|ObjectField
dedent|''
name|'class'
name|'ObjectField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'objtype'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'='
name|'Object'
op|'('
name|'objtype'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ObjectField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# FIXME(danms): Remove this after we convert to oslo.versionedobjects' registry"
nl|'\n'
DECL|class|ListOfObjectsField
dedent|''
dedent|''
name|'class'
name|'ListOfObjectsField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'objtype'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'Object'
op|'('
name|'objtype'
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ListOfObjectsField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

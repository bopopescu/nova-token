begin_unit
comment|'#    Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
name|'from'
name|'collections'
name|'import'
name|'OrderedDict'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'iso8601'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeyTypeError
name|'class'
name|'KeyTypeError'
op|'('
name|'TypeError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'KeyTypeError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Key %(key)s must be of type %(expected)s not %(actual)s'"
nl|'\n'
op|')'
op|'%'
op|'{'
string|"'key'"
op|':'
name|'repr'
op|'('
name|'value'
op|')'
op|','
nl|'\n'
string|"'expected'"
op|':'
name|'expected'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"'actual'"
op|':'
name|'value'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ElementTypeError
dedent|''
dedent|''
name|'class'
name|'ElementTypeError'
op|'('
name|'TypeError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ElementTypeError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Element %(key)s:%(val)s must be of type %(expected)s'"
nl|'\n'
string|"' not %(actual)s'"
nl|'\n'
op|')'
op|'%'
op|'{'
string|"'key'"
op|':'
name|'key'
op|','
nl|'\n'
string|"'val'"
op|':'
name|'repr'
op|'('
name|'value'
op|')'
op|','
nl|'\n'
string|"'expected'"
op|':'
name|'expected'
op|','
nl|'\n'
string|"'actual'"
op|':'
name|'value'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
DECL|class|AbstractFieldType
name|'class'
name|'AbstractFieldType'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is called to coerce (if possible) a value on assignment.\n\n        This method should convert the value given into the designated type,\n        or throw an exception if this is not possible.\n\n        :param:obj: The NovaObject on which an attribute is being set\n        :param:attr: The name of the attribute being set\n        :param:value: The value being set\n        :returns: A properly-typed value\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is called to deserialize a value.\n\n        This method should deserialize a value from the form given by\n        to_primitive() to the designated type.\n\n        :param:obj: The NovaObject on which the value is to be set\n        :param:attr: The name of the attribute which will hold the value\n        :param:value: The serialized form of the value\n        :returns: The natural form of the value\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is called to serialize a value.\n\n        This method should serialize a value to the form expected by\n        from_primitive().\n\n        :param:obj: The NovaObject on which the value is set\n        :param:attr: The name of the attribute holding the value\n        :param:value: The natural form of the value\n        :returns: The serialized form of the value\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|describe
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a string describing the type of the field."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|stringify
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a short stringified version of a value."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FieldType
dedent|''
dedent|''
name|'class'
name|'FieldType'
op|'('
name|'AbstractFieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnspecifiedDefault
dedent|''
dedent|''
name|'class'
name|'UnspecifiedDefault'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Field
dedent|''
name|'class'
name|'Field'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'field_type'
op|','
name|'nullable'
op|'='
name|'False'
op|','
nl|'\n'
name|'default'
op|'='
name|'UnspecifiedDefault'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_type'
op|'='
name|'field_type'
newline|'\n'
name|'self'
op|'.'
name|'_nullable'
op|'='
name|'nullable'
newline|'\n'
name|'self'
op|'.'
name|'_default'
op|'='
name|'default'
newline|'\n'
name|'self'
op|'.'
name|'_read_only'
op|'='
name|'read_only'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'{'
nl|'\n'
string|"'nullable'"
op|':'
name|'self'
op|'.'
name|'_nullable'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'self'
op|'.'
name|'_default'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'args'
op|'='
name|'OrderedDict'
op|'('
name|'sorted'
op|'('
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'%s(%s)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_type'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|nullable
name|'def'
name|'nullable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_nullable'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|default
name|'def'
name|'default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_default'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|read_only
name|'def'
name|'read_only'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_read_only'
newline|'\n'
nl|'\n'
DECL|member|_null
dedent|''
name|'def'
name|'_null'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'nullable'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_default'
op|'!='
name|'UnspecifiedDefault'
op|':'
newline|'\n'
comment|'# NOTE(danms): We coerce the default value each time the field'
nl|'\n'
comment|"# is set to None as our contract states that we'll let the type"
nl|'\n'
comment|'# examine the object and attribute name at that time.'
nl|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_type'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'_default'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"Field `%s\' cannot be None"'
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Coerce a value to a suitable type.\n\n        This is called any time you set a value on an object, like:\n\n          foo.myint = 1\n\n        and is responsible for making sure that the value (1 here) is of\n        the proper type, or can be sanely converted.\n\n        This also handles the potentially nullable or defaultable\n        nature of the field and calls the coerce() method on a\n        FieldType to actually do the coercion.\n\n        :param:obj: The object being acted upon\n        :param:attr: The name of the attribute/field being set\n        :param:value: The value being set\n        :returns: The properly-typed value\n        """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_null'
op|'('
name|'obj'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_type'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialize a value from primitive form.\n\n        This is responsible for deserializing a value from primitive\n        into regular form. It calls the from_primitive() method on a\n        FieldType to do the actual deserialization.\n\n        :param:obj: The object being acted upon\n        :param:attr: The name of the attribute/field being deserialized\n        :param:value: The value to be deserialized\n        :returns: The deserialized value\n        """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_type'
op|'.'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|to_primitive
dedent|''
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialize a value to primitive form.\n\n        This is responsible for serializing a value to primitive\n        form. It calls to_primitive() on a FieldType to do the actual\n        serialization.\n\n        :param:obj: The object being acted upon\n        :param:attr: The name of the attribute/field being serialized\n        :param:value: The value to be serialized\n        :returns: The serialized value\n        """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_type'
op|'.'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a short string describing the type of this field."""'
newline|'\n'
name|'name'
op|'='
name|'self'
op|'.'
name|'_type'
op|'.'
name|'describe'
op|'('
op|')'
newline|'\n'
name|'prefix'
op|'='
name|'self'
op|'.'
name|'nullable'
name|'and'
string|"'Nullable'"
name|'or'
string|"''"
newline|'\n'
name|'return'
name|'prefix'
op|'+'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'None'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_type'
op|'.'
name|'stringify'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|String
dedent|''
dedent|''
dedent|''
name|'class'
name|'String'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(danms): We should really try to avoid the need to do this'
nl|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
op|'('
name|'six'
op|'.'
name|'string_types'
op|','
name|'int'
op|','
name|'long'
op|','
name|'float'
op|','
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'unicode'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A string is required in field %(attr)s, '"
nl|'\n'
string|"'not %(type)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'attr'"
op|':'
name|'attr'
op|','
string|"'type'"
op|':'
name|'value'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|stringify
name|'def'
name|'stringify'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'\\'%s\\''"
op|'%'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Enum
dedent|''
dedent|''
name|'class'
name|'Enum'
op|'('
name|'String'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'valid_values'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'len'
op|'('
name|'valid_values'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'valid_values is not a sequence'"
nl|'\n'
string|"' of permitted values'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'valid_values may not be empty'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_valid_values'
op|'='
name|'valid_values'
newline|'\n'
name|'super'
op|'('
name|'Enum'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_valid_values'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Field value %s is invalid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'Enum'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_valid_values'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Field value %s is invalid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'Enum'
op|','
name|'self'
op|')'
op|'.'
name|'stringify'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UUID
dedent|''
dedent|''
name|'class'
name|'UUID'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(danms): We should actually verify the UUIDness here'
nl|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Integer
dedent|''
dedent|''
name|'class'
name|'Integer'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Float
dedent|''
dedent|''
name|'class'
name|'Float'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'float'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Boolean
dedent|''
dedent|''
name|'class'
name|'Boolean'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DateTime
dedent|''
dedent|''
name|'class'
name|'DateTime'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): Being tolerant of isotime strings here will help us'
nl|'\n'
comment|'# during our objects transition'
nl|'\n'
indent|'            '
name|'value'
op|'='
name|'timeutils'
op|'.'
name|'parse_isotime'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A datetime.datetime is required '"
nl|'\n'
string|"'in field %s'"
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'value'
op|'.'
name|'utcoffset'
op|'('
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# NOTE(danms): Legacy objects from sqlalchemy are stored in UTC,'
nl|'\n'
comment|'# but are returned without a timezone attached.'
nl|'\n'
comment|'# As a transitional aid, assume a tz-naive object is in UTC.'
nl|'\n'
indent|'            '
name|'value'
op|'='
name|'value'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'Utc'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'timeutils'
op|'.'
name|'parse_isotime'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|stringify
name|'def'
name|'stringify'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPAddress
dedent|''
dedent|''
name|'class'
name|'IPAddress'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4Address
dedent|''
dedent|''
name|'class'
name|'IPV4Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6Address
dedent|''
dedent|''
name|'class'
name|'IPV6Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AndV6Address
dedent|''
dedent|''
name|'class'
name|'IPV4AndV6Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'4'
name|'and'
name|'result'
op|'.'
name|'version'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPNetwork
dedent|''
dedent|''
name|'class'
name|'IPNetwork'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4Network
dedent|''
dedent|''
dedent|''
name|'class'
name|'IPV4Network'
op|'('
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|','
name|'version'
op|'='
number|'4'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6Network
dedent|''
dedent|''
dedent|''
name|'class'
name|'IPV6Network'
op|'('
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CompoundFieldType
dedent|''
dedent|''
dedent|''
name|'class'
name|'CompoundFieldType'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'element_type'
op|','
op|'**'
name|'field_args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_element_type'
op|'='
name|'Field'
op|'('
name|'element_type'
op|','
op|'**'
name|'field_args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|List
dedent|''
dedent|''
name|'class'
name|'List'
op|'('
name|'CompoundFieldType'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A list is required in field %s'"
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'index'
op|','
name|'element'
name|'in'
name|'enumerate'
op|'('
name|'list'
op|'('
name|'value'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'['
name|'index'
op|']'
op|'='
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'coerce'
op|'('
nl|'\n'
name|'obj'
op|','
string|"'%s[%i]'"
op|'%'
op|'('
name|'attr'
op|','
name|'index'
op|')'
op|','
name|'element'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|to_primitive
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'value'
op|']'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'value'
op|']'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'[%s]'"
op|'%'
op|'('
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'stringify'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'value'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Dict
dedent|''
dedent|''
name|'class'
name|'Dict'
op|'('
name|'CompoundFieldType'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A dict is required in field %s'"
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'element'
name|'in'
name|'value'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'key'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(guohliu) In order to keep compatibility with python3'
nl|'\n'
comment|'# we need to use six.string_types rather than basestring here,'
nl|'\n'
comment|'# since six.string_types is a tuple, so we need to pass the'
nl|'\n'
comment|'# real type in.'
nl|'\n'
indent|'                '
name|'raise'
name|'KeyTypeError'
op|'('
name|'six'
op|'.'
name|'string_types'
op|'['
number|'0'
op|']'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'value'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'coerce'
op|'('
nl|'\n'
name|'obj'
op|','
string|'\'%s["%s"]\''
op|'%'
op|'('
name|'attr'
op|','
name|'key'
op|')'
op|','
name|'element'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|to_primitive
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'element'
name|'in'
name|'value'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'to_primitive'
op|'('
nl|'\n'
name|'obj'
op|','
string|'\'%s["%s"]\''
op|'%'
op|'('
name|'attr'
op|','
name|'key'
op|')'
op|','
name|'element'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'primitive'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'concrete'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'element'
name|'in'
name|'value'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'concrete'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'from_primitive'
op|'('
nl|'\n'
name|'obj'
op|','
string|'\'%s["%s"]\''
op|'%'
op|'('
name|'attr'
op|','
name|'key'
op|')'
op|','
name|'element'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'concrete'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'{%s}'"
op|'%'
op|'('
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'stringify'
op|'('
name|'val'
op|')'
op|')'
nl|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'sorted'
op|'('
name|'value'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictProxyField
dedent|''
dedent|''
name|'class'
name|'DictProxyField'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Descriptor allowing us to assign pinning data as a dict of key_types\n\n    This allows us to have an object field that will be a dict of key_type\n    keys, allowing that will convert back to string-keyed dict.\n\n    This will take care of the conversion while the dict field will make sure\n    that we store the raw json-serializable data on the object.\n\n    key_type should return a type that unambiguously responds to six.text_type\n    so that calling key_type on it yields the same thing.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dict_field_name'
op|','
name|'key_type'
op|'='
name|'int'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_fld_name'
op|'='
name|'dict_field_name'
newline|'\n'
name|'self'
op|'.'
name|'_key_type'
op|'='
name|'key_type'
newline|'\n'
nl|'\n'
DECL|member|__get__
dedent|''
name|'def'
name|'__get__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'obj_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'obj'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
newline|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'obj'
op|','
name|'self'
op|'.'
name|'_fld_name'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'return'
op|'{'
name|'self'
op|'.'
name|'_key_type'
op|'('
name|'k'
op|')'
op|':'
name|'v'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'getattr'
op|'('
name|'obj'
op|','
name|'self'
op|'.'
name|'_fld_name'
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__set__
dedent|''
name|'def'
name|'__set__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'val'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'obj'
op|','
name|'self'
op|'.'
name|'_fld_name'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'obj'
op|','
name|'self'
op|'.'
name|'_fld_name'
op|','
op|'{'
name|'six'
op|'.'
name|'text_type'
op|'('
name|'k'
op|')'
op|':'
name|'v'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'val'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Set
dedent|''
dedent|''
dedent|''
name|'class'
name|'Set'
op|'('
name|'CompoundFieldType'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A set is required in field %s'"
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'coerced'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'element'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'coerced'
op|'.'
name|'add'
op|'('
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'coerce'
op|'('
nl|'\n'
name|'obj'
op|','
string|'\'%s["%s"]\''
op|'%'
op|'('
name|'attr'
op|','
name|'element'
op|')'
op|','
name|'element'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'coerced'
newline|'\n'
nl|'\n'
DECL|member|to_primitive
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'tuple'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'set'
op|'('
op|'['
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'x'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'value'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'set([%s])'"
op|'%'
op|'('
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
name|'self'
op|'.'
name|'_element_type'
op|'.'
name|'stringify'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'value'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Object
dedent|''
dedent|''
name|'class'
name|'Object'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_obj_name'
op|'='
name|'obj_name'
newline|'\n'
name|'super'
op|'('
name|'Object'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'obj_name'
op|'='
name|'value'
op|'.'
name|'obj_name'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'obj_name'
op|'='
string|'""'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'obj_name'
op|'!='
name|'self'
op|'.'
name|'_obj_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'An object of type %(type)s is required '"
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'type'"
op|':'
name|'self'
op|'.'
name|'_obj_name'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(danms): Avoid circular import from base.py'
nl|'\n'
indent|'        '
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
comment|'# NOTE (ndipanov): If they already got hydrated by the serializer, just'
nl|'\n'
comment|'# pass them back unchanged'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'obj_base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'value'
op|','
name|'obj'
op|'.'
name|'_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Object<%s>"'
op|'%'
name|'self'
op|'.'
name|'_obj_name'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'uuid'"
name|'in'
name|'value'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'ident'
op|'='
string|"'(%s)'"
op|'%'
op|'('
name|'value'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'uuid'"
op|')'
name|'and'
name|'value'
op|'.'
name|'uuid'
name|'or'
nl|'\n'
string|"'UNKNOWN'"
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'id'"
name|'in'
name|'value'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'ident'
op|'='
string|"'(%s)'"
op|'%'
op|'('
name|'value'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'id'"
op|')'
name|'and'
name|'value'
op|'.'
name|'id'
name|'or'
nl|'\n'
string|"'UNKNOWN'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ident'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"'%s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_obj_name'
op|','
name|'ident'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkModel
dedent|''
dedent|''
name|'class'
name|'NetworkModel'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'network_model'
op|'.'
name|'NetworkInfo'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
comment|'# Hmm, do we need this?'
nl|'\n'
indent|'            '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A NetworkModel is required in field %s'"
op|')'
op|'%'
nl|'\n'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'json'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'NetworkModel(%s)'"
op|'%'
op|'('
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
name|'for'
name|'vif'
name|'in'
name|'value'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AutoTypedField
dedent|''
dedent|''
name|'class'
name|'AutoTypedField'
op|'('
name|'Field'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AutoTypedField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'AUTO_TYPE'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringField
dedent|''
dedent|''
name|'class'
name|'StringField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'String'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EnumField
dedent|''
name|'class'
name|'EnumField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'valid_values'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'='
name|'Enum'
op|'('
name|'valid_values'
op|'='
name|'valid_values'
op|')'
newline|'\n'
name|'super'
op|'('
name|'EnumField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'valid_values'
op|'='
name|'self'
op|'.'
name|'_type'
op|'.'
name|'_valid_values'
newline|'\n'
name|'args'
op|'='
op|'{'
nl|'\n'
string|"'nullable'"
op|':'
name|'self'
op|'.'
name|'_nullable'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'self'
op|'.'
name|'_default'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'valid_values'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'update'
op|'('
op|'{'
string|"'valid_values'"
op|':'
name|'valid_values'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'='
name|'OrderedDict'
op|'('
name|'sorted'
op|'('
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'%s(%s)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_type'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UUIDField
dedent|''
dedent|''
name|'class'
name|'UUIDField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'UUID'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IntegerField
dedent|''
name|'class'
name|'IntegerField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Integer'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FloatField
dedent|''
name|'class'
name|'FloatField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Float'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BooleanField
dedent|''
name|'class'
name|'BooleanField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Boolean'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DateTimeField
dedent|''
name|'class'
name|'DateTimeField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'DateTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPAddressField
dedent|''
name|'class'
name|'IPAddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AddressField
dedent|''
name|'class'
name|'IPV4AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6AddressField
dedent|''
name|'class'
name|'IPV6AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV6Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AndV6AddressField
dedent|''
name|'class'
name|'IPV4AndV6AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4AndV6Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPNetworkField
dedent|''
name|'class'
name|'IPNetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPNetwork'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4NetworkField
dedent|''
name|'class'
name|'IPV4NetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4Network'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6NetworkField
dedent|''
name|'class'
name|'IPV6NetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV6Network'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictOfStringsField
dedent|''
name|'class'
name|'DictOfStringsField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Dict'
op|'('
name|'String'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictOfNullableStringsField
dedent|''
name|'class'
name|'DictOfNullableStringsField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Dict'
op|'('
name|'String'
op|'('
op|')'
op|','
name|'nullable'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictOfIntegersField
dedent|''
name|'class'
name|'DictOfIntegersField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Dict'
op|'('
name|'Integer'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfStringsField
dedent|''
name|'class'
name|'ListOfStringsField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'String'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SetOfIntegersField
dedent|''
name|'class'
name|'SetOfIntegersField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Set'
op|'('
name|'Integer'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfSetsOfIntegersField
dedent|''
name|'class'
name|'ListOfSetsOfIntegersField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'Set'
op|'('
name|'Integer'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfDictOfNullableStringsField
dedent|''
name|'class'
name|'ListOfDictOfNullableStringsField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'Dict'
op|'('
name|'String'
op|'('
op|')'
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ObjectField
dedent|''
name|'class'
name|'ObjectField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'objtype'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'='
name|'Object'
op|'('
name|'objtype'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ObjectField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfObjectsField
dedent|''
dedent|''
name|'class'
name|'ListOfObjectsField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'objtype'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'Object'
op|'('
name|'objtype'
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ListOfObjectsField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

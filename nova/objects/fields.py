begin_unit
comment|'#    Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'collections'
name|'import'
name|'OrderedDict'
newline|'\n'
nl|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo_versionedobjects'
name|'import'
name|'fields'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
comment|'# TODO(berrange) Temporary import for Arch class'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'arch'
newline|'\n'
comment|'# TODO(berrange) Temporary import for CPU* classes'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'cpumodel'
newline|'\n'
comment|'# TODO(berrange) Temporary import for HVType class'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'hv_type'
newline|'\n'
comment|'# TODO(berrange) Temporary import for VMMode class'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_mode'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Import field errors from oslo.versionedobjects'
nl|'\n'
DECL|variable|KeyTypeError
name|'KeyTypeError'
op|'='
name|'fields'
op|'.'
name|'KeyTypeError'
newline|'\n'
DECL|variable|ElementTypeError
name|'ElementTypeError'
op|'='
name|'fields'
op|'.'
name|'ElementTypeError'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Import fields from oslo.versionedobjects'
nl|'\n'
DECL|variable|BooleanField
name|'BooleanField'
op|'='
name|'fields'
op|'.'
name|'BooleanField'
newline|'\n'
DECL|variable|UnspecifiedDefault
name|'UnspecifiedDefault'
op|'='
name|'fields'
op|'.'
name|'UnspecifiedDefault'
newline|'\n'
DECL|variable|IntegerField
name|'IntegerField'
op|'='
name|'fields'
op|'.'
name|'IntegerField'
newline|'\n'
DECL|variable|UUIDField
name|'UUIDField'
op|'='
name|'fields'
op|'.'
name|'UUIDField'
newline|'\n'
DECL|variable|FloatField
name|'FloatField'
op|'='
name|'fields'
op|'.'
name|'FloatField'
newline|'\n'
DECL|variable|StringField
name|'StringField'
op|'='
name|'fields'
op|'.'
name|'StringField'
newline|'\n'
DECL|variable|EnumField
name|'EnumField'
op|'='
name|'fields'
op|'.'
name|'EnumField'
newline|'\n'
DECL|variable|DateTimeField
name|'DateTimeField'
op|'='
name|'fields'
op|'.'
name|'DateTimeField'
newline|'\n'
DECL|variable|DictOfStringsField
name|'DictOfStringsField'
op|'='
name|'fields'
op|'.'
name|'DictOfStringsField'
newline|'\n'
DECL|variable|DictOfNullableStringsField
name|'DictOfNullableStringsField'
op|'='
name|'fields'
op|'.'
name|'DictOfNullableStringsField'
newline|'\n'
DECL|variable|DictOfIntegersField
name|'DictOfIntegersField'
op|'='
name|'fields'
op|'.'
name|'DictOfIntegersField'
newline|'\n'
DECL|variable|ListOfStringsField
name|'ListOfStringsField'
op|'='
name|'fields'
op|'.'
name|'ListOfStringsField'
newline|'\n'
DECL|variable|SetOfIntegersField
name|'SetOfIntegersField'
op|'='
name|'fields'
op|'.'
name|'SetOfIntegersField'
newline|'\n'
DECL|variable|ListOfSetsOfIntegersField
name|'ListOfSetsOfIntegersField'
op|'='
name|'fields'
op|'.'
name|'ListOfSetsOfIntegersField'
newline|'\n'
DECL|variable|ListOfDictOfNullableStringsField
name|'ListOfDictOfNullableStringsField'
op|'='
name|'fields'
op|'.'
name|'ListOfDictOfNullableStringsField'
newline|'\n'
DECL|variable|DictProxyField
name|'DictProxyField'
op|'='
name|'fields'
op|'.'
name|'DictProxyField'
newline|'\n'
DECL|variable|ObjectField
name|'ObjectField'
op|'='
name|'fields'
op|'.'
name|'ObjectField'
newline|'\n'
DECL|variable|ListOfObjectsField
name|'ListOfObjectsField'
op|'='
name|'fields'
op|'.'
name|'ListOfObjectsField'
newline|'\n'
DECL|variable|VersionPredicateField
name|'VersionPredicateField'
op|'='
name|'fields'
op|'.'
name|'VersionPredicateField'
newline|'\n'
DECL|variable|FlexibleBooleanField
name|'FlexibleBooleanField'
op|'='
name|'fields'
op|'.'
name|'FlexibleBooleanField'
newline|'\n'
DECL|variable|DictOfListOfStringsField
name|'DictOfListOfStringsField'
op|'='
name|'fields'
op|'.'
name|'DictOfListOfStringsField'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(danms): These are things we need to import for some of our'
nl|'\n'
comment|'# own implementations below, our tests, or other transitional'
nl|'\n'
comment|'# bits of code. These should be removable after we finish our'
nl|'\n'
comment|'# conversion'
nl|'\n'
DECL|variable|Enum
name|'Enum'
op|'='
name|'fields'
op|'.'
name|'Enum'
newline|'\n'
DECL|variable|Field
name|'Field'
op|'='
name|'fields'
op|'.'
name|'Field'
newline|'\n'
DECL|variable|FieldType
name|'FieldType'
op|'='
name|'fields'
op|'.'
name|'FieldType'
newline|'\n'
DECL|variable|Set
name|'Set'
op|'='
name|'fields'
op|'.'
name|'Set'
newline|'\n'
DECL|variable|Dict
name|'Dict'
op|'='
name|'fields'
op|'.'
name|'Dict'
newline|'\n'
DECL|variable|List
name|'List'
op|'='
name|'fields'
op|'.'
name|'List'
newline|'\n'
DECL|variable|Object
name|'Object'
op|'='
name|'fields'
op|'.'
name|'Object'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Architecture
name|'class'
name|'Architecture'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.arch'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Architecture'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'arch'
op|'.'
name|'ALL'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'arch'
op|'.'
name|'canonicalize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidArchitectureName'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Architecture name \'%s\' is not valid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'Architecture'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceDestinationType
dedent|''
dedent|''
name|'class'
name|'BlockDeviceDestinationType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represents possible destination_type values for a BlockDeviceMapping."""'
newline|'\n'
nl|'\n'
DECL|variable|LOCAL
name|'LOCAL'
op|'='
string|"'local'"
newline|'\n'
DECL|variable|VOLUME
name|'VOLUME'
op|'='
string|"'volume'"
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'LOCAL'
op|','
name|'VOLUME'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BlockDeviceDestinationType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'BlockDeviceDestinationType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceSourceType
dedent|''
dedent|''
name|'class'
name|'BlockDeviceSourceType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represents the possible source_type values for a BlockDeviceMapping."""'
newline|'\n'
nl|'\n'
DECL|variable|BLANK
name|'BLANK'
op|'='
string|"'blank'"
newline|'\n'
DECL|variable|IMAGE
name|'IMAGE'
op|'='
string|"'image'"
newline|'\n'
DECL|variable|SNAPSHOT
name|'SNAPSHOT'
op|'='
string|"'snapshot'"
newline|'\n'
DECL|variable|VOLUME
name|'VOLUME'
op|'='
string|"'volume'"
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'BLANK'
op|','
name|'IMAGE'
op|','
name|'SNAPSHOT'
op|','
name|'VOLUME'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BlockDeviceSourceType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'BlockDeviceSourceType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceType
dedent|''
dedent|''
name|'class'
name|'BlockDeviceType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represents possible device_type values for a BlockDeviceMapping."""'
newline|'\n'
nl|'\n'
DECL|variable|CDROM
name|'CDROM'
op|'='
string|"'cdrom'"
newline|'\n'
DECL|variable|DISK
name|'DISK'
op|'='
string|"'disk'"
newline|'\n'
DECL|variable|FLOPPY
name|'FLOPPY'
op|'='
string|"'floppy'"
newline|'\n'
DECL|variable|FS
name|'FS'
op|'='
string|"'fs'"
newline|'\n'
DECL|variable|LUN
name|'LUN'
op|'='
string|"'lun'"
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'CDROM'
op|','
name|'DISK'
op|','
name|'FLOPPY'
op|','
name|'FS'
op|','
name|'LUN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BlockDeviceType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'BlockDeviceType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigDrivePolicy
dedent|''
dedent|''
name|'class'
name|'ConfigDrivePolicy'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|OPTIONAL
indent|'    '
name|'OPTIONAL'
op|'='
string|'"optional"'
newline|'\n'
DECL|variable|MANDATORY
name|'MANDATORY'
op|'='
string|'"mandatory"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'OPTIONAL'
op|','
name|'MANDATORY'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConfigDrivePolicy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'ConfigDrivePolicy'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUAllocationPolicy
dedent|''
dedent|''
name|'class'
name|'CPUAllocationPolicy'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|DEDICATED
indent|'    '
name|'DEDICATED'
op|'='
string|'"dedicated"'
newline|'\n'
DECL|variable|SHARED
name|'SHARED'
op|'='
string|'"shared"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'DEDICATED'
op|','
name|'SHARED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUAllocationPolicy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'CPUAllocationPolicy'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUThreadAllocationPolicy
dedent|''
dedent|''
name|'class'
name|'CPUThreadAllocationPolicy'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# prefer (default): The host may or may not have hyperthreads. This'
nl|'\n'
comment|'#  retains the legacy behavior, whereby siblings are prefered when'
nl|'\n'
comment|'#  available. This is the default if no policy is specified.'
nl|'\n'
DECL|variable|PREFER
indent|'    '
name|'PREFER'
op|'='
string|'"prefer"'
newline|'\n'
comment|'# isolate: The host may or many not have hyperthreads. If hyperthreads are'
nl|'\n'
comment|'#  present, each vCPU will be placed on a different core and no vCPUs from'
nl|'\n'
comment|'#  other guests will be able to be placed on the same core, i.e. one'
nl|'\n'
comment|'#  thread sibling is guaranteed to always be unused. If hyperthreads are'
nl|'\n'
comment|'#  not present, each vCPU will still be placed on a different core and'
nl|'\n'
comment|'#  there are no thread siblings to be concerned with.'
nl|'\n'
DECL|variable|ISOLATE
name|'ISOLATE'
op|'='
string|'"isolate"'
newline|'\n'
comment|'# require: The host must have hyperthreads. Each vCPU will be allocated on'
nl|'\n'
comment|'#   thread siblings.'
nl|'\n'
DECL|variable|REQUIRE
name|'REQUIRE'
op|'='
string|'"require"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'PREFER'
op|','
name|'ISOLATE'
op|','
name|'REQUIRE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUThreadAllocationPolicy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'CPUThreadAllocationPolicy'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMode
dedent|''
dedent|''
name|'class'
name|'CPUMode'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.cpumodel'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUMode'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'cpumodel'
op|'.'
name|'ALL_CPUMODES'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMatch
dedent|''
dedent|''
name|'class'
name|'CPUMatch'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.cpumodel'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUMatch'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'cpumodel'
op|'.'
name|'ALL_MATCHES'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUFeaturePolicy
dedent|''
dedent|''
name|'class'
name|'CPUFeaturePolicy'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.cpumodel'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUFeaturePolicy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'cpumodel'
op|'.'
name|'ALL_POLICIES'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskBus
dedent|''
dedent|''
name|'class'
name|'DiskBus'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|FDC
indent|'    '
name|'FDC'
op|'='
string|'"fdc"'
newline|'\n'
DECL|variable|IDE
name|'IDE'
op|'='
string|'"ide"'
newline|'\n'
DECL|variable|SATA
name|'SATA'
op|'='
string|'"sata"'
newline|'\n'
DECL|variable|SCSI
name|'SCSI'
op|'='
string|'"scsi"'
newline|'\n'
DECL|variable|USB
name|'USB'
op|'='
string|'"usb"'
newline|'\n'
DECL|variable|VIRTIO
name|'VIRTIO'
op|'='
string|'"virtio"'
newline|'\n'
DECL|variable|XEN
name|'XEN'
op|'='
string|'"xen"'
newline|'\n'
DECL|variable|LXC
name|'LXC'
op|'='
string|'"lxc"'
newline|'\n'
DECL|variable|UML
name|'UML'
op|'='
string|'"uml"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'FDC'
op|','
name|'IDE'
op|','
name|'SATA'
op|','
name|'SCSI'
op|','
name|'USB'
op|','
name|'VIRTIO'
op|','
name|'XEN'
op|','
name|'LXC'
op|','
name|'UML'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DiskBus'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'DiskBus'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FirmwareType
dedent|''
dedent|''
name|'class'
name|'FirmwareType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|UEFI
indent|'    '
name|'UEFI'
op|'='
string|'"uefi"'
newline|'\n'
DECL|variable|BIOS
name|'BIOS'
op|'='
string|'"bios"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'UEFI'
op|','
name|'BIOS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FirmwareType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'FirmwareType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HVType
dedent|''
dedent|''
name|'class'
name|'HVType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.hv_type'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HVType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'hv_type'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'hv_type'
op|'.'
name|'canonicalize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidHypervisorVirtType'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Hypervisor virt type \'%s\' is not valid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'HVType'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageSignatureHashType
dedent|''
dedent|''
name|'class'
name|'ImageSignatureHashType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|'# Represents the possible hash methods used for image signing'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'hashes'
op|'='
op|'('
string|"'SHA-224'"
op|','
string|"'SHA-256'"
op|','
string|"'SHA-384'"
op|','
string|"'SHA-512'"
op|')'
newline|'\n'
name|'super'
op|'('
name|'ImageSignatureHashType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'self'
op|'.'
name|'hashes'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageSignatureKeyType
dedent|''
dedent|''
name|'class'
name|'ImageSignatureKeyType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|'# Represents the possible keypair types used for image signing'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'key_types'
op|'='
op|'('
nl|'\n'
string|"'DSA'"
op|','
string|"'ECC_SECT571K1'"
op|','
string|"'ECC_SECT409K1'"
op|','
string|"'ECC_SECT571R1'"
op|','
nl|'\n'
string|"'ECC_SECT409R1'"
op|','
string|"'ECC_SECP521R1'"
op|','
string|"'ECC_SECP384R1'"
op|','
string|"'RSA-PSS'"
nl|'\n'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ImageSignatureKeyType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'self'
op|'.'
name|'key_types'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OSType
dedent|''
dedent|''
name|'class'
name|'OSType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|LINUX
indent|'    '
name|'LINUX'
op|'='
string|'"linux"'
newline|'\n'
DECL|variable|WINDOWS
name|'WINDOWS'
op|'='
string|'"windows"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'LINUX'
op|','
name|'WINDOWS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'OSType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'OSType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# Some code/docs use upper case or initial caps'
nl|'\n'
comment|'# so canonicalize to all lower case'
nl|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'OSType'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RNGModel
dedent|''
dedent|''
name|'class'
name|'RNGModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|VIRTIO
indent|'    '
name|'VIRTIO'
op|'='
string|'"virtio"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'VIRTIO'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RNGModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'RNGModel'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SCSIModel
dedent|''
dedent|''
name|'class'
name|'SCSIModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|BUSLOGIC
indent|'    '
name|'BUSLOGIC'
op|'='
string|'"buslogic"'
newline|'\n'
DECL|variable|IBMVSCSI
name|'IBMVSCSI'
op|'='
string|'"ibmvscsi"'
newline|'\n'
DECL|variable|LSILOGIC
name|'LSILOGIC'
op|'='
string|'"lsilogic"'
newline|'\n'
DECL|variable|LSISAS1068
name|'LSISAS1068'
op|'='
string|'"lsisas1068"'
newline|'\n'
DECL|variable|LSISAS1078
name|'LSISAS1078'
op|'='
string|'"lsisas1078"'
newline|'\n'
DECL|variable|VIRTIO_SCSI
name|'VIRTIO_SCSI'
op|'='
string|'"virtio-scsi"'
newline|'\n'
DECL|variable|VMPVSCSI
name|'VMPVSCSI'
op|'='
string|'"vmpvscsi"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'BUSLOGIC'
op|','
name|'IBMVSCSI'
op|','
name|'LSILOGIC'
op|','
name|'LSISAS1068'
op|','
nl|'\n'
name|'LSISAS1078'
op|','
name|'VIRTIO_SCSI'
op|','
name|'VMPVSCSI'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SCSIModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'SCSIModel'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|"# Some compat for strings we'd see in the legacy"
nl|'\n'
comment|'# vmware_adaptertype image property'
nl|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'value'
op|'=='
string|'"lsilogicsas"'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'SCSIModel'
op|'.'
name|'LSISAS1068'
newline|'\n'
dedent|''
name|'elif'
name|'value'
op|'=='
string|'"paravirtual"'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'SCSIModel'
op|'.'
name|'VMPVSCSI'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'SCSIModel'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VideoModel
dedent|''
dedent|''
name|'class'
name|'VideoModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|CIRRUS
indent|'    '
name|'CIRRUS'
op|'='
string|'"cirrus"'
newline|'\n'
DECL|variable|QXL
name|'QXL'
op|'='
string|'"qxl"'
newline|'\n'
DECL|variable|VGA
name|'VGA'
op|'='
string|'"vga"'
newline|'\n'
DECL|variable|VMVGA
name|'VMVGA'
op|'='
string|'"vmvga"'
newline|'\n'
DECL|variable|XEN
name|'XEN'
op|'='
string|'"xen"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'CIRRUS'
op|','
name|'QXL'
op|','
name|'VGA'
op|','
name|'VMVGA'
op|','
name|'XEN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VideoModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'VideoModel'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VIFModel
dedent|''
dedent|''
name|'class'
name|'VIFModel'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|LEGACY_VALUES
indent|'    '
name|'LEGACY_VALUES'
op|'='
op|'{'
string|'"virtuale1000"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|','
nl|'\n'
string|'"virtuale1000e"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000E'
op|','
nl|'\n'
string|'"virtualpcnet32"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_PCNET'
op|','
nl|'\n'
string|'"virtualsriovethernetcard"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_SRIOV'
op|','
nl|'\n'
string|'"virtualvmxnet"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_VMXNET'
op|','
nl|'\n'
string|'"virtualvmxnet3"'
op|':'
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_VMXNET3'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VIFModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'network_model'
op|'.'
name|'VIF_MODEL_ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_legacy
dedent|''
name|'def'
name|'_get_legacy'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|"# Some compat for strings we'd see in the legacy"
nl|'\n'
comment|'# hw_vif_model image property'
nl|'\n'
indent|'        '
name|'value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'VIFModel'
op|'.'
name|'LEGACY_VALUES'
op|'.'
name|'get'
op|'('
name|'value'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'VIFModel'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMMode
dedent|''
dedent|''
name|'class'
name|'VMMode'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
comment|"# TODO(berrange): move all constants out of 'nova.compute.vm_mode'"
nl|'\n'
comment|'# into fields on this class'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMMode'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'vm_mode'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|coerce
dedent|''
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'vm_mode'
op|'.'
name|'canonicalize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidVirtualMachineMode'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Virtual machine mode \'%s\' is not valid"'
op|')'
op|'%'
name|'value'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'super'
op|'('
name|'VMMode'
op|','
name|'self'
op|')'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WatchdogAction
dedent|''
dedent|''
name|'class'
name|'WatchdogAction'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|NONE
indent|'    '
name|'NONE'
op|'='
string|'"none"'
newline|'\n'
DECL|variable|PAUSE
name|'PAUSE'
op|'='
string|'"pause"'
newline|'\n'
DECL|variable|POWEROFF
name|'POWEROFF'
op|'='
string|'"poweroff"'
newline|'\n'
DECL|variable|RESET
name|'RESET'
op|'='
string|'"reset"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'NONE'
op|','
name|'PAUSE'
op|','
name|'POWEROFF'
op|','
name|'RESET'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'WatchdogAction'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'WatchdogAction'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonitorMetricType
dedent|''
dedent|''
name|'class'
name|'MonitorMetricType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|CPU_FREQUENCY
indent|'    '
name|'CPU_FREQUENCY'
op|'='
string|'"cpu.frequency"'
newline|'\n'
DECL|variable|CPU_USER_TIME
name|'CPU_USER_TIME'
op|'='
string|'"cpu.user.time"'
newline|'\n'
DECL|variable|CPU_KERNEL_TIME
name|'CPU_KERNEL_TIME'
op|'='
string|'"cpu.kernel.time"'
newline|'\n'
DECL|variable|CPU_IDLE_TIME
name|'CPU_IDLE_TIME'
op|'='
string|'"cpu.idle.time"'
newline|'\n'
DECL|variable|CPU_IOWAIT_TIME
name|'CPU_IOWAIT_TIME'
op|'='
string|'"cpu.iowait.time"'
newline|'\n'
DECL|variable|CPU_USER_PERCENT
name|'CPU_USER_PERCENT'
op|'='
string|'"cpu.user.percent"'
newline|'\n'
DECL|variable|CPU_KERNEL_PERCENT
name|'CPU_KERNEL_PERCENT'
op|'='
string|'"cpu.kernel.percent"'
newline|'\n'
DECL|variable|CPU_IDLE_PERCENT
name|'CPU_IDLE_PERCENT'
op|'='
string|'"cpu.idle.percent"'
newline|'\n'
DECL|variable|CPU_IOWAIT_PERCENT
name|'CPU_IOWAIT_PERCENT'
op|'='
string|'"cpu.iowait.percent"'
newline|'\n'
DECL|variable|CPU_PERCENT
name|'CPU_PERCENT'
op|'='
string|'"cpu.percent"'
newline|'\n'
DECL|variable|NUMA_MEM_BW_MAX
name|'NUMA_MEM_BW_MAX'
op|'='
string|'"numa.membw.max"'
newline|'\n'
DECL|variable|NUMA_MEM_BW_CURRENT
name|'NUMA_MEM_BW_CURRENT'
op|'='
string|'"numa.membw.current"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
nl|'\n'
name|'CPU_FREQUENCY'
op|','
nl|'\n'
name|'CPU_USER_TIME'
op|','
nl|'\n'
name|'CPU_KERNEL_TIME'
op|','
nl|'\n'
name|'CPU_IDLE_TIME'
op|','
nl|'\n'
name|'CPU_IOWAIT_TIME'
op|','
nl|'\n'
name|'CPU_USER_PERCENT'
op|','
nl|'\n'
name|'CPU_KERNEL_PERCENT'
op|','
nl|'\n'
name|'CPU_IDLE_PERCENT'
op|','
nl|'\n'
name|'CPU_IOWAIT_PERCENT'
op|','
nl|'\n'
name|'CPU_PERCENT'
op|','
nl|'\n'
name|'NUMA_MEM_BW_MAX'
op|','
nl|'\n'
name|'NUMA_MEM_BW_CURRENT'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MonitorMetricType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'MonitorMetricType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostStatus
dedent|''
dedent|''
name|'class'
name|'HostStatus'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|UP
indent|'    '
name|'UP'
op|'='
string|'"UP"'
comment|'# The nova-compute is up.'
newline|'\n'
DECL|variable|DOWN
name|'DOWN'
op|'='
string|'"DOWN"'
comment|'# The nova-compute is forced_down.'
newline|'\n'
DECL|variable|MAINTENANCE
name|'MAINTENANCE'
op|'='
string|'"MAINTENANCE"'
comment|'# The nova-compute is disabled.'
newline|'\n'
DECL|variable|UNKNOWN
name|'UNKNOWN'
op|'='
string|'"UNKNOWN"'
comment|'# The nova-compute has not reported.'
newline|'\n'
DECL|variable|NONE
name|'NONE'
op|'='
string|'""'
comment|'# No host or nova-compute.'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'UP'
op|','
name|'DOWN'
op|','
name|'MAINTENANCE'
op|','
name|'UNKNOWN'
op|','
name|'NONE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HostStatus'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'HostStatus'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PciDeviceStatus
dedent|''
dedent|''
name|'class'
name|'PciDeviceStatus'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|AVAILABLE
indent|'    '
name|'AVAILABLE'
op|'='
string|'"available"'
newline|'\n'
DECL|variable|CLAIMED
name|'CLAIMED'
op|'='
string|'"claimed"'
newline|'\n'
DECL|variable|ALLOCATED
name|'ALLOCATED'
op|'='
string|'"allocated"'
newline|'\n'
DECL|variable|REMOVED
name|'REMOVED'
op|'='
string|'"removed"'
comment|'# The device has been hot-removed and not yet deleted'
newline|'\n'
DECL|variable|DELETED
name|'DELETED'
op|'='
string|'"deleted"'
comment|'# The device is marked not available/deleted.'
newline|'\n'
DECL|variable|UNCLAIMABLE
name|'UNCLAIMABLE'
op|'='
string|'"unclaimable"'
newline|'\n'
DECL|variable|UNAVAILABLE
name|'UNAVAILABLE'
op|'='
string|'"unavailable"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'AVAILABLE'
op|','
name|'CLAIMED'
op|','
name|'ALLOCATED'
op|','
name|'REMOVED'
op|','
name|'DELETED'
op|','
name|'UNAVAILABLE'
op|','
nl|'\n'
name|'UNCLAIMABLE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PciDeviceStatus'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'PciDeviceStatus'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PciDeviceType
dedent|''
dedent|''
name|'class'
name|'PciDeviceType'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# NOTE(jaypipes): It\'s silly that the word "type-" is in these constants,'
nl|'\n'
comment|'# but alas, these were the original constant strings used...'
nl|'\n'
DECL|variable|STANDARD
indent|'    '
name|'STANDARD'
op|'='
string|'"type-PCI"'
newline|'\n'
DECL|variable|SRIOV_PF
name|'SRIOV_PF'
op|'='
string|'"type-PF"'
newline|'\n'
DECL|variable|SRIOV_VF
name|'SRIOV_VF'
op|'='
string|'"type-VF"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'STANDARD'
op|','
name|'SRIOV_PF'
op|','
name|'SRIOV_VF'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PciDeviceType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'PciDeviceType'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskFormat
dedent|''
dedent|''
name|'class'
name|'DiskFormat'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|RBD
indent|'    '
name|'RBD'
op|'='
string|'"rbd"'
newline|'\n'
DECL|variable|LVM
name|'LVM'
op|'='
string|'"lvm"'
newline|'\n'
DECL|variable|QCOW2
name|'QCOW2'
op|'='
string|'"qcow2"'
newline|'\n'
DECL|variable|RAW
name|'RAW'
op|'='
string|'"raw"'
newline|'\n'
DECL|variable|PLOOP
name|'PLOOP'
op|'='
string|'"ploop"'
newline|'\n'
DECL|variable|VHD
name|'VHD'
op|'='
string|'"vhd"'
newline|'\n'
DECL|variable|VMDK
name|'VMDK'
op|'='
string|'"vmdk"'
newline|'\n'
DECL|variable|VDI
name|'VDI'
op|'='
string|'"vdi"'
newline|'\n'
DECL|variable|ISO
name|'ISO'
op|'='
string|'"iso"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'RBD'
op|','
name|'LVM'
op|','
name|'QCOW2'
op|','
name|'RAW'
op|','
name|'PLOOP'
op|','
name|'VHD'
op|','
name|'VMDK'
op|','
name|'VDI'
op|','
name|'ISO'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DiskFormat'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'DiskFormat'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationPriority
dedent|''
dedent|''
name|'class'
name|'NotificationPriority'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|AUDIT
indent|'    '
name|'AUDIT'
op|'='
string|"'audit'"
newline|'\n'
DECL|variable|CRITICAL
name|'CRITICAL'
op|'='
string|"'critical'"
newline|'\n'
DECL|variable|DEBUG
name|'DEBUG'
op|'='
string|"'debug'"
newline|'\n'
DECL|variable|INFO
name|'INFO'
op|'='
string|"'info'"
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
string|"'error'"
newline|'\n'
DECL|variable|SAMPLE
name|'SAMPLE'
op|'='
string|"'sample'"
newline|'\n'
DECL|variable|WARN
name|'WARN'
op|'='
string|"'warn'"
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'AUDIT'
op|','
name|'CRITICAL'
op|','
name|'DEBUG'
op|','
name|'INFO'
op|','
name|'ERROR'
op|','
name|'SAMPLE'
op|','
name|'WARN'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotificationPriority'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'NotificationPriority'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationPhase
dedent|''
dedent|''
name|'class'
name|'NotificationPhase'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|START
indent|'    '
name|'START'
op|'='
string|"'start'"
newline|'\n'
DECL|variable|END
name|'END'
op|'='
string|"'end'"
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
string|"'error'"
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'START'
op|','
name|'END'
op|','
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotificationPhase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'NotificationPhase'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationAction
dedent|''
dedent|''
name|'class'
name|'NotificationAction'
op|'('
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|UPDATE
indent|'    '
name|'UPDATE'
op|'='
string|"'update'"
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'UPDATE'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotificationAction'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'valid_values'
op|'='
name|'NotificationAction'
op|'.'
name|'ALL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPAddress
dedent|''
dedent|''
name|'class'
name|'IPAddress'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4Address
dedent|''
dedent|''
name|'class'
name|'IPV4Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6Address
dedent|''
dedent|''
name|'class'
name|'IPV6Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AndV6Address
dedent|''
dedent|''
name|'class'
name|'IPV4AndV6Address'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'IPAddress'
op|'.'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'version'
op|'!='
number|'4'
name|'and'
name|'result'
op|'.'
name|'version'
op|'!='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Network "%(val)s" is not valid \''
nl|'\n'
string|"'in field %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'val'"
op|':'
name|'value'
op|','
string|"'attr'"
op|':'
name|'attr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPNetwork
dedent|''
dedent|''
name|'class'
name|'IPNetwork'
op|'('
name|'IPAddress'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4Network
dedent|''
dedent|''
dedent|''
name|'class'
name|'IPV4Network'
op|'('
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|','
name|'version'
op|'='
number|'4'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6Network
dedent|''
dedent|''
dedent|''
name|'class'
name|'IPV6Network'
op|'('
name|'IPNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'value'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkModel
dedent|''
dedent|''
dedent|''
name|'class'
name|'NetworkModel'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'network_model'
op|'.'
name|'NetworkInfo'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
comment|'# Hmm, do we need this?'
nl|'\n'
indent|'            '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'A NetworkModel is required in field %s'"
op|')'
op|'%'
nl|'\n'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|to_primitive
name|'def'
name|'to_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'json'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|from_primitive
name|'def'
name|'from_primitive'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stringify
dedent|''
name|'def'
name|'stringify'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'NetworkModel(%s)'"
op|'%'
op|'('
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
name|'for'
name|'vif'
name|'in'
name|'value'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonNegativeFloat
dedent|''
dedent|''
name|'class'
name|'NonNegativeFloat'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'v'
op|'='
name|'float'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'v'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Value must be >= 0 for field %s'"
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'v'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonNegativeInteger
dedent|''
dedent|''
name|'class'
name|'NonNegativeInteger'
op|'('
name|'FieldType'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|coerce
name|'def'
name|'coerce'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'v'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'v'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Value must be >= 0 for field %s'"
op|')'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'v'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AutoTypedField
dedent|''
dedent|''
name|'class'
name|'AutoTypedField'
op|'('
name|'fields'
op|'.'
name|'Field'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AutoTypedField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'AUTO_TYPE'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# FIXME(danms): Remove this after oslo.versionedobjects gets it'
nl|'\n'
DECL|class|BaseEnumField
dedent|''
dedent|''
name|'class'
name|'BaseEnumField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''This class should not be directly instantiated. Instead\n    subclass it and set AUTO_TYPE to be a SomeEnum()\n    where SomeEnum is a subclass of Enum.\n    '''"
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'AUTO_TYPE'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'EnumFieldUnset'
op|'('
nl|'\n'
name|'fieldname'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'AUTO_TYPE'
op|','
name|'Enum'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'EnumFieldInvalid'
op|'('
nl|'\n'
name|'typename'
op|'='
name|'self'
op|'.'
name|'AUTO_TYPE'
op|'.'
name|'__class__'
op|'.'
name|'__name'
op|','
nl|'\n'
name|'fieldname'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'BaseEnumField'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'valid_values'
op|'='
name|'self'
op|'.'
name|'_type'
op|'.'
name|'_valid_values'
newline|'\n'
name|'args'
op|'='
op|'{'
nl|'\n'
string|"'nullable'"
op|':'
name|'self'
op|'.'
name|'_nullable'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'self'
op|'.'
name|'_default'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'valid_values'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'update'
op|'('
op|'{'
string|"'valid_values'"
op|':'
name|'valid_values'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'='
name|'OrderedDict'
op|'('
name|'sorted'
op|'('
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'%s(%s)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_type'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"','"
op|'.'
name|'join'
op|'('
op|'['
string|"'%s=%s'"
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'args'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ArchitectureField
dedent|''
dedent|''
name|'class'
name|'ArchitectureField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'Architecture'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceDestinationTypeField
dedent|''
name|'class'
name|'BlockDeviceDestinationTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'BlockDeviceDestinationType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceSourceTypeField
dedent|''
name|'class'
name|'BlockDeviceSourceTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'BlockDeviceSourceType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceTypeField
dedent|''
name|'class'
name|'BlockDeviceTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'BlockDeviceType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigDrivePolicyField
dedent|''
name|'class'
name|'ConfigDrivePolicyField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'ConfigDrivePolicy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUAllocationPolicyField
dedent|''
name|'class'
name|'CPUAllocationPolicyField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUAllocationPolicy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUThreadAllocationPolicyField
dedent|''
name|'class'
name|'CPUThreadAllocationPolicyField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUThreadAllocationPolicy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUModeField
dedent|''
name|'class'
name|'CPUModeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMatchField
dedent|''
name|'class'
name|'CPUMatchField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUMatch'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUFeaturePolicyField
dedent|''
name|'class'
name|'CPUFeaturePolicyField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'CPUFeaturePolicy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskBusField
dedent|''
name|'class'
name|'DiskBusField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'DiskBus'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FirmwareTypeField
dedent|''
name|'class'
name|'FirmwareTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'FirmwareType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HVTypeField
dedent|''
name|'class'
name|'HVTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'HVType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageSignatureHashTypeField
dedent|''
name|'class'
name|'ImageSignatureHashTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'ImageSignatureHashType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageSignatureKeyTypeField
dedent|''
name|'class'
name|'ImageSignatureKeyTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'ImageSignatureKeyType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OSTypeField
dedent|''
name|'class'
name|'OSTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'OSType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RNGModelField
dedent|''
name|'class'
name|'RNGModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'RNGModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SCSIModelField
dedent|''
name|'class'
name|'SCSIModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'SCSIModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VideoModelField
dedent|''
name|'class'
name|'VideoModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'VideoModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VIFModelField
dedent|''
name|'class'
name|'VIFModelField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'VIFModel'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMModeField
dedent|''
name|'class'
name|'VMModeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'VMMode'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WatchdogActionField
dedent|''
name|'class'
name|'WatchdogActionField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'WatchdogAction'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonitorMetricTypeField
dedent|''
name|'class'
name|'MonitorMetricTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'MonitorMetricType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PciDeviceStatusField
dedent|''
name|'class'
name|'PciDeviceStatusField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'PciDeviceStatus'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PciDeviceTypeField
dedent|''
name|'class'
name|'PciDeviceTypeField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'PciDeviceType'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DiskFormatField
dedent|''
name|'class'
name|'DiskFormatField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'DiskFormat'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationPriorityField
dedent|''
name|'class'
name|'NotificationPriorityField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'NotificationPriority'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationPhaseField
dedent|''
name|'class'
name|'NotificationPhaseField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'NotificationPhase'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationActionField
dedent|''
name|'class'
name|'NotificationActionField'
op|'('
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'NotificationAction'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPAddressField
dedent|''
name|'class'
name|'IPAddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPAddress'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AddressField
dedent|''
name|'class'
name|'IPV4AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6AddressField
dedent|''
name|'class'
name|'IPV6AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV6Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4AndV6AddressField
dedent|''
name|'class'
name|'IPV4AndV6AddressField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4AndV6Address'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPNetworkField
dedent|''
name|'class'
name|'IPNetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPNetwork'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV4NetworkField
dedent|''
name|'class'
name|'IPV4NetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV4Network'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IPV6NetworkField
dedent|''
name|'class'
name|'IPV6NetworkField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'IPV6Network'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfIntegersField
dedent|''
name|'class'
name|'ListOfIntegersField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'List'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonNegativeFloatField
dedent|''
name|'class'
name|'NonNegativeFloatField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'NonNegativeFloat'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NonNegativeIntegerField
dedent|''
name|'class'
name|'NonNegativeIntegerField'
op|'('
name|'AutoTypedField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'NonNegativeInteger'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

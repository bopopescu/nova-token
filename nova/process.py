begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright [2010] [Anso Labs, LLC]'
nl|'\n'
comment|'# '
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'#    you may not use this file except in compliance with the License.'
nl|'\n'
comment|'#    You may obtain a copy of the License at'
nl|'\n'
comment|'# '
nl|'\n'
comment|'#        http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'# '
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'#    See the License for the specific language governing permissions and'
nl|'\n'
comment|'#    limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nProcess pool, still buggy right now.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'multiprocessing'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'threads'
newline|'\n'
nl|'\n'
comment|'# NOTE(termie): this is copied from twisted.internet.utils but since'
nl|'\n'
comment|"#               they don't export it I've copied."
nl|'\n'
DECL|class|_BackRelay
name|'class'
name|'_BackRelay'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Trivial protocol for communicating with a process and turning its output\n    into the result of a L{Deferred}.\n\n    @ivar deferred: A L{Deferred} which will be called back with all of stdout\n        and, if C{errortoo} is true, all of stderr as well (mixed together in\n        one string).  If C{errortoo} is false and any bytes are received over\n        stderr, this will fire with an L{_UnexpectedErrorOutput} instance and\n        the attribute will be set to C{None}.\n\n    @ivar onProcessEnded: If C{errortoo} is false and bytes are received over\n        stderr, this attribute will refer to a L{Deferred} which will be called\n        back when the process ends.  This C{Deferred} is also associated with\n        the L{_UnexpectedErrorOutput} which C{deferred} fires with earlier in\n        this case so that users can determine when the process has actually\n        ended, in addition to knowing when bytes have been received via stderr.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'errortoo'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferred'
op|'='
name|'deferred'
newline|'\n'
name|'self'
op|'.'
name|'s'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errortoo'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'errReceived'
op|'='
name|'self'
op|'.'
name|'errReceivedIsGood'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'errReceived'
op|'='
name|'self'
op|'.'
name|'errReceivedIsBad'
newline|'\n'
nl|'\n'
DECL|member|errReceivedIsBad
dedent|''
dedent|''
name|'def'
name|'errReceivedIsBad'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'deferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'onProcessEnded'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'_UnexpectedErrorOutput'
op|'('
name|'text'
op|','
name|'self'
op|'.'
name|'onProcessEnded'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'failure'
op|'.'
name|'Failure'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|errReceivedIsGood
dedent|''
dedent|''
name|'def'
name|'errReceivedIsGood'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|outReceived
dedent|''
name|'def'
name|'outReceived'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'s'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'deferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'s'
op|'.'
name|'getvalue'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'onProcessEnded'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'onProcessEnded'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BackRelayWithInput
dedent|''
dedent|''
dedent|''
name|'class'
name|'BackRelayWithInput'
op|'('
name|'_BackRelay'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deferred'
op|','
name|'errortoo'
op|'='
number|'0'
op|','
name|'input'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BackRelayWithInput'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'deferred'
op|','
name|'errortoo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'input'
op|'='
name|'input'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'input'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'input'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transport'
op|'.'
name|'closeStdin'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getProcessOutput
dedent|''
dedent|''
name|'def'
name|'getProcessOutput'
op|'('
name|'executable'
op|','
name|'args'
op|'='
name|'None'
op|','
name|'env'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
name|'reactor'
op|'='
name|'None'
op|','
nl|'\n'
name|'errortoo'
op|'='
number|'0'
op|','
name|'input'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'reactor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
dedent|''
name|'args'
op|'='
name|'args'
name|'and'
name|'args'
name|'or'
op|'('
op|')'
newline|'\n'
name|'env'
op|'='
name|'env'
name|'and'
name|'env'
name|'and'
op|'{'
op|'}'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'BackRelayWithInput'
op|'('
name|'d'
op|','
name|'errortoo'
op|'='
name|'errortoo'
op|','
name|'input'
op|'='
name|'input'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
name|'p'
op|','
name|'executable'
op|','
op|'('
name|'executable'
op|','
op|')'
op|'+'
name|'tuple'
op|'('
name|'args'
op|')'
op|','
name|'env'
op|','
name|'path'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pool
dedent|''
name|'class'
name|'Pool'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" A simple process pool implementation around mutliprocessing.\n\n    Allows up to `size` processes at a time and queues the rest.\n\n    Using workarounds for multiprocessing behavior described in:\n    http://pypi.python.org/pypi/twisted.internet.processes/1.0b1\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_size'
op|'='
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'_pool'
op|'='
name|'multiprocessing'
op|'.'
name|'Pool'
op|'('
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_registerShutdown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_registerShutdown
dedent|''
name|'def'
name|'_registerShutdown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'.'
name|'addSystemEventTrigger'
op|'('
nl|'\n'
string|"'during'"
op|','
string|"'shutdown'"
op|','
name|'self'
op|'.'
name|'shutdown'
op|','
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
DECL|member|shutdown
dedent|''
name|'def'
name|'shutdown'
op|'('
name|'self'
op|','
name|'reactor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_pool'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
comment|'# wait for workers to finish'
nl|'\n'
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'terminate'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pool'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|apply
dedent|''
name|'def'
name|'apply'
op|'('
name|'self'
op|','
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Add a task to the pool and return a deferred. """'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'apply_async'
op|'('
name|'f'
op|','
name|'args'
op|','
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'threads'
op|'.'
name|'deferToThread'
op|'('
name|'result'
op|'.'
name|'get'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

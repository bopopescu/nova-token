begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nDrivers for san-stored volumes.\n\nThe unique thing about a SAN is that we don\'t expect that we can run the volume\ncontroller on the SAN hardware.  We expect to access it over SSH or some API.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'httplib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'paramiko'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'volume'
op|'.'
name|'driver'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|san_opts
name|'san_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'san_thin_provision'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use thin provisioning for SAN volumes?'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'san_ip'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'IP address of SAN controller'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'san_login'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'admin'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Username for SAN controller'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'san_password'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Password for SAN controller'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'san_private_key'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Filename of private key to use for SSH authentication'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'san_clustername'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Cluster name to use for creating volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'san_ssh_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'22'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'SSH port to use with SAN'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'san_is_local'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Execute commands locally instead of over SSH; '"
nl|'\n'
string|"'use if the volume service is running on the SAN device'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'san_zfs_volume_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'rpool/'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The ZFS path under which to create zvols for volumes.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'san_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SanISCSIDriver
name|'class'
name|'SanISCSIDriver'
op|'('
name|'nova'
op|'.'
name|'volume'
op|'.'
name|'driver'
op|'.'
name|'ISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for SAN-style storage volumes\n\n    A SAN-style storage value is \'different\' because the volume controller\n    probably won\'t run on it, so we need to access is over SSH or another\n    remote protocol.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SanISCSIDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_local'
op|'='
name|'FLAGS'
op|'.'
name|'san_is_local'
newline|'\n'
nl|'\n'
DECL|member|_build_iscsi_target_name
dedent|''
name|'def'
name|'_build_iscsi_target_name'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'iscsi_target_prefix'
op|','
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_connect_to_ssh
dedent|''
name|'def'
name|'_connect_to_ssh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ssh'
op|'='
name|'paramiko'
op|'.'
name|'SSHClient'
op|'('
op|')'
newline|'\n'
comment|'#TODO(justinsb): We need a better SSH key policy'
nl|'\n'
name|'ssh'
op|'.'
name|'set_missing_host_key_policy'
op|'('
name|'paramiko'
op|'.'
name|'AutoAddPolicy'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'san_password'
op|':'
newline|'\n'
indent|'            '
name|'ssh'
op|'.'
name|'connect'
op|'('
name|'FLAGS'
op|'.'
name|'san_ip'
op|','
nl|'\n'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'san_ssh_port'
op|','
nl|'\n'
name|'username'
op|'='
name|'FLAGS'
op|'.'
name|'san_login'
op|','
nl|'\n'
name|'password'
op|'='
name|'FLAGS'
op|'.'
name|'san_password'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'san_private_key'
op|':'
newline|'\n'
indent|'            '
name|'privatekeyfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'FLAGS'
op|'.'
name|'san_private_key'
op|')'
newline|'\n'
comment|"# It sucks that paramiko doesn't support DSA keys"
nl|'\n'
name|'privatekey'
op|'='
name|'paramiko'
op|'.'
name|'RSAKey'
op|'.'
name|'from_private_key_file'
op|'('
name|'privatekeyfile'
op|')'
newline|'\n'
name|'ssh'
op|'.'
name|'connect'
op|'('
name|'FLAGS'
op|'.'
name|'san_ip'
op|','
nl|'\n'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'san_ssh_port'
op|','
nl|'\n'
name|'username'
op|'='
name|'FLAGS'
op|'.'
name|'san_login'
op|','
nl|'\n'
name|'pkey'
op|'='
name|'privatekey'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Specify san_password or san_private_key"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ssh'
newline|'\n'
nl|'\n'
DECL|member|_execute
dedent|''
name|'def'
name|'_execute'
op|'('
name|'self'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'run_local'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
name|'None'
op|')'
newline|'\n'
name|'command'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
op|'*'
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'command'
op|','
name|'check_exit_code'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_ssh
dedent|''
dedent|''
name|'def'
name|'_run_ssh'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|'#TODO(justinsb): SSH connection caching (?)'
nl|'\n'
indent|'        '
name|'ssh'
op|'='
name|'self'
op|'.'
name|'_connect_to_ssh'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO(justinsb): Reintroduce the retry hack'
nl|'\n'
name|'ret'
op|'='
name|'utils'
op|'.'
name|'ssh_execute'
op|'('
name|'ssh'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
nl|'\n'
name|'ssh'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Synchronously recreates an export for a logical volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Exports the volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes an export for a logical volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|check_for_setup_error
dedent|''
name|'def'
name|'check_for_setup_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an error if prerequisites aren\'t met."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'run_local'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
op|'('
name|'FLAGS'
op|'.'
name|'san_password'
name|'or'
name|'FLAGS'
op|'.'
name|'san_private_key'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|"'Specify san_password or san_private_key'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The san_ip must always be set, because we use it for the target'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
op|'('
name|'FLAGS'
op|'.'
name|'san_ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'_'
op|'('
string|'"san_ip must be set"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_collect_lines
dedent|''
dedent|''
dedent|''
name|'def'
name|'_collect_lines'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Split lines from data into an array, trimming them """'
newline|'\n'
name|'matches'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'data'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'match'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'matches'
op|'.'
name|'append'
op|'('
name|'match'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_prefixed_values
dedent|''
name|'def'
name|'_get_prefixed_values'
op|'('
name|'data'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Collect lines which start with prefix; with trimming"""'
newline|'\n'
name|'matches'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'data'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'match'
op|'='
name|'line'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
name|'match'
op|'='
name|'match'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'matches'
op|'.'
name|'append'
op|'('
name|'match'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SolarisISCSIDriver
dedent|''
name|'class'
name|'SolarisISCSIDriver'
op|'('
name|'SanISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Executes commands relating to Solaris-hosted ISCSI volumes.\n\n    Basic setup for a Solaris iSCSI server:\n\n    pkg install storage-server SUNWiscsit\n\n    svcadm enable stmf\n\n    svcadm enable -r svc:/network/iscsi/target:default\n\n    pfexec itadm create-tpg e1000g0 ${MYIP}\n\n    pfexec itadm create-target -t e1000g0\n\n\n    Then grant the user that will be logging on lots of permissions.\n    I\'m not sure exactly which though:\n\n    zfs allow justinsb create,mount,destroy rpool\n\n    usermod -P\'File System Management\' justinsb\n\n    usermod -P\'Primary Administrator\' justinsb\n\n    Also make sure you can login using san_login & san_password/san_private_key\n    """'
newline|'\n'
nl|'\n'
DECL|member|_execute
name|'def'
name|'_execute'
op|'('
name|'self'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_cmd'
op|'='
op|'['
string|"'pfexec'"
op|']'
newline|'\n'
name|'new_cmd'
op|'.'
name|'extend'
op|'('
op|'*'
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'SolarisISCSIDriver'
op|','
name|'self'
op|')'
op|'.'
name|'_execute'
op|'('
name|'self'
op|','
nl|'\n'
op|'*'
name|'new_cmd'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_view_exists
dedent|''
name|'def'
name|'_view_exists'
op|'('
name|'self'
op|','
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
nl|'\n'
string|"'list-view'"
op|','
string|"'-l'"
op|','
name|'luid'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
string|'"no views found"'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|'"View Entry:"'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot parse list-view output: %s"'
op|')'
op|'%'
name|'out'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_target_groups
dedent|''
name|'def'
name|'_get_target_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets list of target groups from host."""'
newline|'\n'
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
string|"'list-tg'"
op|')'
newline|'\n'
name|'matches'
op|'='
name|'_get_prefixed_values'
op|'('
name|'out'
op|','
string|"'Target group: '"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"target_groups=%s"'
op|'%'
name|'matches'
op|')'
newline|'\n'
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|member|_target_group_exists
dedent|''
name|'def'
name|'_target_group_exists'
op|'('
name|'self'
op|','
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'target_group_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_get_target_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_target_group_members
dedent|''
name|'def'
name|'_get_target_group_members'
op|'('
name|'self'
op|','
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
nl|'\n'
string|"'list-tg'"
op|','
string|"'-v'"
op|','
name|'target_group_name'
op|')'
newline|'\n'
name|'matches'
op|'='
name|'_get_prefixed_values'
op|'('
name|'out'
op|','
string|"'Member: '"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"members of %s=%s"'
op|'%'
op|'('
name|'target_group_name'
op|','
name|'matches'
op|')'
op|')'
newline|'\n'
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|member|_is_target_group_member
dedent|''
name|'def'
name|'_is_target_group_member'
op|'('
name|'self'
op|','
name|'target_group_name'
op|','
name|'iscsi_target_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iscsi_target_name'
name|'in'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_get_target_group_members'
op|'('
name|'target_group_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_iscsi_targets
dedent|''
name|'def'
name|'_get_iscsi_targets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/itadm'"
op|','
string|"'list-target'"
op|')'
newline|'\n'
name|'matches'
op|'='
name|'_collect_lines'
op|'('
name|'out'
op|')'
newline|'\n'
nl|'\n'
comment|'# Skip header'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'matches'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'assert'
string|"'TARGET NAME'"
name|'in'
name|'matches'
op|'['
number|'0'
op|']'
newline|'\n'
name|'matches'
op|'='
name|'matches'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'targets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'matches'
op|':'
newline|'\n'
indent|'            '
name|'items'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'items'
op|')'
op|'=='
number|'3'
newline|'\n'
name|'targets'
op|'.'
name|'append'
op|'('
name|'items'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"_get_iscsi_targets=%s"'
op|'%'
op|'('
name|'targets'
op|')'
op|')'
newline|'\n'
name|'return'
name|'targets'
newline|'\n'
nl|'\n'
DECL|member|_iscsi_target_exists
dedent|''
name|'def'
name|'_iscsi_target_exists'
op|'('
name|'self'
op|','
name|'iscsi_target_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iscsi_target_name'
name|'in'
name|'self'
op|'.'
name|'_get_iscsi_targets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_build_zfs_poolname
dedent|''
name|'def'
name|'_build_zfs_poolname'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zfs_poolname'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'san_zfs_volume_base'
op|','
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'zfs_poolname'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a volume."""'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'sizestr'
op|'='
string|"'100M'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sizestr'
op|'='
string|"'%sG'"
op|'%'
name|'volume'
op|'['
string|"'size'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a zfs volume'
nl|'\n'
name|'cmd'
op|'='
op|'['
string|"'/usr/sbin/zfs'"
op|','
string|"'create'"
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'san_thin_provision'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'-s'"
op|')'
newline|'\n'
dedent|''
name|'cmd'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-V'"
op|','
name|'sizestr'
op|']'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'append'
op|'('
name|'zfs_poolname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_luid
dedent|''
name|'def'
name|'_get_luid'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'zvol_name'
op|'='
string|"'/dev/zvol/rdsk/%s'"
op|'%'
name|'zfs_poolname'
newline|'\n'
nl|'\n'
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/sbdadm'"
op|','
string|"'list-lu'"
op|')'
newline|'\n'
nl|'\n'
name|'lines'
op|'='
name|'_collect_lines'
op|'('
name|'out'
op|')'
newline|'\n'
nl|'\n'
comment|'# Strip headers'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'lines'
op|')'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'lines'
op|'['
number|'0'
op|']'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'lines'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'lines'
op|')'
op|'>='
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'assert'
string|"'Found'"
name|'in'
name|'lines'
op|'['
number|'0'
op|']'
newline|'\n'
name|'assert'
string|"''"
op|'=='
name|'lines'
op|'['
number|'1'
op|']'
newline|'\n'
name|'assert'
string|"'GUID'"
name|'in'
name|'lines'
op|'['
number|'2'
op|']'
newline|'\n'
name|'assert'
string|"'------------------'"
name|'in'
name|'lines'
op|'['
number|'3'
op|']'
newline|'\n'
nl|'\n'
name|'lines'
op|'='
name|'lines'
op|'['
number|'4'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'items'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'items'
op|')'
op|'=='
number|'3'
newline|'\n'
name|'if'
name|'items'
op|'['
number|'2'
op|']'
op|'=='
name|'zvol_name'
op|':'
newline|'\n'
indent|'                '
name|'luid'
op|'='
name|'items'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|"'LUID not found for %(zfs_poolname)s. '"
nl|'\n'
string|"'Output=%(out)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_lu_created
dedent|''
name|'def'
name|'_is_lu_created'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'luid'
op|'='
name|'self'
op|'.'
name|'_get_luid'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes a volume."""'
newline|'\n'
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/zfs'"
op|','
string|"'destroy'"
op|','
name|'zfs_poolname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|local_path
dedent|''
name|'def'
name|'local_path'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
comment|'# TODO(justinsb): Is this needed here?'
nl|'\n'
indent|'        '
name|'escaped_group'
op|'='
name|'FLAGS'
op|'.'
name|'volume_group'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'--'"
op|')'
newline|'\n'
name|'escaped_name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'--'"
op|')'
newline|'\n'
name|'return'
string|'"/dev/mapper/%s-%s"'
op|'%'
op|'('
name|'escaped_group'
op|','
name|'escaped_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Synchronously recreates an export for a logical volume."""'
newline|'\n'
comment|'#TODO(justinsb): On bootup, this is called for every volume.'
nl|'\n'
comment|'# It then runs ~5 SSH commands for each volume,'
nl|'\n'
comment|'# most of which fetch the same info each time'
nl|'\n'
comment|'# This makes initial start stupid-slow'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_do_export'
op|'('
name|'volume'
op|','
name|'force_create'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_do_export'
op|'('
name|'volume'
op|','
name|'force_create'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_export
dedent|''
name|'def'
name|'_do_export'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'force_create'
op|')'
op|':'
newline|'\n'
comment|'# Create a Logical Unit (LU) backed by the zfs volume'
nl|'\n'
indent|'        '
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_is_lu_created'
op|'('
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'zvol_name'
op|'='
string|"'/dev/zvol/rdsk/%s'"
op|'%'
name|'zfs_poolname'
newline|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/sbdadm'"
op|','
string|"'create-lu'"
op|','
name|'zvol_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'luid'
op|'='
name|'self'
op|'.'
name|'_get_luid'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'iscsi_name'
op|'='
name|'self'
op|'.'
name|'_build_iscsi_target_name'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'target_group_name'
op|'='
string|"'tg-%s'"
op|'%'
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Create an iSCSI target, mapped to just this volume'
nl|'\n'
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_target_group_exists'
op|'('
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
string|"'create-tg'"
op|','
name|'target_group_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Yes, we add the initiatior before we create it!'
nl|'\n'
comment|'# Otherwise, it complains that the target is already active'
nl|'\n'
dedent|''
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_is_target_group_member'
op|'('
name|'target_group_name'
op|','
nl|'\n'
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
nl|'\n'
string|"'add-tg-member'"
op|','
string|"'-g'"
op|','
name|'target_group_name'
op|','
name|'iscsi_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_iscsi_target_exists'
op|'('
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/itadm'"
op|','
string|"'create-target'"
op|','
string|"'-n'"
op|','
name|'iscsi_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_view_exists'
op|'('
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
nl|'\n'
string|"'add-view'"
op|','
string|"'-t'"
op|','
name|'target_group_name'
op|','
name|'luid'
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO(justinsb): Is this always 1? Does it matter?'
nl|'\n'
dedent|''
name|'iscsi_portal_interface'
op|'='
string|"'1'"
newline|'\n'
name|'iscsi_portal'
op|'='
name|'FLAGS'
op|'.'
name|'san_ip'
op|'+'
string|'":3260,"'
op|'+'
name|'iscsi_portal_interface'
newline|'\n'
nl|'\n'
name|'db_update'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'db_update'
op|'['
string|"'provider_location'"
op|']'
op|'='
op|'('
string|'"%s %s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_portal'
op|','
nl|'\n'
name|'iscsi_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'db_update'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes an export for a logical volume."""'
newline|'\n'
nl|'\n'
comment|'# This is the reverse of _do_export'
nl|'\n'
name|'luid'
op|'='
name|'self'
op|'.'
name|'_get_luid'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'iscsi_name'
op|'='
name|'self'
op|'.'
name|'_build_iscsi_target_name'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'target_group_name'
op|'='
string|"'tg-%s'"
op|'%'
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_view_exists'
op|'('
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
string|"'remove-view'"
op|','
string|"'-l'"
op|','
name|'luid'
op|','
string|"'-a'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_iscsi_target_exists'
op|'('
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
string|"'offline-target'"
op|','
name|'iscsi_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/itadm'"
op|','
string|"'delete-target'"
op|','
name|'iscsi_name'
op|')'
newline|'\n'
nl|'\n'
comment|"# We don't delete the tg-member; we delete the whole tg!"
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_target_group_exists'
op|'('
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/stmfadm'"
op|','
string|"'delete-tg'"
op|','
name|'target_group_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_is_lu_created'
op|'('
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'/usr/sbin/sbdadm'"
op|','
string|"'delete-lu'"
op|','
name|'luid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HpSanISCSIDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'HpSanISCSIDriver'
op|'('
name|'SanISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Executes commands relating to HP/Lefthand SAN ISCSI volumes.\n\n    We use the CLIQ interface, over SSH.\n\n    Rough overview of CLIQ commands used:\n\n    :createVolume:    (creates the volume)\n\n    :getVolumeInfo:    (to discover the IQN etc)\n\n    :getClusterInfo:    (to discover the iSCSI target IP address)\n\n    :assignVolumeChap:    (exports it with CHAP security)\n\n    The \'trick\' here is that the HP SAN enforces security by default, so\n    normally a volume mount would need both to configure the SAN in the volume\n    layer and do the mount on the compute layer.  Multi-layer operations are\n    not catered for at the moment in the nova architecture, so instead we\n    share the volume using CHAP at volume creation time.  Then the mount need\n    only use those CHAP credentials, so can take place exclusively in the\n    compute layer.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_cliq_run
name|'def'
name|'_cliq_run'
op|'('
name|'self'
op|','
name|'verb'
op|','
name|'cliq_args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Runs a CLIQ command over SSH, without doing any result parsing"""'
newline|'\n'
name|'cliq_arg_strings'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'cliq_args'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cliq_arg_strings'
op|'.'
name|'append'
op|'('
string|'" %s=%s"'
op|'%'
op|'('
name|'k'
op|','
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
name|'cmd'
op|'='
name|'verb'
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'cliq_arg_strings'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cliq_run_xml
dedent|''
name|'def'
name|'_cliq_run_xml'
op|'('
name|'self'
op|','
name|'verb'
op|','
name|'cliq_args'
op|','
name|'check_cliq_result'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Runs a CLIQ command over SSH, parsing and checking the output"""'
newline|'\n'
name|'cliq_args'
op|'['
string|"'output'"
op|']'
op|'='
string|"'XML'"
newline|'\n'
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_cliq_run'
op|'('
name|'verb'
op|','
name|'cliq_args'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"CLIQ command returned %s"'
op|')'
op|','
name|'out'
op|')'
newline|'\n'
nl|'\n'
name|'result_xml'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'out'
op|')'
newline|'\n'
name|'if'
name|'check_cliq_result'
op|':'
newline|'\n'
indent|'            '
name|'response_node'
op|'='
name|'result_xml'
op|'.'
name|'find'
op|'('
string|'"response"'
op|')'
newline|'\n'
name|'if'
name|'response_node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Malformed response to CLIQ command "'
nl|'\n'
string|'"%(verb)s %(cliq_args)s. Result=%(out)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result_code'
op|'='
name|'response_node'
op|'.'
name|'attrib'
op|'.'
name|'get'
op|'('
string|'"result"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'result_code'
op|'!='
string|'"0"'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Error running CLIQ command %(verb)s %(cliq_args)s. "'
nl|'\n'
string|'" Result=%(out)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'result_xml'
newline|'\n'
nl|'\n'
DECL|member|_cliq_get_cluster_info
dedent|''
name|'def'
name|'_cliq_get_cluster_info'
op|'('
name|'self'
op|','
name|'cluster_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Queries for info about the cluster (including IP)"""'
newline|'\n'
name|'cliq_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cliq_args'
op|'['
string|"'clusterName'"
op|']'
op|'='
name|'cluster_name'
newline|'\n'
name|'cliq_args'
op|'['
string|"'searchDepth'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'cliq_args'
op|'['
string|"'verbose'"
op|']'
op|'='
string|"'0'"
newline|'\n'
nl|'\n'
name|'result_xml'
op|'='
name|'self'
op|'.'
name|'_cliq_run_xml'
op|'('
string|'"getClusterInfo"'
op|','
name|'cliq_args'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'result_xml'
newline|'\n'
nl|'\n'
DECL|member|_cliq_get_cluster_vip
dedent|''
name|'def'
name|'_cliq_get_cluster_vip'
op|'('
name|'self'
op|','
name|'cluster_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets the IP on which a cluster shares iSCSI volumes"""'
newline|'\n'
name|'cluster_xml'
op|'='
name|'self'
op|'.'
name|'_cliq_get_cluster_info'
op|'('
name|'cluster_name'
op|')'
newline|'\n'
nl|'\n'
name|'vips'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vip'
name|'in'
name|'cluster_xml'
op|'.'
name|'findall'
op|'('
string|'"response/cluster/vip"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vips'
op|'.'
name|'append'
op|'('
name|'vip'
op|'.'
name|'attrib'
op|'.'
name|'get'
op|'('
string|"'ipAddress'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'vips'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vips'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'_xml'
op|'='
name|'etree'
op|'.'
name|'tostring'
op|'('
name|'cluster_xml'
op|')'
newline|'\n'
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Unexpected number of virtual ips for cluster "'
nl|'\n'
string|'" %(cluster_name)s. Result=%(_xml)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cliq_get_volume_info
dedent|''
name|'def'
name|'_cliq_get_volume_info'
op|'('
name|'self'
op|','
name|'volume_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets the volume info, including IQN"""'
newline|'\n'
name|'cliq_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cliq_args'
op|'['
string|"'volumeName'"
op|']'
op|'='
name|'volume_name'
newline|'\n'
name|'result_xml'
op|'='
name|'self'
op|'.'
name|'_cliq_run_xml'
op|'('
string|'"getVolumeInfo"'
op|','
name|'cliq_args'
op|')'
newline|'\n'
nl|'\n'
comment|'# Result looks like this:'
nl|'\n'
comment|'#<gauche version="1.0">'
nl|'\n'
comment|'#  <response description="Operation succeeded." name="CliqSuccess"'
nl|'\n'
comment|'#            processingTime="87" result="0">'
nl|'\n'
comment|'#    <volume autogrowPages="4" availability="online" blockSize="1024"'
nl|'\n'
comment|'#       bytesWritten="0" checkSum="false" clusterName="Cluster01"'
nl|'\n'
comment|'#       created="2011-02-08T19:56:53Z" deleting="false" description=""'
nl|'\n'
comment|'#       groupName="Group01" initialQuota="536870912" isPrimary="true"'
nl|'\n'
comment|'#       iscsiIqn="iqn.2003-10.com.lefthandnetworks:group01:25366:vol-b"'
nl|'\n'
comment|'#       maxSize="6865387257856" md5="9fa5c8b2cca54b2948a63d833097e1ca"'
nl|'\n'
comment|'#       minReplication="1" name="vol-b" parity="0" replication="2"'
nl|'\n'
comment|'#       reserveQuota="536870912" scratchQuota="4194304"'
nl|'\n'
comment|'#       serialNumber="9fa5c8b2cca54b2948a63d833097e1ca0000000000006316"'
nl|'\n'
comment|'#       size="1073741824" stridePages="32" thinProvision="true">'
nl|'\n'
comment|'#      <status description="OK" value="2"/>'
nl|'\n'
comment|'#      <permission access="rw"'
nl|'\n'
comment|'#            authGroup="api-34281B815713B78-(trimmed)51ADD4B7030853AA7"'
nl|'\n'
comment|'#            chapName="chapusername" chapRequired="true" id="25369"'
nl|'\n'
comment|'#            initiatorSecret="" iqn="" iscsiEnabled="true"'
nl|'\n'
comment|'#            loadBalance="true" targetSecret="supersecret"/>'
nl|'\n'
comment|'#    </volume>'
nl|'\n'
comment|'#  </response>'
nl|'\n'
comment|'#</gauche>'
nl|'\n'
nl|'\n'
comment|'# Flatten the nodes into a dictionary; use prefixes to avoid collisions'
nl|'\n'
name|'volume_attributes'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'volume_node'
op|'='
name|'result_xml'
op|'.'
name|'find'
op|'('
string|'"response/volume"'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'volume_node'
op|'.'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume_attributes'
op|'['
string|'"volume."'
op|'+'
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
dedent|''
name|'status_node'
op|'='
name|'volume_node'
op|'.'
name|'find'
op|'('
string|'"status"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'status_node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'status_node'
op|'.'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'volume_attributes'
op|'['
string|'"status."'
op|'+'
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
comment|'# We only consider the first permission node'
nl|'\n'
dedent|''
dedent|''
name|'permission_node'
op|'='
name|'volume_node'
op|'.'
name|'find'
op|'('
string|'"permission"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'permission_node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'status_node'
op|'.'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'volume_attributes'
op|'['
string|'"permission."'
op|'+'
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Volume info: %(volume_name)s => %(volume_attributes)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'volume_attributes'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a volume."""'
newline|'\n'
name|'cliq_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cliq_args'
op|'['
string|"'clusterName'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'san_clustername'
newline|'\n'
comment|'#TODO(justinsb): Should we default to inheriting thinProvision?'
nl|'\n'
name|'cliq_args'
op|'['
string|"'thinProvision'"
op|']'
op|'='
string|"'1'"
name|'if'
name|'FLAGS'
op|'.'
name|'san_thin_provision'
name|'else'
string|"'0'"
newline|'\n'
name|'cliq_args'
op|'['
string|"'volumeName'"
op|']'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'cliq_args'
op|'['
string|"'size'"
op|']'
op|'='
string|"'100MB'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cliq_args'
op|'['
string|"'size'"
op|']'
op|'='
string|"'%sGB'"
op|'%'
name|'volume'
op|'['
string|"'size'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_cliq_run_xml'
op|'('
string|'"createVolume"'
op|','
name|'cliq_args'
op|')'
newline|'\n'
nl|'\n'
name|'volume_info'
op|'='
name|'self'
op|'.'
name|'_cliq_get_volume_info'
op|'('
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'cluster_name'
op|'='
name|'volume_info'
op|'['
string|"'volume.clusterName'"
op|']'
newline|'\n'
name|'iscsi_iqn'
op|'='
name|'volume_info'
op|'['
string|"'volume.iscsiIqn'"
op|']'
newline|'\n'
nl|'\n'
comment|'#TODO(justinsb): Is this always 1? Does it matter?'
nl|'\n'
name|'cluster_interface'
op|'='
string|"'1'"
newline|'\n'
nl|'\n'
name|'cluster_vip'
op|'='
name|'self'
op|'.'
name|'_cliq_get_cluster_vip'
op|'('
name|'cluster_name'
op|')'
newline|'\n'
name|'iscsi_portal'
op|'='
name|'cluster_vip'
op|'+'
string|'":3260,"'
op|'+'
name|'cluster_interface'
newline|'\n'
nl|'\n'
name|'model_update'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'model_update'
op|'['
string|"'provider_location'"
op|']'
op|'='
op|'('
string|'"%s %s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_portal'
op|','
nl|'\n'
name|'iscsi_iqn'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'model_update'
newline|'\n'
nl|'\n'
DECL|member|create_volume_from_snapshot
dedent|''
name|'def'
name|'create_volume_from_snapshot'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a volume from a snapshot."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_snapshot
dedent|''
name|'def'
name|'create_snapshot'
op|'('
name|'self'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a snapshot."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes a volume."""'
newline|'\n'
name|'cliq_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cliq_args'
op|'['
string|"'volumeName'"
op|']'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'cliq_args'
op|'['
string|"'prompt'"
op|']'
op|'='
string|"'false'"
comment|"# Don't confirm"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cliq_run_xml'
op|'('
string|'"deleteVolume"'
op|','
name|'cliq_args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|local_path
dedent|''
name|'def'
name|'local_path'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
comment|'# TODO(justinsb): Is this needed here?'
nl|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"local_path not supported"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|initialize_connection
dedent|''
name|'def'
name|'initialize_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assigns the volume to a server.\n\n        Assign any created volume to a compute node/host so that it can be\n        used from that host. HP VSA requires a volume to be assigned\n        to a server.\n\n        This driver returns a driver_volume_type of \'iscsi\'.\n        The format of the driver data is defined in _get_iscsi_properties.\n        Example return value::\n\n            {\n                \'driver_volume_type\': \'iscsi\'\n                \'data\': {\n                    \'target_discovered\': True,\n                    \'target_iqn\': \'iqn.2010-10.org.openstack:volume-00000001\',\n                    \'target_portal\': \'127.0.0.1:3260\',\n                    \'volume_id\': 1,\n                }\n            }\n\n        """'
newline|'\n'
name|'cliq_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cliq_args'
op|'['
string|"'volumeName'"
op|']'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'cliq_args'
op|'['
string|"'serverName'"
op|']'
op|'='
name|'connector'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cliq_run_xml'
op|'('
string|'"assignVolumeToServer"'
op|','
name|'cliq_args'
op|')'
newline|'\n'
nl|'\n'
name|'iscsi_properties'
op|'='
name|'self'
op|'.'
name|'_get_iscsi_properties'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'driver_volume_type'"
op|':'
string|"'iscsi'"
op|','
nl|'\n'
string|"'data'"
op|':'
name|'iscsi_properties'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|terminate_connection
dedent|''
name|'def'
name|'terminate_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unassign the volume from the host."""'
newline|'\n'
name|'cliq_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cliq_args'
op|'['
string|"'volumeName'"
op|']'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'cliq_args'
op|'['
string|"'serverName'"
op|']'
op|'='
name|'connector'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cliq_run_xml'
op|'('
string|'"unassignVolumeToServer"'
op|','
name|'cliq_args'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

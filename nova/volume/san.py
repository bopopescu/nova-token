begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nDrivers for san-stored volumes.\nThe unique thing about a SAN is that we don\'t expect that we can run the volume\n controller on the SAN hardware.  We expect to access it over SSH or some API.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'paramiko'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
op|'.'
name|'driver'
name|'import'
name|'ISCSIDriver'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.volume.driver"'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'san_thin_provision'"
op|','
string|"'true'"
op|','
nl|'\n'
string|"'Use thin provisioning for SAN volumes?'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'san_ip'"
op|','
string|"''"
op|','
nl|'\n'
string|"'IP address of SAN controller'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'san_login'"
op|','
string|"'admin'"
op|','
nl|'\n'
string|"'Username for SAN controller'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'san_password'"
op|','
string|"''"
op|','
nl|'\n'
string|"'Password for SAN controller'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'san_cluster_name'"
op|','
string|"''"
op|','
nl|'\n'
string|"'Cluster name for creating SAN volumes'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'san_privatekey'"
op|','
string|"''"
op|','
nl|'\n'
string|"'Filename of private key to use for SSH authentication'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|SanISCSIDriver
name|'class'
name|'SanISCSIDriver'
op|'('
name|'ISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Base class for SAN-style storage volumes\n        (storage providers we access over SSH)"""'
newline|'\n'
comment|'#Override because SAN ip != host ip'
nl|'\n'
DECL|member|_get_name_and_portal
name|'def'
name|'_get_name_and_portal'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets iscsi name and portal from volume name and host."""'
newline|'\n'
name|'volume_name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# TODO(justinsb): store in volume, remerge with generic iSCSI code'
nl|'\n'
name|'host'
op|'='
name|'FLAGS'
op|'.'
name|'san_ip'
newline|'\n'
nl|'\n'
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|'"sudo iscsiadm -m discovery -t "'
nl|'\n'
string|'"sendtargets -p %s"'
op|'%'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'location'
op|'='
name|'None'
newline|'\n'
name|'find_iscsi_name'
op|'='
name|'self'
op|'.'
name|'_build_iscsi_target_name'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'for'
name|'target'
name|'in'
name|'out'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'find_iscsi_name'
name|'in'
name|'target'
op|':'
newline|'\n'
indent|'                '
op|'('
name|'location'
op|','
name|'_sep'
op|','
name|'iscsi_name'
op|')'
op|'='
name|'target'
op|'.'
name|'partition'
op|'('
string|'" "'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'location'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Could not find iSCSI export "'
nl|'\n'
string|'" for volume %s"'
op|')'
op|'%'
nl|'\n'
name|'volume_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iscsi_portal'
op|'='
name|'location'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"iscsi_name=%s, iscsi_portal=%s"'
op|'%'
op|'('
name|'iscsi_name'
op|','
name|'iscsi_portal'
op|')'
op|')'
newline|'\n'
name|'return'
op|'('
name|'iscsi_name'
op|','
name|'iscsi_portal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_build_iscsi_target_name
dedent|''
name|'def'
name|'_build_iscsi_target_name'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'iscsi_target_prefix'
op|','
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# discover_volume is still OK'
nl|'\n'
comment|'# undiscover_volume is still OK'
nl|'\n'
nl|'\n'
DECL|member|_connect_to_ssh
dedent|''
name|'def'
name|'_connect_to_ssh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ssh'
op|'='
name|'paramiko'
op|'.'
name|'SSHClient'
op|'('
op|')'
newline|'\n'
comment|'#TODO(justinsb): We need a better SSH key policy'
nl|'\n'
name|'ssh'
op|'.'
name|'set_missing_host_key_policy'
op|'('
name|'paramiko'
op|'.'
name|'AutoAddPolicy'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'san_password'
op|':'
newline|'\n'
indent|'            '
name|'ssh'
op|'.'
name|'connect'
op|'('
name|'FLAGS'
op|'.'
name|'san_ip'
op|','
nl|'\n'
name|'username'
op|'='
name|'FLAGS'
op|'.'
name|'san_login'
op|','
nl|'\n'
name|'password'
op|'='
name|'FLAGS'
op|'.'
name|'san_password'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'san_privatekey'
op|':'
newline|'\n'
indent|'            '
name|'privatekeyfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'FLAGS'
op|'.'
name|'san_privatekey'
op|')'
newline|'\n'
comment|"# It sucks that paramiko doesn't support DSA keys"
nl|'\n'
name|'privatekey'
op|'='
name|'paramiko'
op|'.'
name|'RSAKey'
op|'.'
name|'from_private_key_file'
op|'('
name|'privatekeyfile'
op|')'
newline|'\n'
name|'ssh'
op|'.'
name|'connect'
op|'('
name|'FLAGS'
op|'.'
name|'san_ip'
op|','
name|'username'
op|'='
name|'FLAGS'
op|'.'
name|'san_login'
op|','
name|'pkey'
op|'='
name|'privatekey'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Specify san_password or san_privatekey"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ssh'
newline|'\n'
nl|'\n'
DECL|member|_run_ssh
dedent|''
name|'def'
name|'_run_ssh'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|'#TODO(justinsb): SSH connection caching (?)'
nl|'\n'
indent|'        '
name|'ssh'
op|'='
name|'self'
op|'.'
name|'_connect_to_ssh'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO(justinsb): Reintroduce the retry hack'
nl|'\n'
name|'ret'
op|'='
name|'ssh_execute'
op|'('
name|'ssh'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
nl|'\n'
name|'ssh'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Synchronously recreates an export for a logical volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Exports the volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes an export for a logical volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|check_for_setup_error
dedent|''
name|'def'
name|'check_for_setup_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an error if prerequisites aren\'t met"""'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'FLAGS'
op|'.'
name|'san_password'
name|'or'
name|'FLAGS'
op|'.'
name|'san_privatekey'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Specify san_password or san_privatekey"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'FLAGS'
op|'.'
name|'san_ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"san_ip must be set"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_collect_lines
dedent|''
dedent|''
dedent|''
name|'def'
name|'_collect_lines'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Split lines from data into an array, trimming them """'
newline|'\n'
name|'matches'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'data'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'match'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'matches'
op|'.'
name|'append'
op|'('
name|'match'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|function|_get_prefixed_values
dedent|''
name|'def'
name|'_get_prefixed_values'
op|'('
name|'data'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Collect lines which start with prefix; with trimming"""'
newline|'\n'
name|'matches'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'data'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'match'
op|'='
name|'line'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
name|'match'
op|'='
name|'match'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'matches'
op|'.'
name|'append'
op|'('
name|'match'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|class|SolarisISCSIDriver
dedent|''
name|'class'
name|'SolarisISCSIDriver'
op|'('
name|'SanISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Executes commands relating to Solaris-hosted ISCSI volumes."""'
newline|'\n'
nl|'\n'
comment|'#pkg install storage-server SUNWiscsit'
nl|'\n'
comment|'#svcadm enable stmf'
nl|'\n'
comment|'#zfs allow justinsb create,mount,destroy rpool'
nl|'\n'
comment|"#usermod -P'File System Management' justinsb"
nl|'\n'
comment|"# I don't know which perms are needed for sbdadm..."
nl|'\n'
comment|"#usermod -P'Primary Administrator' justinsb"
nl|'\n'
comment|'# svcadm enable -r svc:/network/iscsi/target:default'
nl|'\n'
comment|'#  pfexec itadm create-tpg e1000g0 10.1.184.98'
nl|'\n'
comment|'# pfexec itadm create-target -t e1000g0'
nl|'\n'
nl|'\n'
DECL|member|_view_exists
name|'def'
name|'_view_exists'
op|'('
name|'self'
op|','
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm list-view -l %s"'
op|'%'
nl|'\n'
op|'('
name|'luid'
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
string|'"no views found"'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|'"View Entry:"'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Cannot parse list-view output: %s"'
op|'%'
op|'('
name|'out'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_target_groups
dedent|''
name|'def'
name|'_get_target_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets list of target groups from host."""'
newline|'\n'
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm list-tg"'
op|')'
newline|'\n'
name|'matches'
op|'='
name|'_get_prefixed_values'
op|'('
name|'out'
op|','
string|"'Target group: '"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"target_groups=%s"'
op|'%'
name|'matches'
op|')'
newline|'\n'
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|member|_target_group_exists
dedent|''
name|'def'
name|'_target_group_exists'
op|'('
name|'self'
op|','
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'target_group_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_get_target_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_target_group_members
dedent|''
name|'def'
name|'_get_target_group_members'
op|'('
name|'self'
op|','
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm list-tg -v %s"'
op|'%'
nl|'\n'
op|'('
name|'target_group_name'
op|')'
op|')'
newline|'\n'
name|'matches'
op|'='
name|'_get_prefixed_values'
op|'('
name|'out'
op|','
string|"'Member: '"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"members of %s=%s"'
op|'%'
op|'('
name|'target_group_name'
op|','
name|'matches'
op|')'
op|')'
newline|'\n'
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|member|_is_target_group_member
dedent|''
name|'def'
name|'_is_target_group_member'
op|'('
name|'self'
op|','
name|'target_group_name'
op|','
name|'iscsi_target_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iscsi_target_name'
name|'in'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_get_target_group_members'
op|'('
name|'target_group_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_iscsi_targets
dedent|''
name|'def'
name|'_get_iscsi_targets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
op|'('
string|'"pfexec /usr/sbin/itadm list-target | "'
nl|'\n'
string|'"awk \'{print $1}\' | grep -v ^TARGET"'
op|')'
newline|'\n'
op|'('
name|'out'
op|','
name|'_err'
op|')'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'matches'
op|'='
name|'_collect_lines'
op|'('
name|'out'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"_get_iscsi_targets=%s"'
op|'%'
op|'('
name|'matches'
op|')'
op|')'
newline|'\n'
name|'return'
name|'matches'
newline|'\n'
nl|'\n'
DECL|member|_iscsi_target_exists
dedent|''
name|'def'
name|'_iscsi_target_exists'
op|'('
name|'self'
op|','
name|'iscsi_target_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iscsi_target_name'
name|'in'
name|'self'
op|'.'
name|'_get_iscsi_targets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_build_zfs_poolname
dedent|''
name|'def'
name|'_build_zfs_poolname'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
comment|'#TODO(justinsb): rpool should be configurable'
nl|'\n'
indent|'        '
name|'zfs_poolname'
op|'='
string|"'rpool/%s'"
op|'%'
op|'('
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'zfs_poolname'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a volume."""'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'sizestr'
op|'='
string|"'100M'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sizestr'
op|'='
string|"'%sG'"
op|'%'
name|'volume'
op|'['
string|"'size'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'thin_provision_arg'
op|'='
string|"'-s'"
name|'if'
name|'FLAGS'
op|'.'
name|'san_thin_provision'
name|'else'
string|"''"
newline|'\n'
comment|'# Create a zfs volume'
nl|'\n'
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/zfs create %s -V %s %s"'
op|'%'
nl|'\n'
op|'('
name|'thin_provision_arg'
op|','
nl|'\n'
name|'sizestr'
op|','
nl|'\n'
name|'zfs_poolname'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
comment|"# 'target_ip': FLAGS.san_ip"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_luid
dedent|''
name|'def'
name|'_get_luid'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
op|'('
string|'"pfexec /usr/sbin/sbdadm list-lu | "'
nl|'\n'
string|'"grep -w %s | awk \'{print $1}\'"'
op|'%'
nl|'\n'
op|'('
name|'zfs_poolname'
op|')'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'stdout'
op|','
name|'_stderr'
op|')'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
name|'luid'
op|'='
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|_is_lu_created
dedent|''
name|'def'
name|'_is_lu_created'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'luid'
op|'='
name|'self'
op|'.'
name|'_get_luid'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'return'
name|'luid'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes a volume."""'
newline|'\n'
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/zfs destroy %s"'
op|'%'
nl|'\n'
op|'('
name|'zfs_poolname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|local_path
dedent|''
name|'def'
name|'local_path'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
comment|'# TODO(justinsb): Is this needed here?'
nl|'\n'
indent|'        '
name|'escaped_group'
op|'='
name|'FLAGS'
op|'.'
name|'volume_group'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'--'"
op|')'
newline|'\n'
name|'escaped_name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'--'"
op|')'
newline|'\n'
name|'return'
string|'"/dev/mapper/%s-%s"'
op|'%'
op|'('
name|'escaped_group'
op|','
name|'escaped_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Synchronously recreates an export for a logical volume."""'
newline|'\n'
comment|'#TODO(justinsb): On bootup, this is called for every volume.'
nl|'\n'
comment|'# It then runs ~5 SSH commands for each volume,'
nl|'\n'
comment|'# most of which fetch the same info each time'
nl|'\n'
comment|'# This makes initial start stupid-slow'
nl|'\n'
name|'self'
op|'.'
name|'_do_export'
op|'('
name|'volume'
op|','
name|'force_create'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_do_export'
op|'('
name|'volume'
op|','
name|'force_create'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_export
dedent|''
name|'def'
name|'_do_export'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'force_create'
op|')'
op|':'
newline|'\n'
comment|'# Create a Logical Unit (LU) backed by the zfs volume'
nl|'\n'
indent|'        '
name|'zfs_poolname'
op|'='
name|'self'
op|'.'
name|'_build_zfs_poolname'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_is_lu_created'
op|'('
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
op|'('
string|'"pfexec /usr/sbin/sbdadm create-lu /dev/zvol/rdsk/%s"'
op|'%'
nl|'\n'
op|'('
name|'zfs_poolname'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'luid'
op|'='
name|'self'
op|'.'
name|'_get_luid'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'iscsi_name'
op|'='
name|'self'
op|'.'
name|'_build_iscsi_target_name'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'target_group_name'
op|'='
string|"'tg-%s'"
op|'%'
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# The sequence of commands looks like this:'
nl|'\n'
comment|'#pfexec stmfadm create-tg tg-vol2'
nl|'\n'
comment|'# Yes, we add it before we create it!'
nl|'\n'
comment|'#pfexec stmfadm add-tg-member -g tg-vol2 iqn.2010-10.org.openstack:vol2'
nl|'\n'
comment|'#pfexec itadm create-target -n iqn.2010-10.org.openstack:vol2'
nl|'\n'
comment|'#pfexec stmfadm add-view -t tg-vol2 600144F051E2440000004D4A0F730004'
nl|'\n'
nl|'\n'
comment|'# Create a iSCSI target, mapped to just this volume'
nl|'\n'
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_target_group_exists'
op|'('
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm create-tg %s"'
op|'%'
nl|'\n'
op|'('
name|'target_group_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Yes, we add the initiatior before we create it!'
nl|'\n'
dedent|''
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_is_target_group_member'
op|'('
name|'target_group_name'
op|','
nl|'\n'
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm add-tg-member -g %s %s"'
op|'%'
nl|'\n'
op|'('
name|'target_group_name'
op|','
name|'iscsi_name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_iscsi_target_exists'
op|'('
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/itadm create-target -n %s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'force_create'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_view_exists'
op|'('
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm add-view -t %s %s"'
op|'%'
nl|'\n'
op|'('
name|'target_group_name'
op|','
name|'luid'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes an export for a logical volume."""'
newline|'\n'
nl|'\n'
comment|'# This is the reverse of _do_export'
nl|'\n'
name|'luid'
op|'='
name|'self'
op|'.'
name|'_get_luid'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'iscsi_name'
op|'='
name|'self'
op|'.'
name|'_build_iscsi_target_name'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'target_group_name'
op|'='
string|"'tg-%s'"
op|'%'
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_view_exists'
op|'('
name|'luid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm remove-view -l %s -a"'
op|'%'
nl|'\n'
op|'('
name|'luid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_iscsi_target_exists'
op|'('
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm offline-target %s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/itadm delete-target %s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# We don't delete the tg-member; we delete the whole tg!"
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_target_group_exists'
op|'('
name|'target_group_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/stmfadm delete-tg %s"'
op|'%'
nl|'\n'
op|'('
name|'target_group_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_is_lu_created'
op|'('
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'"pfexec /usr/sbin/sbdadm delete-lu %s"'
op|'%'
nl|'\n'
op|'('
name|'luid'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ssh_execute
dedent|''
dedent|''
dedent|''
name|'def'
name|'ssh_execute'
op|'('
name|'ssh'
op|','
name|'cmd'
op|','
name|'process_input'
op|'='
name|'None'
op|','
nl|'\n'
name|'addl_env'
op|'='
name|'None'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Running cmd (subprocess): %s"'
op|')'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'addl_env'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Environment not supported over SSH"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'process_input'
op|':'
newline|'\n'
comment|'# This is (probably) fixable if we need it...'
nl|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"process_input not supported over SSH"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stdin_stream'
op|','
name|'stdout_stream'
op|','
name|'stderr_stream'
op|'='
name|'ssh'
op|'.'
name|'exec_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'stdout_stream'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
comment|"#stdin.write('process_input would go here')"
nl|'\n'
comment|'#stdin.flush()'
nl|'\n'
nl|'\n'
comment|"# I'm suspicious of this..."
nl|'\n'
comment|'# ...other SSH clients have buffering issues with this approach'
nl|'\n'
name|'stdout'
op|'='
name|'stdout_stream'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'stderr'
op|'='
name|'stderr_stream'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'stdin_stream'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'exit_status'
op|'='
name|'channel'
op|'.'
name|'recv_exit_status'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# exit_status == -1 if no exit code was returned'
nl|'\n'
name|'if'
name|'exit_status'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Result was %s"'
op|')'
op|'%'
name|'exit_status'
op|')'
newline|'\n'
name|'if'
name|'check_exit_code'
name|'and'
name|'exit_status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|'('
name|'exit_code'
op|'='
name|'exit_status'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
nl|'\n'
name|'cmd'
op|'='
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Removed, although this is workaround is needed in utils.execute:'
nl|'\n'
comment|"#  (no reason to believe it's needed here!)"
nl|'\n'
comment|'# greenthread.sleep(0)'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'stdout'
op|','
name|'stderr'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

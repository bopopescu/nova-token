begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2012 NetApp, Inc.'
nl|'\n'
comment|'# Copyright (c) 2012 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nVolume driver for NetApp storage systems.\n\nThis driver requires NetApp OnCommand 5.0 and one or more Data\nONTAP 7-mode storage systems with installed iSCSI licenses.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'suds'
newline|'\n'
name|'from'
name|'suds'
name|'import'
name|'client'
newline|'\n'
name|'from'
name|'suds'
op|'.'
name|'sax'
name|'import'
name|'text'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|netapp_opts
name|'netapp_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'netapp_wsdl_url'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'URL of the WSDL file for the DFM server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'netapp_login'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'User name for the DFM server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'netapp_password'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Password for the DFM server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'netapp_server_hostname'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Hostname for the DFM server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'netapp_server_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'8088'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Port number for the DFM server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'netapp_storage_service'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage service to use for provisioning'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'netapp_vfiler'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Vfiler to use for provisioning'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'netapp_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetAppISCSIDriver
name|'class'
name|'NetAppISCSIDriver'
op|'('
name|'driver'
op|'.'
name|'ISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""NetApp iSCSI volume driver."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NetAppISCSIDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_fail
dedent|''
name|'def'
name|'_check_fail'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'failed'"
op|'=='
name|'response'
op|'.'
name|'Status'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'request'
op|'.'
name|'Name'
newline|'\n'
name|'reason'
op|'='
name|'response'
op|'.'
name|'Reason'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'API %(name)sfailed: %(reason)s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_client
dedent|''
dedent|''
name|'def'
name|'_create_client'
op|'('
name|'self'
op|','
name|'wsdl_url'
op|','
name|'login'
op|','
name|'password'
op|','
name|'hostname'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Instantiate a "suds" client to make web services calls to the\n        DFM server. Note that the WSDL file is quite large and may take\n        a few seconds to parse.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
op|'.'
name|'Client'
op|'('
name|'wsdl_url'
op|','
nl|'\n'
name|'username'
op|'='
name|'login'
op|','
nl|'\n'
name|'password'
op|'='
name|'password'
op|')'
newline|'\n'
name|'soap_url'
op|'='
string|"'http://%s:%s/apis/soap/v1'"
op|'%'
op|'('
name|'hostname'
op|','
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'set_options'
op|'('
name|'location'
op|'='
name|'soap_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_storage_service
dedent|''
name|'def'
name|'_set_storage_service'
op|'('
name|'self'
op|','
name|'storage_service'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the storage service to use for provisioning"""'
newline|'\n'
name|'self'
op|'.'
name|'storage_service'
op|'='
name|'storage_service'
newline|'\n'
nl|'\n'
DECL|member|_set_vfiler
dedent|''
name|'def'
name|'_set_vfiler'
op|'('
name|'self'
op|','
name|'vfiler'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the vfiler to use for provisioning"""'
newline|'\n'
name|'self'
op|'.'
name|'vfiler'
op|'='
name|'vfiler'
newline|'\n'
nl|'\n'
DECL|member|_check_flags
dedent|''
name|'def'
name|'_check_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that the flags we care about are set."""'
newline|'\n'
name|'required_flags'
op|'='
op|'['
string|"'netapp_wsdl_url'"
op|','
string|"'netapp_login'"
op|','
string|"'netapp_password'"
op|','
nl|'\n'
string|"'netapp_server_hostname'"
op|','
string|"'netapp_server_port'"
op|','
nl|'\n'
string|"'netapp_storage_service'"
op|']'
newline|'\n'
name|'for'
name|'flag'
name|'in'
name|'required_flags'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'getattr'
op|'('
name|'FLAGS'
op|','
name|'flag'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'%s is not set'"
op|')'
op|'%'
name|'flag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_setup
dedent|''
dedent|''
dedent|''
name|'def'
name|'do_setup'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Called one time by the manager after the driver is loaded.\n        Validate the flags we care about and setup the suds (web services)\n        client.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_check_flags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_client'
op|'('
name|'FLAGS'
op|'.'
name|'netapp_wsdl_url'
op|','
name|'FLAGS'
op|'.'
name|'netapp_login'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'netapp_password'
op|','
name|'FLAGS'
op|'.'
name|'netapp_server_hostname'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'netapp_server_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_storage_service'
op|'('
name|'FLAGS'
op|'.'
name|'netapp_storage_service'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'netapp_vfiler'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_vfiler'
op|'('
name|'FLAGS'
op|'.'
name|'netapp_vfiler'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_for_setup_error
dedent|''
dedent|''
name|'def'
name|'check_for_setup_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invoke a web services API to make sure we can talk to the server."""'
newline|'\n'
name|'res'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'DfmAbout'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Connected to DFM server"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_job_progress
dedent|''
name|'def'
name|'_get_job_progress'
op|'('
name|'self'
op|','
name|'job_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Obtain the latest progress report for the job and return the\n        list of progress events.\n        """'
newline|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'res'
op|'='
name|'server'
op|'.'
name|'DpJobProgressEventListIterStart'
op|'('
name|'JobId'
op|'='
name|'job_id'
op|')'
newline|'\n'
name|'tag'
op|'='
name|'res'
op|'.'
name|'Tag'
newline|'\n'
name|'event_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'='
name|'server'
op|'.'
name|'DpJobProgressEventListIterNext'
op|'('
name|'Tag'
op|'='
name|'tag'
op|','
nl|'\n'
name|'Maximum'
op|'='
number|'100'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'res'
op|','
string|"'ProgressEvents'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'event_list'
op|'+='
name|'res'
op|'.'
name|'ProgressEvents'
op|'.'
name|'DpJobProgressEventInfo'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DpJobProgressEventListIterEnd'
op|'('
name|'Tag'
op|'='
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'event_list'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_job
dedent|''
name|'def'
name|'_wait_for_job'
op|'('
name|'self'
op|','
name|'job_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Poll the job until it completes or an error is detected. Return the\n        final list of progress events if it completes successfully.\n        """'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'='
name|'self'
op|'.'
name|'_get_job_progress'
op|'('
name|'job_id'
op|')'
newline|'\n'
name|'for'
name|'event'
name|'in'
name|'events'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'event'
op|'.'
name|'EventStatus'
op|'=='
string|"'error'"
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'Job failed: %s'"
op|')'
op|'%'
nl|'\n'
op|'('
name|'event'
op|'.'
name|'ErrorMessage'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'event'
op|'.'
name|'EventType'
op|'=='
string|"'job-end'"
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'events'
newline|'\n'
dedent|''
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_dataset_name
dedent|''
dedent|''
name|'def'
name|'_dataset_name'
op|'('
name|'self'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the dataset name for a given project """'
newline|'\n'
name|'_project'
op|'='
name|'string'
op|'.'
name|'replace'
op|'('
name|'string'
op|'.'
name|'replace'
op|'('
name|'project'
op|','
string|"' '"
op|','
string|"'_'"
op|')'
op|','
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'return'
string|"'OpenStack_'"
op|'+'
name|'_project'
newline|'\n'
nl|'\n'
DECL|member|_does_dataset_exist
dedent|''
name|'def'
name|'_does_dataset_exist'
op|'('
name|'self'
op|','
name|'dataset_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if a dataset already exists"""'
newline|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'server'
op|'.'
name|'DatasetListInfoIterStart'
op|'('
name|'ObjectNameOrId'
op|'='
name|'dataset_name'
op|')'
newline|'\n'
name|'tag'
op|'='
name|'res'
op|'.'
name|'Tag'
newline|'\n'
dedent|''
name|'except'
name|'suds'
op|'.'
name|'WebFault'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'server'
op|'.'
name|'DatasetListInfoIterNext'
op|'('
name|'Tag'
op|'='
name|'tag'
op|','
name|'Maximum'
op|'='
number|'1'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'res'
op|','
string|"'Datasets'"
op|')'
name|'and'
name|'res'
op|'.'
name|'Datasets'
op|'.'
name|'DatasetInfo'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DatasetListInfoIterEnd'
op|'('
name|'Tag'
op|'='
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_create_dataset
dedent|''
name|'def'
name|'_create_dataset'
op|'('
name|'self'
op|','
name|'dataset_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new dataset using the storage service. The export settings are\n        set to create iSCSI LUNs aligned for Linux.\n        """'
newline|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
nl|'\n'
name|'lunmap'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'DatasetLunMappingInfo'"
op|')'
newline|'\n'
name|'lunmap'
op|'.'
name|'IgroupOsType'
op|'='
string|"'linux'"
newline|'\n'
name|'export'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'DatasetExportInfo'"
op|')'
newline|'\n'
name|'export'
op|'.'
name|'DatasetExportProtocol'
op|'='
string|"'iscsi'"
newline|'\n'
name|'export'
op|'.'
name|'DatasetLunMappingInfo'
op|'='
name|'lunmap'
newline|'\n'
name|'detail'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'StorageSetInfo'"
op|')'
newline|'\n'
name|'detail'
op|'.'
name|'DpNodeName'
op|'='
string|"'Primary data'"
newline|'\n'
name|'detail'
op|'.'
name|'DatasetExportInfo'
op|'='
name|'export'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'vfiler'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'detail'
op|'.'
name|'ServerNameOrId'
op|'='
name|'self'
op|'.'
name|'vfiler'
newline|'\n'
dedent|''
name|'details'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'ArrayOfStorageSetInfo'"
op|')'
newline|'\n'
name|'details'
op|'.'
name|'StorageSetInfo'
op|'='
op|'['
name|'detail'
op|']'
newline|'\n'
nl|'\n'
name|'server'
op|'.'
name|'StorageServiceDatasetProvision'
op|'('
nl|'\n'
name|'StorageServiceNameOrId'
op|'='
name|'self'
op|'.'
name|'storage_service'
op|','
nl|'\n'
name|'DatasetName'
op|'='
name|'dataset_name'
op|','
nl|'\n'
name|'AssumeConfirmation'
op|'='
name|'True'
op|','
nl|'\n'
name|'StorageSetDetails'
op|'='
name|'details'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_provision
dedent|''
name|'def'
name|'_provision'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'description'
op|','
name|'project'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Provision a LUN through provisioning manager. The LUN will be created\n        inside a dataset associated with the project. If the dataset doesn\'t\n        already exist, we create it using the storage service specified in the\n        nova conf.\n        """'
newline|'\n'
nl|'\n'
name|'dataset_name'
op|'='
name|'self'
op|'.'
name|'_dataset_name'
op|'('
name|'project'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_does_dataset_exist'
op|'('
name|'dataset_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_dataset'
op|'('
name|'dataset_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'ProvisionMemberRequestInfo'"
op|')'
newline|'\n'
name|'info'
op|'.'
name|'Name'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'description'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'.'
name|'Description'
op|'='
name|'description'
newline|'\n'
dedent|''
name|'info'
op|'.'
name|'Size'
op|'='
name|'size'
newline|'\n'
name|'info'
op|'.'
name|'MaximumSnapshotSpace'
op|'='
number|'2'
op|'*'
name|'long'
op|'('
name|'size'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'lock_id'
op|'='
name|'server'
op|'.'
name|'DatasetEditBegin'
op|'('
name|'DatasetNameOrId'
op|'='
name|'dataset_name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DatasetProvisionMember'
op|'('
name|'EditLockId'
op|'='
name|'lock_id'
op|','
nl|'\n'
name|'ProvisionMemberRequestInfo'
op|'='
name|'info'
op|')'
newline|'\n'
name|'res'
op|'='
name|'server'
op|'.'
name|'DatasetEditCommit'
op|'('
name|'EditLockId'
op|'='
name|'lock_id'
op|','
nl|'\n'
name|'AssumeConfirmation'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'suds'
op|'.'
name|'WebFault'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DatasetEditRollback'
op|'('
name|'EditLockId'
op|'='
name|'lock_id'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to provision dataset member'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'lun_id'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'info'
name|'in'
name|'res'
op|'.'
name|'JobIds'
op|'.'
name|'JobInfo'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'='
name|'self'
op|'.'
name|'_wait_for_job'
op|'('
name|'info'
op|'.'
name|'JobId'
op|')'
newline|'\n'
name|'for'
name|'event'
name|'in'
name|'events'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'event'
op|'.'
name|'EventType'
op|'!='
string|"'lun-create'"
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'lun_id'
op|'='
name|'event'
op|'.'
name|'ProgressLunInfo'
op|'.'
name|'LunPathId'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'lun_id'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'No LUN was created by the provision job'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_destroy
dedent|''
dedent|''
name|'def'
name|'_remove_destroy'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the LUN from the dataset and destroy the actual LUN on the\n        storage system.\n        """'
newline|'\n'
name|'lun_id'
op|'='
name|'self'
op|'.'
name|'_get_lun_id'
op|'('
name|'name'
op|','
name|'project'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lun_id'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to find LUN ID for volume %s"'
op|')'
op|'%'
op|'('
name|'name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'member'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'DatasetMemberParameter'"
op|')'
newline|'\n'
name|'member'
op|'.'
name|'ObjectNameOrId'
op|'='
name|'lun_id'
newline|'\n'
name|'members'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'ArrayOfDatasetMemberParameter'"
op|')'
newline|'\n'
name|'members'
op|'.'
name|'DatasetMemberParameter'
op|'='
op|'['
name|'member'
op|']'
newline|'\n'
nl|'\n'
name|'dataset_name'
op|'='
name|'self'
op|'.'
name|'_dataset_name'
op|'('
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'lock_id'
op|'='
name|'server'
op|'.'
name|'DatasetEditBegin'
op|'('
name|'DatasetNameOrId'
op|'='
name|'dataset_name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DatasetRemoveMember'
op|'('
name|'EditLockId'
op|'='
name|'lock_id'
op|','
name|'Destroy'
op|'='
name|'True'
op|','
nl|'\n'
name|'DatasetMemberParameters'
op|'='
name|'members'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'DatasetEditCommit'
op|'('
name|'EditLockId'
op|'='
name|'lock_id'
op|','
nl|'\n'
name|'AssumeConfirmation'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'suds'
op|'.'
name|'WebFault'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DatasetEditRollback'
op|'('
name|'EditLockId'
op|'='
name|'lock_id'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to remove and delete dataset member'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Driver entry point for creating a new volume"""'
newline|'\n'
name|'default_size'
op|'='
string|"'104857600'"
comment|'# 100 MB'
newline|'\n'
name|'gigabytes'
op|'='
number|'1073741824L'
comment|'# 2^30'
newline|'\n'
name|'name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'project'
op|'='
name|'volume'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'display_name'
op|'='
name|'volume'
op|'['
string|"'display_name'"
op|']'
newline|'\n'
name|'display_description'
op|'='
name|'volume'
op|'['
string|"'display_description'"
op|']'
newline|'\n'
name|'if'
name|'display_name'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'display_description'
op|':'
newline|'\n'
indent|'                '
name|'description'
op|'='
name|'display_name'
op|'+'
string|'"\\n"'
op|'+'
name|'display_description'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'description'
op|'='
name|'display_name'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'display_description'
op|':'
newline|'\n'
indent|'            '
name|'description'
op|'='
name|'display_description'
newline|'\n'
dedent|''
name|'if'
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'default_size'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
op|'*'
name|'gigabytes'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_provision'
op|'('
name|'name'
op|','
name|'description'
op|','
name|'project'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Driver entry point for destroying existing volumes"""'
newline|'\n'
name|'name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'project'
op|'='
name|'volume'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_remove_destroy'
op|'('
name|'name'
op|','
name|'project'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_lun_id
dedent|''
name|'def'
name|'_get_lun_id'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given the name of a volume, find the DFM (OnCommand) ID of the LUN\n        corresponding to that volume. Currently we do this by enumerating\n        all of the LUNs in the dataset and matching the names against the\n        OpenStack volume name.\n\n        This could become a performance bottleneck in very large installations\n        in which case possible options for mitigating the problem are:\n        1) Store the LUN ID alongside the volume in the nova DB (if possible)\n        2) Cache the list of LUNs in the dataset in driver memory\n        3) Store the volume to LUN ID mappings in a local file\n        """'
newline|'\n'
name|'dataset_name'
op|'='
name|'self'
op|'.'
name|'_dataset_name'
op|'('
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'res'
op|'='
name|'server'
op|'.'
name|'DatasetMemberListInfoIterStart'
op|'('
nl|'\n'
name|'DatasetNameOrId'
op|'='
name|'dataset_name'
op|','
nl|'\n'
name|'IncludeExportsInfo'
op|'='
name|'True'
op|','
nl|'\n'
name|'IncludeIndirect'
op|'='
name|'True'
op|','
nl|'\n'
name|'MemberType'
op|'='
string|"'lun_path'"
op|')'
newline|'\n'
name|'tag'
op|'='
name|'res'
op|'.'
name|'Tag'
newline|'\n'
name|'suffix'
op|'='
string|"'/'"
op|'+'
name|'name'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'='
name|'server'
op|'.'
name|'DatasetMemberListInfoIterNext'
op|'('
name|'Tag'
op|'='
name|'tag'
op|','
nl|'\n'
name|'Maximum'
op|'='
number|'100'
op|')'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'hasattr'
op|'('
name|'res'
op|','
string|"'DatasetMembers'"
op|')'
name|'or'
nl|'\n'
name|'not'
name|'res'
op|'.'
name|'DatasetMembers'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'for'
name|'member'
name|'in'
name|'res'
op|'.'
name|'DatasetMembers'
op|'.'
name|'DatasetMemberInfo'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'member'
op|'.'
name|'MemberName'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'member'
op|'.'
name|'MemberId'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'DatasetMemberListInfoIterEnd'
op|'('
name|'Tag'
op|'='
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_lun_details
dedent|''
dedent|''
name|'def'
name|'_get_lun_details'
op|'('
name|'self'
op|','
name|'lun_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given the ID of a LUN, get the details about that LUN"""'
newline|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'res'
op|'='
name|'server'
op|'.'
name|'LunListInfoIterStart'
op|'('
name|'ObjectNameOrId'
op|'='
name|'lun_id'
op|')'
newline|'\n'
name|'tag'
op|'='
name|'res'
op|'.'
name|'Tag'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'server'
op|'.'
name|'LunListInfoIterNext'
op|'('
name|'Tag'
op|'='
name|'tag'
op|','
name|'Maximum'
op|'='
number|'1'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'res'
op|','
string|"'Luns'"
op|')'
name|'and'
name|'res'
op|'.'
name|'Luns'
op|'.'
name|'LunInfo'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'res'
op|'.'
name|'Luns'
op|'.'
name|'LunInfo'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'LunListInfoIterEnd'
op|'('
name|'Tag'
op|'='
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_details
dedent|''
dedent|''
name|'def'
name|'_get_host_details'
op|'('
name|'self'
op|','
name|'host_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given the ID of a host (storage system), get the details about that\n        host.\n        """'
newline|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
newline|'\n'
name|'res'
op|'='
name|'server'
op|'.'
name|'HostListInfoIterStart'
op|'('
name|'ObjectNameOrId'
op|'='
name|'host_id'
op|')'
newline|'\n'
name|'tag'
op|'='
name|'res'
op|'.'
name|'Tag'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'server'
op|'.'
name|'HostListInfoIterNext'
op|'('
name|'Tag'
op|'='
name|'tag'
op|','
name|'Maximum'
op|'='
number|'1'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'res'
op|','
string|"'Hosts'"
op|')'
name|'and'
name|'res'
op|'.'
name|'Hosts'
op|'.'
name|'HostInfo'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'res'
op|'.'
name|'Hosts'
op|'.'
name|'HostInfo'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'.'
name|'HostListInfoIterEnd'
op|'('
name|'Tag'
op|'='
name|'tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_iqn_for_host
dedent|''
dedent|''
name|'def'
name|'_get_iqn_for_host'
op|'('
name|'self'
op|','
name|'host_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the iSCSI Target Name for a storage system"""'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'iscsi-node-get-name'"
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'return'
name|'response'
op|'.'
name|'Results'
op|'['
string|"'node-name'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_api_elem_is_empty
dedent|''
name|'def'
name|'_api_elem_is_empty'
op|'('
name|'self'
op|','
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper routine to figure out if a list returned from a proxy API\n        is empty. This is necessary because the API proxy produces nasty\n        looking XML.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'type'
op|'('
name|'elem'
op|')'
name|'is'
name|'list'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
number|'0'
op|'=='
name|'len'
op|'('
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'child'
op|'='
name|'elem'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'child'
op|','
name|'text'
op|'.'
name|'Text'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'type'
op|'('
name|'child'
op|')'
name|'is'
name|'str'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_get_target_portal_for_host
dedent|''
name|'def'
name|'_get_target_portal_for_host'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'host_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the iSCSI Target Portal details for a particular IP address\n        on a storage system.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'iscsi-portal-list-info'"
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'portal'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'portals'
op|'='
name|'response'
op|'.'
name|'Results'
op|'['
string|"'iscsi-portal-list-entries'"
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_api_elem_is_empty'
op|'('
name|'portals'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'portal'
newline|'\n'
dedent|''
name|'portal_infos'
op|'='
name|'portals'
op|'['
number|'0'
op|']'
op|'['
string|"'iscsi-portal-list-entry-info'"
op|']'
newline|'\n'
name|'for'
name|'portal_info'
name|'in'
name|'portal_infos'
op|':'
newline|'\n'
indent|'            '
name|'portal'
op|'['
string|"'address'"
op|']'
op|'='
name|'portal_info'
op|'['
string|"'ip-address'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'portal'
op|'['
string|"'port'"
op|']'
op|'='
name|'portal_info'
op|'['
string|"'ip-port'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'portal'
op|'['
string|"'portal'"
op|']'
op|'='
name|'portal_info'
op|'['
string|"'tpgroup-tag'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'host_address'
op|'=='
name|'portal'
op|'['
string|"'address'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'portal'
newline|'\n'
nl|'\n'
DECL|member|_get_export
dedent|''
name|'def'
name|'_get_export'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Looks up the LUN in DFM based on the volume and project name, then get\n        the LUN\'s ID. We store that value in the database instead of the iSCSI\n        details because we will not have the true iSCSI details until masking\n        time (when initialize_connection() is called).\n        """'
newline|'\n'
name|'name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'project'
op|'='
name|'volume'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'lun_id'
op|'='
name|'self'
op|'.'
name|'_get_lun_id'
op|'('
name|'name'
op|','
name|'project'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lun_id'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to find LUN ID for volume %s"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'provider_location'"
op|':'
name|'lun_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Driver entry point to get the iSCSI details about an existing volume\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_export'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Driver entry point to get the iSCSI details about a new volume\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_export'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Since exporting is idempotent in this driver, we have nothing\n        to do for unexporting.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_find_igroup_for_initiator
dedent|''
name|'def'
name|'_find_igroup_for_initiator'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'initiator_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Look for an existing igroup (initiator group) on the storage system\n        containing a given iSCSI initiator and return the name of the igroup.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'igroup-list-info'"
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'igroups'
op|'='
name|'response'
op|'.'
name|'Results'
op|'['
string|"'initiator-groups'"
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_api_elem_is_empty'
op|'('
name|'igroups'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'igroup_infos'
op|'='
name|'igroups'
op|'['
number|'0'
op|']'
op|'['
string|"'initiator-group-info'"
op|']'
newline|'\n'
name|'for'
name|'igroup_info'
name|'in'
name|'igroup_infos'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
string|"'iscsi'"
op|'!='
name|'igroup_info'
op|'['
string|"'initiator-group-type'"
op|']'
op|'['
number|'0'
op|']'
name|'or'
nl|'\n'
string|"'linux'"
op|'!='
name|'igroup_info'
op|'['
string|"'initiator-group-os-type'"
op|']'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'igroup_name'
op|'='
name|'igroup_info'
op|'['
string|"'initiator-group-name'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'igroup_name'
op|'.'
name|'startswith'
op|'('
string|"'openstack-'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'initiators'
op|'='
name|'igroup_info'
op|'['
string|"'initiators'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'initiator-info'"
op|']'
newline|'\n'
name|'for'
name|'initiator'
name|'in'
name|'initiators'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'initiator_name'
op|'=='
name|'initiator'
op|'['
string|"'initiator-name'"
op|']'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'igroup_name'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_create_igroup
dedent|''
name|'def'
name|'_create_igroup'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'initiator_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new igroup (initiator group) on the storage system to hold\n        the given iSCSI initiator. The group will only have 1 member and will\n        be named "openstack-${initiator_name}".\n        """'
newline|'\n'
name|'igroup_name'
op|'='
string|"'openstack-'"
op|'+'
name|'initiator_name'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'igroup-create'"
newline|'\n'
name|'igroup_create_xml'
op|'='
op|'('
nl|'\n'
string|"'<initiator-group-name>%s</initiator-group-name>'"
nl|'\n'
string|"'<initiator-group-type>iscsi</initiator-group-type>'"
nl|'\n'
string|"'<os-type>linux</os-type><ostype>linux</ostype>'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Args'
op|'='
name|'text'
op|'.'
name|'Raw'
op|'('
name|'igroup_create_xml'
op|'%'
name|'igroup_name'
op|')'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'igroup-add'"
newline|'\n'
name|'igroup_add_xml'
op|'='
op|'('
nl|'\n'
string|"'<initiator-group-name>%s</initiator-group-name>'"
nl|'\n'
string|"'<initiator>%s</initiator>'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Args'
op|'='
name|'text'
op|'.'
name|'Raw'
op|'('
name|'igroup_add_xml'
op|'%'
op|'('
name|'igroup_name'
op|','
name|'initiator_name'
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'return'
name|'igroup_name'
newline|'\n'
nl|'\n'
DECL|member|_get_lun_mappping
dedent|''
name|'def'
name|'_get_lun_mappping'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if a given LUN is already mapped to the given igroup (initiator\n        group). If the LUN is mapped, also return the LUN number for the\n        mapping.\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'lun-map-list-info'"
newline|'\n'
name|'request'
op|'.'
name|'Args'
op|'='
name|'text'
op|'.'
name|'Raw'
op|'('
string|"'<path>%s</path>'"
op|'%'
op|'('
name|'lunpath'
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'igroups'
op|'='
name|'response'
op|'.'
name|'Results'
op|'['
string|"'initiator-groups'"
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_api_elem_is_empty'
op|'('
name|'igroups'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'mapped'"
op|':'
name|'False'
op|'}'
newline|'\n'
dedent|''
name|'igroup_infos'
op|'='
name|'igroups'
op|'['
number|'0'
op|']'
op|'['
string|"'initiator-group-info'"
op|']'
newline|'\n'
name|'for'
name|'igroup_info'
name|'in'
name|'igroup_infos'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'igroup_name'
op|'=='
name|'igroup_info'
op|'['
string|"'initiator-group-name'"
op|']'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'mapped'"
op|':'
name|'True'
op|','
string|"'lun_num'"
op|':'
name|'igroup_info'
op|'['
string|"'lun-id'"
op|']'
op|'['
number|'0'
op|']'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'mapped'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_map_initiator
dedent|''
name|'def'
name|'_map_initiator'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Map the given LUN to the given igroup (initiator group). Return the LUN\n        number that the LUN was mapped to (the filer will choose the lowest\n        available number).\n        """'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'lun-map'"
newline|'\n'
name|'lun_map_xml'
op|'='
op|'('
string|"'<initiator-group>%s</initiator-group>'"
nl|'\n'
string|"'<path>%s</path>'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Args'
op|'='
name|'text'
op|'.'
name|'Raw'
op|'('
name|'lun_map_xml'
op|'%'
op|'('
name|'igroup_name'
op|','
name|'lunpath'
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
name|'return'
name|'response'
op|'.'
name|'Results'
op|'['
string|"'lun-id-assigned'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_unmap_initiator
dedent|''
name|'def'
name|'_unmap_initiator'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unmap the given LUN from the given igroup (initiator group)."""'
newline|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'factory'
op|'.'
name|'create'
op|'('
string|"'Request'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Name'
op|'='
string|"'lun-unmap'"
newline|'\n'
name|'lun_unmap_xml'
op|'='
op|'('
string|"'<initiator-group>%s</initiator-group>'"
nl|'\n'
string|"'<path>%s</path>'"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'Args'
op|'='
name|'text'
op|'.'
name|'Raw'
op|'('
name|'lun_unmap_xml'
op|'%'
op|'('
name|'igroup_name'
op|','
name|'lunpath'
op|')'
op|')'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'ApiProxy'
op|'('
name|'Target'
op|'='
name|'host_id'
op|','
nl|'\n'
name|'Request'
op|'='
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_fail'
op|'('
name|'request'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_initiator_mapped
dedent|''
name|'def'
name|'_ensure_initiator_mapped'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'lunpath'
op|','
name|'initiator_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if a LUN is mapped to a given initiator already and create\n        the mapping if it is not. A new igroup will be created if needed.\n        Returns the LUN number for the mapping between the LUN and initiator\n        in both cases.\n        """'
newline|'\n'
name|'lunpath'
op|'='
string|"'/vol/'"
op|'+'
name|'lunpath'
newline|'\n'
name|'igroup_name'
op|'='
name|'self'
op|'.'
name|'_find_igroup_for_initiator'
op|'('
name|'host_id'
op|','
name|'initiator_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'igroup_name'
op|':'
newline|'\n'
indent|'            '
name|'igroup_name'
op|'='
name|'self'
op|'.'
name|'_create_igroup'
op|'('
name|'host_id'
op|','
name|'initiator_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mapping'
op|'='
name|'self'
op|'.'
name|'_get_lun_mappping'
op|'('
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
newline|'\n'
name|'if'
name|'mapping'
op|'['
string|"'mapped'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'mapping'
op|'['
string|"'lun_num'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_map_initiator'
op|'('
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_initiator_unmapped
dedent|''
name|'def'
name|'_ensure_initiator_unmapped'
op|'('
name|'self'
op|','
name|'host_id'
op|','
name|'lunpath'
op|','
name|'initiator_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if a LUN is mapped to a given initiator and remove the\n        mapping if it is. This does not destroy the igroup.\n        """'
newline|'\n'
name|'lunpath'
op|'='
string|"'/vol/'"
op|'+'
name|'lunpath'
newline|'\n'
name|'igroup_name'
op|'='
name|'self'
op|'.'
name|'_find_igroup_for_initiator'
op|'('
name|'host_id'
op|','
name|'initiator_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'igroup_name'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'mapping'
op|'='
name|'self'
op|'.'
name|'_get_lun_mappping'
op|'('
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
newline|'\n'
name|'if'
name|'mapping'
op|'['
string|"'mapped'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_unmap_initiator'
op|'('
name|'host_id'
op|','
name|'lunpath'
op|','
name|'igroup_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|initialize_connection
dedent|''
dedent|''
name|'def'
name|'initialize_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Do the LUN masking on the storage system so the initiator can access\n        the LUN on the target. Also return the iSCSI properties so the\n        initiator can find the LUN. This implementation does not call\n        _get_iscsi_properties() to get the properties because cannot store the\n        LUN number in the database. We only find out what the LUN number will\n        be during this method call so we construct the properties dictionary\n        ourselves.\n        """'
newline|'\n'
name|'initiator_name'
op|'='
name|'connector'
op|'['
string|"'initiator'"
op|']'
newline|'\n'
name|'lun_id'
op|'='
name|'volume'
op|'['
string|"'provider_location'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'lun_id'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"No LUN ID for volume %s"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'lun'
op|'='
name|'self'
op|'.'
name|'_get_lun_details'
op|'('
name|'lun_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lun'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to get LUN details for LUN ID %s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'lun_id'
op|')'
newline|'\n'
dedent|''
name|'lun_num'
op|'='
name|'self'
op|'.'
name|'_ensure_initiator_mapped'
op|'('
name|'lun'
op|'.'
name|'HostId'
op|','
name|'lun'
op|'.'
name|'LunPath'
op|','
nl|'\n'
name|'initiator_name'
op|')'
newline|'\n'
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_get_host_details'
op|'('
name|'lun'
op|'.'
name|'HostId'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to get host details for host ID %s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'lun'
op|'.'
name|'HostId'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'portal'
op|'='
name|'self'
op|'.'
name|'_get_target_portal_for_host'
op|'('
name|'host'
op|'.'
name|'HostId'
op|','
nl|'\n'
name|'host'
op|'.'
name|'HostAddress'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'portal'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to get target portal for filer: %s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'host'
op|'.'
name|'HostName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iqn'
op|'='
name|'self'
op|'.'
name|'_get_iqn_for_host'
op|'('
name|'host'
op|'.'
name|'HostId'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'iqn'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to get target IQN for filer: %s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'host'
op|'.'
name|'HostName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'properties'
op|'['
string|"'target_discovered'"
op|']'
op|'='
name|'False'
newline|'\n'
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
op|'('
name|'portal'
op|'['
string|"'address'"
op|']'
op|','
name|'portal'
op|'['
string|"'port'"
op|']'
op|')'
newline|'\n'
name|'properties'
op|'['
string|"'target_portal'"
op|']'
op|'='
string|"'%s:%s'"
op|'%'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
name|'properties'
op|'['
string|"'target_iqn'"
op|']'
op|'='
name|'iqn'
newline|'\n'
name|'properties'
op|'['
string|"'target_lun'"
op|']'
op|'='
name|'lun_num'
newline|'\n'
name|'properties'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'auth'
op|'='
name|'volume'
op|'['
string|"'provider_auth'"
op|']'
newline|'\n'
name|'if'
name|'auth'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'auth_method'
op|','
name|'auth_username'
op|','
name|'auth_secret'
op|')'
op|'='
name|'auth'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'properties'
op|'['
string|"'auth_method'"
op|']'
op|'='
name|'auth_method'
newline|'\n'
name|'properties'
op|'['
string|"'auth_username'"
op|']'
op|'='
name|'auth_username'
newline|'\n'
name|'properties'
op|'['
string|"'auth_password'"
op|']'
op|'='
name|'auth_secret'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
nl|'\n'
string|"'driver_volume_type'"
op|':'
string|"'iscsi'"
op|','
nl|'\n'
string|"'data'"
op|':'
name|'properties'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|terminate_connection
dedent|''
name|'def'
name|'terminate_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unmask the LUN on the storage system so the given intiator can no\n        longer access it.\n        """'
newline|'\n'
name|'initiator_name'
op|'='
name|'connector'
op|'['
string|"'initiator'"
op|']'
newline|'\n'
name|'lun_id'
op|'='
name|'volume'
op|'['
string|"'provider_location'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'lun_id'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'No LUN ID for volume %s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
op|'('
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'lun'
op|'='
name|'self'
op|'.'
name|'_get_lun_details'
op|'('
name|'lun_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lun'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to get LUN details for LUN ID %s'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
op|'('
name|'lun_id'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_ensure_initiator_unmapped'
op|'('
name|'lun'
op|'.'
name|'HostId'
op|','
name|'lun'
op|'.'
name|'LunPath'
op|','
nl|'\n'
name|'initiator_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_volume_from_snapshot
dedent|''
name|'def'
name|'create_volume_from_snapshot'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_snapshot
dedent|''
name|'def'
name|'create_snapshot'
op|'('
name|'self'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_snapshot
dedent|''
name|'def'
name|'delete_snapshot'
op|'('
name|'self'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_for_export
dedent|''
name|'def'
name|'check_for_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

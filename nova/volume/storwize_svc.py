begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2012 IBM, Inc.'
nl|'\n'
comment|'# Copyright (c) 2012 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Authors:'
nl|'\n'
comment|'#   Ronen Kat <ronenkat@il.ibm.com>'
nl|'\n'
comment|'#   Avishay Traeger <avishay@il.ibm.com>'
nl|'\n'
nl|'\n'
string|'"""\nVolume driver for IBM Storwize V7000 and SVC storage systems.\n\nNotes:\n1. If you specify both a password and a key file, this driver will use the\n   key file only.\n2. When using a key file for authentication, it is up to the user or\n   system administrator to store the private key in a safe manner.\n3. The defaults for creating volumes are "-vtype striped -rsize 2% -autoexpand\n   -grainsize 256 -warning 0".  These can be changed in the configuration file\n   (recommended only for advanced users).\n\nLimitations:\n1. The driver was not tested with SVC or clustered configurations of Storwize\n   V7000.\n2. The driver expects CLI output in English, error messages may be in a\n   localized format.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'san'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|storwize_svc_opts
name|'storwize_svc_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'storwize_svc_volpool_name'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'volpool'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system storage pool for volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'storwize_svc_vol_vtype'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'striped'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system volume type for volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'storwize_svc_vol_rsize'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'2%'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system space-efficiency parameter for volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'storwize_svc_vol_warning'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'0'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system threshold for volume capacity warnings'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'storwize_svc_vol_autoexpand'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system autoexpand parameter for volumes '"
nl|'\n'
string|"'(True/False)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'storwize_svc_vol_grainsize'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'256'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system grain size parameter for volumes '"
nl|'\n'
string|"'(32/64/128/256)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'storwize_svc_vol_compression'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Storage system compression option for volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'storwize_svc_flashcopy_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'120'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Maximum number of seconds to wait for FlashCopy to be '"
nl|'\n'
string|"'prepared. Maximum value is 600 seconds (10 minutes).'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'storwize_svc_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StorwizeSVCDriver
name|'class'
name|'StorwizeSVCDriver'
op|'('
name|'san'
op|'.'
name|'SanISCSIDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""IBM Storwize V7000 and SVC iSCSI volume driver."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'StorwizeSVCDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iscsi_ipv4_conf'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'iscsi_ipv6_conf'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Build cleanup transaltion tables for hosts names to follow valid'
nl|'\n'
comment|'# host names for Storwizew V7000 and SVC storage systems.'
nl|'\n'
name|'invalid_ch_in_host'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'num'
name|'in'
name|'range'
op|'('
number|'0'
op|','
number|'128'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ch'
op|'='
name|'chr'
op|'('
name|'num'
op|')'
newline|'\n'
name|'if'
op|'('
op|'('
name|'not'
name|'ch'
op|'.'
name|'isalnum'
op|'('
op|')'
op|')'
name|'and'
op|'('
name|'ch'
op|'!='
string|"' '"
op|')'
name|'and'
op|'('
name|'ch'
op|'!='
string|"'.'"
op|')'
nl|'\n'
name|'and'
op|'('
name|'ch'
op|'!='
string|"'-'"
op|')'
name|'and'
op|'('
name|'ch'
op|'!='
string|"'_'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'invalid_ch_in_host'
op|'='
name|'invalid_ch_in_host'
op|'+'
name|'ch'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_string_host_name_filter'
op|'='
name|'string'
op|'.'
name|'maketrans'
op|'('
name|'invalid_ch_in_host'
op|','
nl|'\n'
string|"'-'"
op|'*'
name|'len'
op|'('
name|'invalid_ch_in_host'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_unicode_host_name_filter'
op|'='
name|'dict'
op|'('
op|'('
name|'ord'
op|'('
name|'unicode'
op|'('
name|'char'
op|')'
op|')'
op|','
string|"u'-'"
op|')'
nl|'\n'
name|'for'
name|'char'
name|'in'
name|'invalid_ch_in_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_hdr_dic
dedent|''
name|'def'
name|'_get_hdr_dic'
op|'('
name|'self'
op|','
name|'header'
op|','
name|'row'
op|','
name|'delim'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return CLI row data as a dictionary indexed by names from header.\n\n        Create a dictionary object from the data row string using the header\n        string. The strings are converted to columns using the delimiter in\n        delim.\n        """'
newline|'\n'
nl|'\n'
name|'attributes'
op|'='
name|'header'
op|'.'
name|'split'
op|'('
name|'delim'
op|')'
newline|'\n'
name|'values'
op|'='
name|'row'
op|'.'
name|'split'
op|'('
name|'delim'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'values'
op|')'
op|'=='
name|'len'
op|'('
name|'attributes'
op|')'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_get_hdr_dic: attribute headers and values do not match.\\n '"
nl|'\n'
string|"'Headers: %(header)s\\n Values: %(row)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'header'"
op|':'
name|'str'
op|'('
name|'header'
op|')'
op|','
nl|'\n'
string|"'row'"
op|':'
name|'str'
op|'('
name|'row'
op|')'
op|'}'
op|')'
newline|'\n'
name|'dic'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attribute'
op|','
name|'value'
name|'in'
name|'map'
op|'('
name|'None'
op|','
name|'attributes'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dic'
op|'['
name|'attribute'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'dic'
newline|'\n'
nl|'\n'
DECL|member|_driver_assert
dedent|''
name|'def'
name|'_driver_assert'
op|'('
name|'self'
op|','
name|'assert_condition'
op|','
name|'exception_message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Internal assertion mechanism for CLI output."""'
newline|'\n'
name|'if'
name|'not'
name|'assert_condition'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exception_message'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
name|'data'
op|'='
name|'exception_message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_for_setup_error
dedent|''
dedent|''
name|'def'
name|'check_for_setup_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that we have all configuration details from the storage."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: check_for_setup_error'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Validate that the pool exists'
nl|'\n'
name|'ssh_cmd'
op|'='
string|"'lsmdiskgrp -delim ! -nohdr'"
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'search_text'
op|'='
string|"'!%s!'"
op|'%'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_volpool_name'"
op|')'
newline|'\n'
name|'if'
name|'search_text'
name|'not'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'pool %s doesn\\'t exist'"
op|')'
nl|'\n'
op|'%'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_volpool_name'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'storage_nodes'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Get the iSCSI names of the Storwize/SVC nodes'
nl|'\n'
name|'ssh_cmd'
op|'='
string|"'svcinfo lsnode -delim !'"
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'nodes'
op|'='
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'nodes'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'header'
op|'='
name|'nodes'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'for'
name|'node_line'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'node_data'
op|'='
name|'self'
op|'.'
name|'_get_hdr_dic'
op|'('
name|'header'
op|','
name|'node_line'
op|','
string|"'!'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'check_for_setup_error: '"
nl|'\n'
string|"'failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'node'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'['
string|"'id'"
op|']'
op|'='
name|'node_data'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'node'
op|'['
string|"'name'"
op|']'
op|'='
name|'node_data'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'node'
op|'['
string|"'iscsi_name'"
op|']'
op|'='
name|'node_data'
op|'['
string|"'iscsi_name'"
op|']'
newline|'\n'
name|'node'
op|'['
string|"'status'"
op|']'
op|'='
name|'node_data'
op|'['
string|"'status'"
op|']'
newline|'\n'
name|'node'
op|'['
string|"'ipv4'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'node'
op|'['
string|"'ipv6'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'node'
op|'['
string|"'iscsi_name'"
op|']'
op|'!='
string|"''"
op|':'
newline|'\n'
indent|'                    '
name|'storage_nodes'
op|'['
name|'node'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'node'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'KeyError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Did not find expected column name in '"
nl|'\n'
string|"'svcinfo lsnode: %s'"
op|')'
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'exception_message'
op|'='
op|'('
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: Unexpected CLI output.\\n '"
nl|'\n'
string|"'Details: %(msg)s\\n'"
nl|'\n'
string|"'Command: %(cmd)s\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'msg'"
op|':'
name|'str'
op|'('
name|'e'
op|')'
op|','
nl|'\n'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
nl|'\n'
name|'data'
op|'='
name|'exception_message'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the iSCSI IP addresses of the Storwize/SVC nodes'
nl|'\n'
dedent|''
dedent|''
name|'ssh_cmd'
op|'='
string|"'lsportip -delim !'"
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'portips'
op|'='
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'portips'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'header'
op|'='
name|'portips'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'for'
name|'portip_line'
name|'in'
name|'portips'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'port_data'
op|'='
name|'self'
op|'.'
name|'_get_hdr_dic'
op|'('
name|'header'
op|','
name|'portip_line'
op|','
string|"'!'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'check_for_setup_error: '"
nl|'\n'
string|"'failed with unexpected CLI output.\\n '"
nl|'\n'
string|"'Command: %(cmd)s\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'port_node_id'
op|'='
name|'port_data'
op|'['
string|"'node_id'"
op|']'
newline|'\n'
name|'port_ipv4'
op|'='
name|'port_data'
op|'['
string|"'IP_address'"
op|']'
newline|'\n'
name|'port_ipv6'
op|'='
name|'port_data'
op|'['
string|"'IP_address_6'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Did not find expected column name in '"
nl|'\n'
string|"'lsportip: %s'"
op|')'
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'exception_message'
op|'='
op|'('
nl|'\n'
name|'_'
op|'('
string|"'check_for_setup_error: Unexpected CLI output.\\n '"
nl|'\n'
string|"'Details: %(msg)s\\n'"
nl|'\n'
string|"'Command: %(cmd)s\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'msg'"
op|':'
name|'str'
op|'('
name|'e'
op|')'
op|','
nl|'\n'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
nl|'\n'
name|'data'
op|'='
name|'exception_message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'port_node_id'
name|'in'
name|'storage_nodes'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'='
name|'storage_nodes'
op|'['
name|'port_node_id'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'port_ipv4'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'node'
op|'['
string|"'ipv4'"
op|']'
op|'.'
name|'append'
op|'('
name|'port_ipv4'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'port_ipv6'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'node'
op|'['
string|"'ipv6'"
op|']'
op|'.'
name|'append'
op|'('
name|'port_ipv6'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
nl|'\n'
name|'data'
op|'='
name|'_'
op|'('
string|"'check_for_setup_error: '"
nl|'\n'
string|"'fail to storage configuration: unknown '"
nl|'\n'
string|"'storage node %(node_id)s from CLI output.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'node_id'"
op|':'
name|'port_node_id'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'iscsi_ipv4_conf'
op|'='
op|'['
op|']'
newline|'\n'
name|'iscsi_ipv6_conf'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'node_key'
name|'in'
name|'storage_nodes'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'storage_nodes'
op|'['
name|'node_key'
op|']'
newline|'\n'
name|'if'
string|"'ipv4'"
name|'in'
name|'node'
name|'and'
name|'len'
op|'('
name|'node'
op|'['
string|"'iscsi_name'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'iscsi_ipv4_conf'
op|'.'
name|'append'
op|'('
op|'{'
string|"'iscsi_name'"
op|':'
name|'node'
op|'['
string|"'iscsi_name'"
op|']'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ipv4'"
op|']'
op|','
nl|'\n'
string|"'node_id'"
op|':'
name|'node'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'ipv6'"
name|'in'
name|'node'
name|'and'
name|'len'
op|'('
name|'node'
op|'['
string|"'iscsi_name'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'iscsi_ipv6_conf'
op|'.'
name|'append'
op|'('
op|'{'
string|"'iscsi_name'"
op|':'
name|'node'
op|'['
string|"'iscsi_name'"
op|']'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'node'
op|'['
string|"'ipv6'"
op|']'
op|','
nl|'\n'
string|"'node_id'"
op|':'
name|'node'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'len'
op|'('
name|'node'
op|'['
string|"'ipv4'"
op|']'
op|')'
op|'=='
number|'0'
op|')'
name|'and'
op|'('
name|'len'
op|'('
name|'node'
op|'['
string|"'ipv6'"
op|']'
op|')'
op|'=='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
nl|'\n'
name|'data'
op|'='
name|'_'
op|'('
string|"'check_for_setup_error: '"
nl|'\n'
string|"'fail to storage configuration: storage '"
nl|'\n'
string|"'node %s has no IP addresses configured'"
op|')'
nl|'\n'
op|'%'
name|'node'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we have at least one IPv4 address with a iSCSI name'
nl|'\n'
comment|'# TODO(ronenkat) need to expand this to support IPv6'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'iscsi_ipv4_conf'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'could not obtain IP address and iSCSI name from the storage. '"
nl|'\n'
string|"'Please verify that the storage is configured for iSCSI.\\n '"
nl|'\n'
string|"'Storage nodes: %(nodes)s\\n portips: %(portips)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'nodes'"
op|':'
name|'nodes'
op|','
string|"'portips'"
op|':'
name|'portips'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iscsi_ipv4_conf'
op|'='
name|'iscsi_ipv4_conf'
newline|'\n'
name|'self'
op|'.'
name|'iscsi_ipv6_conf'
op|'='
name|'iscsi_ipv6_conf'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: check_for_setup_error'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_num_perc
dedent|''
name|'def'
name|'_check_num_perc'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return True if value is either a number or a percentage."""'
newline|'\n'
name|'if'
name|'value'
op|'.'
name|'endswith'
op|'('
string|"'%'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'value'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'value'
op|'.'
name|'isdigit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_flags
dedent|''
name|'def'
name|'_check_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that the flags are set properly."""'
newline|'\n'
nl|'\n'
name|'required_flags'
op|'='
op|'['
string|"'san_ip'"
op|','
string|"'san_ssh_port'"
op|','
string|"'san_login'"
op|','
nl|'\n'
string|"'storwize_svc_volpool_name'"
op|']'
newline|'\n'
name|'for'
name|'flag'
name|'in'
name|'required_flags'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'getattr'
op|'('
name|'FLAGS'
op|','
name|'flag'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'%s is not set'"
op|')'
op|'%'
name|'flag'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that either password or keyfile were set'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
op|'('
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'san_password'"
op|','
name|'None'
op|')'
nl|'\n'
name|'or'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'san_private_key'"
op|','
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Password or SSH private key is required for '"
nl|'\n'
string|"'authentication: set either san_password or '"
nl|'\n'
string|"'san_private_key option'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# vtype should either be 'striped' or 'seq'"
nl|'\n'
dedent|''
name|'vtype'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_vtype'"
op|')'
newline|'\n'
name|'if'
name|'vtype'
name|'not'
name|'in'
op|'['
string|"'striped'"
op|','
string|"'seq'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Illegal value specified for storwize_svc_vol_vtype: '"
nl|'\n'
string|"'set to either \\'striped\\' or \\'seq\\''"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that rsize is a number or percentage'
nl|'\n'
dedent|''
name|'rsize'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_rsize'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_check_num_perc'
op|'('
name|'rsize'
op|')'
name|'and'
op|'('
name|'rsize'
name|'not'
name|'in'
op|'['
string|"'auto'"
op|','
string|"'-1'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Illegal value specified for storwize_svc_vol_rsize: '"
nl|'\n'
string|"'set to either a number or a percentage'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that warning is a number or percentage'
nl|'\n'
dedent|''
name|'warning'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_warning'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_check_num_perc'
op|'('
name|'warning'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Illegal value specified for storwize_svc_vol_warning: '"
nl|'\n'
string|"'set to either a number or a percentage'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that autoexpand is a boolean'
nl|'\n'
dedent|''
name|'autoexpand'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_autoexpand'"
op|')'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'autoexpand'
op|')'
op|'!='
name|'type'
op|'('
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Illegal value specified for '"
nl|'\n'
string|"'storwize_svc_vol_autoexpand: set to either '"
nl|'\n'
string|"'True or False'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that grainsize is 32/64/128/256'
nl|'\n'
dedent|''
name|'grainsize'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_grainsize'"
op|')'
newline|'\n'
name|'if'
name|'grainsize'
name|'not'
name|'in'
op|'['
string|"'32'"
op|','
string|"'64'"
op|','
string|"'128'"
op|','
string|"'256'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Illegal value specified for '"
nl|'\n'
string|"'storwize_svc_vol_grainsize: set to either '"
nl|'\n'
string|"'\\'32\\', \\'64\\', \\'128\\', or \\'256\\''"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that flashcopy_timeout is numeric and 32/64/128/256'
nl|'\n'
dedent|''
name|'flashcopy_timeout'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_flashcopy_timeout'"
op|')'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'flashcopy_timeout'
op|'.'
name|'isdigit'
op|'('
op|')'
name|'and'
name|'int'
op|'('
name|'flashcopy_timeout'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'int'
op|'('
name|'flashcopy_timeout'
op|')'
op|'<='
number|'600'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|"'Illegal value %s specified for '"
nl|'\n'
string|"'storwize_svc_flashcopy_timeout: '"
nl|'\n'
string|"'valid values are between 0 and 600'"
op|')'
nl|'\n'
op|'%'
name|'flashcopy_timeout'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that compression is a boolean'
nl|'\n'
dedent|''
name|'volume_compression'
op|'='
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_compression'"
op|')'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'volume_compression'
op|')'
op|'!='
name|'type'
op|'('
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|"'Illegal value specified for '"
nl|'\n'
string|"'storwize_svc_vol_compression: set to either '"
nl|'\n'
string|"'True or False'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|do_setup
dedent|''
dedent|''
name|'def'
name|'do_setup'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Validate the flags."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: do_setup'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_flags'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: do_setup'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new volume - uses the internal method."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_create_volume'
op|'('
name|'volume'
op|','
name|'units'
op|'='
string|"'gb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_volume
dedent|''
name|'def'
name|'_create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'units'
op|'='
string|"'gb'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new volume."""'
newline|'\n'
nl|'\n'
name|'default_size'
op|'='
string|"'1'"
comment|'# 1GB'
newline|'\n'
name|'name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'model_update'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: create_volume: volume %s '"
op|')'
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'int'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'default_size'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_autoexpand'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'autoexpand'
op|'='
string|"'-autoexpand'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'autoexpand'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# Set space-efficient options'
nl|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_rsize'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'=='
string|"'-1'"
op|':'
newline|'\n'
indent|'            '
name|'ssh_cmd_se_opt'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ssh_cmd_se_opt'
op|'='
op|'('
string|"'-rsize %(rsize)s %(autoexpand)s '"
op|'%'
nl|'\n'
op|'{'
string|"'rsize'"
op|':'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_rsize'"
op|')'
op|','
nl|'\n'
string|"'autoexpand'"
op|':'
name|'autoexpand'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_compression'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ssh_cmd_se_opt'
op|'='
name|'ssh_cmd_se_opt'
op|'+'
string|"'-compressed'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ssh_cmd_se_opt'
op|'='
name|'ssh_cmd_se_opt'
op|'+'
op|'('
string|"'-grainsize %(grain)s'"
op|'%'
nl|'\n'
op|'{'
string|"'grain'"
op|':'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_grainsize'"
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ssh_cmd'
op|'='
op|'('
string|"'mkvdisk -name %(name)s -mdiskgrp %(mdiskgrp)s '"
nl|'\n'
string|"'-iogrp 0 -vtype %(vtype)s -size %(size)s -unit '"
nl|'\n'
string|"'%(unit)s %(ssh_cmd_se_opt)s'"
nl|'\n'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'mdiskgrp'"
op|':'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_volpool_name'"
op|')'
op|','
nl|'\n'
string|"'vtype'"
op|':'
name|'getattr'
op|'('
name|'FLAGS'
op|','
string|"'storwize_svc_vol_vtype'"
op|')'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'size'
op|','
string|"'unit'"
op|':'
name|'units'
op|','
nl|'\n'
string|"'ssh_cmd_se_opt'"
op|':'
name|'ssh_cmd_se_opt'
op|'}'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create volume %(name)s - did not find '"
nl|'\n'
string|"'success message in CLI output.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that the output is as expected'
nl|'\n'
name|'match_obj'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|"'Virtual Disk, id \\[([0-9]+)\\], '"
nl|'\n'
string|"'successfully created'"
op|','
name|'out'
op|')'
newline|'\n'
comment|'# Make sure we got a "successfully created" message with vdisk id'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'match_obj'
name|'is'
name|'not'
name|'None'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create volume %(name)s - did not find '"
nl|'\n'
string|"'success message in CLI output.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: create_volume: volume %(name)s '"
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_delete_volume'
op|'('
name|'volume'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_volume
dedent|''
name|'def'
name|'_delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'force_opt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Driver entry point for destroying existing volumes."""'
newline|'\n'
nl|'\n'
name|'name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: delete_volume: volume %(name)s '"
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'force_opt'
op|':'
newline|'\n'
indent|'            '
name|'force_flag'
op|'='
string|"'-force'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'force_flag'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'volume_defined'
op|'='
name|'self'
op|'.'
name|'_is_volume_defined'
op|'('
name|'name'
op|')'
newline|'\n'
comment|'# Try to delete volume only if found on the storage'
nl|'\n'
name|'if'
name|'volume_defined'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'rmvdisk %(force)s %(name)s'"
nl|'\n'
op|'%'
op|'{'
string|"'force'"
op|':'
name|'force_flag'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
comment|'# No output should be returned from rmvdisk'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'delete volume %(name)s - non empty output from CLI.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Log that volume does not exist'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'warning: tried to delete volume %(name)s but '"
nl|'\n'
string|"'it does not exist.'"
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: delete_volume: volume %(name)s '"
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the volume exists on the storage.\n\n        The system does not "export" volumes as a Linux iSCSI target does,\n        and therefore we just check that the volume exists on the storage.\n        """'
newline|'\n'
name|'volume_defined'
op|'='
name|'self'
op|'.'
name|'_is_volume_defined'
op|'('
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'volume_defined'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'ensure_export: volume %s not found on storage'"
op|')'
nl|'\n'
op|'%'
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'model_update'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'model_update'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|check_for_export
dedent|''
name|'def'
name|'check_for_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|initialize_connection
dedent|''
name|'def'
name|'initialize_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Perform the necessary work so that an iSCSI connection can be made.\n\n        To be able to create an iSCSI connection from a given iSCSI name to a\n        volume, we must:\n        1. Translate the given iSCSI name to a host name\n        2. Create new host on the storage system if it does not yet exist\n        2. Map the volume to the host if it is not already done\n        3. Return iSCSI properties, including the IP address of the preferred\n           node for this volume and the LUN number.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: initialize_connection: volume %(vol)s with '"
nl|'\n'
string|"'connector %(conn)s'"
op|')'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'str'
op|'('
name|'volume'
op|')'
op|','
nl|'\n'
string|"'conn'"
op|':'
name|'str'
op|'('
name|'connector'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'initiator_name'
op|'='
name|'connector'
op|'['
string|"'initiator'"
op|']'
newline|'\n'
name|'volume_name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'host_name'
op|'='
name|'self'
op|'.'
name|'_get_host_from_iscsiname'
op|'('
name|'initiator_name'
op|')'
newline|'\n'
comment|'# Check if a host is defined for the iSCSI initiator name'
nl|'\n'
name|'if'
name|'host_name'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Host does not exist - add a new host to Storwize/SVC'
nl|'\n'
indent|'            '
name|'host_name'
op|'='
name|'self'
op|'.'
name|'_create_new_host'
op|'('
string|"'host%s'"
op|'%'
name|'initiator_name'
op|','
nl|'\n'
name|'initiator_name'
op|')'
newline|'\n'
comment|'# Verify that create_new_host succeeded'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'host_name'
name|'is'
name|'not'
name|'None'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_create_new_host failed to return the host name.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'lun_id'
op|'='
name|'self'
op|'.'
name|'_map_vol_to_host'
op|'('
name|'volume_name'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get preferred path'
nl|'\n'
comment|'# Only IPv4 for now because lack of OpenStack support'
nl|'\n'
comment|'# TODO(ronenkat): Add support for IPv6'
nl|'\n'
name|'volume_attributes'
op|'='
name|'self'
op|'.'
name|'_get_volume_attributes'
op|'('
name|'volume_name'
op|')'
newline|'\n'
name|'if'
op|'('
name|'volume_attributes'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
string|"'preferred_node_id'"
name|'in'
name|'volume_attributes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'preferred_node'
op|'='
name|'volume_attributes'
op|'['
string|"'preferred_node_id'"
op|']'
newline|'\n'
name|'preferred_node_entry'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'iscsi_ipv4_conf'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'node'
op|'['
string|"'node_id'"
op|']'
op|'=='
name|'preferred_node'
op|':'
newline|'\n'
indent|'                    '
name|'preferred_node_entry'
op|'='
name|'node'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'preferred_node_entry'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'preferred_node_entry'
op|'='
name|'self'
op|'.'
name|'iscsi_ipv4_conf'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'initialize_connection: did not find preferred '"
nl|'\n'
string|"'node %(node)s for volume %(vol)s in iSCSI '"
nl|'\n'
string|"'configuration'"
op|')'
op|'%'
op|'{'
string|"'node'"
op|':'
name|'preferred_node'
op|','
nl|'\n'
string|"'vol'"
op|':'
name|'volume_name'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Get 1st node'
nl|'\n'
indent|'            '
name|'preferred_node_entry'
op|'='
name|'self'
op|'.'
name|'iscsi_ipv4_conf'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'initialize_connection: did not find a preferred node '"
nl|'\n'
string|"'for volume %s in iSCSI configuration'"
op|')'
op|'%'
name|'volume_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'properties'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|"# We didn't use iSCSI discover, as in server-based iSCSI"
nl|'\n'
name|'properties'
op|'['
string|"'target_discovered'"
op|']'
op|'='
name|'False'
newline|'\n'
comment|'# We take the first IP address for now. Ideally, OpenStack will'
nl|'\n'
comment|'# support multipath for improved performance.'
nl|'\n'
name|'properties'
op|'['
string|"'target_portal'"
op|']'
op|'='
op|'('
string|"'%s:%s'"
op|'%'
nl|'\n'
op|'('
name|'preferred_node_entry'
op|'['
string|"'ip'"
op|']'
op|'['
number|'0'
op|']'
op|','
string|"'3260'"
op|')'
op|')'
newline|'\n'
name|'properties'
op|'['
string|"'target_iqn'"
op|']'
op|'='
name|'preferred_node_entry'
op|'['
string|"'iscsi_name'"
op|']'
newline|'\n'
name|'properties'
op|'['
string|"'target_lun'"
op|']'
op|'='
name|'lun_id'
newline|'\n'
name|'properties'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: initialize_connection:\\n volume: %(vol)s\\n '"
nl|'\n'
string|"'connector %(conn)s\\n properties: %(prop)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'str'
op|'('
name|'volume'
op|')'
op|','
nl|'\n'
string|"'conn'"
op|':'
name|'str'
op|'('
name|'connector'
op|')'
op|','
nl|'\n'
string|"'prop'"
op|':'
name|'str'
op|'('
name|'properties'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'driver_volume_type'"
op|':'
string|"'iscsi'"
op|','
string|"'data'"
op|':'
name|'properties'
op|','
op|'}'
newline|'\n'
nl|'\n'
DECL|member|terminate_connection
dedent|''
name|'def'
name|'terminate_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup after an iSCSI connection has been terminated.\n\n        When we clean up a terminated connection between a given iSCSI name\n        and volume, we:\n        1. Translate the given iSCSI name to a host name\n        2. Remove the volume-to-host mapping if it exists\n        3. Delete the host if it has no more mappings (hosts are created\n           automatically by this driver when mappings are created)\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: terminate_connection: volume %(vol)s with '"
nl|'\n'
string|"'connector %(conn)s'"
op|')'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'str'
op|'('
name|'volume'
op|')'
op|','
nl|'\n'
string|"'conn'"
op|':'
name|'str'
op|'('
name|'connector'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'vol_name'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'initiator_name'
op|'='
name|'connector'
op|'['
string|"'initiator'"
op|']'
newline|'\n'
name|'host_name'
op|'='
name|'self'
op|'.'
name|'_get_host_from_iscsiname'
op|'('
name|'initiator_name'
op|')'
newline|'\n'
comment|'# Verify that _get_host_from_iscsiname returned the host.'
nl|'\n'
comment|'# This should always succeed as we terminate an existing connection.'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'host_name'
name|'is'
name|'not'
name|'None'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_get_host_from_iscsiname failed to return the host name '"
nl|'\n'
string|"'for iscsi name %s'"
op|')'
op|'%'
name|'initiator_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if vdisk-host mapping exists, remove if it does'
nl|'\n'
name|'mapping_data'
op|'='
name|'self'
op|'.'
name|'_get_hostvdisk_mappings'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'vol_name'
name|'in'
name|'mapping_data'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'rmvdiskhostmap -host %s %s'"
nl|'\n'
op|'%'
op|'('
name|'host_name'
op|','
name|'vol_name'
op|')'
op|')'
newline|'\n'
comment|'# Verify CLI behaviour - no output is returned from'
nl|'\n'
comment|'# rmvdiskhostmap'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'delete mapping of volume %(vol)s to host %(host)s '"
nl|'\n'
string|"'- non empty output from CLI.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'vol_name'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'del'
name|'mapping_data'
op|'['
name|'vol_name'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'terminate_connection: no mapping of volume '"
nl|'\n'
string|"'%(vol)s to host %(host)s found'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'vol'"
op|':'
name|'vol_name'
op|','
string|"'host'"
op|':'
name|'host_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# If this host has no more mappings, delete it'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'mapping_data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_host'
op|'('
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: terminate_connection: volume %(vol)s with '"
nl|'\n'
string|"'connector %(conn)s'"
op|')'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'str'
op|'('
name|'volume'
op|')'
op|','
nl|'\n'
string|"'conn'"
op|':'
name|'str'
op|'('
name|'connector'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_flashcopy_cleanup
dedent|''
name|'def'
name|'_flashcopy_cleanup'
op|'('
name|'self'
op|','
name|'fc_map_id'
op|','
name|'source'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clean up a failed FlashCopy operation."""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'stopfcmap -force %s'"
op|'%'
name|'fc_map_id'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'rmfcmap -force %s'"
op|'%'
name|'fc_map_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'_run_flashcopy: fail to cleanup failed FlashCopy '"
nl|'\n'
string|"'mapping %(fc_map_id)% '"
nl|'\n'
string|"'from %(source)s to %(target)s.\\n'"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'fc_map_id'"
op|':'
name|'fc_map_id'
op|','
nl|'\n'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'e'
op|'.'
name|'stdout'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'e'
op|'.'
name|'stderr'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_flashcopy
dedent|''
dedent|''
name|'def'
name|'_run_flashcopy'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a FlashCopy mapping from the source to the target."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'enter: _run_flashcopy: execute FlashCopy from source '"
nl|'\n'
string|"'%(source)s to target %(target)s'"
op|')'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'fc_map_cli_cmd'
op|'='
op|'('
string|"'mkfcmap -source %s -target %s -autodelete '"
nl|'\n'
string|"'-cleanrate 0'"
op|'%'
op|'('
name|'source'
op|','
name|'target'
op|')'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'fc_map_cli_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create FC mapping from %(source)s to %(target)s - '"
nl|'\n'
string|"'did not find success message in CLI output.\\n'"
nl|'\n'
string|"' stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that the output is as expected'
nl|'\n'
name|'match_obj'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|"'FlashCopy Mapping, id \\[([0-9]+)\\], '"
nl|'\n'
string|"'successfully created'"
op|','
name|'out'
op|')'
newline|'\n'
comment|'# Make sure we got a "successfully created" message with vdisk id'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'match_obj'
name|'is'
name|'not'
name|'None'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create FC mapping from %(source)s to %(target)s - '"
nl|'\n'
string|"'did not find success message in CLI output.\\n'"
nl|'\n'
string|"' stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fc_map_id'
op|'='
name|'match_obj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'fc_map_id'
name|'is'
name|'not'
name|'None'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create FC mapping from %(source)s to %(target)s - '"
nl|'\n'
string|"'did not find mapping id in CLI output.\\n'"
nl|'\n'
string|"' stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'False'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create FC mapping from %(source)s to %(target)s - '"
nl|'\n'
string|"'did not find mapping id in CLI output.\\n'"
nl|'\n'
string|"' stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'prestartfcmap %s'"
op|'%'
name|'fc_map_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'_run_flashcopy: fail to prepare FlashCopy '"
nl|'\n'
string|"'from %(source)s to %(target)s.\\n'"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'e'
op|'.'
name|'stdout'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'e'
op|'.'
name|'stderr'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flashcopy_cleanup'
op|'('
name|'fc_map_id'
op|','
name|'source'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'mapping_ready'
op|'='
name|'False'
newline|'\n'
name|'wait_time'
op|'='
number|'5'
newline|'\n'
comment|'# Allow waiting of up to timeout (set as parameter)'
nl|'\n'
name|'max_retries'
op|'='
op|'('
name|'int'
op|'('
name|'getattr'
op|'('
name|'FLAGS'
op|','
nl|'\n'
string|"'storwize_svc_flashcopy_timeout'"
op|')'
op|')'
op|'/'
name|'wait_time'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'for'
name|'try_number'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'max_retries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mapping_attributes'
op|'='
name|'self'
op|'.'
name|'_get_flashcopy_mapping_attributes'
op|'('
nl|'\n'
name|'fc_map_id'
op|')'
newline|'\n'
name|'if'
op|'('
name|'mapping_attributes'
name|'is'
name|'None'
name|'or'
nl|'\n'
string|"'status'"
name|'not'
name|'in'
name|'mapping_attributes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'mapping_attributes'
op|'['
string|"'status'"
op|']'
op|'=='
string|"'prepared'"
op|':'
newline|'\n'
indent|'                '
name|'mapping_ready'
op|'='
name|'True'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'elif'
name|'mapping_attributes'
op|'['
string|"'status'"
op|']'
op|'!='
string|"'preparing'"
op|':'
newline|'\n'
comment|'# Unexpected mapping status'
nl|'\n'
indent|'                '
name|'exception_msg'
op|'='
op|'('
name|'_'
op|'('
string|"'unexecpted mapping status %(status)s '"
nl|'\n'
string|"'for mapping %(id)s. Attributes: '"
nl|'\n'
string|"'%(attr)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'status'"
op|':'
name|'mapping_attributes'
op|'['
string|"'status'"
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
name|'fc_map_id'
op|','
nl|'\n'
string|"'attr'"
op|':'
name|'mapping_attributes'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeBackendAPIException'
op|'('
nl|'\n'
name|'data'
op|'='
name|'exception_msg'
op|')'
newline|'\n'
comment|'# Need to wait for mapping to be prepared, wait a few seconds'
nl|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
name|'wait_time'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'mapping_ready'
op|':'
newline|'\n'
indent|'            '
name|'exception_msg'
op|'='
op|'('
name|'_'
op|'('
string|"'mapping %(id)s prepare failed to complete '"
nl|'\n'
string|"'within the alloted %(to)s seconds timeout. '"
nl|'\n'
string|"'Terminating'"
op|')'
op|'%'
op|'{'
string|"'id'"
op|':'
name|'fc_map_id'
op|','
nl|'\n'
string|"'to'"
op|':'
name|'getattr'
op|'('
nl|'\n'
name|'FLAGS'
op|','
string|"'storwize_svc_flashcopy_timeout'"
op|')'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'_run_flashcopy: fail to start FlashCopy '"
nl|'\n'
string|"'from %(source)s to %(target)s with '"
nl|'\n'
string|"'exception %(ex)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'ex'"
op|':'
name|'exception_msg'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flashcopy_cleanup'
op|'('
name|'fc_map_id'
op|','
name|'source'
op|','
name|'target'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidSnapshot'
op|'('
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|"'_run_flashcopy: %s'"
op|')'
op|'%'
name|'exception_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'startfcmap %s'"
op|'%'
name|'fc_map_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'_run_flashcopy: fail to start FlashCopy '"
nl|'\n'
string|"'from %(source)s to %(target)s.\\n'"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'e'
op|'.'
name|'stdout'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'e'
op|'.'
name|'stderr'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_flashcopy_cleanup'
op|'('
name|'fc_map_id'
op|','
name|'source'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _run_flashcopy: FlashCopy started from '"
nl|'\n'
string|"'%(source)s to %(target)s'"
op|')'
op|'%'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_volume_from_snapshot
dedent|''
name|'def'
name|'create_volume_from_snapshot'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new snapshot from volume."""'
newline|'\n'
nl|'\n'
name|'source_volume'
op|'='
name|'snapshot'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'tgt_volume'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: create_volume_from_snapshot: snapshot %(tgt)s '"
nl|'\n'
string|"'from volume %(src)s'"
op|')'
op|'%'
op|'{'
string|"'tgt'"
op|':'
name|'tgt_volume'
op|','
nl|'\n'
string|"'src'"
op|':'
name|'source_volume'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'src_volume_attributes'
op|'='
name|'self'
op|'.'
name|'_get_volume_attributes'
op|'('
name|'source_volume'
op|')'
newline|'\n'
name|'if'
name|'src_volume_attributes'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'exception_msg'
op|'='
op|'('
name|'_'
op|'('
string|"'create_volume_from_snapshot: source volume %s '"
nl|'\n'
string|"'does not exist'"
op|')'
op|'%'
name|'source_volume'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exception_msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'SnapshotNotFound'
op|'('
name|'exception_msg'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'source_volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_driver_assert'
op|'('
string|"'capacity'"
name|'in'
name|'src_volume_attributes'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create_volume_from_snapshot: cannot get source '"
nl|'\n'
string|"'volume %(src)s capacity from volume attributes '"
nl|'\n'
string|"'%(attr)s'"
op|')'
op|'%'
op|'{'
string|"'src'"
op|':'
name|'source_volume'
op|','
nl|'\n'
string|"'attr'"
op|':'
name|'src_volume_attributes'
op|'}'
op|')'
newline|'\n'
name|'src_volume_size'
op|'='
name|'src_volume_attributes'
op|'['
string|"'capacity'"
op|']'
newline|'\n'
nl|'\n'
name|'tgt_volume_attributes'
op|'='
name|'self'
op|'.'
name|'_get_volume_attributes'
op|'('
name|'tgt_volume'
op|')'
newline|'\n'
comment|'# Does the snapshot target exist?'
nl|'\n'
name|'if'
name|'tgt_volume_attributes'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'exception_msg'
op|'='
op|'('
name|'_'
op|'('
string|"'create_volume_from_snapshot: target volume %s '"
nl|'\n'
string|"'already exists, cannot create'"
op|')'
op|'%'
name|'tgt_volume'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exception_msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidSnapshot'
op|'('
name|'reason'
op|'='
name|'exception_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'snapshot_volume'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'snapshot_volume'
op|'['
string|"'name'"
op|']'
op|'='
name|'tgt_volume'
newline|'\n'
name|'snapshot_volume'
op|'['
string|"'size'"
op|']'
op|'='
name|'src_volume_size'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_create_volume'
op|'('
name|'snapshot_volume'
op|','
name|'units'
op|'='
string|"'b'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_flashcopy'
op|'('
name|'source_volume'
op|','
name|'tgt_volume'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Clean up newly-created snapshot if the FlashCopy failed'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_volume'
op|'('
name|'snapshot_volume'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'leave: create_volume_from_snapshot: %s created successfully'"
op|')'
nl|'\n'
op|'%'
name|'tgt_volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_snapshot
dedent|''
name|'def'
name|'create_snapshot'
op|'('
name|'self'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new snapshot using FlashCopy."""'
newline|'\n'
nl|'\n'
name|'src_volume'
op|'='
name|'snapshot'
op|'['
string|"'volume_name'"
op|']'
newline|'\n'
name|'tgt_volume'
op|'='
name|'snapshot'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Flag to keep track of created volumes in case FlashCopy'
nl|'\n'
name|'tgt_volume_created'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: create_snapshot: snapshot %(tgt)s from '"
nl|'\n'
string|"'volume %(src)s'"
op|')'
op|'%'
op|'{'
string|"'tgt'"
op|':'
name|'tgt_volume'
op|','
nl|'\n'
string|"'src'"
op|':'
name|'src_volume'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'src_volume_attributes'
op|'='
name|'self'
op|'.'
name|'_get_volume_attributes'
op|'('
name|'src_volume'
op|')'
newline|'\n'
name|'if'
name|'src_volume_attributes'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'exception_msg'
op|'='
op|'('
nl|'\n'
name|'_'
op|'('
string|"'create_snapshot: source volume %s does not exist'"
op|')'
nl|'\n'
op|'%'
name|'src_volume'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exception_msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeNotFound'
op|'('
name|'exception_msg'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'src_volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_driver_assert'
op|'('
string|"'capacity'"
name|'in'
name|'src_volume_attributes'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create_volume_from_snapshot: cannot get source '"
nl|'\n'
string|"'volume %(src)s capacity from volume attributes '"
nl|'\n'
string|"'%(attr)s'"
op|')'
op|'%'
op|'{'
string|"'src'"
op|':'
name|'src_volume'
op|','
nl|'\n'
string|"'attr'"
op|':'
name|'src_volume_attributes'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'source_volume_size'
op|'='
name|'src_volume_attributes'
op|'['
string|"'capacity'"
op|']'
newline|'\n'
nl|'\n'
name|'tgt_volume_attributes'
op|'='
name|'self'
op|'.'
name|'_get_volume_attributes'
op|'('
name|'tgt_volume'
op|')'
newline|'\n'
comment|'# Does the snapshot target exist?'
nl|'\n'
name|'snapshot_volume'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'tgt_volume_attributes'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# No, create a new snapshot volume'
nl|'\n'
indent|'            '
name|'snapshot_volume'
op|'['
string|"'name'"
op|']'
op|'='
name|'tgt_volume'
newline|'\n'
name|'snapshot_volume'
op|'['
string|"'size'"
op|']'
op|'='
name|'source_volume_size'
newline|'\n'
name|'self'
op|'.'
name|'_create_volume'
op|'('
name|'snapshot_volume'
op|','
name|'units'
op|'='
string|"'b'"
op|')'
newline|'\n'
name|'tgt_volume_created'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Yes, target exists, verify exact same size as source'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_assert'
op|'('
string|"'capacity'"
name|'in'
name|'tgt_volume_attributes'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create_volume_from_snapshot: cannot get source '"
nl|'\n'
string|"'volume %(src)s capacity from volume attributes '"
nl|'\n'
string|"'%(attr)s'"
op|')'
op|'%'
op|'{'
string|"'src'"
op|':'
name|'tgt_volume'
op|','
nl|'\n'
string|"'attr'"
op|':'
name|'tgt_volume_attributes'
op|'}'
op|')'
newline|'\n'
name|'target_volume_size'
op|'='
name|'tgt_volume_attributes'
op|'['
string|"'capacity'"
op|']'
newline|'\n'
name|'if'
name|'target_volume_size'
op|'!='
name|'source_volume_size'
op|':'
newline|'\n'
indent|'                '
name|'exception_msg'
op|'='
op|'('
nl|'\n'
name|'_'
op|'('
string|"'create_snapshot: source %(src)s and target '"
nl|'\n'
string|"'volume %(tgt)s have different capacities '"
nl|'\n'
string|"'(source:%(ssize)s target:%(tsize)s)'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'src'"
op|':'
name|'src_volume'
op|','
nl|'\n'
string|"'tgt'"
op|':'
name|'tgt_volume'
op|','
nl|'\n'
string|"'ssize'"
op|':'
name|'source_volume_size'
op|','
nl|'\n'
string|"'tsize'"
op|':'
name|'target_volume_size'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exception_msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidSnapshot'
op|'('
name|'reason'
op|'='
name|'exception_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_flashcopy'
op|'('
name|'src_volume'
op|','
name|'tgt_volume'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidSnapshot'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Clean up newly-created snapshot if the FlashCopy failed'
nl|'\n'
indent|'                '
name|'if'
name|'tgt_volume_created'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_delete_volume'
op|'('
name|'snapshot_volume'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: create_snapshot: %s created successfully'"
op|')'
nl|'\n'
op|'%'
name|'tgt_volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_snapshot
dedent|''
name|'def'
name|'delete_snapshot'
op|'('
name|'self'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_delete_snapshot'
op|'('
name|'snapshot'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_snapshot
dedent|''
name|'def'
name|'_delete_snapshot'
op|'('
name|'self'
op|','
name|'snapshot'
op|','
name|'force_opt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a snapshot from the storage."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: delete_snapshot: snapshot %s'"
op|')'
op|'%'
name|'snapshot'
op|')'
newline|'\n'
nl|'\n'
name|'snapshot_defined'
op|'='
name|'self'
op|'.'
name|'_is_volume_defined'
op|'('
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'snapshot_defined'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'force_opt'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_volume'
op|'('
name|'snapshot'
op|','
name|'force_opt'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'delete_volume'
op|'('
name|'snapshot'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: delete_snapshot: snapshot %s'"
op|')'
op|'%'
name|'snapshot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_from_iscsiname
dedent|''
name|'def'
name|'_get_host_from_iscsiname'
op|'('
name|'self'
op|','
name|'iscsi_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List the hosts defined in the storage.\n\n        Return the host name with the given iSCSI name, or None if there is\n        no host name with that iSCSI name.\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _get_host_from_iscsiname: iSCSI initiator %s'"
op|')'
nl|'\n'
op|'%'
name|'iscsi_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get list of host in the storage'
nl|'\n'
name|'ssh_cmd'
op|'='
string|"'lshost -delim !'"
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'err_msg'
op|'='
name|'_'
op|'('
string|"'_get_host_from_iscsiname: '"
nl|'\n'
string|"'failed with unexpected CLI output.\\n'"
nl|'\n'
string|"' command: %(cmd)s\\n stdout: %(out)s\\n '"
nl|'\n'
string|"'stderr: %(err)s'"
op|')'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
newline|'\n'
name|'host_lines'
op|'='
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'host_lines'
op|')'
op|'>'
number|'0'
op|','
name|'err_msg'
op|')'
newline|'\n'
name|'header'
op|'='
name|'host_lines'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|'.'
name|'split'
op|'('
string|"'!'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
string|"'name'"
name|'in'
name|'header'
op|','
name|'err_msg'
op|')'
newline|'\n'
name|'name_index'
op|'='
name|'header'
op|'.'
name|'index'
op|'('
string|"'name'"
op|')'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'split'
op|'('
string|"'!'"
op|')'
op|'['
name|'name_index'
op|']'
op|','
name|'host_lines'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# For each host, get its details and check for its iSCSI name'
nl|'\n'
name|'for'
name|'host'
name|'in'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'ssh_cmd'
op|'='
string|"'lshost -delim ! %s'"
op|'%'
name|'host'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_get_host_from_iscsiname: '"
nl|'\n'
string|"'Unexpected response from CLI output. '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'attrib_line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
comment|"# If '!' not found, return the string and two empty strings"
nl|'\n'
indent|'                '
name|'attrib_name'
op|','
name|'foo'
op|','
name|'attrib_value'
op|'='
name|'attrib_line'
op|'.'
name|'partition'
op|'('
string|"'!'"
op|')'
newline|'\n'
name|'if'
name|'attrib_name'
op|'=='
string|"'iscsi_name'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'iscsi_name'
op|'=='
name|'attrib_value'
op|':'
newline|'\n'
indent|'                        '
name|'hostname'
op|'='
name|'host'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'hostname'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _get_host_from_iscsiname: iSCSI initiator %s'"
op|')'
nl|'\n'
op|'%'
name|'iscsi_name'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'hostname'
newline|'\n'
nl|'\n'
DECL|member|_create_new_host
dedent|''
name|'def'
name|'_create_new_host'
op|'('
name|'self'
op|','
name|'host_name'
op|','
name|'initiator_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new host on the storage system.\n\n        We modify the given host name, replace any invalid characters and\n        adding a random suffix to avoid conflicts due to the translation. The\n        host is associated with the given iSCSI initiator name.\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _create_new_host: host %(name)s with iSCSI '"
nl|'\n'
string|"'initiator %(init)s'"
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'init'"
op|':'
name|'initiator_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'host_name'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_name'
op|'='
name|'host_name'
op|'.'
name|'translate'
op|'('
name|'self'
op|'.'
name|'_unicode_host_name_filter'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'host_name'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_name'
op|'='
name|'host_name'
op|'.'
name|'translate'
op|'('
name|'self'
op|'.'
name|'_string_host_name_filter'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'_create_new_host: cannot clean host name. Host name '"
nl|'\n'
string|"'is not unicode or string'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add 5 digit random suffix to the host name to avoid'
nl|'\n'
comment|'# conflicts in host names after removing invalid characters'
nl|'\n'
comment|'# for Storwize/SVC names'
nl|'\n'
dedent|''
name|'host_name'
op|'='
string|"'%s_%s'"
op|'%'
op|'('
name|'host_name'
op|','
name|'random'
op|'.'
name|'randint'
op|'('
number|'10000'
op|','
number|'99999'
op|')'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|'\'mkhost -name "%s" -iscsiname "%s"\''
nl|'\n'
op|'%'
op|'('
name|'host_name'
op|','
name|'initiator_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
string|"'successfully created'"
name|'in'
name|'out'
op|','
nl|'\n'
name|'_'
op|'('
string|"'create host %(name)s with iSCSI initiator %(init)s - '"
nl|'\n'
string|"'did not find success message in CLI output.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'init'"
op|':'
name|'initiator_name'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _create_new_host: host %(host)s with iSCSI '"
nl|'\n'
string|"'initiator %(init)s'"
op|')'
op|'%'
op|'{'
string|"'host'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'init'"
op|':'
name|'initiator_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'host_name'
newline|'\n'
nl|'\n'
DECL|member|_delete_host
dedent|''
name|'def'
name|'_delete_host'
op|'('
name|'self'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a host and associated iSCSI initiator name."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _delete_host: host %s '"
op|')'
op|'%'
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if host exists on system, expect to find the host'
nl|'\n'
name|'is_defined'
op|'='
name|'self'
op|'.'
name|'_is_host_defined'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'is_defined'
op|':'
newline|'\n'
comment|'# Delete host'
nl|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'rmhost %s '"
op|'%'
name|'host_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'warning: tried to delete host %(name)s but '"
nl|'\n'
string|"'it does not exist.'"
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'host_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _delete_host: host %s '"
op|')'
op|'%'
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_volume_defined
dedent|''
name|'def'
name|'_is_volume_defined'
op|'('
name|'self'
op|','
name|'volume_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if volume is defined."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _is_volume_defined: volume %s '"
op|')'
op|'%'
name|'volume_name'
op|')'
newline|'\n'
name|'volume_attributes'
op|'='
name|'self'
op|'.'
name|'_get_volume_attributes'
op|'('
name|'volume_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _is_volume_defined: volume %(vol)s with %(str)s '"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'volume_name'
op|','
nl|'\n'
string|"'str'"
op|':'
name|'volume_attributes'
name|'is'
name|'not'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'volume_attributes'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_is_host_defined
dedent|''
dedent|''
name|'def'
name|'_is_host_defined'
op|'('
name|'self'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if a host is defined on the storage."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _is_host_defined: host %s '"
op|')'
op|'%'
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get list of hosts with the name %host_name%'
nl|'\n'
comment|'# We expect zero or one line if host does not exist,'
nl|'\n'
comment|'# two lines if it does exist, otherwise error'
nl|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'lshost -filtervalue name=%s -delim !'"
nl|'\n'
op|'%'
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'lines'
op|'='
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'lines'
op|')'
op|'<='
number|'2'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_is_host_defined: Unexpected response from CLI output.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'lines'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_get_hdr_dic'
op|'('
name|'lines'
op|'['
number|'0'
op|']'
op|','
name|'lines'
op|'['
number|'1'
op|']'
op|','
string|"'!'"
op|')'
newline|'\n'
name|'host_name_from_storage'
op|'='
name|'host_info'
op|'['
string|"'name'"
op|']'
newline|'\n'
comment|'# Make sure we got the data for the right host'
nl|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'host_name_from_storage'
op|'=='
name|'host_name'
op|','
nl|'\n'
name|'_'
op|'('
string|"'Data received for host %(host1)s instead of host '"
nl|'\n'
string|"'%(host2)s.\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'host1'"
op|':'
name|'host_name_from_storage'
op|','
nl|'\n'
string|"'host2'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# 0 or 1 lines'
newline|'\n'
indent|'            '
name|'host_name_from_storage'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _is_host_defined: host %(host)s with %(str)s '"
op|')'
op|'%'
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'str'"
op|':'
name|'host_name_from_storage'
name|'is'
name|'not'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'host_name_from_storage'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_get_hostvdisk_mappings
dedent|''
dedent|''
name|'def'
name|'_get_hostvdisk_mappings'
op|'('
name|'self'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the defined storage mappings for a host."""'
newline|'\n'
nl|'\n'
name|'return_data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'ssh_cmd'
op|'='
string|"'lshostvdiskmap -delim ! %s'"
op|'%'
name|'host_name'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
nl|'\n'
name|'mappings'
op|'='
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'mappings'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'header'
op|'='
name|'mappings'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'for'
name|'mapping_line'
name|'in'
name|'mappings'
op|':'
newline|'\n'
indent|'                '
name|'mapping_data'
op|'='
name|'self'
op|'.'
name|'_get_hdr_dic'
op|'('
name|'header'
op|','
name|'mapping_line'
op|','
string|"'!'"
op|')'
newline|'\n'
name|'return_data'
op|'['
name|'mapping_data'
op|'['
string|"'vdisk_name'"
op|']'
op|']'
op|'='
name|'mapping_data'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'return_data'
newline|'\n'
nl|'\n'
DECL|member|_map_vol_to_host
dedent|''
name|'def'
name|'_map_vol_to_host'
op|'('
name|'self'
op|','
name|'volume_name'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a mapping between a volume to a host."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _map_vol_to_host: volume %(vol)s to '"
nl|'\n'
string|"'host %(host)s'"
op|')'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'volume_name'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if this volume is already mapped to this host'
nl|'\n'
name|'mapping_data'
op|'='
name|'self'
op|'.'
name|'_get_hostvdisk_mappings'
op|'('
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
name|'mapped_flag'
op|'='
name|'False'
newline|'\n'
name|'result_lun'
op|'='
string|"'-1'"
newline|'\n'
name|'if'
name|'volume_name'
name|'in'
name|'mapping_data'
op|':'
newline|'\n'
indent|'            '
name|'mapped_flag'
op|'='
name|'True'
newline|'\n'
name|'result_lun'
op|'='
name|'mapping_data'
op|'['
name|'volume_name'
op|']'
op|'['
string|"'SCSI_id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'lun_used'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'mapping_data'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lun_used'
op|'.'
name|'append'
op|'('
name|'int'
op|'('
name|'v'
op|'['
string|"'SCSI_id'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'lun_used'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
comment|'# Assume all luns are taken to this point, and then try to find'
nl|'\n'
comment|'# an unused one'
nl|'\n'
name|'result_lun'
op|'='
name|'str'
op|'('
name|'len'
op|'('
name|'lun_used'
op|')'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
name|'n'
name|'in'
name|'enumerate'
op|'('
name|'lun_used'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'n'
op|'>'
name|'index'
op|':'
newline|'\n'
indent|'                    '
name|'result_lun'
op|'='
name|'str'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
comment|'# Volume is not mapped to host, create a new LUN'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'mapped_flag'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
string|"'mkvdiskhostmap -host %s -scsi %s %s'"
nl|'\n'
op|'%'
op|'('
name|'host_name'
op|','
name|'result_lun'
op|','
name|'volume_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
string|"'successfully created'"
name|'in'
name|'out'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_map_vol_to_host: mapping host %(host)s to '"
nl|'\n'
string|"'volume %(vol)s with LUN '"
nl|'\n'
string|"'%(lun)s - did not find success message in CLI output. '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s\\n'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'host'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'vol'"
op|':'
name|'volume_name'
op|','
nl|'\n'
string|"'lun'"
op|':'
name|'result_lun'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _map_vol_to_host: LUN %(lun)s, volume %(vol)s, '"
nl|'\n'
string|"'host %(host)s'"
op|')'
op|'%'
op|'{'
string|"'lun'"
op|':'
name|'result_lun'
op|','
string|"'vol'"
op|':'
name|'volume_name'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'result_lun'
newline|'\n'
nl|'\n'
DECL|member|_get_flashcopy_mapping_attributes
dedent|''
name|'def'
name|'_get_flashcopy_mapping_attributes'
op|'('
name|'self'
op|','
name|'fc_map_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the attributes of a FlashCopy mapping.\n\n        Returns the attributes for the specified FlashCopy mapping, or\n        None if the mapping does not exist.\n        An exception is raised if the information from system can not\n        be parsed or matched to a single FlashCopy mapping (this case\n        should not happen under normal conditions).\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _get_flashcopy_mapping_attributes: mapping %s'"
op|')'
nl|'\n'
op|'%'
name|'fc_map_id'
op|')'
newline|'\n'
comment|'# Get the lunid to be used'
nl|'\n'
nl|'\n'
name|'fc_ls_map_cmd'
op|'='
op|'('
string|"'lsfcmap -filtervalue id=%s -delim !'"
op|'%'
name|'fc_map_id'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'fc_ls_map_cmd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_get_flashcopy_mapping_attributes: '"
nl|'\n'
string|"'Unexpected response from CLI output. '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'fc_ls_map_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get list of FlashCopy mappings'
nl|'\n'
comment|'# We expect zero or one line if mapping does not exist,'
nl|'\n'
comment|'# two lines if it does exist, otherwise error'
nl|'\n'
name|'lines'
op|'='
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'lines'
op|')'
op|'<='
number|'2'
op|','
nl|'\n'
name|'_'
op|'('
string|"'_get_flashcopy_mapping_attributes: '"
nl|'\n'
string|"'Unexpected response from CLI output. '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'fc_ls_map_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'lines'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'attributes'
op|'='
name|'self'
op|'.'
name|'_get_hdr_dic'
op|'('
name|'lines'
op|'['
number|'0'
op|']'
op|','
name|'lines'
op|'['
number|'1'
op|']'
op|','
string|"'!'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# 0 or 1 lines'
newline|'\n'
indent|'            '
name|'attributes'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _get_flashcopy_mapping_attributes: mapping '"
nl|'\n'
string|"'%(id)s, attributes %(attr)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'fc_map_id'
op|','
nl|'\n'
string|"'attr'"
op|':'
name|'attributes'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'attributes'
newline|'\n'
nl|'\n'
DECL|member|_get_volume_attributes
dedent|''
name|'def'
name|'_get_volume_attributes'
op|'('
name|'self'
op|','
name|'volume_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return volume attributes, or None if volume does not exist\n\n        Exception is raised if the information from system can not be\n        parsed/matched to a single volume.\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'enter: _get_volume_attributes: volume %s'"
op|')'
nl|'\n'
op|'%'
name|'volume_name'
op|')'
newline|'\n'
comment|'# Get the lunid to be used'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ssh_cmd'
op|'='
string|"'lsvdisk -bytes -delim ! %s '"
op|'%'
name|'volume_name'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'_run_ssh'
op|'('
name|'ssh_cmd'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|"# Didn't get details from the storage, return None"
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'CLI Exception output:\\n command: %(cmd)s\\n '"
nl|'\n'
string|"'stdout: %(out)s\\n stderr: %(err)s'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'e'
op|'.'
name|'stdout'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'e'
op|'.'
name|'stderr'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_driver_assert'
op|'('
name|'len'
op|'('
name|'out'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
op|'('
string|"'_get_volume_attributes: '"
nl|'\n'
string|"'Unexpected response from CLI output. '"
nl|'\n'
string|"'Command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'cmd'"
op|':'
name|'ssh_cmd'
op|','
nl|'\n'
string|"'out'"
op|':'
name|'str'
op|'('
name|'out'
op|')'
op|','
nl|'\n'
string|"'err'"
op|':'
name|'str'
op|'('
name|'err'
op|')'
op|'}'
op|')'
newline|'\n'
name|'attributes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attrib_line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
comment|"# If '!' not found, return the string and two empty strings"
nl|'\n'
indent|'            '
name|'attrib_name'
op|','
name|'foo'
op|','
name|'attrib_value'
op|'='
name|'attrib_line'
op|'.'
name|'partition'
op|'('
string|"'!'"
op|')'
newline|'\n'
name|'if'
name|'attrib_name'
name|'is'
name|'not'
name|'None'
name|'and'
name|'attrib_name'
op|'.'
name|'strip'
op|'('
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'attributes'
op|'['
name|'attrib_name'
op|']'
op|'='
name|'attrib_value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'leave: _get_volume_attributes:\\n volume %(vol)s\\n '"
nl|'\n'
string|"'attributes: %(attr)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'vol'"
op|':'
name|'volume_name'
op|','
nl|'\n'
string|"'attr'"
op|':'
name|'str'
op|'('
name|'attributes'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'attributes'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2012 NetApp, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'ctypes'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'volume_nfs'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|volume_opts
name|'volume_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_shares_config'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'File with the list of available nfs shares'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_disk_util'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'df'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use du or df for free space calculation'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'nfs_sparsed_volumes'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
op|'('
string|"'Create volumes as sparsed files which take no space.'"
nl|'\n'
string|"'If set to False volume is created as regular file.'"
nl|'\n'
string|"'In such case volume creation takes a lot of time.'"
op|')'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'volume_opts'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'volume_nfs'
op|'.'
name|'volume_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NfsDriver
name|'class'
name|'NfsDriver'
op|'('
name|'driver'
op|'.'
name|'VolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""NFS based volume driver. Creates file on NFS share for using it\n    as block device on hypervisor."""'
newline|'\n'
nl|'\n'
DECL|member|do_setup
name|'def'
name|'do_setup'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Any initialization the volume driver does while starting"""'
newline|'\n'
name|'super'
op|'('
name|'NfsDriver'
op|','
name|'self'
op|')'
op|'.'
name|'do_setup'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'FLAGS'
op|'.'
name|'nfs_shares_config'
newline|'\n'
name|'if'
name|'not'
name|'config'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"There\'s no NFS config file configured "'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'config'
name|'or'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'config'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"NFS config file doesn\'t exist"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NfsException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'mount.nfs'"
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NfsException'
op|'('
string|"'mount.nfs is not installed'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|check_for_setup_error
dedent|''
dedent|''
dedent|''
name|'def'
name|'check_for_setup_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Just to override parent behavior"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a volume"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_ensure_shares_mounted'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|'='
name|'self'
op|'.'
name|'_find_share'
op|'('
name|'volume'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'casted to %s'"
op|')'
op|'%'
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_do_create_volume'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'provider_location'"
op|':'
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes a logical volume."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Volume %s does not have provider_location specified, '"
nl|'\n'
string|"'skipping'"
op|')'
op|','
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_ensure_share_mounted'
op|'('
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'mounted_path'
op|'='
name|'self'
op|'.'
name|'local_path'
op|'('
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_path_exists'
op|'('
name|'mounted_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'='
name|'volume'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Trying to delete non-existing volume %(volume)s at '"
nl|'\n'
string|"'path %(mounted_path)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'rm'"
op|','
string|"'-f'"
op|','
name|'mounted_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_export
dedent|''
name|'def'
name|'ensure_export'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Synchronously recreates an export for a logical volume."""'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_share_mounted'
op|'('
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_export
dedent|''
name|'def'
name|'create_export'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Exports the volume. Can optionally return a Dictionary of changes\n        to the volume object to be persisted."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|remove_export
dedent|''
name|'def'
name|'remove_export'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes an export for a logical volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|check_for_export
dedent|''
name|'def'
name|'check_for_export'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure volume is exported."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|initialize_connection
dedent|''
name|'def'
name|'initialize_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow connection to connector and return connection info."""'
newline|'\n'
name|'data'
op|'='
op|'{'
string|"'export'"
op|':'
name|'volume'
op|'['
string|"'provider_location'"
op|']'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'volume'
op|'['
string|"'name'"
op|']'
op|'}'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'driver_volume_type'"
op|':'
string|"'nfs'"
op|','
nl|'\n'
string|"'data'"
op|':'
name|'data'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|terminate_connection
dedent|''
name|'def'
name|'terminate_connection'
op|'('
name|'self'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disallow connection from connector"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|local_path
dedent|''
name|'def'
name|'local_path'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get volume path (mounted locally fs path) for given volume\n        :param volume: volume reference\n        """'
newline|'\n'
name|'nfs_share'
op|'='
name|'volume'
op|'['
string|"'provider_location'"
op|']'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_get_mount_point_for_share'
op|'('
name|'nfs_share'
op|')'
op|','
nl|'\n'
name|'volume'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_sparsed_file
dedent|''
name|'def'
name|'_create_sparsed_file'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates file with 0 disk usage"""'
newline|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'truncate'"
op|','
string|"'-s'"
op|','
name|'self'
op|'.'
name|'_sizestr'
op|'('
name|'size'
op|')'
op|','
nl|'\n'
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_regular_file
dedent|''
name|'def'
name|'_create_regular_file'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates regular file of given size. Takes a lot of time for large\n        files"""'
newline|'\n'
name|'KB'
op|'='
number|'1024'
newline|'\n'
name|'MB'
op|'='
name|'KB'
op|'*'
number|'1024'
newline|'\n'
name|'GB'
op|'='
name|'MB'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'block_size_mb'
op|'='
number|'1'
newline|'\n'
name|'block_count'
op|'='
name|'size'
op|'*'
name|'GB'
op|'/'
op|'('
name|'block_size_mb'
op|'*'
name|'MB'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'dd'"
op|','
string|"'if=/dev/zero'"
op|','
string|"'of=%s'"
op|'%'
name|'path'
op|','
nl|'\n'
string|"'bs=%dM'"
op|'%'
name|'block_size_mb'
op|','
nl|'\n'
string|"'count=%d'"
op|'%'
name|'block_count'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_rw_permissions_for_all
dedent|''
name|'def'
name|'_set_rw_permissions_for_all'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets 666 permissions for the path"""'
newline|'\n'
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'chmod'"
op|','
string|"'ugo+rw'"
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_create_volume
dedent|''
name|'def'
name|'_do_create_volume'
op|'('
name|'self'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a volume on given nfs_share\n        :param volume: volume reference\n        """'
newline|'\n'
name|'volume_path'
op|'='
name|'self'
op|'.'
name|'local_path'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'volume_size'
op|'='
name|'volume'
op|'['
string|"'size'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'nfs_sparsed_volumes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_sparsed_file'
op|'('
name|'volume_path'
op|','
name|'volume_size'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_regular_file'
op|'('
name|'volume_path'
op|','
name|'volume_size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_rw_permissions_for_all'
op|'('
name|'volume_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_shares_mounted
dedent|''
name|'def'
name|'_ensure_shares_mounted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for NFS shares in the flags and tries to mount them locally"""'
newline|'\n'
name|'self'
op|'.'
name|'_mounted_shares'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'share'
name|'in'
name|'self'
op|'.'
name|'_load_shares_config'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_ensure_share_mounted'
op|'('
name|'share'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mounted_shares'
op|'.'
name|'append'
op|'('
name|'share'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
string|"'Exception during mounting %s'"
op|'%'
op|'('
name|'exc'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Available shares %s'"
op|'%'
name|'str'
op|'('
name|'self'
op|'.'
name|'_mounted_shares'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_shares_config
dedent|''
name|'def'
name|'_load_shares_config'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'share'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'share'
name|'in'
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'nfs_shares_config'
op|')'
nl|'\n'
name|'if'
name|'share'
name|'and'
name|'not'
name|'share'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_ensure_share_mounted
dedent|''
name|'def'
name|'_ensure_share_mounted'
op|'('
name|'self'
op|','
name|'nfs_share'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount NFS share\n        :param nfs_share:\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_point_for_share'
op|'('
name|'nfs_share'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mount_nfs'
op|'('
name|'nfs_share'
op|','
name|'mount_path'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_share
dedent|''
name|'def'
name|'_find_share'
op|'('
name|'self'
op|','
name|'volume_size_for'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Choose NFS share among available ones for given volume size. Current\n        implementation looks for greatest capacity\n        :param volume_size_for: int size in Gb\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_mounted_shares'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NfsNoSharesMounted'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'greatest_size'
op|'='
number|'0'
newline|'\n'
name|'greatest_share'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'nfs_share'
name|'in'
name|'self'
op|'.'
name|'_mounted_shares'
op|':'
newline|'\n'
indent|'            '
name|'capacity'
op|'='
name|'self'
op|'.'
name|'_get_available_capacity'
op|'('
name|'nfs_share'
op|')'
newline|'\n'
name|'if'
name|'capacity'
op|'>'
name|'greatest_size'
op|':'
newline|'\n'
indent|'                '
name|'greatest_share'
op|'='
name|'nfs_share'
newline|'\n'
name|'greatest_size'
op|'='
name|'capacity'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'volume_size_for'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'>'
name|'greatest_size'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NfsNoSuitableShareFound'
op|'('
nl|'\n'
name|'volume_size'
op|'='
name|'volume_size_for'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'greatest_share'
newline|'\n'
nl|'\n'
DECL|member|_get_mount_point_for_share
dedent|''
name|'def'
name|'_get_mount_point_for_share'
op|'('
name|'self'
op|','
name|'nfs_share'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :param nfs_share: example 172.18.194.100:/var/nfs\n        """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_hash_str'
op|'('
name|'nfs_share'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_available_capacity
dedent|''
name|'def'
name|'_get_available_capacity'
op|'('
name|'self'
op|','
name|'nfs_share'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calculate available space on the NFS share\n        :param nfs_share: example 172.18.194.100:/var/nfs\n        """'
newline|'\n'
name|'mount_point'
op|'='
name|'self'
op|'.'
name|'_get_mount_point_for_share'
op|'('
name|'nfs_share'
op|')'
newline|'\n'
nl|'\n'
name|'out'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'df'"
op|','
string|"'-P'"
op|','
string|"'-B'"
op|','
string|"'1'"
op|','
name|'mount_point'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'out'
op|'='
name|'out'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'available'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'nfs_disk_util'
op|'=='
string|"'df'"
op|':'
newline|'\n'
indent|'            '
name|'available'
op|'='
name|'int'
op|'('
name|'out'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'int'
op|'('
name|'out'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'out'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'du'"
op|','
string|"'-sb'"
op|','
string|"'--apparent-size'"
op|','
nl|'\n'
string|"'--exclude'"
op|','
string|"'*snapshot*'"
op|','
name|'mount_point'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'used'
op|'='
name|'int'
op|'('
name|'out'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'available'
op|'='
name|'size'
op|'-'
name|'used'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'available'
newline|'\n'
nl|'\n'
DECL|member|_mount_nfs
dedent|''
name|'def'
name|'_mount_nfs'
op|'('
name|'self'
op|','
name|'nfs_share'
op|','
name|'mount_path'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount NFS share to mount path"""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_path_exists'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'nfs'"
op|','
name|'nfs_share'
op|','
name|'mount_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'stderr'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'nfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_path_exists
dedent|''
dedent|''
dedent|''
name|'def'
name|'_path_exists'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check given path """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_execute'
op|'('
string|"'stat'"
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'No such file or directory'"
name|'in'
name|'exc'
op|'.'
name|'stderr'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_get_hash_str
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_hash_str'
op|'('
name|'self'
op|','
name|'base_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns string that represents hash of base_str (in a hex format)"""'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'ctypes'
op|'.'
name|'c_uint64'
op|'('
name|'hash'
op|'('
name|'base_str'
op|')'
op|')'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2015 Intel Corporation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
DECL|variable|ironic_group
name|'ironic_group'
op|'='
name|'cfg'
op|'.'
name|'OptGroup'
op|'('
nl|'\n'
string|"'ironic'"
op|','
nl|'\n'
DECL|variable|title
name|'title'
op|'='
string|"'Ironic Options'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|api_version
name|'api_version'
op|'='
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
nl|'\n'
string|"'api_version'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|deprecated_for_removal
name|'deprecated_for_removal'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Version of Ironic API service endpoint. '"
nl|'\n'
string|"'DEPRECATED: Setting the API version is not possible anymore.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|api_endpoint
name|'api_endpoint'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'api_endpoint'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'URL for Ironic API endpoint.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|admin_username
name|'admin_username'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'admin_username'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Ironic keystone admin name'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|admin_password
name|'admin_password'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'admin_password'"
op|','
nl|'\n'
DECL|variable|secret
name|'secret'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Ironic keystone admin password.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|admin_auth_token
name|'admin_auth_token'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'admin_auth_token'"
op|','
nl|'\n'
DECL|variable|secret
name|'secret'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|deprecated_for_removal
name|'deprecated_for_removal'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Ironic keystone auth token.'"
nl|'\n'
string|"'DEPRECATED: use admin_username, admin_password, and '"
nl|'\n'
string|"'admin_tenant_name instead'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|admin_url
name|'admin_url'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'admin_url'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Keystone public API endpoint.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|cafile
name|'cafile'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'cafile'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'PEM encoded Certificate Authority to use when verifying HTTPs '"
nl|'\n'
string|"'connections.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|client_log_level
name|'client_log_level'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'client_log_level'"
op|','
nl|'\n'
DECL|variable|deprecated_for_removal
name|'deprecated_for_removal'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Log level override for ironicclient. Set this in '"
nl|'\n'
string|'\'order to override the global "default_log_levels", \''
nl|'\n'
string|'\'"verbose", and "debug" settings. \''
nl|'\n'
string|"'DEPRECATED: use standard logging configuration.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|admin_tenant_name
name|'admin_tenant_name'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
nl|'\n'
string|"'admin_tenant_name'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Ironic keystone tenant name.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|api_max_retries
name|'api_max_retries'
op|'='
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
nl|'\n'
string|"'api_max_retries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
op|'('
string|"'How many retries when a request does conflict. '"
nl|'\n'
string|"'If <= 0, only try once, no retries.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|api_retry_interval
name|'api_retry_interval'
op|'='
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
nl|'\n'
string|"'api_retry_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'2'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How often to retry in seconds when a request '"
nl|'\n'
string|"'does conflict'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|ALL_OPTS
name|'ALL_OPTS'
op|'='
op|'['
name|'api_version'
op|','
nl|'\n'
name|'api_endpoint'
op|','
nl|'\n'
name|'admin_username'
op|','
nl|'\n'
name|'admin_password'
op|','
nl|'\n'
name|'admin_auth_token'
op|','
nl|'\n'
name|'admin_url'
op|','
nl|'\n'
name|'cafile'
op|','
nl|'\n'
name|'client_log_level'
op|','
nl|'\n'
name|'admin_tenant_name'
op|','
nl|'\n'
name|'api_max_retries'
op|','
nl|'\n'
name|'api_retry_interval'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_opts
name|'def'
name|'register_opts'
op|'('
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conf'
op|'.'
name|'register_group'
op|'('
name|'ironic_group'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'register_opts'
op|'('
name|'ALL_OPTS'
op|','
name|'group'
op|'='
name|'ironic_group'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|list_opts
dedent|''
name|'def'
name|'list_opts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
name|'ironic_group'
op|':'
name|'ALL_OPTS'
op|'}'
newline|'\n'
dedent|''
endmarker|''
end_unit

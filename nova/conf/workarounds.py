begin_unit
comment|'# Copyright 2016 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""The \'workarounds\' group is for very specific reasons.\n\nIf you\'re:\n\n - Working around an issue in a system tool (e.g. libvirt or qemu) where the\n   fix is in flight/discussed in that community.\n - The tool can be/is fixed in some distributions and rather than patch the\n   code those distributions can trivially set a config option to get the\n   "correct" behavior.\n\nThen this is a good place for your workaround.\n\n.. warning::\n\n  Please use with care! Document the BugID that your workaround is paired with.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
DECL|variable|workarounds_group
name|'workarounds_group'
op|'='
name|'cfg'
op|'.'
name|'OptGroup'
op|'('
nl|'\n'
string|"'workarounds'"
op|','
nl|'\n'
DECL|variable|title
name|'title'
op|'='
string|"'Workaround Options'"
op|','
nl|'\n'
name|'help'
op|'='
string|'"""\nA collection of workarounds used to mitigate bugs or issues found in system\ntools (e.g. Libvirt or QEMU) or Nova itself under certain conditions. These\nshould only be enabled in exceptional circumstances. All options are linked\nagainst bug IDs, where more information on the issue can be found.\n"""'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|disable_rootwrap
name|'disable_rootwrap'
op|'='
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
nl|'\n'
string|"'disable_rootwrap'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
name|'help'
op|'='
string|'"""\nUse sudo instead of rootwrap.\n\nAllow fallback to sudo for performance reasons.\n\nFor more information, refer to the bug report:\n\n  https://bugs.launchpad.net/nova/+bug/1415106\n\nPossible values:\n\n* True: Use sudo instead of rootwrap\n* False: Use rootwrap as usual\n\nServices which consume this:\n\n* ``nova-compute``\n\nInterdependencies to other options:\n\nAny options that affect \'rootwrap\' will be ignored.\n"""'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|disable_libvirt_livesnapshot
name|'disable_libvirt_livesnapshot'
op|'='
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
nl|'\n'
string|"'disable_libvirt_livesnapshot'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
name|'help'
op|'='
string|'"""\nDisable live snapshots when using the libvirt driver.\n\nLive snapshots allow the snapshot of the disk to happen without an\ninterruption to the guest, using coordination with a guest agent to\nquiesce the filesystem.\n\nWhen using libvirt 1.2.2 live snapshots fail intermittently under load\n(likely related to concurrent libvirt/qemu operations). This config\noption provides a mechanism to disable live snapshot, in favor of cold\nsnapshot, while this is resolved. Cold snapshot causes an instance\noutage while the guest is going through the snapshotting process.\n\nFor more information, refer to the bug report:\n\n  https://bugs.launchpad.net/nova/+bug/1334398\n\nPossible values:\n\n* True: Live snapshot is disabled when using libvirt\n* False: Live snapshots are always used when snapshotting (as long as\n  there is a new enough libvirt and the backend storage supports it)\n\nServices which consume this:\n\n* ``nova-compute``\n\nInterdependencies to other options:\n\n* None\n"""'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|handle_virt_lifecycle_events
name|'handle_virt_lifecycle_events'
op|'='
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
nl|'\n'
string|"'handle_virt_lifecycle_events'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
name|'help'
op|'='
string|'"""\nEnable handling of events emitted from compute drivers.\n\nMany compute drivers emit lifecycle events, which are events that occur when,\nfor example, an instance is starting or stopping. If the instance is going\nthrough task state changes due to an API operation, like resize, the events\nare ignored.\n\nThis is an advanced feature which allows the hypervisor to signal to the\ncompute service that an unexpected state change has occurred in an instance\nand that the instance can be shutdown automatically. Unfortunately, this can\nrace in some conditions, for exmaple in reboot operations or when the compute\nservice or when host is rebooted (planned or due to an outage). If such races\nare common, then it is advisable to disable this feature.\n\nCare should be taken when this feature is disabled and\n\'sync_power_state_interval\' is set to a negative value. In this case, any\ninstances that get out of sync between the hypervisor and the Nova database\nwill have to be synchronized manually.\n\nFor more information, refer to the bug report:\n\n  https://bugs.launchpad.net/bugs/1444630\n\nPossible values:\n\n* True: Enable the feature\n* False: Disable the feature\n\nServices which consume this:\n\n* ``nova-compute``\n\nInterdependencies to other options:\n\n* If ``sync_power_state_interval`` is negative and this feature is disabled,\n  then instances that get out of sync between the hypervisor and the Nova\n  database will have to be synchonized manually.\n"""'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|ALL_OPTS
name|'ALL_OPTS'
op|'='
op|'['
name|'disable_rootwrap'
op|','
nl|'\n'
name|'disable_libvirt_livesnapshot'
op|','
nl|'\n'
name|'handle_virt_lifecycle_events'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_opts
name|'def'
name|'register_opts'
op|'('
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conf'
op|'.'
name|'register_opts'
op|'('
name|'ALL_OPTS'
op|','
name|'group'
op|'='
name|'workarounds_group'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|list_opts
dedent|''
name|'def'
name|'list_opts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
name|'workarounds_group'
op|':'
name|'ALL_OPTS'
op|'}'
newline|'\n'
dedent|''
endmarker|''
end_unit

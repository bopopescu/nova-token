begin_unit
comment|'# Copyright 2011 Isaku Yamahata <yamahata@valinux co jp>'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'strutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'default_ephemeral_format'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_ROOT_DEV_NAME
name|'DEFAULT_ROOT_DEV_NAME'
op|'='
string|"'/dev/sda1'"
newline|'\n'
DECL|variable|_DEFAULT_MAPPINGS
name|'_DEFAULT_MAPPINGS'
op|'='
op|'{'
string|"'ami'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'ephemeral0'"
op|':'
string|"'sda2'"
op|','
nl|'\n'
string|"'root'"
op|':'
name|'DEFAULT_ROOT_DEV_NAME'
op|','
nl|'\n'
string|"'swap'"
op|':'
string|"'sda3'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_legacy_fields
name|'bdm_legacy_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'device_name'"
op|','
string|"'delete_on_termination'"
op|','
nl|'\n'
string|"'virtual_name'"
op|','
string|"'snapshot_id'"
op|','
nl|'\n'
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
string|"'no_device'"
op|','
nl|'\n'
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_new_fields
name|'bdm_new_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'source_type'"
op|','
string|"'destination_type'"
op|','
nl|'\n'
string|"'guest_format'"
op|','
string|"'device_type'"
op|','
string|"'disk_bus'"
op|','
string|"'boot_index'"
op|','
nl|'\n'
string|"'device_name'"
op|','
string|"'delete_on_termination'"
op|','
string|"'snapshot_id'"
op|','
nl|'\n'
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
string|"'image_id'"
op|','
string|"'no_device'"
op|','
nl|'\n'
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_db_only_fields
name|'bdm_db_only_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'id'"
op|','
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_db_inherited_fields
name|'bdm_db_inherited_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'created_at'"
op|','
string|"'updated_at'"
op|','
nl|'\n'
string|"'deleted_at'"
op|','
string|"'deleted'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_new_non_api_fields
name|'bdm_new_non_api_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'volume_id'"
op|','
string|"'snapshot_id'"
op|','
nl|'\n'
string|"'image_id'"
op|','
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_new_api_only_fields
name|'bdm_new_api_only_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|bdm_new_api_fields
name|'bdm_new_api_fields'
op|'='
op|'('
op|'('
name|'bdm_new_fields'
op|'-'
name|'bdm_new_non_api_fields'
op|')'
op|'|'
nl|'\n'
name|'bdm_new_api_only_fields'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceDict
name|'class'
name|'BlockDeviceDict'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represents a Block Device Mapping in Nova."""'
newline|'\n'
nl|'\n'
DECL|variable|_fields
name|'_fields'
op|'='
name|'bdm_new_fields'
newline|'\n'
DECL|variable|_db_only_fields
name|'_db_only_fields'
op|'='
op|'('
name|'bdm_db_only_fields'
op|'|'
nl|'\n'
name|'bdm_db_inherited_fields'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_required_fields
name|'_required_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'source_type'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'bdm_dict'
op|'='
name|'None'
op|','
name|'do_not_default'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BlockDeviceDict'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'bdm_dict'
op|'='
name|'bdm_dict'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'bdm_dict'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'do_not_default'
op|'='
name|'do_not_default'
name|'or'
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_validate'
op|'('
name|'bdm_dict'
op|')'
newline|'\n'
name|'if'
name|'bdm_dict'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bdm_dict'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'prepend_dev'
op|'('
name|'bdm_dict'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
comment|'# NOTE (ndipanov): Never default db fields'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
op|'{'
name|'field'
op|':'
name|'None'
name|'for'
name|'field'
name|'in'
name|'self'
op|'.'
name|'_fields'
op|'-'
name|'do_not_default'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'list'
op|'('
name|'bdm_dict'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate
dedent|''
name|'def'
name|'_validate'
op|'('
name|'self'
op|','
name|'bdm_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Basic data format validations."""'
newline|'\n'
name|'dict_fields'
op|'='
name|'set'
op|'('
name|'key'
name|'for'
name|'key'
op|','
name|'_'
name|'in'
name|'bdm_dict'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that there are no bogus fields'
nl|'\n'
name|'if'
name|'not'
op|'('
name|'dict_fields'
op|'<='
nl|'\n'
op|'('
name|'self'
op|'.'
name|'_fields'
op|'|'
name|'self'
op|'.'
name|'_db_only_fields'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Some fields are invalid."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm_dict'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Check that all required fields are there'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'self'
op|'.'
name|'_required_fields'
name|'and'
nl|'\n'
name|'not'
op|'('
op|'('
name|'dict_fields'
op|'&'
name|'self'
op|'.'
name|'_required_fields'
op|')'
op|'=='
nl|'\n'
name|'self'
op|'.'
name|'_required_fields'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Some required fields are missing"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'delete_on_termination'"
name|'in'
name|'bdm_dict'
op|':'
newline|'\n'
indent|'            '
name|'bdm_dict'
op|'['
string|"'delete_on_termination'"
op|']'
op|'='
name|'strutils'
op|'.'
name|'bool_from_string'
op|'('
nl|'\n'
name|'bdm_dict'
op|'['
string|"'delete_on_termination'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm_dict'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'validate_device_name'
op|'('
name|'bdm_dict'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'validate_and_default_volume_size'
op|'('
name|'bdm_dict'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'bdm_dict'
op|'.'
name|'get'
op|'('
string|"'boot_index'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'bdm_dict'
op|'['
string|"'boot_index'"
op|']'
op|'='
name|'int'
op|'('
name|'bdm_dict'
op|'['
string|"'boot_index'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Boot index is invalid."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_legacy
name|'def'
name|'from_legacy'
op|'('
name|'cls'
op|','
name|'legacy_bdm'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'copy_over_fields'
op|'='
name|'bdm_legacy_fields'
op|'&'
name|'bdm_new_fields'
newline|'\n'
name|'copy_over_fields'
op|'|='
op|'('
name|'bdm_db_only_fields'
op|'|'
nl|'\n'
name|'bdm_db_inherited_fields'
op|')'
newline|'\n'
comment|'# NOTE (ndipanov): These fields cannot be computed'
nl|'\n'
comment|'# from legacy bdm, so do not default them'
nl|'\n'
comment|'# to avoid overwriting meaningful values in the db'
nl|'\n'
name|'non_computable_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'boot_index'"
op|','
string|"'disk_bus'"
op|','
nl|'\n'
string|"'guest_format'"
op|','
string|"'device_type'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'new_bdm'
op|'='
op|'{'
name|'fld'
op|':'
name|'val'
name|'for'
name|'fld'
op|','
name|'val'
name|'in'
name|'legacy_bdm'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'fld'
name|'in'
name|'copy_over_fields'
op|'}'
newline|'\n'
nl|'\n'
name|'virt_name'
op|'='
name|'legacy_bdm'
op|'.'
name|'get'
op|'('
string|"'virtual_name'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'is_swap_or_ephemeral'
op|'('
name|'virt_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_bdm'
op|'['
string|"'source_type'"
op|']'
op|'='
string|"'blank'"
newline|'\n'
name|'new_bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'new_bdm'
op|'['
string|"'destination_type'"
op|']'
op|'='
string|"'local'"
newline|'\n'
nl|'\n'
name|'if'
name|'virt_name'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'                '
name|'new_bdm'
op|'['
string|"'guest_format'"
op|']'
op|'='
string|"'swap'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'new_bdm'
op|'['
string|"'guest_format'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'default_ephemeral_format'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'legacy_bdm'
op|'.'
name|'get'
op|'('
string|"'snapshot_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_bdm'
op|'['
string|"'source_type'"
op|']'
op|'='
string|"'snapshot'"
newline|'\n'
name|'new_bdm'
op|'['
string|"'destination_type'"
op|']'
op|'='
string|"'volume'"
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'legacy_bdm'
op|'.'
name|'get'
op|'('
string|"'volume_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_bdm'
op|'['
string|"'source_type'"
op|']'
op|'='
string|"'volume'"
newline|'\n'
name|'new_bdm'
op|'['
string|"'destination_type'"
op|']'
op|'='
string|"'volume'"
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'legacy_bdm'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
op|':'
newline|'\n'
comment|'# NOTE (ndipanov): Just keep the BDM for now,'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Unrecognized legacy format."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'cls'
op|'('
name|'new_bdm'
op|','
name|'non_computable_fields'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_api
name|'def'
name|'from_api'
op|'('
name|'cls'
op|','
name|'api_dict'
op|','
name|'image_uuid_specified'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transform the API format of data to the internally used one.\n\n        Only validate if the source_type field makes sense.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'api_dict'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'source_type'
op|'='
name|'api_dict'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
newline|'\n'
name|'device_uuid'
op|'='
name|'api_dict'
op|'.'
name|'get'
op|'('
string|"'uuid'"
op|')'
newline|'\n'
name|'destination_type'
op|'='
name|'api_dict'
op|'.'
name|'get'
op|'('
string|"'destination_type'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'source_type'
name|'not'
name|'in'
op|'('
string|"'volume'"
op|','
string|"'image'"
op|','
string|"'snapshot'"
op|','
string|"'blank'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Invalid source_type field."'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'source_type'
op|'=='
string|"'blank'"
name|'and'
name|'device_uuid'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Invalid device UUID."'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'source_type'
op|'!='
string|"'blank'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'device_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Missing device UUID."'
op|')'
op|')'
newline|'\n'
dedent|''
name|'api_dict'
op|'['
name|'source_type'
op|'+'
string|"'_id'"
op|']'
op|'='
name|'device_uuid'
newline|'\n'
dedent|''
name|'if'
name|'source_type'
op|'=='
string|"'image'"
name|'and'
name|'destination_type'
op|'=='
string|"'local'"
op|':'
newline|'\n'
indent|'                '
name|'boot_index'
op|'='
name|'api_dict'
op|'.'
name|'get'
op|'('
string|"'boot_index'"
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# if this bdm is generated from --image ,then'
nl|'\n'
comment|'# source_type = image and destination_type = local is allowed'
nl|'\n'
name|'if'
name|'not'
op|'('
name|'image_uuid_specified'
name|'and'
name|'boot_index'
op|'=='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Mapping image to local is not supported."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'api_dict'
op|'.'
name|'pop'
op|'('
string|"'uuid'"
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'('
name|'api_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|legacy
dedent|''
name|'def'
name|'legacy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copy_over_fields'
op|'='
name|'bdm_legacy_fields'
op|'-'
name|'set'
op|'('
op|'['
string|"'virtual_name'"
op|']'
op|')'
newline|'\n'
name|'copy_over_fields'
op|'|='
op|'('
name|'bdm_db_only_fields'
op|'|'
nl|'\n'
name|'bdm_db_inherited_fields'
op|')'
newline|'\n'
nl|'\n'
name|'legacy_block_device'
op|'='
op|'{'
name|'field'
op|':'
name|'self'
op|'.'
name|'get'
op|'('
name|'field'
op|')'
nl|'\n'
name|'for'
name|'field'
name|'in'
name|'copy_over_fields'
name|'if'
name|'field'
name|'in'
name|'self'
op|'}'
newline|'\n'
nl|'\n'
name|'source_type'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
newline|'\n'
name|'destination_type'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
string|"'destination_type'"
op|')'
newline|'\n'
name|'no_device'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
newline|'\n'
name|'if'
name|'source_type'
op|'=='
string|"'blank'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'['
string|"'guest_format'"
op|']'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'                '
name|'legacy_block_device'
op|'['
string|"'virtual_name'"
op|']'
op|'='
string|"'swap'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE (ndipanov): Always label as 0, it is up to'
nl|'\n'
comment|'# the calling routine to re-enumerate them'
nl|'\n'
indent|'                '
name|'legacy_block_device'
op|'['
string|"'virtual_name'"
op|']'
op|'='
string|"'ephemeral0'"
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'source_type'
name|'in'
op|'('
string|"'volume'"
op|','
string|"'snapshot'"
op|')'
name|'or'
name|'no_device'
op|':'
newline|'\n'
indent|'            '
name|'legacy_block_device'
op|'['
string|"'virtual_name'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'source_type'
op|'=='
string|"'image'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'destination_type'
op|'!='
string|"'volume'"
op|':'
newline|'\n'
comment|'# NOTE(ndipanov): Image bdms with local destination'
nl|'\n'
comment|'# have no meaning in the legacy format - raise'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMForLegacy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'legacy_block_device'
op|'['
string|"'virtual_name'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'legacy_block_device'
newline|'\n'
nl|'\n'
DECL|member|get_image_mapping
dedent|''
name|'def'
name|'get_image_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'drop_fields'
op|'='
op|'('
name|'set'
op|'('
op|'['
string|"'connection_info'"
op|','
string|"'device_name'"
op|']'
op|')'
op|'|'
nl|'\n'
name|'self'
op|'.'
name|'_db_only_fields'
op|')'
newline|'\n'
name|'mapping_dict'
op|'='
name|'dict'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'fld'
name|'in'
name|'drop_fields'
op|':'
newline|'\n'
indent|'            '
name|'mapping_dict'
op|'.'
name|'pop'
op|'('
name|'fld'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mapping_dict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_safe_for_update
dedent|''
dedent|''
name|'def'
name|'is_safe_for_update'
op|'('
name|'block_device_dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine if passed dict is a safe subset for update.\n\n    Safe subset in this case means a safe subset of both legacy\n    and new versions of data, that can be passed to an UPDATE query\n    without any transformation.\n    """'
newline|'\n'
name|'fields'
op|'='
name|'set'
op|'('
name|'block_device_dict'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'fields'
op|'<='
op|'('
name|'bdm_new_fields'
op|'|'
nl|'\n'
name|'bdm_db_inherited_fields'
op|'|'
nl|'\n'
name|'bdm_db_only_fields'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_image_bdm
dedent|''
name|'def'
name|'create_image_bdm'
op|'('
name|'image_ref'
op|','
name|'boot_index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a block device dict based on the image_ref.\n\n    This is useful in the API layer to keep the compatibility\n    with having an image_ref as a field in the instance requests\n    """'
newline|'\n'
name|'return'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'image_ref'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
name|'boot_index'
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|snapshot_from_bdm
dedent|''
name|'def'
name|'snapshot_from_bdm'
op|'('
name|'snapshot_id'
op|','
name|'template'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a basic volume snapshot BDM from a given template bdm."""'
newline|'\n'
nl|'\n'
name|'copy_from_template'
op|'='
op|'['
string|"'disk_bus'"
op|','
string|"'device_type'"
op|','
string|"'boot_index'"
op|']'
newline|'\n'
name|'snapshot_dict'
op|'='
op|'{'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'snapshot_id'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'copy_from_template'
op|':'
newline|'\n'
indent|'        '
name|'snapshot_dict'
op|'['
name|'key'
op|']'
op|'='
name|'template'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'BlockDeviceDict'
op|'('
name|'snapshot_dict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|legacy_mapping
dedent|''
name|'def'
name|'legacy_mapping'
op|'('
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Transform a list of block devices of an instance back to the\n    legacy data format.\n    """'
newline|'\n'
nl|'\n'
name|'legacy_block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'legacy_block_device'
op|'='
name|'BlockDeviceDict'
op|'('
name|'bdm'
op|')'
op|'.'
name|'legacy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidBDMForLegacy'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'legacy_block_device_mapping'
op|'.'
name|'append'
op|'('
name|'legacy_block_device'
op|')'
newline|'\n'
nl|'\n'
comment|'# Re-enumerate the ephemeral devices'
nl|'\n'
dedent|''
name|'for'
name|'i'
op|','
name|'dev'
name|'in'
name|'enumerate'
op|'('
name|'dev'
name|'for'
name|'dev'
name|'in'
name|'legacy_block_device_mapping'
nl|'\n'
name|'if'
name|'dev'
op|'['
string|"'virtual_name'"
op|']'
name|'and'
nl|'\n'
name|'is_ephemeral'
op|'('
name|'dev'
op|'['
string|"'virtual_name'"
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'['
string|"'virtual_name'"
op|']'
op|'='
name|'dev'
op|'['
string|"'virtual_name'"
op|']'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'+'
name|'str'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'legacy_block_device_mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|from_legacy_mapping
dedent|''
name|'def'
name|'from_legacy_mapping'
op|'('
name|'legacy_block_device_mapping'
op|','
name|'image_uuid'
op|'='
string|"''"
op|','
nl|'\n'
name|'root_device_name'
op|'='
name|'None'
op|','
name|'no_root'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Transform a legacy list of block devices to the new data format."""'
newline|'\n'
nl|'\n'
name|'new_bdms'
op|'='
op|'['
name|'BlockDeviceDict'
op|'.'
name|'from_legacy'
op|'('
name|'legacy_bdm'
op|')'
nl|'\n'
name|'for'
name|'legacy_bdm'
name|'in'
name|'legacy_block_device_mapping'
op|']'
newline|'\n'
comment|'# NOTE (ndipanov): We will not decide which device is root here - we assume'
nl|'\n'
comment|'# that it will be supplied later. This is useful for having the root device'
nl|'\n'
comment|'# as part of the image defined mappings that are already in the v2 format.'
nl|'\n'
name|'if'
name|'no_root'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'bdm'
name|'in'
name|'new_bdms'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'['
string|"'boot_index'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'new_bdms'
newline|'\n'
nl|'\n'
dedent|''
name|'image_bdm'
op|'='
name|'None'
newline|'\n'
name|'volume_backed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Try to assign boot_device'
nl|'\n'
name|'if'
name|'not'
name|'root_device_name'
name|'and'
name|'not'
name|'image_uuid'
op|':'
newline|'\n'
comment|'# NOTE (ndipanov): If there is no root_device, pick the first non'
nl|'\n'
comment|'#                  blank one.'
nl|'\n'
indent|'        '
name|'non_blank'
op|'='
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'new_bdms'
name|'if'
name|'bdm'
op|'['
string|"'source_type'"
op|']'
op|'!='
string|"'blank'"
op|']'
newline|'\n'
name|'if'
name|'non_blank'
op|':'
newline|'\n'
indent|'            '
name|'non_blank'
op|'['
number|'0'
op|']'
op|'['
string|"'boot_index'"
op|']'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'bdm'
name|'in'
name|'new_bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'bdm'
op|'['
string|"'source_type'"
op|']'
name|'in'
op|'('
string|"'volume'"
op|','
string|"'snapshot'"
op|','
string|"'image'"
op|')'
name|'and'
nl|'\n'
name|'root_device_name'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
op|'('
name|'strip_dev'
op|'('
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|')'
op|'=='
nl|'\n'
name|'strip_dev'
op|'('
name|'root_device_name'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
string|"'boot_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'volume_backed'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'bdm'
op|'['
string|"'no_device'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
string|"'boot_index'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
string|"'boot_index'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'volume_backed'
name|'and'
name|'image_uuid'
op|':'
newline|'\n'
indent|'            '
name|'image_bdm'
op|'='
name|'create_image_bdm'
op|'('
name|'image_uuid'
op|','
name|'boot_index'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
op|'['
name|'image_bdm'
op|']'
name|'if'
name|'image_bdm'
name|'else'
op|'['
op|']'
op|')'
op|'+'
name|'new_bdms'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|properties_root_device_name
dedent|''
name|'def'
name|'properties_root_device_name'
op|'('
name|'properties'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""get root device name from image meta data.\n    If it isn\'t specified, return None.\n    """'
newline|'\n'
name|'root_device_name'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): see image_service.s3.s3create()'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'properties'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'bdm'
op|'['
string|"'virtual'"
op|']'
op|'=='
string|"'root'"
op|':'
newline|'\n'
indent|'            '
name|'root_device_name'
op|'='
name|'bdm'
op|'['
string|"'device'"
op|']'
newline|'\n'
nl|'\n'
comment|"# NOTE(yamahata): register_image's command line can override"
nl|'\n'
comment|'#                 <machine>.manifest.xml'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'root_device_name'"
name|'in'
name|'properties'
op|':'
newline|'\n'
indent|'        '
name|'root_device_name'
op|'='
name|'properties'
op|'['
string|"'root_device_name'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'root_device_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_device_name
dedent|''
name|'def'
name|'validate_device_name'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
comment|'# NOTE (ndipanov): Do not allow empty device names'
nl|'\n'
comment|'#                  until assigning default values'
nl|'\n'
comment|'#                  is supported by nova.compute'
nl|'\n'
indent|'        '
name|'utils'
op|'.'
name|'check_string_length'
op|'('
name|'value'
op|','
string|"'Device name'"
op|','
nl|'\n'
name|'min_length'
op|'='
number|'1'
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidInput'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Device name empty or too long."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"' '"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Device name contains spaces."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_and_default_volume_size
dedent|''
dedent|''
name|'def'
name|'validate_and_default_volume_size'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_size'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'='
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|','
string|"'volume_size'"
op|','
name|'min_value'
op|'='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidInput'
op|':'
newline|'\n'
comment|'# NOTE: We can remove this validation code after removing'
nl|'\n'
comment|'# Nova v2.0 API code because v2.1 API validates this case'
nl|'\n'
comment|'# already at its REST API layer.'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|'('
nl|'\n'
name|'details'
op|'='
name|'_'
op|'('
string|'"Invalid volume_size."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_ephemeral
dedent|''
dedent|''
dedent|''
name|'_ephemeral'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^ephemeral(\\d|[1-9]\\d+)$'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_ephemeral
name|'def'
name|'is_ephemeral'
op|'('
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_ephemeral'
op|'.'
name|'match'
op|'('
name|'device_name'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ephemeral_num
dedent|''
name|'def'
name|'ephemeral_num'
op|'('
name|'ephemeral_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'is_ephemeral'
op|'('
name|'ephemeral_name'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'_ephemeral'
op|'.'
name|'sub'
op|'('
string|"'\\\\1'"
op|','
name|'ephemeral_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_swap_or_ephemeral
dedent|''
name|'def'
name|'is_swap_or_ephemeral'
op|'('
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
name|'device_name'
name|'and'
nl|'\n'
op|'('
name|'device_name'
op|'=='
string|"'swap'"
name|'or'
name|'is_ephemeral'
op|'('
name|'device_name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|new_format_is_swap
dedent|''
name|'def'
name|'new_format_is_swap'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
op|'('
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
op|'=='
string|"'blank'"
name|'and'
nl|'\n'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'destination_type'"
op|')'
op|'=='
string|"'local'"
name|'and'
nl|'\n'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'guest_format'"
op|')'
op|'=='
string|"'swap'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|new_format_is_ephemeral
dedent|''
name|'def'
name|'new_format_is_ephemeral'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
op|'('
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
op|'=='
string|"'blank'"
name|'and'
nl|'\n'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'destination_type'"
op|')'
op|'=='
string|"'local'"
name|'and'
nl|'\n'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'guest_format'"
op|')'
op|'!='
string|"'swap'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_root_bdm
dedent|''
name|'def'
name|'get_root_bdm'
op|'('
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'boot_index'"
op|','
op|'-'
number|'1'
op|')'
op|'=='
number|'0'
op|')'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_bdms_to_connect
dedent|''
dedent|''
name|'def'
name|'get_bdms_to_connect'
op|'('
name|'bdms'
op|','
name|'exclude_root_mapping'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Will return non-root mappings, when exclude_root_mapping is true.\n       Otherwise all mappings will be returned.\n    """'
newline|'\n'
name|'return'
op|'('
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'boot_index'"
op|','
op|'-'
number|'1'
op|')'
op|'!='
number|'0'
name|'or'
nl|'\n'
name|'not'
name|'exclude_root_mapping'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mappings_prepend_dev
dedent|''
name|'def'
name|'mappings_prepend_dev'
op|'('
name|'mappings'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Prepend \'/dev/\' to \'device\' entry of swap/ephemeral virtual type."""'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'mappings'
op|':'
newline|'\n'
indent|'        '
name|'virtual'
op|'='
name|'m'
op|'['
string|"'virtual'"
op|']'
newline|'\n'
name|'if'
op|'('
name|'is_swap_or_ephemeral'
op|'('
name|'virtual'
op|')'
name|'and'
nl|'\n'
op|'('
name|'not'
name|'m'
op|'['
string|"'device'"
op|']'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'['
string|"'device'"
op|']'
op|'='
string|"'/dev/'"
op|'+'
name|'m'
op|'['
string|"'device'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'mappings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_dev
dedent|''
name|'_dev'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^/dev/'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|strip_dev
name|'def'
name|'strip_dev'
op|'('
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""remove leading \'/dev/\'."""'
newline|'\n'
name|'return'
name|'_dev'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'device_name'
op|')'
name|'if'
name|'device_name'
name|'else'
name|'device_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|prepend_dev
dedent|''
name|'def'
name|'prepend_dev'
op|'('
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make sure there is a leading \'/dev/\'."""'
newline|'\n'
name|'return'
name|'device_name'
name|'and'
string|"'/dev/'"
op|'+'
name|'strip_dev'
op|'('
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_pref
dedent|''
name|'_pref'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^((x?v|s|h)d)'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|strip_prefix
name|'def'
name|'strip_prefix'
op|'('
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""remove both leading /dev/ and xvd or sd or vd or hd."""'
newline|'\n'
name|'device_name'
op|'='
name|'strip_dev'
op|'('
name|'device_name'
op|')'
newline|'\n'
name|'return'
name|'_pref'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_nums
dedent|''
name|'_nums'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\d+'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_device_letter
name|'def'
name|'get_device_letter'
op|'('
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'letter'
op|'='
name|'strip_prefix'
op|'('
name|'device_name'
op|')'
newline|'\n'
comment|'# NOTE(vish): delete numbers in case we have something like'
nl|'\n'
comment|'#             /dev/sda1'
nl|'\n'
name|'return'
name|'_nums'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'letter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_block_mapping
dedent|''
name|'def'
name|'instance_block_mapping'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'root_device_name'
op|'='
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
newline|'\n'
comment|'# NOTE(clayg): remove this when xenapi is setting default_root_device'
nl|'\n'
name|'if'
name|'root_device_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'driver'
op|'.'
name|'compute_driver_matches'
op|'('
string|"'xenapi.XenAPIDriver'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'root_device_name'
op|'='
string|"'/dev/xvda'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_DEFAULT_MAPPINGS'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'mappings'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'mappings'
op|'['
string|"'ami'"
op|']'
op|'='
name|'strip_dev'
op|'('
name|'root_device_name'
op|')'
newline|'\n'
name|'mappings'
op|'['
string|"'root'"
op|']'
op|'='
name|'root_device_name'
newline|'\n'
name|'default_ephemeral_device'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'default_ephemeral_device'"
op|')'
newline|'\n'
name|'if'
name|'default_ephemeral_device'
op|':'
newline|'\n'
indent|'        '
name|'mappings'
op|'['
string|"'ephemeral0'"
op|']'
op|'='
name|'default_ephemeral_device'
newline|'\n'
dedent|''
name|'default_swap_device'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'default_swap_device'"
op|')'
newline|'\n'
name|'if'
name|'default_swap_device'
op|':'
newline|'\n'
indent|'        '
name|'mappings'
op|'['
string|"'swap'"
op|']'
op|'='
name|'default_swap_device'
newline|'\n'
dedent|''
name|'ebs_devices'
op|'='
op|'['
op|']'
newline|'\n'
name|'blanks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|"# 'ephemeralN', 'swap' and ebs"
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
comment|'# ebs volume case'
nl|'\n'
indent|'        '
name|'if'
name|'bdm'
op|'.'
name|'destination_type'
op|'=='
string|"'volume'"
op|':'
newline|'\n'
indent|'            '
name|'ebs_devices'
op|'.'
name|'append'
op|'('
name|'bdm'
op|'.'
name|'device_name'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm'
op|'.'
name|'source_type'
op|'=='
string|"'blank'"
op|':'
newline|'\n'
indent|'            '
name|'blanks'
op|'.'
name|'append'
op|'('
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(yamahata): I'm not sure how ebs device should be numbered."
nl|'\n'
comment|'#                 Right now sort by device name for deterministic'
nl|'\n'
comment|'#                 result.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ebs_devices'
op|':'
newline|'\n'
indent|'        '
name|'ebs_devices'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'nebs'
op|','
name|'ebs'
name|'in'
name|'enumerate'
op|'('
name|'ebs_devices'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mappings'
op|'['
string|"'ebs%d'"
op|'%'
name|'nebs'
op|']'
op|'='
name|'ebs'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'swap'
op|'='
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'blanks'
name|'if'
name|'bdm'
op|'.'
name|'guest_format'
op|'=='
string|"'swap'"
op|']'
newline|'\n'
name|'if'
name|'swap'
op|':'
newline|'\n'
indent|'        '
name|'mappings'
op|'['
string|"'swap'"
op|']'
op|'='
name|'swap'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'device_name'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemerals'
op|'='
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'blanks'
name|'if'
name|'bdm'
op|'.'
name|'guest_format'
op|'!='
string|"'swap'"
op|']'
newline|'\n'
name|'if'
name|'ephemerals'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'num'
op|','
name|'eph'
name|'in'
name|'enumerate'
op|'('
name|'ephemerals'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mappings'
op|'['
string|"'ephemeral%d'"
op|'%'
name|'num'
op|']'
op|'='
name|'eph'
op|'.'
name|'device_name'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'mappings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|match_device
dedent|''
name|'def'
name|'match_device'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Matches device name and returns prefix, suffix."""'
newline|'\n'
name|'match'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
string|'"(^/dev/x{0,1}[a-z]{0,1}d{0,1})([a-z]+)[0-9]*$"'
op|','
name|'device'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'match'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_in_mapping
dedent|''
name|'def'
name|'volume_in_mapping'
op|'('
name|'mount_device'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'block_device_list'
op|'='
op|'['
name|'strip_dev'
op|'('
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'vol'
name|'in'
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'swap'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_swap'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'driver'
op|'.'
name|'swap_is_usable'
op|'('
name|'swap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_list'
op|'.'
name|'append'
op|'('
name|'strip_dev'
op|'('
name|'swap'
op|'['
string|"'device_name'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_list'
op|'+='
op|'['
name|'strip_dev'
op|'('
name|'ephemeral'
op|'['
string|"'device_name'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'ephemeral'
name|'in'
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"block_device_list %s"'
op|','
name|'block_device_list'
op|')'
newline|'\n'
name|'return'
name|'strip_dev'
op|'('
name|'mount_device'
op|')'
name|'in'
name|'block_device_list'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_bdm_ephemeral_disk_size
dedent|''
name|'def'
name|'get_bdm_ephemeral_disk_size'
op|'('
name|'block_device_mappings'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'sum'
op|'('
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_size'"
op|','
number|'0'
op|')'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mappings'
nl|'\n'
name|'if'
name|'new_format_is_ephemeral'
op|'('
name|'bdm'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_bdm_swap_list
dedent|''
name|'def'
name|'get_bdm_swap_list'
op|'('
name|'block_device_mappings'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mappings'
nl|'\n'
name|'if'
name|'new_format_is_swap'
op|'('
name|'bdm'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_bdm_local_disk_num
dedent|''
name|'def'
name|'get_bdm_local_disk_num'
op|'('
name|'block_device_mappings'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'len'
op|'('
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mappings'
nl|'\n'
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'destination_type'"
op|')'
op|'=='
string|"'local'"
op|']'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

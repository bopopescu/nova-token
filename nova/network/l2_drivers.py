begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (C) 2011 Midokura KK'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Drivers responsible for managing L2 connectivity for Nova."""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
nl|'\n'
DECL|class|L2Driver
name|'class'
name|'L2Driver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class that defines interfaces for L2 drivers."""'
newline|'\n'
nl|'\n'
DECL|member|ensure_bridge
name|'def'
name|'ensure_bridge'
op|'('
name|'self'
op|','
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a bridge unless it already exists."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_vlan
dedent|''
name|'def'
name|'ensure_vlan'
op|'('
name|'self'
op|','
name|'vlan_num'
op|','
name|'bridge_interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a vlan unless it already exists."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LinuxBridgeDriver
dedent|''
dedent|''
name|'class'
name|'LinuxBridgeDriver'
op|'('
name|'L2Driver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""L2 driver based on Linux Bridge."""'
newline|'\n'
nl|'\n'
DECL|member|ensure_bridge
name|'def'
name|'ensure_bridge'
op|'('
name|'self'
op|','
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a Linux bridge unless it already eixsts."""'
newline|'\n'
name|'linux_net'
op|'.'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_vlan
dedent|''
name|'def'
name|'ensure_vlan'
op|'('
name|'self'
op|','
name|'vlan_num'
op|','
name|'bridge_interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a vlan unless it already exists."""'
newline|'\n'
name|'return'
name|'linux_net'
op|'.'
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|','
name|'bridge_interface'
op|','
name|'net_attrs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumDriver
dedent|''
dedent|''
name|'class'
name|'QuantumDriver'
op|'('
name|'L2Driver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""L2 driver based on Quantum network service."""'
newline|'\n'
nl|'\n'
DECL|member|ensure_bridge
name|'def'
name|'ensure_bridge'
op|'('
name|'self'
op|','
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do nothing."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|ensure_vlan
dedent|''
name|'def'
name|'ensure_vlan'
op|'('
name|'self'
op|','
name|'vlan_num'
op|','
name|'bridge_interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return None."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nImplements vlans, bridges, and iptables rules using linux utilities.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'semaphore'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.linux_net"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_bin_file
name|'def'
name|'_bin_file'
op|'('
name|'script'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the absolute path to scipt in the bin directory"""'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'__file__'
op|','
string|'"../../../bin"'
op|','
name|'script'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
dedent|''
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dhcpbridge_flagfile'"
op|','
nl|'\n'
string|"'/etc/nova/nova-dhcpbridge.conf'"
op|','
nl|'\n'
string|"'location of flagfile for dhcpbridge'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dhcp_domain'"
op|','
nl|'\n'
string|"'novalocal'"
op|','
nl|'\n'
string|"'domain to use for building the hostnames'"
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'networks_path'"
op|','
string|"'$state_path/networks'"
op|','
nl|'\n'
string|"'Location to keep network config files'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_interface'"
op|','
string|"'eth0'"
op|','
nl|'\n'
string|"'Interface for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'vlan_interface'"
op|','
string|"'eth0'"
op|','
nl|'\n'
string|"'network device for vlans'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dhcpbridge'"
op|','
name|'_bin_file'
op|'('
string|"'nova-dhcpbridge'"
op|')'
op|','
nl|'\n'
string|"'location of nova-dhcpbridge'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'routing_source_ip'"
op|','
string|"'$my_ip'"
op|','
nl|'\n'
string|"'Public IP of network host'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_nova_chains'"
op|','
name|'False'
op|','
nl|'\n'
string|"'use the nova_ routing chains instead of default'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'input_chain'"
op|','
string|"'INPUT'"
op|','
nl|'\n'
string|"'chain to add nova_input to'"
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dns_server'"
op|','
name|'None'
op|','
nl|'\n'
string|"'if set, uses specific dns server for dnsmasq'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dmz_cidr'"
op|','
string|"'10.128.0.0/24'"
op|','
nl|'\n'
string|"'dmz range that should be accepted'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|binary_name
name|'binary_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'inspect'
op|'.'
name|'stack'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesRule
name|'class'
name|'IptablesRule'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chain'
op|'='
name|'chain'
newline|'\n'
name|'self'
op|'.'
name|'rule'
op|'='
name|'rule'
newline|'\n'
name|'self'
op|'.'
name|'wrap'
op|'='
name|'wrap'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'self'
op|'.'
name|'chain'
op|'=='
name|'other'
op|'.'
name|'chain'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'rule'
op|'=='
name|'other'
op|'.'
name|'rule'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'wrap'
op|'=='
name|'other'
op|'.'
name|'wrap'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'self'
op|'.'
name|'chain'
op|'!='
name|'other'
op|'.'
name|'chain'
op|')'
name|'or'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'rule'
op|'!='
name|'other'
op|'.'
name|'rule'
op|')'
name|'or'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'wrap'
op|'!='
name|'other'
op|'.'
name|'wrap'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'chain'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'self'
op|'.'
name|'chain'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chain'
op|'='
name|'self'
op|'.'
name|'chain'
newline|'\n'
dedent|''
name|'return'
string|"'-A %s %s'"
op|'%'
op|'('
name|'chain'
op|','
name|'self'
op|'.'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesTable
dedent|''
dedent|''
name|'class'
name|'IptablesTable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'chains'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_chain
dedent|''
name|'def'
name|'add_chain'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chains'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_chain
dedent|''
name|'def'
name|'remove_chain'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chains'
op|'.'
name|'remove'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'r'
op|'.'
name|'chain'
op|'!='
name|'name'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'jump_snippet'
op|'='
string|"'-j %s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'jump_snippet'
name|'not'
name|'in'
name|'r'
op|'.'
name|'rule'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_rule
dedent|''
name|'def'
name|'add_rule'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'wrap'
name|'and'
name|'chain'
name|'not'
name|'in'
name|'self'
op|'.'
name|'chains'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"Unknown chain: %r"'
op|')'
op|'%'
name|'chain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'$'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'            '
name|'rule'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'self'
op|'.'
name|'_wrap_target_chain'
op|','
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'rules'
op|'.'
name|'append'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wrap_target_chain
dedent|''
name|'def'
name|'_wrap_target_chain'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"'$'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'s'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|remove_rule
dedent|''
name|'def'
name|'remove_rule'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rules'
op|'.'
name|'remove'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IptablesManager
dedent|''
dedent|''
name|'class'
name|'IptablesManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'execute'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'execute'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'execute'
op|'='
name|'lambda'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
op|'('
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'execute'
op|'='
name|'utils'
op|'.'
name|'execute'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'execute'
op|'='
name|'execute'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'ipv4'
op|'='
op|'{'
string|"'filter'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|','
nl|'\n'
string|"'nat'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'ipv6'
op|'='
op|'{'
string|"'filter'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'SNATTING'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-j %s-SNATTING'"
op|'%'
op|'('
name|'binary_name'
op|','
op|')'
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'local'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'-j %s-local'"
op|'%'
op|'('
name|'binary_name'
op|','
op|')'
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'OUTPUT'"
op|','
nl|'\n'
string|"'-j %s-local'"
op|'%'
op|'('
name|'binary_name'
op|','
op|')'
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wrap the builtin chains'
nl|'\n'
name|'builtin_chains'
op|'='
op|'{'
string|"'filter'"
op|':'
op|'['
string|"'INPUT'"
op|','
string|"'OUTPUT'"
op|','
string|"'FORWARD'"
op|']'
op|','
nl|'\n'
string|"'nat'"
op|':'
op|'['
string|"'PREROUTING'"
op|','
string|"'OUTPUT'"
op|','
string|"'POSTROUTING'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'table'
op|','
name|'chains'
name|'in'
name|'builtin_chains'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'chain'
name|'in'
name|'chains'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'ipv4'
op|'['
name|'table'
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
name|'table'
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain'
op|','
nl|'\n'
string|"'-j %s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'chain'
op|')'
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'semaphore'
op|'='
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|apply
dedent|''
name|'def'
name|'apply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'semaphore'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
op|'['
op|'('
string|"'iptables'"
op|','
name|'self'
op|'.'
name|'ipv4'
op|')'
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'+='
op|'['
op|'('
string|"'ip6tables'"
op|','
name|'self'
op|'.'
name|'ipv6'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cmd'
op|','
name|'tables'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'table'
name|'in'
name|'tables'
op|':'
newline|'\n'
indent|'                    '
name|'current_table'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
string|"'sudo %s-save -t %s'"
op|'%'
nl|'\n'
op|'('
name|'cmd'
op|','
name|'table'
op|')'
op|','
name|'attempts'
op|'='
number|'5'
op|')'
newline|'\n'
name|'current_lines'
op|'='
name|'current_table'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'new_filter'
op|'='
name|'self'
op|'.'
name|'modify_rules'
op|'('
name|'current_lines'
op|','
name|'tables'
op|'['
name|'table'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute'
op|'('
string|"'sudo %s-restore'"
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'new_filter'
op|')'
op|','
nl|'\n'
name|'attempts'
op|'='
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify_rules
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'modify_rules'
op|'('
name|'self'
op|','
name|'current_lines'
op|','
name|'table'
op|','
name|'binary'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'chains'
op|'='
name|'table'
op|'.'
name|'chains'
newline|'\n'
name|'rules'
op|'='
name|'table'
op|'.'
name|'rules'
newline|'\n'
nl|'\n'
comment|'# Remove any trace of our rules'
nl|'\n'
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'l'
op|':'
name|'binary_name'
name|'not'
name|'in'
name|'l'
op|','
name|'current_lines'
op|')'
newline|'\n'
nl|'\n'
name|'seen_chains'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'rules_index'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'new_filter'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'seen_chains'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'new_filter'
op|'['
name|'rules_index'
op|']'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'seen_chains'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'seen_chains'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'new_filter'
op|'['
name|'rules_index'
op|']'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
op|'['
name|'str'
op|'('
name|'rule'
op|')'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|']'
newline|'\n'
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
op|'['
string|"':%s-%s - [0:0]'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'name'
op|','
op|')'
name|'for'
name|'name'
name|'in'
name|'chains'
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'new_filter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|iptables_manager
dedent|''
dedent|''
name|'iptables_manager'
op|'='
name|'IptablesManager'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_forward
name|'def'
name|'metadata_forward'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create forwarding rule for metadata"""'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"PREROUTING"'
op|','
nl|'\n'
string|'"-s 0.0.0.0/0 -d 169.254.169.254/32 "'
nl|'\n'
string|'"-p tcp -m tcp --dport 80 -j DNAT "'
nl|'\n'
string|'"--to-destination %s:%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'ec2_dmz_host'
op|','
name|'FLAGS'
op|'.'
name|'ec2_port'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic networking setup goes here"""'
newline|'\n'
nl|'\n'
comment|'# NOTE(devcamcar): Cloud public SNAT entries and the default'
nl|'\n'
comment|'# SNAT rule for outbound traffic.'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"SNATTING"'
op|','
nl|'\n'
string|'"-s %s -j SNAT --to-source %s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'fixed_range'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'routing_source_ip'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"POSTROUTING"'
op|','
nl|'\n'
string|'"-s %s -j SNAT --to-source %s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'fixed_range'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'routing_source_ip'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"POSTROUTING"'
op|','
nl|'\n'
string|'"-s %s -d %s -j ACCEPT"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'fixed_range'
op|','
name|'FLAGS'
op|'.'
name|'dmz_cidr'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"POSTROUTING"'
op|','
nl|'\n'
string|'"-s %(range)s -d %(range)s "'
nl|'\n'
string|'"-j ACCEPT"'
op|'%'
op|'{'
string|"'range'"
op|':'
name|'FLAGS'
op|'.'
name|'fixed_range'
op|'}'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bind_floating_ip
dedent|''
name|'def'
name|'bind_floating_ip'
op|'('
name|'floating_ip'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bind ip to public interface"""'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo ip addr add %s dev %s"'
op|'%'
op|'('
name|'floating_ip'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unbind_floating_ip
dedent|''
name|'def'
name|'unbind_floating_ip'
op|'('
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unbind a public ip from public interface"""'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo ip addr del %s dev %s"'
op|'%'
op|'('
name|'floating_ip'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_vlan_forward
dedent|''
name|'def'
name|'ensure_vlan_forward'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up forwarding rules for vlan"""'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"FORWARD"'
op|','
nl|'\n'
string|'"-d %s -p udp "'
nl|'\n'
string|'"--dport 1194 "'
nl|'\n'
string|'"-j ACCEPT"'
op|'%'
name|'private_ip'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"PREROUTING"'
op|','
nl|'\n'
string|'"-d %s -p udp "'
nl|'\n'
string|'"--dport %s -j DNAT --to %s:1194"'
op|'%'
nl|'\n'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_floating_forward
dedent|''
name|'def'
name|'ensure_floating_forward'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure floating ip forwarding rule"""'
newline|'\n'
name|'for'
name|'chain'
op|','
name|'rule'
name|'in'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|remove_floating_forward
dedent|''
name|'def'
name|'remove_floating_forward'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove forwarding for floating ip"""'
newline|'\n'
name|'for'
name|'chain'
op|','
name|'rule'
name|'in'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'remove_rule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|floating_forward_rules
dedent|''
name|'def'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
op|'('
string|'"PREROUTING"'
op|','
string|'"-d %s -j DNAT --to %s"'
op|'%'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"OUTPUT"'
op|','
string|'"-d %s -j DNAT --to %s"'
op|'%'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'"SNATTING"'
op|','
string|'"-d %s -j SNAT --to %s"'
op|'%'
op|'('
name|'fixed_ip'
op|','
name|'floating_ip'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|function|ensure_vlan_bridge
dedent|''
name|'def'
name|'ensure_vlan_bridge'
op|'('
name|'vlan_num'
op|','
name|'bridge'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a vlan and bridge unless they already exist"""'
newline|'\n'
name|'interface'
op|'='
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|')'
newline|'\n'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_vlan
dedent|''
name|'def'
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a vlan unless it already exists"""'
newline|'\n'
name|'interface'
op|'='
string|'"vlan%s"'
op|'%'
name|'vlan_num'
newline|'\n'
name|'if'
name|'not'
name|'_device_exists'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting VLAN inteface %s"'
op|')'
op|','
name|'interface'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo vconfig set_name_type VLAN_PLUS_VID_NO_PAD"'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo vconfig add %s %s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'vlan_interface'
op|','
name|'vlan_num'
op|')'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo ip link set %s up"'
op|'%'
name|'interface'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'interface'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_bridge
dedent|''
name|'def'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a bridge unless it already exists.\n\n    :param interface: the interface to create the bridge on.\n    :param net_attrs: dictionary with  attributes used to create the bridge.\n\n    If net_attrs is set, it will add the net_attrs[\'gateway\'] to the bridge\n    using net_attrs[\'broadcast\'] and net_attrs[\'cidr\'].  It will also add\n    the ip_v6 address specified in net_attrs[\'cidr_v6\'] if use_ipv6 is set.\n\n    The code will attempt to move any ips that already exist on the interface\n    onto the bridge and reset the default gateway if necessary.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'_device_exists'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting Bridge interface for %s"'
op|')'
op|','
name|'interface'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo brctl addbr %s"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo brctl setfd %s 0"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
comment|'# _execute("sudo brctl setageing %s 10" % bridge)'
nl|'\n'
name|'_execute'
op|'('
string|'"sudo brctl stp %s off"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo ip link set %s up"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'net_attrs'
op|':'
newline|'\n'
comment|'# NOTE(vish): The ip for dnsmasq has to be the first address on the'
nl|'\n'
comment|'#             bridge for it to respond to reqests properly'
nl|'\n'
indent|'        '
name|'suffix'
op|'='
name|'net_attrs'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|"'/'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|'"sudo ip addr add %s/%s brd %s dev %s"'
op|'%'
nl|'\n'
op|'('
name|'net_attrs'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'suffix'
op|','
nl|'\n'
name|'net_attrs'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
name|'bridge'
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'err'
name|'and'
name|'err'
op|'!='
string|'"RTNETLINK answers: File exists\\n"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Failed to add ip: %s"'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|'"sudo ip -f inet6 addr change %s dev %s"'
op|'%'
nl|'\n'
op|'('
name|'net_attrs'
op|'['
string|"'cidr_v6'"
op|']'
op|','
name|'bridge'
op|')'
op|')'
newline|'\n'
comment|'# NOTE(vish): If the public interface is the same as the'
nl|'\n'
comment|'#             bridge, then the bridge has to be in promiscuous'
nl|'\n'
comment|'#             to forward packets properly.'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'public_interface'
op|'=='
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|'"sudo ip link set dev %s promisc on"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'interface'
op|':'
newline|'\n'
comment|'# NOTE(vish): This will break if there is already an ip on the'
nl|'\n'
comment|'#             interface, so we move any ips to the bridge'
nl|'\n'
indent|'        '
name|'gateway'
op|'='
name|'None'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|'"sudo route -n"'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
name|'fields'
op|'['
number|'0'
op|']'
op|'=='
string|'"0.0.0.0"'
name|'and'
name|'fields'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
name|'interface'
op|':'
newline|'\n'
indent|'                '
name|'gateway'
op|'='
name|'fields'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|'"sudo ip addr show dev %s scope global"'
op|'%'
nl|'\n'
name|'interface'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
name|'fields'
op|'['
number|'0'
op|']'
op|'=='
string|'"inet"'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'fields'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo ip addr del %s dev %s"'
op|'%'
op|'('
name|'params'
op|','
name|'fields'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|'"sudo ip addr add %s dev %s"'
op|'%'
op|'('
name|'params'
op|','
name|'bridge'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'gateway'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|'"sudo route add 0.0.0.0 gw %s"'
op|'%'
name|'gateway'
op|')'
newline|'\n'
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|'"sudo brctl addif %s %s"'
op|'%'
nl|'\n'
op|'('
name|'bridge'
op|','
name|'interface'
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'err'
name|'and'
name|'err'
op|'!='
string|'"device %s is already a member of a bridge; can\'t "'
nl|'\n'
string|'"enslave it to bridge %s.\\n"'
op|'%'
op|'('
name|'interface'
op|','
name|'bridge'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Failed to add interface: %s"'
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"FORWARD"'
op|','
nl|'\n'
string|'"--in-interface %s -j ACCEPT"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"FORWARD"'
op|','
nl|'\n'
string|'"--out-interface %s -j ACCEPT"'
op|'%'
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dhcp_hosts
dedent|''
name|'def'
name|'get_dhcp_hosts'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a string containing a network\'s hosts config in dnsmasq format"""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fixed_ip_ref'
name|'in'
name|'db'
op|'.'
name|'network_get_associated_fixed_ips'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_dhcp'
op|'('
name|'fixed_ip_ref'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(ja): Sending a HUP only reloads the hostfile, so any'
nl|'\n'
comment|'#           configuration options (like dchp-range, vlan, ...)'
nl|'\n'
comment|"#           aren't reloaded."
nl|'\n'
DECL|function|update_dhcp
dedent|''
name|'def'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""(Re)starts a dnsmasq server for a given network\n\n    if a dnsmasq instance is already running then send a HUP\n    signal causing it to reload, otherwise spawn a new instance\n    """'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
name|'conffile'
op|'='
name|'_dhcp_file'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'conffile'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'write'
op|'('
name|'get_dhcp_hosts'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure dnsmasq can actually read it (it setuid()s to "nobody")'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'chmod'
op|'('
name|'conffile'
op|','
number|'0644'
op|')'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
name|'_dnsmasq_pid_for'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# if dnsmasq is already running, then tell it to reload'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat /proc/%d/cmdline'"
op|'%'
name|'pid'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'conffile'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'sudo kill -HUP %d'"
op|'%'
name|'pid'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable-msg=W0703'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Hupping dnsmasq threw %s"'
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Pid %d is stale, relaunching dnsmasq"'
op|')'
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
comment|'# FLAGFILE and DNSMASQ_INTERFACE in env'
nl|'\n'
dedent|''
dedent|''
name|'env'
op|'='
op|'{'
string|"'FLAGFILE'"
op|':'
name|'FLAGS'
op|'.'
name|'dhcpbridge_flagfile'
op|','
nl|'\n'
string|"'DNSMASQ_INTERFACE'"
op|':'
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|'}'
newline|'\n'
name|'command'
op|'='
name|'_dnsmasq_cmd'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'_execute'
op|'('
name|'command'
op|','
name|'addl_env'
op|'='
name|'env'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_ra
dedent|''
name|'def'
name|'update_ra'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
name|'conffile'
op|'='
name|'_ra_file'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'conffile'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'conf_str'
op|'='
string|'"""\ninterface %s\n{\n   AdvSendAdvert on;\n   MinRtrAdvInterval 3;\n   MaxRtrAdvInterval 10;\n   prefix %s\n   {\n        AdvOnLink on;\n        AdvAutonomous on;\n   };\n};\n"""'
op|'%'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
name|'network_ref'
op|'['
string|"'cidr_v6'"
op|']'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'conf_str'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure radvd can actually read it (it setuid()s to "nobody")'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'chmod'
op|'('
name|'conffile'
op|','
number|'0644'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|pid
name|'pid'
op|'='
name|'_ra_pid_for'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# if radvd is already running, then tell it to reload'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat /proc/%d/cmdline'"
nl|'\n'
op|'%'
name|'pid'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'conffile'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'sudo kill %d'"
op|'%'
name|'pid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable-msg=W0703'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"killing radvd threw %s"'
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Pid %d is stale, relaunching radvd"'
op|')'
op|','
name|'pid'
op|')'
newline|'\n'
DECL|variable|command
dedent|''
dedent|''
name|'command'
op|'='
name|'_ra_cmd'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'_execute'
op|'('
name|'command'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
op|'{'
string|'"ra_server"'
op|':'
nl|'\n'
name|'utils'
op|'.'
name|'get_my_linklocal'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_dhcp
dedent|''
name|'def'
name|'_host_dhcp'
op|'('
name|'fixed_ip_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a host string for an address"""'
newline|'\n'
name|'instance_ref'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'return'
string|'"%s,%s.%s,%s"'
op|'%'
op|'('
name|'instance_ref'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'dhcp_domain'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_execute
dedent|''
name|'def'
name|'_execute'
op|'('
name|'cmd'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper around utils._execute for fake_network"""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"FAKE NET: %s"'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'return'
string|'"fake"'
op|','
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
name|'cmd'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_device_exists
dedent|''
dedent|''
name|'def'
name|'_device_exists'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if ethernet device exists"""'
newline|'\n'
op|'('
name|'_out'
op|','
name|'err'
op|')'
op|'='
name|'_execute'
op|'('
string|'"ip link show dev %s"'
op|'%'
name|'device'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'return'
name|'not'
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dnsmasq_cmd
dedent|''
name|'def'
name|'_dnsmasq_cmd'
op|'('
name|'net'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds dnsmasq command"""'
newline|'\n'
name|'cmd'
op|'='
op|'['
string|"'sudo -E dnsmasq'"
op|','
nl|'\n'
string|"' --strict-order'"
op|','
nl|'\n'
string|"' --bind-interfaces'"
op|','
nl|'\n'
string|"' --conf-file='"
op|','
nl|'\n'
string|"' --domain=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dhcp_domain'
op|','
nl|'\n'
string|"' --pid-file=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'pid'"
op|')'
op|','
nl|'\n'
string|"' --listen-address=%s'"
op|'%'
name|'net'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"' --except-interface=lo'"
op|','
nl|'\n'
string|"' --dhcp-range=%s,static,120s'"
op|'%'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|','
nl|'\n'
string|"' --dhcp-hostsfile=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
op|','
nl|'\n'
string|"' --dhcp-script=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dhcpbridge'
op|','
nl|'\n'
string|"' --leasefile-ro'"
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'dns_server'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"' -h -R --server=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dns_server'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_cmd
dedent|''
name|'def'
name|'_ra_cmd'
op|'('
name|'net'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds radvd command"""'
newline|'\n'
name|'cmd'
op|'='
op|'['
string|"'sudo -E radvd'"
op|','
nl|'\n'
comment|"#           ' -u nobody',"
nl|'\n'
string|"' -C %s'"
op|'%'
name|'_ra_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
op|','
nl|'\n'
string|"' -p %s'"
op|'%'
name|'_ra_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'pid'"
op|')'
op|']'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_stop_dnsmasq
dedent|''
name|'def'
name|'_stop_dnsmasq'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stops the dnsmasq instance for a given network"""'
newline|'\n'
name|'pid'
op|'='
name|'_dnsmasq_pid_for'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'sudo kill -TERM %d'"
op|'%'
name|'pid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable-msg=W0703'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Killing dnsmasq threw %s"'
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dhcp_file
dedent|''
dedent|''
dedent|''
name|'def'
name|'_dhcp_file'
op|'('
name|'bridge'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return path to a pid, leases or conf file for a bridge"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|'"%s/nova-%s.%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|','
nl|'\n'
name|'bridge'
op|','
nl|'\n'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_file
dedent|''
name|'def'
name|'_ra_file'
op|'('
name|'bridge'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return path to a pid or conf file for a bridge"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|'"%s/nova-ra-%s.%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|','
nl|'\n'
name|'bridge'
op|','
nl|'\n'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dnsmasq_pid_for
dedent|''
name|'def'
name|'_dnsmasq_pid_for'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the pid for prior dnsmasq instance for a bridge\n\n    Returns None if no pid file exists\n\n    If machine has rebooted pid might be incorrect (caller should check)\n    """'
newline|'\n'
nl|'\n'
name|'pid_file'
op|'='
name|'_dhcp_file'
op|'('
name|'bridge'
op|','
string|"'pid'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'pid_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_pid_for
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ra_pid_for'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the pid for prior radvd instance for a bridge\n\n    Returns None if no pid file exists\n\n    If machine has rebooted pid might be incorrect (caller should check)\n    """'
newline|'\n'
nl|'\n'
name|'pid_file'
op|'='
name|'_ra_file'
op|'('
name|'bridge'
op|','
string|"'pid'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'pid_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Implements vlans, bridges, and iptables rules using linux utilities."""'
newline|'\n'
nl|'\n'
name|'import'
name|'calendar'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'fileutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|linux_net_opts
name|'linux_net_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'dhcpbridge_flagfile'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'/etc/nova/nova-dhcpbridge.conf'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Location of flagfiles for dhcpbridge'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'networks_path'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'networks'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Location to keep network config files'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'public_interface'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'eth0'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interface for public IP addresses'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'dhcpbridge'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'bindir_def'
op|'('
string|"'nova-dhcpbridge'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Location of nova-dhcpbridge'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'routing_source_ip'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$my_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Public IP of network host'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'dhcp_lease_time'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'86400'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Lifetime of a DHCP lease in seconds'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'dns_server'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If set, uses specific DNS server for dnsmasq. Can'"
nl|'\n'
string|"' be specified multiple times.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_network_dns_servers'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If set, uses the dns1 and dns2 from the network ref.'"
nl|'\n'
string|"' as dns servers.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'dmz_cidr'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'A list of dmz range that should be accepted'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'force_snat_range'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Traffic to this range will always be snatted to the '"
nl|'\n'
string|"'fallback ip, even if it would normally be bridged out '"
nl|'\n'
string|"'of the node. Can be specified multiple times.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'dnsmasq_config_file'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Override the default dnsmasq settings with this file'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'linuxnet_interface_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.network.linux_net.LinuxBridgeInterfaceDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Driver used to create ethernet devices.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'linuxnet_ovs_integration_bridge'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'br-int'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of Open vSwitch bridge used with linuxnet'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'send_arp_for_ha'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Send gratuitous ARPs for HA setup'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'send_arp_for_ha_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Send this many gratuitous ARPs for HA setup'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_single_default_gateway'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use single default gateway. Only first nic of vm will '"
nl|'\n'
string|"'get default gateway from dhcp server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'forward_bridge_interface'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'all'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'An interface that bridges can forward to. If this '"
nl|'\n'
string|"'is set to all then all traffic will be forwarded. '"
nl|'\n'
string|"'Can be specified multiple times.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'metadata_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$my_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The IP address for the metadata API server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'metadata_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'8775'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The port for the metadata API port'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'iptables_top_regex'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Regular expression to match iptables rule that should '"
nl|'\n'
string|"'always be on the top.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'iptables_bottom_regex'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Regular expression to match iptables rule that should '"
nl|'\n'
string|"'always be on the bottom.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'iptables_drop_action'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'DROP'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
op|'('
string|"'The table that iptables to jump to when a packet is '"
nl|'\n'
string|"'to be dropped.'"
op|')'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'ovs_vsctl_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'120'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Amount of time, in seconds, that ovs_vsctl should wait '"
nl|'\n'
string|"'for a response from the database. 0 is to wait forever.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'fake_network'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If passed, use fake network devices and addresses'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'linux_net_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'use_ipv6'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_device_mtu'"
op|','
string|"'nova.objects.network'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(vish): Iptables supports chain names of up to 28 characters,  and we'
nl|'\n'
comment|'#             add up to 12 characters to binary_name which is used as a prefix,'
nl|'\n'
comment|'#             so we limit it to 16 characters.'
nl|'\n'
comment|"#             (max_chain_name_length - len('-POSTROUTING') == 16)"
nl|'\n'
DECL|function|get_binary_name
name|'def'
name|'get_binary_name'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Grab the name of the binary we\'re running in."""'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'inspect'
op|'.'
name|'stack'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
op|'['
op|':'
number|'16'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|binary_name
dedent|''
name|'binary_name'
op|'='
name|'get_binary_name'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesRule
name|'class'
name|'IptablesRule'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An iptables rule.\n\n    You shouldn\'t need to use this class directly, it\'s only used by\n    IptablesManager.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|','
name|'top'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chain'
op|'='
name|'chain'
newline|'\n'
name|'self'
op|'.'
name|'rule'
op|'='
name|'rule'
newline|'\n'
name|'self'
op|'.'
name|'wrap'
op|'='
name|'wrap'
newline|'\n'
name|'self'
op|'.'
name|'top'
op|'='
name|'top'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'self'
op|'.'
name|'chain'
op|'=='
name|'other'
op|'.'
name|'chain'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'rule'
op|'=='
name|'other'
op|'.'
name|'rule'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'top'
op|'=='
name|'other'
op|'.'
name|'top'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'wrap'
op|'=='
name|'other'
op|'.'
name|'wrap'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'self'
op|'=='
name|'other'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'chain'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'self'
op|'.'
name|'chain'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chain'
op|'='
name|'self'
op|'.'
name|'chain'
newline|'\n'
comment|'# new rules should have a zero [packet: byte] count'
nl|'\n'
dedent|''
name|'return'
string|"'[0:0] -A %s %s'"
op|'%'
op|'('
name|'chain'
op|','
name|'self'
op|'.'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesTable
dedent|''
dedent|''
name|'class'
name|'IptablesTable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An iptables table."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'remove_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'chains'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unwrapped_chains'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remove_chains'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|has_chain
dedent|''
name|'def'
name|'has_chain'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'name'
name|'in'
name|'self'
op|'.'
name|'chains'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'name'
name|'in'
name|'self'
op|'.'
name|'unwrapped_chains'
newline|'\n'
nl|'\n'
DECL|member|add_chain
dedent|''
dedent|''
name|'def'
name|'add_chain'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a named chain to the table.\n\n        The chain name is wrapped to be unique for the component creating\n        it, so different components of Nova can safely create identically\n        named chains without interfering with one another.\n\n        At the moment, its wrapped name is <binary name>-<chain name>,\n        so if nova-compute creates a chain named \'OUTPUT\', it\'ll actually\n        end up named \'nova-compute-OUTPUT\'.\n\n        """'
newline|'\n'
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'chains'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unwrapped_chains'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|remove_chain
dedent|''
name|'def'
name|'remove_chain'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove named chain.\n\n        This removal "cascades". All rule in the chain are removed, as are\n        all rules in other chains that jump to it.\n\n        If the chain is not found, this is merely logged.\n\n        """'
newline|'\n'
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'chain_set'
op|'='
name|'self'
op|'.'
name|'chains'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chain_set'
op|'='
name|'self'
op|'.'
name|'unwrapped_chains'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'chain_set'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Attempted to remove chain %s which does not exist'"
op|')'
op|','
nl|'\n'
name|'name'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# non-wrapped chains and rules need to be dealt with specially,'
nl|'\n'
comment|'# so we keep a list of them to be iterated over in apply()'
nl|'\n'
name|'if'
name|'not'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_chains'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'chain_set'
op|'.'
name|'remove'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_rules'
op|'+='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'r'
op|'.'
name|'chain'
op|'=='
name|'name'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'r'
op|'.'
name|'chain'
op|'!='
name|'name'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'jump_snippet'
op|'='
string|"'-j %s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'jump_snippet'
op|'='
string|"'-j %s'"
op|'%'
op|'('
name|'name'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_rules'
op|'+='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'jump_snippet'
name|'in'
name|'r'
op|'.'
name|'rule'
op|','
nl|'\n'
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'jump_snippet'
name|'not'
name|'in'
name|'r'
op|'.'
name|'rule'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_rule
dedent|''
name|'def'
name|'add_rule'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|','
name|'top'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a rule to the table.\n\n        This is just like what you\'d feed to iptables, just without\n        the \'-A <chain name>\' bit at the start.\n\n        However, if you need to jump to one of your wrapped chains,\n        prepend its name with a \'$\' which will ensure the wrapping\n        is applied correctly.\n\n        """'
newline|'\n'
name|'if'
name|'wrap'
name|'and'
name|'chain'
name|'not'
name|'in'
name|'self'
op|'.'
name|'chains'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Unknown chain: %r'"
op|')'
op|'%'
name|'chain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'$'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'            '
name|'rule'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'self'
op|'.'
name|'_wrap_target_chain'
op|','
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'rule_obj'
op|'='
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|','
name|'top'
op|')'
newline|'\n'
name|'if'
name|'rule_obj'
name|'in'
name|'self'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Skipping duplicate iptables rule addition"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rules'
op|'.'
name|'append'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|','
name|'top'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_wrap_target_chain
dedent|''
dedent|''
name|'def'
name|'_wrap_target_chain'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"'$'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'s'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|remove_rule
dedent|''
name|'def'
name|'remove_rule'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|','
name|'top'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a rule from a chain.\n\n        Note: The rule must be exactly identical to the one that was added.\n        You cannot switch arguments around like you can with the iptables\n        CLI tool.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rules'
op|'.'
name|'remove'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|','
name|'top'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'wrap'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'remove_rules'
op|'.'
name|'append'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|','
name|'top'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Tried to remove rule that was not there:'"
nl|'\n'
string|"' %(chain)r %(rule)r %(wrap)r %(top)r'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'chain'"
op|':'
name|'chain'
op|','
string|"'rule'"
op|':'
name|'rule'
op|','
nl|'\n'
string|"'top'"
op|':'
name|'top'
op|','
string|"'wrap'"
op|':'
name|'wrap'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_rules_regex
dedent|''
dedent|''
name|'def'
name|'remove_rules_regex'
op|'('
name|'self'
op|','
name|'regex'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all rules matching regex."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'regex'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'regex'
op|')'
newline|'\n'
dedent|''
name|'num_rules'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'not'
name|'regex'
op|'.'
name|'match'
op|'('
name|'str'
op|'('
name|'r'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'removed'
op|'='
name|'num_rules'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'if'
name|'removed'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'removed'
newline|'\n'
nl|'\n'
DECL|member|empty_chain
dedent|''
name|'def'
name|'empty_chain'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all rules from a chain."""'
newline|'\n'
name|'chained_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
name|'chain'
name|'and'
name|'rule'
op|'.'
name|'wrap'
op|'=='
name|'wrap'
op|']'
newline|'\n'
name|'if'
name|'chained_rules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dirty'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'for'
name|'rule'
name|'in'
name|'chained_rules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rules'
op|'.'
name|'remove'
op|'('
name|'rule'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesManager
dedent|''
dedent|''
dedent|''
name|'class'
name|'IptablesManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper for iptables.\n\n    See IptablesTable for some usage docs\n\n    A number of chains are set up to begin with.\n\n    First, nova-filter-top. It\'s added at the top of FORWARD and OUTPUT. Its\n    name is not wrapped, so it\'s shared between the various nova workers. It\'s\n    intended for rules that need to live at the top of the FORWARD and OUTPUT\n    chains. It\'s in both the ipv4 and ipv6 set of tables.\n\n    For ipv4 and ipv6, the built-in INPUT, OUTPUT, and FORWARD filter chains\n    are wrapped, meaning that the "real" INPUT chain has a rule that jumps to\n    the wrapped INPUT chain, etc. Additionally, there\'s a wrapped chain named\n    "local" which is jumped to from nova-filter-top.\n\n    For ipv4, the built-in PREROUTING, OUTPUT, and POSTROUTING nat chains are\n    wrapped in the same was as the built-in filter chains. Additionally,\n    there\'s a snat chain that is applied after the POSTROUTING chain.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'execute'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'execute'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'execute'
op|'='
name|'_execute'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'execute'
op|'='
name|'execute'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'ipv4'
op|'='
op|'{'
string|"'filter'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|','
nl|'\n'
string|"'nat'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|','
nl|'\n'
string|"'mangle'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'ipv6'
op|'='
op|'{'
string|"'filter'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables_apply_deferred'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|"# Add a nova-filter-top chain. It's intended to be shared"
nl|'\n'
comment|'# among the various nova components. It sits at the very top'
nl|'\n'
comment|'# of FORWARD and OUTPUT.'
nl|'\n'
name|'for'
name|'tables'
name|'in'
op|'['
name|'self'
op|'.'
name|'ipv4'
op|','
name|'self'
op|'.'
name|'ipv6'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'nova-filter-top'"
op|','
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
string|"'-j nova-filter-top'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|','
name|'top'
op|'='
name|'True'
op|')'
newline|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'OUTPUT'"
op|','
string|"'-j nova-filter-top'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|','
name|'top'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'local'"
op|')'
newline|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'nova-filter-top'"
op|','
string|"'-j $local'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wrap the built-in chains'
nl|'\n'
dedent|''
name|'builtin_chains'
op|'='
op|'{'
number|'4'
op|':'
op|'{'
string|"'filter'"
op|':'
op|'['
string|"'INPUT'"
op|','
string|"'OUTPUT'"
op|','
string|"'FORWARD'"
op|']'
op|','
nl|'\n'
string|"'nat'"
op|':'
op|'['
string|"'PREROUTING'"
op|','
string|"'OUTPUT'"
op|','
string|"'POSTROUTING'"
op|']'
op|','
nl|'\n'
string|"'mangle'"
op|':'
op|'['
string|"'POSTROUTING'"
op|']'
op|'}'
op|','
nl|'\n'
number|'6'
op|':'
op|'{'
string|"'filter'"
op|':'
op|'['
string|"'INPUT'"
op|','
string|"'OUTPUT'"
op|','
string|"'FORWARD'"
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'ip_version'
name|'in'
name|'builtin_chains'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ip_version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'tables'
op|'='
name|'self'
op|'.'
name|'ipv4'
newline|'\n'
dedent|''
name|'elif'
name|'ip_version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                '
name|'tables'
op|'='
name|'self'
op|'.'
name|'ipv6'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'table'
op|','
name|'chains'
name|'in'
name|'builtin_chains'
op|'['
name|'ip_version'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'chain'
name|'in'
name|'chains'
op|':'
newline|'\n'
indent|'                    '
name|'tables'
op|'['
name|'table'
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain'
op|')'
newline|'\n'
name|'tables'
op|'['
name|'table'
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain'
op|','
string|"'-j $%s'"
op|'%'
op|'('
name|'chain'
op|','
op|')'
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|"# Add a nova-postrouting-bottom chain. It's intended to be shared"
nl|'\n'
comment|'# among the various nova components. We set it as the last chain'
nl|'\n'
comment|'# of POSTROUTING chain.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'nova-postrouting-bottom'"
op|','
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
string|"'-j nova-postrouting-bottom'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# We add a snat chain to the shared nova-postrouting-bottom chain'
nl|'\n'
comment|"# so that it's applied last."
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'snat'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'nova-postrouting-bottom'"
op|','
string|"'-j $snat'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# And then we add a float-snat chain and jump to first thing in'
nl|'\n'
comment|'# the snat chain.'
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'float-snat'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'snat'"
op|','
string|"'-j $float-snat'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|defer_apply_on
dedent|''
name|'def'
name|'defer_apply_on'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'iptables_apply_deferred'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|defer_apply_off
dedent|''
name|'def'
name|'defer_apply_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'iptables_apply_deferred'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dirty
dedent|''
name|'def'
name|'dirty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'table'
name|'in'
name|'self'
op|'.'
name|'ipv4'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'table'
op|'.'
name|'dirty'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'table'
name|'in'
name|'self'
op|'.'
name|'ipv6'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'table'
op|'.'
name|'dirty'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|apply
dedent|''
name|'def'
name|'apply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'iptables_apply_deferred'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'dirty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_apply'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Skipping apply due to lack of new rules"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'iptables'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_apply
name|'def'
name|'_apply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply the current in-memory set of iptables rules.\n\n        This will blow away any rules left over from previous runs of the\n        same component of Nova, and replace them with our current set of\n        rules. This happens atomically, thanks to iptables-restore.\n\n        """'
newline|'\n'
name|'s'
op|'='
op|'['
op|'('
string|"'iptables'"
op|','
name|'self'
op|'.'
name|'ipv4'
op|')'
op|']'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
op|'['
op|'('
string|"'ip6tables'"
op|','
name|'self'
op|'.'
name|'ipv6'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cmd'
op|','
name|'tables'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'            '
name|'all_tables'
op|','
name|'_err'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
string|"'%s-save'"
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|','
string|"'-c'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'attempts'
op|'='
number|'5'
op|')'
newline|'\n'
name|'all_lines'
op|'='
name|'all_tables'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'for'
name|'table_name'
op|','
name|'table'
name|'in'
name|'tables'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'start'
op|','
name|'end'
op|'='
name|'self'
op|'.'
name|'_find_table'
op|'('
name|'all_lines'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'all_lines'
op|'['
name|'start'
op|':'
name|'end'
op|']'
op|'='
name|'self'
op|'.'
name|'_modify_rules'
op|'('
nl|'\n'
name|'all_lines'
op|'['
name|'start'
op|':'
name|'end'
op|']'
op|','
name|'table'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'table'
op|'.'
name|'dirty'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'execute'
op|'('
string|"'%s-restore'"
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|','
string|"'-c'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'all_lines'
op|')'
op|','
nl|'\n'
name|'attempts'
op|'='
number|'5'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"IPTablesManager.apply completed with success"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_table
dedent|''
name|'def'
name|'_find_table'
op|'('
name|'self'
op|','
name|'lines'
op|','
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'lines'
op|')'
op|'<'
number|'3'
op|':'
newline|'\n'
comment|'# length only <2 when fake iptables'
nl|'\n'
indent|'            '
name|'return'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'lines'
op|'.'
name|'index'
op|'('
string|"'*%s'"
op|'%'
name|'table_name'
op|')'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
comment|"# Couldn't find table_name"
nl|'\n'
indent|'            '
name|'return'
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'lines'
op|'['
name|'start'
op|':'
op|']'
op|'.'
name|'index'
op|'('
string|"'COMMIT'"
op|')'
op|'+'
name|'start'
op|'+'
number|'2'
newline|'\n'
name|'return'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_modify_rules
dedent|''
name|'def'
name|'_modify_rules'
op|'('
name|'self'
op|','
name|'current_lines'
op|','
name|'table'
op|','
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unwrapped_chains'
op|'='
name|'table'
op|'.'
name|'unwrapped_chains'
newline|'\n'
name|'chains'
op|'='
name|'table'
op|'.'
name|'chains'
newline|'\n'
name|'remove_chains'
op|'='
name|'table'
op|'.'
name|'remove_chains'
newline|'\n'
name|'rules'
op|'='
name|'table'
op|'.'
name|'rules'
newline|'\n'
name|'remove_rules'
op|'='
name|'table'
op|'.'
name|'remove_rules'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'current_lines'
op|':'
newline|'\n'
indent|'            '
name|'fake_table'
op|'='
op|'['
string|"'#Generated by nova'"
op|','
nl|'\n'
string|"'*'"
op|'+'
name|'table_name'
op|','
string|"'COMMIT'"
op|','
nl|'\n'
string|"'#Completed by nova'"
op|']'
newline|'\n'
name|'current_lines'
op|'='
name|'fake_table'
newline|'\n'
nl|'\n'
comment|'# Remove any trace of our rules'
nl|'\n'
dedent|''
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'line'
op|':'
name|'binary_name'
name|'not'
name|'in'
name|'line'
op|','
nl|'\n'
name|'current_lines'
op|')'
newline|'\n'
nl|'\n'
name|'top_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'bottom_rules'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'iptables_top_regex'
op|':'
newline|'\n'
indent|'            '
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'CONF'
op|'.'
name|'iptables_top_regex'
op|')'
newline|'\n'
name|'temp_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'line'
op|':'
name|'regex'
op|'.'
name|'search'
op|'('
name|'line'
op|')'
op|','
name|'new_filter'
op|')'
newline|'\n'
name|'for'
name|'rule_str'
name|'in'
name|'temp_filter'
op|':'
newline|'\n'
indent|'                '
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'s'
op|':'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|'!='
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
name|'new_filter'
op|')'
newline|'\n'
dedent|''
name|'top_rules'
op|'='
name|'temp_filter'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'iptables_bottom_regex'
op|':'
newline|'\n'
indent|'            '
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'CONF'
op|'.'
name|'iptables_bottom_regex'
op|')'
newline|'\n'
name|'temp_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'line'
op|':'
name|'regex'
op|'.'
name|'search'
op|'('
name|'line'
op|')'
op|','
name|'new_filter'
op|')'
newline|'\n'
name|'for'
name|'rule_str'
name|'in'
name|'temp_filter'
op|':'
newline|'\n'
indent|'                '
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'s'
op|':'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|'!='
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
name|'new_filter'
op|')'
newline|'\n'
dedent|''
name|'bottom_rules'
op|'='
name|'temp_filter'
newline|'\n'
nl|'\n'
dedent|''
name|'seen_chains'
op|'='
name|'False'
newline|'\n'
name|'rules_index'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'rules_index'
op|','
name|'rule'
name|'in'
name|'enumerate'
op|'('
name|'new_filter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'seen_chains'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'seen_chains'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'rule'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'seen_chains'
op|':'
newline|'\n'
indent|'            '
name|'rules_index'
op|'='
number|'2'
newline|'\n'
nl|'\n'
dedent|''
name|'our_rules'
op|'='
name|'top_rules'
newline|'\n'
name|'bot_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'rule_str'
op|'='
name|'str'
op|'('
name|'rule'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'top'
op|':'
newline|'\n'
comment|'# rule.top == True means we want this rule to be at the top.'
nl|'\n'
comment|'# Further down, we weed out duplicates from the bottom of the'
nl|'\n'
comment|'# list, so here we remove the dupes ahead of time.'
nl|'\n'
nl|'\n'
comment|"# We don't want to remove an entry if it has non-zero"
nl|'\n'
comment|"# [packet:byte] counts and replace it with [0:0], so let's"
nl|'\n'
comment|'# go look for a duplicate, and over-ride our table rule if'
nl|'\n'
comment|'# found.'
nl|'\n'
nl|'\n'
comment|'# ignore [packet:byte] counts at beginning of line'
nl|'\n'
indent|'                '
name|'if'
name|'rule_str'
op|'.'
name|'startswith'
op|'('
string|"'['"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'rule_str'
op|'='
name|'rule_str'
op|'.'
name|'split'
op|'('
string|"']'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'dup_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'s'
op|':'
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
name|'in'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
name|'new_filter'
op|')'
newline|'\n'
nl|'\n'
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'s'
op|':'
nl|'\n'
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
name|'not'
name|'in'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
name|'new_filter'
op|')'
newline|'\n'
comment|'# if no duplicates, use original rule'
nl|'\n'
name|'if'
name|'dup_filter'
op|':'
newline|'\n'
comment|'# grab the last entry, if there is one'
nl|'\n'
indent|'                    '
name|'dup'
op|'='
name|'dup_filter'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'rule_str'
op|'='
name|'str'
op|'('
name|'dup'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'rule_str'
op|'='
name|'str'
op|'('
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'our_rules'
op|'+='
op|'['
name|'rule_str'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'bot_rules'
op|'+='
op|'['
name|'rule_str'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'our_rules'
op|'+='
name|'bot_rules'
newline|'\n'
nl|'\n'
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
name|'our_rules'
newline|'\n'
nl|'\n'
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
op|'['
string|"':%s - [0:0]'"
op|'%'
op|'('
name|'name'
op|','
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'unwrapped_chains'
op|']'
newline|'\n'
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
op|'['
string|"':%s-%s - [0:0]'"
op|'%'
nl|'\n'
op|'('
name|'binary_name'
op|','
name|'name'
op|','
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'chains'
op|']'
newline|'\n'
nl|'\n'
name|'commit_index'
op|'='
name|'new_filter'
op|'.'
name|'index'
op|'('
string|"'COMMIT'"
op|')'
newline|'\n'
name|'new_filter'
op|'['
name|'commit_index'
op|':'
name|'commit_index'
op|']'
op|'='
name|'bottom_rules'
newline|'\n'
name|'seen_lines'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_weed_out_duplicates
name|'def'
name|'_weed_out_duplicates'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# ignore [packet:byte] counts at beginning of lines'
nl|'\n'
indent|'            '
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'['"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"']'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
name|'in'
name|'seen_lines'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'seen_lines'
op|'.'
name|'add'
op|'('
name|'line'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|function|_weed_out_removes
dedent|''
dedent|''
name|'def'
name|'_weed_out_removes'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
comment|'# We need to find exact matches here'
nl|'\n'
indent|'            '
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
comment|'# it\'s a chain, for example, ":nova-billing - [0:0]"'
nl|'\n'
comment|'# strip off everything except the chain name'
nl|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"'- ['"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'for'
name|'chain'
name|'in'
name|'remove_chains'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'chain'
op|'=='
name|'line'
op|':'
newline|'\n'
indent|'                        '
name|'remove_chains'
op|'.'
name|'remove'
op|'('
name|'chain'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'['"
op|')'
op|':'
newline|'\n'
comment|"# it's a rule"
nl|'\n'
comment|'# ignore [packet:byte] counts at beginning of lines'
nl|'\n'
indent|'                '
name|'line'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"']'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'remove_rules'
op|':'
newline|'\n'
comment|'# ignore [packet:byte] counts at beginning of rules'
nl|'\n'
indent|'                    '
name|'rule_str'
op|'='
name|'str'
op|'('
name|'rule'
op|')'
newline|'\n'
name|'rule_str'
op|'='
name|'rule_str'
op|'.'
name|'split'
op|'('
string|"' '"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'rule_str'
op|'='
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'rule_str'
op|'=='
name|'line'
op|':'
newline|'\n'
indent|'                        '
name|'remove_rules'
op|'.'
name|'remove'
op|'('
name|'rule'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Leave it alone'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|'# We filter duplicates, letting the *last* occurrence take'
nl|'\n'
comment|'# precedence.  We also filter out anything in the "remove"'
nl|'\n'
comment|'# lists.'
nl|'\n'
dedent|''
name|'new_filter'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'_weed_out_duplicates'
op|','
name|'new_filter'
op|')'
newline|'\n'
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'_weed_out_removes'
op|','
name|'new_filter'
op|')'
newline|'\n'
name|'new_filter'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# flush lists, just in case we didn't find something"
nl|'\n'
name|'remove_chains'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'remove_rules'
op|':'
newline|'\n'
indent|'            '
name|'remove_rules'
op|'.'
name|'remove'
op|'('
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'new_filter'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(jkoelker) This is just a nice little stub point since mocking'
nl|'\n'
comment|'#                builtins with mox is a nightmare'
nl|'\n'
DECL|function|write_to_file
dedent|''
dedent|''
name|'def'
name|'write_to_file'
op|'('
name|'file'
op|','
name|'data'
op|','
name|'mode'
op|'='
string|"'w'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'with'
name|'open'
op|'('
name|'file'
op|','
name|'mode'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_forward
dedent|''
dedent|''
name|'def'
name|'metadata_forward'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create forwarding rule for metadata."""'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'metadata_host'
op|'!='
string|"'127.0.0.1'"
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'PREROUTING'"
op|','
nl|'\n'
string|"'-s 0.0.0.0/0 -d 169.254.169.254/32 '"
nl|'\n'
string|"'-p tcp -m tcp --dport 80 -j DNAT '"
nl|'\n'
string|"'--to-destination %s:%s'"
op|'%'
nl|'\n'
op|'('
name|'CONF'
op|'.'
name|'metadata_host'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'metadata_port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'PREROUTING'"
op|','
nl|'\n'
string|"'-s 0.0.0.0/0 -d 169.254.169.254/32 '"
nl|'\n'
string|"'-p tcp -m tcp --dport 80 '"
nl|'\n'
string|"'-j REDIRECT --to-ports %s'"
op|'%'
nl|'\n'
name|'CONF'
op|'.'
name|'metadata_port'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_accept
dedent|''
name|'def'
name|'metadata_accept'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create the filter accept rule for metadata."""'
newline|'\n'
name|'rule'
op|'='
string|"'-s 0.0.0.0/0 -p tcp -m tcp --dport %s'"
op|'%'
name|'CONF'
op|'.'
name|'metadata_port'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'metadata_host'
op|'!='
string|"'127.0.0.1'"
op|':'
newline|'\n'
indent|'        '
name|'rule'
op|'+='
string|"' -d %s -j ACCEPT'"
op|'%'
name|'CONF'
op|'.'
name|'metadata_host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'rule'
op|'+='
string|"' -m addrtype --dst-type LOCAL -j ACCEPT'"
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'INPUT'"
op|','
name|'rule'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|add_snat_rule
dedent|''
name|'def'
name|'add_snat_rule'
op|'('
name|'ip_range'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'CONF'
op|'.'
name|'routing_source_ip'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'dest_range'
name|'in'
name|'CONF'
op|'.'
name|'force_snat_range'
name|'or'
op|'['
string|"'0.0.0.0/0'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'rule'
op|'='
op|'('
string|"'-s %s -d %s -j SNAT --to-source %s'"
nl|'\n'
op|'%'
op|'('
name|'ip_range'
op|','
name|'dest_range'
op|','
name|'CONF'
op|'.'
name|'routing_source_ip'
op|')'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'public_interface'
op|':'
newline|'\n'
indent|'                '
name|'rule'
op|'+='
string|"' -o %s'"
op|'%'
name|'CONF'
op|'.'
name|'public_interface'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'snat'"
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|init_host
dedent|''
dedent|''
name|'def'
name|'init_host'
op|'('
name|'ip_range'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic networking setup goes here."""'
newline|'\n'
comment|'# NOTE(devcamcar): Cloud public SNAT entries and the default'
nl|'\n'
comment|'# SNAT rule for outbound traffic.'
nl|'\n'
nl|'\n'
name|'add_snat_rule'
op|'('
name|'ip_range'
op|')'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'snat_range'
name|'in'
name|'CONF'
op|'.'
name|'force_snat_range'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'.'
name|'append'
op|'('
string|"'PREROUTING -p ipv4 --ip-src %s --ip-dst %s '"
nl|'\n'
string|"'-j redirect --redirect-target ACCEPT'"
op|'%'
nl|'\n'
op|'('
name|'ip_range'
op|','
name|'snat_range'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rules'
op|':'
newline|'\n'
indent|'        '
name|'ensure_ebtables_rules'
op|'('
name|'rules'
op|','
string|"'nat'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-s %s -d %s/32 -j ACCEPT'"
op|'%'
nl|'\n'
op|'('
name|'ip_range'
op|','
name|'CONF'
op|'.'
name|'metadata_host'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'dmz'
name|'in'
name|'CONF'
op|'.'
name|'dmz_cidr'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-s %s -d %s -j ACCEPT'"
op|'%'
nl|'\n'
op|'('
name|'ip_range'
op|','
name|'dmz'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-s %(range)s -d %(range)s '"
nl|'\n'
string|"'-m conntrack ! --ctstate DNAT '"
nl|'\n'
string|"'-j ACCEPT'"
op|'%'
nl|'\n'
op|'{'
string|"'range'"
op|':'
name|'ip_range'
op|'}'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|send_arp_for_ip
dedent|''
name|'def'
name|'send_arp_for_ip'
op|'('
name|'ip'
op|','
name|'device'
op|','
name|'count'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'arping'"
op|','
string|"'-U'"
op|','
name|'ip'
op|','
nl|'\n'
string|"'-A'"
op|','
string|"'-I'"
op|','
name|'device'
op|','
nl|'\n'
string|"'-c'"
op|','
name|'str'
op|'('
name|'count'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'err'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'arping error for ip %s'"
op|','
name|'ip'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bind_floating_ip
dedent|''
dedent|''
name|'def'
name|'bind_floating_ip'
op|'('
name|'floating_ip'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bind ip to public interface."""'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'add'"
op|','
name|'str'
op|'('
name|'floating_ip'
op|')'
op|'+'
string|"'/32'"
op|','
nl|'\n'
string|"'dev'"
op|','
name|'device'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'send_arp_for_ha'
name|'and'
name|'CONF'
op|'.'
name|'send_arp_for_ha_count'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'send_arp_for_ip'
op|'('
name|'floating_ip'
op|','
name|'device'
op|','
name|'CONF'
op|'.'
name|'send_arp_for_ha_count'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unbind_floating_ip
dedent|''
dedent|''
name|'def'
name|'unbind_floating_ip'
op|'('
name|'floating_ip'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unbind a public ip from public interface."""'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'del'"
op|','
name|'str'
op|'('
name|'floating_ip'
op|')'
op|'+'
string|"'/32'"
op|','
nl|'\n'
string|"'dev'"
op|','
name|'device'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_metadata_ip
dedent|''
name|'def'
name|'ensure_metadata_ip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up local metadata ip."""'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'add'"
op|','
string|"'169.254.169.254/32'"
op|','
nl|'\n'
string|"'scope'"
op|','
string|"'link'"
op|','
string|"'dev'"
op|','
string|"'lo'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_vpn_forward
dedent|''
name|'def'
name|'ensure_vpn_forward'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up forwarding rules for vlan."""'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'-d %s -p udp '"
nl|'\n'
string|"'--dport 1194 '"
nl|'\n'
string|"'-j ACCEPT'"
op|'%'
name|'private_ip'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'PREROUTING'"
op|','
nl|'\n'
string|"'-d %s -p udp '"
nl|'\n'
string|"'--dport %s -j DNAT --to %s:1194'"
op|'%'
nl|'\n'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'OUTPUT'"
op|','
nl|'\n'
string|"'-d %s -p udp '"
nl|'\n'
string|"'--dport %s -j DNAT --to %s:1194'"
op|'%'
nl|'\n'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_floating_forward
dedent|''
name|'def'
name|'ensure_floating_forward'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|','
name|'device'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure floating ip forwarding rule."""'
newline|'\n'
comment|'# NOTE(vish): Make sure we never have duplicate rules for the same ip'
nl|'\n'
name|'regex'
op|'='
string|"'.*\\s+%s(/32|\\s+|$)'"
op|'%'
name|'floating_ip'
newline|'\n'
name|'num_rules'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'remove_rules_regex'
op|'('
name|'regex'
op|')'
newline|'\n'
name|'if'
name|'num_rules'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Removed %(num)d duplicate rules for floating ip %(float)s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|'%'
op|'{'
string|"'num'"
op|':'
name|'num_rules'
op|','
string|"'float'"
op|':'
name|'floating_ip'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'chain'
op|','
name|'rule'
name|'in'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
name|'if'
name|'device'
op|'!='
name|'network'
op|'['
string|"'bridge'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'ensure_ebtables_rules'
op|'('
op|'*'
name|'floating_ebtables_rules'
op|'('
name|'fixed_ip'
op|','
name|'network'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_floating_forward
dedent|''
dedent|''
name|'def'
name|'remove_floating_forward'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|','
name|'device'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove forwarding for floating ip."""'
newline|'\n'
name|'for'
name|'chain'
op|','
name|'rule'
name|'in'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'remove_rule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
name|'if'
name|'device'
op|'!='
name|'network'
op|'['
string|"'bridge'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'remove_ebtables_rules'
op|'('
op|'*'
name|'floating_ebtables_rules'
op|'('
name|'fixed_ip'
op|','
name|'network'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_ebtables_rules
dedent|''
dedent|''
name|'def'
name|'floating_ebtables_rules'
op|'('
name|'fixed_ip'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Makes sure only in-network traffic is bridged."""'
newline|'\n'
name|'return'
op|'('
op|'['
string|"'PREROUTING --logical-in %s -p ipv4 --ip-src %s '"
nl|'\n'
string|"'! --ip-dst %s -j redirect --redirect-target ACCEPT'"
op|'%'
nl|'\n'
op|'('
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
name|'fixed_ip'
op|','
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
op|']'
op|','
string|"'nat'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_forward_rules
dedent|''
name|'def'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'rule'
op|'='
string|"'-s %s -j SNAT --to %s'"
op|'%'
op|'('
name|'fixed_ip'
op|','
name|'floating_ip'
op|')'
newline|'\n'
name|'if'
name|'device'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'float-snat'"
op|','
name|'rule'
op|'+'
string|"' -d %s'"
op|'%'
name|'fixed_ip'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'float-snat'"
op|','
name|'rule'
op|'+'
string|"' -o %s'"
op|'%'
name|'device'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'float-snat'"
op|','
name|'rule'
op|')'
op|')'
newline|'\n'
dedent|''
name|'rules'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'('
string|"'PREROUTING'"
op|','
string|"'-d %s -j DNAT --to %s'"
op|'%'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'('
string|"'OUTPUT'"
op|','
string|"'-d %s -j DNAT --to %s'"
op|'%'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'POSTROUTING'"
op|','
string|"'-s %s -m conntrack --ctstate DNAT -j SNAT '"
nl|'\n'
string|"'--to-source %s'"
op|'%'
nl|'\n'
op|'('
name|'fixed_ip'
op|','
name|'floating_ip'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'rules'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clean_conntrack
dedent|''
name|'def'
name|'clean_conntrack'
op|'('
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'_execute'
op|'('
string|"'conntrack'"
op|','
string|"'-D'"
op|','
string|"'-r'"
op|','
name|'fixed_ip'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Error deleting conntrack entries for %s'"
op|')'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_enable_ipv4_forwarding
dedent|''
dedent|''
name|'def'
name|'_enable_ipv4_forwarding'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'sysctl_key'
op|'='
string|"'net.ipv4.ip_forward'"
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'_execute'
op|'('
string|"'sysctl'"
op|','
string|"'-n'"
op|','
name|'sysctl_key'
op|')'
newline|'\n'
name|'if'
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
name|'is'
name|'not'
string|"'1'"
op|':'
newline|'\n'
indent|'        '
name|'_execute'
op|'('
string|"'sysctl'"
op|','
string|"'-w'"
op|','
string|"'%s=1'"
op|'%'
name|'sysctl_key'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'lock_gateway'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|initialize_gateway_device
name|'def'
name|'initialize_gateway_device'
op|'('
name|'dev'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'network_ref'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'_enable_ipv4_forwarding'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): The ip for dnsmasq has to be the first address on the'
nl|'\n'
comment|'#             bridge for it to respond to requests properly'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
name|'network_ref'
op|'.'
name|'cidr'
op|'.'
name|'prefixlen'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
name|'network_ref'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|"'/'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'full_ip'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'network_ref'
op|'['
string|"'dhcp_server'"
op|']'
op|','
name|'prefix'
op|')'
newline|'\n'
name|'new_ip_params'
op|'='
op|'['
op|'['
name|'full_ip'
op|','
string|"'brd'"
op|','
name|'network_ref'
op|'['
string|"'broadcast'"
op|']'
op|']'
op|']'
newline|'\n'
name|'old_ip_params'
op|'='
op|'['
op|']'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
string|"'dev'"
op|','
name|'dev'
op|','
nl|'\n'
string|"'scope'"
op|','
string|"'global'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
name|'fields'
op|'['
number|'0'
op|']'
op|'=='
string|"'inet'"
op|':'
newline|'\n'
indent|'            '
name|'ip_params'
op|'='
name|'fields'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'old_ip_params'
op|'.'
name|'append'
op|'('
name|'ip_params'
op|')'
newline|'\n'
name|'if'
name|'ip_params'
op|'['
number|'0'
op|']'
op|'!='
name|'full_ip'
op|':'
newline|'\n'
indent|'                '
name|'new_ip_params'
op|'.'
name|'append'
op|'('
name|'ip_params'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'old_ip_params'
name|'or'
name|'old_ip_params'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'!='
name|'full_ip'
op|':'
newline|'\n'
indent|'        '
name|'old_routes'
op|'='
op|'['
op|']'
newline|'\n'
name|'result'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'route'"
op|','
string|"'show'"
op|','
string|"'dev'"
op|','
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'result'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
string|"'via'"
name|'in'
name|'fields'
op|':'
newline|'\n'
indent|'                    '
name|'old_routes'
op|'.'
name|'append'
op|'('
name|'fields'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'route'"
op|','
string|"'del'"
op|','
name|'fields'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'dev'"
op|','
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'ip_params'
name|'in'
name|'old_ip_params'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
op|'*'
name|'_ip_bridge_cmd'
op|'('
string|"'del'"
op|','
name|'ip_params'
op|','
name|'dev'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'ip_params'
name|'in'
name|'new_ip_params'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
op|'*'
name|'_ip_bridge_cmd'
op|'('
string|"'add'"
op|','
name|'ip_params'
op|','
name|'dev'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'fields'
name|'in'
name|'old_routes'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'route'"
op|','
string|"'add'"
op|','
op|'*'
name|'fields'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'send_arp_for_ha'
name|'and'
name|'CONF'
op|'.'
name|'send_arp_for_ha_count'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'send_arp_for_ip'
op|'('
name|'network_ref'
op|'['
string|"'dhcp_server'"
op|']'
op|','
name|'dev'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'send_arp_for_ha_count'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'        '
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet6'"
op|','
string|"'addr'"
op|','
nl|'\n'
string|"'change'"
op|','
name|'network_ref'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
string|"'dev'"
op|','
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dhcp_leases
dedent|''
dedent|''
name|'def'
name|'get_dhcp_leases'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a network\'s hosts config in dnsmasq leasefile format."""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'for'
name|'fixedip'
name|'in'
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(cfb): Don't return a lease entry if the IP isn't"
nl|'\n'
comment|'#            already leased'
nl|'\n'
indent|'        '
name|'if'
name|'fixedip'
op|'.'
name|'leased'
op|':'
newline|'\n'
indent|'            '
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_lease'
op|'('
name|'fixedip'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dhcp_hosts
dedent|''
name|'def'
name|'get_dhcp_hosts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get network\'s hosts config in dhcp-host format."""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'macs'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'fixedip'
name|'in'
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fixedip'
op|'.'
name|'allocated'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fixedip'
op|'.'
name|'virtual_interface'
op|'.'
name|'address'
name|'not'
name|'in'
name|'macs'
op|':'
newline|'\n'
indent|'                '
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_dhcp'
op|'('
name|'fixedip'
op|')'
op|')'
newline|'\n'
name|'macs'
op|'.'
name|'add'
op|'('
name|'fixedip'
op|'.'
name|'virtual_interface'
op|'.'
name|'address'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dns_hosts
dedent|''
name|'def'
name|'get_dns_hosts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get network\'s DNS hosts in hosts format."""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fixedip'
name|'in'
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_network'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fixedip'
op|'.'
name|'allocated'
op|':'
newline|'\n'
indent|'            '
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_dns'
op|'('
name|'fixedip'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_add_dnsmasq_accept_rules
dedent|''
name|'def'
name|'_add_dnsmasq_accept_rules'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allow DHCP and DNS traffic through to dnsmasq."""'
newline|'\n'
name|'table'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
newline|'\n'
name|'for'
name|'port'
name|'in'
op|'['
number|'67'
op|','
number|'53'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'proto'
name|'in'
op|'['
string|"'udp'"
op|','
string|"'tcp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
op|'{'
string|"'dev'"
op|':'
name|'dev'
op|','
string|"'port'"
op|':'
name|'port'
op|','
string|"'proto'"
op|':'
name|'proto'
op|'}'
newline|'\n'
name|'table'
op|'.'
name|'add_rule'
op|'('
string|"'INPUT'"
op|','
nl|'\n'
string|"'-i %(dev)s -p %(proto)s -m %(proto)s '"
nl|'\n'
string|"'--dport %(port)s -j ACCEPT'"
op|'%'
name|'args'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_remove_dnsmasq_accept_rules
dedent|''
name|'def'
name|'_remove_dnsmasq_accept_rules'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove DHCP and DNS traffic allowed through to dnsmasq."""'
newline|'\n'
name|'table'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
newline|'\n'
name|'for'
name|'port'
name|'in'
op|'['
number|'67'
op|','
number|'53'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'proto'
name|'in'
op|'['
string|"'udp'"
op|','
string|"'tcp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
op|'{'
string|"'dev'"
op|':'
name|'dev'
op|','
string|"'port'"
op|':'
name|'port'
op|','
string|"'proto'"
op|':'
name|'proto'
op|'}'
newline|'\n'
name|'table'
op|'.'
name|'remove_rule'
op|'('
string|"'INPUT'"
op|','
nl|'\n'
string|"'-i %(dev)s -p %(proto)s -m %(proto)s '"
nl|'\n'
string|"'--dport %(port)s -j ACCEPT'"
op|'%'
name|'args'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(russellb) Curious why this is needed?  Check out this explanation from'
nl|'\n'
comment|'# markmc: https://bugzilla.redhat.com/show_bug.cgi?id=910619#c6'
nl|'\n'
DECL|function|_add_dhcp_mangle_rule
dedent|''
name|'def'
name|'_add_dhcp_mangle_rule'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'/dev/vhost-net'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'table'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'mangle'"
op|']'
newline|'\n'
name|'table'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-o %s -p udp -m udp --dport 68 -j CHECKSUM '"
nl|'\n'
string|"'--checksum-fill'"
op|'%'
name|'dev'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_remove_dhcp_mangle_rule
dedent|''
name|'def'
name|'_remove_dhcp_mangle_rule'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'table'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'mangle'"
op|']'
newline|'\n'
name|'table'
op|'.'
name|'remove_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-o %s -p udp -m udp --dport 68 -j CHECKSUM '"
nl|'\n'
string|"'--checksum-fill'"
op|'%'
name|'dev'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dhcp_opts
dedent|''
name|'def'
name|'get_dhcp_opts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get network\'s hosts config in dhcp-opts format."""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'fixedips'
op|'='
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_network'
op|'('
name|'context'
op|','
name|'network_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
name|'if'
name|'fixedips'
op|':'
newline|'\n'
indent|'        '
name|'instance_set'
op|'='
name|'set'
op|'('
op|'['
name|'fixedip'
op|'.'
name|'instance_uuid'
name|'for'
name|'fixedip'
name|'in'
name|'fixedips'
op|']'
op|')'
newline|'\n'
name|'default_gw_vif'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'instance_uuid'
name|'in'
name|'instance_set'
op|':'
newline|'\n'
indent|'            '
name|'vifs'
op|'='
name|'objects'
op|'.'
name|'VirtualInterfaceList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'vifs'
op|':'
newline|'\n'
comment|'#offer a default gateway to the first virtual interface'
nl|'\n'
indent|'                '
name|'default_gw_vif'
op|'['
name|'instance_uuid'
op|']'
op|'='
name|'vifs'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'fixedip'
name|'in'
name|'fixedips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fixedip'
op|'.'
name|'allocated'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'fixedip'
op|'.'
name|'instance_uuid'
newline|'\n'
name|'if'
name|'instance_uuid'
name|'in'
name|'default_gw_vif'
op|':'
newline|'\n'
comment|"# we don't want default gateway for this fixed ip"
nl|'\n'
indent|'                    '
name|'if'
op|'('
name|'default_gw_vif'
op|'['
name|'instance_uuid'
op|']'
op|'!='
nl|'\n'
name|'fixedip'
op|'.'
name|'virtual_interface_id'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_dhcp_opts'
op|'('
name|'fixedip'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|release_dhcp
dedent|''
name|'def'
name|'release_dhcp'
op|'('
name|'dev'
op|','
name|'address'
op|','
name|'mac_address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'dhcp_release'"
op|','
name|'dev'
op|','
name|'address'
op|','
name|'mac_address'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_dhcp
dedent|''
name|'def'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conffile'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'write_to_file'
op|'('
name|'conffile'
op|','
name|'get_dhcp_hosts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|')'
newline|'\n'
name|'restart_dhcp'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_dns
dedent|''
name|'def'
name|'update_dns'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'hostsfile'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'hosts'"
op|')'
newline|'\n'
name|'write_to_file'
op|'('
name|'hostsfile'
op|','
name|'get_dns_hosts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|')'
newline|'\n'
name|'restart_dhcp'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|update_dhcp_hostfile_with_text
dedent|''
name|'def'
name|'update_dhcp_hostfile_with_text'
op|'('
name|'dev'
op|','
name|'hosts_text'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conffile'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'write_to_file'
op|'('
name|'conffile'
op|','
name|'hosts_text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|kill_dhcp
dedent|''
name|'def'
name|'kill_dhcp'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pid'
op|'='
name|'_dnsmasq_pid_for'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
comment|'# Check that the process exists and looks like a dnsmasq process'
nl|'\n'
indent|'        '
name|'conffile'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat'"
op|','
string|"'/proc/%d/cmdline'"
op|'%'
name|'pid'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'conffile'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'kill'"
op|','
string|"'-9'"
op|','
name|'pid'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Pid %d is stale, skip killing dnsmasq'"
op|','
name|'pid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'_remove_dnsmasq_accept_rules'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'_remove_dhcp_mangle_rule'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(ja): Sending a HUP only reloads the hostfile, so any'
nl|'\n'
comment|'#           configuration options (like dchp-range, vlan, ...)'
nl|'\n'
comment|"#           aren't reloaded."
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'dnsmasq_start'"
op|')'
newline|'\n'
DECL|function|restart_dhcp
name|'def'
name|'restart_dhcp'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""(Re)starts a dnsmasq server for a given network.\n\n    If a dnsmasq instance is already running then send a HUP\n    signal causing it to reload, otherwise spawn a new instance.\n\n    """'
newline|'\n'
name|'conffile'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'use_single_default_gateway'
op|':'
newline|'\n'
comment|'# NOTE(vish): this will have serious performance implications if we'
nl|'\n'
comment|'#             are not in multi_host mode.'
nl|'\n'
indent|'        '
name|'optsfile'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'opts'"
op|')'
newline|'\n'
name|'write_to_file'
op|'('
name|'optsfile'
op|','
name|'get_dhcp_opts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'optsfile'
op|','
number|'0o644'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_add_dhcp_mangle_rule'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure dnsmasq can actually read it (it setuid()s to "nobody")'
nl|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'conffile'
op|','
number|'0o644'
op|')'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
name|'_dnsmasq_pid_for'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
comment|'# if dnsmasq is already running, then tell it to reload'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat'"
op|','
string|"'/proc/%d/cmdline'"
op|'%'
name|'pid'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
comment|'# Using symlinks can cause problems here so just compare the name'
nl|'\n'
comment|'# of the file itself'
nl|'\n'
name|'if'
name|'conffile'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'kill'"
op|','
string|"'-HUP'"
op|','
name|'pid'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_add_dnsmasq_accept_rules'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable=W0703'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Hupping dnsmasq threw %s'"
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Pid %d is stale, relaunching dnsmasq'"
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'cmd'
op|'='
op|'['
string|"'env'"
op|','
nl|'\n'
string|"'CONFIG_FILE=%s'"
op|'%'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'CONF'
op|'.'
name|'dhcpbridge_flagfile'
op|')'
op|','
nl|'\n'
string|"'NETWORK_ID=%s'"
op|'%'
name|'str'
op|'('
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|','
nl|'\n'
string|"'dnsmasq'"
op|','
nl|'\n'
string|"'--strict-order'"
op|','
nl|'\n'
string|"'--bind-interfaces'"
op|','
nl|'\n'
string|"'--conf-file=%s'"
op|'%'
name|'CONF'
op|'.'
name|'dnsmasq_config_file'
op|','
nl|'\n'
string|"'--pid-file=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'pid'"
op|')'
op|','
nl|'\n'
string|"'--listen-address=%s'"
op|'%'
name|'network_ref'
op|'['
string|"'dhcp_server'"
op|']'
op|','
nl|'\n'
string|"'--except-interface=lo'"
op|','
nl|'\n'
string|"'--dhcp-range=set:%s,%s,static,%s,%ss'"
op|'%'
nl|'\n'
op|'('
name|'network_ref'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'dhcp_start'"
op|']'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'netmask'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dhcp_lease_time'
op|')'
op|','
nl|'\n'
string|"'--dhcp-lease-max=%s'"
op|'%'
name|'len'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network_ref'
op|'['
string|"'cidr'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
string|"'--dhcp-hostsfile=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
op|','
nl|'\n'
string|"'--dhcp-script=%s'"
op|'%'
name|'CONF'
op|'.'
name|'dhcpbridge'
op|','
nl|'\n'
string|"'--leasefile-ro'"
op|']'
newline|'\n'
nl|'\n'
comment|'# dnsmasq currently gives an error for an empty domain,'
nl|'\n'
comment|'# rather than ignoring.  So only specify it if defined.'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'dhcp_domain'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'--domain=%s'"
op|'%'
name|'CONF'
op|'.'
name|'dhcp_domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'dns_servers'
op|'='
name|'set'
op|'('
name|'CONF'
op|'.'
name|'dns_server'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'use_network_dns_servers'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'network_ref'
op|'.'
name|'get'
op|'('
string|"'dns1'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dns_servers'
op|'.'
name|'add'
op|'('
name|'network_ref'
op|'.'
name|'get'
op|'('
string|"'dns1'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'network_ref'
op|'.'
name|'get'
op|'('
string|"'dns2'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dns_servers'
op|'.'
name|'add'
op|'('
name|'network_ref'
op|'.'
name|'get'
op|'('
string|"'dns2'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
name|'or'
name|'dns_servers'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'--no-hosts'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'--addn-hosts=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'hosts'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'dns_servers'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'--no-resolv'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'dns_server'
name|'in'
name|'dns_servers'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'--server=%s'"
op|'%'
name|'dns_server'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'use_single_default_gateway'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'+='
op|'['
string|"'--dhcp-optsfile=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'opts'"
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'_add_dnsmasq_accept_rules'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'radvd_start'"
op|')'
newline|'\n'
DECL|function|update_ra
name|'def'
name|'update_ra'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conffile'
op|'='
name|'_ra_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'conf_str'
op|'='
string|'"""\ninterface %s\n{\n   AdvSendAdvert on;\n   MinRtrAdvInterval 3;\n   MaxRtrAdvInterval 10;\n   prefix %s\n   {\n        AdvOnLink on;\n        AdvAutonomous on;\n   };\n};\n"""'
op|'%'
op|'('
name|'dev'
op|','
name|'network_ref'
op|'['
string|"'cidr_v6'"
op|']'
op|')'
newline|'\n'
name|'write_to_file'
op|'('
name|'conffile'
op|','
name|'conf_str'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure radvd can actually read it (it setuid()s to "nobody")'
nl|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'conffile'
op|','
number|'0o644'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|pid
name|'pid'
op|'='
name|'_ra_pid_for'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
comment|'# if radvd is already running, then tell it to reload'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat'"
op|','
string|"'/proc/%d/cmdline'"
nl|'\n'
op|'%'
name|'pid'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'conffile'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'kill'"
op|','
name|'pid'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable=W0703'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'killing radvd threw %s'"
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Pid %d is stale, relaunching radvd'"
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|cmd
dedent|''
dedent|''
name|'cmd'
op|'='
op|'['
string|"'radvd'"
op|','
nl|'\n'
string|"'-C'"
op|','
string|"'%s'"
op|'%'
name|'_ra_file'
op|'('
name|'dev'
op|','
string|"'conf'"
op|')'
op|','
nl|'\n'
string|"'-p'"
op|','
string|"'%s'"
op|'%'
name|'_ra_file'
op|'('
name|'dev'
op|','
string|"'pid'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_lease
dedent|''
name|'def'
name|'_host_lease'
op|'('
name|'fixedip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a host string for an address in leasefile format."""'
newline|'\n'
name|'timestamp'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'seconds_since_epoch'
op|'='
name|'calendar'
op|'.'
name|'timegm'
op|'('
name|'timestamp'
op|'.'
name|'utctimetuple'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
string|"'%d %s %s %s *'"
op|'%'
op|'('
name|'seconds_since_epoch'
op|'+'
name|'CONF'
op|'.'
name|'dhcp_lease_time'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'virtual_interface'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'instance'
op|'.'
name|'hostname'
name|'or'
string|"'*'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_dhcp_network
dedent|''
name|'def'
name|'_host_dhcp_network'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'NW-%s'"
op|'%'
name|'data'
op|'.'
name|'virtual_interface_id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_dhcp
dedent|''
name|'def'
name|'_host_dhcp'
op|'('
name|'fixedip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a host string for an address in dhcp-host format."""'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'use_single_default_gateway'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s,%s.%s,%s,%s'"
op|'%'
op|'('
name|'fixedip'
op|'.'
name|'virtual_interface'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'instance'
op|'.'
name|'hostname'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dhcp_domain'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'address'
op|','
nl|'\n'
string|"'net:'"
op|'+'
name|'_host_dhcp_network'
op|'('
name|'fixedip'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s,%s.%s,%s'"
op|'%'
op|'('
name|'fixedip'
op|'.'
name|'virtual_interface'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'instance'
op|'.'
name|'hostname'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dhcp_domain'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_dns
dedent|''
dedent|''
name|'def'
name|'_host_dns'
op|'('
name|'fixedip'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'%s\\t%s.%s'"
op|'%'
op|'('
name|'fixedip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixedip'
op|'.'
name|'instance'
op|'.'
name|'hostname'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dhcp_domain'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_dhcp_opts
dedent|''
name|'def'
name|'_host_dhcp_opts'
op|'('
name|'fixedip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return an empty gateway option."""'
newline|'\n'
name|'return'
string|"'%s,%s'"
op|'%'
op|'('
name|'_host_dhcp_network'
op|'('
name|'fixedip'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_execute
dedent|''
name|'def'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper around utils._execute for fake_network."""'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'FAKE NET: %s'"
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'cmd'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'fake'"
op|','
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|device_exists
dedent|''
dedent|''
name|'def'
name|'device_exists'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if ethernet device exists."""'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'/sys/class/net/%s'"
op|'%'
name|'device'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dhcp_file
dedent|''
name|'def'
name|'_dhcp_file'
op|'('
name|'dev'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return path to a pid, leases, hosts or conf file for a bridge/device."""'
newline|'\n'
name|'fileutils'
op|'.'
name|'ensure_tree'
op|'('
name|'CONF'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|"'%s/nova-%s.%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'networks_path'
op|','
nl|'\n'
name|'dev'
op|','
nl|'\n'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_file
dedent|''
name|'def'
name|'_ra_file'
op|'('
name|'dev'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return path to a pid or conf file for a bridge/device."""'
newline|'\n'
name|'fileutils'
op|'.'
name|'ensure_tree'
op|'('
name|'CONF'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|"'%s/nova-ra-%s.%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'networks_path'
op|','
nl|'\n'
name|'dev'
op|','
nl|'\n'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dnsmasq_pid_for
dedent|''
name|'def'
name|'_dnsmasq_pid_for'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the pid for prior dnsmasq instance for a bridge/device.\n\n    Returns None if no pid file exists.\n\n    If machine has rebooted pid might be incorrect (caller should check).\n\n    """'
newline|'\n'
name|'pid_file'
op|'='
name|'_dhcp_file'
op|'('
name|'dev'
op|','
string|"'pid'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'pid_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'int'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'IOError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_pid_for
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ra_pid_for'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the pid for prior radvd instance for a bridge/device.\n\n    Returns None if no pid file exists.\n\n    If machine has rebooted pid might be incorrect (caller should check).\n\n    """'
newline|'\n'
name|'pid_file'
op|'='
name|'_ra_file'
op|'('
name|'dev'
op|','
string|"'pid'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'pid_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ip_bridge_cmd
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ip_bridge_cmd'
op|'('
name|'action'
op|','
name|'params'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Build commands to add/del ips to bridges/devices."""'
newline|'\n'
name|'cmd'
op|'='
op|'['
string|"'ip'"
op|','
string|"'addr'"
op|','
name|'action'
op|']'
newline|'\n'
name|'cmd'
op|'.'
name|'extend'
op|'('
name|'params'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'extend'
op|'('
op|'['
string|"'dev'"
op|','
name|'device'
op|']'
op|')'
newline|'\n'
name|'return'
name|'cmd'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_device_mtu
dedent|''
name|'def'
name|'_set_device_mtu'
op|'('
name|'dev'
op|','
name|'mtu'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the device MTU."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'mtu'
op|':'
newline|'\n'
indent|'        '
name|'mtu'
op|'='
name|'CONF'
op|'.'
name|'network_device_mtu'
newline|'\n'
dedent|''
name|'if'
name|'mtu'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'mtu'"
op|','
nl|'\n'
name|'mtu'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_veth_pair
dedent|''
dedent|''
name|'def'
name|'_create_veth_pair'
op|'('
name|'dev1_name'
op|','
name|'dev2_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a pair of veth devices with the specified names,\n    deleting any previous devices with those names.\n    """'
newline|'\n'
name|'for'
name|'dev'
name|'in'
op|'['
name|'dev1_name'
op|','
name|'dev2_name'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'add'"
op|','
name|'dev1_name'
op|','
string|"'type'"
op|','
string|"'veth'"
op|','
string|"'peer'"
op|','
nl|'\n'
string|"'name'"
op|','
name|'dev2_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'dev'
name|'in'
op|'['
name|'dev1_name'
op|','
name|'dev2_name'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'promisc'"
op|','
string|"'on'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_set_device_mtu'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ovs_vsctl
dedent|''
dedent|''
name|'def'
name|'_ovs_vsctl'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'full_args'
op|'='
op|'['
string|"'ovs-vsctl'"
op|','
string|"'--timeout=%s'"
op|'%'
name|'CONF'
op|'.'
name|'ovs_vsctl_timeout'
op|']'
op|'+'
name|'args'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'full_args'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to execute %(cmd)s. Exception: %(exception)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'cmd'"
op|':'
name|'full_args'
op|','
string|"'exception'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'AgentError'
op|'('
name|'method'
op|'='
name|'full_args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_ovs_vif_port
dedent|''
dedent|''
name|'def'
name|'create_ovs_vif_port'
op|'('
name|'bridge'
op|','
name|'dev'
op|','
name|'iface_id'
op|','
name|'mac'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_ovs_vsctl'
op|'('
op|'['
string|"'--'"
op|','
string|"'--if-exists'"
op|','
string|"'del-port'"
op|','
name|'dev'
op|','
string|"'--'"
op|','
nl|'\n'
string|"'add-port'"
op|','
name|'bridge'
op|','
name|'dev'
op|','
nl|'\n'
string|"'--'"
op|','
string|"'set'"
op|','
string|"'Interface'"
op|','
name|'dev'
op|','
nl|'\n'
string|"'external-ids:iface-id=%s'"
op|'%'
name|'iface_id'
op|','
nl|'\n'
string|"'external-ids:iface-status=active'"
op|','
nl|'\n'
string|"'external-ids:attached-mac=%s'"
op|'%'
name|'mac'
op|','
nl|'\n'
string|"'external-ids:vm-uuid=%s'"
op|'%'
name|'instance_id'
op|']'
op|')'
newline|'\n'
name|'_set_device_mtu'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_ovs_vif_port
dedent|''
name|'def'
name|'delete_ovs_vif_port'
op|'('
name|'bridge'
op|','
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_ovs_vsctl'
op|'('
op|'['
string|"'--'"
op|','
string|"'--if-exists'"
op|','
string|"'del-port'"
op|','
name|'bridge'
op|','
name|'dev'
op|']'
op|')'
newline|'\n'
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_ivs_vif_port
dedent|''
name|'def'
name|'create_ivs_vif_port'
op|'('
name|'dev'
op|','
name|'iface_id'
op|','
name|'mac'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ivs-ctl'"
op|','
string|"'add-port'"
op|','
nl|'\n'
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_ivs_vif_port
dedent|''
name|'def'
name|'delete_ivs_vif_port'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ivs-ctl'"
op|','
string|"'del-port'"
op|','
name|'dev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'delete'"
op|','
name|'dev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_tap_dev
dedent|''
name|'def'
name|'create_tap_dev'
op|'('
name|'dev'
op|','
name|'mac_address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
comment|"# First, try with 'ip'"
nl|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'tuntap'"
op|','
string|"'add'"
op|','
name|'dev'
op|','
string|"'mode'"
op|','
string|"'tap'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
comment|'# Second option: tunctl'
nl|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'tunctl'"
op|','
string|"'-b'"
op|','
string|"'-t'"
op|','
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'mac_address'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'address'"
op|','
name|'mac_address'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_net_dev
dedent|''
dedent|''
name|'def'
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Delete a network device only if it exists."""'
newline|'\n'
name|'if'
name|'device_exists'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'delete'"
op|','
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Net device removed: \'%s\'"'
op|','
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Failed removing net device: \'%s\'"'
op|')'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Similar to compute virt layers, the Linux network node'
nl|'\n'
comment|'# code uses a flexible driver model to support different ways'
nl|'\n'
comment|'# of creating ethernet interfaces and attaching them to the network.'
nl|'\n'
comment|'# In the case of a network host, these interfaces'
nl|'\n'
comment|'# act as gateway/dhcp/vpn/etc. endpoints not VM interfaces.'
nl|'\n'
DECL|variable|interface_driver
dedent|''
dedent|''
dedent|''
dedent|''
name|'interface_driver'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_interface_driver
name|'def'
name|'_get_interface_driver'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'interface_driver'
newline|'\n'
name|'if'
name|'not'
name|'interface_driver'
op|':'
newline|'\n'
indent|'        '
name|'interface_driver'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'linuxnet_interface_driver'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'interface_driver'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'network'
op|','
name|'mac_address'
op|','
name|'gateway'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_get_interface_driver'
op|'('
op|')'
op|'.'
name|'plug'
op|'('
name|'network'
op|','
name|'mac_address'
op|','
name|'gateway'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_get_interface_driver'
op|'('
op|')'
op|'.'
name|'unplug'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dev
dedent|''
name|'def'
name|'get_dev'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_get_interface_driver'
op|'('
op|')'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LinuxNetInterfaceDriver
dedent|''
name|'class'
name|'LinuxNetInterfaceDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Abstract class that defines generic network host API\n    for all Linux interface drivers.\n    """'
newline|'\n'
nl|'\n'
DECL|member|plug
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'network'
op|','
name|'mac_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create Linux device, return device name."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy Linux device, return device name."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_dev
dedent|''
name|'def'
name|'get_dev'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get device name."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# plugs interfaces using Linux Bridge'
nl|'\n'
DECL|class|LinuxBridgeInterfaceDriver
dedent|''
dedent|''
name|'class'
name|'LinuxBridgeInterfaceDriver'
op|'('
name|'LinuxNetInterfaceDriver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|plug
indent|'    '
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'network'
op|','
name|'mac_address'
op|','
name|'gateway'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vlan'
op|'='
name|'network'
op|'.'
name|'get'
op|'('
string|"'vlan'"
op|')'
newline|'\n'
name|'if'
name|'vlan'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'vlan_interface'
name|'or'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
nl|'\n'
name|'vlan'
op|','
nl|'\n'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'iface'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'mac_address'
op|','
nl|'\n'
name|'network'
op|'.'
name|'get'
op|'('
string|"'mtu'"
op|')'
op|')'
newline|'\n'
name|'iface'
op|'='
string|"'vlan%s'"
op|'%'
name|'vlan'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'flat_interface'
name|'or'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_bridge'
op|'('
nl|'\n'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'iface'
op|','
nl|'\n'
name|'network'
op|','
name|'gateway'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'network'
op|'['
string|"'share_address'"
op|']'
name|'or'
name|'CONF'
op|'.'
name|'share_dhcp_address'
op|':'
newline|'\n'
indent|'            '
name|'isolate_dhcp_address'
op|'('
name|'iface'
op|','
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|')'
newline|'\n'
comment|"# NOTE(vish): applying here so we don't get a lock conflict"
nl|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
name|'return'
name|'network'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'network'
op|','
name|'gateway'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vlan'
op|'='
name|'network'
op|'.'
name|'get'
op|'('
string|"'vlan'"
op|')'
newline|'\n'
name|'if'
name|'vlan'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'iface'
op|'='
string|"'vlan%s'"
op|'%'
name|'vlan'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'remove_vlan_bridge'
op|'('
name|'vlan'
op|','
nl|'\n'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'flat_interface'
name|'or'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'remove_bridge'
op|'('
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'gateway'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'network'
op|'['
string|"'share_address'"
op|']'
name|'or'
name|'CONF'
op|'.'
name|'share_dhcp_address'
op|':'
newline|'\n'
indent|'            '
name|'remove_isolate_dhcp_address'
op|'('
name|'iface'
op|','
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_dev
dedent|''
name|'def'
name|'get_dev'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|ensure_vlan_bridge
name|'def'
name|'ensure_vlan_bridge'
op|'('
name|'vlan_num'
op|','
name|'bridge'
op|','
name|'bridge_interface'
op|','
nl|'\n'
name|'net_attrs'
op|'='
name|'None'
op|','
name|'mac_address'
op|'='
name|'None'
op|','
nl|'\n'
name|'mtu'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a vlan and bridge unless they already exist."""'
newline|'\n'
name|'interface'
op|'='
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|','
nl|'\n'
name|'bridge_interface'
op|','
name|'mac_address'
op|','
nl|'\n'
name|'mtu'
op|')'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|')'
newline|'\n'
name|'return'
name|'interface'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|remove_vlan_bridge
name|'def'
name|'remove_vlan_bridge'
op|'('
name|'vlan_num'
op|','
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a bridge and vlan."""'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'remove_bridge'
op|'('
name|'bridge'
op|')'
newline|'\n'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'remove_vlan'
op|'('
name|'vlan_num'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'lock_vlan'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|ensure_vlan
name|'def'
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|','
name|'bridge_interface'
op|','
name|'mac_address'
op|'='
name|'None'
op|','
name|'mtu'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a vlan unless it already exists."""'
newline|'\n'
name|'interface'
op|'='
string|"'vlan%s'"
op|'%'
name|'vlan_num'
newline|'\n'
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Starting VLAN interface %s'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'add'"
op|','
string|"'link'"
op|','
name|'bridge_interface'
op|','
nl|'\n'
string|"'name'"
op|','
name|'interface'
op|','
string|"'type'"
op|','
string|"'vlan'"
op|','
nl|'\n'
string|"'id'"
op|','
name|'vlan_num'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
comment|'# (danwent) the bridge will inherit this address, so we want to'
nl|'\n'
comment|'# make sure it is the value set from the NetworkManager'
nl|'\n'
name|'if'
name|'mac_address'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'interface'
op|','
string|"'address'"
op|','
nl|'\n'
name|'mac_address'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
dedent|''
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'interface'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
comment|'# NOTE(vish): set mtu every time to ensure that changes to mtu get'
nl|'\n'
comment|'#             propogated'
nl|'\n'
dedent|''
name|'_set_device_mtu'
op|'('
name|'interface'
op|','
name|'mtu'
op|')'
newline|'\n'
name|'return'
name|'interface'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'lock_vlan'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|remove_vlan
name|'def'
name|'remove_vlan'
op|'('
name|'vlan_num'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a vlan."""'
newline|'\n'
name|'vlan_interface'
op|'='
string|"'vlan%s'"
op|'%'
name|'vlan_num'
newline|'\n'
name|'delete_net_dev'
op|'('
name|'vlan_interface'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'lock_bridge'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|ensure_bridge
name|'def'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|','
name|'gateway'
op|'='
name|'True'
op|','
nl|'\n'
name|'filtering'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a bridge unless it already exists.\n\n        :param interface: the interface to create the bridge on.\n        :param net_attrs: dictionary with  attributes used to create bridge.\n        :param gateway: whether or not the bridge is a gateway.\n        :param filtering: whether or not to create filters on the bridge.\n\n        If net_attrs is set, it will add the net_attrs[\'gateway\'] to the bridge\n        using net_attrs[\'broadcast\'] and net_attrs[\'cidr\'].  It will also add\n        the ip_v6 address specified in net_attrs[\'cidr_v6\'] if use_ipv6 is set.\n\n        The code will attempt to move any ips that already exist on the\n        interface onto the bridge and reset the default gateway if necessary.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Starting Bridge %s'"
op|','
name|'bridge'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'addbr'"
op|','
name|'bridge'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'setfd'"
op|','
name|'bridge'
op|','
number|'0'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# _execute('brctl setageing %s 10' % bridge, run_as_root=True)"
nl|'\n'
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'stp'"
op|','
name|'bridge'
op|','
string|"'off'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# (danwent) bridge device MAC address can't be set directly."
nl|'\n'
comment|'# instead it inherits the MAC address of the first device on the'
nl|'\n'
comment|'# bridge, which will either be the vlan interface, or a'
nl|'\n'
comment|'# physical NIC.'
nl|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'bridge'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'interface'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Adding interface %(interface)s to bridge %(bridge)s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
op|'{'
string|"'interface'"
op|':'
name|'interface'
op|','
string|"'bridge'"
op|':'
name|'bridge'
op|'}'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'addif'"
op|','
name|'bridge'
op|','
name|'interface'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
op|'('
name|'err'
name|'and'
name|'err'
op|'!='
string|'"device %s is already a member of a bridge; "'
nl|'\n'
string|'"can\'t enslave it to bridge %s.\\n"'
op|'%'
op|'('
name|'interface'
op|','
name|'bridge'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to add interface: %s'"
op|')'
op|'%'
name|'err'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'interface'
op|','
string|"'up'"
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): This will break if there is already an ip on the'
nl|'\n'
comment|'#             interface, so we move any ips to the bridge'
nl|'\n'
comment|'# NOTE(danms): We also need to copy routes to the bridge so as'
nl|'\n'
comment|'#              not to break existing connectivity on the interface'
nl|'\n'
name|'old_routes'
op|'='
op|'['
op|']'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'route'"
op|','
string|"'show'"
op|','
string|"'dev'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
string|"'via'"
name|'in'
name|'fields'
op|':'
newline|'\n'
indent|'                    '
name|'old_routes'
op|'.'
name|'append'
op|'('
name|'fields'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'route'"
op|','
string|"'del'"
op|','
op|'*'
name|'fields'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
string|"'dev'"
op|','
name|'interface'
op|','
nl|'\n'
string|"'scope'"
op|','
string|"'global'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
name|'fields'
op|'['
number|'0'
op|']'
op|'=='
string|"'inet'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'fields'
op|'['
op|'-'
number|'2'
op|']'
name|'in'
op|'('
string|"'secondary'"
op|','
string|"'dynamic'"
op|','
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'params'
op|'='
name|'fields'
op|'['
number|'1'
op|':'
op|'-'
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'params'
op|'='
name|'fields'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'_execute'
op|'('
op|'*'
name|'_ip_bridge_cmd'
op|'('
string|"'del'"
op|','
name|'params'
op|','
name|'fields'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'_ip_bridge_cmd'
op|'('
string|"'add'"
op|','
name|'params'
op|','
name|'bridge'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'fields'
name|'in'
name|'old_routes'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'route'"
op|','
string|"'add'"
op|','
op|'*'
name|'fields'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'filtering'
op|':'
newline|'\n'
comment|"# Don't forward traffic unless we were told to be a gateway"
nl|'\n'
indent|'            '
name|'ipv4_filter'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
newline|'\n'
name|'if'
name|'gateway'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'rule'
name|'in'
name|'get_gateway_rules'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'ipv4_filter'
op|'.'
name|'add_rule'
op|'('
op|'*'
name|'rule'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ipv4_filter'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
op|'('
string|"'--in-interface %s -j %s'"
nl|'\n'
op|'%'
op|'('
name|'bridge'
op|','
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
op|')'
newline|'\n'
name|'ipv4_filter'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
op|'('
string|"'--out-interface %s -j %s'"
nl|'\n'
op|'%'
op|'('
name|'bridge'
op|','
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'lock_bridge'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|remove_bridge
name|'def'
name|'remove_bridge'
op|'('
name|'bridge'
op|','
name|'gateway'
op|'='
name|'True'
op|','
name|'filtering'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a bridge."""'
newline|'\n'
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'filtering'
op|':'
newline|'\n'
indent|'                '
name|'ipv4_filter'
op|'='
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
newline|'\n'
name|'if'
name|'gateway'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'rule'
name|'in'
name|'get_gateway_rules'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'ipv4_filter'
op|'.'
name|'remove_rule'
op|'('
op|'*'
name|'rule'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'drop_actions'
op|'='
op|'['
string|"'DROP'"
op|']'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|'!='
string|"'DROP'"
op|':'
newline|'\n'
indent|'                        '
name|'drop_actions'
op|'.'
name|'append'
op|'('
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'drop_action'
name|'in'
name|'drop_actions'
op|':'
newline|'\n'
indent|'                        '
name|'ipv4_filter'
op|'.'
name|'remove_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
op|'('
string|"'--in-interface %s -j %s'"
nl|'\n'
op|'%'
op|'('
name|'bridge'
op|','
name|'drop_action'
op|')'
op|')'
op|')'
newline|'\n'
name|'ipv4_filter'
op|'.'
name|'remove_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
op|'('
string|"'--out-interface %s -j %s'"
nl|'\n'
op|'%'
op|'('
name|'bridge'
op|','
name|'drop_action'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'delete_net_dev'
op|'('
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'ebtables'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|ensure_ebtables_rules
name|'def'
name|'ensure_ebtables_rules'
op|'('
name|'rules'
op|','
name|'table'
op|'='
string|"'filter'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
op|'['
string|"'ebtables'"
op|','
string|"'-t'"
op|','
name|'table'
op|','
string|"'-D'"
op|']'
op|'+'
name|'rule'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'cmd'
op|'['
number|'3'
op|']'
op|'='
string|"'-I'"
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'ebtables'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|remove_ebtables_rules
name|'def'
name|'remove_ebtables_rules'
op|'('
name|'rules'
op|','
name|'table'
op|'='
string|"'filter'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
op|'['
string|"'ebtables'"
op|','
string|"'-t'"
op|','
name|'table'
op|','
string|"'-D'"
op|']'
op|'+'
name|'rule'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isolate_dhcp_address
dedent|''
dedent|''
name|'def'
name|'isolate_dhcp_address'
op|'('
name|'interface'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
comment|'# block arp traffic to address across the interface'
nl|'\n'
indent|'    '
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'INPUT -p ARP -i %s --arp-ip-dst %s -j DROP'"
nl|'\n'
op|'%'
op|'('
name|'interface'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'OUTPUT -p ARP -o %s --arp-ip-src %s -j DROP'"
nl|'\n'
op|'%'
op|'('
name|'interface'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'FORWARD -p IPv4 -i %s --ip-protocol udp '"
nl|'\n'
string|"'--ip-destination-port 67:68 -j DROP'"
nl|'\n'
op|'%'
name|'interface'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'FORWARD -p IPv4 -o %s --ip-protocol udp '"
nl|'\n'
string|"'--ip-destination-port 67:68 -j DROP'"
nl|'\n'
op|'%'
name|'interface'
op|')'
newline|'\n'
comment|'# NOTE(vish): the above is not possible with iptables/arptables'
nl|'\n'
name|'ensure_ebtables_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_isolate_dhcp_address
dedent|''
name|'def'
name|'remove_isolate_dhcp_address'
op|'('
name|'interface'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
comment|'# block arp traffic to address across the interface'
nl|'\n'
indent|'    '
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'INPUT -p ARP -i %s --arp-ip-dst %s -j DROP'"
nl|'\n'
op|'%'
op|'('
name|'interface'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'OUTPUT -p ARP -o %s --arp-ip-src %s -j DROP'"
nl|'\n'
op|'%'
op|'('
name|'interface'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'FORWARD -p IPv4 -i %s --ip-protocol udp '"
nl|'\n'
string|"'--ip-destination-port 67:68 -j DROP'"
nl|'\n'
op|'%'
name|'interface'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
string|"'FORWARD -p IPv4 -o %s --ip-protocol udp '"
nl|'\n'
string|"'--ip-destination-port 67:68 -j DROP'"
nl|'\n'
op|'%'
name|'interface'
op|')'
newline|'\n'
name|'remove_ebtables_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
comment|'# NOTE(vish): the above is not possible with iptables/arptables'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_gateway_rules
dedent|''
name|'def'
name|'get_gateway_rules'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'interfaces'
op|'='
name|'CONF'
op|'.'
name|'forward_bridge_interface'
newline|'\n'
name|'if'
string|"'all'"
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'('
string|"'FORWARD'"
op|','
string|"'-i %s -j ACCEPT'"
op|'%'
name|'bridge'
op|')'
op|','
nl|'\n'
op|'('
string|"'FORWARD'"
op|','
string|"'-o %s -j ACCEPT'"
op|'%'
name|'bridge'
op|')'
op|']'
newline|'\n'
dedent|''
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'iface'
name|'in'
name|'CONF'
op|'.'
name|'forward_bridge_interface'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'iface'
op|':'
newline|'\n'
indent|'            '
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'FORWARD'"
op|','
string|"'-i %s -o %s -j ACCEPT'"
op|'%'
op|'('
name|'bridge'
op|','
nl|'\n'
name|'iface'
op|')'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'FORWARD'"
op|','
string|"'-i %s -o %s -j ACCEPT'"
op|'%'
op|'('
name|'iface'
op|','
nl|'\n'
name|'bridge'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'FORWARD'"
op|','
string|"'-i %s -o %s -j ACCEPT'"
op|'%'
op|'('
name|'bridge'
op|','
name|'bridge'
op|')'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'FORWARD'"
op|','
string|"'-i %s -j %s'"
op|'%'
op|'('
name|'bridge'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
op|')'
newline|'\n'
name|'rules'
op|'.'
name|'append'
op|'('
op|'('
string|"'FORWARD'"
op|','
string|"'-o %s -j %s'"
op|'%'
op|'('
name|'bridge'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'rules'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# plugs interfaces using Open vSwitch'
nl|'\n'
DECL|class|LinuxOVSInterfaceDriver
dedent|''
name|'class'
name|'LinuxOVSInterfaceDriver'
op|'('
name|'LinuxNetInterfaceDriver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|plug
indent|'    '
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'network'
op|','
name|'mac_address'
op|','
name|'gateway'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bridge'
op|'='
name|'CONF'
op|'.'
name|'linuxnet_ovs_integration_bridge'
newline|'\n'
name|'_ovs_vsctl'
op|'('
op|'['
string|"'--'"
op|','
string|"'--may-exist'"
op|','
string|"'add-port'"
op|','
name|'bridge'
op|','
name|'dev'
op|','
nl|'\n'
string|"'--'"
op|','
string|"'set'"
op|','
string|"'Interface'"
op|','
name|'dev'
op|','
string|"'type=internal'"
op|','
nl|'\n'
string|"'--'"
op|','
string|"'set'"
op|','
string|"'Interface'"
op|','
name|'dev'
op|','
nl|'\n'
string|"'external-ids:iface-id=%s'"
op|'%'
name|'dev'
op|','
nl|'\n'
string|"'--'"
op|','
string|"'set'"
op|','
string|"'Interface'"
op|','
name|'dev'
op|','
nl|'\n'
string|"'external-ids:iface-status=active'"
op|','
nl|'\n'
string|"'--'"
op|','
string|"'set'"
op|','
string|"'Interface'"
op|','
name|'dev'
op|','
nl|'\n'
string|"'external-ids:attached-mac=%s'"
op|'%'
name|'mac_address'
op|']'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'address'"
op|','
name|'mac_address'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_set_device_mtu'
op|'('
name|'dev'
op|','
name|'network'
op|'.'
name|'get'
op|'('
string|"'mtu'"
op|')'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'dev'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'gateway'
op|':'
newline|'\n'
comment|"# If we weren't instructed to act as a gateway then add the"
nl|'\n'
comment|'# appropriate flows to block all non-dhcp traffic.'
nl|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'ovs-ofctl'"
op|','
nl|'\n'
string|"'add-flow'"
op|','
name|'bridge'
op|','
string|"'priority=1,actions=drop'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ovs-ofctl'"
op|','
string|"'add-flow'"
op|','
name|'bridge'
op|','
nl|'\n'
string|"'udp,tp_dst=67,dl_dst=%s,priority=2,actions=normal'"
op|'%'
nl|'\n'
name|'mac_address'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# .. and make sure iptbles won't forward it as well."
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'--in-interface %s -j %s'"
op|'%'
op|'('
name|'bridge'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'--out-interface %s -j %s'"
op|'%'
op|'('
name|'bridge'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'rule'
name|'in'
name|'get_gateway_rules'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
op|'*'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'bridge'
op|'='
name|'CONF'
op|'.'
name|'linuxnet_ovs_integration_bridge'
newline|'\n'
name|'_ovs_vsctl'
op|'('
op|'['
string|"'--'"
op|','
string|"'--if-exists'"
op|','
string|"'del-port'"
op|','
name|'bridge'
op|','
name|'dev'
op|']'
op|')'
newline|'\n'
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
DECL|member|get_dev
dedent|''
name|'def'
name|'get_dev'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'='
string|"'gw-'"
op|'+'
name|'str'
op|'('
name|'network'
op|'['
string|"'uuid'"
op|']'
op|'['
number|'0'
op|':'
number|'11'
op|']'
op|')'
newline|'\n'
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# plugs interfaces using Linux Bridge when using NeutronManager'
nl|'\n'
DECL|class|NeutronLinuxBridgeInterfaceDriver
dedent|''
dedent|''
name|'class'
name|'NeutronLinuxBridgeInterfaceDriver'
op|'('
name|'LinuxNetInterfaceDriver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|BRIDGE_NAME_PREFIX
indent|'    '
name|'BRIDGE_NAME_PREFIX'
op|'='
string|"'brq'"
newline|'\n'
DECL|variable|GATEWAY_INTERFACE_PREFIX
name|'GATEWAY_INTERFACE_PREFIX'
op|'='
string|"'gw-'"
newline|'\n'
nl|'\n'
DECL|member|plug
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'network'
op|','
name|'mac_address'
op|','
name|'gateway'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'bridge'
op|'='
name|'self'
op|'.'
name|'get_bridge'
op|'('
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'gateway'
op|':'
newline|'\n'
comment|"# If we weren't instructed to act as a gateway then add the"
nl|'\n'
comment|'# appropriate flows to block all non-dhcp traffic.'
nl|'\n'
comment|"# .. and make sure iptbles won't forward it as well."
nl|'\n'
indent|'            '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
op|'('
string|"'--in-interface %s -j %s'"
nl|'\n'
op|'%'
op|'('
name|'bridge'
op|','
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
op|'('
string|"'--out-interface %s -j %s'"
nl|'\n'
op|'%'
op|'('
name|'bridge'
op|','
name|'CONF'
op|'.'
name|'iptables_drop_action'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'bridge'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'rule'
name|'in'
name|'get_gateway_rules'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
op|'*'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'create_tap_dev'
op|'('
name|'dev'
op|','
name|'mac_address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Starting bridge %s "'
op|','
name|'bridge'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'addbr'"
op|','
name|'bridge'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'setfd'"
op|','
name|'bridge'
op|','
name|'str'
op|'('
number|'0'
op|')'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'stp'"
op|','
name|'bridge'
op|','
string|"'off'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'bridge'
op|','
string|"'address'"
op|','
name|'mac_address'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'bridge'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Done starting bridge %s"'
op|','
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
name|'full_ip'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|"'/'"
op|')'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'address'"
op|','
string|"'add'"
op|','
name|'full_ip'
op|','
string|"'dev'"
op|','
name|'bridge'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'2'
op|','
number|'254'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'device_exists'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
DECL|member|get_dev
dedent|''
dedent|''
name|'def'
name|'get_dev'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev'
op|'='
name|'self'
op|'.'
name|'GATEWAY_INTERFACE_PREFIX'
op|'+'
name|'str'
op|'('
name|'network'
op|'['
string|"'uuid'"
op|']'
op|'['
number|'0'
op|':'
number|'11'
op|']'
op|')'
newline|'\n'
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
DECL|member|get_bridge
dedent|''
name|'def'
name|'get_bridge'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bridge'
op|'='
name|'self'
op|'.'
name|'BRIDGE_NAME_PREFIX'
op|'+'
name|'str'
op|'('
name|'network'
op|'['
string|"'uuid'"
op|']'
op|'['
number|'0'
op|':'
number|'11'
op|']'
op|')'
newline|'\n'
name|'return'
name|'bridge'
newline|'\n'
nl|'\n'
comment|'# provide compatibility with existing configs'
nl|'\n'
DECL|variable|QuantumLinuxBridgeInterfaceDriver
dedent|''
dedent|''
name|'QuantumLinuxBridgeInterfaceDriver'
op|'='
name|'NeutronLinuxBridgeInterfaceDriver'
newline|'\n'
nl|'\n'
DECL|variable|iptables_manager
name|'iptables_manager'
op|'='
name|'IptablesManager'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Implements vlans, bridges, and iptables rules using linux utilities."""'
newline|'\n'
nl|'\n'
name|'import'
name|'calendar'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.linux_net"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_bin_file
name|'def'
name|'_bin_file'
op|'('
name|'script'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the absolute path to scipt in the bin directory."""'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'__file__'
op|','
string|"'../../../bin'"
op|','
name|'script'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
dedent|''
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dhcpbridge_flagfile'"
op|','
nl|'\n'
string|"'/etc/nova/nova-dhcpbridge.conf'"
op|','
nl|'\n'
string|"'location of flagfile for dhcpbridge'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dhcp_domain'"
op|','
nl|'\n'
string|"'novalocal'"
op|','
nl|'\n'
string|"'domain to use for building the hostnames'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'networks_path'"
op|','
string|"'$state_path/networks'"
op|','
nl|'\n'
string|"'Location to keep network config files'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_interface'"
op|','
string|"'eth0'"
op|','
nl|'\n'
string|"'Interface for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dhcpbridge'"
op|','
name|'_bin_file'
op|'('
string|"'nova-dhcpbridge'"
op|')'
op|','
nl|'\n'
string|"'location of nova-dhcpbridge'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'routing_source_ip'"
op|','
string|"'$my_ip'"
op|','
nl|'\n'
string|"'Public IP of network host'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'input_chain'"
op|','
string|"'INPUT'"
op|','
nl|'\n'
string|"'chain to add nova_input to'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'dhcp_lease_time'"
op|','
number|'120'
op|','
nl|'\n'
string|"'Lifetime of a DHCP lease'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dns_server'"
op|','
name|'None'
op|','
nl|'\n'
string|"'if set, uses specific dns server for dnsmasq'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dmz_cidr'"
op|','
string|"'10.128.0.0/24'"
op|','
nl|'\n'
string|"'dmz range that should be accepted'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dnsmasq_config_file'"
op|','
string|'""'
op|','
nl|'\n'
string|"'Override the default dnsmasq settings with this file'"
op|')'
newline|'\n'
DECL|variable|binary_name
name|'binary_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'inspect'
op|'.'
name|'stack'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesRule
name|'class'
name|'IptablesRule'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An iptables rule.\n\n    You shouldn\'t need to use this class directly, it\'s only used by\n    IptablesManager.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|','
name|'top'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chain'
op|'='
name|'chain'
newline|'\n'
name|'self'
op|'.'
name|'rule'
op|'='
name|'rule'
newline|'\n'
name|'self'
op|'.'
name|'wrap'
op|'='
name|'wrap'
newline|'\n'
name|'self'
op|'.'
name|'top'
op|'='
name|'top'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'self'
op|'.'
name|'chain'
op|'=='
name|'other'
op|'.'
name|'chain'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'rule'
op|'=='
name|'other'
op|'.'
name|'rule'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'top'
op|'=='
name|'other'
op|'.'
name|'top'
op|')'
name|'and'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'wrap'
op|'=='
name|'other'
op|'.'
name|'wrap'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'self'
op|'=='
name|'other'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'chain'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'self'
op|'.'
name|'chain'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chain'
op|'='
name|'self'
op|'.'
name|'chain'
newline|'\n'
dedent|''
name|'return'
string|"'-A %s %s'"
op|'%'
op|'('
name|'chain'
op|','
name|'self'
op|'.'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesTable
dedent|''
dedent|''
name|'class'
name|'IptablesTable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An iptables table."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'chains'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unwrapped_chains'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_chain
dedent|''
name|'def'
name|'add_chain'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a named chain to the table.\n\n        The chain name is wrapped to be unique for the component creating\n        it, so different components of Nova can safely create identically\n        named chains without interfering with one another.\n\n        At the moment, its wrapped name is <binary name>-<chain name>,\n        so if nova-compute creates a chain named \'OUTPUT\', it\'ll actually\n        end up named \'nova-compute-OUTPUT\'.\n\n        """'
newline|'\n'
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'chains'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unwrapped_chains'
op|'.'
name|'add'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_chain
dedent|''
dedent|''
name|'def'
name|'remove_chain'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove named chain.\n\n        This removal "cascades". All rule in the chain are removed, as are\n        all rules in other chains that jump to it.\n\n        If the chain is not found, this is merely logged.\n\n        """'
newline|'\n'
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'chain_set'
op|'='
name|'self'
op|'.'
name|'chains'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'chain_set'
op|'='
name|'self'
op|'.'
name|'unwrapped_chains'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'chain_set'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Attempted to remove chain %s which does not exist'"
op|')'
op|','
nl|'\n'
name|'name'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'chain_set'
op|'.'
name|'remove'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'r'
op|'.'
name|'chain'
op|'!='
name|'name'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'wrap'
op|':'
newline|'\n'
indent|'            '
name|'jump_snippet'
op|'='
string|"'-j %s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'jump_snippet'
op|'='
string|"'-j %s'"
op|'%'
op|'('
name|'name'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'r'
op|':'
name|'jump_snippet'
name|'not'
name|'in'
name|'r'
op|'.'
name|'rule'
op|','
name|'self'
op|'.'
name|'rules'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_rule
dedent|''
name|'def'
name|'add_rule'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|','
name|'top'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a rule to the table.\n\n        This is just like what you\'d feed to iptables, just without\n        the \'-A <chain name>\' bit at the start.\n\n        However, if you need to jump to one of your wrapped chains,\n        prepend its name with a \'$\' which will ensure the wrapping\n        is applied correctly.\n\n        """'
newline|'\n'
name|'if'
name|'wrap'
name|'and'
name|'chain'
name|'not'
name|'in'
name|'self'
op|'.'
name|'chains'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Unknown chain: %r'"
op|')'
op|'%'
name|'chain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'$'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'            '
name|'rule'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'self'
op|'.'
name|'_wrap_target_chain'
op|','
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'rules'
op|'.'
name|'append'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|','
name|'top'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wrap_target_chain
dedent|''
name|'def'
name|'_wrap_target_chain'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"'$'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'s'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|remove_rule
dedent|''
name|'def'
name|'remove_rule'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|'='
name|'True'
op|','
name|'top'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a rule from a chain.\n\n        Note: The rule must be exactly identical to the one that was added.\n        You cannot switch arguments around like you can with the iptables\n        CLI tool.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rules'
op|'.'
name|'remove'
op|'('
name|'IptablesRule'
op|'('
name|'chain'
op|','
name|'rule'
op|','
name|'wrap'
op|','
name|'top'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Tried to remove rule that was not there:'"
nl|'\n'
string|"' %(chain)r %(rule)r %(wrap)r %(top)r'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'chain'"
op|':'
name|'chain'
op|','
string|"'rule'"
op|':'
name|'rule'
op|','
nl|'\n'
string|"'top'"
op|':'
name|'top'
op|','
string|"'wrap'"
op|':'
name|'wrap'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|empty_chain
dedent|''
dedent|''
name|'def'
name|'empty_chain'
op|'('
name|'self'
op|','
name|'chain'
op|','
name|'wrap'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all rules from a chain."""'
newline|'\n'
name|'chained_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
name|'chain'
name|'and'
name|'rule'
op|'.'
name|'wrap'
op|'=='
name|'wrap'
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'chained_rules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rules'
op|'.'
name|'remove'
op|'('
name|'rule'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesManager
dedent|''
dedent|''
dedent|''
name|'class'
name|'IptablesManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper for iptables.\n\n    See IptablesTable for some usage docs\n\n    A number of chains are set up to begin with.\n\n    First, nova-filter-top. It\'s added at the top of FORWARD and OUTPUT. Its\n    name is not wrapped, so it\'s shared between the various nova workers. It\'s\n    intended for rules that need to live at the top of the FORWARD and OUTPUT\n    chains. It\'s in both the ipv4 and ipv6 set of tables.\n\n    For ipv4 and ipv6, the builtin INPUT, OUTPUT, and FORWARD filter chains are\n    wrapped, meaning that the "real" INPUT chain has a rule that jumps to the\n    wrapped INPUT chain, etc. Additionally, there\'s a wrapped chain named\n    "local" which is jumped to from nova-filter-top.\n\n    For ipv4, the builtin PREROUTING, OUTPUT, and POSTROUTING nat chains are\n    wrapped in the same was as the builtin filter chains. Additionally, there\'s\n    a snat chain that is applied after the POSTROUTING chain.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'execute'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'execute'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'execute'
op|'='
name|'_execute'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'execute'
op|'='
name|'execute'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'ipv4'
op|'='
op|'{'
string|"'filter'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|','
nl|'\n'
string|"'nat'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'ipv6'
op|'='
op|'{'
string|"'filter'"
op|':'
name|'IptablesTable'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
comment|"# Add a nova-filter-top chain. It's intended to be shared"
nl|'\n'
comment|'# among the various nova components. It sits at the very top'
nl|'\n'
comment|'# of FORWARD and OUTPUT.'
nl|'\n'
name|'for'
name|'tables'
name|'in'
op|'['
name|'self'
op|'.'
name|'ipv4'
op|','
name|'self'
op|'.'
name|'ipv6'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'nova-filter-top'"
op|','
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
string|"'-j nova-filter-top'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|','
name|'top'
op|'='
name|'True'
op|')'
newline|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'OUTPUT'"
op|','
string|"'-j nova-filter-top'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|','
name|'top'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'local'"
op|')'
newline|'\n'
name|'tables'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'nova-filter-top'"
op|','
string|"'-j $local'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wrap the builtin chains'
nl|'\n'
dedent|''
name|'builtin_chains'
op|'='
op|'{'
number|'4'
op|':'
op|'{'
string|"'filter'"
op|':'
op|'['
string|"'INPUT'"
op|','
string|"'OUTPUT'"
op|','
string|"'FORWARD'"
op|']'
op|','
nl|'\n'
string|"'nat'"
op|':'
op|'['
string|"'PREROUTING'"
op|','
string|"'OUTPUT'"
op|','
string|"'POSTROUTING'"
op|']'
op|'}'
op|','
nl|'\n'
number|'6'
op|':'
op|'{'
string|"'filter'"
op|':'
op|'['
string|"'INPUT'"
op|','
string|"'OUTPUT'"
op|','
string|"'FORWARD'"
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'ip_version'
name|'in'
name|'builtin_chains'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ip_version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'tables'
op|'='
name|'self'
op|'.'
name|'ipv4'
newline|'\n'
dedent|''
name|'elif'
name|'ip_version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                '
name|'tables'
op|'='
name|'self'
op|'.'
name|'ipv6'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'table'
op|','
name|'chains'
name|'in'
name|'builtin_chains'
op|'['
name|'ip_version'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'chain'
name|'in'
name|'chains'
op|':'
newline|'\n'
indent|'                    '
name|'tables'
op|'['
name|'table'
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain'
op|')'
newline|'\n'
name|'tables'
op|'['
name|'table'
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain'
op|','
string|"'-j $%s'"
op|'%'
op|'('
name|'chain'
op|','
op|')'
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|"# Add a nova-postrouting-bottom chain. It's intended to be shared"
nl|'\n'
comment|'# among the various nova components. We set it as the last chain'
nl|'\n'
comment|'# of POSTROUTING chain.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'nova-postrouting-bottom'"
op|','
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
string|"'-j nova-postrouting-bottom'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# We add a snat chain to the shared nova-postrouting-bottom chain'
nl|'\n'
comment|"# so that it's applied last."
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'snat'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'nova-postrouting-bottom'"
op|','
string|"'-j $snat'"
op|','
nl|'\n'
name|'wrap'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# And then we add a floating-snat chain and jump to first thing in'
nl|'\n'
comment|'# the snat chain.'
nl|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'floating-snat'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'snat'"
op|','
string|"'-j $floating-snat'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'iptables'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|apply
name|'def'
name|'apply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply the current in-memory set of iptables rules.\n\n        This will blow away any rules left over from previous runs of the\n        same component of Nova, and replace them with our current set of\n        rules. This happens atomically, thanks to iptables-restore.\n\n        """'
newline|'\n'
name|'s'
op|'='
op|'['
op|'('
string|"'iptables'"
op|','
name|'self'
op|'.'
name|'ipv4'
op|')'
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
op|'['
op|'('
string|"'ip6tables'"
op|','
name|'self'
op|'.'
name|'ipv6'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cmd'
op|','
name|'tables'
name|'in'
name|'s'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'table'
name|'in'
name|'tables'
op|':'
newline|'\n'
indent|'                '
name|'current_table'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
string|"'%s-save'"
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|','
nl|'\n'
string|"'-t'"
op|','
string|"'%s'"
op|'%'
op|'('
name|'table'
op|','
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'attempts'
op|'='
number|'5'
op|')'
newline|'\n'
name|'current_lines'
op|'='
name|'current_table'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'new_filter'
op|'='
name|'self'
op|'.'
name|'_modify_rules'
op|'('
name|'current_lines'
op|','
nl|'\n'
name|'tables'
op|'['
name|'table'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute'
op|'('
string|"'%s-restore'"
op|'%'
op|'('
name|'cmd'
op|','
op|')'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'new_filter'
op|')'
op|','
nl|'\n'
name|'attempts'
op|'='
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_modify_rules
dedent|''
dedent|''
dedent|''
name|'def'
name|'_modify_rules'
op|'('
name|'self'
op|','
name|'current_lines'
op|','
name|'table'
op|','
name|'binary'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unwrapped_chains'
op|'='
name|'table'
op|'.'
name|'unwrapped_chains'
newline|'\n'
name|'chains'
op|'='
name|'table'
op|'.'
name|'chains'
newline|'\n'
name|'rules'
op|'='
name|'table'
op|'.'
name|'rules'
newline|'\n'
nl|'\n'
comment|'# Remove any trace of our rules'
nl|'\n'
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'line'
op|':'
name|'binary_name'
name|'not'
name|'in'
name|'line'
op|','
nl|'\n'
name|'current_lines'
op|')'
newline|'\n'
nl|'\n'
name|'seen_chains'
op|'='
name|'False'
newline|'\n'
name|'rules_index'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'rules_index'
op|','
name|'rule'
name|'in'
name|'enumerate'
op|'('
name|'new_filter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'seen_chains'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'seen_chains'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'rule'
op|'.'
name|'startswith'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'our_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'rule_str'
op|'='
name|'str'
op|'('
name|'rule'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'top'
op|':'
newline|'\n'
comment|'# rule.top == True means we want this rule to be at the top.'
nl|'\n'
comment|'# Further down, we weed out duplicates from the bottom of the'
nl|'\n'
comment|'# list, so here we remove the dupes ahead of time.'
nl|'\n'
indent|'                '
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'s'
op|':'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|'!='
name|'rule_str'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
name|'new_filter'
op|')'
newline|'\n'
dedent|''
name|'our_rules'
op|'+='
op|'['
name|'rule_str'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
name|'our_rules'
newline|'\n'
nl|'\n'
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
op|'['
string|"':%s - [0:0]'"
op|'%'
op|'('
name|'name'
op|','
op|')'
name|'for'
name|'name'
name|'in'
name|'unwrapped_chains'
op|']'
newline|'\n'
name|'new_filter'
op|'['
name|'rules_index'
op|':'
name|'rules_index'
op|']'
op|'='
op|'['
string|"':%s-%s - [0:0]'"
op|'%'
op|'('
name|'binary_name'
op|','
name|'name'
op|','
op|')'
name|'for'
name|'name'
name|'in'
name|'chains'
op|']'
newline|'\n'
nl|'\n'
name|'seen_lines'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_weed_out_duplicates
name|'def'
name|'_weed_out_duplicates'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'line'
name|'in'
name|'seen_lines'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'seen_lines'
op|'.'
name|'add'
op|'('
name|'line'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|'# We filter duplicates, letting the *last* occurrence take'
nl|'\n'
comment|'# precendence.'
nl|'\n'
dedent|''
dedent|''
name|'new_filter'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'new_filter'
op|'='
name|'filter'
op|'('
name|'_weed_out_duplicates'
op|','
name|'new_filter'
op|')'
newline|'\n'
name|'new_filter'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'return'
name|'new_filter'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_forward
dedent|''
dedent|''
name|'def'
name|'metadata_forward'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create forwarding rule for metadata."""'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'PREROUTING'"
op|','
nl|'\n'
string|"'-s 0.0.0.0/0 -d 169.254.169.254/32 '"
nl|'\n'
string|"'-p tcp -m tcp --dport 80 -j DNAT '"
nl|'\n'
string|"'--to-destination %s:%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'ec2_dmz_host'
op|','
name|'FLAGS'
op|'.'
name|'ec2_port'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic networking setup goes here."""'
newline|'\n'
comment|'# NOTE(devcamcar): Cloud public SNAT entries and the default'
nl|'\n'
comment|'# SNAT rule for outbound traffic.'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'snat'"
op|','
nl|'\n'
string|"'-s %s -j SNAT --to-source %s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'fixed_range'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'routing_source_ip'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-s %s -d %s -j ACCEPT'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'fixed_range'
op|','
name|'FLAGS'
op|'.'
name|'dmz_cidr'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'POSTROUTING'"
op|','
nl|'\n'
string|"'-s %(range)s -d %(range)s '"
nl|'\n'
string|"'-j ACCEPT'"
op|'%'
op|'{'
string|"'range'"
op|':'
name|'FLAGS'
op|'.'
name|'fixed_range'
op|'}'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bind_floating_ip
dedent|''
name|'def'
name|'bind_floating_ip'
op|'('
name|'floating_ip'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bind ip to public interface."""'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'add'"
op|','
name|'floating_ip'
op|','
nl|'\n'
string|"'dev'"
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unbind_floating_ip
dedent|''
name|'def'
name|'unbind_floating_ip'
op|'('
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unbind a public ip from public interface."""'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'del'"
op|','
name|'floating_ip'
op|','
nl|'\n'
string|"'dev'"
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_metadata_ip
dedent|''
name|'def'
name|'ensure_metadata_ip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up local metadata ip."""'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'add'"
op|','
string|"'169.254.169.254/32'"
op|','
nl|'\n'
string|"'scope'"
op|','
string|"'link'"
op|','
string|"'dev'"
op|','
string|"'lo'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_vlan_forward
dedent|''
name|'def'
name|'ensure_vlan_forward'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up forwarding rules for vlan."""'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'-d %s -p udp '"
nl|'\n'
string|"'--dport 1194 '"
nl|'\n'
string|"'-j ACCEPT'"
op|'%'
name|'private_ip'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'PREROUTING'"
op|','
nl|'\n'
string|"'-d %s -p udp '"
nl|'\n'
string|"'--dport %s -j DNAT --to %s:1194'"
op|'%'
nl|'\n'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|'"OUTPUT"'
op|','
nl|'\n'
string|'"-d %s -p udp "'
nl|'\n'
string|'"--dport %s -j DNAT --to %s:1194"'
op|'%'
nl|'\n'
op|'('
name|'public_ip'
op|','
name|'port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_floating_forward
dedent|''
name|'def'
name|'ensure_floating_forward'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure floating ip forwarding rule."""'
newline|'\n'
name|'for'
name|'chain'
op|','
name|'rule'
name|'in'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_floating_forward
dedent|''
name|'def'
name|'remove_floating_forward'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove forwarding for floating ip."""'
newline|'\n'
name|'for'
name|'chain'
op|','
name|'rule'
name|'in'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|'.'
name|'remove_rule'
op|'('
name|'chain'
op|','
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'iptables_manager'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_forward_rules
dedent|''
name|'def'
name|'floating_forward_rules'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
op|'('
string|"'PREROUTING'"
op|','
string|"'-d %s -j DNAT --to %s'"
op|'%'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'OUTPUT'"
op|','
string|"'-d %s -j DNAT --to %s'"
op|'%'
op|'('
name|'floating_ip'
op|','
name|'fixed_ip'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'floating-snat'"
op|','
nl|'\n'
string|"'-s %s -j SNAT --to %s'"
op|'%'
op|'('
name|'fixed_ip'
op|','
name|'floating_ip'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_vlan_bridge
dedent|''
name|'def'
name|'ensure_vlan_bridge'
op|'('
name|'vlan_num'
op|','
name|'bridge'
op|','
name|'bridge_interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a vlan and bridge unless they already exist."""'
newline|'\n'
name|'interface'
op|'='
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|','
name|'bridge_interface'
op|')'
newline|'\n'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|')'
newline|'\n'
name|'return'
name|'interface'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'ensure_vlan'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|ensure_vlan
name|'def'
name|'ensure_vlan'
op|'('
name|'vlan_num'
op|','
name|'bridge_interface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a vlan unless it already exists."""'
newline|'\n'
name|'interface'
op|'='
string|"'vlan%s'"
op|'%'
name|'vlan_num'
newline|'\n'
name|'if'
name|'not'
name|'_device_exists'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Starting VLAN inteface %s'"
op|')'
op|','
name|'interface'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'vconfig'"
op|','
string|"'set_name_type'"
op|','
string|"'VLAN_PLUS_VID_NO_PAD'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'vconfig'"
op|','
string|"'add'"
op|','
name|'bridge_interface'
op|','
name|'vlan_num'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'interface'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'interface'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'ensure_bridge'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|function|ensure_bridge
name|'def'
name|'ensure_bridge'
op|'('
name|'bridge'
op|','
name|'interface'
op|','
name|'net_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a bridge unless it already exists.\n\n    :param interface: the interface to create the bridge on.\n    :param net_attrs: dictionary with  attributes used to create the bridge.\n\n    If net_attrs is set, it will add the net_attrs[\'gateway\'] to the bridge\n    using net_attrs[\'broadcast\'] and net_attrs[\'cidr\'].  It will also add\n    the ip_v6 address specified in net_attrs[\'cidr_v6\'] if use_ipv6 is set.\n\n    The code will attempt to move any ips that already exist on the interface\n    onto the bridge and reset the default gateway if necessary.\n\n    """'
newline|'\n'
name|'if'
name|'not'
name|'_device_exists'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Starting Bridge interface for %s'"
op|')'
op|','
name|'interface'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'addbr'"
op|','
name|'bridge'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'setfd'"
op|','
name|'bridge'
op|','
number|'0'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# _execute('sudo brctl setageing %s 10' % bridge)"
nl|'\n'
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'stp'"
op|','
name|'bridge'
op|','
string|"'off'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'bridge'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'net_attrs'
op|':'
newline|'\n'
comment|'# NOTE(vish): The ip for dnsmasq has to be the first address on the'
nl|'\n'
comment|'#             bridge for it to respond to reqests properly'
nl|'\n'
indent|'        '
name|'suffix'
op|'='
name|'net_attrs'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|"'/'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'add'"
op|','
nl|'\n'
string|"'%s/%s'"
op|'%'
nl|'\n'
op|'('
name|'net_attrs'
op|'['
string|"'dhcp_server'"
op|']'
op|','
name|'suffix'
op|')'
op|','
nl|'\n'
string|"'brd'"
op|','
nl|'\n'
name|'net_attrs'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'dev'"
op|','
nl|'\n'
name|'bridge'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'err'
name|'and'
name|'err'
op|'!='
string|"'RTNETLINK answers: File exists\\n'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|"'Failed to add ip: %s'"
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet6'"
op|','
string|"'addr'"
op|','
nl|'\n'
string|"'change'"
op|','
name|'net_attrs'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
string|"'dev'"
op|','
name|'bridge'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# NOTE(vish): If the public interface is the same as the'
nl|'\n'
comment|'#             bridge, then the bridge has to be in promiscuous'
nl|'\n'
comment|'#             to forward packets properly.'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'public_interface'
op|'=='
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
nl|'\n'
string|"'dev'"
op|','
name|'bridge'
op|','
string|"'promisc'"
op|','
string|"'on'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'interface'
op|':'
newline|'\n'
comment|'# NOTE(vish): This will break if there is already an ip on the'
nl|'\n'
comment|'#             interface, so we move any ips to the bridge'
nl|'\n'
indent|'        '
name|'gateway'
op|'='
name|'None'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'route'"
op|','
string|"'-n'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
name|'fields'
op|'['
number|'0'
op|']'
op|'=='
string|"'0.0.0.0'"
name|'and'
name|'fields'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
name|'interface'
op|':'
newline|'\n'
indent|'                '
name|'gateway'
op|'='
name|'fields'
op|'['
number|'1'
op|']'
newline|'\n'
name|'_execute'
op|'('
string|"'route'"
op|','
string|"'del'"
op|','
string|"'default'"
op|','
string|"'gw'"
op|','
name|'gateway'
op|','
nl|'\n'
string|"'dev'"
op|','
name|'interface'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
string|"'dev'"
op|','
name|'interface'
op|','
nl|'\n'
string|"'scope'"
op|','
string|"'global'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
name|'and'
name|'fields'
op|'['
number|'0'
op|']'
op|'=='
string|"'inet'"
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'='
name|'fields'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'_ip_bridge_cmd'
op|'('
string|"'del'"
op|','
name|'params'
op|','
name|'fields'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'_ip_bridge_cmd'
op|'('
string|"'add'"
op|','
name|'params'
op|','
name|'bridge'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'gateway'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'route'"
op|','
string|"'add'"
op|','
string|"'default'"
op|','
string|"'gw'"
op|','
name|'gateway'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'_execute'
op|'('
string|"'brctl'"
op|','
string|"'addif'"
op|','
name|'bridge'
op|','
name|'interface'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'err'
name|'and'
name|'err'
op|'!='
string|'"device %s is already a member of a bridge; can\'t "'
nl|'\n'
string|'"enslave it to bridge %s.\\n"'
op|'%'
op|'('
name|'interface'
op|','
name|'bridge'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|"'Failed to add interface: %s'"
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'--in-interface %s -j ACCEPT'"
op|'%'
name|'bridge'
op|')'
newline|'\n'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'FORWARD'"
op|','
nl|'\n'
string|"'--out-interface %s -j ACCEPT'"
op|'%'
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dhcp_leases
dedent|''
name|'def'
name|'get_dhcp_leases'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a network\'s hosts config in dnsmasq leasefile format."""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fixed_ref'
name|'in'
name|'db'
op|'.'
name|'network_get_associated_fixed_ips'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'fixed_ref'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
name|'and'
name|'FLAGS'
op|'.'
name|'host'
op|'!='
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_lease'
op|'('
name|'fixed_ref'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dhcp_hosts
dedent|''
name|'def'
name|'get_dhcp_hosts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get network\'s hosts config in dhcp-host format."""'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fixed_ref'
name|'in'
name|'db'
op|'.'
name|'network_get_associated_fixed_ips'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'fixed_ref'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'network_ref'
op|'['
string|"'multi_host'"
op|']'
name|'and'
name|'FLAGS'
op|'.'
name|'host'
op|'!='
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'hosts'
op|'.'
name|'append'
op|'('
name|'_host_dhcp'
op|'('
name|'fixed_ref'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(ja): Sending a HUP only reloads the hostfile, so any'
nl|'\n'
comment|'#           configuration options (like dchp-range, vlan, ...)'
nl|'\n'
comment|"#           aren't reloaded."
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'dnsmasq_start'"
op|')'
newline|'\n'
DECL|function|update_dhcp
name|'def'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""(Re)starts a dnsmasq server for a given network.\n\n    If a dnsmasq instance is already running then send a HUP\n    signal causing it to reload, otherwise spawn a new instance.\n\n    """'
newline|'\n'
name|'conffile'
op|'='
name|'_dhcp_file'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'conffile'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'write'
op|'('
name|'get_dhcp_hosts'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure dnsmasq can actually read it (it setuid()s to "nobody")'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'chmod'
op|'('
name|'conffile'
op|','
number|'0644'
op|')'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
name|'_dnsmasq_pid_for'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# if dnsmasq is already running, then tell it to reload'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat'"
op|','
string|"'/proc/%d/cmdline'"
op|'%'
name|'pid'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'conffile'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'kill'"
op|','
string|"'-HUP'"
op|','
name|'pid'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable=W0703'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Hupping dnsmasq threw %s'"
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Pid %d is stale, relaunching dnsmasq'"
op|')'
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
comment|'# FLAGFILE and DNSMASQ_INTERFACE in env'
nl|'\n'
dedent|''
dedent|''
name|'env'
op|'='
op|'{'
string|"'FLAGFILE'"
op|':'
name|'FLAGS'
op|'.'
name|'dhcpbridge_flagfile'
op|','
nl|'\n'
string|"'DNSMASQ_INTERFACE'"
op|':'
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|'}'
newline|'\n'
name|'command'
op|'='
name|'_dnsmasq_cmd'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'command'
op|','
name|'addl_env'
op|'='
name|'env'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'radvd_start'"
op|')'
newline|'\n'
DECL|function|update_ra
name|'def'
name|'update_ra'
op|'('
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'conffile'
op|'='
name|'_ra_file'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'conffile'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'conf_str'
op|'='
string|'"""\ninterface %s\n{\n   AdvSendAdvert on;\n   MinRtrAdvInterval 3;\n   MaxRtrAdvInterval 10;\n   prefix %s\n   {\n        AdvOnLink on;\n        AdvAutonomous on;\n   };\n};\n"""'
op|'%'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
name|'network_ref'
op|'['
string|"'cidr_v6'"
op|']'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'conf_str'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure radvd can actually read it (it setuid()s to "nobody")'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'chmod'
op|'('
name|'conffile'
op|','
number|'0644'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|pid
name|'pid'
op|'='
name|'_ra_pid_for'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# if radvd is already running, then tell it to reload'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'_execute'
op|'('
string|"'cat'"
op|','
string|"'/proc/%d/cmdline'"
nl|'\n'
op|'%'
name|'pid'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'conffile'
name|'in'
name|'out'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'_execute'
op|'('
string|"'kill'"
op|','
name|'pid'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable=W0703'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'killing radvd threw %s'"
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Pid %d is stale, relaunching radvd'"
op|')'
op|','
name|'pid'
op|')'
newline|'\n'
DECL|variable|command
dedent|''
dedent|''
name|'command'
op|'='
name|'_ra_cmd'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'_execute'
op|'('
op|'*'
name|'command'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_lease
dedent|''
name|'def'
name|'_host_lease'
op|'('
name|'fixed_ip_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a host string for an address in leasefile format."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'updated_at'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'instance_ref'
op|'['
string|"'updated_at'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'timestamp'
op|'='
name|'instance_ref'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'seconds_since_epoch'
op|'='
name|'calendar'
op|'.'
name|'timegm'
op|'('
name|'timestamp'
op|'.'
name|'utctimetuple'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
string|"'%d %s %s %s *'"
op|'%'
op|'('
name|'seconds_since_epoch'
op|'+'
name|'FLAGS'
op|'.'
name|'dhcp_lease_time'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'virtual_interface'"
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
name|'or'
string|"'*'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_host_dhcp
dedent|''
name|'def'
name|'_host_dhcp'
op|'('
name|'fixed_ip_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a host string for an address in dhcp-host format."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'return'
string|"'%s,%s.%s,%s'"
op|'%'
op|'('
name|'fixed_ip_ref'
op|'['
string|"'virtual_interface'"
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'dhcp_domain'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_execute
dedent|''
name|'def'
name|'_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper around utils._execute for fake_network."""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'FAKE NET: %s'"
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'cmd'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
string|"'fake'"
op|','
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_device_exists
dedent|''
dedent|''
name|'def'
name|'_device_exists'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if ethernet device exists."""'
newline|'\n'
op|'('
name|'_out'
op|','
name|'err'
op|')'
op|'='
name|'_execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'show'"
op|','
string|"'dev'"
op|','
name|'device'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'return'
name|'not'
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dnsmasq_cmd
dedent|''
name|'def'
name|'_dnsmasq_cmd'
op|'('
name|'net'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds dnsmasq command."""'
newline|'\n'
name|'cmd'
op|'='
op|'['
string|"'sudo'"
op|','
string|"'-E'"
op|','
string|"'dnsmasq'"
op|','
nl|'\n'
string|"'--strict-order'"
op|','
nl|'\n'
string|"'--bind-interfaces'"
op|','
nl|'\n'
string|"'--interface=%s'"
op|'%'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
string|"'--conf-file=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dnsmasq_config_file'
op|','
nl|'\n'
string|"'--domain=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dhcp_domain'
op|','
nl|'\n'
string|"'--pid-file=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'pid'"
op|')'
op|','
nl|'\n'
string|"'--listen-address=%s'"
op|'%'
name|'net'
op|'['
string|"'dhcp_server'"
op|']'
op|','
nl|'\n'
string|"'--except-interface=lo'"
op|','
nl|'\n'
string|"'--dhcp-range=%s,static,120s'"
op|'%'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|','
nl|'\n'
string|"'--dhcp-lease-max=%s'"
op|'%'
name|'len'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
string|"'--dhcp-hostsfile=%s'"
op|'%'
name|'_dhcp_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
op|','
nl|'\n'
string|"'--dhcp-script=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dhcpbridge'
op|','
nl|'\n'
string|"'--leasefile-ro'"
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'dns_server'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'+='
op|'['
string|"'-h'"
op|','
string|"'-R'"
op|','
string|"'--server=%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'dns_server'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'cmd'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_cmd
dedent|''
name|'def'
name|'_ra_cmd'
op|'('
name|'net'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds radvd command."""'
newline|'\n'
name|'cmd'
op|'='
op|'['
string|"'sudo'"
op|','
string|"'-E'"
op|','
string|"'radvd'"
op|','
nl|'\n'
comment|"#           '-u', 'nobody',"
nl|'\n'
string|"'-C'"
op|','
string|"'%s'"
op|'%'
name|'_ra_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'conf'"
op|')'
op|','
nl|'\n'
string|"'-p'"
op|','
string|"'%s'"
op|'%'
name|'_ra_file'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'pid'"
op|')'
op|']'
newline|'\n'
name|'return'
name|'cmd'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_stop_dnsmasq
dedent|''
name|'def'
name|'_stop_dnsmasq'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stops the dnsmasq instance for a given network."""'
newline|'\n'
name|'pid'
op|'='
name|'_dnsmasq_pid_for'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'pid'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_execute'
op|'('
string|"'kill'"
op|','
string|"'-TERM'"
op|','
name|'pid'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable=W0703'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Killing dnsmasq threw %s'"
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dhcp_file
dedent|''
dedent|''
dedent|''
name|'def'
name|'_dhcp_file'
op|'('
name|'bridge'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return path to a pid, leases or conf file for a bridge."""'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|"'%s/nova-%s.%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|','
nl|'\n'
name|'bridge'
op|','
nl|'\n'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_file
dedent|''
name|'def'
name|'_ra_file'
op|'('
name|'bridge'
op|','
name|'kind'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return path to a pid or conf file for a bridge."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|"'%s/nova-ra-%s.%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|','
nl|'\n'
name|'bridge'
op|','
nl|'\n'
name|'kind'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dnsmasq_pid_for
dedent|''
name|'def'
name|'_dnsmasq_pid_for'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the pid for prior dnsmasq instance for a bridge.\n\n    Returns None if no pid file exists.\n\n    If machine has rebooted pid might be incorrect (caller should check).\n\n    """'
newline|'\n'
name|'pid_file'
op|'='
name|'_dhcp_file'
op|'('
name|'bridge'
op|','
string|"'pid'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'pid_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ra_pid_for
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ra_pid_for'
op|'('
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the pid for prior radvd instance for a bridge.\n\n    Returns None if no pid file exists.\n\n    If machine has rebooted pid might be incorrect (caller should check).\n\n    """'
newline|'\n'
name|'pid_file'
op|'='
name|'_ra_file'
op|'('
name|'bridge'
op|','
string|"'pid'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pid_file'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'pid_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ip_bridge_cmd
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ip_bridge_cmd'
op|'('
name|'action'
op|','
name|'params'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Build commands to add/del ips to bridges/devices."""'
newline|'\n'
name|'cmd'
op|'='
op|'['
string|"'ip'"
op|','
string|"'addr'"
op|','
name|'action'
op|']'
newline|'\n'
name|'cmd'
op|'.'
name|'extend'
op|'('
name|'params'
op|')'
newline|'\n'
name|'cmd'
op|'.'
name|'extend'
op|'('
op|'['
string|"'dev'"
op|','
name|'device'
op|']'
op|')'
newline|'\n'
name|'return'
name|'cmd'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|iptables_manager
dedent|''
name|'iptables_manager'
op|'='
name|'IptablesManager'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

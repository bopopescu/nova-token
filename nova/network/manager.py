begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Network Hosts are responsible for allocating ips and setting up network.\n\nThere are multiple backend drivers that handle specific types of networking\ntopologies.  All of the network commands are issued to a subclass of\n:class:`NetworkManager`.\n\n**Related Flags**\n\n:network_driver:  Driver to use for network creation\n:flat_network_bridge:  Bridge device for simple network instances\n:flat_interface:  FlatDhcp will bridge into this interface if set\n:flat_network_dns:  Dns for simple network\n:flat_network_dhcp_start:  Dhcp start for FlatDhcp\n:vlan_start:  First VLAN for private networks\n:vpn_ip:  Public IP for the cloudpipe VPN servers\n:vpn_start:  First Vpn port for private networks\n:cnt_vpn_clients:  Number of addresses reserved for vpn clients\n:network_size:  Number of addresses in each private subnet\n:floating_range:  Floating IP address block\n:fixed_range:  Fixed IP address block\n:date_dhcp_on_disassociate:  Whether to update dhcp when fixed_ip\n                             is disassociated\n:fixed_ip_disassociate_timeout:  Seconds after which a deallocated ip\n                                 is disassociated\n:create_unique_mac_address_attempts:  Number of times to attempt creating\n                                      a unique mac address\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenpool'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'ipv6'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
name|'as'
name|'network_api'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.network.manager"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_network_bridge'"
op|','
string|"'br100'"
op|','
nl|'\n'
string|"'Bridge for simple network instances'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_network_dns'"
op|','
string|"'8.8.4.4'"
op|','
nl|'\n'
string|"'Dns for simple network'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'flat_injected'"
op|','
name|'True'
op|','
nl|'\n'
string|"'Whether to attempt to inject network setup into guest'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_interface'"
op|','
name|'None'
op|','
nl|'\n'
string|"'FlatDhcp will bridge into this interface if set'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_network_dhcp_start'"
op|','
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'Dhcp start for FlatDhcp'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_start'"
op|','
number|'100'
op|','
string|"'First VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'vlan_interface'"
op|','
name|'None'
op|','
nl|'\n'
string|"'vlans will bridge into this interface if set'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'num_networks'"
op|','
number|'1'
op|','
string|"'Number of networks to support'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'vpn_ip'"
op|','
string|"'$my_ip'"
op|','
nl|'\n'
string|"'Public IP for the cloudpipe VPN servers'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vpn_start'"
op|','
number|'1000'
op|','
string|"'First Vpn port for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'network_size'"
op|','
number|'256'
op|','
nl|'\n'
string|"'Number of addresses in each private subnet'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'floating_range'"
op|','
string|"'4.4.4.0/24'"
op|','
nl|'\n'
string|"'Floating IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'fixed_range'"
op|','
string|"'10.0.0.0/8'"
op|','
string|"'Fixed IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'fixed_range_v6'"
op|','
string|"'fd00::/48'"
op|','
string|"'Fixed IPv6 address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'gateway_v6'"
op|','
name|'None'
op|','
string|"'Default IPv6 gateway'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cnt_vpn_clients'"
op|','
number|'0'
op|','
nl|'\n'
string|"'Number of addresses reserved for vpn clients'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'network_driver'"
op|','
string|"'nova.network.linux_net'"
op|','
nl|'\n'
string|"'Driver to use for network creation'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'update_dhcp_on_disassociate'"
op|','
name|'False'
op|','
nl|'\n'
string|"'Whether to update dhcp when fixed_ip is disassociated'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'fixed_ip_disassociate_timeout'"
op|','
number|'600'
op|','
nl|'\n'
string|"'Seconds after which a deallocated ip is disassociated'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'create_unique_mac_address_attempts'"
op|','
number|'5'
op|','
nl|'\n'
string|"'Number of attempts to create unique mac address'"
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_ipv6'"
op|','
name|'False'
op|','
nl|'\n'
string|"'use the ipv6'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'network_host'"
op|','
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'Network host to use for ip allocation in flat modes'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'fake_call'"
op|','
name|'False'
op|','
nl|'\n'
string|"'If True, skip using the queue and make local calls'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddressAlreadyAllocated
name|'class'
name|'AddressAlreadyAllocated'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Address was already allocated."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCAllocateFixedIP
dedent|''
name|'class'
name|'RPCAllocateFixedIP'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class originally for FlatDCHP and VLAN network managers.\n\n    used since they share code to RPC.call allocate_fixed_ip on the\n    correct network host to configure dnsmasq\n    """'
newline|'\n'
DECL|member|_allocate_fixed_ips
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'networks'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'green_pool'
op|'='
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'vpn'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'vpn'"
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'['
string|"'host'"
op|']'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# need to call allocate_fixed_ip to correct network host'
nl|'\n'
indent|'                '
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'network_topic'
op|','
nl|'\n'
name|'network'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'instance_id'
newline|'\n'
name|'args'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'network'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'args'
op|'['
string|"'vpn'"
op|']'
op|'='
name|'vpn'
newline|'\n'
nl|'\n'
name|'green_pool'
op|'.'
name|'spawn_n'
op|'('
name|'rpc'
op|'.'
name|'call'
op|','
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'_rpc_allocate_fixed_ip'"
op|','
nl|'\n'
string|"'args'"
op|':'
name|'args'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# i am the correct host, run here'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
name|'vpn'
op|'='
name|'vpn'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for all of the allocates (if any) to finish'
nl|'\n'
dedent|''
dedent|''
name|'green_pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rpc_allocate_fixed_ip
dedent|''
name|'def'
name|'_rpc_allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sits in between _allocate_fixed_ips and allocate_fixed_ip to\n        perform network lookup on the far side of rpc.\n        """'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FloatingIP
dedent|''
dedent|''
name|'class'
name|'FloatingIP'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class for adding floating IP functionality to a manager."""'
newline|'\n'
DECL|member|init_host_floating_ips
name|'def'
name|'init_host_floating_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Configures floating ips owned by host."""'
newline|'\n'
nl|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'floating_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_all_by_host'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'floating_ip'
name|'in'
name|'floating_ips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'floating_ip'
op|'.'
name|'get'
op|'('
string|"'fixed_ip'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fixed_address'
op|'='
name|'floating_ip'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
comment|'# NOTE(vish): The False here is because we ignore the case'
nl|'\n'
comment|'#             that the ip is already bound.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'bind_floating_ip'
op|'('
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_floating_forward'
op|'('
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_for_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'allocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles allocating the floating IP resources for an instance.\n\n        calls super class allocate_for_instance() as well\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|')'
newline|'\n'
name|'project_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"floating IP allocation for instance |%s|"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
comment|"# call the next inherited class's allocate_for_instance()"
nl|'\n'
comment|'# which is currently the NetworkManager version'
nl|'\n'
comment|'# do this first so fixed ip is already allocated'
nl|'\n'
name|'ips'
op|'='
name|'super'
op|'('
name|'FloatingIP'
op|','
name|'self'
op|')'
op|'.'
name|'allocate_for_instance'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'FLAGS'
op|','
string|"'auto_assign_floating_ip'"
op|')'
op|':'
newline|'\n'
comment|'# allocate a floating ip (public_ip is just the address string)'
nl|'\n'
indent|'            '
name|'public_ip'
op|'='
name|'self'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
comment|'# set auto_assigned column to true for the floating ip'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_set_auto_assigned'
op|'('
name|'context'
op|','
name|'public_ip'
op|')'
newline|'\n'
comment|'# get the floating ip object from public_ip string'
nl|'\n'
name|'floating_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'public_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# get the first fixed_ip belonging to the instance'
nl|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'fixed_ips'
op|'['
number|'0'
op|']'
name|'if'
name|'fixed_ips'
name|'else'
name|'None'
newline|'\n'
nl|'\n'
comment|'# call to correct network host to associate the floating ip'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_ip'
op|','
nl|'\n'
name|'fixed_ip'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ips'
newline|'\n'
nl|'\n'
DECL|member|deallocate_for_instance
dedent|''
name|'def'
name|'deallocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles deallocating floating IP resources for an instance.\n\n        calls super class deallocate_for_instance() as well.\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"floating IP deallocation for instance |%s|"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
comment|'# add to kwargs so we can pass to super to save a db lookup there'
nl|'\n'
name|'kwargs'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
name|'fixed_ips'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
comment|'# disassociate floating ips related to fixed_ip'
nl|'\n'
indent|'            '
name|'for'
name|'floating_ip'
name|'in'
name|'fixed_ip'
op|'.'
name|'floating_ips'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'floating_ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
comment|'# deallocate if auto_assigned'
nl|'\n'
name|'if'
name|'floating_ip'
op|'['
string|"'auto_assigned'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'release_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|"# call the next inherited class's deallocate_for_instance()"
nl|'\n'
comment|'# which is currently the NetworkManager version'
nl|'\n'
comment|'# call this after so floating IPs are handled first'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'super'
op|'('
name|'FloatingIP'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_floating_ip
dedent|''
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets an floating ip from the pool."""'
newline|'\n'
comment|'# NOTE(tr3buchet): all networks hosts in zone now use the same pool'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"QUOTA: %s"'
op|'%'
name|'quota'
op|'.'
name|'allowed_floating_ips'
op|'('
name|'context'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'if'
name|'quota'
op|'.'
name|'allowed_floating_ips'
op|'('
name|'context'
op|','
number|'1'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Quota exceeeded for %s, tried to allocate '"
nl|'\n'
string|"'address'"
op|')'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'raise'
name|'quota'
op|'.'
name|'QuotaError'
op|'('
name|'_'
op|'('
string|"'Address quota exceeded. You cannot '"
nl|'\n'
string|"'allocate any more addresses'"
op|')'
op|')'
newline|'\n'
comment|'# TODO(vish): add floating ips through manage command'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_allocate_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_floating_ip
dedent|''
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates an floating ip to a fixed ip."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_fixed_ip_associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'bind_floating_ip'
op|'('
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_floating_forward'
op|'('
name|'floating_address'
op|','
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_floating_ip
dedent|''
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a floating ip."""'
newline|'\n'
name|'fixed_address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_disassociate'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unbind_floating_ip'
op|'('
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'remove_floating_forward'
op|'('
name|'floating_address'
op|','
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_floating_ip
dedent|''
name|'def'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an floating ip to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_deallocate'
op|'('
name|'context'
op|','
name|'floating_address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkManager
dedent|''
dedent|''
name|'class'
name|'NetworkManager'
op|'('
name|'manager'
op|'.'
name|'SchedulerDependentManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements common network manager functionality.\n\n    This class must be subclassed to support specific topologies.\n\n    host management:\n        hosts configure themselves for networks they are assigned to in the\n        table upon startup. If there are networks in the table which do not\n        have hosts, those will be filled in and have hosts configured\n        as the hosts pick them up one at time during their periodic task.\n        The one at a time part is to flatten the layout to help scale\n    """'
newline|'\n'
nl|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'network_driver'
op|':'
newline|'\n'
indent|'            '
name|'network_driver'
op|'='
name|'FLAGS'
op|'.'
name|'network_driver'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'network_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network_api'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'NetworkManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|"'network'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
comment|"# Set up this host for networks in which it's already"
nl|'\n'
comment|'# the designated network host.'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all_by_host'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_on_set_network_host'
op|'('
name|'ctxt'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|periodic_tasks
dedent|''
dedent|''
name|'def'
name|'periodic_tasks'
op|'('
name|'self'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tasks to be run at a periodic interval."""'
newline|'\n'
name|'super'
op|'('
name|'NetworkManager'
op|','
name|'self'
op|')'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout_fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'FLAGS'
op|'.'
name|'fixed_ip_disassociate_timeout'
newline|'\n'
name|'time'
op|'='
name|'now'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
name|'timeout'
op|')'
newline|'\n'
name|'num'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate_all_by_timeout'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'time'
op|')'
newline|'\n'
name|'if'
name|'num'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Dissassociated %s stale fixed ip(s)'"
op|')'
op|','
name|'num'
op|')'
newline|'\n'
nl|'\n'
comment|'# setup any new networks which have been created'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'set_network_hosts'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_network_host
dedent|''
name|'def'
name|'set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Safely sets the host of the network."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'setting network host'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_set_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'if'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_on_set_network_host'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|set_network_hosts
dedent|''
name|'def'
name|'set_network_hosts'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the network hosts for any networks which are unset."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
comment|"# we don't care if no networks are found"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'network'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
comment|'# return so worker will only grab 1 (to help scale flatter)'
nl|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'set_network_host'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_for_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine & return which networks an instance should connect to."""'
newline|'\n'
comment|'# TODO(tr3buchet) maybe this needs to be updated in the future if'
nl|'\n'
comment|'#                 there is a better way to determine which networks'
nl|'\n'
comment|'#                 a non-vlan instance should connect to'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
comment|"# we don't care if no networks are found"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# return only networks which are not vlan networks and have host set'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'network'
name|'for'
name|'network'
name|'in'
name|'networks'
name|'if'
nl|'\n'
name|'not'
name|'network'
op|'['
string|"'vlan'"
op|']'
name|'and'
name|'network'
op|'['
string|"'host'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|allocate_for_instance
dedent|''
name|'def'
name|'allocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles allocating the various network resources for an instance.\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'instance_id'"
op|')'
newline|'\n'
name|'project_id'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'project_id'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'instance_type_id'"
op|')'
newline|'\n'
name|'vpn'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'vpn'"
op|')'
newline|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"network allocations for instance %s"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_for_instance'
op|'('
name|'admin_context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_mac_addresses'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_fixed_ips'
op|'('
name|'admin_context'
op|','
name|'instance_id'
op|','
name|'networks'
op|','
name|'vpn'
op|'='
name|'vpn'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'type_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_for_instance
dedent|''
name|'def'
name|'deallocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles deallocating various network resources for an instance.\n\n        rpc.called by network_api\n        kwargs can contain fixed_ips to circumvent another db lookup\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'instance_id'"
op|')'
newline|'\n'
name|'fixed_ips'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'fixed_ips'"
op|')'
name|'or'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"network deallocation for instance |%s|"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
comment|'# deallocate fixed ips'
nl|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# deallocate vifs (mac addresses)'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_delete_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_nw_info
dedent|''
name|'def'
name|'get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'instance_type_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates network info list for instance.\n\n        called by allocate_for_instance and netowrk_api\n        context needs to be elevated\n        :returns: network info list [(network,info),(network,info)...]\n        where network = dict containing pertinent data from a network db object\n        and info = dict containing pertinent networking data\n        """'
newline|'\n'
comment|'# TODO(tr3buchet) should handle floating IPs as well?'
nl|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'vifs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_type_get_by_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_type_id'
op|')'
newline|'\n'
name|'network_info'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# a vif has an address, instance_id, and network_id'
nl|'\n'
comment|'# it is also joined to the instance and network given by those IDs'
nl|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
nl|'\n'
comment|"# determine which of the instance's IPs belong to this network"
nl|'\n'
name|'network_IPs'
op|'='
op|'['
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
name|'if'
nl|'\n'
name|'fixed_ip'
op|'['
string|"'network_id'"
op|']'
op|'=='
name|'network'
op|'['
string|"'id'"
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# TODO(tr3buchet) eventually "enabled" should be determined'
nl|'\n'
DECL|function|ip_dict
name|'def'
name|'ip_dict'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
nl|'\n'
string|'"ip"'
op|':'
name|'ip'
op|','
nl|'\n'
string|'"netmask"'
op|':'
name|'network'
op|'['
string|'"netmask"'
op|']'
op|','
nl|'\n'
string|'"enabled"'
op|':'
string|'"1"'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ip6_dict
dedent|''
name|'def'
name|'ip6_dict'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
nl|'\n'
string|'"ip"'
op|':'
name|'ipv6'
op|'.'
name|'to_global'
op|'('
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|')'
op|','
nl|'\n'
string|'"netmask"'
op|':'
name|'network'
op|'['
string|"'netmask_v6'"
op|']'
op|','
nl|'\n'
string|'"enabled"'
op|':'
string|'"1"'
op|'}'
newline|'\n'
dedent|''
name|'network_dict'
op|'='
op|'{'
nl|'\n'
string|"'bridge'"
op|':'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'network'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'network'
op|'['
string|"'injected'"
op|']'
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'network'
op|'['
string|"'vlan'"
op|']'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
op|'}'
newline|'\n'
name|'info'
op|'='
op|'{'
nl|'\n'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'network'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'mac'"
op|':'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|"'rxtx_cap'"
op|':'
name|'flavor'
op|'['
string|"'rxtx_cap'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
op|'['
name|'network'
op|'['
string|"'dns'"
op|']'
op|']'
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
name|'ip_dict'
op|'('
name|'ip'
op|')'
name|'for'
name|'ip'
name|'in'
name|'network_IPs'
op|']'
op|'}'
newline|'\n'
name|'if'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|'='
op|'['
name|'ip6_dict'
op|'('
op|')'
op|']'
newline|'\n'
comment|'# TODO(tr3buchet): handle ip6 routes here as well'
nl|'\n'
dedent|''
name|'if'
name|'network'
op|'['
string|"'gateway_v6'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'['
string|"'gateway6'"
op|']'
op|'='
name|'network'
op|'['
string|"'gateway_v6'"
op|']'
newline|'\n'
dedent|''
name|'network_info'
op|'.'
name|'append'
op|'('
op|'('
name|'network_dict'
op|','
name|'info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_allocate_mac_addresses
dedent|''
name|'def'
name|'_allocate_mac_addresses'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generates mac addresses and creates vif rows in db for them."""'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'vif'
op|'='
op|'{'
string|"'address'"
op|':'
name|'self'
op|'.'
name|'generate_mac_address'
op|'('
op|')'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
comment|'# try FLAG times to create a vif record with a unique mac_address'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'create_unique_mac_address_attempts'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_create'
op|'('
name|'context'
op|','
name|'vif'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|':'
newline|'\n'
indent|'                    '
name|'vif'
op|'['
string|"'address'"
op|']'
op|'='
name|'self'
op|'.'
name|'generate_mac_address'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_delete_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfaceMacAddressException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_mac_address
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_mac_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a mac address for a vif on an instance."""'
newline|'\n'
name|'mac'
op|'='
op|'['
number|'0x02'
op|','
number|'0x16'
op|','
number|'0x3e'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0x7f'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|']'
newline|'\n'
name|'return'
string|"':'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
string|'"%02x"'
op|'%'
name|'x'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_fixed_ip_to_instance
dedent|''
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a fixed ip to an instance from specified network."""'
newline|'\n'
name|'networks'
op|'='
op|'['
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_fixed_ips'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_fixed_ip_from_instance
dedent|''
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a fixed ip from an instance from specified network."""'
newline|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|'=='
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForSpecificInstance'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance_id'
op|','
name|'ip'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
comment|'# TODO(vish): when this is called by compute, we can associate compute'
nl|'\n'
comment|'#             with a network, or a cluster of computes with a network'
nl|'\n'
comment|'#             and use that network here with a method like'
nl|'\n'
comment|'#             network_get_by_compute_host'
nl|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'vif'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
op|'{'
string|"'allocated'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lease_fixed_ip
dedent|''
name|'def'
name|'lease_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is leased."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Leased IP |%(address)s|'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fixed_ip'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'IP %s leased that is not associated'"
op|')'
op|'%'
nl|'\n'
name|'address'
op|')'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'leased'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'now'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'['
string|"'allocated'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'IP |%s| leased that isn\\'t allocated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_fixed_ip
dedent|''
dedent|''
name|'def'
name|'release_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is released."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Released IP |%(address)s|'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fixed_ip'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'IP %s released that is not associated'"
op|')'
op|'%'
nl|'\n'
name|'address'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'fixed_ip'
op|'['
string|"'leased'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'IP %s released that was not leased'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'leased'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'['
string|"'allocated'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
comment|"# NOTE(vish): dhcp server isn't updated until next setup, this"
nl|'\n'
comment|'#             means there will stale entries in the conf file'
nl|'\n'
comment|'#             the code below will update the file if necessary'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'update_dhcp_on_disassociate'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'label'
op|','
name|'cidr'
op|','
name|'num_networks'
op|','
nl|'\n'
name|'network_size'
op|','
name|'cidr_v6'
op|','
name|'gateway_v6'
op|','
name|'bridge'
op|','
nl|'\n'
name|'bridge_interface'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
name|'fixed_net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'fixed_net_v6'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr_v6'
op|')'
newline|'\n'
name|'significant_bits_v6'
op|'='
number|'64'
newline|'\n'
name|'network_size_v6'
op|'='
number|'1'
op|'<<'
number|'64'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_networks'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'index'
op|'*'
name|'network_size'
newline|'\n'
name|'start_v6'
op|'='
name|'index'
op|'*'
name|'network_size_v6'
newline|'\n'
name|'significant_bits'
op|'='
number|'32'
op|'-'
name|'int'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'network_size'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'cidr'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'fixed_net'
op|'['
name|'start'
op|']'
op|','
name|'significant_bits'
op|')'
newline|'\n'
name|'project_net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|'='
name|'bridge'
newline|'\n'
name|'net'
op|'['
string|"'bridge_interface'"
op|']'
op|'='
name|'bridge_interface'
newline|'\n'
name|'net'
op|'['
string|"'dns'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_dns'
newline|'\n'
name|'net'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'cidr'
newline|'\n'
name|'net'
op|'['
string|"'netmask'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'.'
name|'netmask'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'gateway'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'broadcast'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'if'
name|'num_networks'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'label'"
op|']'
op|'='
string|"'%s_%d'"
op|'%'
op|'('
name|'label'
op|','
name|'index'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'label'"
op|']'
op|'='
name|'label'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'cidr_v6'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'fixed_net_v6'
op|'['
name|'start_v6'
op|']'
op|','
nl|'\n'
name|'significant_bits_v6'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'cidr_v6'"
op|']'
op|'='
name|'cidr_v6'
newline|'\n'
nl|'\n'
name|'project_net_v6'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr_v6'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'gateway_v6'
op|':'
newline|'\n'
comment|'# use a pre-defined gateway if one is provided'
nl|'\n'
indent|'                    '
name|'net'
op|'['
string|"'gateway_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'gateway_v6'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'['
string|"'gateway_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net_v6'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'net'
op|'['
string|"'netmask_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net_v6'
op|'.'
name|'_prefixlen'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# this bit here is for vlan-manager'
nl|'\n'
indent|'                '
name|'del'
name|'net'
op|'['
string|"'dns'"
op|']'
newline|'\n'
name|'vlan'
op|'='
name|'kwargs'
op|'['
string|"'vlan_start'"
op|']'
op|'+'
name|'index'
newline|'\n'
name|'net'
op|'['
string|"'vpn_private_address'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'vlan'"
op|']'
op|'='
name|'vlan'
newline|'\n'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|'='
string|"'br%s'"
op|'%'
name|'vlan'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): This makes ports unique accross the cloud, a more'
nl|'\n'
comment|'#             robust solution would be to make them uniq per ip'
nl|'\n'
name|'net'
op|'['
string|"'vpn_public_port'"
op|']'
op|'='
name|'kwargs'
op|'['
string|"'vpn_start'"
op|']'
op|'+'
name|'index'
newline|'\n'
nl|'\n'
comment|'# None if network with cidr or cidr_v6 already exists'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'context'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'network'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_fixed_ips'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Network with cidr %s already exists'"
op|')'
op|'%'
nl|'\n'
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
number|'2'
comment|'# network, gateway'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'return'
number|'1'
comment|'# broadcast'
newline|'\n'
nl|'\n'
DECL|member|_create_fixed_ips
dedent|''
name|'def'
name|'_create_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create all fixed ips for network."""'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
comment|'# NOTE(vish): Should these be properties of the network as opposed'
nl|'\n'
comment|'#             to properties of the manager class?'
nl|'\n'
name|'bottom_reserved'
op|'='
name|'self'
op|'.'
name|'_bottom_reserved_ips'
newline|'\n'
name|'top_reserved'
op|'='
name|'self'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'project_net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'num_ips'
op|'='
name|'len'
op|'('
name|'project_net'
op|')'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_ips'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
name|'index'
op|']'
op|')'
newline|'\n'
name|'if'
name|'index'
op|'<'
name|'bottom_reserved'
name|'or'
name|'num_ips'
op|'-'
name|'index'
op|'<'
name|'top_reserved'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'context'
op|','
op|'{'
string|"'network_id'"
op|':'
name|'network_id'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'reserved'"
op|':'
name|'reserved'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
dedent|''
dedent|''
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'networks'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a network."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatManager
dedent|''
dedent|''
name|'class'
name|'FlatManager'
op|'('
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic network where no vlans are used.\n\n    FlatManager does not do any bridge or vlan creation.  The user is\n    responsible for setting up whatever bridge is specified in\n    flat_network_bridge (br100 by default).  This bridge needs to be created\n    on all compute hosts.\n\n    The idea is to create a single network for the host with a command like:\n    nova-manage network create 192.168.0.0/24 1 256. Creating multiple\n    networks for for one manager is currently not supported, but could be\n    added by modifying allocate_fixed_ip and get_network to get the a network\n    with new logic instead of network_get_by_bridge. Arbitrary lists of\n    addresses in a single network can be accomplished with manual db editing.\n\n    If flat_injected is True, the compute host will attempt to inject network\n    config into the guest.  It attempts to modify /etc/network/interfaces and\n    currently only works on debian based systems. To support a wider range of\n    OSes, some other method may need to be devised to let the guest know which\n    ip it should be using so that it can configure itself. Perhaps an attached\n    disk or serial device with configuration info.\n\n    Metadata forwarding must be handled by the gateway, and since nova does\n    not do any setup in this mode, it must be done manually.  Requests to\n    169.254.169.254 port 80 will need to be forwarded to the api server.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'networks'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'super'
op|'('
name|'FlatManager'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a network."""'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'injected'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_injected'
newline|'\n'
name|'net'
op|'['
string|"'dns'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_dns'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatDHCPManager
dedent|''
dedent|''
name|'class'
name|'FlatDHCPManager'
op|'('
name|'FloatingIP'
op|','
name|'RPCAllocateFixedIP'
op|','
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Flat networking with dhcp.\n\n    FlatDHCPManager will start up one dhcp server to give out addresses.\n    It never injects network settings into the guest. It also manages bridges.\n    Otherwise it behaves like FlatManager.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_metadata_ip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'metadata_forward'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocate flat_network fixed_ip, then setup dhcp for this network."""'
newline|'\n'
name|'address'
op|'='
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a project."""'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_dhcp_start'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'net'
op|')'
newline|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_bridge'
op|'('
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
op|','
nl|'\n'
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VlanManager
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'VlanManager'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'FloatingIP'
op|','
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Vlan network with dhcp.\n\n    VlanManager is the most complicated.  It will create a host-managed\n    vlan for each project.  Each project gets its own subnet.  The networks\n    and associated subnets are created with nova-manage using a command like:\n    nova-manage network create 10.0.0.0/8 3 16.  This will create 3 networks\n    of 16 addresses from the beginning of the 10.0.0.0 range.\n\n    A dhcp server is run for each subnet, so each project will have its own.\n    For this mode to be useful, each project will need a vpn to access the\n    instances in its subnet.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_metadata_ip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'NetworkManager'
op|'.'
name|'init_host'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'metadata_forward'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vif'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'values'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_network_to_project
dedent|''
dedent|''
name|'def'
name|'add_network_to_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force adds another network to a project."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_associate'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'force'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_for_instance
dedent|''
name|'def'
name|'_get_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine which networks an instance should connect to."""'
newline|'\n'
comment|'# get networks associated with project'
nl|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'project_get_networks'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# return only networks which have host set'
nl|'\n'
name|'return'
op|'['
name|'network'
name|'for'
name|'network'
name|'in'
name|'networks'
name|'if'
name|'network'
op|'['
string|"'host'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
comment|'# Check that num_networks + vlan_start is not > 4094, fixes lp708025'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|"'num_networks'"
op|']'
op|'+'
name|'kwargs'
op|'['
string|"'vlan_start'"
op|']'
op|'>'
number|'4094'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The sum between the number of networks and'"
nl|'\n'
string|"' the vlan start cannot be greater'"
nl|'\n'
string|"' than 4094'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that num networks and network size fits in fixed_net'
nl|'\n'
dedent|''
name|'fixed_net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'fixed_net'
op|')'
op|'<'
name|'kwargs'
op|'['
string|"'num_networks'"
op|']'
op|'*'
name|'kwargs'
op|'['
string|"'network_size'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The network range is not big enough to fit '"
nl|'\n'
string|"'%(num_networks)s. Network size is %(network_size)s'"
op|')'
op|'%'
nl|'\n'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'NetworkManager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vpn'
op|'='
name|'True'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a network."""'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'network'
op|'['
string|"'vpn_public_address'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'address'
op|'='
name|'FLAGS'
op|'.'
name|'vpn_ip'
newline|'\n'
name|'net'
op|'['
string|"'vpn_public_address'"
op|']'
op|'='
name|'address'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'net'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network'
op|'['
string|"'vpn_public_address'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
name|'network'
op|'['
string|"'vlan'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
op|','
nl|'\n'
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(vish): only ensure this forward if the address hasn't been set"
nl|'\n'
comment|'#             manually.'
nl|'\n'
name|'if'
name|'address'
op|'=='
name|'FLAGS'
op|'.'
name|'vpn_ip'
name|'and'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
string|'"ensure_vlan_forward"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_vlan_forward'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_ip'
op|','
nl|'\n'
name|'network'
op|'['
string|"'vpn_public_port'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_bottom_reserved_ips'
op|'+'
number|'1'
comment|'# vpn server'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'parent_reserved'
op|'='
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'return'
name|'parent_reserved'
op|'+'
name|'FLAGS'
op|'.'
name|'cnt_vpn_clients'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Network Hosts are responsible for allocating ips and setting up network.\n\nThere are multiple backend drivers that handle specific types of networking\ntopologies.  All of the network commands are issued to a subclass of\n:class:`NetworkManager`.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
name|'import'
name|'messaging'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'conductor'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'ipv6'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
name|'as'
name|'network_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'floating_ips'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'rpcapi'
name|'as'
name|'network_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'quotas'
name|'as'
name|'quotas_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'periodic_task'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'servicegroup'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|network_opts
name|'network_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flat_network_bridge'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Bridge for simple network instances'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flat_network_dns'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'8.8.4.4'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'DNS server for simple network'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'flat_injected'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to attempt to inject network setup into guest'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flat_interface'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'FlatDhcp will bridge into this interface if set'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vlan_start'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'100'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'First VLAN for private networks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vlan_interface'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'VLANs will bridge into this interface if set'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_networks'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of networks to support'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vpn_ip'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$my_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Public IP for the cloudpipe VPN servers'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vpn_start'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1000'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'First Vpn port for private networks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'network_size'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'256'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of addresses in each private subnet'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'fixed_range_v6'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'fd00::/48'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Fixed IPv6 address block'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'gateway'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default IPv4 gateway'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'gateway_v6'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default IPv6 gateway'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'cnt_vpn_clients'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of addresses reserved for vpn clients'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'fixed_ip_disassociate_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Seconds after which a deallocated IP is disassociated'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'create_unique_mac_address_attempts'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of attempts to create unique mac address'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'fake_call'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, skip using the queue and make local calls'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'teardown_unused_network_gateway'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, unused gateway devices (VLAN and bridge) are '"
nl|'\n'
string|"'deleted in VLAN network mode with multi hosted '"
nl|'\n'
string|"'networks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'force_dhcp_release'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, send a dhcp release on instance termination'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'update_dns_entries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, when a DNS entry must be updated, it sends a '"
nl|'\n'
string|"'fanout cast to all network hosts to update their DNS '"
nl|'\n'
string|"'entries in multi host mode'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"dns_update_periodic_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds to wait between runs of updates to DNS '"
nl|'\n'
string|"'entries.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'dhcp_domain'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'novalocal'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Domain to use for building the hostnames'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'l3_lib'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.network.l3.LinuxNetL3'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Indicates underlying L3 management library"'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'network_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'use_ipv6'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_topic'"
op|','
string|"'nova.network.rpcapi'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'fake_network'"
op|','
string|"'nova.network.linux_net'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'share_dhcp_address'"
op|','
string|"'nova.objects.network'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_device_mtu'"
op|','
string|"'nova.objects.network'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCAllocateFixedIP
name|'class'
name|'RPCAllocateFixedIP'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class originally for FlatDCHP and VLAN network managers.\n\n    used since they share code to RPC.call allocate_fixed_ip on the\n    correct network host to configure dnsmasq\n    """'
newline|'\n'
nl|'\n'
DECL|variable|servicegroup_api
name|'servicegroup_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'networks'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'green_threads'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'vpn'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|')'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
name|'addresses_by_network'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'request'
name|'in'
name|'requested_networks'
op|':'
newline|'\n'
indent|'                '
name|'addresses_by_network'
op|'['
name|'request'
op|'.'
name|'network_id'
op|']'
op|'='
name|'request'
op|'.'
name|'address'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'uuid'"
name|'in'
name|'network'
name|'and'
name|'network'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'addresses_by_network'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'addresses_by_network'
op|'['
name|'network'
op|'['
string|"'uuid'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'None'
newline|'\n'
comment|'# NOTE(vish): if we are not multi_host pass to the network host'
nl|'\n'
comment|"# NOTE(tr3buchet): but if we are, host came from instance['host']"
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'network'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'host'
op|'='
name|'network'
op|'['
string|"'host'"
op|']'
newline|'\n'
comment|'# NOTE(vish): if there is no network host, set one'
nl|'\n'
dedent|''
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network_p'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'network'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'set_network_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_p'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'host'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# need to call allocate_fixed_ip to correct network host'
nl|'\n'
indent|'                '
name|'green_threads'
op|'.'
name|'append'
op|'('
name|'eventlet'
op|'.'
name|'spawn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'_rpc_allocate_fixed_ip'
op|','
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'address'
op|','
name|'vpn'
op|','
nl|'\n'
name|'host'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# i am the correct host, run here'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'vpn'
op|','
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for all of the allocates (if any) to finish'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'gt'
name|'in'
name|'green_threads'
op|':'
newline|'\n'
indent|'            '
name|'gt'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rpc_allocate_fixed_ip
dedent|''
dedent|''
name|'def'
name|'_rpc_allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network_id'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sits in between _allocate_fixed_ips and allocate_fixed_ip to\n        perform network lookup on the far side of rpc.\n        """'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'teardown'
op|'='
name|'True'
op|','
nl|'\n'
name|'instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the superclass deallocate_fixed_ip if i\'m the correct host\n        otherwise call to the correct host\n        """'
newline|'\n'
name|'fixed_ip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'address'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'network'"
op|']'
op|')'
newline|'\n'
name|'network'
op|'='
name|'fixed_ip'
op|'.'
name|'network'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): if we are not multi_host pass to the network host'
nl|'\n'
comment|"# NOTE(tr3buchet): but if we are, host came from instance['host']"
nl|'\n'
name|'if'
name|'not'
name|'network'
op|'.'
name|'multi_host'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'network'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'if'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# NOTE(vish): deallocate the fixed ip locally'
nl|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'network'
op|'.'
name|'multi_host'
op|':'
newline|'\n'
indent|'            '
name|'service'
op|'='
name|'objects'
op|'.'
name|'Service'
op|'.'
name|'get_by_host_and_topic'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|','
name|'CONF'
op|'.'
name|'network_topic'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'service'
name|'or'
name|'not'
name|'self'
op|'.'
name|'servicegroup_api'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): deallocate the fixed ip locally but don't"
nl|'\n'
comment|'#             teardown network devices'
nl|'\n'
indent|'                '
name|'return'
name|'super'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
nl|'\n'
name|'context'
op|','
name|'address'
op|','
name|'teardown'
op|'='
name|'False'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'host'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkManager
dedent|''
dedent|''
name|'class'
name|'NetworkManager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements common network manager functionality.\n\n    This class must be subclassed to support specific topologies.\n\n    host management:\n        hosts configure themselves for networks they are assigned to in the\n        table upon startup. If there are networks in the table which do not\n        have hosts, those will be filled in and have hosts configured\n        as the hosts pick them up one at time during their periodic task.\n        The one at a time part is to flatten the layout to help scale\n    """'
newline|'\n'
nl|'\n'
DECL|variable|target
name|'target'
op|'='
name|'messaging'
op|'.'
name|'Target'
op|'('
name|'version'
op|'='
string|"'1.13'"
op|')'
newline|'\n'
nl|'\n'
comment|'# If True, this manager requires VIF to create a bridge.'
nl|'\n'
DECL|variable|SHOULD_CREATE_BRIDGE
name|'SHOULD_CREATE_BRIDGE'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# If True, this manager requires VIF to create VLAN tag.'
nl|'\n'
DECL|variable|SHOULD_CREATE_VLAN
name|'SHOULD_CREATE_VLAN'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# if True, this manager leverages DHCP'
nl|'\n'
DECL|variable|DHCP
name|'DHCP'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
op|'.'
name|'load_network_driver'
op|'('
name|'network_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'instance_dns_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|'='
name|'CONF'
op|'.'
name|'instance_dns_domain'
newline|'\n'
name|'self'
op|'.'
name|'floating_dns_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'floating_ip_dns_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network_api'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'='
name|'network_rpcapi'
op|'.'
name|'NetworkAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'='
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'servicegroup_api'
op|'='
name|'servicegroup'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'l3_lib'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"l3_lib"'
op|','
name|'CONF'
op|'.'
name|'l3_lib'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'l3_lib'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'quotas_cls'
op|'='
name|'objects'
op|'.'
name|'Quotas'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'NetworkManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|"'network'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_uses_shared_ip
name|'def'
name|'_uses_shared_ip'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shared'
op|'='
name|'network'
op|'.'
name|'get'
op|'('
string|"'share_address'"
op|')'
name|'or'
name|'CONF'
op|'.'
name|'share_dhcp_address'
newline|'\n'
name|'return'
name|'not'
name|'network'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
name|'or'
name|'shared'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'get_dhcp'"
op|')'
newline|'\n'
DECL|member|_get_dhcp_ip
name|'def'
name|'_get_dhcp_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ref'
op|','
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the proper dhcp address to listen on."""'
newline|'\n'
comment|'# NOTE(vish): If we are sharing the dhcp_address then we can just'
nl|'\n'
comment|'#             return the dhcp_server from the database.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_uses_shared_ip'
op|'('
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'network_ref'
op|'.'
name|'get'
op|'('
string|"'dhcp_server'"
op|')'
name|'or'
name|'network_ref'
op|'['
string|"'gateway'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'network_id'
op|'='
name|'network_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_network_and_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'fip'
op|'.'
name|'address'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForNetworkHost'
op|':'
newline|'\n'
indent|'            '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'associate_pool'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
name|'return'
name|'fip'
op|'.'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|get_dhcp_leases
dedent|''
dedent|''
name|'def'
name|'get_dhcp_leases'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Broker the request to the driver to fetch the dhcp leases."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Get DHCP leases for network %s'"
op|','
name|'network_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dhcp_leases'
op|'('
name|'ctxt'
op|','
name|'network_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
comment|'# NOTE(vish): Set up networks for which this host already has'
nl|'\n'
comment|'#             an ip address.'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_host'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Setup network %s on host %s'"
op|','
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'ctxt'
op|','
name|'network'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'update_dns_entries'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Update DNS on network %s for host %s'"
op|','
nl|'\n'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dns'
op|'('
name|'ctxt'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_disassociate_stale_fixed_ips
name|'def'
name|'_disassociate_stale_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout_fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'fixed_ip_disassociate_timeout'
newline|'\n'
name|'time'
op|'='
name|'now'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
name|'timeout'
op|')'
newline|'\n'
name|'num'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'disassociate_all_by_timeout'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'time'
op|')'
newline|'\n'
name|'if'
name|'num'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Disassociated %s stale fixed ip(s)'"
op|','
name|'num'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_network_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Safely sets the host of the network."""'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'network_ref'
op|','
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_ref'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'Network'
op|'('
op|')'
op|','
name|'network_ref'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Setting host %s for network %s'"
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'uuid'"
op|']'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'network_ref'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'network_ref'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|_do_trigger_security_group_members_refresh_for_instance
dedent|''
name|'def'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
name|'self'
op|','
nl|'\n'
name|'instance_id'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(francois.charlier): the instance may have been deleted already'
nl|'\n'
comment|'# thus enabling `read_deleted`'
nl|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'admin_context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(vish): We need to make sure the instance info cache has been'
nl|'\n'
comment|'#             updated with new ip info before we trigger the'
nl|'\n'
comment|'#             security group refresh. This is somewhat inefficient'
nl|'\n'
comment|'#             but avoids doing some dangerous refactoring for a'
nl|'\n'
comment|'#             bug fix.'
nl|'\n'
indent|'            '
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'admin_context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'ic'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'.'
name|'new'
op|'('
name|'admin_context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'ic'
op|'.'
name|'network_info'
op|'='
name|'nw_info'
newline|'\n'
name|'ic'
op|'.'
name|'save'
op|'('
name|'update_cells'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceInfoCacheNotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'groups'
op|'='
name|'instance'
op|'.'
name|'security_groups'
newline|'\n'
name|'group_ids'
op|'='
op|'['
name|'group'
op|'.'
name|'id'
name|'for'
name|'group'
name|'in'
name|'groups'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'security_groups_trigger_members_refresh'
op|'('
nl|'\n'
name|'admin_context'
op|','
name|'group_ids'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(hanlind): This method can be removed in version 2.0 of the RPC API'
nl|'\n'
DECL|member|get_instance_uuids_by_ip_filter
dedent|''
name|'def'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixed_ip_filter'
op|'='
name|'filters'
op|'.'
name|'get'
op|'('
string|"'fixed_ip'"
op|')'
newline|'\n'
name|'ip_filter'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'str'
op|'('
name|'filters'
op|'.'
name|'get'
op|'('
string|"'ip'"
op|')'
op|')'
op|')'
newline|'\n'
name|'ipv6_filter'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'str'
op|'('
name|'filters'
op|'.'
name|'get'
op|'('
string|"'ip6'"
op|')'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Get instance uuids by IP filters. Fixed IP filter: %s. '"
nl|'\n'
string|"'IP filter: %s. IPv6 filter: %s'"
op|','
name|'fixed_ip_filter'
op|','
nl|'\n'
name|'str'
op|'('
name|'filters'
op|'.'
name|'get'
op|'('
string|"'ip'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'filters'
op|'.'
name|'get'
op|'('
string|"'ip6'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jkoelker) Should probably figure out a better way to do'
nl|'\n'
comment|'#                this. But for now it "works", this could suck on'
nl|'\n'
comment|'#                large installs.'
nl|'\n'
nl|'\n'
name|'vifs'
op|'='
name|'objects'
op|'.'
name|'VirtualInterfaceList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'.'
name|'instance_uuid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'fixed_ipv6'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'fixed_ipv6'
op|'='
name|'ipv6'
op|'.'
name|'to_global'
op|'('
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'.'
name|'address'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'fixed_ipv6'
name|'and'
name|'ipv6_filter'
op|'.'
name|'match'
op|'('
name|'fixed_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'fixed_ipv6'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_ips'
op|'='
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_virtual_interface_id'
op|'('
nl|'\n'
name|'context'
op|','
name|'vif'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'fixed_ip'
name|'or'
name|'not'
name|'fixed_ip'
op|'.'
name|'address'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'str'
op|'('
name|'fixed_ip'
op|'.'
name|'address'
op|')'
op|'=='
name|'fixed_ip_filter'
op|':'
newline|'\n'
indent|'                    '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'fixed_ip'
op|'.'
name|'address'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'ip_filter'
op|'.'
name|'match'
op|'('
name|'str'
op|'('
name|'fixed_ip'
op|'.'
name|'address'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'fixed_ip'
op|'.'
name|'address'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'floating_ip'
name|'in'
name|'fixed_ip'
op|'.'
name|'floating_ips'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'floating_ip'
name|'or'
name|'not'
name|'floating_ip'
op|'.'
name|'address'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'ip_filter'
op|'.'
name|'match'
op|'('
name|'str'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'floating_ip'
op|'.'
name|'address'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_for_instance
dedent|''
name|'def'
name|'_get_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine & return which networks an instance should connect to."""'
newline|'\n'
comment|'# TODO(tr3buchet) maybe this needs to be updated in the future if'
nl|'\n'
comment|'#                 there is a better way to determine which networks'
nl|'\n'
comment|'#                 a non-vlan instance should connect to'
nl|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
name|'and'
name|'len'
op|'('
name|'requested_networks'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'network_uuids'
op|'='
op|'['
name|'request'
op|'.'
name|'network_id'
nl|'\n'
name|'for'
name|'request'
name|'in'
name|'requested_networks'
op|']'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
op|']'
newline|'\n'
comment|'# return only networks which are not vlan networks'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'['
name|'network'
name|'for'
name|'network'
name|'in'
name|'networks'
name|'if'
name|'not'
name|'network'
op|'.'
name|'vlan'
op|']'
newline|'\n'
nl|'\n'
DECL|member|allocate_for_instance
dedent|''
name|'def'
name|'allocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles allocating the various network resources for an instance.\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'kwargs'
op|'['
string|"'instance_id'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_uuid'"
op|')'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'kwargs'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'project_id'
op|'='
name|'kwargs'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'rxtx_factor'
op|'='
name|'kwargs'
op|'['
string|"'rxtx_factor'"
op|']'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'requested_networks'
name|'and'
nl|'\n'
name|'not'
name|'isinstance'
op|'('
name|'requested_networks'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'NetworkRequestList'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'requested_networks'
op|'='
name|'objects'
op|'.'
name|'NetworkRequestList'
op|'('
nl|'\n'
name|'objects'
op|'='
op|'['
name|'objects'
op|'.'
name|'NetworkRequest'
op|'.'
name|'from_tuple'
op|'('
name|'t'
op|')'
nl|'\n'
name|'for'
name|'t'
name|'in'
name|'requested_networks'
op|']'
op|')'
newline|'\n'
dedent|''
name|'vpn'
op|'='
name|'kwargs'
op|'['
string|"'vpn'"
op|']'
newline|'\n'
name|'macs'
op|'='
name|'kwargs'
op|'['
string|"'macs'"
op|']'
newline|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Allocate network for instance"'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_for_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'networks_list'
op|'='
op|'['
name|'self'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
nl|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Networks retrieved for instance: |%s|'"
op|','
nl|'\n'
name|'networks_list'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_allocate_mac_addresses'
op|'('
name|'admin_context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'networks'
op|','
name|'macs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# If we fail to allocate any one mac address, clean up all'
nl|'\n'
comment|'# allocated VIFs'
nl|'\n'
indent|'                '
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'delete_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_allocate_fixed_ips'
op|'('
name|'admin_context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'host'
op|','
name|'networks'
op|','
name|'vpn'
op|'='
name|'vpn'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'update_dns_entries'
op|':'
newline|'\n'
indent|'            '
name|'network_ids'
op|'='
op|'['
name|'network'
op|'['
string|"'id'"
op|']'
name|'for'
name|'network'
name|'in'
name|'networks'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'network_ids'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'admin_context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'rxtx_factor'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_for_instance
dedent|''
name|'def'
name|'deallocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles deallocating various network resources for an instance.\n\n        rpc.called by network_api\n        kwargs can contain fixed_ips to circumvent another db lookup\n        """'
newline|'\n'
comment|'# NOTE(francois.charlier): in some cases the instance might be'
nl|'\n'
comment|'# deleted before the IPs are released, so we need to get deleted'
nl|'\n'
comment|'# instances too'
nl|'\n'
name|'read_deleted_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
newline|'\n'
name|'if'
string|"'instance'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'kwargs'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance_id'
op|'='
name|'kwargs'
op|'['
string|"'instance_id'"
op|']'
newline|'\n'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'read_deleted_context'
op|','
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'read_deleted_context'
op|','
name|'instance_id'
op|')'
newline|'\n'
comment|'# NOTE(russellb) in case instance_id was an ID and not UUID'
nl|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'host'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
name|'if'
name|'requested_networks'
op|':'
newline|'\n'
comment|'# NOTE(obondarev): Temporary and transitional'
nl|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'requested_networks'
op|','
name|'objects'
op|'.'
name|'NetworkRequestList'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'requested_networks'
op|'='
name|'requested_networks'
op|'.'
name|'as_tuples'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_ips'
op|'='
op|'['
name|'ip'
name|'for'
op|'('
name|'net_id'
op|','
name|'ip'
op|')'
name|'in'
name|'requested_networks'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fixed_ip_list'
op|'='
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'read_deleted_context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'fixed_ips'
op|'='
op|'['
name|'str'
op|'('
name|'ip'
op|'.'
name|'address'
op|')'
name|'for'
name|'ip'
name|'in'
name|'fixed_ip_list'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Network deallocation for instance"'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# deallocate fixed ips'
nl|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'fixed_ip'
op|','
name|'host'
op|'='
name|'host'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'update_dns_entries'
op|':'
newline|'\n'
indent|'            '
name|'network_ids'
op|'='
op|'['
name|'fixed_ip'
op|'.'
name|'network_id'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'network_ids'
op|')'
newline|'\n'
nl|'\n'
comment|'# deallocate vifs (mac addresses)'
nl|'\n'
dedent|''
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'delete_by_instance_uuid'
op|'('
nl|'\n'
name|'read_deleted_context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|')'
newline|'\n'
DECL|member|get_instance_nw_info
name|'def'
name|'get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'rxtx_factor'
op|','
nl|'\n'
name|'host'
op|','
name|'instance_uuid'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates network info list for instance.\n\n        called by allocate_for_instance and network_api\n        context needs to be elevated\n        :returns: network info list [(network,info),(network,info)...]\n        where network = dict containing pertinent data from a network db object\n        and info = dict containing pertinent networking data\n        """'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_id'
op|'='
name|'instance_uuid'
newline|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance_id'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Get instance network info'"
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'nw_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'vifs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'vif'
op|'='
name|'fixed_ip'
op|'.'
name|'virtual_interface'
newline|'\n'
name|'if'
name|'not'
name|'vif'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'fixed_ip'
op|'.'
name|'network'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vif'
op|'.'
name|'uuid'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'                '
name|'current'
op|'='
name|'vifs'
op|'['
name|'vif'
op|'.'
name|'uuid'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'current'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'vif'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'network_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'vif'
op|'.'
name|'address'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'vifs'
op|'['
name|'vif'
op|'.'
name|'uuid'
op|']'
op|'='
name|'current'
newline|'\n'
nl|'\n'
name|'net_dict'
op|'='
name|'self'
op|'.'
name|'_get_network_dict'
op|'('
name|'fixed_ip'
op|'.'
name|'network'
op|')'
newline|'\n'
name|'network'
op|'='
name|'network_model'
op|'.'
name|'Network'
op|'('
op|'**'
name|'net_dict'
op|')'
newline|'\n'
name|'subnets'
op|'='
name|'self'
op|'.'
name|'_get_subnets_from_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
name|'network'
op|'['
string|"'subnets'"
op|']'
op|'='
name|'subnets'
newline|'\n'
name|'current'
op|'['
string|"'network'"
op|']'
op|'='
name|'network'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'current'
op|'['
string|"'rxtx_cap'"
op|']'
op|'='
op|'('
name|'fixed_ip'
op|'.'
name|'network'
op|'['
string|"'rxtx_base'"
op|']'
op|'*'
nl|'\n'
name|'rxtx_factor'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'KeyError'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'if'
name|'fixed_ip'
op|'.'
name|'network'
op|'.'
name|'cidr_v6'
name|'and'
name|'vif'
op|'.'
name|'address'
op|':'
newline|'\n'
comment|'# NOTE(vish): I strongy suspect the v6 subnet is not used'
nl|'\n'
comment|'#             anywhere, but support it just in case'
nl|'\n'
comment|'# add the v6 address to the v6 subnet'
nl|'\n'
indent|'                    '
name|'address'
op|'='
name|'ipv6'
op|'.'
name|'to_global'
op|'('
name|'fixed_ip'
op|'.'
name|'network'
op|'.'
name|'cidr_v6'
op|','
nl|'\n'
name|'vif'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'model_ip'
op|'='
name|'network_model'
op|'.'
name|'FixedIP'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'current'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'1'
op|']'
op|'['
string|"'ips'"
op|']'
op|'.'
name|'append'
op|'('
name|'model_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# add the v4 address to the v4 subnet'
nl|'\n'
dedent|''
dedent|''
name|'model_ip'
op|'='
name|'network_model'
op|'.'
name|'FixedIP'
op|'('
name|'address'
op|'='
name|'str'
op|'('
name|'fixed_ip'
op|'.'
name|'address'
op|')'
op|')'
newline|'\n'
name|'for'
name|'ip'
name|'in'
name|'fixed_ip'
op|'.'
name|'floating_ips'
op|':'
newline|'\n'
indent|'                '
name|'floating_ip'
op|'='
name|'network_model'
op|'.'
name|'IP'
op|'('
name|'address'
op|'='
name|'str'
op|'('
name|'ip'
op|'['
string|"'address'"
op|']'
op|')'
op|','
nl|'\n'
name|'type'
op|'='
string|"'floating'"
op|')'
newline|'\n'
name|'model_ip'
op|'.'
name|'add_floating_ip'
op|'('
name|'floating_ip'
op|')'
newline|'\n'
dedent|''
name|'current'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'.'
name|'append'
op|'('
name|'model_ip'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nw_info'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF'
op|'('
op|'**'
name|'vif'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Built network info: |%s|'"
op|','
name|'nw_info'
op|')'
newline|'\n'
name|'return'
name|'nw_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_get_network_dict
name|'def'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the dict representing necessary and meta network fields."""'
newline|'\n'
comment|'# get generic network fields'
nl|'\n'
name|'network_dict'
op|'='
op|'{'
string|"'id'"
op|':'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
comment|'# get extra information'
nl|'\n'
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'injected'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'injected'"
op|']'
op|'='
name|'network'
op|'['
string|"'injected'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'network_dict'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_extract_subnets
name|'def'
name|'_extract_subnets'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns information about the IPv4 and IPv6 subnets\n           associated with a Neutron Network UUID.\n        """'
newline|'\n'
name|'subnet_v4'
op|'='
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'network'
op|'.'
name|'cidr'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network'
op|'.'
name|'gateway'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
name|'getattr'
op|'('
name|'network'
op|','
string|"'dhcp_server'"
op|')'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'network'
op|'.'
name|'broadcast'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'network'
op|'.'
name|'netmask'
op|','
nl|'\n'
string|"'version'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'dns1'"
op|':'
name|'network'
op|'.'
name|'dns1'
op|','
nl|'\n'
string|"'dns2'"
op|':'
name|'network'
op|'.'
name|'dns2'
op|'}'
newline|'\n'
comment|"# TODO(tr3buchet): I'm noticing we've assumed here that all dns is v4."
nl|'\n'
comment|'#                  this is probably bad as there is no way to add v6'
nl|'\n'
comment|'#                  dns to nova'
nl|'\n'
name|'subnet_v6'
op|'='
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'network'
op|'.'
name|'cidr_v6'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network'
op|'.'
name|'gateway_v6'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'network'
op|'.'
name|'netmask_v6'
op|','
nl|'\n'
string|"'version'"
op|':'
number|'6'
op|','
nl|'\n'
string|"'dns1'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'dns2'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ips_to_strs
name|'def'
name|'ips_to_strs'
op|'('
name|'net'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'net'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'netaddr'
op|'.'
name|'ip'
op|'.'
name|'BaseIP'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'['
name|'key'
op|']'
op|'='
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'net'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'ips_to_strs'
op|'('
name|'subnet_v4'
op|')'
op|','
name|'ips_to_strs'
op|'('
name|'subnet_v6'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_subnets_from_network
dedent|''
name|'def'
name|'_get_subnets_from_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|','
name|'instance_host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the 1 or 2 possible subnets for a nova network."""'
newline|'\n'
name|'extracted_subnets'
op|'='
name|'self'
op|'.'
name|'_extract_subnets'
op|'('
name|'network'
op|')'
newline|'\n'
name|'subnets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'subnet'
name|'in'
name|'extracted_subnets'
op|':'
newline|'\n'
indent|'            '
name|'subnet_dict'
op|'='
op|'{'
string|"'cidr'"
op|':'
name|'subnet'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network_model'
op|'.'
name|'IP'
op|'('
nl|'\n'
name|'address'
op|'='
name|'subnet'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'type'
op|'='
string|"'gateway'"
op|')'
op|'}'
newline|'\n'
comment|'# deal with dhcp'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'DHCP'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|','
nl|'\n'
name|'instance_host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'subnet'
op|')'
newline|'\n'
dedent|''
name|'subnet_dict'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'dhcp_server'
newline|'\n'
nl|'\n'
dedent|''
name|'subnet_object'
op|'='
name|'network_model'
op|'.'
name|'Subnet'
op|'('
op|'**'
name|'subnet_dict'
op|')'
newline|'\n'
nl|'\n'
comment|'# add dns info'
nl|'\n'
name|'for'
name|'k'
name|'in'
op|'['
string|"'dns1'"
op|','
string|"'dns2'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'subnet'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'subnet_object'
op|'.'
name|'add_dns'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'IP'
op|'('
name|'address'
op|'='
name|'subnet'
op|'['
name|'k'
op|']'
op|','
name|'type'
op|'='
string|"'dns'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'subnet_object'
op|'['
string|"'ips'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'subnets'
op|'.'
name|'append'
op|'('
name|'subnet_object'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'subnets'
newline|'\n'
nl|'\n'
DECL|member|_allocate_mac_addresses
dedent|''
name|'def'
name|'_allocate_mac_addresses'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'networks'
op|','
name|'macs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generates mac addresses and creates vif rows in db for them."""'
newline|'\n'
comment|'# make a copy we can mutate'
nl|'\n'
name|'if'
name|'macs'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'available_macs'
op|'='
name|'set'
op|'('
name|'macs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'macs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'mac'
op|'='
name|'available_macs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'mac'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_virtual_interface
dedent|''
dedent|''
dedent|''
name|'def'
name|'_add_virtual_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'network_id'
op|','
nl|'\n'
name|'mac'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attempts'
op|'='
number|'1'
name|'if'
name|'mac'
name|'else'
name|'CONF'
op|'.'
name|'create_unique_mac_address_attempts'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'attempts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vif'
op|'='
name|'objects'
op|'.'
name|'VirtualInterface'
op|'('
name|'context'
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'address'
op|'='
name|'mac'
name|'or'
name|'utils'
op|'.'
name|'generate_mac_address'
op|'('
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'instance_uuid'
op|'='
name|'instance_uuid'
newline|'\n'
name|'vif'
op|'.'
name|'network_id'
op|'='
name|'network_id'
newline|'\n'
name|'vif'
op|'.'
name|'uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'return'
name|'vif'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|':'
newline|'\n'
comment|'# Try again up to max number of attempts'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfaceMacAddressException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_fixed_ip_to_instance
dedent|''
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'network_id'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a fixed ip to an instance from specified network."""'
newline|'\n'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Add fixed ip on network %s'"
op|','
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_fixed_ips'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
op|'['
name|'network'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'rxtx_factor'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(russellb) This method can be removed in 2.0 of this API.  It is'
nl|'\n'
comment|'# deprecated in favor of the method in the base API.'
nl|'\n'
DECL|member|get_backdoor_port
dedent|''
name|'def'
name|'get_backdoor_port'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return backdoor port for eventlet_backdoor."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'backdoor_port'
newline|'\n'
nl|'\n'
DECL|member|remove_fixed_ip_from_instance
dedent|''
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
nl|'\n'
name|'address'
op|','
name|'rxtx_factor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a fixed ip from an instance from specified network."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Remove fixed ip %s'"
op|','
name|'address'
op|','
name|'instance_uuid'
op|'='
name|'instance_id'
op|')'
newline|'\n'
name|'fixed_ips'
op|'='
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_instance_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'fixed_ip'
op|'.'
name|'address'
op|')'
op|'=='
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'host'
op|')'
newline|'\n'
comment|"# NOTE(vish): this probably isn't a dhcp ip so just"
nl|'\n'
comment|'#             deallocate it now. In the extremely rare'
nl|'\n'
comment|'#             case that this is a race condition, we'
nl|'\n'
comment|'#             will just get a warn in lease or release.'
nl|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'.'
name|'leased'
op|':'
newline|'\n'
indent|'                    '
name|'fixed_ip'
op|'.'
name|'disassociate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'rxtx_factor'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForSpecificInstance'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_id'
op|','
name|'ip'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_instance_zone_for_dns_domain
dedent|''
name|'def'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'instance_dns_domain'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'instance_domain'
op|'='
name|'self'
op|'.'
name|'instance_dns_domain'
newline|'\n'
nl|'\n'
name|'domainref'
op|'='
name|'objects'
op|'.'
name|'DNSDomain'
op|'.'
name|'get_by_domain'
op|'('
name|'context'
op|','
name|'instance_domain'
op|')'
newline|'\n'
name|'if'
name|'domainref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'instance-dns-zone not found |%s|.'"
op|')'
op|','
nl|'\n'
name|'instance_domain'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'dns_zone'
op|'='
name|'domainref'
op|'.'
name|'availability_zone'
newline|'\n'
nl|'\n'
name|'instance_zone'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'availability_zone'"
op|')'
newline|'\n'
name|'if'
name|'dns_zone'
name|'and'
op|'('
name|'dns_zone'
op|'!='
name|'instance_zone'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'instance-dns-zone is |%(domain)s|, '"
nl|'\n'
string|"'which is in availability zone |%(zone)s|. '"
nl|'\n'
string|"'Instance is in zone |%(zone2)s|. '"
nl|'\n'
string|"'No DNS record will be created.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'domain'"
op|':'
name|'instance_domain'
op|','
nl|'\n'
string|"'zone'"
op|':'
name|'dns_zone'
op|','
nl|'\n'
string|"'zone2'"
op|':'
name|'instance_zone'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
comment|'# TODO(vish): when this is called by compute, we can associate compute'
nl|'\n'
comment|'#             with a network, or a cluster of computes with a network'
nl|'\n'
comment|'#             and use that network here with a method like'
nl|'\n'
comment|'#             network_get_by_compute_host'
nl|'\n'
name|'address'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) This db query could be removed if we pass az and name'
nl|'\n'
comment|'#            (or the whole instance object).'
nl|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Allocate fixed ip on network %s'"
op|','
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# A list of cleanup functions to call on error'
nl|'\n'
name|'cleanup'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|"# Check the quota; can't put this in the API because we get"
nl|'\n'
comment|'# called into from other places'
nl|'\n'
name|'quotas'
op|'='
name|'self'
op|'.'
name|'quotas_cls'
op|'('
op|')'
newline|'\n'
name|'quota_project'
op|','
name|'quota_user'
op|'='
name|'quotas_obj'
op|'.'
name|'ids_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'fixed_ips'
op|'='
number|'1'
op|','
name|'project_id'
op|'='
name|'quota_project'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'quota_user'
op|')'
newline|'\n'
name|'cleanup'
op|'.'
name|'append'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
name|'quotas'
op|'.'
name|'rollback'
op|','
name|'context'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'quotas'"
op|']'
newline|'\n'
name|'headroom'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'headroom'"
op|']'
newline|'\n'
name|'allowed'
op|'='
name|'quotas'
op|'['
string|"'fixed_ips'"
op|']'
newline|'\n'
name|'used'
op|'='
name|'allowed'
op|'-'
name|'headroom'
op|'['
string|"'fixed_ips'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Quota exceeded for project %(pid)s, tried to "'
nl|'\n'
string|'"allocate fixed IP. %(used)s of %(allowed)s are "'
nl|'\n'
string|'"in use or are already reserved."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'pid'"
op|':'
name|'quota_project'
op|','
string|"'used'"
op|':'
name|'used'
op|','
nl|'\n'
string|"'allowed'"
op|':'
name|'allowed'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_id'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'FixedIpLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'['
string|"'cidr'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'address'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Associating instance with specified fixed IP '"
nl|'\n'
string|"'%(address)s in network %(network)s on subnet '"
nl|'\n'
string|"'%(cidr)s.'"
op|'%'
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
string|"'network'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'network'
op|'['
string|"'cidr'"
op|']'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'str'
op|'('
name|'address'
op|')'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Associating instance with fixed IP from pool '"
nl|'\n'
string|"'in network %(network)s on subnet %(cidr)s.'"
op|'%'
nl|'\n'
op|'{'
string|"'network'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'network'
op|'['
string|"'cidr'"
op|']'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'associate_pool'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'address'
op|'='
name|'str'
op|'('
name|'fip'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vif'
op|'='
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'get_by_instance_and_network'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vif'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'vif for network %(network)s is used up, '"
nl|'\n'
string|"'trying to create new vif'"
op|','
nl|'\n'
op|'{'
string|"'network'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vif'
op|'='
name|'self'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fip'
op|'.'
name|'allocated'
op|'='
name|'True'
newline|'\n'
name|'fip'
op|'.'
name|'virtual_interface_id'
op|'='
name|'vif'
op|'.'
name|'id'
newline|'\n'
name|'fip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'cleanup'
op|'.'
name|'append'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
name|'fip'
op|'.'
name|'disassociate'
op|','
name|'context'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Refreshing security group members for instance.'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'cleanup'
op|'.'
name|'append'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|','
comment|'# noqa'
nl|'\n'
name|'instance_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'name'
op|'='
name|'instance'
op|'.'
name|'display_name'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
nl|'\n'
name|'name'
op|','
name|'str'
op|'('
name|'fip'
op|'.'
name|'address'
op|')'
op|','
string|'"A"'
op|','
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'cleanup'
op|'.'
name|'append'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'delete_entry'
op|','
nl|'\n'
name|'name'
op|','
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
nl|'\n'
name|'instance_id'
op|','
name|'str'
op|'('
name|'fip'
op|'.'
name|'address'
op|')'
op|','
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'cleanup'
op|'.'
name|'append'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'delete_entry'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Setting up network %(network)s on host %(host)s.'"
op|'%'
nl|'\n'
op|'{'
string|"'network'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'cleanup'
op|'.'
name|'append'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_teardown_network_on_host'
op|','
nl|'\n'
name|'context'
op|','
name|'network'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'quotas'
op|'.'
name|'commit'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'address'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# TODO(mriedem): should _setup_network_on_host return the addr?'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Fixed IP is setup on network %s but not returning '"
nl|'\n'
string|"'the specific IP from the base network manager.'"
op|','
nl|'\n'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Allocated fixed ip %s on network %s'"
op|','
name|'address'
op|','
nl|'\n'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'address'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'f'
name|'in'
name|'cleanup'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'f'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Error cleaning up fixed ip '"
nl|'\n'
string|"'allocation. Manual cleanup may '"
nl|'\n'
string|"'be required.'"
op|')'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'teardown'
op|'='
name|'True'
op|','
nl|'\n'
name|'instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'address'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'network'"
op|']'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'fixed_ip_ref'
op|'.'
name|'instance_uuid'
newline|'\n'
name|'vif_id'
op|'='
name|'fixed_ip_ref'
op|'.'
name|'virtual_interface_id'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Deallocate fixed ip %s'"
op|','
name|'address'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
comment|'# NOTE(vish) This db query could be removed if we pass az and name'
nl|'\n'
comment|'#            (or the whole instance object).'
nl|'\n'
comment|"# NOTE(danms) We can't use fixed_ip_ref.instance because"
nl|'\n'
comment|'#             instance may be deleted and the relationship'
nl|'\n'
comment|"#             doesn't extend to deleted instances"
nl|'\n'
indent|'            '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'quotas'
op|'='
name|'self'
op|'.'
name|'quotas_cls'
op|'('
op|')'
newline|'\n'
name|'quota_project'
op|','
name|'quota_user'
op|'='
name|'quotas_obj'
op|'.'
name|'ids_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'fixed_ips'
op|'='
op|'-'
number|'1'
op|','
name|'project_id'
op|'='
name|'quota_project'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'quota_user'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed to update usages deallocating "'
nl|'\n'
string|'"fixed IP"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'get_entries_by_address'
op|'('
nl|'\n'
name|'address'
op|','
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'delete_entry'
op|'('
name|'n'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'fixed_ip_ref'
op|'.'
name|'allocated'
op|'='
name|'False'
newline|'\n'
name|'fixed_ip_ref'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'teardown'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'='
name|'fixed_ip_ref'
op|'.'
name|'network'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'force_dhcp_release'
op|':'
newline|'\n'
indent|'                    '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(vish): The below errors should never happen, but'
nl|'\n'
comment|'#             there may be a race condition that is causing'
nl|'\n'
comment|'#             them per'
nl|'\n'
comment|'#             https://code.launchpad.net/bugs/968457,'
nl|'\n'
comment|'#             so we log an error to help track down'
nl|'\n'
comment|'#             the possible race.'
nl|'\n'
name|'if'
name|'not'
name|'vif_id'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Unable to release %s because vif "'
nl|'\n'
string|'"doesn\'t exist"'
op|')'
op|','
name|'address'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'vif'
op|'='
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'vif_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'vif'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Unable to release %s because vif "'
nl|'\n'
string|'"object doesn\'t exist"'
op|')'
op|','
name|'address'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# NOTE(cfb): Call teardown before release_dhcp to ensure'
nl|'\n'
comment|"#            that the IP can't be re-leased after a release"
nl|'\n'
comment|'#            packet is sent.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_teardown_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(vish): This forces a packet so that the'
nl|'\n'
comment|'#             release_fixed_ip callback will'
nl|'\n'
comment|'#             get called by nova-dhcpbridge.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'release_dhcp'
op|'('
name|'dev'
op|','
name|'address'
op|','
name|'vif'
op|'.'
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NetworkDhcpReleaseFailed'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Error releasing DHCP for IP %(address)s"'
nl|'\n'
string|'" with MAC %(mac_address)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
name|'vif'
op|'.'
name|'address'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(yufang521247): This is probably a failed dhcp fixed'
nl|'\n'
comment|'# ip. DHCPRELEASE packet sent to dnsmasq would not trigger'
nl|'\n'
comment|'# dhcp-bridge to run. Thus it is better to disassociate'
nl|'\n'
comment|'# such fixed ip here.'
nl|'\n'
dedent|''
name|'fixed_ip_ref'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'if'
op|'('
name|'instance_uuid'
op|'=='
name|'fixed_ip_ref'
op|'.'
name|'instance_uuid'
name|'and'
nl|'\n'
name|'not'
name|'fixed_ip_ref'
op|'.'
name|'leased'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'fixed_ip_ref'
op|'.'
name|'disassociate'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# We can't try to free the IP address so just call teardown"
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_teardown_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'quotas'
op|'.'
name|'rollback'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Failed to rollback quota for "'
nl|'\n'
string|'"deallocate fixed ip: %s"'
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Commit the reservations'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'quotas'
op|'.'
name|'commit'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lease_fixed_ip
dedent|''
name|'def'
name|'lease_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is leased."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Leased IP |%s|'"
op|','
name|'address'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'IP %s leased that is not associated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'fixed_ip'
op|'.'
name|'leased'
op|'='
name|'True'
newline|'\n'
name|'fixed_ip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'.'
name|'allocated'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'IP |%s| leased that isn\\'t allocated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_fixed_ip
dedent|''
dedent|''
name|'def'
name|'release_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is released."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Released IP |%s|'"
op|','
name|'address'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'IP %s released that is not associated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'fixed_ip'
op|'.'
name|'leased'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'IP %s released that was not leased'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'fixed_ip'
op|'.'
name|'leased'
op|'='
name|'False'
newline|'\n'
name|'fixed_ip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'.'
name|'allocated'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ip'
op|'.'
name|'disassociate'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_convert_int_args
name|'def'
name|'_convert_int_args'
op|'('
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'int_args'
op|'='
op|'('
string|'"network_size"'
op|','
string|'"num_networks"'
op|','
nl|'\n'
string|'"vlan_start"'
op|','
string|'"vpn_start"'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'int_args'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'kwargs'
op|'['
name|'key'
op|']'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidIntValue'
op|'('
name|'key'
op|'='
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'label'
op|','
name|'cidr'
op|'='
name|'None'
op|','
name|'multi_host'
op|'='
name|'None'
op|','
name|'num_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'network_size'
op|'='
name|'None'
op|','
name|'cidr_v6'
op|'='
name|'None'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'None'
op|','
name|'gateway_v6'
op|'='
name|'None'
op|','
name|'bridge'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
name|'dns1'
op|'='
name|'None'
op|','
name|'dns2'
op|'='
name|'None'
op|','
nl|'\n'
name|'fixed_cidr'
op|'='
name|'None'
op|','
name|'allowed_start'
op|'='
name|'None'
op|','
nl|'\n'
name|'allowed_end'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'arg_names'
op|'='
op|'('
string|'"label"'
op|','
string|'"cidr"'
op|','
string|'"multi_host"'
op|','
string|'"num_networks"'
op|','
nl|'\n'
string|'"network_size"'
op|','
string|'"cidr_v6"'
op|','
nl|'\n'
string|'"gateway"'
op|','
string|'"gateway_v6"'
op|','
string|'"bridge"'
op|','
nl|'\n'
string|'"bridge_interface"'
op|','
string|'"dns1"'
op|','
string|'"dns2"'
op|','
nl|'\n'
string|'"fixed_cidr"'
op|','
string|'"allowed_start"'
op|','
string|'"allowed_end"'
op|')'
newline|'\n'
name|'if'
string|"'mtu'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'mtu'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'network_device_mtu'
newline|'\n'
dedent|''
name|'if'
string|"'dhcp_server'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'gateway'
newline|'\n'
dedent|''
name|'if'
string|"'enable_dhcp'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'enable_dhcp'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
string|"'share_address'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'share_address'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'share_dhcp_address'
newline|'\n'
dedent|''
name|'for'
name|'name'
name|'in'
name|'arg_names'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
name|'name'
op|']'
op|'='
name|'locals'
op|'('
op|')'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_convert_int_args'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# check for certain required inputs'
nl|'\n'
name|'label'
op|'='
name|'kwargs'
op|'['
string|'"label"'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'label'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotCreated'
op|'('
name|'req'
op|'='
string|'"label"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Size of "label" column in nova.networks is 255, hence the restriction'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'label'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'LabelTooLong'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
name|'or'
name|'kwargs'
op|'['
string|'"cidr_v6"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotCreated'
op|'('
name|'req'
op|'='
string|'"cidr or cidr_v6"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kwargs'
op|'['
string|'"bridge"'
op|']'
op|'='
name|'kwargs'
op|'['
string|'"bridge"'
op|']'
name|'or'
name|'CONF'
op|'.'
name|'flat_network_bridge'
newline|'\n'
name|'kwargs'
op|'['
string|'"bridge_interface"'
op|']'
op|'='
op|'('
name|'kwargs'
op|'['
string|'"bridge_interface"'
op|']'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'flat_interface'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'fld'
name|'in'
name|'self'
op|'.'
name|'required_create_args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'kwargs'
op|'['
name|'fld'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotCreated'
op|'('
name|'req'
op|'='
name|'fld'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'kwargs'
op|'['
string|'"cidr_v6"'
op|']'
op|':'
newline|'\n'
comment|'# NOTE(vish): just for validation'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|'"cidr_v6"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCidr'
op|'('
name|'cidr'
op|'='
name|'kwargs'
op|'['
string|'"cidr_v6"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'fixnet'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCidr'
op|'('
name|'cidr'
op|'='
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
op|'='
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
name|'or'
name|'CONF'
op|'.'
name|'num_networks'
newline|'\n'
name|'if'
name|'not'
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'each_subnet_size'
op|'='
name|'fixnet'
op|'.'
name|'size'
op|'/'
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
newline|'\n'
name|'if'
name|'each_subnet_size'
op|'>'
name|'CONF'
op|'.'
name|'network_size'
op|':'
newline|'\n'
indent|'                    '
name|'subnet'
op|'='
number|'32'
op|'-'
name|'int'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'CONF'
op|'.'
name|'network_size'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'oversize_msg'
op|'='
name|'_LW'
op|'('
nl|'\n'
string|"'Subnet(s) too large, defaulting to /%s.'"
nl|'\n'
string|"'  To override, specify network_size flag.'"
op|')'
op|'%'
name|'subnet'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'oversize_msg'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
name|'CONF'
op|'.'
name|'network_size'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
name|'fixnet'
op|'.'
name|'size'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
name|'CONF'
op|'.'
name|'network_size'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'kwargs'
op|'['
string|'"multi_host"'
op|']'
op|'='
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'multi_host'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|'"multi_host"'
op|']'
name|'is'
name|'None'
nl|'\n'
name|'else'
name|'strutils'
op|'.'
name|'bool_from_string'
op|'('
name|'kwargs'
op|'['
string|'"multi_host"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'['
string|'"vlan_start"'
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vlan_start"'
op|')'
name|'or'
name|'CONF'
op|'.'
name|'vlan_start'
newline|'\n'
name|'kwargs'
op|'['
string|'"vpn_start"'
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vpn_start"'
op|')'
name|'or'
name|'CONF'
op|'.'
name|'vpn_start'
newline|'\n'
name|'kwargs'
op|'['
string|'"dns1"'
op|']'
op|'='
name|'kwargs'
op|'['
string|'"dns1"'
op|']'
name|'or'
name|'CONF'
op|'.'
name|'flat_network_dns'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCidr'
op|'('
name|'cidr'
op|'='
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Subnet of fixed IPs must fall within fixed range'
nl|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
name|'not'
name|'in'
name|'fixnet'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'AddressOutOfRange'
op|'('
nl|'\n'
name|'address'
op|'='
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|'.'
name|'network'
op|','
name|'cidr'
op|'='
name|'fixnet'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Create network: |%s|'"
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_do_create_networks'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_index_of
name|'def'
name|'_index_of'
op|'('
name|'subnet'
op|','
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'ip'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAddress'
op|'('
name|'address'
op|'='
name|'ip'
op|')'
newline|'\n'
dedent|''
name|'index'
op|'='
name|'start'
op|'.'
name|'value'
op|'-'
name|'subnet'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'index'
op|'<'
number|'0'
name|'or'
name|'index'
op|'>='
name|'subnet'
op|'.'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressOutOfRange'
op|'('
name|'address'
op|'='
name|'ip'
op|','
name|'cidr'
op|'='
name|'str'
op|'('
name|'subnet'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'index'
newline|'\n'
nl|'\n'
DECL|member|_do_create_networks
dedent|''
name|'def'
name|'_do_create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'label'
op|','
name|'cidr'
op|','
name|'multi_host'
op|','
name|'num_networks'
op|','
nl|'\n'
name|'network_size'
op|','
name|'cidr_v6'
op|','
name|'gateway'
op|','
name|'gateway_v6'
op|','
name|'bridge'
op|','
nl|'\n'
name|'bridge_interface'
op|','
name|'dns1'
op|'='
name|'None'
op|','
name|'dns2'
op|'='
name|'None'
op|','
nl|'\n'
name|'fixed_cidr'
op|'='
name|'None'
op|','
name|'mtu'
op|'='
name|'None'
op|','
name|'dhcp_server'
op|'='
name|'None'
op|','
nl|'\n'
name|'enable_dhcp'
op|'='
name|'None'
op|','
name|'share_address'
op|'='
name|'None'
op|','
nl|'\n'
name|'allowed_start'
op|'='
name|'None'
op|','
name|'allowed_end'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
comment|'# NOTE(jkoelker): these are dummy values to make sure iter works'
nl|'\n'
comment|'# TODO(tr3buchet): disallow carving up networks'
nl|'\n'
name|'fixed_net_v4'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
string|"'0/32'"
op|')'
newline|'\n'
name|'fixed_net_v6'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
string|"'::0/128'"
op|')'
newline|'\n'
name|'subnets_v4'
op|'='
op|'['
op|']'
newline|'\n'
name|'subnets_v6'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ipam'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cidr_v6'
op|':'
newline|'\n'
indent|'                '
name|'subnets_v6'
op|'='
op|'['
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr_v6'
op|')'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'subnets_v4'
op|'='
op|'['
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'subnet_bits'
op|'='
name|'int'
op|'('
name|'math'
op|'.'
name|'ceil'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'network_size'
op|','
number|'2'
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'cidr_v6'
op|':'
newline|'\n'
indent|'                '
name|'fixed_net_v6'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr_v6'
op|')'
newline|'\n'
name|'prefixlen_v6'
op|'='
number|'128'
op|'-'
name|'subnet_bits'
newline|'\n'
comment|'# smallest subnet in IPv6 ethernet network is /64'
nl|'\n'
name|'if'
name|'prefixlen_v6'
op|'>'
number|'64'
op|':'
newline|'\n'
indent|'                    '
name|'prefixlen_v6'
op|'='
number|'64'
newline|'\n'
dedent|''
name|'subnets_v6'
op|'='
name|'fixed_net_v6'
op|'.'
name|'subnet'
op|'('
name|'prefixlen_v6'
op|','
nl|'\n'
name|'count'
op|'='
name|'num_networks'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'fixed_net_v4'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'prefixlen_v4'
op|'='
number|'32'
op|'-'
name|'subnet_bits'
newline|'\n'
name|'subnets_v4'
op|'='
name|'list'
op|'('
name|'fixed_net_v4'
op|'.'
name|'subnet'
op|'('
name|'prefixlen_v4'
op|','
nl|'\n'
name|'count'
op|'='
name|'num_networks'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'cidr'
op|':'
newline|'\n'
comment|'# NOTE(jkoelker): This replaces the _validate_cidrs call and'
nl|'\n'
comment|'#                 prevents looping multiple times'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'nets'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'                '
name|'nets'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'num_used_nets'
op|'='
name|'len'
op|'('
name|'nets'
op|')'
newline|'\n'
name|'used_subnets'
op|'='
op|'['
name|'net'
op|'.'
name|'cidr'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
nl|'\n'
DECL|function|find_next
name|'def'
name|'find_next'
op|'('
name|'subnet'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'next_subnet'
op|'='
name|'subnet'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'while'
name|'next_subnet'
name|'in'
name|'subnets_v4'
op|':'
newline|'\n'
indent|'                    '
name|'next_subnet'
op|'='
name|'next_subnet'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'next_subnet'
name|'in'
name|'fixed_net_v4'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'next_subnet'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'subnet'
name|'in'
name|'list'
op|'('
name|'subnets_v4'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'subnet'
name|'in'
name|'used_subnets'
op|':'
newline|'\n'
indent|'                    '
name|'next_subnet'
op|'='
name|'find_next'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'if'
name|'next_subnet'
op|':'
newline|'\n'
indent|'                        '
name|'subnets_v4'
op|'.'
name|'remove'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'subnets_v4'
op|'.'
name|'append'
op|'('
name|'next_subnet'
op|')'
newline|'\n'
name|'subnet'
op|'='
name|'next_subnet'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'exception'
op|'.'
name|'CidrConflict'
op|'('
name|'cidr'
op|'='
name|'subnet'
op|','
nl|'\n'
name|'other'
op|'='
name|'subnet'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'used_subnet'
name|'in'
name|'used_subnets'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'subnet'
name|'in'
name|'used_subnet'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'exception'
op|'.'
name|'CidrConflict'
op|'('
name|'cidr'
op|'='
name|'subnet'
op|','
nl|'\n'
name|'other'
op|'='
name|'used_subnet'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'used_subnet'
name|'in'
name|'subnet'
op|':'
newline|'\n'
indent|'                        '
name|'next_subnet'
op|'='
name|'find_next'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'if'
name|'next_subnet'
op|':'
newline|'\n'
indent|'                            '
name|'subnets_v4'
op|'.'
name|'remove'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'subnets_v4'
op|'.'
name|'append'
op|'('
name|'next_subnet'
op|')'
newline|'\n'
name|'subnet'
op|'='
name|'next_subnet'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'exception'
op|'.'
name|'CidrConflict'
op|'('
name|'cidr'
op|'='
name|'subnet'
op|','
nl|'\n'
name|'other'
op|'='
name|'used_subnet'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'('
name|'context'
op|'='
name|'context'
op|','
name|'objects'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'subnets'
op|'='
name|'itertools'
op|'.'
name|'izip_longest'
op|'('
name|'subnets_v4'
op|','
name|'subnets_v6'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
op|'('
name|'subnet_v4'
op|','
name|'subnet_v6'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'subnets'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'net'
op|'.'
name|'bridge'
op|'='
name|'bridge'
newline|'\n'
name|'net'
op|'.'
name|'bridge_interface'
op|'='
name|'bridge_interface'
newline|'\n'
name|'net'
op|'.'
name|'multi_host'
op|'='
name|'multi_host'
newline|'\n'
nl|'\n'
name|'net'
op|'.'
name|'dns1'
op|'='
name|'dns1'
newline|'\n'
name|'net'
op|'.'
name|'dns2'
op|'='
name|'dns2'
newline|'\n'
name|'net'
op|'.'
name|'mtu'
op|'='
name|'mtu'
newline|'\n'
name|'net'
op|'.'
name|'enable_dhcp'
op|'='
name|'enable_dhcp'
newline|'\n'
name|'net'
op|'.'
name|'share_address'
op|'='
name|'share_address'
newline|'\n'
nl|'\n'
name|'net'
op|'.'
name|'project_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_networks'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'.'
name|'label'
op|'='
string|"'%s_%d'"
op|'%'
op|'('
name|'label'
op|','
name|'index'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'.'
name|'label'
op|'='
name|'label'
newline|'\n'
nl|'\n'
dedent|''
name|'bottom_reserved'
op|'='
name|'self'
op|'.'
name|'_bottom_reserved_ips'
newline|'\n'
name|'top_reserved'
op|'='
name|'self'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'extra_reserved'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'cidr'
name|'and'
name|'subnet_v4'
op|':'
newline|'\n'
indent|'                '
name|'current'
op|'='
name|'subnet_v4'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'allowed_start'
op|':'
newline|'\n'
indent|'                    '
name|'val'
op|'='
name|'self'
op|'.'
name|'_index_of'
op|'('
name|'subnet_v4'
op|','
name|'allowed_start'
op|')'
newline|'\n'
name|'current'
op|'='
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'allowed_start'
op|')'
newline|'\n'
name|'bottom_reserved'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'if'
name|'allowed_end'
op|':'
newline|'\n'
indent|'                    '
name|'val'
op|'='
name|'self'
op|'.'
name|'_index_of'
op|'('
name|'subnet_v4'
op|','
name|'allowed_end'
op|')'
newline|'\n'
name|'top_reserved'
op|'='
name|'subnet_v4'
op|'.'
name|'size'
op|'-'
number|'1'
op|'-'
name|'val'
newline|'\n'
dedent|''
name|'net'
op|'.'
name|'cidr'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|')'
newline|'\n'
name|'net'
op|'.'
name|'netmask'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'.'
name|'netmask'
op|')'
newline|'\n'
name|'net'
op|'.'
name|'broadcast'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
name|'if'
name|'gateway'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'.'
name|'gateway'
op|'='
name|'gateway'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'.'
name|'gateway'
op|'='
name|'current'
newline|'\n'
name|'current'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'dhcp_server'
op|':'
newline|'\n'
indent|'                    '
name|'dhcp_server'
op|'='
name|'net'
op|'.'
name|'gateway'
newline|'\n'
dedent|''
name|'net'
op|'.'
name|'dhcp_start'
op|'='
name|'current'
newline|'\n'
name|'current'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'str'
op|'('
name|'net'
op|'.'
name|'dhcp_start'
op|')'
op|'=='
name|'dhcp_server'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'.'
name|'dhcp_start'
op|'='
name|'current'
newline|'\n'
dedent|''
name|'net'
op|'.'
name|'dhcp_server'
op|'='
name|'dhcp_server'
newline|'\n'
name|'extra_reserved'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'net'
op|'.'
name|'dhcp_server'
op|')'
op|')'
newline|'\n'
name|'extra_reserved'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'net'
op|'.'
name|'gateway'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cidr_v6'
name|'and'
name|'subnet_v6'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'.'
name|'cidr_v6'
op|'='
name|'str'
op|'('
name|'subnet_v6'
op|')'
newline|'\n'
name|'if'
name|'gateway_v6'
op|':'
newline|'\n'
comment|'# use a pre-defined gateway if one is provided'
nl|'\n'
indent|'                    '
name|'net'
op|'.'
name|'gateway_v6'
op|'='
name|'str'
op|'('
name|'gateway_v6'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'.'
name|'gateway_v6'
op|'='
name|'str'
op|'('
name|'subnet_v6'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'net'
op|'.'
name|'netmask_v6'
op|'='
name|'str'
op|'('
name|'subnet_v6'
op|'.'
name|'netmask'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'network_manager'
op|'=='
string|"'nova.network.manager.VlanManager'"
op|':'
newline|'\n'
indent|'                '
name|'vlan'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vlan'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vlan'
op|':'
newline|'\n'
indent|'                    '
name|'index_vlan'
op|'='
name|'index'
op|'+'
name|'num_used_nets'
newline|'\n'
name|'vlan'
op|'='
name|'kwargs'
op|'['
string|"'vlan_start'"
op|']'
op|'+'
name|'index_vlan'
newline|'\n'
name|'used_vlans'
op|'='
op|'['
name|'x'
op|'.'
name|'vlan'
name|'for'
name|'x'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'if'
name|'vlan'
name|'in'
name|'used_vlans'
op|':'
newline|'\n'
comment|'# That vlan is used, try to get another one'
nl|'\n'
indent|'                        '
name|'used_vlans'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'vlan'
op|'='
name|'used_vlans'
op|'['
op|'-'
number|'1'
op|']'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'net'
op|'.'
name|'vpn_private_address'
op|'='
name|'net'
op|'.'
name|'dhcp_start'
newline|'\n'
name|'extra_reserved'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'net'
op|'.'
name|'vpn_private_address'
op|')'
op|')'
newline|'\n'
name|'net'
op|'.'
name|'dhcp_start'
op|'='
name|'net'
op|'.'
name|'dhcp_start'
op|'+'
number|'1'
newline|'\n'
name|'net'
op|'.'
name|'vlan'
op|'='
name|'vlan'
newline|'\n'
name|'net'
op|'.'
name|'bridge'
op|'='
string|"'br%s'"
op|'%'
name|'vlan'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): This makes ports unique across the cloud, a more'
nl|'\n'
comment|'#             robust solution would be to make them uniq per ip'
nl|'\n'
name|'index_vpn'
op|'='
name|'index'
op|'+'
name|'num_used_nets'
newline|'\n'
name|'net'
op|'.'
name|'vpn_public_port'
op|'='
name|'kwargs'
op|'['
string|"'vpn_start'"
op|']'
op|'+'
name|'index_vpn'
newline|'\n'
nl|'\n'
dedent|''
name|'net'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'networks'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'net'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cidr'
name|'and'
name|'subnet_v4'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_fixed_ips'
op|'('
name|'context'
op|','
name|'net'
op|'.'
name|'id'
op|','
name|'fixed_cidr'
op|','
nl|'\n'
name|'extra_reserved'
op|','
name|'bottom_reserved'
op|','
nl|'\n'
name|'top_reserved'
op|')'
newline|'\n'
comment|'# NOTE(danms): Remove this in RPC API v2.0'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_network
dedent|''
name|'def'
name|'delete_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_range'
op|','
name|'uuid'
op|','
nl|'\n'
name|'require_disassociated'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|"# Prefer uuid but we'll also take cidr for backwards compatibility"
nl|'\n'
indent|'        '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'if'
name|'uuid'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_uuid'
op|'('
name|'elevated'
op|','
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fixed_range'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_cidr'
op|'('
name|'elevated'
op|','
name|'fixed_range'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Delete network %s'"
op|','
name|'network'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'require_disassociated'
name|'and'
name|'network'
op|'.'
name|'project_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkHasProject'
op|'('
name|'project_id'
op|'='
name|'network'
op|'.'
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'network'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
number|'2'
comment|'# network, gateway'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'return'
number|'1'
comment|'# broadcast'
newline|'\n'
nl|'\n'
DECL|member|_create_fixed_ips
dedent|''
name|'def'
name|'_create_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'fixed_cidr'
op|'='
name|'None'
op|','
nl|'\n'
name|'extra_reserved'
op|'='
name|'None'
op|','
name|'bottom_reserved'
op|'='
number|'0'
op|','
nl|'\n'
name|'top_reserved'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create all fixed ips for network."""'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'extra_reserved'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'extra_reserved'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'fixed_cidr'
op|':'
newline|'\n'
indent|'            '
name|'fixed_cidr'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'num_ips'
op|'='
name|'len'
op|'('
name|'fixed_cidr'
op|')'
newline|'\n'
name|'ips'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_ips'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'fixed_cidr'
op|'['
name|'index'
op|']'
op|')'
newline|'\n'
name|'if'
op|'('
name|'index'
op|'<'
name|'bottom_reserved'
name|'or'
name|'num_ips'
op|'-'
name|'index'
op|'<='
name|'top_reserved'
name|'or'
nl|'\n'
name|'address'
name|'in'
name|'extra_reserved'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'ips'
op|'.'
name|'append'
op|'('
op|'{'
string|"'network_id'"
op|':'
name|'network_id'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'reserved'"
op|':'
name|'reserved'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'bulk_create'
op|'('
name|'context'
op|','
name|'ips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
dedent|''
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'networks'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_networks_on_host
dedent|''
name|'def'
name|'setup_networks_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""calls setup/teardown on network hosts for an instance."""'
newline|'\n'
name|'green_threads'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'teardown'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_teardown_network_on_host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_setup_network_on_host'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'vifs'
op|'='
name|'objects'
op|'.'
name|'VirtualInterfaceList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Setup networks on host'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'network'
op|'.'
name|'multi_host'
op|':'
newline|'\n'
comment|'# NOTE (tr3buchet): if using multi_host, host is instance[host]'
nl|'\n'
indent|'                '
name|'host'
op|'='
name|'network'
op|'['
string|"'host'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'host'
op|'=='
name|'host'
name|'or'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# at this point i am the correct host, or host doesn't"
nl|'\n'
comment|'# matter -> FlatManager'
nl|'\n'
indent|'                '
name|'call_func'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# i'm not the right host, run call on correct host"
nl|'\n'
indent|'                '
name|'green_threads'
op|'.'
name|'append'
op|'('
name|'eventlet'
op|'.'
name|'spawn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'rpc_setup_network_on_host'
op|','
name|'context'
op|','
nl|'\n'
name|'network'
op|'.'
name|'id'
op|','
name|'teardown'
op|','
name|'host'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for all of the setups (if any) to finish'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'gt'
name|'in'
name|'green_threads'
op|':'
newline|'\n'
indent|'            '
name|'gt'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|rpc_setup_network_on_host
dedent|''
dedent|''
name|'def'
name|'rpc_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'teardown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'teardown'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_teardown_network_on_host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_setup_network_on_host'
newline|'\n'
nl|'\n'
comment|'# subcall from original setup_networks_on_host'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'call_func'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_initialize_network
dedent|''
name|'def'
name|'_initialize_network'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'network'
op|'.'
name|'enable_dhcp'
op|':'
newline|'\n'
indent|'            '
name|'is_ext'
op|'='
op|'('
name|'network'
op|'.'
name|'dhcp_server'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'network'
op|'.'
name|'dhcp_server'
op|'!='
name|'network'
op|'.'
name|'gateway'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize_network'
op|'('
name|'network'
op|'.'
name|'cidr'
op|','
name|'is_ext'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize_gateway'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_network_on_host
dedent|''
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_teardown_network_on_host
dedent|''
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|validate_networks
dedent|''
name|'def'
name|'validate_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check if the networks exists and host\n        is set to each network.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Validate networks'"
op|')'
newline|'\n'
name|'if'
name|'networks'
name|'is'
name|'None'
name|'or'
name|'len'
op|'('
name|'networks'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'network_uuids'
op|'='
op|'['
name|'uuid'
name|'for'
op|'('
name|'uuid'
op|','
name|'fixed_ip'
op|')'
name|'in'
name|'networks'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'network_uuid'
op|','
name|'address'
name|'in'
name|'networks'
op|':'
newline|'\n'
comment|'# check if the fixed IP address is valid and'
nl|'\n'
comment|'# it actually belongs to the network'
nl|'\n'
indent|'            '
name|'if'
name|'address'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_valid_ip_address'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_ip_ref'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'address'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'network'"
op|']'
op|')'
newline|'\n'
name|'network'
op|'='
name|'fixed_ip_ref'
op|'.'
name|'network'
newline|'\n'
name|'if'
name|'network'
op|'.'
name|'uuid'
op|'!='
name|'network_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForNetwork'
op|'('
nl|'\n'
name|'address'
op|'='
name|'address'
op|','
name|'network_uuid'
op|'='
name|'network_uuid'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'fixed_ip_ref'
op|'.'
name|'instance_uuid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpAlreadyInUse'
op|'('
nl|'\n'
name|'address'
op|'='
name|'address'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'fixed_ip_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_by_id
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_network_by_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_by_uuids
dedent|''
name|'def'
name|'_get_networks_by_uuids'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuids'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_uuids'
op|'('
nl|'\n'
name|'context'
op|','
name|'network_uuids'
op|','
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
newline|'\n'
name|'networks'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'network_uuids'
op|'.'
name|'index'
op|'('
name|'x'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'return'
name|'networks'
newline|'\n'
nl|'\n'
DECL|member|get_vifs_by_instance
dedent|''
name|'def'
name|'get_vifs_by_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the vifs associated with an instance."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Get VIFs for instance'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(russellb) No need to object-ify this since'
nl|'\n'
comment|'# get_vifs_by_instance() is unused and set to be removed.'
nl|'\n'
name|'vifs'
op|'='
name|'objects'
op|'.'
name|'VirtualInterfaceList'
op|'.'
name|'get_by_instance_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'.'
name|'network_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'net_uuid'
op|'='
name|'network'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'['
name|'dict'
op|'('
name|'vif'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_instance_id_by_floating_address
dedent|''
name|'def'
name|'get_instance_id_by_floating_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the instance id a floating ip\'s fixed ip is allocated to."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Get instance for floating address %s'"
op|','
name|'address'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_floating_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'if'
name|'fixed_ip'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
newline|'\n'
nl|'\n'
DECL|member|get_network
dedent|''
dedent|''
name|'def'
name|'get_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): used locally'
nl|'\n'
nl|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'network_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_networks
dedent|''
name|'def'
name|'get_all_networks'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
nl|'\n'
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|disassociate_network
dedent|''
dedent|''
name|'def'
name|'disassociate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
indent|'        '
name|'network'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
newline|'\n'
name|'network'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
name|'network'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_fixed_ip
dedent|''
name|'def'
name|'get_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a fixed ip."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_fixed_ip_by_address
dedent|''
name|'def'
name|'get_fixed_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vif_by_mac_address
dedent|''
name|'def'
name|'get_vif_by_mac_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'mac_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the vifs record for the mac_address."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
comment|'# NOTE(russellb) No need to object-ify this since'
nl|'\n'
comment|'# get_vifs_by_instance() is unused and set to be removed.'
nl|'\n'
name|'vif'
op|'='
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
name|'mac_address'
op|')'
newline|'\n'
name|'if'
name|'vif'
op|'.'
name|'network_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'net_uuid'
op|'='
name|'network'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
name|'return'
name|'vif'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'dns_update_periodic_interval'
op|')'
newline|'\n'
DECL|member|_periodic_update_dns
name|'def'
name|'_periodic_update_dns'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update local DNS entries of all networks on this host."""'
newline|'\n'
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_dns
dedent|''
dedent|''
name|'def'
name|'update_dns'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when fixed IP is allocated or deallocated."""'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Update DNS for network ids: %s'"
op|','
name|'network_ids'
op|')'
newline|'\n'
name|'networks'
op|'='
op|'['
name|'network'
name|'for'
name|'network'
name|'in'
nl|'\n'
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
nl|'\n'
name|'if'
name|'network'
op|'.'
name|'multi_host'
name|'and'
name|'network'
op|'.'
name|'id'
name|'in'
name|'network_ids'
op|']'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_network_to_project
dedent|''
dedent|''
name|'def'
name|'add_network_to_project'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'project_id'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatManager
dedent|''
dedent|''
name|'class'
name|'FlatManager'
op|'('
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic network where no vlans are used.\n\n    FlatManager does not do any bridge or vlan creation.  The user is\n    responsible for setting up whatever bridges are specified when creating\n    networks through nova-manage. This bridge needs to be created on all\n    compute hosts.\n\n    The idea is to create a single network for the host with a command like:\n    nova-manage network create 192.168.0.0/24 1 256. Creating multiple\n    networks for one manager is currently not supported, but could be\n    added by modifying allocate_fixed_ip and get_network to get the network\n    with new logic. Arbitrary lists of addresses in a single network can\n    be accomplished with manual db editing.\n\n    If flat_injected is True, the compute host will attempt to inject network\n    config into the guest.  It attempts to modify /etc/network/interfaces and\n    currently only works on debian based systems. To support a wider range of\n    OSes, some other method may need to be devised to let the guest know which\n    ip it should be using so that it can configure itself. Perhaps an attached\n    disk or serial device with configuration info.\n\n    Metadata forwarding must be handled by the gateway, and since nova does\n    not do any setup in this mode, it must be done manually.  Requests to\n    169.254.169.254 port 80 will need to be forwarded to the api server.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'networks'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
name|'addresses_by_network'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'request'
name|'in'
name|'requested_networks'
op|':'
newline|'\n'
indent|'                '
name|'addresses_by_network'
op|'['
name|'request'
op|'.'
name|'network_id'
op|']'
op|'='
name|'request'
op|'.'
name|'address'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'addresses_by_network'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'addresses_by_network'
op|'['
name|'network'
op|'['
string|"'uuid'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|','
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'teardown'
op|'='
name|'True'
op|','
nl|'\n'
name|'instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'super'
op|'('
name|'FlatManager'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'host'
op|','
nl|'\n'
name|'teardown'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'disassociate_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_network_on_host
dedent|''
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setup Network on this host."""'
newline|'\n'
comment|'# NOTE(tr3buchet): this does not need to happen on every ip'
nl|'\n'
comment|'# allocation, this functionality makes more sense in create_network'
nl|'\n'
comment|"# but we'd have to move the flat_injected flag to compute"
nl|'\n'
name|'network'
op|'.'
name|'injected'
op|'='
name|'CONF'
op|'.'
name|'flat_injected'
newline|'\n'
name|'network'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_teardown_network_on_host
dedent|''
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tear down network on this host."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): The floating ip functions are stub-implemented.'
nl|'\n'
comment|'# We were throwing an exception, but this was messing up horizon.'
nl|'\n'
comment|'# Timing makes it difficult to implement floating ips here, in Essex.'
nl|'\n'
nl|'\n'
DECL|member|get_floating_ip
dedent|''
name|'def'
name|'get_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating IP as a dict."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_floating_pools
dedent|''
name|'def'
name|'get_floating_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of floating pools."""'
newline|'\n'
comment|'# NOTE(maurosr) This method should be removed in future, replaced by'
nl|'\n'
comment|'# get_floating_ip_pools. See bug #1091668'
nl|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ip_pools
dedent|''
name|'def'
name|'get_floating_ip_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of floating ip pools."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ip_by_address
dedent|''
name|'def'
name|'get_floating_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating IP as a dict."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_project
dedent|''
name|'def'
name|'get_floating_ips_by_project'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the floating IPs allocated to a project."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_fixed_address
dedent|''
name|'def'
name|'get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the floating IPs associated with a fixed_address."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|allocate_floating_ip
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'pool'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a floating ip from the pool."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|deallocate_floating_ip
name|'def'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating ip to the pool."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates a floating ip with a fixed ip.\n\n        Makes sure everything makes sense then calls _associate_floating_ip,\n        rpc\'ing to correct host if i\'m not it.\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|disassociate_floating_ip
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a floating ip from its fixed ip.\n\n        Makes sure everything makes sense then calls _disassociate_floating_ip,\n        rpc\'ing to correct host if i\'m not it.\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|migrate_instance_start
dedent|''
name|'def'
name|'migrate_instance_start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_addresses'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|migrate_instance_finish
dedent|''
name|'def'
name|'migrate_instance_finish'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_addresses'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|update_dns
dedent|''
name|'def'
name|'update_dns'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when fixed IP is allocated or deallocated."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'FlatDHCPManager'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
nl|'\n'
DECL|class|FlatDHCPManager
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Flat networking with dhcp.\n\n    FlatDHCPManager will start up one dhcp server to give out addresses.\n    It never injects network settings into the guest. It also manages bridges.\n    Otherwise it behaves like FlatManager.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|SHOULD_CREATE_BRIDGE
name|'SHOULD_CREATE_BRIDGE'
op|'='
name|'True'
newline|'\n'
DECL|variable|DHCP
name|'DHCP'
op|'='
name|'True'
newline|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_host'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'iptables_manager'
op|'.'
name|'defer_apply_on'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize'
op|'('
name|'fixed_range'
op|'='
name|'False'
op|','
name|'networks'
op|'='
name|'networks'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'iptables_manager'
op|'.'
name|'defer_apply_off'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_network_on_host
dedent|''
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'network'
op|'.'
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_initialize_network'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(vish): if dhcp server is not set then don't dhcp"
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
name|'and'
name|'network'
op|'.'
name|'enable_dhcp'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'gateway'
op|'='
name|'utils'
op|'.'
name|'get_my_linklocal'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'network'
op|'.'
name|'gateway_v6'
op|'='
name|'gateway'
newline|'\n'
name|'network'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_teardown_network_on_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): if dhcp server is not set then don't dhcp"
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
name|'and'
name|'network'
op|'.'
name|'enable_dhcp'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_dict
dedent|''
dedent|''
name|'def'
name|'_get_network_dict'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the dict representing necessary and meta network fields."""'
newline|'\n'
nl|'\n'
comment|'# get generic network fields'
nl|'\n'
name|'network_dict'
op|'='
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# get flat dhcp specific fields'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'should_create_bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
newline|'\n'
dedent|''
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'bridge_interface'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'bridge_interface'"
op|']'
op|'='
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'multi_host'"
op|']'
op|'='
name|'network'
op|'['
string|"'multi_host'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'network_dict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VlanManager
dedent|''
dedent|''
name|'class'
name|'VlanManager'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Vlan network with dhcp.\n\n    VlanManager is the most complicated.  It will create a host-managed\n    vlan for each project.  Each project gets its own subnet.  The networks\n    and associated subnets are created with nova-manage using a command like:\n    nova-manage network create 10.0.0.0/8 3 16.  This will create 3 networks\n    of 16 addresses from the beginning of the 10.0.0.0 range.\n\n    A dhcp server is run for each subnet, so each project will have its own.\n    For this mode to be useful, each project will need a vpn to access the\n    instances in its subnet.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|SHOULD_CREATE_BRIDGE
name|'SHOULD_CREATE_BRIDGE'
op|'='
name|'True'
newline|'\n'
DECL|variable|SHOULD_CREATE_VLAN
name|'SHOULD_CREATE_VLAN'
op|'='
name|'True'
newline|'\n'
DECL|variable|DHCP
name|'DHCP'
op|'='
name|'True'
newline|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'network_driver'
op|'='
name|'network_driver'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|"# NOTE(cfb) VlanManager doesn't enforce quotas on fixed IP addresses"
nl|'\n'
comment|'#           because a project is assigned an entire network.'
nl|'\n'
name|'self'
op|'.'
name|'quotas_cls'
op|'='
name|'objects'
op|'.'
name|'QuotasNoOp'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Setup network on host %s'"
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_host'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'iptables_manager'
op|'.'
name|'defer_apply_on'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize'
op|'('
name|'fixed_range'
op|'='
name|'False'
op|','
name|'networks'
op|'='
name|'networks'
op|')'
newline|'\n'
name|'NetworkManager'
op|'.'
name|'init_host'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'iptables_manager'
op|'.'
name|'defer_apply_off'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Allocate fixed ip on network %s'"
op|','
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
newline|'\n'
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
name|'str'
op|'('
name|'address'
op|')'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'reserved'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'address'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
name|'str'
op|'('
name|'address'
op|')'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'associate_pool'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'address'
op|'='
name|'fip'
op|'.'
name|'address'
newline|'\n'
nl|'\n'
name|'vif'
op|'='
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'get_by_instance_and_network'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vif'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'vif for network %(network)s and instance '"
nl|'\n'
string|"'%(instance_id)s is used up, '"
nl|'\n'
string|"'trying to create new vif'"
op|','
nl|'\n'
op|'{'
string|"'network'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|')'
newline|'\n'
name|'vif'
op|'='
name|'self'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fip'
op|'.'
name|'allocated'
op|'='
name|'True'
newline|'\n'
name|'fip'
op|'.'
name|'virtual_interface_id'
op|'='
name|'vif'
op|'.'
name|'id'
newline|'\n'
name|'fip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) This db query could be removed if we pass az and name'
nl|'\n'
comment|'#            (or the whole instance object).'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'name'
op|'='
name|'instance'
op|'.'
name|'display_name'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'name'
op|','
name|'address'
op|','
nl|'\n'
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'instance_id'
op|','
name|'address'
op|','
nl|'\n'
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Allocated fixed ip %s on network %s'"
op|','
name|'address'
op|','
nl|'\n'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|add_network_to_project
dedent|''
name|'def'
name|'add_network_to_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'network_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force adds another network to a project."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Add network %s to project %s'"
op|','
name|'network_uuid'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'if'
name|'network_uuid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'network_id'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
op|'.'
name|'id'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'network_id'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'network_id'
op|','
name|'force'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate
dedent|''
name|'def'
name|'associate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|','
name|'associations'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associate or disassociate host or project to network."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Associate network %s: |%s|'"
op|','
name|'network_uuid'
op|','
name|'associations'
op|')'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
newline|'\n'
name|'network_id'
op|'='
name|'network'
op|'.'
name|'id'
newline|'\n'
name|'if'
string|"'host'"
name|'in'
name|'associations'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'associations'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'host'
op|'='
name|'True'
op|','
name|'project'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'network'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'project'"
name|'in'
name|'associations'
op|':'
newline|'\n'
indent|'            '
name|'project'
op|'='
name|'associations'
op|'['
string|"'project'"
op|']'
newline|'\n'
name|'if'
name|'project'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'host'
op|'='
name|'False'
op|','
name|'project'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
name|'project'
op|','
name|'network_id'
op|','
name|'force'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_by_id
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_network_by_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): Don't allow access to networks with project_id=None as"
nl|'\n'
comment|"#             these are networks that haven't been allocated to a"
nl|'\n'
comment|'#             project yet.'
nl|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_by_uuids
dedent|''
name|'def'
name|'_get_networks_by_uuids'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuids'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): Don't allow access to networks with project_id=None as"
nl|'\n'
comment|"#             these are networks that haven't been allocated to a"
nl|'\n'
comment|'#             project yet.'
nl|'\n'
indent|'        '
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_uuids'
op|'('
nl|'\n'
name|'context'
op|','
name|'network_uuids'
op|','
name|'project_only'
op|'='
name|'True'
op|')'
newline|'\n'
name|'networks'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'network_uuids'
op|'.'
name|'index'
op|'('
name|'x'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'return'
name|'networks'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_for_instance
dedent|''
name|'def'
name|'_get_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine which networks an instance should connect to."""'
newline|'\n'
comment|'# get networks associated with project'
nl|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
name|'and'
name|'len'
op|'('
name|'requested_networks'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'network_uuids'
op|'='
op|'['
name|'request'
op|'.'
name|'network_id'
nl|'\n'
name|'for'
name|'request'
name|'in'
name|'requested_networks'
op|']'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(vish): Allocates network on demand so requires admin.'
nl|'\n'
indent|'            '
name|'networks'
op|'='
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_by_project'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'networks'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
name|'self'
op|'.'
name|'_convert_int_args'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'['
string|'"vlan_start"'
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vlan_start"'
op|')'
name|'or'
name|'CONF'
op|'.'
name|'vlan_start'
newline|'\n'
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"num_networks"'
op|')'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'num_networks'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"network_size"'
op|')'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'network_size'
op|')'
newline|'\n'
comment|'# Check that num_networks + vlan_start is not > 4094, fixes lp708025'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
op|'+'
name|'kwargs'
op|'['
string|'"vlan_start"'
op|']'
op|'>'
number|'4094'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The sum between the number of networks and'"
nl|'\n'
string|"' the vlan start cannot be greater'"
nl|'\n'
string|"' than 4094'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that vlan is not greater than 4094 or less then 1'
nl|'\n'
dedent|''
name|'vlan_num'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vlan"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'vlan_num'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vlan_num'
op|'='
name|'int'
op|'('
name|'vlan_num'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"vlan must be an integer"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'vlan_num'
op|'>'
number|'4094'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The vlan number cannot be greater than'"
nl|'\n'
string|"' 4094'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'vlan_num'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The vlan number cannot be less than 1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that num networks and network size fits in fixed_net'
nl|'\n'
dedent|''
dedent|''
name|'fixed_net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'fixed_net'
op|'.'
name|'size'
op|'<'
name|'kwargs'
op|'['
string|"'num_networks'"
op|']'
op|'*'
name|'kwargs'
op|'['
string|"'network_size'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The network range is not '"
nl|'\n'
string|"'big enough to fit %(num_networks)s networks. Network '"
nl|'\n'
string|"'size is %(network_size)s'"
op|')'
op|'%'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kwargs'
op|'['
string|"'bridge_interface'"
op|']'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'bridge_interface'"
op|')'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'vlan_interface'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Create network: |%s|'"
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'NetworkManager'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'self'
op|','
name|'context'
op|','
name|'vpn'
op|'='
name|'True'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'setup_network'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_setup_network_on_host
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'if'
name|'not'
name|'network'
op|'.'
name|'vpn_public_address'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'CONF'
op|'.'
name|'vpn_ip'
newline|'\n'
name|'network'
op|'.'
name|'vpn_public_address'
op|'='
name|'address'
newline|'\n'
name|'network'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network'
op|'.'
name|'vpn_public_address'
newline|'\n'
dedent|''
name|'network'
op|'.'
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_initialize_network'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(vish): only ensure this forward if the address hasn't been set"
nl|'\n'
comment|'#             manually.'
nl|'\n'
name|'if'
name|'address'
op|'=='
name|'CONF'
op|'.'
name|'vpn_ip'
name|'and'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
string|'"ensure_vpn_forward"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'add_vpn'
op|'('
name|'CONF'
op|'.'
name|'vpn_ip'
op|','
nl|'\n'
name|'network'
op|'.'
name|'vpn_public_port'
op|','
nl|'\n'
name|'network'
op|'.'
name|'vpn_private_address'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'if'
name|'network'
op|'.'
name|'enable_dhcp'
op|':'
newline|'\n'
indent|'                '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'gateway'
op|'='
name|'utils'
op|'.'
name|'get_my_linklocal'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'network'
op|'.'
name|'gateway_v6'
op|'='
name|'gateway'
newline|'\n'
name|'network'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'setup_network'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_teardown_network_on_host
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ethuleau): For multi hosted networks, if the network is no'
nl|'\n'
comment|"# more used on this host and if VPN forwarding rule aren't handed"
nl|'\n'
comment|'# by the host, we delete the network gateway.'
nl|'\n'
name|'vpn_address'
op|'='
name|'network'
op|'['
string|"'vpn_public_address'"
op|']'
newline|'\n'
name|'if'
op|'('
name|'CONF'
op|'.'
name|'teardown_unused_network_gateway'
name|'and'
nl|'\n'
name|'network'
op|'['
string|"'multi_host'"
op|']'
name|'and'
name|'vpn_address'
op|'!='
name|'CONF'
op|'.'
name|'vpn_ip'
name|'and'
nl|'\n'
name|'not'
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'in_use_on_host'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Remove unused gateway %s"'
op|','
name|'network'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'network'
op|'.'
name|'enable_dhcp'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'kill_dhcp'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'remove_gateway'
op|'('
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_uses_shared_ip'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'fip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'.'
name|'dhcp_server'
op|')'
newline|'\n'
name|'fip'
op|'.'
name|'allocated'
op|'='
name|'False'
newline|'\n'
name|'fip'
op|'.'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'fip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
comment|"# NOTE(vish): if dhcp server is not set then don't dhcp"
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'network'
op|'.'
name|'enable_dhcp'
op|':'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
indent|'                '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_dict
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_network_dict'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the dict representing necessary and meta network fields."""'
newline|'\n'
nl|'\n'
comment|'# get generic network fields'
nl|'\n'
name|'network_dict'
op|'='
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# get vlan specific network fields'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'should_create_bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'SHOULD_CREATE_VLAN'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'should_create_vlan'"
op|']'
op|'='
name|'self'
op|'.'
name|'SHOULD_CREATE_VLAN'
newline|'\n'
dedent|''
name|'for'
name|'k'
name|'in'
op|'['
string|"'vlan'"
op|','
string|"'bridge_interface'"
op|','
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'network_dict'
op|'['
name|'k'
op|']'
op|'='
name|'network'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'network_dict'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_bottom_reserved_ips'
op|'+'
number|'1'
comment|'# vpn server'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'parent_reserved'
op|'='
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'return'
name|'parent_reserved'
op|'+'
name|'CONF'
op|'.'
name|'cnt_vpn_clients'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

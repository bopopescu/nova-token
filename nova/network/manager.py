begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nNetwork Hosts are responsible for allocating ips and setting up network.\n\nThere are multiple backend drivers that handle specific types of networking\ntopologies.  All of the network commands are issued to a subclass of\n:class:`NetworkManager`.\n\n**Related Flags**\n\n:network_driver:  Driver to use for network creation\n:flat_network_bridge:  Bridge device for simple network instances\n:flat_interface:  FlatDhcp will bridge into this interface if set\n:flat_network_dns:  Dns for simple network\n:flat_network_dhcp_start:  Dhcp start for FlatDhcp\n:vlan_start:  First VLAN for private networks\n:vpn_ip:  Public IP for the cloudpipe VPN servers\n:vpn_start:  First Vpn port for private networks\n:cnt_vpn_clients:  Number of addresses reserved for vpn clients\n:network_size:  Number of addresses in each private subnet\n:floating_range:  Floating IP address block\n:fixed_range:  Fixed IP address block\n:date_dhcp_on_disassociate:  Whether to update dhcp when fixed_ip\n                             is disassociated\n:fixed_ip_disassociate_timeout:  Seconds after which a deallocated ip\n                                 is disassociated\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
name|'import'
name|'IPy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.network.manager"'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_network_bridge'"
op|','
string|"'br100'"
op|','
nl|'\n'
string|"'Bridge for simple network instances'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_network_dns'"
op|','
string|"'8.8.4.4'"
op|','
nl|'\n'
string|"'Dns for simple network'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'flat_injected'"
op|','
name|'True'
op|','
nl|'\n'
string|"'Whether to attempt to inject network setup into guest'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_interface'"
op|','
name|'None'
op|','
nl|'\n'
string|"'FlatDhcp will bridge into this interface if set'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'flat_network_dhcp_start'"
op|','
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'Dhcp start for FlatDhcp'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_start'"
op|','
number|'100'
op|','
string|"'First VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'num_networks'"
op|','
number|'1000'
op|','
string|"'Number of networks to support'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'vpn_ip'"
op|','
string|"'$my_ip'"
op|','
nl|'\n'
string|"'Public IP for the cloudpipe VPN servers'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vpn_start'"
op|','
number|'1000'
op|','
string|"'First Vpn port for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'network_size'"
op|','
number|'256'
op|','
nl|'\n'
string|"'Number of addresses in each private subnet'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'floating_range'"
op|','
string|"'4.4.4.0/24'"
op|','
nl|'\n'
string|"'Floating IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'fixed_range'"
op|','
string|"'10.0.0.0/8'"
op|','
string|"'Fixed IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'fixed_range_v6'"
op|','
string|"'fd00::/48'"
op|','
string|"'Fixed IPv6 address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cnt_vpn_clients'"
op|','
number|'0'
op|','
nl|'\n'
string|"'Number of addresses reserved for vpn clients'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'network_driver'"
op|','
string|"'nova.network.linux_net'"
op|','
nl|'\n'
string|"'Driver to use for network creation'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'update_dhcp_on_disassociate'"
op|','
name|'False'
op|','
nl|'\n'
string|"'Whether to update dhcp when fixed_ip is disassociated'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'fixed_ip_disassociate_timeout'"
op|','
number|'600'
op|','
nl|'\n'
string|"'Seconds after which a deallocated ip is disassociated'"
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_ipv6'"
op|','
name|'False'
op|','
nl|'\n'
string|"'use the ipv6'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'network_host'"
op|','
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'Network host to use for ip allocation in flat modes'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'fake_call'"
op|','
name|'False'
op|','
nl|'\n'
string|"'If True, skip using the queue and make local calls'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddressAlreadyAllocated
name|'class'
name|'AddressAlreadyAllocated'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Address was already allocated."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkManager
dedent|''
name|'class'
name|'NetworkManager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements common network manager functionality.\n\n    This class must be subclassed to support specific topologies.\n    """'
newline|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'network_driver'
op|':'
newline|'\n'
indent|'            '
name|'network_driver'
op|'='
name|'FLAGS'
op|'.'
name|'network_driver'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'network_driver'
op|')'
newline|'\n'
name|'super'
op|'('
name|'NetworkManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
comment|"# Set up networking for the projects for which we're already"
nl|'\n'
comment|'# the designated network host.'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'host_get_networks'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_on_set_network_host'
op|'('
name|'ctxt'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'floating_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_all_by_host'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'floating_ip'
name|'in'
name|'floating_ips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'floating_ip'
op|'.'
name|'get'
op|'('
string|"'fixed_ip'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fixed_address'
op|'='
name|'floating_ip'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
comment|'# NOTE(vish): The False here is because we ignore the case'
nl|'\n'
comment|'#             that the ip is already bound.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'bind_floating_ip'
op|'('
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_floating_forward'
op|'('
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|periodic_tasks
dedent|''
dedent|''
dedent|''
name|'def'
name|'periodic_tasks'
op|'('
name|'self'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tasks to be run at a periodic interval."""'
newline|'\n'
name|'super'
op|'('
name|'NetworkManager'
op|','
name|'self'
op|')'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout_fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'FLAGS'
op|'.'
name|'fixed_ip_disassociate_timeout'
newline|'\n'
name|'time'
op|'='
name|'now'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
name|'timeout'
op|')'
newline|'\n'
name|'num'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate_all_by_timeout'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'time'
op|')'
newline|'\n'
name|'if'
name|'num'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Dissassociated %s stale fixed ip(s)"'
op|')'
op|','
name|'num'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_network_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Safely sets the host of the network."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"setting network host"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_set_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_on_set_network_host'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'return'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
comment|'# TODO(vish): when this is called by compute, we can associate compute'
nl|'\n'
comment|'#             with a network, or a cluster of computes with a network'
nl|'\n'
comment|'#             and use that network here with a method like'
nl|'\n'
comment|'#             network_get_by_compute_host'
nl|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_by_bridge'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'flat_network_bridge'
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_fixed_ip
dedent|''
name|'def'
name|'setup_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up rules for fixed ip."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a network."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_compute_network
dedent|''
name|'def'
name|'setup_compute_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up matching network for compute hosts."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_floating_ip
dedent|''
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets an floating ip from the pool."""'
newline|'\n'
comment|'# TODO(vish): add floating ips through manage command'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_allocate_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_floating_ip
dedent|''
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates an floating ip to a fixed ip."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_fixed_ip_associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'bind_floating_ip'
op|'('
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_floating_forward'
op|'('
name|'floating_address'
op|','
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_floating_ip
dedent|''
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a floating ip."""'
newline|'\n'
name|'fixed_address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_disassociate'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unbind_floating_ip'
op|'('
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'remove_floating_forward'
op|'('
name|'floating_address'
op|','
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_floating_ip
dedent|''
name|'def'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an floating ip to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_deallocate'
op|'('
name|'context'
op|','
name|'floating_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lease_fixed_ip
dedent|''
name|'def'
name|'lease_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'mac'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is leased."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Leasing IP %s"'
op|')'
op|','
name|'address'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"IP %s leased that isn\'t associated"'
op|')'
op|'%'
nl|'\n'
name|'address'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_ref'
op|'['
string|"'mac_address'"
op|']'
op|'!='
name|'mac'
op|':'
newline|'\n'
indent|'            '
name|'inst_addr'
op|'='
name|'instance_ref'
op|'['
string|"'mac_address'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"IP %(address)s leased to bad"'
nl|'\n'
string|'" mac %(inst_addr)s vs %(mac)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'leased'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'now'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip_ref'
op|'['
string|"'allocated'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"IP %s leased that was already deallocated"'
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_fixed_ip
dedent|''
dedent|''
name|'def'
name|'release_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'mac'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is released."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Releasing IP %s"'
op|')'
op|','
name|'address'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"IP %s released that isn\'t associated"'
op|')'
op|'%'
nl|'\n'
name|'address'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_ref'
op|'['
string|"'mac_address'"
op|']'
op|'!='
name|'mac'
op|':'
newline|'\n'
indent|'            '
name|'inst_addr'
op|'='
name|'instance_ref'
op|'['
string|"'mac_address'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"IP %(address)s released from"'
nl|'\n'
string|'" bad mac %(inst_addr)s vs %(mac)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'fixed_ip_ref'
op|'['
string|"'leased'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"IP %s released that was not leased"'
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'leased'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip_ref'
op|'['
string|"'allocated'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
comment|"# NOTE(vish): dhcp server isn't updated until next setup, this"
nl|'\n'
comment|'#             means there will stale entries in the conf file'
nl|'\n'
comment|'#             the code below will update the file if necessary'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'update_dhcp_on_disassociate'
op|':'
newline|'\n'
indent|'                '
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_network_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_network_host'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the network host for the current context."""'
newline|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_by_bridge'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'flat_network_bridge'
op|')'
newline|'\n'
comment|'# NOTE(vish): If the network has no host, use the network_host flag.'
nl|'\n'
comment|'#             This could eventually be a a db lookup of some sort, but'
nl|'\n'
comment|'#             a flag is easy to handle for now.'
nl|'\n'
name|'host'
op|'='
name|'network_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'network_topic'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'network_host'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_call'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'set_network_host'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"set_network_host"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"network_id"'
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'cidr'
op|','
name|'num_networks'
op|','
name|'network_size'
op|','
nl|'\n'
name|'cidr_v6'
op|','
name|'label'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
name|'fixed_net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'fixed_net_v6'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr_v6'
op|')'
newline|'\n'
name|'significant_bits_v6'
op|'='
number|'64'
newline|'\n'
name|'count'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_networks'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'index'
op|'*'
name|'network_size'
newline|'\n'
name|'significant_bits'
op|'='
number|'32'
op|'-'
name|'int'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'network_size'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'cidr'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'fixed_net'
op|'['
name|'start'
op|']'
op|','
name|'significant_bits'
op|')'
newline|'\n'
name|'project_net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_bridge'
newline|'\n'
name|'net'
op|'['
string|"'dns'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_dns'
newline|'\n'
name|'net'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'cidr'
newline|'\n'
name|'net'
op|'['
string|"'netmask'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'.'
name|'netmask'
op|'('
op|')'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'gateway'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'broadcast'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'.'
name|'broadcast'
op|'('
op|')'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'if'
name|'num_networks'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'label'"
op|']'
op|'='
string|'"%s_%d"'
op|'%'
op|'('
name|'label'
op|','
name|'count'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'label'"
op|']'
op|'='
name|'label'
newline|'\n'
dedent|''
name|'count'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cidr_v6'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'fixed_net_v6'
op|'['
number|'0'
op|']'
op|','
name|'significant_bits_v6'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'cidr_v6'"
op|']'
op|'='
name|'cidr_v6'
newline|'\n'
nl|'\n'
dedent|''
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'context'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'network_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_fixed_ips'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable-msg=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
number|'2'
comment|'# network, gateway'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable-msg=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'return'
number|'1'
comment|'# broadcast'
newline|'\n'
nl|'\n'
DECL|member|_create_fixed_ips
dedent|''
name|'def'
name|'_create_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create all fixed ips for network."""'
newline|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
comment|'# NOTE(vish): Should these be properties of the network as opposed'
nl|'\n'
comment|'#             to properties of the manager class?'
nl|'\n'
name|'bottom_reserved'
op|'='
name|'self'
op|'.'
name|'_bottom_reserved_ips'
newline|'\n'
name|'top_reserved'
op|'='
name|'self'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'project_net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'network_ref'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'num_ips'
op|'='
name|'len'
op|'('
name|'project_net'
op|')'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_ips'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
name|'index'
op|']'
op|')'
newline|'\n'
name|'if'
name|'index'
op|'<'
name|'bottom_reserved'
name|'or'
name|'num_ips'
op|'-'
name|'index'
op|'<'
name|'top_reserved'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'context'
op|','
op|'{'
string|"'network_id'"
op|':'
name|'network_id'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'reserved'"
op|':'
name|'reserved'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatManager
dedent|''
dedent|''
dedent|''
name|'class'
name|'FlatManager'
op|'('
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic network where no vlans are used.\n\n    FlatManager does not do any bridge or vlan creation.  The user is\n    responsible for setting up whatever bridge is specified in\n    flat_network_bridge (br100 by default).  This bridge needs to be created\n    on all compute hosts.\n\n    The idea is to create a single network for the host with a command like:\n    nova-manage network create 192.168.0.0/24 1 256. Creating multiple\n    networks for for one manager is currently not supported, but could be\n    added by modifying allocate_fixed_ip and get_network to get the a network\n    with new logic instead of network_get_by_bridge. Arbitrary lists of\n    addresses in a single network can be accomplished with manual db editing.\n\n    If flat_injected is True, the compute host will attempt to inject network\n    config into the guest.  It attempts to modify /etc/network/interfaces and\n    currently only works on debian based systems. To support a wider range of\n    OSes, some other method may need to be devised to let the guest know which\n    ip it should be using so that it can configure itself. Perhaps an attached\n    disk or serial device with configuration info.\n\n    Metadata forwarding must be handled by the gateway, and since nova does\n    not do any setup in this mode, it must be done manually.  Requests to\n    169.254.169.254 port 80 will need to be forwarded to the api server.\n    """'
newline|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
comment|'#Fix for bug 723298 - do not call init_host on superclass'
nl|'\n'
comment|'#Following code has been copied for NetworkManager.init_host'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'host_get_networks'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_on_set_network_host'
op|'('
name|'ctxt'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_compute_network
dedent|''
dedent|''
name|'def'
name|'setup_compute_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Network is created manually."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a network."""'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'injected'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_injected'
newline|'\n'
name|'net'
op|'['
string|"'dns'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_dns'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_floating_ip
dedent|''
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
comment|'#Fix for bug 723298'
nl|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_floating_ip
dedent|''
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
comment|'#Fix for bug 723298'
nl|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_floating_ip
dedent|''
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|')'
op|':'
newline|'\n'
comment|'#Fix for bug 723298'
nl|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_floating_ip
dedent|''
name|'def'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|')'
op|':'
newline|'\n'
comment|'#Fix for bug 723298'
nl|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatDHCPManager
dedent|''
dedent|''
name|'class'
name|'FlatDHCPManager'
op|'('
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Flat networking with dhcp.\n\n    FlatDHCPManager will start up one dhcp server to give out addresses.\n    It never injects network settings into the guest. Otherwise it behaves\n    like FlatDHCPManager.\n    """'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'metadata_forward'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_compute_network
dedent|''
name|'def'
name|'setup_compute_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up matching network for compute hosts."""'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_bridge'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'flat_interface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setup dhcp for this network."""'
newline|'\n'
name|'address'
op|'='
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a project."""'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'flat_network_dhcp_start'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'net'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_bridge'
op|'('
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'flat_interface'
op|','
nl|'\n'
name|'network_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VlanManager
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'VlanManager'
op|'('
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Vlan network with dhcp.\n\n    VlanManager is the most complicated.  It will create a host-managed\n    vlan for each project.  Each project gets its own subnet.  The networks\n    and associated subnets are created with nova-manage using a command like:\n    nova-manage network create 10.0.0.0/8 3 16.  This will create 3 networks\n    of 16 addresses from the beginning of the 10.0.0.0 range.\n\n    A dhcp server is run for each subnet, so each project will have its own.\n    For this mode to be useful, each project will need a vpn to access the\n    instances in its subnet.\n    """'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'metadata_forward'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
comment|'# TODO(vish): This should probably be getting project_id from'
nl|'\n'
comment|'#             the instance, but it is another trip to the db.'
nl|'\n'
comment|'#             Perhaps this method should take an instance_ref.'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network_ref'
op|'['
string|"'vpn_private_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_compute_network
dedent|''
name|'def'
name|'setup_compute_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up matching network for compute hosts."""'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
name|'network_ref'
op|'['
string|"'vlan'"
op|']'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'cidr'
op|','
name|'num_networks'
op|','
name|'network_size'
op|','
nl|'\n'
name|'cidr_v6'
op|','
name|'vlan_start'
op|','
name|'vpn_start'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
comment|'# Check that num_networks + vlan_start is not > 4094, fixes lp708025'
nl|'\n'
name|'if'
name|'num_networks'
op|'+'
name|'vlan_start'
op|'>'
number|'4094'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The sum between the number of networks and'"
nl|'\n'
string|"' the vlan start cannot be greater'"
nl|'\n'
string|"' than 4094'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'if'
name|'fixed_net'
op|'.'
name|'len'
op|'('
op|')'
op|'<'
name|'num_networks'
op|'*'
name|'network_size'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The network range is not big enough to fit '"
nl|'\n'
string|"'%(num_networks)s. Network size is %(network_size)s'"
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_net_v6'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr_v6'
op|')'
newline|'\n'
name|'network_size_v6'
op|'='
number|'1'
op|'<<'
number|'64'
newline|'\n'
name|'significant_bits_v6'
op|'='
number|'64'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_networks'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vlan'
op|'='
name|'vlan_start'
op|'+'
name|'index'
newline|'\n'
name|'start'
op|'='
name|'index'
op|'*'
name|'network_size'
newline|'\n'
name|'start_v6'
op|'='
name|'index'
op|'*'
name|'network_size_v6'
newline|'\n'
name|'significant_bits'
op|'='
number|'32'
op|'-'
name|'int'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'network_size'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'cidr'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'fixed_net'
op|'['
name|'start'
op|']'
op|','
name|'significant_bits'
op|')'
newline|'\n'
name|'project_net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'cidr'
newline|'\n'
name|'net'
op|'['
string|"'netmask'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'.'
name|'netmask'
op|'('
op|')'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'gateway'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'broadcast'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'.'
name|'broadcast'
op|'('
op|')'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'vpn_private_address'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'str'
op|'('
name|'project_net'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'vlan'"
op|']'
op|'='
name|'vlan'
newline|'\n'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|'='
string|"'br%s'"
op|'%'
name|'vlan'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cidr_v6'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'fixed_net_v6'
op|'['
name|'start_v6'
op|']'
op|','
nl|'\n'
name|'significant_bits_v6'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'cidr_v6'"
op|']'
op|'='
name|'cidr_v6'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): This makes ports unique accross the cloud, a more'
nl|'\n'
comment|'#             robust solution would be to make them unique per ip'
nl|'\n'
dedent|''
name|'net'
op|'['
string|"'vpn_public_port'"
op|']'
op|'='
name|'vpn_start'
op|'+'
name|'index'
newline|'\n'
name|'network_ref'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get_by_cidr'
op|'('
name|'context'
op|','
name|'cidr'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'network_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Network with cidr %s already exists'"
op|'%'
nl|'\n'
name|'cidr'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'context'
op|','
name|'net'
op|')'
newline|'\n'
name|'if'
name|'network_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_fixed_ips'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_network_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_network_host'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the network for the current context."""'
newline|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
comment|'# NOTE(vish): If the network has no host, do a call to get an'
nl|'\n'
comment|'#             available host.  This should be changed to go through'
nl|'\n'
comment|'#             the scheduler at some point.'
nl|'\n'
name|'host'
op|'='
name|'network_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'fake_call'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'set_network_host'
op|'('
name|'context'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"set_network_host"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"network_id"'
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|_on_set_network_host
dedent|''
name|'def'
name|'_on_set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when this host becomes the host for a network."""'
newline|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'network_ref'
op|'['
string|"'vpn_public_address'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'address'
op|'='
name|'FLAGS'
op|'.'
name|'vpn_ip'
newline|'\n'
name|'net'
op|'['
string|"'vpn_public_address'"
op|']'
op|'='
name|'address'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'net'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network_ref'
op|'['
string|"'vpn_public_address'"
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
name|'network_ref'
op|'['
string|"'vlan'"
op|']'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'network_ref'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(vish): only ensure this forward if the address hasn't been set"
nl|'\n'
comment|'#             manually.'
nl|'\n'
name|'if'
name|'address'
op|'=='
name|'FLAGS'
op|'.'
name|'vpn_ip'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_vlan_forward'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_ip'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'vpn_public_port'"
op|']'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'vpn_private_address'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_bottom_reserved_ips'
op|'+'
number|'1'
comment|'# vpn server'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'parent_reserved'
op|'='
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'return'
name|'parent_reserved'
op|'+'
name|'FLAGS'
op|'.'
name|'cnt_vpn_clients'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

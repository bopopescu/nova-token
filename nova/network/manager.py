begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Network Hosts are responsible for allocating ips and setting up network.\n\nThere are multiple backend drivers that handle specific types of networking\ntopologies.  All of the network commands are issued to a subclass of\n:class:`NetworkManager`.\n\n**Related Flags**\n\n:network_driver:  Driver to use for network creation\n:flat_network_bridge:  Bridge device for simple network instances\n:flat_interface:  FlatDhcp will bridge into this interface if set\n:flat_network_dns:  Dns for simple network\n:vlan_start:  First VLAN for private networks\n:vpn_ip:  Public IP for the cloudpipe VPN servers\n:vpn_start:  First Vpn port for private networks\n:cnt_vpn_clients:  Number of addresses reserved for vpn clients\n:network_size:  Number of addresses in each private subnet\n:fixed_range:  Fixed IP address block\n:fixed_ip_disassociate_timeout:  Seconds after which a deallocated ip\n                                 is disassociated\n:create_unique_mac_address_attempts:  Number of times to attempt creating\n                                      a unique mac address\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenpool'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'ipv6'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
name|'as'
name|'network_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'floating_ips'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'rpcapi'
name|'as'
name|'network_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'security_group'
name|'import'
name|'openstack_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'servicegroup'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|network_opts
name|'network_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flat_network_bridge'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Bridge for simple network instances'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flat_network_dns'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'8.8.4.4'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Dns for simple network'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'flat_injected'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to attempt to inject network setup into guest'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flat_interface'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'FlatDhcp will bridge into this interface if set'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vlan_start'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'100'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'First VLAN for private networks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vlan_interface'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'vlans will bridge into this interface if set'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_networks'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of networks to support'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vpn_ip'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$my_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Public IP for the cloudpipe VPN servers'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vpn_start'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1000'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'First Vpn port for private networks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'network_size'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'256'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of addresses in each private subnet'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'fixed_range'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'10.0.0.0/8'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Fixed IP address block'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'fixed_range_v6'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'fd00::/48'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Fixed IPv6 address block'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'gateway'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default IPv4 gateway'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'gateway_v6'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default IPv6 gateway'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'cnt_vpn_clients'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of addresses reserved for vpn clients'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'fixed_ip_disassociate_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Seconds after which a deallocated ip is disassociated'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'create_unique_mac_address_attempts'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of attempts to create unique mac address'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'fake_network'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If passed, use fake network devices and addresses'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'fake_call'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, skip using the queue and make local calls'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'teardown_unused_network_gateway'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, unused gateway devices (VLAN and bridge) are '"
nl|'\n'
string|"'deleted in VLAN network mode with multi hosted '"
nl|'\n'
string|"'networks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'force_dhcp_release'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, send a dhcp release on instance termination'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'share_dhcp_address'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True in multi_host mode, all compute hosts share '"
nl|'\n'
string|"'the same dhcp address.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'update_dns_entries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If True, when a DNS entry must be updated, it sends a '"
nl|'\n'
string|"'fanout cast to all network hosts to update their DNS '"
nl|'\n'
string|"'entries in multi host mode'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"dns_update_periodic_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds to wait between runs of updates to DNS '"
nl|'\n'
string|"'entries.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'dhcp_domain'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'novalocal'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'domain to use for building the hostnames'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'l3_lib'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.network.l3.LinuxNetL3'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Indicates underlying L3 management library"'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'network_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'use_ipv6'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_topic'"
op|','
string|"'nova.network.rpcapi'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCAllocateFixedIP
name|'class'
name|'RPCAllocateFixedIP'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class originally for FlatDCHP and VLAN network managers.\n\n    used since they share code to RPC.call allocate_fixed_ip on the\n    correct network host to configure dnsmasq\n    """'
newline|'\n'
nl|'\n'
DECL|variable|servicegroup_api
name|'servicegroup_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'networks'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'green_pool'
op|'='
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'vpn'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|')'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'address'
name|'in'
op|'('
name|'fixed_ip'
name|'for'
op|'('
name|'uuid'
op|','
name|'fixed_ip'
op|')'
name|'in'
nl|'\n'
name|'requested_networks'
name|'if'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|'=='
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): if we are not multi_host pass to the network host'
nl|'\n'
comment|"# NOTE(tr3buchet): but if we are, host came from instance['host']"
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'network'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'host'
op|'='
name|'network'
op|'['
string|"'host'"
op|']'
newline|'\n'
comment|'# NOTE(vish): if there is no network host, set one'
nl|'\n'
dedent|''
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'host'
op|'='
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'set_network_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'host'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# need to call allocate_fixed_ip to correct network host'
nl|'\n'
indent|'                '
name|'green_pool'
op|'.'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'_rpc_allocate_fixed_ip'
op|','
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'address'
op|','
name|'vpn'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# i am the correct host, run here'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'vpn'
op|','
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for all of the allocates (if any) to finish'
nl|'\n'
dedent|''
dedent|''
name|'green_pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rpc_allocate_fixed_ip
dedent|''
name|'def'
name|'_rpc_allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network_id'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sits in between _allocate_fixed_ips and allocate_fixed_ip to\n        perform network lookup on the far side of rpc.\n        """'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the superclass deallocate_fixed_ip if i\'m the correct host\n        otherwise call to the correct host"""'
newline|'\n'
name|'fixed_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'fixed_ip'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): if we are not multi_host pass to the network host'
nl|'\n'
comment|"# NOTE(tr3buchet): but if we are, host came from instance['host']"
nl|'\n'
name|'if'
name|'not'
name|'network'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'network'
op|'['
string|"'host'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# NOTE(vish): deallocate the fixed ip locally'
nl|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'network'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_host_and_topic'
op|'('
name|'context'
op|','
nl|'\n'
name|'host'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'network_topic'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'service'
name|'or'
name|'not'
name|'self'
op|'.'
name|'servicegroup_api'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): deallocate the fixed ip locally but don't"
nl|'\n'
comment|'#             teardown network devices'
nl|'\n'
indent|'                '
name|'return'
name|'super'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
nl|'\n'
name|'context'
op|','
name|'address'
op|','
name|'teardown'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkManager
dedent|''
dedent|''
name|'class'
name|'NetworkManager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements common network manager functionality.\n\n    This class must be subclassed to support specific topologies.\n\n    host management:\n        hosts configure themselves for networks they are assigned to in the\n        table upon startup. If there are networks in the table which do not\n        have hosts, those will be filled in and have hosts configured\n        as the hosts pick them up one at time during their periodic task.\n        The one at a time part is to flatten the layout to help scale\n    """'
newline|'\n'
nl|'\n'
DECL|variable|RPC_API_VERSION
name|'RPC_API_VERSION'
op|'='
string|"'1.9'"
newline|'\n'
nl|'\n'
comment|'# If True, this manager requires VIF to create a bridge.'
nl|'\n'
DECL|variable|SHOULD_CREATE_BRIDGE
name|'SHOULD_CREATE_BRIDGE'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# If True, this manager requires VIF to create VLAN tag.'
nl|'\n'
DECL|variable|SHOULD_CREATE_VLAN
name|'SHOULD_CREATE_VLAN'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# if True, this manager leverages DHCP'
nl|'\n'
DECL|variable|DHCP
name|'DHCP'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
op|'.'
name|'load_network_driver'
op|'('
name|'network_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'instance_dns_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|'='
name|'CONF'
op|'.'
name|'instance_dns_domain'
newline|'\n'
name|'self'
op|'.'
name|'floating_dns_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'floating_ip_dns_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network_api'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'='
name|'network_rpcapi'
op|'.'
name|'NetworkAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'='
op|'('
nl|'\n'
name|'openstack_driver'
op|'.'
name|'get_openstack_security_group_driver'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'servicegroup_api'
op|'='
name|'servicegroup'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet: unless manager subclassing NetworkManager has'
nl|'\n'
comment|'#                 already imported ipam, import nova ipam here'
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'ipam'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_import_ipam_lib'
op|'('
string|"'nova.network.nova_ipam_lib'"
op|')'
newline|'\n'
dedent|''
name|'l3_lib'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"l3_lib"'
op|','
name|'CONF'
op|'.'
name|'l3_lib'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'l3_lib'
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'NetworkManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_import_ipam_lib
dedent|''
name|'def'
name|'_import_ipam_lib'
op|'('
name|'self'
op|','
name|'ipam_lib'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ipam'
op|'='
name|'importutils'
op|'.'
name|'import_module'
op|'('
name|'ipam_lib'
op|')'
op|'.'
name|'get_ipam_lib'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'get_dhcp'"
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|member|_get_dhcp_ip
name|'def'
name|'_get_dhcp_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ref'
op|','
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the proper dhcp address to listen on."""'
newline|'\n'
comment|'# NOTE(vish): this is for compatibility'
nl|'\n'
name|'if'
name|'not'
name|'network_ref'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
name|'or'
name|'CONF'
op|'.'
name|'share_dhcp_address'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'network_ref'
op|'['
string|"'gateway'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'network_id'
op|'='
name|'network_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_network_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'fip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForNetworkHost'
op|':'
newline|'\n'
indent|'            '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_dhcp_leases
dedent|''
dedent|''
name|'def'
name|'get_dhcp_leases'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Broker the request to the driver to fetch the dhcp leases."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dhcp_leases'
op|'('
name|'ctxt'
op|','
name|'network_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
comment|'# NOTE(vish): Set up networks for which this host already has'
nl|'\n'
comment|'#             an ip address.'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all_by_host'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'ctxt'
op|','
name|'network'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'update_dns_entries'
op|':'
newline|'\n'
indent|'                '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dns'
op|'('
name|'ctxt'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_disassociate_stale_fixed_ips
name|'def'
name|'_disassociate_stale_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'timeout_fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'fixed_ip_disassociate_timeout'
newline|'\n'
name|'time'
op|'='
name|'now'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
name|'timeout'
op|')'
newline|'\n'
name|'num'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate_all_by_timeout'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'time'
op|')'
newline|'\n'
name|'if'
name|'num'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Disassociated %s stale fixed ip(s)'"
op|')'
op|','
name|'num'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_network_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_network_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Safely sets the host of the network."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'setting network host'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_set_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|_do_trigger_security_group_members_refresh_for_instance
dedent|''
name|'def'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
name|'self'
op|','
nl|'\n'
name|'instance_id'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(francois.charlier): the instance may have been deleted already'
nl|'\n'
comment|'# thus enabling `read_deleted`'
nl|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
newline|'\n'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'admin_context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'groups'
op|'='
name|'instance_ref'
op|'['
string|"'security_groups'"
op|']'
newline|'\n'
name|'group_ids'
op|'='
op|'['
name|'group'
op|'['
string|"'id'"
op|']'
name|'for'
name|'group'
name|'in'
name|'groups'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_members_refresh'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'group_ids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_handler'
op|'('
string|"'security_group_members'"
op|','
nl|'\n'
name|'admin_context'
op|','
name|'group_ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_trigger_security_group_handler
dedent|''
name|'def'
name|'_do_trigger_security_group_handler'
op|'('
name|'self'
op|','
name|'handler'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
newline|'\n'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'group_name'
name|'in'
op|'['
name|'group'
op|'['
string|"'name'"
op|']'
name|'for'
name|'group'
nl|'\n'
name|'in'
name|'instance_ref'
op|'['
string|"'security_groups'"
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_handler'
op|'('
name|'handler'
op|','
name|'admin_context'
op|','
nl|'\n'
name|'instance_ref'
op|','
name|'group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_fixed_address
dedent|''
dedent|''
name|'def'
name|'get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(jkoelker) This is just a stub function. Managers supporting'
nl|'\n'
comment|'#                floating ips MUST override this or use the Mixin'
nl|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_instance_uuids_by_ip_filter
dedent|''
name|'def'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixed_ip_filter'
op|'='
name|'filters'
op|'.'
name|'get'
op|'('
string|"'fixed_ip'"
op|')'
newline|'\n'
name|'ip_filter'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'str'
op|'('
name|'filters'
op|'.'
name|'get'
op|'('
string|"'ip'"
op|')'
op|')'
op|')'
newline|'\n'
name|'ipv6_filter'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'str'
op|'('
name|'filters'
op|'.'
name|'get'
op|'('
string|"'ip6'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jkoelker) Should probably figure out a better way to do'
nl|'\n'
comment|'#                this. But for now it "works", this could suck on'
nl|'\n'
comment|'#                large installs.'
nl|'\n'
nl|'\n'
name|'vifs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'['
string|"'instance_uuid'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'fixed_ipv6'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'fixed_ipv6'
op|'='
name|'ipv6'
op|'.'
name|'to_global'
op|'('
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'fixed_ipv6'
name|'and'
name|'ipv6_filter'
op|'.'
name|'match'
op|'('
name|'fixed_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'['
string|"'instance_uuid'"
op|']'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'fixed_ipv6'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vif_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ips_by_virtual_interface'
op|'('
name|'context'
op|','
nl|'\n'
name|'vif_id'
op|')'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'fixed_ip'
name|'or'
name|'not'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|'=='
name|'fixed_ip_filter'
op|':'
newline|'\n'
indent|'                    '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'['
string|"'instance_uuid'"
op|']'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'ip_filter'
op|'.'
name|'match'
op|'('
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'['
string|"'instance_uuid'"
op|']'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'floating_ip'
name|'in'
name|'fixed_ip'
op|'.'
name|'get'
op|'('
string|"'floating_ips'"
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'floating_ip'
name|'or'
name|'not'
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'ip_filter'
op|'.'
name|'match'
op|'('
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'results'
op|'.'
name|'append'
op|'('
op|'{'
string|"'instance_uuid'"
op|':'
name|'vif'
op|'['
string|"'instance_uuid'"
op|']'
op|','
nl|'\n'
string|"'ip'"
op|':'
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_for_instance
dedent|''
name|'def'
name|'_get_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine & return which networks an instance should connect to."""'
newline|'\n'
comment|'# TODO(tr3buchet) maybe this needs to be updated in the future if'
nl|'\n'
comment|'#                 there is a better way to determine which networks'
nl|'\n'
comment|'#                 a non-vlan instance should connect to'
nl|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
name|'and'
name|'len'
op|'('
name|'requested_networks'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'network_uuids'
op|'='
op|'['
name|'uuid'
name|'for'
op|'('
name|'uuid'
op|','
name|'fixed_ip'
op|')'
name|'in'
name|'requested_networks'
op|']'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
op|']'
newline|'\n'
comment|'# return only networks which are not vlan networks'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'['
name|'network'
name|'for'
name|'network'
name|'in'
name|'networks'
name|'if'
nl|'\n'
name|'not'
name|'network'
op|'['
string|"'vlan'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|allocate_for_instance
dedent|''
name|'def'
name|'allocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles allocating the various network resources for an instance.\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'kwargs'
op|'['
string|"'instance_id'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_uuid'"
op|')'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'kwargs'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'project_id'
op|'='
name|'kwargs'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'rxtx_factor'
op|'='
name|'kwargs'
op|'['
string|"'rxtx_factor'"
op|']'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
name|'vpn'
op|'='
name|'kwargs'
op|'['
string|"'vpn'"
op|']'
newline|'\n'
name|'macs'
op|'='
name|'kwargs'
op|'['
string|"'macs'"
op|']'
newline|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"network allocations"'
op|')'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_for_instance'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'networks_list'
op|'='
op|'['
name|'self'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
nl|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'networks retrieved for instance: |%(networks_list)s|'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_allocate_mac_addresses'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'networks'
op|','
nl|'\n'
name|'macs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# If we fail to allocate any one mac address, clean up all'
nl|'\n'
comment|'# allocated VIFs'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_delete_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_allocate_fixed_ips'
op|'('
name|'admin_context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'host'
op|','
name|'networks'
op|','
name|'vpn'
op|'='
name|'vpn'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'update_dns_entries'
op|':'
newline|'\n'
indent|'            '
name|'network_ids'
op|'='
op|'['
name|'network'
op|'['
string|"'id'"
op|']'
name|'for'
name|'network'
name|'in'
name|'networks'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'network_ids'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'rxtx_factor'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_for_instance
dedent|''
name|'def'
name|'deallocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles deallocating various network resources for an instance.\n\n        rpc.called by network_api\n        kwargs can contain fixed_ips to circumvent another db lookup\n        """'
newline|'\n'
comment|'# NOTE(francois.charlier): in some cases the instance might be'
nl|'\n'
comment|'# deleted before the IPs are released, so we need to get deleted'
nl|'\n'
comment|'# instances too'
nl|'\n'
name|'read_deleted_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'kwargs'
op|'['
string|"'instance_id'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'read_deleted_context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'host'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'fixed_ips'"
op|')'
name|'or'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'read_deleted_context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"network deallocation for instance"'
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# deallocate fixed ips'
nl|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|','
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'update_dns_entries'
op|':'
newline|'\n'
indent|'            '
name|'network_ids'
op|'='
op|'['
name|'fixed_ip'
op|'['
string|"'network_id'"
op|']'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'network_ids'
op|')'
newline|'\n'
nl|'\n'
comment|'# deallocate vifs (mac addresses)'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_delete_by_instance'
op|'('
name|'read_deleted_context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_nw_info
dedent|''
name|'def'
name|'get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'rxtx_factor'
op|','
nl|'\n'
name|'host'
op|','
name|'instance_uuid'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates network info list for instance.\n\n        called by allocate_for_instance and network_api\n        context needs to be elevated\n        :returns: network info list [(network,info),(network,info)...]\n        where network = dict containing pertinent data from a network db object\n        and info = dict containing pertinent networking data\n        """'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_id'
op|'='
name|'instance_uuid'
newline|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance_id'
newline|'\n'
nl|'\n'
name|'host'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
newline|'\n'
name|'vifs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'networks'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'.'
name|'get'
op|'('
string|"'network_id'"
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'networks'
op|'['
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|']'
op|'='
name|'network'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'build_network_info_model'
op|'('
name|'context'
op|','
name|'vifs'
op|','
name|'networks'
op|','
nl|'\n'
name|'rxtx_factor'
op|','
name|'host'
op|')'
newline|'\n'
name|'return'
name|'nw_info'
newline|'\n'
nl|'\n'
DECL|member|build_network_info_model
dedent|''
name|'def'
name|'build_network_info_model'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vifs'
op|','
name|'networks'
op|','
nl|'\n'
name|'rxtx_factor'
op|','
name|'instance_host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Builds a NetworkInfo object containing all network information\n        for an instance"""'
newline|'\n'
name|'nw_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'vif_dict'
op|'='
op|'{'
string|"'id'"
op|':'
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'network_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'vif'
op|'['
string|"'address'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
comment|"# handle case where vif doesn't have a network"
nl|'\n'
name|'if'
name|'not'
name|'networks'
op|'.'
name|'get'
op|'('
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vif'
op|'='
name|'network_model'
op|'.'
name|'VIF'
op|'('
op|'**'
name|'vif_dict'
op|')'
newline|'\n'
name|'nw_info'
op|'.'
name|'append'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# get network dict for vif from args and build the subnets'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'networks'
op|'['
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|']'
newline|'\n'
name|'subnets'
op|'='
name|'self'
op|'.'
name|'_get_subnets_from_network'
op|'('
name|'context'
op|','
name|'network'
op|','
name|'vif'
op|','
nl|'\n'
name|'instance_host'
op|')'
newline|'\n'
nl|'\n'
comment|'# if rxtx_cap data are not set everywhere, set to none'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'rxtx_cap'
op|'='
name|'network'
op|'['
string|"'rxtx_base'"
op|']'
op|'*'
name|'rxtx_factor'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'KeyError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rxtx_cap'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# get fixed_ips'
nl|'\n'
dedent|''
name|'v4_IPs'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_v4_ips_by_interface'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'v6_IPs'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_v6_ips_by_interface'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# create model FixedIPs from these fixed_ips'
nl|'\n'
name|'network_IPs'
op|'='
op|'['
name|'network_model'
op|'.'
name|'FixedIP'
op|'('
name|'address'
op|'='
name|'ip_address'
op|')'
nl|'\n'
name|'for'
name|'ip_address'
name|'in'
name|'v4_IPs'
op|'+'
name|'v6_IPs'
op|']'
newline|'\n'
nl|'\n'
comment|'# get floating_ips for each fixed_ip'
nl|'\n'
comment|'# add them to the fixed ip'
nl|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'network_IPs'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'fixed_ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'gfipbfa'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_floating_ips_by_fixed_address'
newline|'\n'
name|'floating_ips'
op|'='
name|'gfipbfa'
op|'('
name|'context'
op|','
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'floating_ips'
op|'='
op|'['
name|'network_model'
op|'.'
name|'IP'
op|'('
name|'address'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'type'
op|'='
string|"'floating'"
op|')'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'floating_ips'
op|']'
newline|'\n'
name|'for'
name|'ip'
name|'in'
name|'floating_ips'
op|':'
newline|'\n'
indent|'                    '
name|'fixed_ip'
op|'.'
name|'add_floating_ip'
op|'('
name|'ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# add ips to subnets they belong to'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'subnet'
name|'in'
name|'subnets'
op|':'
newline|'\n'
indent|'                '
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'='
op|'['
name|'fixed_ip'
name|'for'
name|'fixed_ip'
name|'in'
name|'network_IPs'
nl|'\n'
name|'if'
name|'fixed_ip'
op|'.'
name|'is_in_subnet'
op|'('
name|'subnet'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# convert network into a Network model object'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'network_model'
op|'.'
name|'Network'
op|'('
op|'**'
name|'self'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# since network currently has no subnets, easily add them all'
nl|'\n'
name|'network'
op|'['
string|"'subnets'"
op|']'
op|'='
name|'subnets'
newline|'\n'
nl|'\n'
comment|'# add network and rxtx cap to vif_dict'
nl|'\n'
name|'vif_dict'
op|'['
string|"'network'"
op|']'
op|'='
name|'network'
newline|'\n'
name|'if'
name|'rxtx_cap'
op|':'
newline|'\n'
indent|'                '
name|'vif_dict'
op|'['
string|"'rxtx_cap'"
op|']'
op|'='
name|'rxtx_cap'
newline|'\n'
nl|'\n'
comment|'# create the vif model and add to network_info'
nl|'\n'
dedent|''
name|'vif'
op|'='
name|'network_model'
op|'.'
name|'VIF'
op|'('
op|'**'
name|'vif_dict'
op|')'
newline|'\n'
name|'nw_info'
op|'.'
name|'append'
op|'('
name|'vif'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'nw_info'
newline|'\n'
nl|'\n'
DECL|member|_get_network_dict
dedent|''
name|'def'
name|'_get_network_dict'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the dict representing necessary and meta network fields."""'
newline|'\n'
comment|'# get generic network fields'
nl|'\n'
name|'network_dict'
op|'='
op|'{'
string|"'id'"
op|':'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
comment|'# get extra information'
nl|'\n'
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'injected'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'injected'"
op|']'
op|'='
name|'network'
op|'['
string|"'injected'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'network_dict'
newline|'\n'
nl|'\n'
DECL|member|_get_subnets_from_network
dedent|''
name|'def'
name|'_get_subnets_from_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|','
nl|'\n'
name|'vif'
op|','
name|'instance_host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the 1 or 2 possible subnets for a nova network."""'
newline|'\n'
comment|'# get subnets'
nl|'\n'
name|'ipam_subnets'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_subnets_by_net_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|','
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
name|'vif'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'subnets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'subnet'
name|'in'
name|'ipam_subnets'
op|':'
newline|'\n'
indent|'            '
name|'subnet_dict'
op|'='
op|'{'
string|"'cidr'"
op|':'
name|'subnet'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network_model'
op|'.'
name|'IP'
op|'('
nl|'\n'
name|'address'
op|'='
name|'subnet'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'type'
op|'='
string|"'gateway'"
op|')'
op|'}'
newline|'\n'
comment|'# deal with dhcp'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'DHCP'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|','
nl|'\n'
name|'instance_host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'subnet'
op|')'
newline|'\n'
dedent|''
name|'subnet_dict'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'dhcp_server'
newline|'\n'
nl|'\n'
dedent|''
name|'subnet_object'
op|'='
name|'network_model'
op|'.'
name|'Subnet'
op|'('
op|'**'
name|'subnet_dict'
op|')'
newline|'\n'
nl|'\n'
comment|'# add dns info'
nl|'\n'
name|'for'
name|'k'
name|'in'
op|'['
string|"'dns1'"
op|','
string|"'dns2'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'subnet'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'subnet_object'
op|'.'
name|'add_dns'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'IP'
op|'('
name|'address'
op|'='
name|'subnet'
op|'['
name|'k'
op|']'
op|','
name|'type'
op|'='
string|"'dns'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get the routes for this subnet'
nl|'\n'
comment|'# NOTE(tr3buchet): default route comes from subnet gateway'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'subnet'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'routes'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_routes_by_ip_block'
op|'('
name|'context'
op|','
nl|'\n'
name|'subnet'
op|'['
string|"'id'"
op|']'
op|','
name|'network'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'route'
name|'in'
name|'routes'
op|':'
newline|'\n'
indent|'                    '
name|'cidr'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
string|"'%s/%s'"
op|'%'
op|'('
name|'route'
op|'['
string|"'destination'"
op|']'
op|','
nl|'\n'
name|'route'
op|'['
string|"'netmask'"
op|']'
op|')'
op|')'
op|'.'
name|'cidr'
newline|'\n'
name|'subnet_object'
op|'.'
name|'add_route'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'Route'
op|'('
name|'cidr'
op|'='
name|'str'
op|'('
name|'cidr'
op|')'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'network_model'
op|'.'
name|'IP'
op|'('
nl|'\n'
name|'address'
op|'='
name|'route'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'type'
op|'='
string|"'gateway'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'subnets'
op|'.'
name|'append'
op|'('
name|'subnet_object'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'subnets'
newline|'\n'
nl|'\n'
DECL|member|_allocate_mac_addresses
dedent|''
name|'def'
name|'_allocate_mac_addresses'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'networks'
op|','
name|'macs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generates mac addresses and creates vif rows in db for them."""'
newline|'\n'
comment|'# make a copy we can mutate'
nl|'\n'
name|'if'
name|'macs'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'available_macs'
op|'='
name|'set'
op|'('
name|'macs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'macs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'mac'
op|'='
name|'available_macs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'mac'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_virtual_interface
dedent|''
dedent|''
dedent|''
name|'def'
name|'_add_virtual_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'network_id'
op|','
nl|'\n'
name|'mac'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif'
op|'='
op|'{'
string|"'address'"
op|':'
name|'mac'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_id'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'mac'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'vif'
op|'['
string|"'address'"
op|']'
op|'='
name|'utils'
op|'.'
name|'generate_mac_address'
op|'('
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'CONF'
op|'.'
name|'create_unique_mac_address_attempts'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'attempts'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'attempts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_create'
op|'('
name|'context'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|':'
newline|'\n'
indent|'                '
name|'vif'
op|'['
string|"'address'"
op|']'
op|'='
name|'utils'
op|'.'
name|'generate_mac_address'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfaceMacAddressException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_fixed_ip_to_instance
dedent|''
dedent|''
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'network_id'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a fixed ip to an instance from specified network."""'
newline|'\n'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_allocate_fixed_ips'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
op|'['
name|'network'
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'rxtx_factor'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_backdoor_port
dedent|''
name|'def'
name|'get_backdoor_port'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return backdoor port for eventlet_backdoor."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'backdoor_port'
newline|'\n'
nl|'\n'
DECL|member|remove_fixed_ip_from_instance
dedent|''
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
nl|'\n'
name|'address'
op|','
name|'rxtx_factor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a fixed ip from an instance from specified network."""'
newline|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|'=='
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'host'
op|')'
newline|'\n'
comment|"# NOTE(vish): this probably isn't a dhcp ip so just"
nl|'\n'
comment|'#             deallocate it now. In the extremely rare'
nl|'\n'
comment|'#             case that this is a race condition, we'
nl|'\n'
comment|'#             will just get a warn in lease or release.'
nl|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'.'
name|'get'
op|'('
string|"'leased'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'rxtx_factor'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForSpecificInstance'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_id'
op|','
name|'ip'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_instance_zone_for_dns_domain
dedent|''
name|'def'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|"# FIXME(vish): The zone isn't usually set in the instance so I"
nl|'\n'
comment|'#              believe this code needs to be changed.'
nl|'\n'
indent|'        '
name|'instance_zone'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'availability_zone'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'instance_dns_domain'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_domain'
op|'='
name|'self'
op|'.'
name|'instance_dns_domain'
newline|'\n'
name|'domainref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'dnsdomain_get'
op|'('
name|'context'
op|','
name|'instance_zone'
op|')'
newline|'\n'
name|'dns_zone'
op|'='
name|'domainref'
op|'.'
name|'availability_zone'
newline|'\n'
name|'if'
name|'dns_zone'
name|'and'
op|'('
name|'dns_zone'
op|'!='
name|'instance_zone'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'instance-dns-zone is |%(domain)s|, '"
nl|'\n'
string|"'which is in availability zone |%(zone)s|. '"
nl|'\n'
string|"'Instance is in zone |%(zone2)s|. '"
nl|'\n'
string|"'No DNS record will be created.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'domain'"
op|':'
name|'instance_domain'
op|','
nl|'\n'
string|"'zone'"
op|':'
name|'dns_zone'
op|','
nl|'\n'
string|"'zone2'"
op|':'
name|'instance_zone'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
comment|'# TODO(vish): when this is called by compute, we can associate compute'
nl|'\n'
comment|'#             with a network, or a cluster of computes with a network'
nl|'\n'
comment|'#             and use that network here with a method like'
nl|'\n'
comment|'#             network_get_by_compute_host'
nl|'\n'
name|'address'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'network'
op|'['
string|"'cidr'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'address'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_trigger_security_group_handler'
op|'('
nl|'\n'
string|"'instance_add_security_group'"
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'get_vif'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
newline|'\n'
name|'vif'
op|'='
name|'get_vif'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) This db query could be removed if we pass az and name'
nl|'\n'
comment|'#            (or the whole instance object).'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'name'
op|'='
name|'instance'
op|'['
string|"'display_name'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'name'
op|','
name|'address'
op|','
nl|'\n'
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'instance_id'
op|','
name|'address'
op|','
nl|'\n'
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'vif_id'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'virtual_interface_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_trigger_security_group_handler'
op|'('
nl|'\n'
string|"'instance_remove_security_group'"
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) This db query could be removed if we pass az and name'
nl|'\n'
comment|'#            (or the whole instance object).'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'get_entries_by_address'
op|'('
name|'address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'delete_entry'
op|'('
name|'n'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
op|'{'
string|"'allocated'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'teardown'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'force_dhcp_release'
op|':'
newline|'\n'
indent|'                '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(vish): The below errors should never happen, but there'
nl|'\n'
comment|'#             may be a race condition that is causing them per'
nl|'\n'
comment|'#             https://code.launchpad.net/bugs/968457, so we log'
nl|'\n'
comment|'#             an error to help track down the possible race.'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Unable to release %s because vif doesn\'t exist."'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vif_id'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'address'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'vif'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get'
op|'('
name|'context'
op|','
name|'vif_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'vif'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'address'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): This forces a packet so that the release_fixed_ip'
nl|'\n'
comment|'#             callback will get called by nova-dhcpbridge.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'release_dhcp'
op|'('
name|'dev'
op|','
name|'address'
op|','
name|'vif'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_teardown_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lease_fixed_ip
dedent|''
dedent|''
name|'def'
name|'lease_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is leased."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Leased IP |%(address)s|'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fixed_ip'
op|'['
string|"'instance_uuid'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'IP %s leased that is not associated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'leased'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'now'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'['
string|"'allocated'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'IP |%s| leased that isn\\'t allocated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_fixed_ip
dedent|''
dedent|''
name|'def'
name|'release_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by dhcp-bridge when ip is released."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Released IP |%(address)s|'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fixed_ip'
op|'['
string|"'instance_uuid'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'IP %s released that is not associated'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'fixed_ip'
op|'['
string|"'leased'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'IP %s released that was not leased'"
op|')'
op|','
name|'address'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'leased'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ip'
op|'['
string|"'allocated'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_convert_int_args
name|'def'
name|'_convert_int_args'
op|'('
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'int_args'
op|'='
op|'('
string|'"network_size"'
op|','
string|'"num_networks"'
op|','
nl|'\n'
string|'"vlan_start"'
op|','
string|'"vpn_start"'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'int_args'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'kwargs'
op|'['
name|'key'
op|']'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"%s must be an integer"'
op|')'
op|'%'
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'label'
op|','
name|'cidr'
op|'='
name|'None'
op|','
name|'multi_host'
op|'='
name|'None'
op|','
name|'num_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'network_size'
op|'='
name|'None'
op|','
name|'cidr_v6'
op|'='
name|'None'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'None'
op|','
name|'gateway_v6'
op|'='
name|'None'
op|','
name|'bridge'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
name|'dns1'
op|'='
name|'None'
op|','
name|'dns2'
op|'='
name|'None'
op|','
nl|'\n'
name|'fixed_cidr'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'arg_names'
op|'='
op|'('
string|'"label"'
op|','
string|'"cidr"'
op|','
string|'"multi_host"'
op|','
string|'"num_networks"'
op|','
nl|'\n'
string|'"network_size"'
op|','
string|'"cidr_v6"'
op|','
nl|'\n'
string|'"gateway"'
op|','
string|'"gateway_v6"'
op|','
string|'"bridge"'
op|','
nl|'\n'
string|'"bridge_interface"'
op|','
string|'"dns1"'
op|','
string|'"dns2"'
op|','
nl|'\n'
string|'"fixed_cidr"'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'arg_names'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
name|'name'
op|']'
op|'='
name|'locals'
op|'('
op|')'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_convert_int_args'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# check for certain required inputs'
nl|'\n'
name|'label'
op|'='
name|'kwargs'
op|'['
string|'"label"'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'label'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotCreated'
op|'('
name|'req'
op|'='
string|'"label"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Size of "label" column in nova.networks is 255, hence the restriction'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'label'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"Maximum allowed length for \'label\' is 255."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
name|'or'
name|'kwargs'
op|'['
string|'"cidr_v6"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotCreated'
op|'('
name|'req'
op|'='
string|'"cidr or cidr_v6"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kwargs'
op|'['
string|'"bridge"'
op|']'
op|'='
name|'kwargs'
op|'['
string|'"bridge"'
op|']'
name|'or'
name|'CONF'
op|'.'
name|'flat_network_bridge'
newline|'\n'
name|'kwargs'
op|'['
string|'"bridge_interface"'
op|']'
op|'='
op|'('
name|'kwargs'
op|'['
string|'"bridge_interface"'
op|']'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'flat_interface'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'fld'
name|'in'
name|'self'
op|'.'
name|'required_create_args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'kwargs'
op|'['
name|'fld'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotCreated'
op|'('
name|'req'
op|'='
name|'fld'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
op|'='
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
name|'or'
name|'CONF'
op|'.'
name|'num_networks'
newline|'\n'
name|'if'
name|'not'
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fixnet'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|'"cidr"'
op|']'
op|')'
newline|'\n'
name|'each_subnet_size'
op|'='
name|'fixnet'
op|'.'
name|'size'
op|'/'
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
newline|'\n'
name|'if'
name|'each_subnet_size'
op|'>'
name|'CONF'
op|'.'
name|'network_size'
op|':'
newline|'\n'
indent|'                    '
name|'subnet'
op|'='
number|'32'
op|'-'
name|'int'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'CONF'
op|'.'
name|'network_size'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
name|'oversize_msg'
op|'='
name|'_'
op|'('
nl|'\n'
string|"'Subnet(s) too large, defaulting to /%s.'"
nl|'\n'
string|"'  To override, specify network_size flag.'"
op|')'
op|'%'
name|'subnet'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'oversize_msg'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
name|'CONF'
op|'.'
name|'network_size'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
name|'fixnet'
op|'.'
name|'size'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
name|'CONF'
op|'.'
name|'network_size'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'kwargs'
op|'['
string|'"multi_host"'
op|']'
op|'='
op|'('
name|'CONF'
op|'.'
name|'multi_host'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|'"multi_host"'
op|']'
name|'is'
name|'None'
nl|'\n'
name|'else'
nl|'\n'
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
name|'kwargs'
op|'['
string|'"multi_host"'
op|']'
op|')'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|'"vlan_start"'
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vlan_start"'
op|')'
name|'or'
name|'CONF'
op|'.'
name|'vlan_start'
newline|'\n'
name|'kwargs'
op|'['
string|'"vpn_start"'
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vpn_start"'
op|')'
name|'or'
name|'CONF'
op|'.'
name|'vpn_start'
newline|'\n'
name|'kwargs'
op|'['
string|'"dns1"'
op|']'
op|'='
name|'kwargs'
op|'['
string|'"dns1"'
op|']'
name|'or'
name|'CONF'
op|'.'
name|'flat_network_dns'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|'"fixed_cidr"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_do_create_networks'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_create_networks
dedent|''
name|'def'
name|'_do_create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'label'
op|','
name|'cidr'
op|','
name|'multi_host'
op|','
name|'num_networks'
op|','
nl|'\n'
name|'network_size'
op|','
name|'cidr_v6'
op|','
name|'gateway'
op|','
name|'gateway_v6'
op|','
name|'bridge'
op|','
nl|'\n'
name|'bridge_interface'
op|','
name|'dns1'
op|'='
name|'None'
op|','
name|'dns2'
op|'='
name|'None'
op|','
nl|'\n'
name|'fixed_cidr'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
comment|'# NOTE(jkoelker): these are dummy values to make sure iter works'
nl|'\n'
comment|'# TODO(tr3buchet): disallow carving up networks'
nl|'\n'
name|'fixed_net_v4'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
string|"'0/32'"
op|')'
newline|'\n'
name|'fixed_net_v6'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
string|"'::0/128'"
op|')'
newline|'\n'
name|'subnets_v4'
op|'='
op|'['
op|']'
newline|'\n'
name|'subnets_v6'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ipam'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cidr_v6'
op|':'
newline|'\n'
indent|'                '
name|'subnets_v6'
op|'='
op|'['
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr_v6'
op|')'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'subnets_v4'
op|'='
op|'['
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'subnet_bits'
op|'='
name|'int'
op|'('
name|'math'
op|'.'
name|'ceil'
op|'('
name|'math'
op|'.'
name|'log'
op|'('
name|'network_size'
op|','
number|'2'
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'cidr_v6'
op|':'
newline|'\n'
indent|'                '
name|'fixed_net_v6'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr_v6'
op|')'
newline|'\n'
name|'prefixlen_v6'
op|'='
number|'128'
op|'-'
name|'subnet_bits'
newline|'\n'
comment|'# smallest subnet in IPv6 ethernet network is /64'
nl|'\n'
name|'if'
name|'prefixlen_v6'
op|'>'
number|'64'
op|':'
newline|'\n'
indent|'                    '
name|'prefixlen_v6'
op|'='
number|'64'
newline|'\n'
dedent|''
name|'subnets_v6'
op|'='
name|'fixed_net_v6'
op|'.'
name|'subnet'
op|'('
name|'prefixlen_v6'
op|','
nl|'\n'
name|'count'
op|'='
name|'num_networks'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'fixed_net_v4'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'prefixlen_v4'
op|'='
number|'32'
op|'-'
name|'subnet_bits'
newline|'\n'
name|'subnets_v4'
op|'='
name|'list'
op|'('
name|'fixed_net_v4'
op|'.'
name|'subnet'
op|'('
name|'prefixlen_v4'
op|','
nl|'\n'
name|'count'
op|'='
name|'num_networks'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'cidr'
op|':'
newline|'\n'
comment|'# NOTE(jkoelker): This replaces the _validate_cidrs call and'
nl|'\n'
comment|'#                 prevents looping multiple times'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'nets'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'                '
name|'nets'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'used_subnets'
op|'='
op|'['
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
nl|'\n'
DECL|function|find_next
name|'def'
name|'find_next'
op|'('
name|'subnet'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'next_subnet'
op|'='
name|'subnet'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'while'
name|'next_subnet'
name|'in'
name|'subnets_v4'
op|':'
newline|'\n'
indent|'                    '
name|'next_subnet'
op|'='
name|'next_subnet'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'next_subnet'
name|'in'
name|'fixed_net_v4'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'next_subnet'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'subnet'
name|'in'
name|'list'
op|'('
name|'subnets_v4'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'subnet'
name|'in'
name|'used_subnets'
op|':'
newline|'\n'
indent|'                    '
name|'next_subnet'
op|'='
name|'find_next'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'if'
name|'next_subnet'
op|':'
newline|'\n'
indent|'                        '
name|'subnets_v4'
op|'.'
name|'remove'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'subnets_v4'
op|'.'
name|'append'
op|'('
name|'next_subnet'
op|')'
newline|'\n'
name|'subnet'
op|'='
name|'next_subnet'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'cidr already in use'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'used_subnet'
name|'in'
name|'used_subnets'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'subnet'
name|'in'
name|'used_subnet'
op|':'
newline|'\n'
indent|'                        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'requested cidr (%(cidr)s) conflicts with '"
nl|'\n'
string|"'existing supernet (%(super)s)'"
op|')'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|'%'
op|'{'
string|"'cidr'"
op|':'
name|'subnet'
op|','
nl|'\n'
string|"'super'"
op|':'
name|'used_subnet'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'used_subnet'
name|'in'
name|'subnet'
op|':'
newline|'\n'
indent|'                        '
name|'next_subnet'
op|'='
name|'find_next'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'if'
name|'next_subnet'
op|':'
newline|'\n'
indent|'                            '
name|'subnets_v4'
op|'.'
name|'remove'
op|'('
name|'subnet'
op|')'
newline|'\n'
name|'subnets_v4'
op|'.'
name|'append'
op|'('
name|'next_subnet'
op|')'
newline|'\n'
name|'subnet'
op|'='
name|'next_subnet'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'requested cidr (%(cidr)s) conflicts '"
nl|'\n'
string|"'with existing smaller cidr '"
nl|'\n'
string|"'(%(smaller)s)'"
op|')'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|'%'
op|'{'
string|"'cidr'"
op|':'
name|'subnet'
op|','
nl|'\n'
string|"'smaller'"
op|':'
name|'used_subnet'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'networks'
op|'='
op|'['
op|']'
newline|'\n'
name|'subnets'
op|'='
name|'itertools'
op|'.'
name|'izip_longest'
op|'('
name|'subnets_v4'
op|','
name|'subnets_v6'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
op|'('
name|'subnet_v4'
op|','
name|'subnet_v6'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'subnets'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|'='
name|'bridge'
newline|'\n'
name|'net'
op|'['
string|"'bridge_interface'"
op|']'
op|'='
name|'bridge_interface'
newline|'\n'
name|'net'
op|'['
string|"'multi_host'"
op|']'
op|'='
name|'multi_host'
newline|'\n'
nl|'\n'
name|'net'
op|'['
string|"'dns1'"
op|']'
op|'='
name|'dns1'
newline|'\n'
name|'net'
op|'['
string|"'dns2'"
op|']'
op|'='
name|'dns2'
newline|'\n'
nl|'\n'
name|'net'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_networks'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'label'"
op|']'
op|'='
string|"'%s_%d'"
op|'%'
op|'('
name|'label'
op|','
name|'index'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'label'"
op|']'
op|'='
name|'label'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cidr'
name|'and'
name|'subnet_v4'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'netmask'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'.'
name|'netmask'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'gateway'"
op|']'
op|'='
name|'gateway'
name|'or'
name|'str'
op|'('
name|'subnet_v4'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'broadcast'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cidr_v6'
name|'and'
name|'subnet_v6'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'['
string|"'cidr_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v6'
op|')'
newline|'\n'
name|'if'
name|'gateway_v6'
op|':'
newline|'\n'
comment|'# use a pre-defined gateway if one is provided'
nl|'\n'
indent|'                    '
name|'net'
op|'['
string|"'gateway_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'gateway_v6'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|'['
string|"'gateway_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v6'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'net'
op|'['
string|"'netmask_v6'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v6'
op|'.'
name|'_prefixlen'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# this bit here is for vlan-manager'
nl|'\n'
indent|'                '
name|'vlan'
op|'='
name|'kwargs'
op|'['
string|"'vlan_start'"
op|']'
op|'+'
name|'index'
newline|'\n'
name|'net'
op|'['
string|"'vpn_private_address'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'dhcp_start'"
op|']'
op|'='
name|'str'
op|'('
name|'subnet_v4'
op|'['
number|'3'
op|']'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'vlan'"
op|']'
op|'='
name|'vlan'
newline|'\n'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|'='
string|"'br%s'"
op|'%'
name|'vlan'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): This makes ports unique across the cloud, a more'
nl|'\n'
comment|'#             robust solution would be to make them uniq per ip'
nl|'\n'
name|'net'
op|'['
string|"'vpn_public_port'"
op|']'
op|'='
name|'kwargs'
op|'['
string|"'vpn_start'"
op|']'
op|'+'
name|'index'
newline|'\n'
nl|'\n'
comment|'# None if network with cidr or cidr_v6 already exists'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'context'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'network'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Network already exists!'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'networks'
op|'.'
name|'append'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'network'
name|'and'
name|'cidr'
name|'and'
name|'subnet_v4'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_fixed_ips'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'fixed_cidr'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_network
dedent|''
name|'def'
name|'delete_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_range'
op|','
name|'uuid'
op|','
nl|'\n'
name|'require_disassociated'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|"# Prefer uuid but we'll also take cidr for backwards compatibility"
nl|'\n'
indent|'        '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'if'
name|'uuid'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'elevated'
op|','
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fixed_range'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_by_cidr'
op|'('
name|'elevated'
op|','
name|'fixed_range'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'require_disassociated'
name|'and'
name|'network'
op|'['
string|"'project_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'Network must be disassociated from project %s'"
nl|'\n'
string|"' before delete'"
op|')'
op|'%'
name|'network'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_delete_safe'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
number|'2'
comment|'# network, gateway'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
comment|'# pylint: disable=R0201'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'return'
number|'1'
comment|'# broadcast'
newline|'\n'
nl|'\n'
DECL|member|_create_fixed_ips
dedent|''
name|'def'
name|'_create_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'fixed_cidr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create all fixed ips for network."""'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
comment|'# NOTE(vish): Should these be properties of the network as opposed'
nl|'\n'
comment|'#             to properties of the manager class?'
nl|'\n'
name|'bottom_reserved'
op|'='
name|'self'
op|'.'
name|'_bottom_reserved_ips'
newline|'\n'
name|'top_reserved'
op|'='
name|'self'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'if'
name|'not'
name|'fixed_cidr'
op|':'
newline|'\n'
indent|'            '
name|'fixed_cidr'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'num_ips'
op|'='
name|'len'
op|'('
name|'fixed_cidr'
op|')'
newline|'\n'
name|'ips'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'range'
op|'('
name|'num_ips'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'fixed_cidr'
op|'['
name|'index'
op|']'
op|')'
newline|'\n'
name|'if'
name|'index'
op|'<'
name|'bottom_reserved'
name|'or'
name|'num_ips'
op|'-'
name|'index'
op|'<='
name|'top_reserved'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reserved'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'ips'
op|'.'
name|'append'
op|'('
op|'{'
string|"'network_id'"
op|':'
name|'network_id'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'reserved'"
op|':'
name|'reserved'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_bulk_create'
op|'('
name|'context'
op|','
name|'ips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
dedent|''
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'networks'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_networks_on_host
dedent|''
name|'def'
name|'setup_networks_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""calls setup/teardown on network hosts for an instance."""'
newline|'\n'
name|'green_pool'
op|'='
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'teardown'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_teardown_network_on_host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_setup_network_on_host'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'vifs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'vif'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ips_by_virtual_interface'
op|'('
name|'context'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'network'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
comment|'#NOTE (tr3buchet): if using multi_host, host is instance[host]'
nl|'\n'
indent|'                '
name|'host'
op|'='
name|'network'
op|'['
string|"'host'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'host'
op|'=='
name|'host'
name|'or'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# at this point i am the correct host, or host doesn't"
nl|'\n'
comment|'# matter -> FlatManager'
nl|'\n'
indent|'                '
name|'call_func'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# i'm not the right host, run call on correct host"
nl|'\n'
indent|'                '
name|'green_pool'
op|'.'
name|'spawn_n'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'rpc_setup_network_on_host'
op|','
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'teardown'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for all of the setups (if any) to finish'
nl|'\n'
dedent|''
dedent|''
name|'green_pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|rpc_setup_network_on_host
dedent|''
name|'def'
name|'rpc_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'teardown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'teardown'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_teardown_network_on_host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'call_func'
op|'='
name|'self'
op|'.'
name|'_setup_network_on_host'
newline|'\n'
nl|'\n'
comment|'# subcall from original setup_networks_on_host'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'call_func'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_network_on_host
dedent|''
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_teardown_network_on_host
dedent|''
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|validate_networks
dedent|''
name|'def'
name|'validate_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check if the networks exists and host\n        is set to each network.\n        """'
newline|'\n'
name|'if'
name|'networks'
name|'is'
name|'None'
name|'or'
name|'len'
op|'('
name|'networks'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'network_uuids'
op|'='
op|'['
name|'uuid'
name|'for'
op|'('
name|'uuid'
op|','
name|'fixed_ip'
op|')'
name|'in'
name|'networks'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'network_uuid'
op|','
name|'address'
name|'in'
name|'networks'
op|':'
newline|'\n'
comment|'# check if the fixed IP address is valid and'
nl|'\n'
comment|'# it actually belongs to the network'
nl|'\n'
indent|'            '
name|'if'
name|'address'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'_get_network_by_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ip_ref'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|'!='
name|'network_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForNetwork'
op|'('
nl|'\n'
name|'address'
op|'='
name|'address'
op|','
name|'network_uuid'
op|'='
name|'network_uuid'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'fixed_ip_ref'
op|'['
string|"'instance_uuid'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpAlreadyInUse'
op|'('
nl|'\n'
name|'address'
op|'='
name|'address'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'fixed_ip_ref'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_by_id
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_network_by_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_by_uuids
dedent|''
name|'def'
name|'_get_networks_by_uuids'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuids'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|','
nl|'\n'
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vifs_by_instance
dedent|''
name|'def'
name|'get_vifs_by_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the vifs associated with an instance."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'vifs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
name|'dict'
op|'('
name|'vif'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_instance_id_by_floating_address
dedent|''
name|'def'
name|'get_instance_id_by_floating_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the instance id a floating ip\'s fixed ip is allocated to."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'fixed_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_floating_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'if'
name|'fixed_ip'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fixed_ip'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_network
dedent|''
dedent|''
name|'def'
name|'get_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): used locally'
nl|'\n'
nl|'\n'
indent|'        '
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'network_uuid'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_networks
dedent|''
name|'def'
name|'get_all_networks'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'network'
op|')'
name|'for'
name|'network'
name|'in'
name|'networks'
op|']'
newline|'\n'
nl|'\n'
DECL|member|disassociate_network
dedent|''
name|'def'
name|'disassociate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
indent|'        '
name|'network'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_disassociate'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_fixed_ip
dedent|''
name|'def'
name|'get_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a fixed ip."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'fixed'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'fixed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_fixed_ip_by_address
dedent|''
name|'def'
name|'get_fixed_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
indent|'        '
name|'fixed'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'fixed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vif_by_mac_address
dedent|''
name|'def'
name|'get_vif_by_mac_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'mac_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the vifs record for the mac_address."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'mac_address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'dns_update_periodic_interval'
op|')'
newline|'\n'
DECL|member|_periodic_update_dns
name|'def'
name|'_periodic_update_dns'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update local DNS entries of all networks on this host."""'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_dns
dedent|''
dedent|''
name|'def'
name|'update_dns'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when fixed IP is allocated or deallocated."""'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'network_id'
name|'in'
name|'network_ids'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'network'
op|'['
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'host_networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'host_network'
name|'in'
name|'host_networks'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'host_network'
op|'['
string|"'id'"
op|']'
op|'=='
name|'network_id'
op|':'
newline|'\n'
indent|'                    '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dns'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatManager
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'FlatManager'
op|'('
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic network where no vlans are used.\n\n    FlatManager does not do any bridge or vlan creation.  The user is\n    responsible for setting up whatever bridges are specified when creating\n    networks through nova-manage. This bridge needs to be created on all\n    compute hosts.\n\n    The idea is to create a single network for the host with a command like:\n    nova-manage network create 192.168.0.0/24 1 256. Creating multiple\n    networks for for one manager is currently not supported, but could be\n    added by modifying allocate_fixed_ip and get_network to get the network\n    with new logic. Arbitrary lists of addresses in a single network can\n    be accomplished with manual db editing.\n\n    If flat_injected is True, the compute host will attempt to inject network\n    config into the guest.  It attempts to modify /etc/network/interfaces and\n    currently only works on debian based systems. To support a wider range of\n    OSes, some other method may need to be devised to let the guest know which\n    ip it should be using so that it can configure itself. Perhaps an attached\n    disk or serial device with configuration info.\n\n    Metadata forwarding must be handled by the gateway, and since nova does\n    not do any setup in this mode, it must be done manually.  Requests to\n    169.254.169.254 port 80 will need to be forwarded to the api server.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|timeout_fixed_ips
name|'timeout_fixed_ips'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_allocate_fixed_ips
name|'def'
name|'_allocate_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'host'
op|','
name|'networks'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls allocate_fixed_ip once for each network."""'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'address'
name|'in'
op|'('
name|'fixed_ip'
name|'for'
op|'('
name|'uuid'
op|','
name|'fixed_ip'
op|')'
name|'in'
nl|'\n'
name|'requested_networks'
name|'if'
name|'network'
op|'['
string|"'uuid'"
op|']'
op|'=='
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|','
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_fixed_ip
dedent|''
dedent|''
name|'def'
name|'deallocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a fixed ip to the pool."""'
newline|'\n'
name|'super'
op|'('
name|'FlatManager'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'host'
op|','
nl|'\n'
name|'teardown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_network_on_host
dedent|''
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setup Network on this host."""'
newline|'\n'
comment|'# NOTE(tr3buchet): this does not need to happen on every ip'
nl|'\n'
comment|'# allocation, this functionality makes more sense in create_network'
nl|'\n'
comment|"# but we'd have to move the flat_injected flag to compute"
nl|'\n'
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'net'
op|'['
string|"'injected'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'flat_injected'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_teardown_network_on_host
dedent|''
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tear down network on this host."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): The floating ip functions are stub-implemented.'
nl|'\n'
comment|'# We were throwing an exception, but this was messing up horizon.'
nl|'\n'
comment|'# Timing makes it difficult to implement floating ips here, in Essex.'
nl|'\n'
nl|'\n'
DECL|member|get_floating_ip
dedent|''
name|'def'
name|'get_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating IP as a dict."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_floating_pools
dedent|''
name|'def'
name|'get_floating_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of floating pools."""'
newline|'\n'
comment|'# NOTE(maurosr) This method should be removed in future, replaced by'
nl|'\n'
comment|'# get_floating_ip_pools. See bug #1091668'
nl|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ip_pools
dedent|''
name|'def'
name|'get_floating_ip_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of floating ip pools."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ip_by_address
dedent|''
name|'def'
name|'get_floating_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating IP as a dict."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_project
dedent|''
name|'def'
name|'get_floating_ips_by_project'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the floating IPs allocated to a project."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_fixed_address
dedent|''
name|'def'
name|'get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the floating IPs associated with a fixed_address."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|allocate_floating_ip
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'pool'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a floating ip from the pool."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|deallocate_floating_ip
name|'def'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating ip to the pool."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates a floating ip with a fixed ip.\n\n        Makes sure everything makes sense then calls _associate_floating_ip,\n        rpc\'ing to correct host if i\'m not it.\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'network_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|member|disassociate_floating_ip
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a floating ip from its fixed ip.\n\n        Makes sure everything makes sense then calls _disassociate_floating_ip,\n        rpc\'ing to correct host if i\'m not it.\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|migrate_instance_start
dedent|''
name|'def'
name|'migrate_instance_start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_addresses'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|migrate_instance_finish
dedent|''
name|'def'
name|'migrate_instance_finish'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_addresses'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|update_dns
dedent|''
name|'def'
name|'update_dns'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when fixed IP is allocated or deallocated."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'FlatDHCPManager'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
nl|'\n'
DECL|class|FlatDHCPManager
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Flat networking with dhcp.\n\n    FlatDHCPManager will start up one dhcp server to give out addresses.\n    It never injects network settings into the guest. It also manages bridges.\n    Otherwise it behaves like FlatManager.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|SHOULD_CREATE_BRIDGE
name|'SHOULD_CREATE_BRIDGE'
op|'='
name|'True'
newline|'\n'
DECL|variable|DHCP
name|'DHCP'
op|'='
name|'True'
newline|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_network_on_host
dedent|''
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize_gateway'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'if'
op|'('
name|'CONF'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'gateway'
op|'='
name|'utils'
op|'.'
name|'get_my_linklocal'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'gateway_v6'"
op|':'
name|'gateway'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_teardown_network_on_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_dict
dedent|''
dedent|''
name|'def'
name|'_get_network_dict'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the dict representing necessary and meta network fields."""'
newline|'\n'
nl|'\n'
comment|'# get generic network fields'
nl|'\n'
name|'network_dict'
op|'='
name|'super'
op|'('
name|'FlatDHCPManager'
op|','
name|'self'
op|')'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# get flat dhcp specific fields'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'should_create_bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
newline|'\n'
dedent|''
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'bridge_interface'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'bridge_interface'"
op|']'
op|'='
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'multi_host'"
op|']'
op|'='
name|'network'
op|'['
string|"'multi_host'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'network_dict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VlanManager
dedent|''
dedent|''
name|'class'
name|'VlanManager'
op|'('
name|'RPCAllocateFixedIP'
op|','
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Vlan network with dhcp.\n\n    VlanManager is the most complicated.  It will create a host-managed\n    vlan for each project.  Each project gets its own subnet.  The networks\n    and associated subnets are created with nova-manage using a command like:\n    nova-manage network create 10.0.0.0/8 3 16.  This will create 3 networks\n    of 16 addresses from the beginning of the 10.0.0.0 range.\n\n    A dhcp server is run for each subnet, so each project will have its own.\n    For this mode to be useful, each project will need a vpn to access the\n    instances in its subnet.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|SHOULD_CREATE_BRIDGE
name|'SHOULD_CREATE_BRIDGE'
op|'='
name|'True'
newline|'\n'
DECL|variable|SHOULD_CREATE_VLAN
name|'SHOULD_CREATE_VLAN'
op|'='
name|'True'
newline|'\n'
DECL|variable|DHCP
name|'DHCP'
op|'='
name|'True'
newline|'\n'
DECL|variable|required_create_args
name|'required_create_args'
op|'='
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|init_host
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do any initialization that needs to be run if this is a\n        standalone service.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize'
op|'('
op|')'
newline|'\n'
name|'NetworkManager'
op|'.'
name|'init_host'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a fixed ip from the pool."""'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vpn'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'reserved'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'address'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'context'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_do_trigger_security_group_members_refresh_for_instance'
op|'('
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vif'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) This db query could be removed if we pass az and name'
nl|'\n'
comment|'#            (or the whole instance object).'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'name'
op|'='
name|'instance'
op|'['
string|"'display_name'"
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'instance'
op|'['
string|"'display_name'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'name'
op|','
name|'address'
op|','
nl|'\n'
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'instance_id'
op|','
name|'address'
op|','
nl|'\n'
string|'"A"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|add_network_to_project
dedent|''
name|'def'
name|'add_network_to_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'network_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force adds another network to a project."""'
newline|'\n'
name|'if'
name|'network_uuid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'network_id'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'network_id'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_associate'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'network_id'
op|','
name|'force'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate
dedent|''
name|'def'
name|'associate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|','
name|'associations'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associate or disassociate host or project to network."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi to 2.0.'
nl|'\n'
name|'network_id'
op|'='
name|'self'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'if'
string|"'host'"
name|'in'
name|'associations'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'associations'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_disassociate'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'disassociate_host'
op|'='
name|'True'
op|','
nl|'\n'
name|'disassociate_project'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_set_host'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'project'"
name|'in'
name|'associations'
op|':'
newline|'\n'
indent|'            '
name|'project'
op|'='
name|'associations'
op|'['
string|"'project'"
op|']'
newline|'\n'
name|'if'
name|'project'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_disassociate'
op|'('
name|'context'
op|','
name|'network_id'
op|','
nl|'\n'
name|'disassociate_host'
op|'='
name|'False'
op|','
nl|'\n'
name|'disassociate_project'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_associate'
op|'('
name|'context'
op|','
name|'project'
op|','
name|'network_id'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_by_id
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_network_by_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): Don't allow access to networks with project_id=None as"
nl|'\n'
comment|"#             these are networks that haven't been allocated to a"
nl|'\n'
comment|'#             project yet.'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_by_uuids
dedent|''
name|'def'
name|'_get_networks_by_uuids'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuids'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): Don't allow access to networks with project_id=None as"
nl|'\n'
comment|"#             these are networks that haven't been allocated to a"
nl|'\n'
comment|'#             project yet.'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_networks_for_instance
dedent|''
name|'def'
name|'_get_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine which networks an instance should connect to."""'
newline|'\n'
comment|'# get networks associated with project'
nl|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'not'
name|'None'
name|'and'
name|'len'
op|'('
name|'requested_networks'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'network_uuids'
op|'='
op|'['
name|'uuid'
name|'for'
op|'('
name|'uuid'
op|','
name|'fixed_ip'
op|')'
name|'in'
name|'requested_networks'
op|']'
newline|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'context'
op|','
name|'network_uuids'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'project_get_networks'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'networks'
newline|'\n'
nl|'\n'
DECL|member|create_networks
dedent|''
name|'def'
name|'create_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create networks based on parameters."""'
newline|'\n'
name|'self'
op|'.'
name|'_convert_int_args'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'['
string|'"vlan_start"'
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"vlan_start"'
op|')'
name|'or'
name|'CONF'
op|'.'
name|'vlan_start'
newline|'\n'
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"num_networks"'
op|')'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'num_networks'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|'"network_size"'
op|']'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"network_size"'
op|')'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'network_size'
op|')'
newline|'\n'
comment|'# Check that num_networks + vlan_start is not > 4094, fixes lp708025'
nl|'\n'
name|'if'
name|'kwargs'
op|'['
string|'"num_networks"'
op|']'
op|'+'
name|'kwargs'
op|'['
string|'"vlan_start"'
op|']'
op|'>'
number|'4094'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The sum between the number of networks and'"
nl|'\n'
string|"' the vlan start cannot be greater'"
nl|'\n'
string|"' than 4094'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that num networks and network size fits in fixed_net'
nl|'\n'
dedent|''
name|'fixed_net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'kwargs'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'fixed_net'
op|'.'
name|'size'
op|'<'
name|'kwargs'
op|'['
string|"'num_networks'"
op|']'
op|'*'
name|'kwargs'
op|'['
string|"'network_size'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'The network range is not '"
nl|'\n'
string|"'big enough to fit %(num_networks)s networks. Network '"
nl|'\n'
string|"'size is %(network_size)s'"
op|')'
op|'%'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kwargs'
op|'['
string|"'bridge_interface'"
op|']'
op|'='
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'bridge_interface'"
op|')'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'vlan_interface'
op|')'
newline|'\n'
name|'return'
name|'NetworkManager'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'self'
op|','
name|'context'
op|','
name|'vpn'
op|'='
name|'True'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'setup_network'"
op|','
string|"'nova-'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_setup_network_on_host
name|'def'
name|'_setup_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up network on this host."""'
newline|'\n'
name|'if'
name|'not'
name|'network'
op|'['
string|"'vpn_public_address'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'address'
op|'='
name|'CONF'
op|'.'
name|'vpn_ip'
newline|'\n'
name|'net'
op|'['
string|"'vpn_public_address'"
op|']'
op|'='
name|'address'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'net'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'network'
op|'['
string|"'vpn_public_address'"
op|']'
newline|'\n'
dedent|''
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'initialize_gateway'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(vish): only ensure this forward if the address hasn't been set"
nl|'\n'
comment|'#             manually.'
nl|'\n'
name|'if'
name|'address'
op|'=='
name|'CONF'
op|'.'
name|'vpn_ip'
name|'and'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
string|'"ensure_vpn_forward"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'add_vpn'
op|'('
name|'CONF'
op|'.'
name|'vpn_ip'
op|','
nl|'\n'
name|'network'
op|'['
string|"'vpn_public_port'"
op|']'
op|','
nl|'\n'
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'if'
op|'('
name|'CONF'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_ra'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
name|'gateway'
op|'='
name|'utils'
op|'.'
name|'get_my_linklocal'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'gateway_v6'"
op|':'
name|'gateway'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'setup_network'"
op|','
string|"'nova-'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_teardown_network_on_host
name|'def'
name|'_teardown_network_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'fake_network'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dhcp_ip'
op|'('
name|'context'
op|','
name|'network'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_dev'
op|'('
name|'network'
op|')'
newline|'\n'
comment|'# NOTE(dprince): dhcp DB queries require elevated context'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'elevated'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ethuleau): For multi hosted networks, if the network is no'
nl|'\n'
comment|"# more used on this host and if VPN forwarding rule aren't handed"
nl|'\n'
comment|'# by the host, we delete the network gateway.'
nl|'\n'
name|'vpn_address'
op|'='
name|'network'
op|'['
string|"'vpn_public_address'"
op|']'
newline|'\n'
name|'if'
op|'('
name|'CONF'
op|'.'
name|'teardown_unused_network_gateway'
name|'and'
nl|'\n'
name|'network'
op|'['
string|"'multi_host'"
op|']'
name|'and'
name|'vpn_address'
op|'!='
name|'CONF'
op|'.'
name|'vpn_ip'
name|'and'
nl|'\n'
name|'not'
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_in_use_on_host'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Remove unused gateway %s"'
op|','
name|'network'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'kill_dhcp'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'remove_gateway'
op|'('
name|'network'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'share_dhcp_address'
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'dhcp_server'"
op|']'
op|','
nl|'\n'
name|'values'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp'
op|'('
name|'context'
op|','
name|'dev'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_network_dict
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_network_dict'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the dict representing necessary and meta network fields."""'
newline|'\n'
nl|'\n'
comment|'# get generic network fields'
nl|'\n'
name|'network_dict'
op|'='
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_get_network_dict'
op|'('
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# get vlan specific network fields'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'should_create_bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'SHOULD_CREATE_BRIDGE'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'SHOULD_CREATE_VLAN'
op|':'
newline|'\n'
indent|'            '
name|'network_dict'
op|'['
string|"'should_create_vlan'"
op|']'
op|'='
name|'self'
op|'.'
name|'SHOULD_CREATE_VLAN'
newline|'\n'
dedent|''
name|'for'
name|'k'
name|'in'
op|'['
string|"'vlan'"
op|','
string|"'bridge_interface'"
op|','
string|"'multi_host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'network_dict'
op|'['
name|'k'
op|']'
op|'='
name|'network'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'network_dict'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_bottom_reserved_ips
name|'def'
name|'_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the bottom of the range."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_bottom_reserved_ips'
op|'+'
number|'1'
comment|'# vpn server'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_top_reserved_ips
name|'def'
name|'_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Number of reserved ips at the top of the range."""'
newline|'\n'
name|'parent_reserved'
op|'='
name|'super'
op|'('
name|'VlanManager'
op|','
name|'self'
op|')'
op|'.'
name|'_top_reserved_ips'
newline|'\n'
name|'return'
name|'parent_reserved'
op|'+'
name|'CONF'
op|'.'
name|'cnt_vpn_clients'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

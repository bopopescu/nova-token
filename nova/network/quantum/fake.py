begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Nicira Networks, Inc'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'math'
newline|'\n'
name|'from'
name|'netaddr'
name|'import'
name|'IPNetwork'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'ipv6'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"network.quantum.fake"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# this class can be used for unit functional/testing on nova,'
nl|'\n'
comment|'# as it does not actually make remote calls to the Quantum service'
nl|'\n'
DECL|class|FakeQuantumClientConnection
name|'class'
name|'FakeQuantumClientConnection'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'nets'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_networks_for_tenant
dedent|''
name|'def'
name|'get_networks_for_tenant'
op|'('
name|'self'
op|','
name|'tenant_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'net_id'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'n'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'                '
name|'net_ids'
op|'.'
name|'append'
op|'('
name|'net_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'net_ids'
newline|'\n'
nl|'\n'
DECL|member|create_network
dedent|''
name|'def'
name|'create_network'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'network_name'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'net-name'"
op|':'
name|'network_name'
op|','
nl|'\n'
string|"'tenant-id'"
op|':'
name|'tenant_id'
op|','
nl|'\n'
string|"'ports'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'return'
name|'uuid'
newline|'\n'
nl|'\n'
DECL|member|delete_network
dedent|''
name|'def'
name|'delete_network'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|network_exists
dedent|''
dedent|''
name|'def'
name|'network_exists'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_confirm_not_attached
dedent|''
dedent|''
name|'def'
name|'_confirm_not_attached'
op|'('
name|'self'
op|','
name|'interface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'p'
name|'in'
name|'n'
op|'['
string|"'ports'"
op|']'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'p'
op|'['
string|"'attachment-id'"
op|']'
op|'=='
name|'interface_id'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
string|'"interface \'%s\' is already attached"'
op|'%'
name|'interface_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_and_attach_port
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_and_attach_port'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'interface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'network_exists'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"network %s does not exist for tenant %s"'
op|'%'
op|'('
name|'net_id'
op|','
name|'tenant_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_confirm_not_attached'
op|'('
name|'interface_id'
op|')'
newline|'\n'
name|'uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'ports'"
op|']'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|'"port-state"'
op|':'
string|'"ACTIVE"'
op|','
nl|'\n'
string|'"attachment-id"'
op|':'
name|'interface_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|detach_and_delete_port
dedent|''
name|'def'
name|'detach_and_delete_port'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'port_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'network_exists'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"network %s does not exist for tenant %s"'
op|'%'
op|'('
name|'net_id'
op|','
name|'tenant_id'
op|')'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'ports'"
op|']'
op|'['
name|'port_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_port_by_attachment
dedent|''
name|'def'
name|'get_port_by_attachment'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'attachment_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'net_id'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'n'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'port_id'
op|','
name|'p'
name|'in'
name|'n'
op|'['
string|"'ports'"
op|']'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'p'
op|'['
string|"'attachment-id'"
op|']'
op|'=='
name|'attachment_id'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'('
name|'net_id'
op|','
name|'port_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Nicira Networks, Inc'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'netaddr'
name|'import'
name|'IPNetwork'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'melange_connection'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"quantum_melange_ipam"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_ipam_lib
name|'def'
name|'get_ipam_lib'
op|'('
name|'net_man'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'QuantumMelangeIPAMLib'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumMelangeIPAMLib
dedent|''
name|'class'
name|'QuantumMelangeIPAMLib'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Implements Quantum IP Address Management (IPAM) interface\n        using the Melange service, which is access using the Melange\n        web services API.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Initialize class used to connect to Melange server"""'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'='
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_subnet
dedent|''
name|'def'
name|'create_subnet'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'label'
op|','
name|'project_id'
op|','
nl|'\n'
name|'quantum_net_id'
op|','
name|'priority'
op|','
name|'cidr'
op|'='
name|'None'
op|','
nl|'\n'
name|'gateway_v6'
op|'='
name|'None'
op|','
name|'cidr_v6'
op|'='
name|'None'
op|','
nl|'\n'
name|'dns1'
op|'='
name|'None'
op|','
name|'dns2'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Contact Melange and create a subnet for any non-NULL\n            IPv4 or IPv6 subnets.\n\n            Also create a entry in the Nova networks DB, but only\n            to store values not represented in Melange or to\n            temporarily provide compatibility with Nova code that\n            accesses IPAM data directly via the DB (e.g., nova-api)\n        """'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'create_block'
op|'('
name|'quantum_net_id'
op|','
name|'cidr'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'tenant_id'
op|','
nl|'\n'
name|'dns1'
op|'='
name|'dns1'
op|','
name|'dns2'
op|'='
name|'dns2'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cidr_v6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'create_block'
op|'('
name|'quantum_net_id'
op|','
name|'cidr_v6'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'tenant_id'
op|','
nl|'\n'
name|'dns1'
op|'='
name|'dns1'
op|','
name|'dns2'
op|'='
name|'dns2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'net'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'quantum_net_id'
op|','
nl|'\n'
string|'"project_id"'
op|':'
name|'project_id'
op|','
nl|'\n'
string|'"priority"'
op|':'
name|'priority'
op|','
nl|'\n'
string|'"label"'
op|':'
name|'label'
op|'}'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'context'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_fixed_ip
dedent|''
name|'def'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'quantum_net_id'
op|','
name|'vif_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Pass call to allocate fixed IP on to Melange"""'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'allocate_ip'
op|'('
name|'quantum_net_id'
op|','
nl|'\n'
name|'vif_ref'
op|'['
string|"'uuid'"
op|']'
op|','
name|'project_id'
op|'='
name|'tenant_id'
op|','
nl|'\n'
name|'mac_address'
op|'='
name|'vif_ref'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_network_id_by_cidr
dedent|''
name|'def'
name|'get_network_id_by_cidr'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'cidr'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Find the Quantum UUID associated with a IPv4 CIDR\n            address for the specified tenant.\n        """'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'all_blocks'
op|'='
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
name|'tenant_id'
op|')'
newline|'\n'
name|'for'
name|'b'
name|'in'
name|'all_blocks'
op|'['
string|"'ip_blocks'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'b'
op|'['
string|"'cidr'"
op|']'
op|'=='
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'b'
op|'['
string|"'network_id'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"No network found for cidr %s"'
op|'%'
name|'cidr'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_subnets_by_net_id
dedent|''
name|'def'
name|'delete_subnets_by_net_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'net_id'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Find Melange block associated with the Quantum UUID,\n            then tell Melange to delete that block.\n        """'
newline|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'all_blocks'
op|'='
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
name|'tenant_id'
op|')'
newline|'\n'
name|'for'
name|'b'
name|'in'
name|'all_blocks'
op|'['
string|"'ip_blocks'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'b'
op|'['
string|"'network_id'"
op|']'
op|'=='
name|'net_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'delete_block'
op|'('
name|'b'
op|'['
string|"'id'"
op|']'
op|','
name|'tenant_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'admin_context'
op|','
name|'net_id'
op|')'
newline|'\n'
name|'if'
name|'network'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'network_delete_safe'
op|'('
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_project_and_global_net_ids
dedent|''
dedent|''
name|'def'
name|'get_project_and_global_net_ids'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Fetches all networks associated with this project, or\n            that are "global" (i.e., have no project set).\n            Returns list sorted by \'priority\'.\n        """'
newline|'\n'
name|'if'
name|'project_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"get_project_and_global_net_ids must be called"'
nl|'\n'
string|'" with a non-null project_id"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Decorate with priority'
nl|'\n'
name|'priority_nets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'tenant_id'
name|'in'
op|'('
name|'project_id'
op|','
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'blocks'
op|'='
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
name|'tenant_id'
op|')'
newline|'\n'
name|'for'
name|'ip_block'
name|'in'
name|'blocks'
op|'['
string|"'ip_blocks'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'network_id'
op|'='
name|'ip_block'
op|'['
string|"'network_id'"
op|']'
newline|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'admin_context'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'network'
op|':'
newline|'\n'
indent|'                    '
name|'priority'
op|'='
name|'network'
op|'['
string|"'priority'"
op|']'
newline|'\n'
name|'priority_nets'
op|'.'
name|'append'
op|'('
op|'('
name|'priority'
op|','
name|'network_id'
op|','
name|'tenant_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sort by priority'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'priority_nets'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Undecorate'
nl|'\n'
name|'return'
op|'['
op|'('
name|'network_id'
op|','
name|'tenant_id'
op|')'
nl|'\n'
name|'for'
name|'priority'
op|','
name|'network_id'
op|','
name|'tenant_id'
name|'in'
name|'priority_nets'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_subnets_by_net_id
dedent|''
name|'def'
name|'get_subnets_by_net_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Returns information about the IPv4 and IPv6 subnets\n            associated with a Quantum Network UUID.\n        """'
newline|'\n'
nl|'\n'
comment|'# FIXME(danwent):  Melange actually returns the subnet info'
nl|'\n'
comment|'# when we query for a particular interface.  We may want to'
nl|'\n'
comment|'# rework the ipam_manager python API to let us take advantage of'
nl|'\n'
comment|'# this, as right now we have to get all blocks and cycle through'
nl|'\n'
comment|'# them.'
nl|'\n'
name|'subnet_v4'
op|'='
name|'None'
newline|'\n'
name|'subnet_v6'
op|'='
name|'None'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'all_blocks'
op|'='
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
name|'tenant_id'
op|')'
newline|'\n'
name|'for'
name|'b'
name|'in'
name|'all_blocks'
op|'['
string|"'ip_blocks'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'b'
op|'['
string|"'network_id'"
op|']'
op|'=='
name|'net_id'
op|':'
newline|'\n'
indent|'                '
name|'subnet'
op|'='
op|'{'
string|"'network_id'"
op|':'
name|'b'
op|'['
string|"'network_id'"
op|']'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'b'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'b'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'b'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'b'
op|'['
string|"'netmask'"
op|']'
op|','
nl|'\n'
string|"'dns1'"
op|':'
name|'b'
op|'['
string|"'dns1'"
op|']'
op|','
nl|'\n'
string|"'dns2'"
op|':'
name|'b'
op|'['
string|"'dns2'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'IPNetwork'
op|'('
name|'b'
op|'['
string|"'cidr'"
op|']'
op|')'
op|'.'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                    '
name|'subnet_v6'
op|'='
name|'subnet'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'subnet_v4'
op|'='
name|'subnet'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
op|'('
name|'subnet_v4'
op|','
name|'subnet_v6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_v4_ips_by_interface
dedent|''
name|'def'
name|'get_v4_ips_by_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'net_id'
op|','
name|'vif_id'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Returns a list of IPv4 address strings associated with\n            the specified virtual interface.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_ips_by_interface'
op|'('
name|'context'
op|','
name|'net_id'
op|','
name|'vif_id'
op|','
nl|'\n'
name|'project_id'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_v6_ips_by_interface
dedent|''
name|'def'
name|'get_v6_ips_by_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'net_id'
op|','
name|'vif_id'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Returns a list of IPv6 address strings associated with\n            the specified virtual interface.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_ips_by_interface'
op|'('
name|'context'
op|','
name|'net_id'
op|','
name|'vif_id'
op|','
nl|'\n'
name|'project_id'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ips_by_interface
dedent|''
name|'def'
name|'_get_ips_by_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'net_id'
op|','
name|'vif_id'
op|','
name|'project_id'
op|','
nl|'\n'
name|'ip_version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Helper method to fetch v4 or v6 addresses for a particular\n            virtual interface.\n        """'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'ip_list'
op|'='
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
name|'net_id'
op|','
name|'vif_id'
op|','
name|'tenant_id'
op|')'
newline|'\n'
name|'return'
op|'['
name|'ip'
op|'['
string|"'address'"
op|']'
name|'for'
name|'ip'
name|'in'
name|'ip_list'
nl|'\n'
name|'if'
name|'IPNetwork'
op|'('
name|'ip'
op|'['
string|"'address'"
op|']'
op|')'
op|'.'
name|'version'
op|'=='
name|'ip_version'
op|']'
newline|'\n'
nl|'\n'
DECL|member|verify_subnet_exists
dedent|''
name|'def'
name|'verify_subnet_exists'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'quantum_net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Confirms that a subnet exists that is associated with the\n            specified Quantum Network UUID.\n        """'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'v4_subnet'
op|','
name|'v6_subnet'
op|'='
name|'self'
op|'.'
name|'get_subnets_by_net_id'
op|'('
name|'context'
op|','
name|'tenant_id'
op|','
nl|'\n'
name|'quantum_net_id'
op|')'
newline|'\n'
name|'return'
name|'v4_subnet'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|deallocate_ips_by_vif
dedent|''
name|'def'
name|'deallocate_ips_by_vif'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'net_id'
op|','
name|'vif_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Deallocate all fixed IPs associated with the specified\n            virtual interface.\n        """'
newline|'\n'
name|'tenant_id'
op|'='
name|'project_id'
name|'or'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'deallocate_ips'
op|'('
name|'net_id'
op|','
name|'vif_ref'
op|'['
string|"'uuid'"
op|']'
op|','
name|'tenant_id'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
name|'import'
name|'messaging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'rpcapi'
name|'as'
name|'network_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'dns_domain'
name|'as'
name|'dns_domain_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fixed_ip'
name|'as'
name|'fixed_ip_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'floating_ip'
name|'as'
name|'floating_ip_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'network'
name|'as'
name|'network_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'service'
name|'as'
name|'service_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'servicegroup'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|QUOTAS
name|'QUOTAS'
op|'='
name|'quota'
op|'.'
name|'QUOTAS'
newline|'\n'
nl|'\n'
DECL|variable|floating_opts
name|'floating_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'default_floating_pool'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default pool for floating IPs'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'auto_assign_floating_ip'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Autoassigning floating IP to VM'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'floating_ip_dns_manager'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.network.noop_dns_driver.NoopDNSDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Full class name for the DNS Manager for floating IPs'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instance_dns_manager'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.network.noop_dns_driver.NoopDNSDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Full class name for the DNS Manager for instance IPs'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instance_dns_domain'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Full class name for the DNS Zone for instance IPs'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'floating_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'public_interface'"
op|','
string|"'nova.network.linux_net'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_topic'"
op|','
string|"'nova.network.rpcapi'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FloatingIP
name|'class'
name|'FloatingIP'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mixin class for adding floating IP functionality to a manager."""'
newline|'\n'
nl|'\n'
DECL|variable|servicegroup_api
name|'servicegroup_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|init_host_floating_ips
name|'def'
name|'init_host_floating_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Configures floating ips owned by host."""'
newline|'\n'
nl|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'floating_ips'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIPList'
op|'.'
name|'get_by_host'
op|'('
nl|'\n'
name|'admin_context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'floating_ip'
name|'in'
name|'floating_ips'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'floating_ip'
op|'.'
name|'fixed_ip_id'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'fixed_ip'
op|'='
name|'floating_ip'
op|'.'
name|'fixed_ip'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFound'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Fixed ip %s not found'"
op|')'
op|'%'
name|'floating_ip'
op|'.'
name|'fixed_ip_id'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'interface'
op|'='
name|'CONF'
op|'.'
name|'public_interface'
name|'or'
name|'floating_ip'
op|'.'
name|'interface'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'add_floating_ip'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'interface'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Interface %s not found'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoFloatingIpInterface'
op|'('
name|'interface'
op|'='
name|'interface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_for_instance
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'allocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles allocating the floating IP resources for an instance.\n\n        calls super class allocate_for_instance() as well\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_uuid'"
op|')'
newline|'\n'
dedent|''
name|'project_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|')'
newline|'\n'
name|'requested_networks'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'requested_networks'"
op|')'
newline|'\n'
comment|"# call the next inherited class's allocate_for_instance()"
nl|'\n'
comment|'# which is currently the NetworkManager version'
nl|'\n'
comment|'# do this first so fixed ip is already allocated'
nl|'\n'
name|'nw_info'
op|'='
name|'super'
op|'('
name|'FloatingIP'
op|','
name|'self'
op|')'
op|'.'
name|'allocate_for_instance'
op|'('
name|'context'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'auto_assign_floating_ip'
op|':'
newline|'\n'
comment|'# allocate a floating ip'
nl|'\n'
indent|'            '
name|'floating_address'
op|'='
name|'self'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'context'
op|','
name|'project_id'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"floating IP allocation for instance "'
nl|'\n'
string|'"|%s|"'
op|','
name|'floating_address'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
comment|'# get the first fixed address belonging to the instance'
nl|'\n'
name|'fixed_ips'
op|'='
name|'nw_info'
op|'.'
name|'fixed_ips'
op|'('
op|')'
newline|'\n'
name|'fixed_address'
op|'='
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
comment|'# associate the floating ip to fixed_ip'
nl|'\n'
name|'self'
op|'.'
name|'associate_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# create a fresh set of network info that contains the floating ip'
nl|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'nw_info'
newline|'\n'
nl|'\n'
DECL|member|deallocate_for_instance
dedent|''
name|'def'
name|'deallocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles deallocating floating IP resources for an instance.\n\n        calls super class deallocate_for_instance() as well.\n\n        rpc.called by network_api\n        """'
newline|'\n'
name|'if'
string|"'instance'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'kwargs'
op|'['
string|"'instance_id'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(francois.charlier): in some cases the instance might be'
nl|'\n'
comment|'# deleted before the IPs are released, so we need to get'
nl|'\n'
comment|'# deleted instances too'
nl|'\n'
indent|'                '
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
name|'fixed_ip_obj'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# add to kwargs so we can pass to super to save a db lookup there'
nl|'\n'
dedent|''
name|'kwargs'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
name|'fixed_ips'
newline|'\n'
name|'for'
name|'fixed_ip'
name|'in'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'fixed_id'
op|'='
name|'fixed_ip'
op|'.'
name|'id'
newline|'\n'
name|'floating_ips'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIPList'
op|'.'
name|'get_by_fixed_ip_id'
op|'('
nl|'\n'
name|'context'
op|','
name|'fixed_id'
op|')'
newline|'\n'
comment|'# disassociate floating ips related to fixed_ip'
nl|'\n'
name|'for'
name|'floating_ip'
name|'in'
name|'floating_ips'
op|':'
newline|'\n'
indent|'                '
name|'address'
op|'='
name|'str'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FloatingIpNotAssociated'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Floating IP %s is not associated. Ignore."'
op|')'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
comment|'# deallocate if auto_assigned'
nl|'\n'
dedent|''
name|'if'
name|'floating_ip'
op|'.'
name|'auto_assigned'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'deallocate_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|"# call the next inherited class's deallocate_for_instance()"
nl|'\n'
comment|'# which is currently the NetworkManager version'
nl|'\n'
comment|'# call this after so floating IPs are handled first'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'super'
op|'('
name|'FloatingIP'
op|','
name|'self'
op|')'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_floating_ip_owned_by_project
dedent|''
name|'def'
name|'_floating_ip_owned_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Raises if floating ip does not belong to project."""'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'floating_ip'
op|'.'
name|'project_id'
op|'!='
name|'context'
op|'.'
name|'project_id'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'floating_ip'
op|'.'
name|'project_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Address |%(address)s| is not allocated'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'floating_ip'
op|'.'
name|'address'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Forbidden'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Address |%(address)s| is not allocated to your '"
nl|'\n'
string|"'project |%(project)s|'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'floating_ip'
op|'.'
name|'address'
op|','
nl|'\n'
string|"'project'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Forbidden'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_floating_ip
dedent|''
dedent|''
dedent|''
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'auto_assigned'
op|'='
name|'False'
op|','
nl|'\n'
name|'pool'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets a floating ip from the pool."""'
newline|'\n'
comment|'# NOTE(tr3buchet): all network hosts in zone now use the same pool'
nl|'\n'
name|'pool'
op|'='
name|'pool'
name|'or'
name|'CONF'
op|'.'
name|'default_floating_pool'
newline|'\n'
name|'use_quota'
op|'='
name|'not'
name|'auto_assigned'
newline|'\n'
nl|'\n'
comment|"# Check the quota; can't put this in the API because we get"
nl|'\n'
comment|'# called into from other places'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'use_quota'
op|':'
newline|'\n'
indent|'                '
name|'reservations'
op|'='
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'floating_ips'
op|'='
number|'1'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Quota exceeded for %s, tried to allocate "'
nl|'\n'
string|'"floating IP"'
op|')'
op|','
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'FloatingIpLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'floating_ip'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'allocate_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'project_id'
op|','
name|'pool'
op|','
name|'auto_assigned'
op|'='
name|'auto_assigned'
op|')'
newline|'\n'
name|'payload'
op|'='
name|'dict'
op|'('
name|'project_id'
op|'='
name|'project_id'
op|','
name|'floating_ip'
op|'='
name|'floating_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
nl|'\n'
string|"'network.floating_ip.allocate'"
op|','
name|'payload'
op|')'
newline|'\n'
nl|'\n'
comment|'# Commit the reservations'
nl|'\n'
name|'if'
name|'use_quota'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'use_quota'
op|':'
newline|'\n'
indent|'                    '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'floating_ip'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|')'
newline|'\n'
DECL|member|deallocate_floating_ip
name|'def'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating ip to the pool."""'
newline|'\n'
name|'floating_ip'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
comment|'# handle auto_assigned'
nl|'\n'
name|'if'
name|'not'
name|'affect_auto_assigned'
name|'and'
name|'floating_ip'
op|'.'
name|'auto_assigned'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'use_quota'
op|'='
name|'not'
name|'floating_ip'
op|'.'
name|'auto_assigned'
newline|'\n'
nl|'\n'
comment|'# make sure project owns this floating ip (allocated)'
nl|'\n'
name|'self'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure floating ip is not associated'
nl|'\n'
name|'if'
name|'floating_ip'
op|'.'
name|'fixed_ip_id'
op|':'
newline|'\n'
indent|'            '
name|'floating_address'
op|'='
name|'floating_ip'
op|'.'
name|'address'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'FloatingIpAssociated'
op|'('
name|'address'
op|'='
name|'floating_address'
op|')'
newline|'\n'
nl|'\n'
comment|'# clean up any associated DNS entries'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete_all_entries_for_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_ip'
op|'.'
name|'address'
op|')'
newline|'\n'
name|'payload'
op|'='
name|'dict'
op|'('
name|'project_id'
op|'='
name|'floating_ip'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'floating_ip'
op|'='
name|'str'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
string|"'network.floating_ip.deallocate'"
op|','
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'project_id'
op|'='
name|'floating_ip'
op|'.'
name|'project_id'
newline|'\n'
comment|'# Get reservations...'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'use_quota'
op|':'
newline|'\n'
indent|'                '
name|'reservations'
op|'='
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'floating_ips'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'reservations'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'reservations'
op|'='
name|'None'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Failed to update usages deallocating "'
nl|'\n'
string|'"floating IP"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'floating_ip_ref'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'deallocate'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
comment|'# floating_ip_ref will be None if concurrently another'
nl|'\n'
comment|'# API call has also deallocated the same floating ip'
nl|'\n'
name|'if'
name|'floating_ip_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Commit the reservations'
nl|'\n'
indent|'            '
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|')'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates a floating ip with a fixed ip.\n\n        Makes sure everything makes sense then calls _associate_floating_ip,\n        rpc\'ing to correct host if i\'m not it.\n\n        Access to the floating_address is verified but access to the\n        fixed_address is not verified. This assumes that that the calling\n        side has already verified that the fixed_address is legal by\n        checking access to the instance.\n        """'
newline|'\n'
name|'floating_ip'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'floating_address'
op|')'
newline|'\n'
comment|'# handle auto_assigned'
nl|'\n'
name|'if'
name|'not'
name|'affect_auto_assigned'
name|'and'
name|'floating_ip'
op|'.'
name|'auto_assigned'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# make sure project owns this floating ip (allocated)'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# disassociate any already associated'
nl|'\n'
name|'orig_instance_uuid'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'floating_ip'
op|'.'
name|'fixed_ip_id'
op|':'
newline|'\n'
comment|'# find previously associated instance'
nl|'\n'
indent|'            '
name|'fixed_ip'
op|'='
name|'floating_ip'
op|'.'
name|'fixed_ip'
newline|'\n'
name|'if'
name|'str'
op|'('
name|'fixed_ip'
op|'.'
name|'address'
op|')'
op|'=='
name|'fixed_address'
op|':'
newline|'\n'
comment|'# NOTE(vish): already associated to this address'
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'orig_instance_uuid'
op|'='
name|'fixed_ip'
op|'.'
name|'instance_uuid'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'context'
op|','
name|'floating_address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_ip'
op|'='
name|'fixed_ip_obj'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
comment|"# send to correct host, unless i'm the correct host"
nl|'\n'
name|'network'
op|'='
name|'network_obj'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'if'
name|'network'
op|'.'
name|'multi_host'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'fixed_ip'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'network'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
dedent|''
name|'interface'
op|'='
name|'floating_ip'
op|'.'
name|'interface'
newline|'\n'
name|'if'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|"# i'm the correct host"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_associate_floating_ip'
op|'('
name|'context'
op|','
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|','
name|'interface'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# send to correct host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'_associate_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|','
name|'fixed_address'
op|','
name|'interface'
op|','
name|'host'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'orig_instance_uuid'
newline|'\n'
nl|'\n'
DECL|member|_associate_floating_ip
dedent|''
name|'def'
name|'_associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|','
nl|'\n'
name|'interface'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Performs db and driver calls to associate floating ip & fixed ip."""'
newline|'\n'
name|'interface'
op|'='
name|'CONF'
op|'.'
name|'public_interface'
name|'or'
name|'interface'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'unicode'
op|'('
name|'floating_address'
op|')'
op|')'
newline|'\n'
DECL|function|do_associate
name|'def'
name|'do_associate'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# associate floating ip'
nl|'\n'
indent|'            '
name|'floating'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'floating'
op|'.'
name|'fixed_ip'
newline|'\n'
name|'if'
name|'not'
name|'fixed'
op|':'
newline|'\n'
comment|'# NOTE(vish): ip was already associated'
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# gogo driver time'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'add_floating_ip'
op|'('
name|'floating_address'
op|','
name|'fixed_address'
op|','
nl|'\n'
name|'interface'
op|','
name|'fixed'
op|'['
string|"'network'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
name|'as'
name|'exc_ctxt'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'disassociate'
op|'('
nl|'\n'
name|'context'
op|','
name|'floating_address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Failed to disassociated floating '"
nl|'\n'
string|"'address: %s'"
op|')'
op|','
name|'floating_address'
op|')'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
name|'if'
string|'"Cannot find device"'
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Interface %s not found'"
op|')'
op|','
name|'interface'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                            '
name|'pass'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NoFloatingIpInterface'
op|'('
nl|'\n'
name|'interface'
op|'='
name|'interface'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'payload'
op|'='
name|'dict'
op|'('
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_ip'
op|'='
name|'floating_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
nl|'\n'
string|"'network.floating_ip.associate'"
op|','
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'do_associate'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|')'
newline|'\n'
DECL|member|disassociate_floating_ip
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a floating ip from its fixed ip.\n\n        Makes sure everything makes sense then calls _disassociate_floating_ip,\n        rpc\'ing to correct host if i\'m not it.\n        """'
newline|'\n'
name|'floating_ip'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
comment|'# handle auto assigned'
nl|'\n'
name|'if'
name|'not'
name|'affect_auto_assigned'
name|'and'
name|'floating_ip'
op|'.'
name|'auto_assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'CannotDisassociateAutoAssignedFloatingIP'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure project owns this floating ip (allocated)'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure floating ip is associated'
nl|'\n'
name|'if'
name|'not'
name|'floating_ip'
op|'.'
name|'fixed_ip_id'
op|':'
newline|'\n'
indent|'            '
name|'floating_address'
op|'='
name|'floating_ip'
op|'.'
name|'address'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'FloatingIpNotAssociated'
op|'('
name|'address'
op|'='
name|'floating_address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fixed_ip'
op|'='
name|'fixed_ip_obj'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_ip'
op|'.'
name|'fixed_ip_id'
op|')'
newline|'\n'
nl|'\n'
comment|"# send to correct host, unless i'm the correct host"
nl|'\n'
name|'network'
op|'='
name|'network_obj'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'interface'
op|'='
name|'floating_ip'
op|'.'
name|'interface'
newline|'\n'
name|'if'
name|'network'
op|'.'
name|'multi_host'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'fixed_ip'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'service'
op|'='
name|'service_obj'
op|'.'
name|'Service'
op|'.'
name|'get_by_host_and_topic'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'.'
name|'host'
op|','
name|'CONF'
op|'.'
name|'network_topic'
op|')'
newline|'\n'
name|'if'
name|'service'
name|'and'
name|'self'
op|'.'
name|'servicegroup_api'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'host'
op|'='
name|'instance'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(vish): if the service is down just deallocate the data'
nl|'\n'
comment|'#             locally. Set the host to local so the call will'
nl|'\n'
comment|'#             not go over rpc and set interface to None so the'
nl|'\n'
comment|'#             teardown in the driver does not happen.'
nl|'\n'
indent|'                '
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'interface'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'network'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|"# i'm the correct host"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disassociate_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'interface'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# send to correct host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'_disassociate_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'interface'
op|','
name|'host'
op|','
name|'fixed_ip'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disassociate_floating_ip
dedent|''
dedent|''
name|'def'
name|'_disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'interface'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Performs db and driver calls to disassociate floating ip."""'
newline|'\n'
name|'interface'
op|'='
name|'CONF'
op|'.'
name|'public_interface'
name|'or'
name|'interface'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'unicode'
op|'('
name|'address'
op|')'
op|')'
newline|'\n'
DECL|function|do_disassociate
name|'def'
name|'do_disassociate'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): Note that we are disassociating in the db before we'
nl|'\n'
comment|'#             actually remove the ip address on the host. We are'
nl|'\n'
comment|'#             safe from races on this host due to the decorator,'
nl|'\n'
comment|'#             but another host might grab the ip right away. We'
nl|'\n'
comment|"#             don't worry about this case because the minuscule"
nl|'\n'
comment|"#             window where the ip is on both hosts shouldn't cause"
nl|'\n'
comment|'#             any problems.'
nl|'\n'
indent|'            '
name|'floating'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'floating'
op|'.'
name|'fixed_ip'
newline|'\n'
name|'if'
name|'not'
name|'fixed'
op|':'
newline|'\n'
comment|'# NOTE(vish): ip was already disassociated'
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'interface'
op|':'
newline|'\n'
comment|'# go go driver time'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'remove_floating_ip'
op|'('
name|'address'
op|','
name|'fixed'
op|'.'
name|'address'
op|','
nl|'\n'
name|'interface'
op|','
name|'fixed'
op|'.'
name|'network'
op|')'
newline|'\n'
dedent|''
name|'payload'
op|'='
name|'dict'
op|'('
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_ip'
op|'='
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
nl|'\n'
string|"'network.floating_ip.disassociate'"
op|','
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'do_disassociate'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotFound'
op|')'
newline|'\n'
DECL|member|get_floating_ip
name|'def'
name|'get_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating IP as a dict."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi.'
nl|'\n'
name|'return'
name|'dict'
op|'('
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'context'
op|','
name|'id'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_floating_pools
dedent|''
name|'def'
name|'get_floating_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of floating pools."""'
newline|'\n'
comment|'# NOTE(maurosr) This method should be removed in future, replaced by'
nl|'\n'
comment|'# get_floating_ip_pools. See bug #1091668'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'get_floating_ip_pools'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ip_pools
dedent|''
name|'def'
name|'get_floating_ip_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of floating ip pools."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi.'
nl|'\n'
name|'pools'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_pool_names'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
op|'['
name|'dict'
op|'('
name|'name'
op|'='
name|'name'
op|')'
name|'for'
name|'name'
name|'in'
name|'pools'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ip_by_address
dedent|''
name|'def'
name|'get_floating_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a floating IP as a dict."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi.'
nl|'\n'
comment|"# NOTE(danms): Not converting to objects since it's not used"
nl|'\n'
name|'return'
name|'dict'
op|'('
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_project
dedent|''
name|'def'
name|'get_floating_ips_by_project'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the floating IPs allocated to a project."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi.'
nl|'\n'
comment|"# NOTE(danms): Not converting to objects since it's not used"
nl|'\n'
name|'ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_all_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'return'
op|'['
name|'dict'
op|'('
name|'ip'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
name|'for'
name|'ip'
name|'in'
name|'ips'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_floating_ips_by_fixed_address
dedent|''
name|'def'
name|'get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the floating IPs associated with a fixed_address."""'
newline|'\n'
comment|"# NOTE(vish): This is no longer used but can't be removed until"
nl|'\n'
comment|'#             we major version the network_rpcapi.'
nl|'\n'
comment|"# NOTE(danms): Not converting to objects since it's not used"
nl|'\n'
name|'floating_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_fixed_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
name|'return'
op|'['
name|'floating_ip'
op|'['
string|"'address'"
op|']'
name|'for'
name|'floating_ip'
name|'in'
name|'floating_ips'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_is_stale_floating_ip_address
dedent|''
name|'def'
name|'_is_stale_floating_ip_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Forbidden'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
name|'if'
name|'floating_ip'
op|'.'
name|'get'
op|'('
string|"'fixed_ip_id'"
op|')'
name|'else'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|migrate_instance_start
dedent|''
name|'def'
name|'migrate_instance_start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_addresses'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# We only care if floating_addresses are provided and we're"
nl|'\n'
comment|'# switching hosts'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'floating_addresses'
name|'or'
op|'('
name|'source'
name|'and'
name|'source'
op|'=='
name|'dest'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Starting migration network for instance %s"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'address'
name|'in'
name|'floating_addresses'
op|':'
newline|'\n'
indent|'            '
name|'floating_ip'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_stale_floating_ip_address'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Floating ip address |%(address)s| no longer "'
nl|'\n'
string|'"belongs to instance %(instance_uuid)s. Will not "'
nl|'\n'
string|'"migrate it "'
op|')'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'interface'
op|'='
name|'CONF'
op|'.'
name|'public_interface'
name|'or'
name|'floating_ip'
op|'.'
name|'interface'
newline|'\n'
name|'fixed_ip'
op|'='
name|'floating_ip'
op|'.'
name|'fixed_ip'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'remove_floating_ip'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'interface'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ivoks): Destroy conntrack entries on source compute'
nl|'\n'
comment|'# host.'
nl|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'clean_conntrack'
op|'('
name|'fixed_ip'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(wenjianhn): Make this address will not be bound to public'
nl|'\n'
comment|'# interface when restarts nova-network on dest compute node'
nl|'\n'
name|'floating_ip'
op|'.'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'floating_ip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_instance_finish
dedent|''
dedent|''
name|'def'
name|'migrate_instance_finish'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'floating_addresses'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# We only care if floating_addresses are provided and we're"
nl|'\n'
comment|'# switching hosts'
nl|'\n'
indent|'        '
name|'if'
name|'host'
name|'and'
name|'not'
name|'dest'
op|':'
newline|'\n'
indent|'            '
name|'dest'
op|'='
name|'host'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'floating_addresses'
name|'or'
op|'('
name|'source'
name|'and'
name|'source'
op|'=='
name|'dest'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Finishing migration network for instance %s"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'address'
name|'in'
name|'floating_addresses'
op|':'
newline|'\n'
indent|'            '
name|'floating_ip'
op|'='
name|'floating_ip_obj'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_stale_floating_ip_address'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Floating ip address |%(address)s| no longer "'
nl|'\n'
string|'"belongs to instance %(instance_uuid)s. Will not"'
nl|'\n'
string|'"setup it."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'floating_ip'
op|'.'
name|'host'
op|'='
name|'dest'
newline|'\n'
name|'floating_ip'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'interface'
op|'='
name|'CONF'
op|'.'
name|'public_interface'
name|'or'
name|'floating_ip'
op|'.'
name|'interface'
newline|'\n'
name|'fixed_ip'
op|'='
name|'floating_ip'
op|'.'
name|'fixed_ip'
newline|'\n'
name|'self'
op|'.'
name|'l3driver'
op|'.'
name|'add_floating_ip'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'address'
op|','
nl|'\n'
name|'interface'
op|','
nl|'\n'
name|'fixed_ip'
op|'.'
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prepare_domain_entry
dedent|''
dedent|''
name|'def'
name|'_prepare_domain_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domainref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'scope'
op|'='
name|'domainref'
op|'.'
name|'scope'
newline|'\n'
name|'if'
name|'scope'
op|'=='
string|"'private'"
op|':'
newline|'\n'
indent|'            '
name|'this_domain'
op|'='
op|'{'
string|"'domain'"
op|':'
name|'domainref'
op|'.'
name|'domain'
op|','
nl|'\n'
string|"'scope'"
op|':'
name|'scope'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
name|'domainref'
op|'.'
name|'availability_zone'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'this_domain'
op|'='
op|'{'
string|"'domain'"
op|':'
name|'domainref'
op|'.'
name|'domain'
op|','
nl|'\n'
string|"'scope'"
op|':'
name|'scope'
op|','
nl|'\n'
string|"'project'"
op|':'
name|'domainref'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'this_domain'
newline|'\n'
nl|'\n'
DECL|member|get_dns_domains
dedent|''
name|'def'
name|'get_dns_domains'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domains'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'domain_list'
op|'='
name|'dns_domain_obj'
op|'.'
name|'DNSDomainList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'floating_driver_domain_list'
op|'='
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'get_domains'
op|'('
op|')'
newline|'\n'
name|'instance_driver_domain_list'
op|'='
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'get_domains'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'dns_domain'
name|'in'
name|'domain_list'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'dns_domain'
op|'.'
name|'domain'
name|'in'
name|'floating_driver_domain_list'
name|'or'
nl|'\n'
name|'dns_domain'
op|'.'
name|'domain'
name|'in'
name|'instance_driver_domain_list'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'domain_entry'
op|'='
name|'self'
op|'.'
name|'_prepare_domain_entry'
op|'('
name|'context'
op|','
nl|'\n'
name|'dns_domain'
op|')'
newline|'\n'
name|'if'
name|'domain_entry'
op|':'
newline|'\n'
indent|'                        '
name|'domains'
op|'.'
name|'append'
op|'('
name|'domain_entry'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Database inconsistency: DNS domain |%s| is '"
nl|'\n'
string|"'registered in the Nova db but not visible to '"
nl|'\n'
string|"'either the floating or instance DNS driver. It '"
nl|'\n'
string|"'will be ignored.'"
op|')'
op|','
name|'dns_domain'
op|'.'
name|'domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'domains'
newline|'\n'
nl|'\n'
DECL|member|add_dns_entry
dedent|''
name|'def'
name|'add_dns_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'name'
op|','
name|'dns_type'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'create_entry'
op|'('
name|'name'
op|','
name|'address'
op|','
nl|'\n'
name|'dns_type'
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify_dns_entry
dedent|''
name|'def'
name|'modify_dns_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'name'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'modify_address'
op|'('
name|'name'
op|','
name|'address'
op|','
nl|'\n'
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_dns_entry
dedent|''
name|'def'
name|'delete_dns_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'delete_entry'
op|'('
name|'name'
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_all_entries_for_ip
dedent|''
name|'def'
name|'_delete_all_entries_for_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domain_list'
op|'='
name|'self'
op|'.'
name|'get_dns_domains'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'domain'
name|'in'
name|'domain_list'
op|':'
newline|'\n'
indent|'            '
name|'names'
op|'='
name|'self'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'domain'
op|'['
string|"'domain'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'delete_dns_entry'
op|'('
name|'context'
op|','
name|'name'
op|','
name|'domain'
op|'['
string|"'domain'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_dns_entries_by_address
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'get_entries_by_address'
op|'('
name|'address'
op|','
nl|'\n'
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_dns_entries_by_name
dedent|''
name|'def'
name|'get_dns_entries_by_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'get_entries_by_name'
op|'('
name|'name'
op|','
nl|'\n'
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_private_dns_domain
dedent|''
name|'def'
name|'create_private_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domain'
op|','
name|'av_zone'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dns_domain_obj'
op|'.'
name|'DNSDomain'
op|'.'
name|'register_for_zone'
op|'('
name|'context'
op|','
name|'domain'
op|','
name|'av_zone'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance_dns_manager'
op|'.'
name|'create_domain'
op|'('
name|'domain'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FloatingIpDNSExists'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Domain |%(domain)s| already exists, '"
nl|'\n'
string|"'changing zone to |%(av_zone)s|.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'domain'"
op|':'
name|'domain'
op|','
string|"'av_zone'"
op|':'
name|'av_zone'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_public_dns_domain
dedent|''
dedent|''
name|'def'
name|'create_public_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domain'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dns_domain_obj'
op|'.'
name|'DNSDomain'
op|'.'
name|'register_for_project'
op|'('
name|'context'
op|','
name|'domain'
op|','
name|'project'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'create_domain'
op|'('
name|'domain'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FloatingIpDNSExists'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Domain |%(domain)s| already exists, '"
nl|'\n'
string|"'changing project to |%(project)s|.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'domain'"
op|':'
name|'domain'
op|','
string|"'project'"
op|':'
name|'project'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_dns_domain
dedent|''
dedent|''
name|'def'
name|'delete_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dns_domain_obj'
op|'.'
name|'DNSDomain'
op|'.'
name|'delete_by_domain'
op|'('
name|'context'
op|','
name|'domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'floating_dns_manager'
op|'.'
name|'delete_domain'
op|'('
name|'domain'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalManager
dedent|''
dedent|''
name|'class'
name|'LocalManager'
op|'('
name|'base'
op|'.'
name|'Base'
op|','
name|'FloatingIP'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LocalManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(vish): setting the host to none ensures that the actual'
nl|'\n'
comment|'#             l3driver commands for l3 are done via rpc.'
nl|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'servicegroup_api'
op|'='
name|'servicegroup'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'='
name|'network_rpcapi'
op|'.'
name|'NetworkAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'floating_dns_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'floating_ip_dns_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_dns_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'instance_dns_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'='
name|'rpc'
op|'.'
name|'get_notifier'
op|'('
string|"'network'"
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nModel Classes for network control, including VLANs, DHCP, and IP allocation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'IPy'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'datastore'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
name|'as'
name|'nova_exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'networks_path'"
op|','
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'../networks'"
op|')'
op|','
nl|'\n'
string|"'Location to keep network config files'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'public_vlan'"
op|','
number|'1'
op|','
string|"'VLAN for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_interface'"
op|','
string|"'vlan1'"
op|','
nl|'\n'
string|"'Interface for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'bridge_dev'"
op|','
string|"'eth1'"
op|','
nl|'\n'
string|"'network device for bridges'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_start'"
op|','
number|'100'
op|','
string|"'First VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_end'"
op|','
number|'4093'
op|','
string|"'Last VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'network_size'"
op|','
number|'256'
op|','
nl|'\n'
string|"'Number of addresses in each private subnet'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_range'"
op|','
string|"'4.4.4.0/24'"
op|','
string|"'Public IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'private_range'"
op|','
string|"'10.0.0.0/8'"
op|','
string|"'Private IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cnt_vpn_clients'"
op|','
number|'5'
op|','
nl|'\n'
string|"'Number of addresses reserved for vpn clients'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cloudpipe_start_port'"
op|','
number|'12000'
op|','
nl|'\n'
string|"'Starting port for mapped CloudPipe external ports'"
op|')'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Vlan
name|'class'
name|'Vlan'
op|'('
name|'datastore'
op|'.'
name|'BasicModel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tracks vlans assigned to project it the datastore"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'project'
op|','
name|'vlan'
op|')'
op|':'
comment|'# pylint: disable=W0231'
newline|'\n'
indent|'        '
string|'"""\n        Since we don\'t want to try and find a vlan by its identifier,\n        but by a project id, we don\'t call super-init.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
name|'project'
newline|'\n'
name|'self'
op|'.'
name|'vlan_id'
op|'='
name|'vlan'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Datastore identifier"""'
newline|'\n'
name|'return'
string|'"%s:%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'project_id'
op|','
name|'self'
op|'.'
name|'vlan_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'project'
op|','
name|'vlan'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a Vlan object"""'
newline|'\n'
name|'instance'
op|'='
name|'cls'
op|'('
name|'project'
op|','
name|'vlan'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
op|'@'
name|'datastore'
op|'.'
name|'absorb_connection_error'
newline|'\n'
DECL|member|lookup
name|'def'
name|'lookup'
op|'('
name|'cls'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns object by project if it exists in datastore or None"""'
newline|'\n'
name|'set_name'
op|'='
name|'cls'
op|'.'
name|'_redis_set_name'
op|'('
name|'cls'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'vlan'
op|'='
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hget'
op|'('
name|'set_name'
op|','
name|'project'
op|')'
newline|'\n'
name|'if'
name|'vlan'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'('
name|'project'
op|','
name|'vlan'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
op|'@'
name|'datastore'
op|'.'
name|'absorb_connection_error'
newline|'\n'
DECL|member|dict_by_project
name|'def'
name|'dict_by_project'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A hash of project:vlan"""'
newline|'\n'
name|'set_name'
op|'='
name|'cls'
op|'.'
name|'_redis_set_name'
op|'('
name|'cls'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'return'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
name|'set_name'
op|')'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
op|'@'
name|'datastore'
op|'.'
name|'absorb_connection_error'
newline|'\n'
DECL|member|dict_by_vlan
name|'def'
name|'dict_by_vlan'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A hash of vlan:project"""'
newline|'\n'
name|'set_name'
op|'='
name|'cls'
op|'.'
name|'_redis_set_name'
op|'('
name|'cls'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'retvals'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'hashset'
op|'='
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
name|'set_name'
op|')'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'val'
op|')'
name|'in'
name|'hashset'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'retvals'
op|'['
name|'val'
op|']'
op|'='
name|'key'
newline|'\n'
dedent|''
name|'return'
name|'retvals'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
op|'@'
name|'datastore'
op|'.'
name|'absorb_connection_error'
newline|'\n'
DECL|member|all
name|'def'
name|'all'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'set_name'
op|'='
name|'cls'
op|'.'
name|'_redis_set_name'
op|'('
name|'cls'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'elements'
op|'='
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
name|'set_name'
op|')'
newline|'\n'
name|'for'
name|'project'
name|'in'
name|'elements'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'cls'
op|'('
name|'project'
op|','
name|'elements'
op|'['
name|'project'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'datastore'
op|'.'
name|'absorb_connection_error'
newline|'\n'
DECL|member|save
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Vlan saves state into a giant hash named "vlans", with keys of\n        project_id and value of vlan number.  Therefore, we skip the\n        default way of saving into "vlan:ID" and adding to a set of "vlans".\n        """'
newline|'\n'
name|'set_name'
op|'='
name|'self'
op|'.'
name|'_redis_set_name'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hset'
op|'('
name|'set_name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'vlan_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'datastore'
op|'.'
name|'absorb_connection_error'
newline|'\n'
DECL|member|destroy
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes the object from the datastore"""'
newline|'\n'
name|'set_name'
op|'='
name|'self'
op|'.'
name|'_redis_set_name'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hdel'
op|'('
name|'set_name'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|subnet
dedent|''
name|'def'
name|'subnet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a string containing the subnet"""'
newline|'\n'
name|'vlan'
op|'='
name|'int'
op|'('
name|'self'
op|'.'
name|'vlan_id'
op|')'
newline|'\n'
name|'network'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'FLAGS'
op|'.'
name|'private_range'
op|')'
newline|'\n'
name|'start'
op|'='
op|'('
name|'vlan'
op|'-'
name|'FLAGS'
op|'.'
name|'vlan_start'
op|')'
op|'*'
name|'FLAGS'
op|'.'
name|'network_size'
newline|'\n'
comment|'# minus one for the gateway.'
nl|'\n'
name|'return'
string|'"%s-%s"'
op|'%'
op|'('
name|'network'
op|'['
name|'start'
op|']'
op|','
nl|'\n'
name|'network'
op|'['
name|'start'
op|'+'
name|'FLAGS'
op|'.'
name|'network_size'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Address
dedent|''
dedent|''
name|'class'
name|'Address'
op|'('
name|'datastore'
op|'.'
name|'BasicModel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represents a fixed ip in the datastore"""'
newline|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
string|'"address"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'address'
newline|'\n'
name|'super'
op|'('
name|'Address'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|default_state
dedent|''
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'address'"
op|':'
name|'self'
op|'.'
name|'address'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
comment|'# pylint: disable=R0913'
nl|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'address'
op|','
name|'mac'
op|','
name|'hostname'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates an Address object"""'
newline|'\n'
name|'addr'
op|'='
name|'cls'
op|'('
name|'address'
op|')'
newline|'\n'
name|'addr'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'user_id'
newline|'\n'
name|'addr'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'project_id'
newline|'\n'
name|'addr'
op|'['
string|"'mac'"
op|']'
op|'='
name|'mac'
newline|'\n'
name|'if'
name|'hostname'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
string|'"ip-%s"'
op|'%'
name|'address'
op|'.'
name|'replace'
op|'('
string|"'.'"
op|','
string|"'-'"
op|')'
newline|'\n'
dedent|''
name|'addr'
op|'['
string|"'hostname'"
op|']'
op|'='
name|'hostname'
newline|'\n'
name|'addr'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'network_id'
newline|'\n'
name|'addr'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'addr'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'is_new'
op|'='
name|'self'
op|'.'
name|'is_new_record'
op|'('
op|')'
newline|'\n'
name|'success'
op|'='
name|'super'
op|'('
name|'Address'
op|','
name|'self'
op|')'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'if'
name|'success'
name|'and'
name|'is_new'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'associate_with'
op|'('
string|'"network"'
op|','
name|'self'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unassociate_with'
op|'('
string|'"network"'
op|','
name|'self'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'Address'
op|','
name|'self'
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PublicAddress
dedent|''
dedent|''
name|'class'
name|'PublicAddress'
op|'('
name|'Address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represents an elastic ip in the datastore"""'
newline|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
string|'"address"'
newline|'\n'
nl|'\n'
DECL|member|default_state
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'address'"
op|':'
name|'self'
op|'.'
name|'address'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'private_ip'"
op|':'
string|"'available'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# CLEANUP:'
nl|'\n'
comment|'# TODO(ja): does vlanpool "keeper" need to know the min/max -'
nl|'\n'
comment|"#           shouldn't FLAGS always win?"
nl|'\n'
DECL|class|BaseNetwork
dedent|''
dedent|''
name|'class'
name|'BaseNetwork'
op|'('
name|'datastore'
op|'.'
name|'BasicModel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements basic logic for allocating ips in a network"""'
newline|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
string|"'network'"
newline|'\n'
DECL|variable|address_class
name|'address_class'
op|'='
name|'Address'
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Datastore identifier"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_id'
newline|'\n'
nl|'\n'
DECL|member|default_state
dedent|''
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Default values for new objects"""'
newline|'\n'
name|'return'
op|'{'
string|"'network_id'"
op|':'
name|'self'
op|'.'
name|'network_id'
op|','
string|"'network_str'"
op|':'
name|'self'
op|'.'
name|'network_str'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
comment|'# pylint: disable=R0913'
nl|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'security_group'
op|','
name|'vlan'
op|','
name|'network_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a BaseNetwork object"""'
newline|'\n'
name|'network_id'
op|'='
string|'"%s:%s"'
op|'%'
op|'('
name|'project_id'
op|','
name|'security_group'
op|')'
newline|'\n'
name|'net'
op|'='
name|'cls'
op|'('
name|'network_id'
op|','
name|'network_str'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'user_id'
newline|'\n'
name|'net'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'project_id'
newline|'\n'
name|'net'
op|'['
string|'"vlan"'
op|']'
op|'='
name|'vlan'
newline|'\n'
name|'net'
op|'['
string|'"bridge_name"'
op|']'
op|'='
string|'"br%s"'
op|'%'
name|'vlan'
newline|'\n'
name|'net'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'net'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_id'
op|','
name|'network_str'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network_id'
op|'='
name|'network_id'
newline|'\n'
name|'self'
op|'.'
name|'network_str'
op|'='
name|'network_str'
newline|'\n'
name|'super'
op|'('
name|'BaseNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|network
name|'def'
name|'network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a string representing the network"""'
newline|'\n'
name|'return'
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'self'
op|'['
string|"'network_str'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|netmask
name|'def'
name|'netmask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the netmask of this network"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network'
op|'.'
name|'netmask'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|gateway
name|'def'
name|'gateway'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the network gateway address"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|broadcast
name|'def'
name|'broadcast'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the network broadcast address"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network'
op|'.'
name|'broadcast'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|bridge_name
name|'def'
name|'bridge_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the bridge associated with this network"""'
newline|'\n'
name|'return'
string|'"br%s"'
op|'%'
op|'('
name|'self'
op|'['
string|'"vlan"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|user
name|'def'
name|'user'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the user associated with this network"""'
newline|'\n'
name|'return'
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_user'
op|'('
name|'self'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|project
name|'def'
name|'project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the project associated with this network"""'
newline|'\n'
name|'return'
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'self'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# pylint: disable=R0913'
nl|'\n'
DECL|member|_add_host
dedent|''
name|'def'
name|'_add_host'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'ip_address'
op|','
name|'mac'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a host to the datastore"""'
newline|'\n'
name|'Address'
op|'.'
name|'create'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'ip_address'
op|','
nl|'\n'
name|'mac'
op|','
name|'hostname'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rem_host
dedent|''
name|'def'
name|'_rem_host'
op|'('
name|'self'
op|','
name|'ip_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a host from the datastore"""'
newline|'\n'
name|'Address'
op|'('
name|'ip_address'
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|assigned
name|'def'
name|'assigned'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of all assigned addresses"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'address_class'
op|'.'
name|'associated_keys'
op|'('
string|"'network'"
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|assigned_objs
name|'def'
name|'assigned_objs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of all assigned addresses as objects"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'address_class'
op|'.'
name|'associated_to'
op|'('
string|"'network'"
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_address
dedent|''
name|'def'
name|'get_address'
op|'('
name|'self'
op|','
name|'ip_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a specific ip as an object"""'
newline|'\n'
name|'if'
name|'ip_address'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'address_class'
op|'('
name|'ip_address'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|available
name|'def'
name|'available'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of all available addresses in the network"""'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'num_bottom_reserved_ips'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|'-'
name|'self'
op|'.'
name|'num_top_reserved_ips'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'address'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'address'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|num_bottom_reserved_ips
name|'def'
name|'num_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns number of ips reserved at the bottom of the range"""'
newline|'\n'
name|'return'
number|'2'
comment|'# Network, Gateway'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|num_top_reserved_ips
name|'def'
name|'num_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns number of ips reserved at the top of the range"""'
newline|'\n'
name|'return'
number|'1'
comment|'# Broadcast'
newline|'\n'
nl|'\n'
DECL|member|allocate_ip
dedent|''
name|'def'
name|'allocate_ip'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'mac'
op|','
name|'hostname'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocates an ip to a mac address"""'
newline|'\n'
name|'for'
name|'address'
name|'in'
name|'self'
op|'.'
name|'available'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Allocating IP %s to %s"'
op|','
name|'address'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_host'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'address'
op|','
name|'mac'
op|','
name|'hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NoMoreAddresses'
op|'('
string|'"Project %s with network %s"'
op|'%'
nl|'\n'
op|'('
name|'project_id'
op|','
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lease_ip
dedent|''
name|'def'
name|'lease_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when DHCP lease is activated"""'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Leasing allocated IP %s"'
op|','
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_ip
dedent|''
name|'def'
name|'release_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when DHCP lease expires\n\n        Removes the ip from the assigned list"""'
newline|'\n'
name|'if'
name|'not'
name|'ip_str'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_rem_host'
op|'('
name|'ip_str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'ip_str'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Releasing IP %s"'
op|','
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_ip
dedent|''
name|'def'
name|'deallocate_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deallocates an allocated ip"""'
newline|'\n'
comment|'# NOTE(vish): Perhaps we should put the ip into an intermediate'
nl|'\n'
comment|'#             state, so we know that we are pending waiting for'
nl|'\n'
comment|'#             dnsmasq to confirm that it has been released.'
nl|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Deallocating allocated IP %s"'
op|','
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up network.  Implemented in subclasses"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tear down network.  Implemented in subclasses"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BridgedNetwork
dedent|''
dedent|''
name|'class'
name|'BridgedNetwork'
op|'('
name|'BaseNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Virtual Network that can express itself to create a vlan and\n    a bridge (with or without an IP address/netmask/gateway)\n\n    properties:\n        bridge_name - string (example value: br42)\n        vlan - integer (example value: 42)\n        bridge_dev - string (example: eth0)\n        bridge_gets_ip - boolean used during bridge creation\n\n        if bridge_gets_ip then network address for bridge uses the properties:\n            gateway\n            broadcast\n            netmask\n    """'
newline|'\n'
nl|'\n'
DECL|variable|bridge_gets_ip
name|'bridge_gets_ip'
op|'='
name|'False'
newline|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
string|"'network'"
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_network_for_project
name|'def'
name|'get_network_for_project'
op|'('
name|'cls'
op|','
nl|'\n'
name|'user_id'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'security_group'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns network for a given project"""'
newline|'\n'
name|'vlan'
op|'='
name|'get_vlan_for_project'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'network_str'
op|'='
name|'vlan'
op|'.'
name|'subnet'
op|'('
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'create'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'security_group'
op|','
name|'vlan'
op|'.'
name|'vlan_id'
op|','
nl|'\n'
name|'network_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BridgedNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'bridge_dev'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'bridge_dev'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BridgedNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'vlan_create'
op|'('
name|'self'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'bridge_create'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DHCPNetwork
dedent|''
dedent|''
name|'class'
name|'DHCPNetwork'
op|'('
name|'BridgedNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Network supporting DHCP"""'
newline|'\n'
DECL|variable|bridge_gets_ip
name|'bridge_gets_ip'
op|'='
name|'True'
newline|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
string|"'network'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|num_bottom_reserved_ips
name|'def'
name|'num_bottom_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# For cloudpipe'
nl|'\n'
indent|'        '
name|'return'
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'num_bottom_reserved_ips'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|num_top_reserved_ips
name|'def'
name|'num_top_reserved_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'num_top_reserved_ips'
op|'+'
name|'FLAGS'
op|'.'
name|'cnt_vpn_clients'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|dhcp_listen_address
name|'def'
name|'dhcp_listen_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Address where dhcp server should listen"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'gateway'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|dhcp_range_start
name|'def'
name|'dhcp_range_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starting address dhcp server should use"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network'
op|'['
name|'self'
op|'.'
name|'num_bottom_reserved_ips'
op|']'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'assigned'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting dnsmasq server for network with vlan %s"'
op|','
nl|'\n'
name|'self'
op|'['
string|"'vlan'"
op|']'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'start_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Not launching dnsmasq: no hosts."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'express_vpn'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_vpn_ip
dedent|''
name|'def'
name|'allocate_vpn_ip'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'mac'
op|','
name|'hostname'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocates the reserved ip to a vpn instance"""'
newline|'\n'
name|'address'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_host'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'address'
op|','
name|'mac'
op|','
name|'hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|express_vpn
dedent|''
name|'def'
name|'express_vpn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets up routing rules for vpn"""'
newline|'\n'
name|'private_ip'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p udp --dport 1194 -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
nl|'\n'
string|'"PREROUTING -t nat -d %s -p udp --dport %s -j DNAT --to %s:1194"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'project'
op|'.'
name|'vpn_ip'
op|','
name|'self'
op|'.'
name|'project'
op|'.'
name|'vpn_port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# if this is the last address, stop dns'
nl|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'assigned'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'stop_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'start_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_PORTS
dedent|''
dedent|''
dedent|''
name|'DEFAULT_PORTS'
op|'='
op|'['
op|'('
string|'"tcp"'
op|','
number|'80'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'22'
op|')'
op|','
op|'('
string|'"udp"'
op|','
number|'1194'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'443'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PublicNetworkController
name|'class'
name|'PublicNetworkController'
op|'('
name|'BaseNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handles elastic ips"""'
newline|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
string|"'network'"
newline|'\n'
DECL|variable|address_class
name|'address_class'
op|'='
name|'PublicAddress'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network_id'
op|'='
string|'"public:default"'
newline|'\n'
name|'super'
op|'('
name|'PublicNetworkController'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'network_id'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'public_range'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'user_id'"
op|']'
op|'='
string|'"public"'
newline|'\n'
name|'self'
op|'['
string|"'project_id'"
op|']'
op|'='
string|'"public"'
newline|'\n'
name|'self'
op|'['
string|'"create_time"'
op|']'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'['
string|'"vlan"'
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'public_vlan'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_ip
dedent|''
name|'def'
name|'deallocate_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): cleanup is now done on release by the parent class'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'release_ip'
op|'('
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|','
name|'private_ip'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates a public ip to a private ip and instance id"""'
newline|'\n'
name|'if'
name|'not'
name|'public_ip'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
comment|'# TODO(josh): Keep an index going both ways'
nl|'\n'
dedent|''
name|'for'
name|'addr'
name|'in'
name|'self'
op|'.'
name|'assigned_objs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
name|'None'
op|')'
op|'=='
name|'private_ip'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'AddressAlreadyAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'addr'
op|'='
name|'self'
op|'.'
name|'get_address'
op|'('
name|'public_ip'
op|')'
newline|'\n'
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
string|"'available'"
op|')'
op|'!='
string|"'available'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressAlreadyAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'addr'
op|'['
string|"'private_ip'"
op|']'
op|'='
name|'private_ip'
newline|'\n'
name|'addr'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'instance_id'
newline|'\n'
name|'addr'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a public ip with its private ip"""'
newline|'\n'
name|'if'
name|'not'
name|'public_ip'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'addr'
op|'='
name|'self'
op|'.'
name|'get_address'
op|'('
name|'public_ip'
op|')'
newline|'\n'
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
string|"'available'"
op|')'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
name|'addr'
op|'['
string|"'private_ip'"
op|']'
op|'='
string|"'available'"
newline|'\n'
name|'addr'
op|'['
string|"'instance_id'"
op|']'
op|'='
string|"'available'"
newline|'\n'
name|'addr'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'address'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'addresses'
op|'='
op|'['
name|'self'
op|'.'
name|'get_address'
op|'('
name|'address'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'addresses'
op|'='
name|'self'
op|'.'
name|'assigned_objs'
newline|'\n'
dedent|''
name|'for'
name|'addr'
name|'in'
name|'addresses'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
string|"'available'"
op|')'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'public_ip'
op|'='
name|'addr'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'private_ip'
op|'='
name|'addr'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'bind_public_ip'
op|'('
name|'public_ip'
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"PREROUTING -t nat -d %s -j DNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'public_ip'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"POSTROUTING -t nat -s %s -j SNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'public_ip'
op|')'
op|')'
newline|'\n'
comment|'# TODO(joshua): Get these from the secgroup datastore entries'
nl|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p icmp -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'protocol'
op|','
name|'port'
op|')'
name|'in'
name|'DEFAULT_PORTS'
op|':'
newline|'\n'
indent|'                '
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
nl|'\n'
string|'"FORWARD -d %s -p %s --dport %s -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'protocol'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
dedent|''
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'self'
op|'.'
name|'get_address'
op|'('
name|'address'
op|')'
newline|'\n'
name|'private_ip'
op|'='
name|'addr'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'unbind_public_ip'
op|'('
name|'address'
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"PREROUTING -t nat -d %s -j DNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'address'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"POSTROUTING -t nat -s %s -j SNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"FORWARD -d %s -p icmp -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'protocol'
op|','
name|'port'
op|')'
name|'in'
name|'DEFAULT_PORTS'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"FORWARD -d %s -p %s --dport %s -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'protocol'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# FIXME(todd): does this present a race condition, or is there some'
nl|'\n'
comment|'#              piece of architecture that mitigates it (only one queue'
nl|'\n'
comment|'#              listener per net)?'
nl|'\n'
DECL|function|get_vlan_for_project
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vlan_for_project'
op|'('
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allocate vlan IDs to individual users"""'
newline|'\n'
name|'vlan'
op|'='
name|'Vlan'
op|'.'
name|'lookup'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'if'
name|'vlan'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vlan'
newline|'\n'
dedent|''
name|'known_vlans'
op|'='
name|'Vlan'
op|'.'
name|'dict_by_vlan'
op|'('
op|')'
newline|'\n'
name|'for'
name|'vnum'
name|'in'
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'vlan_start'
op|','
name|'FLAGS'
op|'.'
name|'vlan_end'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vstr'
op|'='
name|'str'
op|'('
name|'vnum'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vstr'
name|'in'
name|'known_vlans'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Vlan'
op|'.'
name|'create'
op|'('
name|'project_id'
op|','
name|'vnum'
op|')'
newline|'\n'
dedent|''
name|'old_project_id'
op|'='
name|'known_vlans'
op|'['
name|'vstr'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'old_project_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vlan'
op|'='
name|'Vlan'
op|'.'
name|'lookup'
op|'('
name|'old_project_id'
op|')'
newline|'\n'
name|'if'
name|'vlan'
op|':'
newline|'\n'
comment|"# NOTE(todd): This doesn't check for vlan id match, because"
nl|'\n'
comment|'#             it seems to be assumed that vlan<=>project is'
nl|'\n'
comment|'#             always a 1:1 mapping.  It could be made way'
nl|'\n'
comment|"#             sexier if it didn't fight against the way"
nl|'\n'
comment|'#             BasicModel worked and used associate_with'
nl|'\n'
comment|'#             to build connections to projects.'
nl|'\n'
comment|'# NOTE(josh): This is here because we want to make sure we'
nl|'\n'
comment|"#             don't orphan any VLANs.  It is basically"
nl|'\n'
comment|'#             garbage collection for after projects abandoned'
nl|'\n'
comment|'#             their reference.'
nl|'\n'
indent|'                '
name|'vlan'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'vlan'
op|'.'
name|'project_id'
op|'='
name|'project_id'
newline|'\n'
name|'vlan'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'vlan'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'Vlan'
op|'.'
name|'create'
op|'('
name|'project_id'
op|','
name|'vnum'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
string|'"Out of VLANs"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_project_network
dedent|''
name|'def'
name|'get_project_network'
op|'('
name|'project_id'
op|','
name|'security_group'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets a project\'s private network, allocating one if needed"""'
newline|'\n'
name|'project'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'project'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'nova_exception'
op|'.'
name|'NotFound'
op|'('
string|'"Project %s doesn\'t exist."'
op|'%'
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'manager_id'
op|'='
name|'project'
op|'.'
name|'project_manager_id'
newline|'\n'
name|'return'
name|'DHCPNetwork'
op|'.'
name|'get_network_for_project'
op|'('
name|'manager_id'
op|','
nl|'\n'
name|'project'
op|'.'
name|'id'
op|','
nl|'\n'
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_network_by_address
dedent|''
name|'def'
name|'get_network_by_address'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the network for a given private ip"""'
newline|'\n'
name|'address_record'
op|'='
name|'Address'
op|'.'
name|'lookup'
op|'('
name|'address'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'address_record'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'get_project_network'
op|'('
name|'address_record'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_network_by_interface
dedent|''
name|'def'
name|'get_network_by_interface'
op|'('
name|'iface'
op|','
name|'security_group'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the network for a given interface"""'
newline|'\n'
name|'vlan'
op|'='
name|'iface'
op|'.'
name|'rpartition'
op|'('
string|'"br"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'project_id'
op|'='
name|'Vlan'
op|'.'
name|'dict_by_vlan'
op|'('
op|')'
op|'.'
name|'get'
op|'('
name|'vlan'
op|')'
newline|'\n'
name|'return'
name|'get_project_network'
op|'('
name|'project_id'
op|','
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_public_ip_for_instance
dedent|''
name|'def'
name|'get_public_ip_for_instance'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the public ip for a given instance"""'
newline|'\n'
comment|"# FIXME(josh): this should be a lookup - iteration won't scale"
nl|'\n'
name|'for'
name|'address_record'
name|'in'
name|'PublicAddress'
op|'.'
name|'all'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'address_record'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|','
string|"'available'"
op|')'
op|'=='
name|'instance_id'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address_record'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'base_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'floating_ips'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'rpcapi'
name|'as'
name|'network_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_check_policy
name|'def'
name|'wrap_check_policy'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check policy corresponding to the wrapped methods prior to execution."""'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'action'
op|'='
name|'func'
op|'.'
name|'__name__'
newline|'\n'
name|'check_policy'
op|'('
name|'context'
op|','
name|'action'
op|')'
newline|'\n'
name|'return'
name|'func'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_policy
dedent|''
name|'def'
name|'check_policy'
op|'('
name|'context'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'target'
op|'='
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'_action'
op|'='
string|"'network:%s'"
op|'%'
name|'action'
newline|'\n'
name|'policy'
op|'.'
name|'enforce'
op|'('
name|'context'
op|','
name|'_action'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|API
dedent|''
name|'class'
name|'API'
op|'('
name|'base_api'
op|'.'
name|'NetworkAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""API for doing networking via the nova-network network manager.\n\n    This is a pluggable module - other implementations do networking via\n    other services (such as Neutron).\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network_rpcapi'
op|'='
name|'network_rpcapi'
op|'.'
name|'NetworkAPI'
op|'('
op|')'
newline|'\n'
name|'helper'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
newline|'\n'
comment|'# NOTE(vish): this local version of floating_manager has to convert'
nl|'\n'
comment|"#             ClientExceptions back since they aren't going over rpc."
nl|'\n'
name|'self'
op|'.'
name|'floating_manager'
op|'='
name|'helper'
op|'('
name|'floating_ips'
op|'.'
name|'LocalManager'
op|'('
op|')'
op|')'
newline|'\n'
name|'super'
op|'('
name|'API'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_all
name|'def'
name|'get_all'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all the networks.\n\n        If it is an admin user then api will return all the\n        networks. If it is a normal user and nova Flat or FlatDHCP\n        networking is being used then api will return all\n        networks. Otherwise api will only return the networks which\n        belong to the user\'s project.\n        """'
newline|'\n'
name|'if'
string|'"nova.network.manager.Flat"'
name|'in'
name|'CONF'
op|'.'
name|'network_manager'
op|':'
newline|'\n'
indent|'            '
name|'project_only'
op|'='
string|'"allow_none"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'project_only'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'objects'
op|'.'
name|'NetworkList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'project_only'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NoNetworksFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'network_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'create_networks'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|delete
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'delete_network'
op|'('
name|'context'
op|','
name|'network_uuid'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|disassociate
name|'def'
name|'disassociate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
name|'network'
op|'.'
name|'id'
op|','
nl|'\n'
name|'host'
op|'='
name|'True'
op|','
name|'project'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_fixed_ip
name|'def'
name|'get_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_fixed_ip_by_address
name|'def'
name|'get_fixed_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_floating_ip
name|'def'
name|'get_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_int_like'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidID'
op|'('
name|'id'
op|'='
name|'id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'objects'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_floating_ip_pools
name|'def'
name|'get_floating_ip_pools'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_pool_names'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_floating_ip_by_address
name|'def'
name|'get_floating_ip_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_floating_ips_by_project
name|'def'
name|'get_floating_ips_by_project'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FloatingIPList'
op|'.'
name|'get_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_floating_ips_by_fixed_address
name|'def'
name|'get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floating_ips'
op|'='
name|'objects'
op|'.'
name|'FloatingIPList'
op|'.'
name|'get_by_fixed_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'fixed_address'
op|')'
newline|'\n'
name|'return'
op|'['
name|'str'
op|'('
name|'floating_ip'
op|'.'
name|'address'
op|')'
name|'for'
name|'floating_ip'
name|'in'
name|'floating_ips'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_instance_id_by_floating_address
name|'def'
name|'get_instance_id_by_floating_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixed_ip'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'.'
name|'get_by_floating_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'if'
name|'fixed_ip'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fixed_ip'
op|'.'
name|'instance_uuid'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_vifs_by_instance
name|'def'
name|'get_vifs_by_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vifs'
op|'='
name|'objects'
op|'.'
name|'VirtualInterfaceList'
op|'.'
name|'get_by_instance_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'vifs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'.'
name|'network_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'.'
name|'network_id'
op|','
nl|'\n'
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'net_uuid'
op|'='
name|'network'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'vifs'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_vif_by_mac_address
name|'def'
name|'get_vif_by_mac_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'mac_address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif'
op|'='
name|'objects'
op|'.'
name|'VirtualInterface'
op|'.'
name|'get_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'mac_address'
op|')'
newline|'\n'
name|'if'
name|'vif'
op|'.'
name|'network_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'vif'
op|'.'
name|'network_id'
op|','
nl|'\n'
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
newline|'\n'
name|'vif'
op|'.'
name|'net_uuid'
op|'='
name|'network'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
name|'return'
name|'vif'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|allocate_floating_ip
name|'def'
name|'allocate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'pool'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds (allocates) a floating ip to a project from a pool."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'floating_manager'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
name|'False'
op|','
name|'pool'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|release_floating_ip
name|'def'
name|'release_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes (deallocates) a floating ip with address from a project."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'floating_manager'
op|'.'
name|'deallocate_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'floating_address'
op|','
name|'fixed_address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associates a floating ip with a fixed ip.\n\n        Ensures floating ip is allocated to the project in context.\n        Does not verify ownership of the fixed ip. Caller is assumed to have\n        checked that the instance is properly owned.\n\n        """'
newline|'\n'
name|'orig_instance_uuid'
op|'='
name|'self'
op|'.'
name|'floating_manager'
op|'.'
name|'associate_floating_ip'
op|'('
nl|'\n'
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|','
name|'affect_auto_assigned'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'orig_instance_uuid'
op|':'
newline|'\n'
indent|'            '
name|'msg_dict'
op|'='
name|'dict'
op|'('
name|'address'
op|'='
name|'floating_address'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'orig_instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'re-assign floating IP %(address)s from '"
nl|'\n'
string|"'instance %(instance_id)s'"
op|')'
op|'%'
name|'msg_dict'
op|')'
newline|'\n'
name|'orig_instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'orig_instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# purge cached nw info for the original instance'
nl|'\n'
name|'base_api'
op|'.'
name|'update_instance_cache_with_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'orig_instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|member|disassociate_floating_ip
name|'def'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disassociates a floating ip from fixed ip it is associated with."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'floating_manager'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'affect_auto_assigned'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|member|allocate_for_instance
name|'def'
name|'allocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'vpn'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'macs'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
name|'None'
op|','
nl|'\n'
name|'dhcp_options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocates all network structures for an instance.\n\n        :param context: The request context.\n        :param instance: nova.objects.instance.Instance object.\n        :param vpn: A boolean, if True, indicate a vpn to access the instance.\n        :param requested_networks: A dictionary of requested_networks,\n            Optional value containing network_id, fixed_ip, and port_id.\n        :param macs: None or a set of MAC addresses that the instance\n            should use. macs is supplied by the hypervisor driver (contrast\n            with requested_networks which is user supplied).\n        :param security_groups: None or security groups to allocate for\n            instance.\n        :param dhcp_options: None or a set of key/value pairs that should\n            determine the DHCP BOOTP response, eg. for PXE booting an instance\n            configured with the baremetal hypervisor. It is expected that these\n            are already formatted for the neutron v2 api.\n            See nova/virt/driver.py:dhcp_options_for_instance for an example.\n        :returns: network info as from get_instance_nw_info() below\n        """'
newline|'\n'
comment|"# NOTE(vish): We can't do the floating ip allocation here because"
nl|'\n'
comment|"#             this is called from compute.manager which shouldn't"
nl|'\n'
comment|'#             have db access so we do it on the other side of the'
nl|'\n'
comment|'#             rpc.'
nl|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'vpn'"
op|']'
op|'='
name|'vpn'
newline|'\n'
name|'args'
op|'['
string|"'requested_networks'"
op|']'
op|'='
name|'requested_networks'
newline|'\n'
name|'args'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'args'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'instance'
op|'.'
name|'project_id'
newline|'\n'
name|'args'
op|'['
string|"'host'"
op|']'
op|'='
name|'instance'
op|'.'
name|'host'
newline|'\n'
name|'args'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
newline|'\n'
name|'args'
op|'['
string|"'macs'"
op|']'
op|'='
name|'macs'
newline|'\n'
name|'args'
op|'['
string|"'dhcp_options'"
op|']'
op|'='
name|'dhcp_options'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'allocate_for_instance'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|deallocate_for_instance
name|'def'
name|'deallocate_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deallocates all network structures related to instance."""'
newline|'\n'
comment|"# NOTE(vish): We can't do the floating ip deallocation here because"
nl|'\n'
comment|"#             this is called from compute.manager which shouldn't"
nl|'\n'
comment|'#             have db access so we do it on the other side of the'
nl|'\n'
comment|'#             rpc.'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Here for neutron compatibility'
nl|'\n'
DECL|member|allocate_port_for_instance
dedent|''
name|'def'
name|'allocate_port_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|','
nl|'\n'
name|'network_id'
op|'='
name|'None'
op|','
name|'requested_ip'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Here for neutron compatibility'
nl|'\n'
DECL|member|deallocate_port_for_instance
dedent|''
name|'def'
name|'deallocate_port_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Here for neutron compatibility'
nl|'\n'
DECL|member|list_ports
dedent|''
name|'def'
name|'list_ports'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Here for neutron compatibility'
nl|'\n'
DECL|member|show_port
dedent|''
name|'def'
name|'show_port'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|member|add_fixed_ip_to_instance
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a fixed ip to instance from specified network."""'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|member|remove_fixed_ip_from_instance
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a fixed ip from instance from specified network."""'
newline|'\n'
nl|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|add_network_to_project
name|'def'
name|'add_network_to_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'network_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force adds another network to a project."""'
newline|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'add_network_to_project'
op|'('
name|'context'
op|','
name|'project_id'
op|','
nl|'\n'
name|'network_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|associate
name|'def'
name|'associate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_uuid'
op|','
name|'host'
op|'='
name|'base_api'
op|'.'
name|'SENTINEL'
op|','
nl|'\n'
name|'project'
op|'='
name|'base_api'
op|'.'
name|'SENTINEL'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Associate or disassociate host or project to network."""'
newline|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'network_uuid'
op|')'
newline|'\n'
name|'if'
name|'host'
name|'is'
name|'not'
name|'base_api'
op|'.'
name|'SENTINEL'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
name|'network'
op|'.'
name|'id'
op|','
nl|'\n'
name|'host'
op|'='
name|'True'
op|','
name|'project'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'network'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'network'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'project'
name|'is'
name|'not'
name|'base_api'
op|'.'
name|'SENTINEL'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'project'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'disassociate'
op|'('
name|'context'
op|','
name|'network'
op|'.'
name|'id'
op|','
nl|'\n'
name|'host'
op|'='
name|'False'
op|','
name|'project'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'associate'
op|'('
name|'context'
op|','
name|'project'
op|','
nl|'\n'
name|'network_id'
op|'='
name|'network'
op|'.'
name|'id'
op|','
name|'force'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_instance_nw_info
name|'def'
name|'get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns all network info related to an instance."""'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
comment|"# NOTE(comstud): Don't update API cell with new info_cache every"
nl|'\n'
comment|'# time we pull network info for an instance.  The periodic healing'
nl|'\n'
comment|'# of info_cache causes too many cells messages.  Healing the API'
nl|'\n'
comment|'# will happen separately.'
nl|'\n'
name|'base_api'
op|'.'
name|'update_instance_cache_with_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'result'
op|','
name|'update_cells'
op|'='
name|'False'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_nw_info
dedent|''
name|'def'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns all network info related to an instance."""'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|validate_networks
name|'def'
name|'validate_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'requested_networks'
op|','
name|'num_instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""validate the networks passed at the time of creating\n        the server.\n\n        Return the number of instances that can be successfully allocated\n        with the requested network configuration.\n        """'
newline|'\n'
name|'if'
name|'requested_networks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'validate_networks'
op|'('
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
comment|'# Neutron validation checks and returns how many of num_instances'
nl|'\n'
comment|'# instances can be supported by the quota.  For Nova network'
nl|'\n'
comment|'# this is part of the subsequent quota check, so we just return'
nl|'\n'
comment|'# the requested number in this case.'
nl|'\n'
dedent|''
name|'return'
name|'num_instances'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_instance_uuids_by_ip_filter
name|'def'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of dicts in the form of\n        {\'instance_uuid\': uuid, \'ip\': ip} that matched the ip_filter\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_dns_domains
name|'def'
name|'get_dns_domains'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of available dns domains.\n        These can be used to create DNS entries for floating ips.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'get_dns_domains'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|add_dns_entry
name|'def'
name|'add_dns_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'name'
op|','
name|'dns_type'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create specified DNS entry for address."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'dns_type'"
op|':'
name|'dns_type'
op|','
nl|'\n'
string|"'domain'"
op|':'
name|'domain'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'add_dns_entry'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|modify_dns_entry
name|'def'
name|'modify_dns_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'address'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create specified DNS entry for address."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'domain'"
op|':'
name|'domain'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'modify_dns_entry'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|delete_dns_entry
name|'def'
name|'delete_dns_entry'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the specified dns entry."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'domain'"
op|':'
name|'domain'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'delete_dns_entry'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|delete_dns_domain
name|'def'
name|'delete_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the specified dns domain."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'delete_dns_domain'
op|'('
name|'context'
op|','
name|'domain'
op|'='
name|'domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_dns_entries_by_address
name|'def'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get entries for address and domain."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
string|"'domain'"
op|':'
name|'domain'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_dns_entries_by_name
name|'def'
name|'get_dns_entries_by_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get entries for name and domain."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'domain'"
op|':'
name|'domain'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'get_dns_entries_by_name'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|create_private_dns_domain
name|'def'
name|'create_private_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domain'
op|','
name|'availability_zone'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a private DNS domain with nova availability zone."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'domain'"
op|':'
name|'domain'
op|','
string|"'av_zone'"
op|':'
name|'availability_zone'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'create_private_dns_domain'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|create_public_dns_domain
name|'def'
name|'create_public_dns_domain'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'domain'
op|','
name|'project'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a public DNS domain with optional nova project."""'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'domain'"
op|':'
name|'domain'
op|','
string|"'project'"
op|':'
name|'project'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'create_public_dns_domain'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|setup_networks_on_host
name|'def'
name|'setup_networks_on_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setup or teardown the network structures on hosts related to\n           instance.\n        """'
newline|'\n'
name|'host'
op|'='
name|'host'
name|'or'
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
comment|'# NOTE(tr3buchet): host is passed in cases where we need to setup'
nl|'\n'
comment|'# or teardown the networks on a host which has been migrated to/from'
nl|'\n'
comment|"# and instance['host'] is not yet or is no longer equal to"
nl|'\n'
name|'args'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host'
op|','
nl|'\n'
string|"'teardown'"
op|':'
name|'teardown'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_multi_host
dedent|''
name|'def'
name|'_is_multi_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fixed_ips'
op|'='
name|'objects'
op|'.'
name|'FixedIPList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|'.'
name|'network_id'
op|','
nl|'\n'
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
newline|'\n'
name|'return'
name|'network'
op|'.'
name|'multi_host'
newline|'\n'
nl|'\n'
DECL|member|_get_floating_ip_addresses
dedent|''
name|'def'
name|'_get_floating_ip_addresses'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'FloatingIP'
op|'.'
name|'get_addresses_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|migrate_instance_start
name|'def'
name|'migrate_instance_start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start to migrate the network of an instance."""'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'source_compute'
op|'='
name|'migration'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'dest_compute'
op|'='
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|','
nl|'\n'
name|'floating_addresses'
op|'='
name|'None'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_multi_host'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|"'floating_addresses'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_floating_ip_addresses'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'['
string|"'host'"
op|']'
op|'='
name|'migration'
op|'['
string|"'source_compute'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'migrate_instance_start'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|migrate_instance_finish
name|'def'
name|'migrate_instance_finish'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finish migrating the network of an instance."""'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'source_compute'
op|'='
name|'migration'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'dest_compute'
op|'='
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|','
nl|'\n'
name|'floating_addresses'
op|'='
name|'None'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_multi_host'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|"'floating_addresses'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_floating_ip_addresses'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'args'
op|'['
string|"'host'"
op|']'
op|'='
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_rpcapi'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Serial consoles module."""'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|ALLOCATED_PORTS
name|'ALLOCATED_PORTS'
op|'='
name|'set'
op|'('
op|')'
comment|'# in-memory set of already allocated ports'
newline|'\n'
DECL|variable|SERIAL_LOCK
name|'SERIAL_LOCK'
op|'='
string|"'serial-lock'"
newline|'\n'
DECL|variable|DEFAULT_PORT_RANGE
name|'DEFAULT_PORT_RANGE'
op|'='
string|"'10000:20000'"
newline|'\n'
nl|'\n'
DECL|variable|serial_opts
name|'serial_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'enabled'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Enable serial console related features'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'port_range'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'DEFAULT_PORT_RANGE'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Range of TCP ports to use for serial ports '"
nl|'\n'
string|"'on compute hosts'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'base_url'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'ws://127.0.0.1:6083/'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Location of serial console proxy.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'listen'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'127.0.0.1'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'IP address on which instance serial console '"
nl|'\n'
string|"'should listen'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'proxyclient_address'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'127.0.0.1'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The address to which proxy clients '"
nl|'\n'
string|"'(like nova-serialproxy) should connect'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'serial_opts'
op|','
name|'group'
op|'='
string|"'serial_console'"
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(sahid): Add a method to initialize ALOCATED_PORTS with the'
nl|'\n'
comment|'# already binded TPC port(s). (cf from danpb: list all running guests and'
nl|'\n'
comment|'# query the XML in libvirt driver to find out the TCP port(s) it uses).'
nl|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'SERIAL_LOCK'
op|')'
newline|'\n'
DECL|function|acquire_port
name|'def'
name|'acquire_port'
op|'('
name|'host'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a free TCP port on host.\n\n    Find and returns a free TCP port on \'host\' in the range\n    of \'CONF.serial_console.port_range\'.\n    """'
newline|'\n'
nl|'\n'
name|'start'
op|','
name|'stop'
op|'='
name|'_get_port_range'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'port'
name|'in'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'range'
op|'('
name|'start'
op|','
name|'stop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'host'
op|','
name|'port'
op|')'
name|'in'
name|'ALLOCATED_PORTS'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_verify_port'
op|'('
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
name|'ALLOCATED_PORTS'
op|'.'
name|'add'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'return'
name|'port'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'SocketPortInUseException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'SocketPortRangeExhaustedException'
op|'('
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'SERIAL_LOCK'
op|')'
newline|'\n'
DECL|function|release_port
name|'def'
name|'release_port'
op|'('
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Release TCP port to be used next time."""'
newline|'\n'
name|'ALLOCATED_PORTS'
op|'.'
name|'discard'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_port_range
dedent|''
name|'def'
name|'_get_port_range'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'config_range'
op|'='
name|'CONF'
op|'.'
name|'serial_console'
op|'.'
name|'port_range'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'start'
op|','
name|'stop'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'config_range'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'start'
op|'>='
name|'stop'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"serial_console.port_range should be <num>:<num>. "'
nl|'\n'
string|'"Given value %(port_range)s could not be parsed. "'
nl|'\n'
string|'"Taking the default port range %(default)s."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'port_range'"
op|':'
name|'config_range'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'DEFAULT_PORT_RANGE'
op|'}'
op|')'
newline|'\n'
name|'start'
op|','
name|'stop'
op|'='
name|'map'
op|'('
name|'int'
op|','
name|'DEFAULT_PORT_RANGE'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'start'
op|','
name|'stop'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_verify_port
dedent|''
name|'def'
name|'_verify_port'
op|'('
name|'host'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'s'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'.'
name|'bind'
op|'('
op|'('
name|'host'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'SocketPortInUseException'
op|'('
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
name|'port'
op|'='
name|'port'
op|','
name|'error'
op|'='
name|'e'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

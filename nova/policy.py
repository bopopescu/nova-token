begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 OpenStack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Policy Engine For Nova"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|policy_opts
name|'policy_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'policy_file'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'policy.json'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'_'
op|'('
string|"'JSON file representing policy'"
op|')'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'policy_default_rule'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'default'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'_'
op|'('
string|"'Rule checked when requested rule is not found'"
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'policy_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_POLICY_PATH
name|'_POLICY_PATH'
op|'='
name|'None'
newline|'\n'
DECL|variable|_POLICY_CACHE
name|'_POLICY_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reset
name|'def'
name|'reset'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_POLICY_PATH'
newline|'\n'
name|'global'
name|'_POLICY_CACHE'
newline|'\n'
name|'_POLICY_PATH'
op|'='
name|'None'
newline|'\n'
name|'_POLICY_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'policy'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|init
dedent|''
name|'def'
name|'init'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_POLICY_PATH'
newline|'\n'
name|'global'
name|'_POLICY_CACHE'
newline|'\n'
name|'if'
name|'not'
name|'_POLICY_PATH'
op|':'
newline|'\n'
indent|'        '
name|'_POLICY_PATH'
op|'='
name|'CONF'
op|'.'
name|'policy_file'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'_POLICY_PATH'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_POLICY_PATH'
op|'='
name|'CONF'
op|'.'
name|'find_file'
op|'('
name|'_POLICY_PATH'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'_POLICY_PATH'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConfigNotFound'
op|'('
name|'path'
op|'='
name|'CONF'
op|'.'
name|'policy_file'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
name|'_POLICY_PATH'
op|','
name|'_POLICY_CACHE'
op|','
nl|'\n'
name|'reload_func'
op|'='
name|'_set_rules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_rules
dedent|''
name|'def'
name|'_set_rules'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'default_rule'
op|'='
name|'CONF'
op|'.'
name|'policy_default_rule'
newline|'\n'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'policy'
op|'.'
name|'Rules'
op|'.'
name|'load_json'
op|'('
name|'data'
op|','
name|'default_rule'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|enforce
dedent|''
name|'def'
name|'enforce'
op|'('
name|'context'
op|','
name|'action'
op|','
name|'target'
op|','
name|'do_raise'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verifies that the action is valid on the target in this context.\n\n       :param context: nova context\n       :param action: string representing the action to be checked\n           this should be colon separated for clarity.\n           i.e. ``compute:create_instance``,\n           ``compute:attach_volume``,\n           ``volume:attach_volume``\n       :param target: dictionary representing the object of the action\n           for object creation this should be a dictionary representing the\n           location of the object e.g. ``{\'project_id\': context.project_id}``\n       :param do_raise: if True (the default), raises PolicyNotAuthorized;\n           if False, returns False\n\n       :raises nova.exception.PolicyNotAuthorized: if verification fails\n           and do_raise is True.\n\n       :return: returns a non-False value (not necessarily "True") if\n           authorized, and the exact value False if not authorized and\n           do_raise is False.\n    """'
newline|'\n'
name|'init'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'credentials'
op|'='
name|'context'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Add the exception arguments if asked to do a raise'
nl|'\n'
name|'extra'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'do_raise'
op|':'
newline|'\n'
indent|'        '
name|'extra'
op|'.'
name|'update'
op|'('
name|'exc'
op|'='
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
name|'action'
op|'='
name|'action'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'policy'
op|'.'
name|'check'
op|'('
name|'action'
op|','
name|'target'
op|','
name|'credentials'
op|','
op|'**'
name|'extra'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_is_admin
dedent|''
name|'def'
name|'check_is_admin'
op|'('
name|'roles'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Whether or not roles contains \'admin\' role according to policy setting.\n\n    """'
newline|'\n'
name|'init'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'target'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'credentials'
op|'='
op|'{'
string|"'roles'"
op|':'
name|'roles'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'policy'
op|'.'
name|'check'
op|'('
string|"'context_is_admin'"
op|','
name|'target'
op|','
name|'credentials'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'policy'
op|'.'
name|'register'
op|'('
string|"'is_admin'"
op|')'
newline|'\n'
DECL|class|IsAdminCheck
name|'class'
name|'IsAdminCheck'
op|'('
name|'policy'
op|'.'
name|'Check'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An explicit check for is_admin."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'kind'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize the check."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expected'
op|'='
op|'('
name|'match'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'IsAdminCheck'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'kind'
op|','
name|'str'
op|'('
name|'self'
op|'.'
name|'expected'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'creds'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine whether is_admin matches the requested value."""'
newline|'\n'
nl|'\n'
name|'return'
name|'creds'
op|'['
string|"'is_admin'"
op|']'
op|'=='
name|'self'
op|'.'
name|'expected'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

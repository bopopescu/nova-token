begin_unit
comment|'# Copyright (c) 2011-2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nPluggable Weighing support\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'loadables'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|normalize
name|'def'
name|'normalize'
op|'('
name|'weight_list'
op|','
name|'minval'
op|'='
name|'None'
op|','
name|'maxval'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Normalize the values in a list between 0 and 1.0.\n\n    The normalization is made regarding the lower and upper values present in\n    weight_list. If the minval and/or maxval parameters are set, these values\n    will be used instead of the minimum and maximum from the list.\n\n    If all the values are equal, they are normalized to 0.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'weight_list'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'maxval'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'maxval'
op|'='
name|'max'
op|'('
name|'weight_list'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'minval'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'minval'
op|'='
name|'min'
op|'('
name|'weight_list'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'maxval'
op|'='
name|'float'
op|'('
name|'maxval'
op|')'
newline|'\n'
name|'minval'
op|'='
name|'float'
op|'('
name|'minval'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'minval'
op|'=='
name|'maxval'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
number|'0'
op|']'
op|'*'
name|'len'
op|'('
name|'weight_list'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'range_'
op|'='
name|'maxval'
op|'-'
name|'minval'
newline|'\n'
name|'return'
op|'('
op|'('
name|'i'
op|'-'
name|'minval'
op|')'
op|'/'
name|'range_'
name|'for'
name|'i'
name|'in'
name|'weight_list'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WeighedObject
dedent|''
name|'class'
name|'WeighedObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Object with weight information."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'weight'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'weight'
op|'='
name|'weight'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<WeighedObject \'%s\': %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'obj'
op|','
name|'self'
op|'.'
name|'weight'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseWeigher
dedent|''
dedent|''
name|'class'
name|'BaseWeigher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for pluggable weighers.\n\n    The attributes maxval and minval can be specified to set up the maximum\n    and minimum values for the weighed objects. These values will then be\n    taken into account in the normalization step, instead of taking the values\n    from the calculated weights.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'abc'
op|'.'
name|'ABCMeta'
newline|'\n'
nl|'\n'
DECL|variable|minval
name|'minval'
op|'='
name|'None'
newline|'\n'
DECL|variable|maxval
name|'maxval'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|weight_multiplier
name|'def'
name|'weight_multiplier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""How weighted this weigher should be.\n\n        Override this method in a subclass, so that the returned value is\n        read from a configuration option to permit operators specify a\n        multiplier for the weigher.\n        """'
newline|'\n'
name|'return'
number|'1.0'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|_weigh_object
name|'def'
name|'_weigh_object'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'weight_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Weigh an specific object."""'
newline|'\n'
nl|'\n'
DECL|member|weigh_objects
dedent|''
name|'def'
name|'weigh_objects'
op|'('
name|'self'
op|','
name|'weighed_obj_list'
op|','
name|'weight_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Weigh multiple objects.\n\n        Override in a subclass if you need access to all objects in order\n        to calculate weights. Do not modify the weight of an object here,\n        just return a list of weights.\n        """'
newline|'\n'
comment|'# Calculate the weights'
nl|'\n'
name|'weights'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'obj'
name|'in'
name|'weighed_obj_list'
op|':'
newline|'\n'
indent|'            '
name|'weight'
op|'='
name|'self'
op|'.'
name|'_weigh_object'
op|'('
name|'obj'
op|'.'
name|'obj'
op|','
name|'weight_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# Record the min and max values if they are None. If they anything'
nl|'\n'
comment|'# but none we assume that the weigher has set them'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'minval'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'minval'
op|'='
name|'weight'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'maxval'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'maxval'
op|'='
name|'weight'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'weight'
op|'<'
name|'self'
op|'.'
name|'minval'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'minval'
op|'='
name|'weight'
newline|'\n'
dedent|''
name|'elif'
name|'weight'
op|'>'
name|'self'
op|'.'
name|'maxval'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'maxval'
op|'='
name|'weight'
newline|'\n'
nl|'\n'
dedent|''
name|'weights'
op|'.'
name|'append'
op|'('
name|'weight'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'weights'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseWeightHandler
dedent|''
dedent|''
name|'class'
name|'BaseWeightHandler'
op|'('
name|'loadables'
op|'.'
name|'BaseLoader'
op|')'
op|':'
newline|'\n'
DECL|variable|object_class
indent|'    '
name|'object_class'
op|'='
name|'WeighedObject'
newline|'\n'
nl|'\n'
DECL|member|get_weighed_objects
name|'def'
name|'get_weighed_objects'
op|'('
name|'self'
op|','
name|'weigher_classes'
op|','
name|'obj_list'
op|','
nl|'\n'
name|'weighing_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a sorted (descending), normalized list of WeighedObjects."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'obj_list'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'weighed_objs'
op|'='
op|'['
name|'self'
op|'.'
name|'object_class'
op|'('
name|'obj'
op|','
number|'0.0'
op|')'
name|'for'
name|'obj'
name|'in'
name|'obj_list'
op|']'
newline|'\n'
name|'for'
name|'weigher_cls'
name|'in'
name|'weigher_classes'
op|':'
newline|'\n'
indent|'            '
name|'weigher'
op|'='
name|'weigher_cls'
op|'('
op|')'
newline|'\n'
name|'weights'
op|'='
name|'weigher'
op|'.'
name|'weigh_objects'
op|'('
name|'weighed_objs'
op|','
name|'weighing_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# Normalize the weights'
nl|'\n'
name|'weights'
op|'='
name|'normalize'
op|'('
name|'weights'
op|','
nl|'\n'
name|'minval'
op|'='
name|'weigher'
op|'.'
name|'minval'
op|','
nl|'\n'
name|'maxval'
op|'='
name|'weigher'
op|'.'
name|'maxval'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
op|','
name|'weight'
name|'in'
name|'enumerate'
op|'('
name|'weights'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'obj'
op|'='
name|'weighed_objs'
op|'['
name|'i'
op|']'
newline|'\n'
name|'obj'
op|'.'
name|'weight'
op|'+='
name|'weigher'
op|'.'
name|'weight_multiplier'
op|'('
op|')'
op|'*'
name|'weight'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'sorted'
op|'('
name|'weighed_objs'
op|','
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'weight'
op|','
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

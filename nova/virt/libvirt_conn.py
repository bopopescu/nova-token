begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA connection to a hypervisor through libvirt.\n\nSupports KVM, QEMU, UML, and XEN.\n\n**Related Flags**\n\n:libvirt_type:  Libvirt domain type.  Can be kvm, qemu, uml, xen\n                (default: kvm).\n:libvirt_uri:  Override for the default libvirt URI (depends on libvirt_type).\n:libvirt_xml_template:  Libvirt XML Template.\n:rescue_image_id:  Rescue ami image (default: ami-rescue).\n:rescue_kernel_id:  Rescue aki image (default: aki-rescue).\n:rescue_ramdisk_id:  Rescue ari image (default: ari-rescue).\n:injected_network_template:  Template file for injected network\n:allow_project_net_traffic:  Whether to allow in project network traffic\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'multiprocessing'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'semaphore'
newline|'\n'
nl|'\n'
name|'import'
name|'IPy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
comment|'#from nova import test'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
DECL|variable|libxml2
name|'libxml2'
op|'='
name|'None'
newline|'\n'
DECL|variable|Template
name|'Template'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.virt.libvirt_conn'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
comment|'# TODO(vish): These flags should probably go into a shared location'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_image_id'"
op|','
string|"'ami-rescue'"
op|','
string|"'Rescue ami image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_kernel_id'"
op|','
string|"'aki-rescue'"
op|','
string|"'Rescue aki image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_ramdisk_id'"
op|','
string|"'ari-rescue'"
op|','
string|"'Rescue ari image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'injected_network_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/interfaces.template'"
op|')'
op|','
nl|'\n'
string|"'Template file for injected network'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/libvirt.xml.template'"
op|')'
op|','
nl|'\n'
string|"'Libvirt XML Template'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_type'"
op|','
nl|'\n'
string|"'kvm'"
op|','
nl|'\n'
string|"'Libvirt domain type (valid options are: '"
nl|'\n'
string|"'kvm, qemu, uml, xen)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_uri'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'Override the default libvirt URI (which is dependent'"
nl|'\n'
string|"' on libvirt_type)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'allow_project_net_traffic'"
op|','
nl|'\n'
name|'True'
op|','
nl|'\n'
string|"'Whether to allow in project network traffic'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_cow_images'"
op|','
nl|'\n'
name|'True'
op|','
nl|'\n'
string|"'Whether to use cow images'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'ajaxterm_portrange'"
op|','
nl|'\n'
string|"'10000-12000'"
op|','
nl|'\n'
string|"'Range of ports that ajaxterm should randomly try to bind'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'firewall_driver'"
op|','
nl|'\n'
string|"'nova.virt.libvirt_conn.IptablesFirewallDriver'"
op|','
nl|'\n'
string|"'Firewall driver (defaults to iptables)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'cpuinfo_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/cpuinfo.xml.template'"
op|')'
op|','
nl|'\n'
string|"'CpuInfo XML Template (Used only live migration now)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'live_migration_uri'"
op|','
nl|'\n'
string|'"qemu+tcp://%s/system"'
op|','
nl|'\n'
string|"'Define protocol used by live_migration feature'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'live_migration_flag'"
op|','
nl|'\n'
string|'"VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER"'
op|','
nl|'\n'
string|"'Define live migration behavior.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'live_migration_bandwidth'"
op|','
number|'0'
op|','
nl|'\n'
string|"'Define live migration behavior'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_connection
name|'def'
name|'get_connection'
op|'('
name|'read_only'
op|')'
op|':'
newline|'\n'
comment|"# These are loaded late so that there's no need to install these"
nl|'\n'
comment|'# libraries when not using libvirt.'
nl|'\n'
comment|'# Cheetah is separate because the unit tests want to load Cheetah,'
nl|'\n'
comment|'# but not libvirt.'
nl|'\n'
indent|'    '
name|'global'
name|'libvirt'
newline|'\n'
name|'global'
name|'libxml2'
newline|'\n'
name|'if'
name|'libvirt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'libxml2'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libxml2'
op|'='
name|'__import__'
op|'('
string|"'libxml2'"
op|')'
newline|'\n'
dedent|''
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'return'
name|'LibvirtConnection'
op|'('
name|'read_only'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_late_load_cheetah
dedent|''
name|'def'
name|'_late_load_cheetah'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'Template'
newline|'\n'
name|'if'
name|'Template'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'__import__'
op|'('
string|"'Cheetah.Template'"
op|','
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'Template'"
op|']'
op|','
nl|'\n'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'Template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_net_and_mask
dedent|''
dedent|''
name|'def'
name|'_get_net_and_mask'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'net'
op|'.'
name|'net'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'net'
op|'.'
name|'netmask'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_net_and_prefixlen
dedent|''
name|'def'
name|'_get_net_and_prefixlen'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'net'
op|'.'
name|'net'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'net'
op|'.'
name|'prefixlen'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_ip_version
dedent|''
name|'def'
name|'_get_ip_version'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'net'
op|'.'
name|'version'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnection
dedent|''
name|'class'
name|'LibvirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'libvirt_uri'
op|'='
name|'self'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'libvirt_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cpuinfo_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'cpuinfo_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'read_only'
op|'='
name|'read_only'
newline|'\n'
nl|'\n'
name|'fw_class'
op|'='
name|'utils'
op|'.'
name|'import_class'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'fw_class'
op|'('
name|'get_connection'
op|'='
name|'self'
op|'.'
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
comment|"# Adopt existing VM's running here"
nl|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'ctxt'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Checking state of %s'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'power_state'
op|'.'
name|'SHUTOFF'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Current state of %(name)s was %(state)s.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
string|"'state'"
op|':'
name|'state'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
comment|'# TODO(soren): This is what the compute manager does when you'
nl|'\n'
comment|"# terminate # an instance. At some point I figure we'll have a"
nl|'\n'
comment|'# "terminated" state and some sort of cleanup job that runs'
nl|'\n'
comment|'# occasionally, cleaning them out.'
nl|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_wrapped_conn'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_test_connection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connecting to libvirt: %s'"
op|')'
op|','
name|'self'
op|'.'
name|'libvirt_uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'self'
op|'.'
name|'_connect'
op|'('
name|'self'
op|'.'
name|'libvirt_uri'
op|','
nl|'\n'
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped_conn'
newline|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_connection
name|'def'
name|'_test_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_wrapped_conn'
op|'.'
name|'getInfo'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
name|'and'
name|'e'
op|'.'
name|'get_error_domain'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_FROM_REMOTE'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connection to libvirt broke'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|get_uri
dedent|''
dedent|''
name|'def'
name|'get_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'uml:///system'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'xen'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'xen:///'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'qemu:///system'"
newline|'\n'
dedent|''
name|'return'
name|'uri'
newline|'\n'
nl|'\n'
DECL|member|_connect
dedent|''
name|'def'
name|'_connect'
op|'('
name|'self'
op|','
name|'uri'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'auth'
op|'='
op|'['
op|'['
name|'libvirt'
op|'.'
name|'VIR_CRED_AUTHNAME'
op|','
name|'libvirt'
op|'.'
name|'VIR_CRED_NOECHOPROMPT'
op|']'
op|','
nl|'\n'
string|"'root'"
op|','
nl|'\n'
name|'None'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'read_only'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openReadOnly'
op|'('
name|'uri'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openAuth'
op|'('
name|'uri'
op|','
name|'auth'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'x'
op|')'
op|'.'
name|'name'
op|'('
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'virt_dom'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'_err'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|"# If the instance is already terminated, we're still happy"
nl|'\n'
nl|'\n'
comment|"# We'll save this for when we do shutdown,"
nl|'\n'
comment|'# instead of destroy - but destroy returns immediately'
nl|'\n'
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cleanup'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'target'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %(instance_name)s: deleting instance files'"
nl|'\n'
string|"' %(target)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'device_path'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'mount_device'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'if'
name|'device_path'
op|'.'
name|'startswith'
op|'('
string|"'/dev/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'='
string|'"""<disk type=\'block\'>\n                         <driver name=\'qemu\' type=\'raw\'/>\n                         <source dev=\'%s\'/>\n                         <target dev=\'%s\' bus=\'virtio\'/>\n                     </disk>"""'
op|'%'
op|'('
name|'device_path'
op|','
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"':'"
name|'in'
name|'device_path'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'protocol'
op|','
name|'name'
op|')'
op|'='
name|'device_path'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'xml'
op|'='
string|'"""<disk type=\'network\'>\n                         <driver name=\'qemu\' type=\'raw\'/>\n                         <source protocol=\'%s\' name=\'%s\'/>\n                         <target dev=\'%s\' bus=\'virtio\'/>\n                     </disk>"""'
op|'%'
op|'('
name|'protocol'
op|','
nl|'\n'
name|'name'
op|','
nl|'\n'
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid device path %s"'
op|')'
op|'%'
name|'device_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'virt_dom'
op|'.'
name|'attachDevice'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_disk_xml
dedent|''
name|'def'
name|'_get_disk_xml'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the xml for the disk mounted at device"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'ctx'
op|'='
name|'doc'
op|'.'
name|'xpathNewContext'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'ctx'
op|'.'
name|'xpathEval'
op|'('
string|"'/domain/devices/disk'"
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
op|'=='
name|'device'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'str'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'.'
name|'xpathFreeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doc'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'.'
name|'freeDoc'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'mount_device'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_disk_xml'
op|'('
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'xml'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"No disk at %s"'
op|')'
op|'%'
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'virt_dom'
op|'.'
name|'detachDevice'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|snapshot
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create snapshot from a running VM instance """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Instance snapshotting is not supported for libvirt"'
nl|'\n'
string|'"at this time"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'xml'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_reboot
name|'def'
name|'_wait_for_reboot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: rebooted'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'exn'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'_wait_for_reboot failed: %s'"
op|')'
op|','
name|'exn'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'_wait_for_reboot'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"pause not supported for libvirt."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"unpause not supported for libvirt."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"suspend not supported for libvirt"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"resume not supported for libvirt"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
name|'rescue_images'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_image_id'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_kernel_id'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_ramdisk_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'instance'
op|','
name|'xml'
op|','
string|"'.rescue'"
op|','
name|'rescue_images'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'xml'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_rescue
name|'def'
name|'_wait_for_rescue'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'None'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: rescued'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'exn'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'_wait_for_rescue failed: %s'"
op|')'
op|','
name|'exn'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'None'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'_wait_for_rescue'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): Because reboot destroys and recreates an instance using'
nl|'\n'
comment|'#             the normal xml file, we can just call reboot here'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|spawn
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'launching'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'instance'
op|','
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'xml'
op|','
number|'0'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: is running"'
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_boot
name|'def'
name|'_wait_for_boot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: booted'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'instance %s: failed to boot'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'_wait_for_boot'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_flush_xen_console
dedent|''
name|'def'
name|'_flush_xen_console'
op|'('
name|'self'
op|','
name|'virsh_output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'virsh said: %r'"
op|')'
op|','
name|'virsh_output'
op|')'
newline|'\n'
name|'virsh_output'
op|'='
name|'virsh_output'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'virsh_output'
op|'.'
name|'startswith'
op|'('
string|"'/dev/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"cool, it\'s a device"'
op|')'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'dd'"
op|','
nl|'\n'
string|'"if=%s"'
op|'%'
name|'virsh_output'
op|','
nl|'\n'
string|"'iflag=nonblock'"
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'return'
name|'out'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|_append_to_file
dedent|''
dedent|''
name|'def'
name|'_append_to_file'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'fpath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'data: %(data)r, fpath: %(fpath)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'fpath'
op|','
string|"'a+'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'fpath'
newline|'\n'
nl|'\n'
DECL|member|_dump_file
dedent|''
name|'def'
name|'_dump_file'
op|'('
name|'self'
op|','
name|'fpath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
name|'fpath'
op|','
string|"'r+'"
op|')'
newline|'\n'
name|'contents'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Contents of file %(fpath)s: %(contents)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'contents'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'console_log'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'console.log'"
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'chown'"
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|','
name|'console_log'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'xen'"
op|':'
newline|'\n'
comment|'# Xen is special'
nl|'\n'
indent|'            '
name|'virsh_output'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'virsh'"
op|','
string|"'ttyconsole'"
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_flush_xen_console'
op|'('
name|'virsh_output'
op|')'
newline|'\n'
name|'fpath'
op|'='
name|'self'
op|'.'
name|'_append_to_file'
op|'('
name|'data'
op|','
name|'console_log'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fpath'
op|'='
name|'console_log'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_dump_file'
op|'('
name|'fpath'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_ajax_console
name|'def'
name|'get_ajax_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
DECL|function|get_open_port
indent|'        '
name|'def'
name|'get_open_port'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start_port'
op|','
name|'end_port'
op|'='
name|'FLAGS'
op|'.'
name|'ajaxterm_portrange'
op|'.'
name|'split'
op|'('
string|'"-"'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
number|'100'
op|')'
op|':'
comment|"# don't loop forever"
newline|'\n'
indent|'                '
name|'port'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
name|'int'
op|'('
name|'start_port'
op|')'
op|','
name|'int'
op|'('
name|'end_port'
op|')'
op|')'
newline|'\n'
comment|'# netcat will exit with 0 only if the port is in use,'
nl|'\n'
comment|'# so a nonzero return value implies it is unused'
nl|'\n'
name|'cmd'
op|'='
string|"'netcat'"
op|','
string|"'0.0.0.0'"
op|','
name|'port'
op|','
string|"'-w'"
op|','
string|"'1'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'stdout'
op|','
name|'stderr'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'process_input'
op|'='
string|"''"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'port'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Unable to find an open port'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_pty_for_instance
dedent|''
name|'def'
name|'get_pty_for_instance'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'serial'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'serial'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'serial'
op|'.'
name|'getAttribute'
op|'('
string|"'type'"
op|')'
op|'=='
string|"'pty'"
op|':'
newline|'\n'
indent|'                    '
name|'source'
op|'='
name|'serial'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'source'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'source'
op|'.'
name|'getAttribute'
op|'('
string|"'path'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'port'
op|'='
name|'get_open_port'
op|'('
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
nl|'\n'
name|'ajaxterm_cmd'
op|'='
string|"'sudo socat - %s'"
op|'%'
name|'get_pty_for_instance'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
string|'\'%s/tools/ajaxterm/ajaxterm.py --command "%s" -t %s -p %s\''
op|'%'
op|'('
name|'utils'
op|'.'
name|'novadir'
op|'('
op|')'
op|','
name|'ajaxterm_cmd'
op|','
name|'token'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'token'"
op|':'
name|'token'
op|','
string|"'host'"
op|':'
name|'host'
op|','
string|"'port'"
op|':'
name|'port'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|_image_sems
dedent|''
name|'_image_sems'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_cache_image
name|'def'
name|'_cache_image'
op|'('
name|'fn'
op|','
name|'target'
op|','
name|'fname'
op|','
name|'cow'
op|'='
name|'False'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for a method that creates an image that caches the image.\n\n        This wrapper will save the image into a common store and create a\n        copy for use by the hypervisor.\n\n        The underlying method should specify a kwarg of target representing\n        where the image will be saved.\n\n        fname is used as the filename of the base image.  The filename needs\n        to be unique to a given image.\n\n        If cow is True, it will make a CoW image instead of a copy.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
string|"'_base'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'base_dir'
op|')'
newline|'\n'
dedent|''
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'fname'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fname'
name|'not'
name|'in'
name|'LibvirtConnection'
op|'.'
name|'_image_sems'
op|':'
newline|'\n'
indent|'                '
name|'LibvirtConnection'
op|'.'
name|'_image_sems'
op|'['
name|'fname'
op|']'
op|'='
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
newline|'\n'
dedent|''
name|'with'
name|'LibvirtConnection'
op|'.'
name|'_image_sems'
op|'['
name|'fname'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'fn'
op|'('
name|'target'
op|'='
name|'base'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'LibvirtConnection'
op|'.'
name|'_image_sems'
op|'['
name|'fname'
op|']'
op|'.'
name|'locked'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'LibvirtConnection'
op|'.'
name|'_image_sems'
op|'['
name|'fname'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cow'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'create'"
op|','
string|"'-f'"
op|','
string|"'qcow2'"
op|','
string|"'-o'"
op|','
nl|'\n'
string|"'cluster_size=2M,backing_file=%s'"
op|'%'
name|'base'
op|','
nl|'\n'
name|'target'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'cp'"
op|','
name|'base'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image
dedent|''
dedent|''
dedent|''
name|'def'
name|'_fetch_image'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'image_id'
op|','
name|'user'
op|','
name|'project'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Grab image and optionally attempt to resize it"""'
newline|'\n'
name|'images'
op|'.'
name|'fetch'
op|'('
name|'image_id'
op|','
name|'target'
op|','
name|'user'
op|','
name|'project'
op|')'
newline|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'disk'
op|'.'
name|'extend'
op|'('
name|'target'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_local
dedent|''
dedent|''
name|'def'
name|'_create_local'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'local_gb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a blank image of specified size"""'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'truncate'"
op|','
name|'target'
op|','
string|"'-s'"
op|','
string|'"%dG"'
op|'%'
name|'local_gb'
op|')'
newline|'\n'
comment|'# TODO(vish): should we format disk by default?'
nl|'\n'
nl|'\n'
DECL|member|_create_image
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'self'
op|','
name|'inst'
op|','
name|'libvirt_xml'
op|','
name|'suffix'
op|'='
string|"''"
op|','
name|'disk_images'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# syntactic nicety'
nl|'\n'
DECL|function|basepath
indent|'        '
name|'def'
name|'basepath'
op|'('
name|'fname'
op|'='
string|"''"
op|','
name|'suffix'
op|'='
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'fname'
op|'+'
name|'suffix'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure directories exist and are writable'
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'basepath'
op|'('
name|'suffix'
op|'='
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %s: Creating image'"
op|')'
op|','
name|'inst'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'basepath'
op|'('
string|"'libvirt.xml'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'libvirt_xml'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): No need add the suffix to console.log'
nl|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'os'
op|'.'
name|'open'
op|'('
name|'basepath'
op|'('
string|"'console.log'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_WRONLY'
op|','
number|'0660'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'user'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_user'
op|'('
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'project'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'disk_images'
op|':'
newline|'\n'
indent|'            '
name|'disk_images'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'inst'
op|'['
string|"'image_id'"
op|']'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'inst'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'inst'
op|'['
string|"'ramdisk_id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
string|"'%08x'"
op|'%'
name|'int'
op|'('
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'project'
op|'='
name|'project'
op|')'
newline|'\n'
name|'if'
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
string|"'%08x'"
op|'%'
name|'int'
op|'('
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'project'
op|'='
name|'project'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'root_fname'
op|'='
string|"'%08x'"
op|'%'
name|'int'
op|'('
name|'disk_images'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
name|'size'
op|'='
name|'FLAGS'
op|'.'
name|'minimum_root_size'
newline|'\n'
name|'if'
name|'inst'
op|'['
string|"'instance_type'"
op|']'
op|'=='
string|"'m1.tiny'"
name|'or'
name|'suffix'
op|'=='
string|"'.rescue'"
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'None'
newline|'\n'
name|'root_fname'
op|'+='
string|'"_sm"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'root_fname'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'image_id'"
op|']'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'project'
op|'='
name|'project'
op|','
nl|'\n'
name|'size'
op|'='
name|'size'
op|')'
newline|'\n'
name|'type_data'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst'
op|'['
string|"'instance_type'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'type_data'
op|'['
string|"'local_gb'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_create_local'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk.local'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
string|'"local_%s"'
op|'%'
name|'type_data'
op|'['
string|"'local_gb'"
op|']'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'type_data'
op|'['
string|"'local_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# For now, we assume that if we're not using a kernel, we're using a"
nl|'\n'
comment|'# partitioned disk image where the target partition is the first'
nl|'\n'
comment|'# partition'
nl|'\n'
dedent|''
name|'target_partition'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'inst'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'target_partition'
op|'='
string|'"1"'
newline|'\n'
nl|'\n'
dedent|''
name|'key'
op|'='
name|'str'
op|'('
name|'inst'
op|'['
string|"'key_data'"
op|']'
op|')'
newline|'\n'
name|'net'
op|'='
name|'None'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'inst'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'network_ref'
op|'['
string|"'injected'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'admin_context'
op|','
name|'inst'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'ra_server'
op|'='
name|'network_ref'
op|'['
string|"'ra_server'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'ra_server'
op|':'
newline|'\n'
indent|'                '
name|'ra_server'
op|'='
string|'"fd00::"'
newline|'\n'
dedent|''
name|'with'
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'injected_network_template'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|'%'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'network_ref'
op|'['
string|"'netmask'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network_ref'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'network_ref'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
name|'network_ref'
op|'['
string|"'dns'"
op|']'
op|','
nl|'\n'
string|"'ra_server'"
op|':'
name|'ra_server'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'key'
name|'or'
name|'net'
op|':'
newline|'\n'
indent|'            '
name|'inst_name'
op|'='
name|'inst'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'img_id'
op|'='
name|'inst'
op|'.'
name|'image_id'
newline|'\n'
name|'if'
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %(inst_name)s: injecting key into'"
nl|'\n'
string|"' image %(img_id)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'net'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %(inst_name)s: injecting net into'"
nl|'\n'
string|"' image %(img_id)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'inject_data'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
name|'key'
op|','
name|'net'
op|','
nl|'\n'
name|'partition'
op|'='
name|'target_partition'
op|','
nl|'\n'
name|'nbd'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# This could be a windows image, or a vmdk format disk'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'instance %(inst_name)s: ignoring error injecting'"
nl|'\n'
string|"' data into image %(img_id)s (%(e)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'chown'"
op|','
string|"'root'"
op|','
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|to_xml
dedent|''
dedent|''
name|'def'
name|'to_xml'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# TODO(termie): cache?'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: starting toXML method'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
comment|'# FIXME(vish): stick this in db'
nl|'\n'
name|'instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
comment|'# instance_type = test.INSTANCE_TYPES[instance_type]'
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type'
op|')'
newline|'\n'
name|'ip_address'
op|'='
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
comment|'# Assume that the gateway also acts as the dhcp server.'
nl|'\n'
name|'dhcp_server'
op|'='
name|'network'
op|'['
string|"'gateway'"
op|']'
newline|'\n'
name|'ra_server'
op|'='
name|'network'
op|'['
string|"'ra_server'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|','
name|'mask'
op|'='
name|'_get_net_and_mask'
op|'('
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'net_v6'
op|','
name|'prefixlen_v6'
op|'='
name|'_get_net_and_prefixlen'
op|'('
nl|'\n'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|')'
newline|'\n'
name|'extra_params'
op|'='
op|'('
string|'"<parameter name=\\"PROJNET\\" "'
nl|'\n'
string|'"value=\\"%s\\" />\\n"'
nl|'\n'
string|'"<parameter name=\\"PROJMASK\\" "'
nl|'\n'
string|'"value=\\"%s\\" />\\n"'
nl|'\n'
string|'"<parameter name=\\"PROJNETV6\\" "'
nl|'\n'
string|'"value=\\"%s\\" />\\n"'
nl|'\n'
string|'"<parameter name=\\"PROJMASKV6\\" "'
nl|'\n'
string|'"value=\\"%s\\" />\\n"'
op|')'
op|'%'
op|'('
name|'net'
op|','
name|'mask'
op|','
name|'net_v6'
op|','
name|'prefixlen_v6'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|','
name|'mask'
op|'='
name|'_get_net_and_mask'
op|'('
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'extra_params'
op|'='
op|'('
string|'"<parameter name=\\"PROJNET\\" "'
nl|'\n'
string|'"value=\\"%s\\" />\\n"'
nl|'\n'
string|'"<parameter name=\\"PROJMASK\\" "'
nl|'\n'
string|'"value=\\"%s\\" />\\n"'
op|')'
op|'%'
op|'('
name|'net'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'extra_params'
op|'='
string|'"\\n"'
newline|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|':'
newline|'\n'
indent|'            '
name|'driver_type'
op|'='
string|"'qcow2'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'driver_type'
op|'='
string|"'raw'"
newline|'\n'
nl|'\n'
dedent|''
name|'xml_info'
op|'='
op|'{'
string|"'type'"
op|':'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'basepath'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|','
nl|'\n'
string|"'memory_kb'"
op|':'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|'*'
number|'1024'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
name|'instance'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
string|"'ip_address'"
op|':'
name|'ip_address'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
name|'dhcp_server'
op|','
nl|'\n'
string|"'extra_params'"
op|':'
name|'extra_params'
op|','
nl|'\n'
string|"'rescue'"
op|':'
name|'rescue'
op|','
nl|'\n'
string|"'local'"
op|':'
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
op|','
nl|'\n'
string|"'driver_type'"
op|':'
name|'driver_type'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'ra_server'
op|':'
newline|'\n'
indent|'            '
name|'xml_info'
op|'['
string|"'ra_server'"
op|']'
op|'='
name|'ra_server'
op|'+'
string|'"/128"'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'xml_info'
op|'['
string|"'kernel'"
op|']'
op|'='
name|'xml_info'
op|'['
string|"'basepath'"
op|']'
op|'+'
string|'"/kernel"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'xml_info'
op|'['
string|"'ramdisk'"
op|']'
op|'='
name|'xml_info'
op|'['
string|"'basepath'"
op|']'
op|'+'
string|'"/ramdisk"'
newline|'\n'
nl|'\n'
dedent|''
name|'xml_info'
op|'['
string|"'disk'"
op|']'
op|'='
name|'xml_info'
op|'['
string|"'basepath'"
op|']'
op|'+'
string|'"/disk"'
newline|'\n'
nl|'\n'
dedent|''
name|'xml'
op|'='
name|'str'
op|'('
name|'Template'
op|'('
name|'self'
op|'.'
name|'libvirt_xml'
op|','
name|'searchList'
op|'='
op|'['
name|'xml_info'
op|']'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: finished toXML method'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"Instance %s not found"'
op|')'
nl|'\n'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
dedent|''
op|'('
name|'state'
op|','
name|'max_mem'
op|','
name|'mem'
op|','
name|'num_cpu'
op|','
name|'cpu_time'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
name|'cpu_time'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
name|'_'
op|'('
string|'"diagnostics are not supported "'
nl|'\n'
string|'"for libvirt"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_disks
dedent|''
name|'def'
name|'get_disks'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n\n        Returns a list of all block devices for this domain.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
comment|'# TODO(devcamcar): Replace libxml2 with etree.'
nl|'\n'
name|'xml'
op|'='
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'ctx'
op|'='
name|'doc'
op|'.'
name|'xpathNewContext'
op|'('
op|')'
newline|'\n'
name|'disks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'ctx'
op|'.'
name|'xpathEval'
op|'('
string|"'/domain/devices/disk'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'devdst'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                        '
name|'devdst'
op|'='
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'devdst'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'disks'
op|'.'
name|'append'
op|'('
name|'devdst'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'.'
name|'xpathFreeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doc'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'.'
name|'freeDoc'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'disks'
newline|'\n'
nl|'\n'
DECL|member|get_interfaces
dedent|''
name|'def'
name|'get_interfaces'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n\n        Returns a list of all network interfaces for this instance.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
comment|'# TODO(devcamcar): Replace libxml2 with etree.'
nl|'\n'
name|'xml'
op|'='
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'ctx'
op|'='
name|'doc'
op|'.'
name|'xpathNewContext'
op|'('
op|')'
newline|'\n'
name|'interfaces'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'ctx'
op|'.'
name|'xpathEval'
op|'('
string|"'/domain/devices/interface'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'devdst'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                        '
name|'devdst'
op|'='
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'devdst'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'interfaces'
op|'.'
name|'append'
op|'('
name|'devdst'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'.'
name|'xpathFreeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doc'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'.'
name|'freeDoc'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'interfaces'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_total
dedent|''
name|'def'
name|'get_vcpu_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get vcpu number of physical computer.\n\n        :returns: the number of cpu core.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# On certain platforms, this will raise a NotImplementedError.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'multiprocessing'
op|'.'
name|'cpu_count'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Cannot get the number of cpu, because this "'
nl|'\n'
string|'"function is not implemented for this platform. "'
nl|'\n'
string|'"This error can be safely ignored for now."'
op|')'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_total
dedent|''
dedent|''
name|'def'
name|'get_memory_mb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the total memory size(MB) of physical computer.\n\n        :returns: the total amount of memory(MB).\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'LINUX2'"
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'meminfo'
op|'='
name|'open'
op|'('
string|"'/proc/meminfo'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'idx'
op|'='
name|'meminfo'
op|'.'
name|'index'
op|'('
string|"'MemTotal:'"
op|')'
newline|'\n'
comment|'# transforming kb to mb.'
nl|'\n'
name|'return'
name|'int'
op|'('
name|'meminfo'
op|'['
name|'idx'
op|'+'
number|'1'
op|']'
op|')'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_total
dedent|''
name|'def'
name|'get_local_gb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the total hdd size(GB) of physical computer.\n\n        :returns:\n            The total amount of HDD(GB).\n            Note that this value shows a partition where\n            NOVA-INST-DIR/instances mounts.\n\n        """'
newline|'\n'
nl|'\n'
name|'hddinfo'
op|'='
name|'os'
op|'.'
name|'statvfs'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
name|'return'
name|'hddinfo'
op|'.'
name|'f_frsize'
op|'*'
name|'hddinfo'
op|'.'
name|'f_blocks'
op|'/'
number|'1024'
op|'/'
number|'1024'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_used
dedent|''
name|'def'
name|'get_vcpu_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Get vcpu usage number of physical computer.\n\n        :returns: The total number of vcpu that currently used.\n\n        """'
newline|'\n'
nl|'\n'
name|'total'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'dom_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'dom_id'
op|')'
newline|'\n'
name|'total'
op|'+='
name|'len'
op|'('
name|'dom'
op|'.'
name|'vcpus'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'total'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_used
dedent|''
name|'def'
name|'get_memory_mb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the free memory size(MB) of physical computer.\n\n        :returns: the total usage of memory(MB).\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'LINUX2'"
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'m'
op|'='
name|'open'
op|'('
string|"'/proc/meminfo'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'idx1'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'MemFree:'"
op|')'
newline|'\n'
name|'idx2'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'Buffers:'"
op|')'
newline|'\n'
name|'idx3'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'Cached:'"
op|')'
newline|'\n'
name|'avail'
op|'='
op|'('
name|'int'
op|'('
name|'m'
op|'['
name|'idx1'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
name|'int'
op|'('
name|'m'
op|'['
name|'idx2'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
name|'int'
op|'('
name|'m'
op|'['
name|'idx3'
op|'+'
number|'1'
op|']'
op|')'
op|')'
op|'/'
number|'1024'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|'-'
name|'avail'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_used
dedent|''
name|'def'
name|'get_local_gb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the free hdd size(GB) of physical computer.\n\n        :returns:\n           The total usage of HDD(GB).\n           Note that this value shows a partition where\n           NOVA-INST-DIR/instances mounts.\n\n        """'
newline|'\n'
nl|'\n'
name|'hddinfo'
op|'='
name|'os'
op|'.'
name|'statvfs'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
name|'avail'
op|'='
name|'hddinfo'
op|'.'
name|'f_frsize'
op|'*'
name|'hddinfo'
op|'.'
name|'f_bavail'
op|'/'
number|'1024'
op|'/'
number|'1024'
op|'/'
number|'1024'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
op|'-'
name|'avail'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_type
dedent|''
name|'def'
name|'get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get hypervisor type.\n\n        :returns: hypervisor type (ex. qemu)\n\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getType'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_version
dedent|''
name|'def'
name|'get_hypervisor_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get hypervisor version.\n\n        :returns: hypervisor version (ex. 12003)\n\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getVersion'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_cpu_info
dedent|''
name|'def'
name|'get_cpu_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get cpuinfo information.\n\n        Obtains cpu feature from virConnect.getCapabilities,\n        and returns as a json string.\n\n        :return: see above description\n\n        """'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'nodes'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid xml. \'<cpu>\' must be 1,"'
nl|'\n'
string|'"but %d\\n"'
op|')'
op|'%'
name|'len'
op|'('
name|'nodes'
op|')'
nl|'\n'
op|'+'
name|'xml'
op|'.'
name|'serialize'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cpu_info'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'arch_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/arch'"
op|')'
newline|'\n'
name|'if'
name|'arch_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'arch'"
op|']'
op|'='
name|'arch_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'model_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/model'"
op|')'
newline|'\n'
name|'if'
name|'model_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'model'"
op|']'
op|'='
name|'model_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vendor_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/vendor'"
op|')'
newline|'\n'
name|'if'
name|'vendor_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'vendor'"
op|']'
op|'='
name|'vendor_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'topology_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/topology'"
op|')'
newline|'\n'
name|'topology'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'topology_nodes'
op|':'
newline|'\n'
indent|'            '
name|'topology_node'
op|'='
name|'topology_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'get_properties'
op|'('
op|')'
newline|'\n'
name|'while'
name|'topology_node'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'topology_node'
op|'.'
name|'get_name'
op|'('
op|')'
newline|'\n'
name|'topology'
op|'['
name|'name'
op|']'
op|'='
name|'topology_node'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
name|'topology_node'
op|'='
name|'topology_node'
op|'.'
name|'get_next'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'keys'
op|'='
op|'['
string|"'cores'"
op|','
string|"'sockets'"
op|','
string|"'threads'"
op|']'
newline|'\n'
name|'tkeys'
op|'='
name|'topology'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'if'
name|'set'
op|'('
name|'tkeys'
op|')'
op|'!='
name|'set'
op|'('
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ks'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid xml: topology"'
nl|'\n'
string|'"(%(topology)s) must have "'
nl|'\n'
string|'"%(ks)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'feature_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/feature'"
op|')'
newline|'\n'
name|'features'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'for'
name|'nodes'
name|'in'
name|'feature_nodes'
op|':'
newline|'\n'
indent|'            '
name|'features'
op|'.'
name|'append'
op|'('
name|'nodes'
op|'.'
name|'get_properties'
op|'('
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cpu_info'
op|'['
string|"'topology'"
op|']'
op|'='
name|'topology'
newline|'\n'
name|'cpu_info'
op|'['
string|"'features'"
op|']'
op|'='
name|'features'
newline|'\n'
name|'return'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|block_stats
dedent|''
name|'def'
name|'block_stats'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'disk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'domain'
op|'.'
name|'blockStats'
op|'('
name|'disk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|interface_stats
dedent|''
name|'def'
name|'interface_stats'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'domain'
op|'.'
name|'interfaceStats'
op|'('
name|'interface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
comment|'#TODO(mdragon): console proxy should be implemented for libvirt,'
nl|'\n'
comment|'#               in case someone wants to use it with kvm or'
nl|'\n'
comment|'#               such. For now return fake data.'
nl|'\n'
indent|'        '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'username'"
op|':'
string|"'fakeuser'"
op|','
nl|'\n'
string|"'password'"
op|':'
string|"'fakepassword'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_available_resource
dedent|''
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates compute manager resource info on ComputeNode table.\n\n        This method is called when nova-coompute launches, and\n        whenever admin executes "nova-manage service update_resource".\n\n        :param ctxt: security context\n        :param host: hostname that compute manager is currently running\n\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'service_ref'
op|'='
name|'db'
op|'.'
name|'service_get_all_compute_by_host'
op|'('
name|'ctxt'
op|','
name|'host'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Cannot update compute manager "'
nl|'\n'
string|'"specific info, because no service "'
nl|'\n'
string|'"record was found."'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Updating host information'
nl|'\n'
dedent|''
name|'dic'
op|'='
op|'{'
string|"'vcpus'"
op|':'
name|'self'
op|'.'
name|'get_vcpu_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'self'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'self'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
name|'self'
op|'.'
name|'get_vcpu_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'self'
op|'.'
name|'get_memory_mb_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'self'
op|'.'
name|'get_local_gb_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'self'
op|'.'
name|'get_hypervisor_type'
op|'('
op|')'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'self'
op|'.'
name|'get_hypervisor_version'
op|'('
op|')'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
name|'self'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'compute_node_ref'
op|'='
name|'service_ref'
op|'['
string|"'compute_node'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'compute_node_ref'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record created for %s '"
op|')'
op|'%'
name|'host'
op|')'
newline|'\n'
name|'dic'
op|'['
string|"'service_id'"
op|']'
op|'='
name|'service_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_create'
op|'('
name|'ctxt'
op|','
name|'dic'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record updated for %s '"
op|')'
op|'%'
name|'host'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_update'
op|'('
name|'ctxt'
op|','
name|'compute_node_ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'dic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compare_cpu
dedent|''
dedent|''
name|'def'
name|'compare_cpu'
op|'('
name|'self'
op|','
name|'cpu_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks the host cpu is compatible to a cpu given by xml.\n\n        "xml" must be a part of libvirt.openReadonly().getCapabilities().\n        return values follows by virCPUCompareResult.\n        if 0 > return value, do live migration.\n        \'http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult\'\n\n        :param cpu_info: json string that shows cpu feature(see get_cpu_info())\n        :returns:\n            None. if given cpu info is not compatible to this server,\n            raise exception.\n\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance launched has CPU info:\\n%s'"
op|')'
op|'%'
name|'cpu_info'
op|')'
newline|'\n'
name|'dic'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'str'
op|'('
name|'Template'
op|'('
name|'self'
op|'.'
name|'cpuinfo_xml'
op|','
name|'searchList'
op|'='
name|'dic'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'to xml...\\n:%s '"
op|'%'
name|'xml'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'u'
op|'='
string|'"http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult"'
newline|'\n'
name|'m'
op|'='
name|'_'
op|'('
string|'"CPU doesn\'t have compatibility.\\n\\n%(ret)s\\n\\nRefer to %(u)s"'
op|')'
newline|'\n'
comment|'# unknown character exists in xml, then libvirt complains'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'('
name|'xml'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'e'
op|'.'
name|'message'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'m'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ret'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'m'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
DECL|member|ensure_filtering_rules_for_instance
dedent|''
name|'def'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setting up filtering rules and waiting for its completion.\n\n        To migrate an instance, filtering rules to hypervisors\n        and firewalls are inevitable on destination host.\n        ( Waiting only for filterling rules to hypervisor,\n        since filtering rules to firewall rules can be set faster).\n\n        Concretely, the below method must be called.\n        - setup_basic_filtering (for nova-basic, etc.)\n        - prepare_instance_filter(for nova-instance-instance-xxx, etc.)\n\n        to_xml may have to be called since it defines PROJNET, PROJMASK.\n        but libvirt migrates those value through migrateToURI(),\n        so , no need to be called.\n\n        Don\'t use thread for this method since migration should\n        not be started when setting-up filtering rules operations\n        are not completed.\n\n        :params instance_ref: nova.db.sqlalchemy.models.Instance object\n\n        """'
newline|'\n'
nl|'\n'
comment|'# If any instances never launch at destination host,'
nl|'\n'
comment|'# basic-filtering must be set here.'
nl|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
comment|'# setting up n)ova-instance-instance-xx mainly.'
nl|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for completion'
nl|'\n'
name|'timeout_count'
op|'='
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_retry_count'
op|')'
newline|'\n'
name|'while'
name|'timeout_count'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'filter_name'
op|'='
string|"'nova-instance-%s'"
op|'%'
name|'instance_ref'
op|'.'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'filter_name'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'                '
name|'timeout_count'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'timeout_count'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'ec2_id'
op|'='
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
name|'iname'
op|'='
name|'instance_ref'
op|'.'
name|'name'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Timeout migrating for %(ec2_id)s(%(iname)s)'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
dedent|''
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawning live_migration operation for distributing high-load.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params dest: destination host\n        :params post_method:\n            post operation method.\n            expected nova.compute.manager.post_live_migration.\n        :params recover_method:\n            recovery method when any exception occurs.\n            expected nova.compute.manager.recover_live_migration.\n\n        """'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_live_migration'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_live_migration
dedent|''
name|'def'
name|'_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do live migration.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params dest: destination host\n        :params post_method:\n            post operation method.\n            expected nova.compute.manager.post_live_migration.\n        :params recover_method:\n            recovery method when any exception occurs.\n            expected nova.compute.manager.recover_live_migration.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# Do live migration.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'flaglist'
op|'='
name|'FLAGS'
op|'.'
name|'live_migration_flag'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'flagvals'
op|'='
op|'['
name|'getattr'
op|'('
name|'libvirt'
op|','
name|'x'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'flaglist'
op|']'
newline|'\n'
name|'logical_sum'
op|'='
name|'reduce'
op|'('
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'x'
op|'|'
name|'y'
op|','
name|'flagvals'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'read_only'
op|':'
newline|'\n'
indent|'                '
name|'tmpconn'
op|'='
name|'self'
op|'.'
name|'_connect'
op|'('
name|'self'
op|'.'
name|'libvirt_uri'
op|','
name|'False'
op|')'
newline|'\n'
name|'dom'
op|'='
name|'tmpconn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
nl|'\n'
name|'logical_sum'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
newline|'\n'
name|'tmpconn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
nl|'\n'
name|'logical_sum'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'recover_method'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
comment|'# Waiting for completion of live_migration.'
nl|'\n'
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|wait_for_live_migration
name|'def'
name|'wait_for_live_migration'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""waiting for live migration completion"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'post_method'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'wait_for_live_migration'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See comments of same method in firewall_driver."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FirewallDriver
dedent|''
dedent|''
name|'class'
name|'FirewallDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|prepare_instance_filter
indent|'    '
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prepare filters for the instance.\n\n        At this point, the instance isn\'t running yet."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop filtering instance"""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply instance filter.\n\n        Once this method returns, the instance should be firewalled\n        appropriately. This method should as far as possible be a\n        no-op. It\'s vastly preferred to get everything set up in\n        prepare_instance_filter.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Refresh security group rules from data store\n\n        Gets called when a rule has been added to or removed from\n        the security group."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Refresh security group members from data store\n\n        Gets called when an instance gets added to or removed from\n        the security group."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create rules to block spoofing and allow dhcp.\n\n        This gets called when spawning an instance, before\n        :method:`prepare_instance_filter`.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ra_server_for_instance
dedent|''
name|'def'
name|'_ra_server_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'network'
op|'['
string|"'ra_server'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterFirewall
dedent|''
dedent|''
name|'class'
name|'NWFilterFirewall'
op|'('
name|'FirewallDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class implements a network filtering mechanism versatile\n    enough for EC2 style Security Group filtering by leveraging\n    libvirt\'s nwfilter.\n\n    First, all instances get a filter ("nova-base-filter") applied.\n    This filter provides some basic security such as protection against\n    MAC spoofing, IP spoofing, and ARP spoofing.\n\n    This filter drops all incoming ipv4 and ipv6 connections.\n    Outgoing connections are never blocked.\n\n    Second, every security group maps to a nwfilter filter(*).\n    NWFilters can be updated at runtime and changes are applied\n    immediately, so changes to security groups can be applied at\n    runtime (as mandated by the spec).\n\n    Security group rules are named "nova-secgroup-<id>" where <id>\n    is the internal id of the security group. They\'re applied only on\n    hosts that have instances in the security group in question.\n\n    Updates to security groups are done by updating the data model\n    (in response to API calls) followed by a request sent to all\n    the nodes with instances in the security group to refresh the\n    security group.\n\n    Each instance has its own NWFilter, which references the above\n    mentioned security group NWFilters. This was done because\n    interfaces can only reference one filter while filters can\n    reference multiple other filters. This has the added benefit of\n    actually being able to add and remove security groups from an\n    instance at run time. This functionality is not exposed anywhere,\n    though.\n\n    Outstanding questions:\n\n    The name is unique, so would there be any good reason to sync\n    the uuid across the nodes (by assigning it from the datamodel)?\n\n\n    (*) This sentence brought to you by the redundancy department of\n        redundancy.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'get_connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_libvirt_get_connection'
op|'='
name|'get_connection'
newline|'\n'
name|'self'
op|'.'
name|'static_filters_configured'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'handle_security_groups'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No-op. Everything is done in prepare_instance_filter"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_libvirt_get_connection'
op|'('
op|')'
newline|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|nova_dhcp_filter
name|'def'
name|'nova_dhcp_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The standard allow-dhcp-server filter is an <ip> one, so it uses\n           ebtables to allow traffic through. Without a corresponding rule in\n           iptables, it\'ll get blocked anyway."""'
newline|'\n'
nl|'\n'
name|'return'
string|"'''<filter name='nova-allow-dhcp-server' chain='ipv4'>\n                    <uuid>891e4787-e5c0-d59b-cbd6-41bc3c6b36fc</uuid>\n                    <rule action='accept' direction='out'\n                          priority='100'>\n                      <udp srcipaddr='0.0.0.0'\n                           dstipaddr='255.255.255.255'\n                           srcportstart='68'\n                           dstportstart='67'/>\n                    </rule>\n                    <rule action='accept' direction='in'\n                          priority='100'>\n                      <udp srcipaddr='$DHCPSERVER'\n                           srcportstart='67'\n                           dstportstart='68'/>\n                    </rule>\n                  </filter>'''"
newline|'\n'
nl|'\n'
DECL|member|nova_ra_filter
dedent|''
name|'def'
name|'nova_ra_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'''<filter name='nova-allow-ra-server' chain='root'>\n                            <uuid>d707fa71-4fb5-4b27-9ab7-ba5ca19c8804</uuid>\n                              <rule action='accept' direction='inout'\n                                    priority='100'>\n                                <icmpv6 srcipaddr='$RASERVER'/>\n                              </rule>\n                            </filter>'''"
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up basic filtering (MAC, IP, and ARP spoofing protection)"""'
newline|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|"'called setup_basic_filtering in nwfilter'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'handle_security_groups'
op|':'
newline|'\n'
comment|"# No point in setting up a filter set that we'll be overriding"
nl|'\n'
comment|'# anyway.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'logging'
op|'.'
name|'info'
op|'('
string|"'ensuring static filters'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_static_filters'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_filter_name'
op|','
nl|'\n'
op|'['
string|"'nova-base'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_static_filters
dedent|''
name|'def'
name|'_ensure_static_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'static_filters_configured'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
string|"'nova-base'"
op|','
nl|'\n'
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_base_ipv4_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_base_ipv6_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_dhcp_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_ra_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_vpn_filter'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_project_filter'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_project_filter_v6'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'static_filters_configured'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_filter_container
dedent|''
name|'def'
name|'_filter_container'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|"'''<filter name='%s' chain='root'>%s</filter>'''"
op|'%'
op|'('
nl|'\n'
name|'name'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|'"<filterref filter=\'%s\'/>"'
op|'%'
op|'('
name|'f'
op|','
op|')'
name|'for'
name|'f'
name|'in'
name|'filters'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
dedent|''
name|'nova_vpn_filter'
op|'='
string|"'''<filter name='nova-vpn' chain='root'>\n                           <uuid>2086015e-cf03-11df-8c5d-080027c27973</uuid>\n                           <filterref filter='allow-dhcp-server'/>\n                           <filterref filter='nova-allow-dhcp-server'/>\n                           <filterref filter='nova-base-ipv4'/>\n                           <filterref filter='nova-base-ipv6'/>\n                         </filter>'''"
newline|'\n'
nl|'\n'
DECL|member|nova_base_ipv4_filter
name|'def'
name|'nova_base_ipv4_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-base-ipv4\' chain=\'ipv4\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'direction'
op|','
name|'action'
op|','
name|'priority'
name|'in'
op|'['
op|'('
string|"'out'"
op|','
string|"'accept'"
op|','
number|'399'
op|')'
op|','
nl|'\n'
op|'('
string|"'in'"
op|','
string|"'drop'"
op|','
number|'400'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'retval'
op|'+='
string|'"""<rule action=\'%s\' direction=\'%s\' priority=\'%d\'>\n                               <%s />\n                             </rule>"""'
op|'%'
op|'('
name|'action'
op|','
name|'direction'
op|','
nl|'\n'
name|'priority'
op|','
name|'protocol'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|nova_base_ipv6_filter
dedent|''
name|'def'
name|'nova_base_ipv6_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-base-ipv6\' chain=\'ipv6\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp-ipv6'"
op|','
string|"'udp-ipv6'"
op|','
string|"'icmpv6'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'direction'
op|','
name|'action'
op|','
name|'priority'
name|'in'
op|'['
op|'('
string|"'out'"
op|','
string|"'accept'"
op|','
number|'399'
op|')'
op|','
nl|'\n'
op|'('
string|"'in'"
op|','
string|"'drop'"
op|','
number|'400'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'retval'
op|'+='
string|'"""<rule action=\'%s\' direction=\'%s\' priority=\'%d\'>\n                               <%s />\n                             </rule>"""'
op|'%'
op|'('
name|'action'
op|','
name|'direction'
op|','
nl|'\n'
name|'priority'
op|','
name|'protocol'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|nova_project_filter
dedent|''
name|'def'
name|'nova_project_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-project\' chain=\'ipv4\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'+='
string|'"""<rule action=\'accept\' direction=\'in\' priority=\'200\'>\n                           <%s srcipaddr=\'$PROJNET\' srcipmask=\'$PROJMASK\' />\n                         </rule>"""'
op|'%'
name|'protocol'
newline|'\n'
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|nova_project_filter_v6
dedent|''
name|'def'
name|'nova_project_filter_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-project-v6\' chain=\'ipv6\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp-ipv6'"
op|','
string|"'udp-ipv6'"
op|','
string|"'icmpv6'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'+='
string|'"""<rule action=\'accept\' direction=\'inout\'\n                                                   priority=\'200\'>\n                           <%s srcipaddr=\'$PROJNETV6\'\n                               srcipmask=\'$PROJMASKV6\' />\n                         </rule>"""'
op|'%'
op|'('
name|'protocol'
op|')'
newline|'\n'
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|_define_filter
dedent|''
name|'def'
name|'_define_filter'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'callable'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'='
name|'xml'
op|'('
op|')'
newline|'\n'
comment|'# execute in a native thread and block current greenthread until done'
nl|'\n'
dedent|''
name|'tpool'
op|'.'
name|'execute'
op|'('
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterDefineXML'
op|','
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'# Nothing to do'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
dedent|''
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates an NWFilter for the given instance. In the process,\n        it makes sure the filters for the security groups as well as\n        the base filter are all in place.\n        """'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'image_id'"
op|']'
op|'=='
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-vpn'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-base'"
newline|'\n'
nl|'\n'
dedent|''
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance_secgroup_filter_name'
op|'='
string|"'%s-secgroup'"
op|'%'
op|'('
name|'instance_filter_name'
op|','
op|')'
newline|'\n'
name|'instance_filter_children'
op|'='
op|'['
name|'base_filter'
op|','
name|'instance_secgroup_filter_name'
op|']'
newline|'\n'
name|'instance_secgroup_filter_children'
op|'='
op|'['
string|"'nova-base-ipv4'"
op|','
nl|'\n'
string|"'nova-base-ipv6'"
op|','
nl|'\n'
string|"'nova-allow-dhcp-server'"
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'ra_server'
op|'='
name|'self'
op|'.'
name|'_ra_server_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'ra_server'
op|':'
newline|'\n'
indent|'                '
name|'instance_secgroup_filter_children'
op|'+='
op|'['
string|"'nova-allow-ra-server'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'instance_filter_children'
op|'+='
op|'['
string|"'nova-project'"
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'instance_filter_children'
op|'+='
op|'['
string|"'nova-project-v6'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'security_group'
name|'in'
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance_secgroup_filter_children'
op|'+='
op|'['
op|'('
string|"'nova-secgroup-%s'"
op|'%'
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_secgroup_filter_name'
op|','
nl|'\n'
name|'instance_secgroup_filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_filter_name'
op|','
nl|'\n'
name|'instance_filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'security_group_to_nwfilter_xml'
op|'('
name|'security_group_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|security_group_to_nwfilter_xml
dedent|''
name|'def'
name|'security_group_to_nwfilter_xml'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'security_group_id'
op|')'
newline|'\n'
name|'rule_xml'
op|'='
string|'""'
newline|'\n'
name|'v6protocol'
op|'='
op|'{'
string|"'tcp'"
op|':'
string|"'tcp-ipv6'"
op|','
string|"'udp'"
op|':'
string|"'udp-ipv6'"
op|','
string|"'icmp'"
op|':'
string|"'icmpv6'"
op|'}'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'rule_xml'
op|'+='
string|'"<rule action=\'accept\' direction=\'in\' priority=\'300\'>"'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'version'
op|'='
name|'_get_ip_version'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
name|'and'
name|'version'
op|'=='
number|'6'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|','
name|'prefixlen'
op|'='
name|'_get_net_and_prefixlen'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'v6protocol'
op|'['
name|'rule'
op|'.'
name|'protocol'
op|']'
op|','
name|'net'
op|','
name|'prefixlen'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|','
name|'mask'
op|'='
name|'_get_net_and_mask'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'protocol'
op|','
name|'net'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'rule_xml'
op|'+='
string|'"dstportstart=\'%s\' dstportend=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'rule.protocol: %r, rule.from_port: %r, '"
nl|'\n'
string|"'rule.to_port: %r'"
op|','
name|'rule'
op|'.'
name|'protocol'
op|','
nl|'\n'
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'from_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'rule_xml'
op|'+='
string|'"type=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'to_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'rule_xml'
op|'+='
string|'"code=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'rule_xml'
op|'+='
string|"'/>\\n'"
newline|'\n'
dedent|''
name|'rule_xml'
op|'+='
string|'"</rule>\\n"'
newline|'\n'
dedent|''
name|'xml'
op|'='
string|'"<filter name=\'nova-secgroup-%s\' "'
op|'%'
name|'security_group_id'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'root\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'ipv4\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|_instance_filter_name
dedent|''
name|'def'
name|'_instance_filter_name'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'nova-instance-%s'"
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallDriver
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallDriver'
op|'('
name|'FirewallDriver'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'execute'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'='
name|'linux_net'
op|'.'
name|'iptables_manager'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'nwfilter'
op|'='
name|'NWFilterFirewall'
op|'('
name|'kwargs'
op|'['
string|"'get_connection'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'sg-fallback'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'sg-fallback'"
op|','
string|"'-j DROP'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'sg-fallback'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'sg-fallback'"
op|','
string|"'-j DROP'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use NWFilter from libvirt for this."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'nwfilter'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No-op. Everything is done in prepare_instance_filter"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'pop'
op|'('
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Attempted to unfilter instance %s which is not '"
nl|'\n'
string|"'filtered'"
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
dedent|''
dedent|''
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instances'
op|'['
name|'instance'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'instance'
newline|'\n'
name|'self'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_filters_for_instance
dedent|''
name|'def'
name|'add_filters_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chain_name'
op|'='
name|'self'
op|'.'
name|'_instance_chain_name'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
name|'ipv4_address'
op|'='
name|'self'
op|'.'
name|'_ip_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'local'"
op|','
nl|'\n'
string|"'-d %s -j $%s'"
op|'%'
nl|'\n'
op|'('
name|'ipv4_address'
op|','
name|'chain_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
name|'ipv6_address'
op|'='
name|'self'
op|'.'
name|'_ip_for_instance_v6'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'local'"
op|','
nl|'\n'
string|"'-d %s -j $%s'"
op|'%'
nl|'\n'
op|'('
name|'ipv6_address'
op|','
nl|'\n'
name|'chain_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ipv4_rules'
op|','
name|'ipv6_rules'
op|'='
name|'self'
op|'.'
name|'instance_rules'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'rule'
name|'in'
name|'ipv4_rules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain_name'
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'rule'
name|'in'
name|'ipv6_rules'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain_name'
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_filters_for_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'remove_filters_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chain_name'
op|'='
name|'self'
op|'.'
name|'_instance_chain_name'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'remove_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'remove_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_rules
dedent|''
dedent|''
name|'def'
name|'instance_rules'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ipv4_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'ipv6_rules'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Always drop invalid packets'
nl|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-m state --state '"
string|"'INVALID -j DROP'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-m state --state '"
string|"'INVALID -j DROP'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Allow established connections'
nl|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-m state --state ESTABLISHED,RELATED -j ACCEPT'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-m state --state ESTABLISHED,RELATED -j ACCEPT'"
op|']'
newline|'\n'
nl|'\n'
name|'dhcp_server'
op|'='
name|'self'
op|'.'
name|'_dhcp_server_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-s %s -p udp --sport 67 --dport 68 '"
nl|'\n'
string|"'-j ACCEPT'"
op|'%'
op|'('
name|'dhcp_server'
op|','
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'#Allow project network traffic'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'cidr'
op|'='
name|'self'
op|'.'
name|'_project_cidr_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-s %s -j ACCEPT'"
op|'%'
op|'('
name|'cidr'
op|','
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# We wrap these in FLAGS.use_ipv6 because they might cause'
nl|'\n'
comment|'# a DB lookup. The other ones are just list operations, so'
nl|'\n'
comment|"# they're not worth the clutter."
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
comment|'# Allow RA responses'
nl|'\n'
indent|'            '
name|'ra_server'
op|'='
name|'self'
op|'.'
name|'_ra_server_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'ra_server'
op|':'
newline|'\n'
indent|'                '
name|'ipv6_rules'
op|'+='
op|'['
string|"'-s %s/128 -p icmpv6 -j ACCEPT'"
op|'%'
op|'('
name|'ra_server'
op|','
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'#Allow project network traffic'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'                '
name|'cidrv6'
op|'='
name|'self'
op|'.'
name|'_project_cidrv6_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-s %s -j ACCEPT'"
op|'%'
op|'('
name|'cidrv6'
op|','
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'security_groups'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# then, security group chains and rules'
nl|'\n'
name|'for'
name|'security_group'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'rules'
op|'='
name|'db'
op|'.'
name|'security_group_rule_get_by_security_group'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'%r'"
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'rule'
op|'.'
name|'cidr'
op|':'
newline|'\n'
comment|'# Eventually, a mechanism to grant access for security'
nl|'\n'
comment|"# groups will turn up here. It'll use ipsets."
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'version'
op|'='
name|'_get_ip_version'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'if'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                    '
name|'rules'
op|'='
name|'ipv4_rules'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'rules'
op|'='
name|'ipv6_rules'
newline|'\n'
nl|'\n'
dedent|''
name|'protocol'
op|'='
name|'rule'
op|'.'
name|'protocol'
newline|'\n'
name|'if'
name|'version'
op|'=='
number|'6'
name|'and'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'protocol'
op|'='
string|"'icmpv6'"
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'['
string|"'-p'"
op|','
name|'protocol'
op|','
string|"'-s'"
op|','
name|'rule'
op|'.'
name|'cidr'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'protocol'
name|'in'
op|'['
string|"'udp'"
op|','
string|"'tcp'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'rule'
op|'.'
name|'from_port'
op|'=='
name|'rule'
op|'.'
name|'to_port'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'+='
op|'['
string|"'--dport'"
op|','
string|"'%s'"
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'multiport'"
op|','
nl|'\n'
string|"'--dports'"
op|','
string|"'%s:%s'"
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
nl|'\n'
name|'rule'
op|'.'
name|'to_port'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'icmp_type'
op|'='
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
name|'icmp_code'
op|'='
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
nl|'\n'
name|'if'
name|'icmp_type'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'icmp_type_arg'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'icmp_type_arg'
op|'='
string|"'%s'"
op|'%'
name|'icmp_type'
newline|'\n'
name|'if'
name|'not'
name|'icmp_code'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                            '
name|'icmp_type_arg'
op|'+='
string|"'/%s'"
op|'%'
name|'icmp_code'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'icmp_type_arg'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                            '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'icmp'"
op|','
string|"'--icmp-type'"
op|','
nl|'\n'
name|'icmp_type_arg'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                            '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'icmp6'"
op|','
string|"'--icmpv6-type'"
op|','
nl|'\n'
name|'icmp_type_arg'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'args'
op|'+='
op|'['
string|"'-j ACCEPT'"
op|']'
newline|'\n'
name|'rules'
op|'+='
op|'['
string|"' '"
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ipv4_rules'
op|'+='
op|'['
string|"'-j $sg-fallback'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-j $sg-fallback'"
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'ipv4_rules'
op|','
name|'ipv6_rules'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
comment|'# We use the semaphore to make sure noone applies the rule set'
nl|'\n'
comment|"# after we've yanked the existing rules but before we've put in"
nl|'\n'
comment|'# the new ones.'
nl|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'semaphore'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'remove_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_security_group_chain_name
dedent|''
name|'def'
name|'_security_group_chain_name'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'nova-sg-%s'"
op|'%'
op|'('
name|'security_group_id'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_chain_name
dedent|''
name|'def'
name|'_instance_chain_name'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'inst-%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ip_for_instance
dedent|''
name|'def'
name|'_ip_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ip_for_instance_v6
dedent|''
name|'def'
name|'_ip_for_instance_v6'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_get_fixed_address_v6'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_dhcp_server_for_instance
dedent|''
name|'def'
name|'_dhcp_server_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'network'
op|'['
string|"'gateway'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_ra_server_for_instance
dedent|''
name|'def'
name|'_ra_server_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'network'
op|'['
string|"'ra_server'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_project_cidr_for_instance
dedent|''
name|'def'
name|'_project_cidr_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'network'
op|'['
string|"'cidr'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_project_cidrv6_for_instance
dedent|''
name|'def'
name|'_project_cidrv6_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA connection to a hypervisor through libvirt.\n\nSupports KVM, LXC, QEMU, UML, and XEN.\n\n**Related Flags**\n\n:libvirt_type:  Libvirt domain type.  Can be kvm, qemu, uml, xen\n                (default: kvm).\n:libvirt_uri:  Override for the default libvirt URI (depends on libvirt_type).\n:libvirt_xml_template:  Libvirt XML Template.\n:rescue_image_id:  Rescue ami image (default: ami-rescue).\n:rescue_kernel_id:  Rescue aki image (default: aki-rescue).\n:rescue_ramdisk_id:  Rescue ari image (default: ari-rescue).\n:injected_network_template:  Template file for injected network\n:allow_project_net_traffic:  Whether to allow in project network traffic\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'multiprocessing'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
name|'import'
name|'ElementTree'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
nl|'\n'
name|'import'
name|'IPy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
comment|'#from nova import test'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'vnc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
DECL|variable|libxml2
name|'libxml2'
op|'='
name|'None'
newline|'\n'
DECL|variable|Template
name|'Template'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.virt.libvirt_conn'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
comment|'# TODO(vish): These flags should probably go into a shared location'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_image_id'"
op|','
string|"'ami-rescue'"
op|','
string|"'Rescue ami image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_kernel_id'"
op|','
string|"'aki-rescue'"
op|','
string|"'Rescue aki image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_ramdisk_id'"
op|','
string|"'ari-rescue'"
op|','
string|"'Rescue ari image'"
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/libvirt.xml.template'"
op|')'
op|','
nl|'\n'
string|"'Libvirt XML Template'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_type'"
op|','
nl|'\n'
string|"'kvm'"
op|','
nl|'\n'
string|"'Libvirt domain type (valid options are: '"
nl|'\n'
string|"'kvm, lxc, qemu, uml, xen)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_uri'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'Override the default libvirt URI (which is dependent'"
nl|'\n'
string|"' on libvirt_type)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'allow_project_net_traffic'"
op|','
nl|'\n'
name|'True'
op|','
nl|'\n'
string|"'Whether to allow in project network traffic'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_cow_images'"
op|','
nl|'\n'
name|'True'
op|','
nl|'\n'
string|"'Whether to use cow images'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'ajaxterm_portrange'"
op|','
nl|'\n'
string|"'10000-12000'"
op|','
nl|'\n'
string|"'Range of ports that ajaxterm should randomly try to bind'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'firewall_driver'"
op|','
nl|'\n'
string|"'nova.virt.libvirt_conn.IptablesFirewallDriver'"
op|','
nl|'\n'
string|"'Firewall driver (defaults to iptables)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'cpuinfo_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/cpuinfo.xml.template'"
op|')'
op|','
nl|'\n'
string|"'CpuInfo XML Template (Used only live migration now)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'live_migration_uri'"
op|','
nl|'\n'
string|'"qemu+tcp://%s/system"'
op|','
nl|'\n'
string|"'Define protocol used by live_migration feature'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'live_migration_flag'"
op|','
nl|'\n'
string|'"VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER"'
op|','
nl|'\n'
string|"'Define live migration behavior.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'live_migration_bandwidth'"
op|','
number|'0'
op|','
nl|'\n'
string|"'Define live migration behavior'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'qemu_img'"
op|','
string|"'qemu-img'"
op|','
nl|'\n'
string|"'binary to use for qemu-img commands'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'start_guests_on_host_boot'"
op|','
name|'False'
op|','
nl|'\n'
string|"'Whether to restart guests when the host reboots'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_connection
name|'def'
name|'get_connection'
op|'('
name|'read_only'
op|')'
op|':'
newline|'\n'
comment|"# These are loaded late so that there's no need to install these"
nl|'\n'
comment|'# libraries when not using libvirt.'
nl|'\n'
comment|'# Cheetah is separate because the unit tests want to load Cheetah,'
nl|'\n'
comment|'# but not libvirt.'
nl|'\n'
indent|'    '
name|'global'
name|'libvirt'
newline|'\n'
name|'global'
name|'libxml2'
newline|'\n'
name|'if'
name|'libvirt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'libxml2'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libxml2'
op|'='
name|'__import__'
op|'('
string|"'libxml2'"
op|')'
newline|'\n'
dedent|''
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'return'
name|'LibvirtConnection'
op|'('
name|'read_only'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_late_load_cheetah
dedent|''
name|'def'
name|'_late_load_cheetah'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'Template'
newline|'\n'
name|'if'
name|'Template'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'__import__'
op|'('
string|"'Cheetah.Template'"
op|','
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
op|'['
string|"'Template'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'Template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_net_and_mask
dedent|''
dedent|''
name|'def'
name|'_get_net_and_mask'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'net'
op|'.'
name|'net'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'net'
op|'.'
name|'netmask'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_net_and_prefixlen
dedent|''
name|'def'
name|'_get_net_and_prefixlen'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'net'
op|'.'
name|'net'
op|'('
op|')'
op|')'
op|','
name|'str'
op|'('
name|'net'
op|'.'
name|'prefixlen'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_ip_version
dedent|''
name|'def'
name|'_get_ip_version'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'net'
op|'.'
name|'version'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_network_info
dedent|''
name|'def'
name|'_get_network_info'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'# TODO(adiantum) If we will keep this function'
nl|'\n'
comment|'# we should cache network_info'
nl|'\n'
indent|'    '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ip_addresses'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_all_by_instance'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'networks'
op|'='
name|'db'
op|'.'
name|'network_get_all_by_instance'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'network_info'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'        '
name|'network_ips'
op|'='
op|'['
name|'ip'
name|'for'
name|'ip'
name|'in'
name|'ip_addresses'
nl|'\n'
name|'if'
name|'ip'
op|'['
string|"'network_id'"
op|']'
op|'=='
name|'network'
op|'['
string|"'id'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|function|ip_dict
name|'def'
name|'ip_dict'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'network'
op|'['
string|"'netmask'"
op|']'
op|','
nl|'\n'
string|"'enabled'"
op|':'
string|"'1'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|ip6_dict
dedent|''
name|'def'
name|'ip6_dict'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
newline|'\n'
name|'mac'
op|'='
name|'instance'
op|'['
string|"'mac_address'"
op|']'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'utils'
op|'.'
name|'to_global_ipv6'
op|'('
name|'prefix'
op|','
name|'mac'
op|')'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'network'
op|'['
string|"'netmask_v6'"
op|']'
op|','
nl|'\n'
string|"'enabled'"
op|':'
string|"'1'"
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'mapping'
op|'='
op|'{'
nl|'\n'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'mac'"
op|':'
name|'instance'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
op|'['
name|'network'
op|'['
string|"'dns'"
op|']'
op|']'
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
name|'ip_dict'
op|'('
name|'ip'
op|')'
name|'for'
name|'ip'
name|'in'
name|'network_ips'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|'='
op|'['
name|'ip6_dict'
op|'('
op|')'
op|']'
newline|'\n'
name|'mapping'
op|'['
string|"'gateway6'"
op|']'
op|'='
name|'network'
op|'['
string|"'gateway_v6'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'.'
name|'append'
op|'('
op|'('
name|'network'
op|','
name|'mapping'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnection
dedent|''
name|'class'
name|'LibvirtConnection'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnection'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'libvirt_uri'
op|'='
name|'self'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'libvirt_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'interfaces_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'injected_network_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cpuinfo_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'cpuinfo_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'read_only'
op|'='
name|'read_only'
newline|'\n'
nl|'\n'
name|'fw_class'
op|'='
name|'utils'
op|'.'
name|'import_class'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'fw_class'
op|'('
name|'get_connection'
op|'='
name|'self'
op|'.'
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
comment|"# Adopt existing VM's running here"
nl|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'ctxt'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Checking state of %s'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'power_state'
op|'.'
name|'SHUTOFF'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Current state of %(name)s was %(state)s.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
string|"'state'"
op|':'
name|'state'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): We no longer delete SHUTOFF instances,'
nl|'\n'
comment|'# the user may want to power them back on'
nl|'\n'
nl|'\n'
name|'if'
name|'state'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_wrapped_conn'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_test_connection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connecting to libvirt: %s'"
op|')'
op|','
name|'self'
op|'.'
name|'libvirt_uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'self'
op|'.'
name|'_connect'
op|'('
name|'self'
op|'.'
name|'libvirt_uri'
op|','
nl|'\n'
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped_conn'
newline|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_connection
name|'def'
name|'_test_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_wrapped_conn'
op|'.'
name|'getInfo'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
name|'and'
name|'e'
op|'.'
name|'get_error_domain'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_FROM_REMOTE'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connection to libvirt broke'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|get_uri
dedent|''
dedent|''
name|'def'
name|'get_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'uml:///system'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'xen'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'xen:///'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'lxc:///'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'qemu:///system'"
newline|'\n'
dedent|''
name|'return'
name|'uri'
newline|'\n'
nl|'\n'
DECL|member|_connect
dedent|''
name|'def'
name|'_connect'
op|'('
name|'self'
op|','
name|'uri'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'auth'
op|'='
op|'['
op|'['
name|'libvirt'
op|'.'
name|'VIR_CRED_AUTHNAME'
op|','
name|'libvirt'
op|'.'
name|'VIR_CRED_NOECHOPROMPT'
op|']'
op|','
nl|'\n'
string|"'root'"
op|','
nl|'\n'
name|'None'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'read_only'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openReadOnly'
op|'('
name|'uri'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openAuth'
op|'('
name|'uri'
op|','
name|'auth'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'x'
op|')'
op|'.'
name|'name'
op|'('
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_map_to_instance_info
dedent|''
name|'def'
name|'_map_to_instance_info'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets info from a virsh domain object into an InstanceInfo"""'
newline|'\n'
nl|'\n'
comment|'# domain.info() returns a list of:'
nl|'\n'
comment|'#    state:       one of the state values (virDomainState)'
nl|'\n'
comment|'#    maxMemory:   the maximum memory used by the domain'
nl|'\n'
comment|'#    memory:      the current amount of memory used by the domain'
nl|'\n'
comment|'#    nbVirtCPU:   the number of virtual CPU'
nl|'\n'
comment|'#    puTime:      the time used by the domain in nanoseconds'
nl|'\n'
nl|'\n'
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_num_cpu'
op|','
name|'_cpu_time'
op|')'
op|'='
name|'domain'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
name|'domain'
op|'.'
name|'name'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'driver'
op|'.'
name|'InstanceInfo'
op|'('
name|'name'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances_detail
dedent|''
name|'def'
name|'list_instances_detail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'infos'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'domain_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'domain_id'
op|')'
newline|'\n'
name|'info'
op|'='
name|'self'
op|'.'
name|'_map_to_instance_info'
op|'('
name|'domain'
op|')'
newline|'\n'
name|'infos'
op|'.'
name|'append'
op|'('
name|'info'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'infos'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
dedent|''
op|'<<'
op|'<<'
op|'<<'
op|'<'
name|'TREE'
newline|'\n'
indent|'        '
string|'"""Delete the VM instance from the hypervisor.\n\n        :param instance: Object representing the instance to destroy\n        :param cleanup: Should we erase all of the VM\'s associated files?\n        """'
newline|'\n'
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s not found."'
op|')'
op|'%'
name|'name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'ex'
op|':'
newline|'\n'
comment|"# If the instance is already terminated, we're still happy"
nl|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Error encountered during `libvirt.destroy`: %s"'
op|')'
op|'%'
name|'ex'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
op|'=='
op|'=='
op|'=='
op|'='
newline|'\n'
indent|'        '
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# TODO(justinsb): Refactor all lookupByName calls for error-handling'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errcode'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_NO_DOMAIN'
op|':'
newline|'\n'
indent|'                '
name|'virt_dom'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during lookup of "'
nl|'\n'
string|'"%(instance_name)s. Code=%(errcode)s "'
nl|'\n'
string|'"Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
comment|"# If the instance is already terminated, we're still happy"
nl|'\n'
comment|'# Otherwise, destroy it'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'virt_dom'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'is_okay'
op|'='
name|'False'
newline|'\n'
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errcode'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_OPERATION_INVALID'
op|':'
newline|'\n'
comment|'# If the instance if already shut off, we get this:'
nl|'\n'
comment|'# Code=55 Error=Requested operation is not valid:'
nl|'\n'
comment|'# domain is not running'
nl|'\n'
indent|'                    '
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_cpus'
op|','
name|'_t'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'                        '
name|'is_okay'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'is_okay'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during destroy of "'
nl|'\n'
string|'"%(instance_name)s. Code=%(errcode)s "'
nl|'\n'
string|'"Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(justinsb): We remove the domain definition. We probably'
nl|'\n'
comment|'# would do better to keep it if cleanup=False (e.g. volumes?)'
nl|'\n'
comment|'# (e.g. #2 - not losing machines on failure)'
nl|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during undefine of "'
nl|'\n'
string|'"%(instance_name)s. Code=%(errcode)s "'
nl|'\n'
string|'"Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
comment|"# We'll save this for when we do shutdown,"
nl|'\n'
comment|'# instead of destroy - but destroy returns immediately'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Error encountered when destroying instance \'%(id)s\': "'
nl|'\n'
string|'"%(ex)s"'
op|')'
op|'%'
op|'{'
string|'"id"'
op|':'
name|'instance'
op|'['
string|'"id"'
op|']'
op|','
string|'"ex"'
op|':'
name|'ex'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTOFF'
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cleanup'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
end_unit

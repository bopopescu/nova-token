begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nRBD clone image handler for libvirt hypervisors.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'imagehandler'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'rbd_utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'images_rbd_pool'"
op|','
string|"'nova.virt.libvirt.imagebackend'"
op|','
nl|'\n'
DECL|variable|group
name|'group'
op|'='
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'images_rbd_ceph_conf'"
op|','
string|"'nova.virt.libvirt.imagebackend'"
op|','
nl|'\n'
DECL|variable|group
name|'group'
op|'='
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'rbd_user'"
op|','
string|"'nova.virt.libvirt.volume'"
op|','
name|'group'
op|'='
string|"'libvirt'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RBDCloneImageHandler
name|'class'
name|'RBDCloneImageHandler'
op|'('
name|'base'
op|'.'
name|'ImageHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handler for rbd-backed images.\n\n    If libvirt is using rbd for ephemeral/root disks, this handler\n    will clone images already stored in rbd instead of downloading\n    them locally and importing them into rbd.\n\n    If rbd is not the image backend type, this handler does nothing.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RBDCloneImageHandler'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'driver'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_rbd_pool'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'You should specify images_rbd_pool flag in '"
nl|'\n'
string|"'the libvirt section to use rbd images.'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'='
name|'rbd_utils'
op|'.'
name|'RBDDriver'
op|'('
nl|'\n'
name|'pool'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_rbd_pool'
op|','
nl|'\n'
name|'ceph_conf'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_rbd_ceph_conf'
op|','
nl|'\n'
name|'rbd_user'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
op|','
nl|'\n'
name|'rbd_lib'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'rbd'"
op|')'
op|','
nl|'\n'
name|'rados_lib'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'rados'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_schemes
dedent|''
name|'def'
name|'get_schemes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'rbd'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_local
dedent|''
name|'def'
name|'is_local'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_can_handle_image
dedent|''
name|'def'
name|'_can_handle_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_meta'
op|','
name|'location'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns whether it makes sense to clone the image.\n\n        - The glance image and libvirt image backend must be rbd.\n        - The image must be readable by the rados user available to nova.\n        - The image must be in raw format.\n        """'
newline|'\n'
name|'backend_type'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'backend_type'"
op|')'
newline|'\n'
name|'backend_location'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'backend_location'"
op|')'
newline|'\n'
name|'if'
name|'backend_type'
op|'!='
string|"'rbd'"
name|'or'
name|'not'
name|'backend_location'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'backend type is not rbd or backend_location is not set'"
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'is_cloneable'
op|'('
name|'location'
op|'['
string|"'url'"
op|']'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image
dedent|''
name|'def'
name|'_fetch_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_can_handle_image'
op|'('
name|'context'
op|','
name|'image_meta'
op|','
name|'location'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'dest_pool'
op|','
name|'dest_image'
op|'='
name|'kwargs'
op|'['
string|"'backend_location'"
op|']'
newline|'\n'
name|'url'
op|'='
name|'location'
op|'['
string|"'url'"
op|']'
newline|'\n'
name|'_fsid'
op|','
name|'pool'
op|','
name|'image'
op|','
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'parse_location'
op|'('
name|'url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'clone'
op|'('
name|'dest_pool'
op|','
name|'dest_image'
op|','
name|'pool'
op|','
name|'image'
op|','
name|'snapshot'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_remove_image
dedent|''
name|'def'
name|'_remove_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_can_handle_image'
op|'('
name|'context'
op|','
name|'image_meta'
op|','
name|'location'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'pool'
op|','
name|'image'
op|'='
name|'kwargs'
op|'['
string|"'backend_location'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'remove'
op|'('
name|'image'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_move_image
dedent|''
name|'def'
name|'_move_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'src_path'
op|','
name|'dst_path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_can_handle_image'
op|'('
name|'context'
op|','
name|'image_meta'
op|','
name|'location'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'src_pool'
op|','
name|'src_image'
op|'='
name|'kwargs'
op|'['
string|"'backend_location'"
op|']'
newline|'\n'
name|'dest_image'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'backend_dest'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rename'
op|'('
name|'src_image'
op|','
name|'dest_image'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Piston Cloud Computing, Inc'
nl|'\n'
comment|'# Copyright (c) 2012 University Of Minho'
nl|'\n'
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2015 Red Hat, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManages information about the guest.\n\nThis class encapsulates libvirt domain provides certain\nhigher level APIs around the raw libvirt API. These APIs are\nthen used by all the other libvirt related classes\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'encodeutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'importutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Guest
name|'class'
name|'Guest'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'global'
name|'libvirt'
newline|'\n'
name|'if'
name|'libvirt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'libvirt'
op|'='
name|'importutils'
op|'.'
name|'import_module'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_domain'
op|'='
name|'domain'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<Guest %(id)d %(name)s %(uuid)s>"'
op|'%'
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'self'
op|'.'
name|'id'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'self'
op|'.'
name|'uuid'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|id
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'ID'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|uuid
name|'def'
name|'uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'UUIDString'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|name
name|'def'
name|'name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'name'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_encoded_xml
name|'def'
name|'_encoded_xml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'encodeutils'
op|'.'
name|'safe_decode'
op|'('
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'xml'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new Guest\n\n        :param xml: XML definition of the domain to create\n        :param host: host.Host connection to define the guest on\n\n        :returns guest.Guest: Guest ready to be launched\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# TODO(sahid): Host.write_instance_config should return'
nl|'\n'
comment|'# an instance of Guest'
nl|'\n'
indent|'            '
name|'domain'
op|'='
name|'host'
op|'.'
name|'write_instance_config'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Error defining a domain with XML: %s'"
op|')'
op|'%'
nl|'\n'
name|'encodeutils'
op|'.'
name|'safe_decode'
op|'('
name|'xml'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'cls'
op|'('
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|launch
dedent|''
name|'def'
name|'launch'
op|'('
name|'self'
op|','
name|'pause'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts a created guest.\n\n        :param pause: Indicates whether to start and pause the guest\n        """'
newline|'\n'
name|'flags'
op|'='
name|'pause'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_START_PAUSED'
name|'or'
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'createWithFlags'
op|'('
name|'flags'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Error launching a defined domain '"
nl|'\n'
string|"'with XML: %s'"
op|')'
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'_encoded_xml'
op|','
name|'errors'
op|'='
string|"'ignore'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|poweroff
dedent|''
dedent|''
dedent|''
name|'def'
name|'poweroff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stops a running guest."""'
newline|'\n'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resumes a suspended guest."""'
newline|'\n'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'resume'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|enable_hairpin
dedent|''
name|'def'
name|'enable_hairpin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enables hairpin mode for this guest."""'
newline|'\n'
name|'interfaces'
op|'='
name|'self'
op|'.'
name|'get_interfaces'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'interface'
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|"'tee'"
op|','
nl|'\n'
string|"'/sys/class/net/%s/brport/hairpin_mode'"
op|'%'
name|'interface'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'1'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Error enabling hairpin mode with XML: %s'"
op|')'
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'_encoded_xml'
op|','
name|'errors'
op|'='
string|"'ignore'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_interfaces
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_interfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of all network interfaces for this domain."""'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'self'
op|'.'
name|'_encoded_xml'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'interfaces'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'nodes'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface/target'"
op|')'
newline|'\n'
name|'for'
name|'target'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'interfaces'
op|'.'
name|'append'
op|'('
name|'target'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'interfaces'
newline|'\n'
nl|'\n'
DECL|member|get_vcpus_info
dedent|''
name|'def'
name|'get_vcpus_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns virtual cpus information of guest.\n\n        :returns: guest.VCPUInfo\n        """'
newline|'\n'
name|'vcpus'
op|'='
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'vcpus'
op|'('
op|')'
newline|'\n'
name|'if'
name|'vcpus'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vcpu'
name|'in'
name|'vcpus'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'VCPUInfo'
op|'('
nl|'\n'
name|'id'
op|'='
name|'vcpu'
op|'['
number|'0'
op|']'
op|','
name|'cpu'
op|'='
name|'vcpu'
op|'['
number|'3'
op|']'
op|','
name|'state'
op|'='
name|'vcpu'
op|'['
number|'1'
op|']'
op|','
name|'time'
op|'='
name|'vcpu'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_configuration
dedent|''
dedent|''
dedent|''
name|'def'
name|'delete_configuration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Undefines a domain from hypervisor."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'undefineFlags'
op|'('
nl|'\n'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_UNDEFINE_MANAGED_SAVE'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Error from libvirt during undefineFlags. %d"'
nl|'\n'
string|'"Retrying with undefine"'
op|','
name|'self'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
comment|"# Older versions of libvirt don't support undefine flags,"
nl|'\n'
comment|'# trying to remove managed image'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'hasManagedSaveImage'
op|'('
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'managedSaveRemove'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|has_persistent_configuration
dedent|''
dedent|''
name|'def'
name|'has_persistent_configuration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Whether domain config is persistently stored on the host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'isPersistent'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_device
dedent|''
name|'def'
name|'attach_device'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'persistent'
op|'='
name|'False'
op|','
name|'live'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attaches device to the guest.\n\n        :param conf: A LibvirtConfigObject of the device to attach\n        :param persistent: A bool to indicate whether the change is\n                           persistent or not\n        :param live: A bool to indicate whether it affect the guest\n                     in running state\n        """'
newline|'\n'
name|'flags'
op|'='
name|'persistent'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_AFFECT_CONFIG'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'live'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_AFFECT_LIVE'
name|'or'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'attachDeviceFlags'
op|'('
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_disk
dedent|''
name|'def'
name|'get_disk'
op|'('
name|'self'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the disk mounted at device\n\n        :returns LivirtConfigGuestDisk: mounted at device or None\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'node'
op|'='
name|'doc'
op|'.'
name|'find'
op|'('
string|'"./devices/disk/target[@dev=\'%s\'].."'
op|'%'
name|'device'
op|')'
newline|'\n'
name|'if'
name|'node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'parse_dom'
op|'('
name|'node'
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|detach_device
dedent|''
dedent|''
name|'def'
name|'detach_device'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'persistent'
op|'='
name|'False'
op|','
name|'live'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detaches device to the guest.\n\n        :param conf: A LibvirtConfigObject of the device to detach\n        :param persistent: A bool to indicate whether the change is\n                           persistent or not\n        :param live: A bool to indicate whether it affect the guest\n                     in running state\n        """'
newline|'\n'
name|'flags'
op|'='
name|'persistent'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_AFFECT_CONFIG'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'live'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_AFFECT_LIVE'
name|'or'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'detachDeviceFlags'
op|'('
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_xml_desc
dedent|''
name|'def'
name|'get_xml_desc'
op|'('
name|'self'
op|','
name|'dump_inactive'
op|'='
name|'False'
op|','
name|'dump_sensitive'
op|'='
name|'False'
op|','
nl|'\n'
name|'dump_migratable'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml description of guest.\n\n        :param dump_inactive: Dump inactive domain information\n        :param dump_sensitive: Dump security sensitive information\n        :param dump_migratable: Dump XML suitable for migration\n\n        :returns string: XML description of the guest\n        """'
newline|'\n'
name|'flags'
op|'='
name|'dump_inactive'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_XML_INACTIVE'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'dump_sensitive'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_XML_SECURE'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'dump_migratable'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_XML_MIGRATABLE'
name|'or'
number|'0'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'XMLDesc'
op|'('
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|save_memory_state
dedent|''
name|'def'
name|'save_memory_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Saves the domain\'s memory state. Requires running domain.\n\n        raises: raises libvirtError on error\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_domain'
op|'.'
name|'managedSave'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_block_device
dedent|''
name|'def'
name|'get_block_device'
op|'('
name|'self'
op|','
name|'disk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a block device wrapper for disk."""'
newline|'\n'
name|'return'
name|'BlockDevice'
op|'('
name|'self'
op|','
name|'disk'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDevice
dedent|''
dedent|''
name|'class'
name|'BlockDevice'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper around block device API"""'
newline|'\n'
nl|'\n'
DECL|variable|REBASE_DEFAULT_BANDWIDTH
name|'REBASE_DEFAULT_BANDWIDTH'
op|'='
number|'0'
comment|'# in MiB/s - 0 unlimited'
newline|'\n'
DECL|variable|COMMIT_DEFAULT_BANDWIDTH
name|'COMMIT_DEFAULT_BANDWIDTH'
op|'='
number|'0'
comment|'# in MiB/s - 0 unlimited'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'guest'
op|','
name|'disk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_guest'
op|'='
name|'guest'
newline|'\n'
name|'self'
op|'.'
name|'_disk'
op|'='
name|'disk'
newline|'\n'
nl|'\n'
DECL|member|abort_job
dedent|''
name|'def'
name|'abort_job'
op|'('
name|'self'
op|','
name|'async'
op|'='
name|'False'
op|','
name|'pivot'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Request to cancel any job currently running on the block.\n\n        :param async: Request only, do not wait for completion\n        :param pivot: Pivot to new file when ending a copy or\n                      active commit job\n        """'
newline|'\n'
name|'flags'
op|'='
name|'async'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'pivot'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT'
name|'or'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_guest'
op|'.'
name|'_domain'
op|'.'
name|'blockJobAbort'
op|'('
name|'self'
op|'.'
name|'_disk'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_job_info
dedent|''
name|'def'
name|'get_job_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns information about job currently running\n\n        :returns: BlockDeviceJobInfo or None\n        """'
newline|'\n'
name|'status'
op|'='
name|'self'
op|'.'
name|'_guest'
op|'.'
name|'_domain'
op|'.'
name|'blockJobInfo'
op|'('
name|'self'
op|'.'
name|'_disk'
op|','
name|'flags'
op|'='
number|'0'
op|')'
newline|'\n'
name|'if'
name|'status'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'BlockDeviceJobInfo'
op|'('
nl|'\n'
name|'job'
op|'='
name|'status'
op|'.'
name|'get'
op|'('
string|'"type"'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'bandwidth'
op|'='
name|'status'
op|'.'
name|'get'
op|'('
string|'"bandwidth"'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'cur'
op|'='
name|'status'
op|'.'
name|'get'
op|'('
string|'"cur"'
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'end'
op|'='
name|'status'
op|'.'
name|'get'
op|'('
string|'"end"'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rebase
dedent|''
dedent|''
name|'def'
name|'rebase'
op|'('
name|'self'
op|','
name|'base'
op|','
name|'shallow'
op|'='
name|'False'
op|','
name|'reuse_ext'
op|'='
name|'False'
op|','
nl|'\n'
name|'copy'
op|'='
name|'False'
op|','
name|'relative'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebases block to new base\n\n        :param shallow: Limit copy to top of source backing chain\n        :param reuse_ext: Reuse existing external file of a copy\n        :param copy: Start a copy job\n        :param relative: Keep backing chain referenced using relative names\n        """'
newline|'\n'
name|'flags'
op|'='
name|'shallow'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_REBASE_SHALLOW'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'reuse_ext'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'copy'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_REBASE_COPY'
name|'or'
number|'0'
newline|'\n'
name|'flags'
op|'|='
name|'relative'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_REBASE_RELATIVE'
name|'or'
number|'0'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_guest'
op|'.'
name|'_domain'
op|'.'
name|'blockRebase'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_disk'
op|','
name|'base'
op|','
name|'self'
op|'.'
name|'REBASE_DEFAULT_BANDWIDTH'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'base'
op|','
name|'top'
op|','
name|'relative'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Commit on block device\n\n        For performance during live snapshot it will reduces the disk chain\n        to a single disk.\n\n        :param relative: Keep backing chain referenced using relative names\n        """'
newline|'\n'
name|'flags'
op|'='
name|'relative'
name|'and'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_BLOCK_COMMIT_RELATIVE'
name|'or'
number|'0'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_guest'
op|'.'
name|'_domain'
op|'.'
name|'blockCommit'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_disk'
op|','
name|'base'
op|','
name|'top'
op|','
name|'self'
op|'.'
name|'COMMIT_DEFAULT_BANDWIDTH'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resize
dedent|''
name|'def'
name|'resize'
op|'('
name|'self'
op|','
name|'size_kb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resizes block device to Kib size."""'
newline|'\n'
name|'self'
op|'.'
name|'_guest'
op|'.'
name|'_domain'
op|'.'
name|'blockResize'
op|'('
name|'self'
op|'.'
name|'_disk'
op|','
name|'size_kb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wait_for_job
dedent|''
name|'def'
name|'wait_for_job'
op|'('
name|'self'
op|','
name|'abort_on_error'
op|'='
name|'False'
op|','
name|'wait_for_job_clean'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wait for libvirt block job to complete.\n\n        Libvirt may return either cur==end or an empty dict when\n        the job is complete, depending on whether the job has been\n        cleaned up by libvirt yet, or not.\n\n        :param abort_on_error: Whether to stop process and raise NovaException\n                               on error (default: False)\n        :param wait_for_job_clean: Whether to force wait to ensure job is\n                                   finished (see bug: LP#1119173)\n\n        :returns: True if still in progress\n                  False if completed\n        """'
newline|'\n'
name|'status'
op|'='
name|'self'
op|'.'
name|'get_job_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'status'
name|'and'
name|'abort_on_error'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'libvirt error while requesting blockjob info.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'wait_for_job_clean'
op|':'
newline|'\n'
indent|'            '
name|'job_ended'
op|'='
name|'status'
op|'.'
name|'job'
op|'=='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'job_ended'
op|'='
name|'status'
op|'.'
name|'cur'
op|'=='
name|'status'
op|'.'
name|'end'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'not'
name|'job_ended'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VCPUInfo
dedent|''
dedent|''
name|'class'
name|'VCPUInfo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'id'
op|','
name|'cpu'
op|','
name|'state'
op|','
name|'time'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Structure for information about guest vcpus.\n\n        :param id: The virtual cpu number\n        :param cpu: The host cpu currently associated\n        :param state: The running state of the vcpu (0 offline, 1 running, 2\n                      blocked on resource)\n        :param time: The cpu time used in nanoseconds\n        """'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
newline|'\n'
name|'self'
op|'.'
name|'cpu'
op|'='
name|'cpu'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'time'
op|'='
name|'time'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceJobInfo
dedent|''
dedent|''
name|'class'
name|'BlockDeviceJobInfo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'job'
op|','
name|'bandwidth'
op|','
name|'cur'
op|','
name|'end'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Structure for information about running job.\n\n        :param job: The running job (0 placeholder, 1 pull,\n                      2 copy, 3 commit, 4 active commit)\n        :param bandwidth: Used in MiB/s\n        :param cur: Indicates the position between 0 and \'end\'\n        :param end: Indicates the position for this operation\n        """'
newline|'\n'
name|'self'
op|'.'
name|'job'
op|'='
name|'job'
newline|'\n'
name|'self'
op|'.'
name|'bandwidth'
op|'='
name|'bandwidth'
newline|'\n'
name|'self'
op|'.'
name|'cur'
op|'='
name|'cur'
newline|'\n'
name|'self'
op|'.'
name|'end'
op|'='
name|'end'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (C) 2012-2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nHandling of block device information and mapping.\n\nThis module contains helper methods for intepreting the block\ndevice information and determining the suitable mapping to\nguest devices and libvirt XML.\n\nThroughout these methods there are a number of standard\nvariables / types used\n\n * \'mapping\': a dict contains the storage device mapping.\n\n   For the default disk types it will contain the following\n   keys & values:\n\n      \'disk\' -> disk_info\n      \'disk.rescue\' -> disk_info\n      \'disk.local\' -> disk_info\n      \'disk.swap\' -> disk_info\n      \'disk.config\' -> disk_info\n\n   If any of the default disks are overriden by the block\n   device info mappings, the hash value will be None\n\n   For any ephemeral device there will also be a dict entry\n\n      \'disk.eph$NUM\' -> disk_info\n\n   For any volume device there will also be a dict entry:\n\n       $path -> disk_info\n\n   Finally a special key will refer to the root device:\n\n      \'root\' -> disk_info\n\n\n * \'disk_info\': a tuple specifying disk configuration\n\n   It contains the following 3 fields\n\n      (disk bus, disk dev, device type)\n\n * \'disk_bus\': the guest bus type (\'ide\', \'virtio\', \'scsi\', etc)\n\n * \'disk_dev\': the device name \'vda\', \'hdc\', \'sdf\', \'xvde\' etc\n\n * \'device_type\': type of device eg \'disk\', \'cdrom\', \'floppy\'\n\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|has_disk_dev
name|'def'
name|'has_disk_dev'
op|'('
name|'mapping'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine if a disk device name has already been used.\n\n       Looks at all the keys in mapping to see if any\n       corresponding disk_info tuple has a device name\n       matching disk_dev\n\n       Returns True if the disk_dev is in use."""'
newline|'\n'
nl|'\n'
name|'for'
name|'disk'
name|'in'
name|'mapping'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'mapping'
op|'['
name|'disk'
op|']'
newline|'\n'
name|'if'
name|'info'
op|'['
string|"'dev'"
op|']'
op|'=='
name|'disk_dev'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dev_prefix_for_disk_bus
dedent|''
name|'def'
name|'get_dev_prefix_for_disk_bus'
op|'('
name|'disk_bus'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine the dev prefix for a disk bus.\n\n       Determine the dev prefix to be combined\n       with a disk number to fix a disk_dev.\n       eg \'hd\' for \'ide\' bus can be used to\n       form a disk dev \'hda\'\n\n       Returns the dev prefix or raises an\n       exception if the disk bus is unknown."""'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_bus'
op|'=='
string|'"ide"'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"hd"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_bus'
op|'=='
string|'"virtio"'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"vd"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_bus'
op|'=='
string|'"xen"'
op|':'
newline|'\n'
comment|'# Two possible mappings for Xen, xvda or sda'
nl|'\n'
comment|'# which are interchangable, so we pick sda'
nl|'\n'
indent|'        '
name|'return'
string|'"sd"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_bus'
op|'=='
string|'"scsi"'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"sd"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_bus'
op|'=='
string|'"usb"'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"sd"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_bus'
op|'=='
string|'"uml"'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"ubd"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unable to determine disk prefix for %s"'
op|')'
op|'%'
nl|'\n'
name|'disk_bus'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dev_count_for_disk_bus
dedent|''
dedent|''
name|'def'
name|'get_dev_count_for_disk_bus'
op|'('
name|'disk_bus'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine the number disks supported.\n\n       Determine how many disks can be supported in\n       a single VM for a particular disk bus.\n\n       Returns the number of disks supported."""'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_bus'
op|'=='
string|'"ide"'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'4'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'26'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_disk_dev_for_disk_bus
dedent|''
dedent|''
name|'def'
name|'find_disk_dev_for_disk_bus'
op|'('
name|'mapping'
op|','
name|'bus'
op|','
name|'last_device'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Identify a free disk dev name for a bus.\n\n       Determines the possible disk dev names for\n       the bus, and then checks them in order until\n       it identifies one that is not yet used in the\n       disk mapping. If \'last_device\' is set, it will\n       only consider the last available disk dev name.\n\n       Returns the chosen disk_dev name, or raises an\n       exception if none is available.\n    """'
newline|'\n'
nl|'\n'
name|'dev_prefix'
op|'='
name|'get_dev_prefix_for_disk_bus'
op|'('
name|'bus'
op|')'
newline|'\n'
name|'max_dev'
op|'='
name|'get_dev_count_for_disk_bus'
op|'('
name|'bus'
op|')'
newline|'\n'
name|'if'
name|'last_device'
op|':'
newline|'\n'
indent|'        '
name|'devs'
op|'='
op|'['
name|'max_dev'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'devs'
op|'='
name|'range'
op|'('
name|'max_dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'idx'
name|'in'
name|'devs'
op|':'
newline|'\n'
indent|'        '
name|'disk_dev'
op|'='
name|'dev_prefix'
op|'+'
name|'chr'
op|'('
name|'ord'
op|'('
string|"'a'"
op|')'
op|'+'
name|'idx'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'has_disk_dev'
op|'('
name|'mapping'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'disk_dev'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"No free disk device names for prefix \'%s\'"'
op|')'
op|','
nl|'\n'
name|'dev_prefix'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_disk_bus_for_device_type
dedent|''
name|'def'
name|'get_disk_bus_for_device_type'
op|'('
name|'virt_type'
op|','
name|'device_type'
op|'='
string|'"disk"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine the best disk bus to use for a device type.\n\n       Considering the currently configured virtualization\n       type, return the optimal disk_bus to use for a given\n       device type. For example, for a disk on KVM it will\n       return \'virtio\', while for a CDROM it will return \'ide\'\n\n       Returns the disk_bus, or returns None if the device\n       type is not supported for this virtualization"""'
newline|'\n'
nl|'\n'
name|'if'
name|'virt_type'
op|'=='
string|'"uml"'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device_type'
op|'=='
string|'"disk"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"uml"'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'virt_type'
op|'=='
string|'"xen"'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device_type'
op|'=='
string|'"cdrom"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"ide"'
newline|'\n'
dedent|''
name|'elif'
name|'device_type'
op|'=='
string|'"disk"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"xen"'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'virt_type'
name|'in'
op|'('
string|'"qemu"'
op|','
string|'"kvm"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device_type'
op|'=='
string|'"cdrom"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"ide"'
newline|'\n'
dedent|''
name|'elif'
name|'device_type'
op|'=='
string|'"disk"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"virtio"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_disk_bus_for_disk_dev
dedent|''
name|'def'
name|'get_disk_bus_for_disk_dev'
op|'('
name|'virt_type'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine the disk bus for a disk dev.\n\n       Given a disk devi like \'hda\', \'sdf\', \'xvdb\', etc\n       guess what the most appropriate disk bus is for\n       the currently configured virtualization technology\n\n       Returns the disk bus, or raises an Exception if\n       the disk dev prefix is unknown."""'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_dev'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'hd'"
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"ide"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_dev'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'sd'"
op|':'
newline|'\n'
comment|"# Reverse mapping 'sd' is not reliable"
nl|'\n'
comment|'# there are many possible mappings. So'
nl|'\n'
comment|'# this picks the most likely mappings'
nl|'\n'
indent|'        '
name|'if'
name|'virt_type'
op|'=='
string|'"xen"'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"xen"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"scsi"'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'disk_dev'
op|'['
op|':'
number|'2'
op|']'
op|'=='
string|"'vd'"
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"virtio"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_dev'
op|'['
op|':'
number|'3'
op|']'
op|'=='
string|"'xvd'"
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"xen"'
newline|'\n'
dedent|''
name|'elif'
name|'disk_dev'
op|'['
op|':'
number|'3'
op|']'
op|'=='
string|"'ubd'"
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"uml"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unable to determine disk bus for \'%s\'"'
op|')'
op|'%'
nl|'\n'
name|'disk_dev'
op|'['
op|':'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_next_disk_info
dedent|''
dedent|''
name|'def'
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
name|'disk_bus'
op|','
nl|'\n'
name|'device_type'
op|'='
string|"'disk'"
op|','
nl|'\n'
name|'last_device'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine the disk info for the next device on disk_bus.\n\n       Considering the disks already listed in the disk mapping,\n       determine the next available disk dev that can be assigned\n       for the disk bus.\n\n       Returns the disk_info for the next available disk."""'
newline|'\n'
nl|'\n'
name|'disk_dev'
op|'='
name|'find_disk_dev_for_disk_bus'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'disk_bus'
op|','
nl|'\n'
name|'last_device'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'bus'"
op|':'
name|'disk_bus'
op|','
nl|'\n'
string|"'dev'"
op|':'
name|'disk_dev'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'device_type'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_eph_disk
dedent|''
name|'def'
name|'get_eph_disk'
op|'('
name|'ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'disk.eph'"
op|'+'
name|'str'
op|'('
name|'ephemeral'
op|'['
string|"'num'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_disk_mapping
dedent|''
name|'def'
name|'get_disk_mapping'
op|'('
name|'virt_type'
op|','
name|'instance'
op|','
nl|'\n'
name|'disk_bus'
op|','
name|'cdrom_bus'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'image_meta'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine how to map default disks to the virtual machine.\n\n       This is about figuring out whether the default \'disk\',\n       \'disk.local\', \'disk.swap\' and \'disk.config\' images have\n       been overriden by the block device mapping.\n\n       Returns the guest disk mapping for the devices."""'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
nl|'\n'
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'virt_type'
op|'=='
string|'"lxc"'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'        '
name|'rescue_info'
op|'='
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'disk_bus'
op|')'
newline|'\n'
name|'mapping'
op|'['
string|"'disk.rescue'"
op|']'
op|'='
name|'rescue_info'
newline|'\n'
name|'mapping'
op|'['
string|"'root'"
op|']'
op|'='
name|'rescue_info'
newline|'\n'
nl|'\n'
name|'os_info'
op|'='
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'disk_bus'
op|')'
newline|'\n'
name|'mapping'
op|'['
string|"'disk'"
op|']'
op|'='
name|'os_info'
newline|'\n'
nl|'\n'
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_meta'
name|'and'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'iso'"
op|':'
newline|'\n'
indent|'        '
name|'root_disk_bus'
op|'='
name|'cdrom_bus'
newline|'\n'
name|'root_device_type'
op|'='
string|"'cdrom'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'root_disk_bus'
op|'='
name|'disk_bus'
newline|'\n'
name|'root_device_type'
op|'='
string|"'disk'"
newline|'\n'
nl|'\n'
dedent|''
name|'root_device_name'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_root'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'root_device_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'root_device'
op|'='
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'root_device_name'
op|')'
newline|'\n'
name|'root_info'
op|'='
op|'{'
string|"'bus'"
op|':'
name|'get_disk_bus_for_disk_dev'
op|'('
name|'virt_type'
op|','
nl|'\n'
name|'root_device'
op|')'
op|','
nl|'\n'
string|"'dev'"
op|':'
name|'root_device'
op|','
nl|'\n'
string|"'type'"
op|':'
name|'root_device_type'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'root_info'
op|'='
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'root_disk_bus'
op|','
nl|'\n'
name|'root_device_type'
op|')'
newline|'\n'
dedent|''
name|'mapping'
op|'['
string|"'root'"
op|']'
op|'='
name|'root_info'
newline|'\n'
name|'if'
name|'not'
name|'block_device'
op|'.'
name|'volume_in_mapping'
op|'('
name|'root_info'
op|'['
string|"'dev'"
op|']'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mapping'
op|'['
string|"'disk'"
op|']'
op|'='
name|'root_info'
newline|'\n'
nl|'\n'
dedent|''
name|'eph_info'
op|'='
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'disk_bus'
op|')'
newline|'\n'
name|'ephemeral_device'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'block_device'
op|'.'
name|'volume_in_mapping'
op|'('
name|'eph_info'
op|'['
string|"'dev'"
op|']'
op|','
nl|'\n'
name|'block_device_info'
op|')'
name|'or'
nl|'\n'
number|'0'
name|'in'
op|'['
name|'eph'
op|'['
string|"'num'"
op|']'
name|'for'
name|'eph'
name|'in'
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'ephemeral_device'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ephemeral_device'
op|':'
newline|'\n'
indent|'        '
name|'mapping'
op|'['
string|"'disk.local'"
op|']'
op|'='
name|'eph_info'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'eph'
name|'in'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_dev'
op|'='
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'eph'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'disk_bus'
op|'='
name|'get_disk_bus_for_disk_dev'
op|'('
name|'virt_type'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'mapping'
op|'['
name|'get_eph_disk'
op|'('
name|'eph'
op|')'
op|']'
op|'='
op|'{'
string|"'bus'"
op|':'
name|'disk_bus'
op|','
nl|'\n'
string|"'dev'"
op|':'
name|'disk_dev'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'disk'"
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'swap'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_swap'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'driver'
op|'.'
name|'swap_is_usable'
op|'('
name|'swap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_dev'
op|'='
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'swap'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'disk_bus'
op|'='
name|'get_disk_bus_for_disk_dev'
op|'('
name|'virt_type'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'mapping'
op|'['
string|"'disk.swap'"
op|']'
op|'='
op|'{'
string|"'bus'"
op|':'
name|'disk_bus'
op|','
nl|'\n'
string|"'dev'"
op|':'
name|'disk_dev'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'disk'"
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'inst_type'
op|'['
string|"'swap'"
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'swap_info'
op|'='
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'disk_bus'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'block_device'
op|'.'
name|'volume_in_mapping'
op|'('
name|'swap_info'
op|'['
string|"'dev'"
op|']'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'['
string|"'disk.swap'"
op|']'
op|'='
name|'swap_info'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'        '
name|'disk_dev'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'disk_bus'
op|'='
name|'get_disk_bus_for_disk_dev'
op|'('
name|'virt_type'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'mapping'
op|'['
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|']'
op|'='
op|'{'
string|"'bus'"
op|':'
name|'disk_bus'
op|','
nl|'\n'
string|"'dev'"
op|':'
name|'disk_dev'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'disk'"
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'configdrive'
op|'.'
name|'enabled_for'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_info'
op|'='
name|'get_next_disk_info'
op|'('
name|'mapping'
op|','
nl|'\n'
name|'disk_bus'
op|','
nl|'\n'
name|'last_device'
op|'='
name|'True'
op|')'
newline|'\n'
name|'mapping'
op|'['
string|"'disk.config'"
op|']'
op|'='
name|'config_info'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_disk_info
dedent|''
name|'def'
name|'get_disk_info'
op|'('
name|'virt_type'
op|','
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'image_meta'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine guest disk mapping info.\n\n       This is a wrapper around get_disk_mapping, which\n       also returns the chosen disk_bus and cdrom_bus.\n       The returned data is in a dict\n\n            - disk_bus: the bus for harddisks\n            - cdrom_bus: the bus for CDROMs\n            - mapping: the disk mapping\n\n       Returns the disk mapping disk."""'
newline|'\n'
nl|'\n'
name|'disk_bus'
op|'='
name|'get_disk_bus_for_device_type'
op|'('
name|'virt_type'
op|','
string|'"disk"'
op|')'
newline|'\n'
name|'cdrom_bus'
op|'='
name|'get_disk_bus_for_device_type'
op|'('
name|'virt_type'
op|','
string|'"cdrom"'
op|')'
newline|'\n'
name|'mapping'
op|'='
name|'get_disk_mapping'
op|'('
name|'virt_type'
op|','
name|'instance'
op|','
nl|'\n'
name|'disk_bus'
op|','
name|'cdrom_bus'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'rescue'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'disk_bus'"
op|':'
name|'disk_bus'
op|','
nl|'\n'
string|"'cdrom_bus'"
op|':'
name|'cdrom_bus'
op|','
nl|'\n'
string|"'mapping'"
op|':'
name|'mapping'
op|'}'
newline|'\n'
dedent|''
endmarker|''
end_unit

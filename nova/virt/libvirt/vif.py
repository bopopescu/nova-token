begin_unit
comment|'# Copyright (C) 2011 Midokura KK'
nl|'\n'
comment|'# Copyright (C) 2011 Nicira, Inc'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""VIF drivers for libvirt."""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'designer'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'osinfo'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|libvirt_vif_opts
name|'libvirt_vif_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_virtio_for_bridges'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use virtio for bridge interfaces with KVM/QEMU'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'libvirt_vif_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'use_ipv6'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
comment|'# vhostuser queues support'
nl|'\n'
DECL|variable|MIN_LIBVIRT_VHOSTUSER_MQ
name|'MIN_LIBVIRT_VHOSTUSER_MQ'
op|'='
op|'('
number|'1'
op|','
number|'2'
op|','
number|'17'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_vif_model_valid_for_virt
name|'def'
name|'is_vif_model_valid_for_virt'
op|'('
name|'virt_type'
op|','
name|'vif_model'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'valid_models'
op|'='
op|'{'
nl|'\n'
string|"'qemu'"
op|':'
op|'['
name|'network_model'
op|'.'
name|'VIF_MODEL_VIRTIO'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_NE2K_PCI'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_PCNET'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_RTL8139'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_SPAPR_VLAN'
op|']'
op|','
nl|'\n'
string|"'kvm'"
op|':'
op|'['
name|'network_model'
op|'.'
name|'VIF_MODEL_VIRTIO'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_NE2K_PCI'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_PCNET'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_RTL8139'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_SPAPR_VLAN'
op|']'
op|','
nl|'\n'
string|"'xen'"
op|':'
op|'['
name|'network_model'
op|'.'
name|'VIF_MODEL_NETFRONT'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_NE2K_PCI'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_PCNET'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_RTL8139'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|']'
op|','
nl|'\n'
string|"'lxc'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'uml'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_model'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'virt_type'
name|'not'
name|'in'
name|'valid_models'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedVirtType'
op|'('
name|'virt'
op|'='
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'vif_model'
name|'in'
name|'valid_models'
op|'['
name|'virt_type'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtGenericVIFDriver
dedent|''
name|'class'
name|'LibvirtGenericVIFDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generic VIF driver for libvirt networking."""'
newline|'\n'
nl|'\n'
DECL|member|_normalize_vif_type
name|'def'
name|'_normalize_vif_type'
op|'('
name|'self'
op|','
name|'vif_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vif_type'
op|'.'
name|'replace'
op|'('
string|"'2.1q'"
op|','
string|"'2q'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vif_devname
dedent|''
name|'def'
name|'get_vif_devname'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'devname'"
name|'in'
name|'vif'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vif'
op|'['
string|"'devname'"
op|']'
newline|'\n'
dedent|''
name|'return'
op|'('
string|'"nic"'
op|'+'
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_vif_devname_with_prefix
dedent|''
name|'def'
name|'get_vif_devname_with_prefix'
op|'('
name|'self'
op|','
name|'vif'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'devname'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'return'
name|'prefix'
op|'+'
name|'devname'
op|'['
number|'3'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_base_config
dedent|''
name|'def'
name|'get_base_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestInterface'
op|'('
op|')'
newline|'\n'
comment|'# Default to letting libvirt / the hypervisor choose the model'
nl|'\n'
name|'model'
op|'='
name|'None'
newline|'\n'
name|'driver'
op|'='
name|'None'
newline|'\n'
name|'vhost_queues'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# If the user has specified a 'vif_model' against the"
nl|'\n'
comment|'# image then honour that model'
nl|'\n'
name|'if'
name|'image_meta'
op|':'
newline|'\n'
indent|'            '
name|'model'
op|'='
name|'osinfo'
op|'.'
name|'HardwareProperties'
op|'('
name|'image_meta'
op|')'
op|'.'
name|'network_model'
newline|'\n'
nl|'\n'
comment|'# Else if the virt type is KVM/QEMU, use virtio according'
nl|'\n'
comment|'# to the global config parameter'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'model'
name|'is'
name|'None'
name|'and'
nl|'\n'
name|'virt_type'
name|'in'
op|'('
string|"'kvm'"
op|','
string|"'qemu'"
op|')'
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'use_virtio_for_bridges'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'model'
op|'='
name|'network_model'
op|'.'
name|'VIF_MODEL_VIRTIO'
newline|'\n'
nl|'\n'
comment|'# Workaround libvirt bug, where it mistakenly'
nl|'\n'
comment|'# enables vhost mode, even for non-KVM guests'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'model'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_VIRTIO'
name|'and'
nl|'\n'
name|'virt_type'
op|'=='
string|'"qemu"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'driver'
op|'='
string|'"qemu"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'is_vif_model_valid_for_virt'
op|'('
name|'virt_type'
op|','
nl|'\n'
name|'model'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedHardware'
op|'('
name|'model'
op|'='
name|'model'
op|','
nl|'\n'
name|'virt'
op|'='
name|'virt_type'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'virt_type'
op|'=='
string|"'kvm'"
name|'and'
nl|'\n'
name|'model'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_VIRTIO'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vhost_drv'
op|','
name|'vhost_queues'
op|'='
name|'self'
op|'.'
name|'_get_virtio_mq_settings'
op|'('
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|')'
newline|'\n'
name|'driver'
op|'='
name|'vhost_drv'
name|'or'
name|'driver'
newline|'\n'
nl|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_guest_frontend_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
name|'model'
op|','
name|'driver'
op|','
name|'vhost_queues'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|_get_virtio_mq_settings
dedent|''
name|'def'
name|'_get_virtio_mq_settings'
op|'('
name|'self'
op|','
name|'image_meta'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A methods to set the number of virtio queues,\n           if it has been requested in extra specs.\n        """'
newline|'\n'
name|'driver'
op|'='
name|'None'
newline|'\n'
name|'vhost_queues'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'image_meta'
op|','
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'img_props'
op|'='
name|'image_meta'
op|'.'
name|'properties'
newline|'\n'
name|'if'
name|'img_props'
op|'.'
name|'get'
op|'('
string|"'hw_vif_multiqueue_enabled'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'driver'
op|'='
string|"'vhost'"
newline|'\n'
name|'vhost_queues'
op|'='
name|'flavor'
op|'.'
name|'vcpus'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'driver'
op|','
name|'vhost_queues'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_bridge_name
dedent|''
name|'def'
name|'get_bridge_name'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_ovs_interfaceid
dedent|''
name|'def'
name|'get_ovs_interfaceid'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vif'
op|'.'
name|'get'
op|'('
string|"'ovs_interfaceid'"
op|')'
name|'or'
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_br_name
dedent|''
name|'def'
name|'get_br_name'
op|'('
name|'self'
op|','
name|'iface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"qbr"'
op|'+'
name|'iface_id'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_veth_pair_names
dedent|''
name|'def'
name|'get_veth_pair_names'
op|'('
name|'self'
op|','
name|'iface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
string|'"qvb%s"'
op|'%'
name|'iface_id'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
op|','
nl|'\n'
op|'('
string|'"qvo%s"'
op|'%'
name|'iface_id'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_firewall_required
dedent|''
name|'def'
name|'get_firewall_required'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vif'
op|'.'
name|'is_neutron_filtering_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'firewall_driver'
op|'!='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_config_bridge
dedent|''
name|'def'
name|'get_config_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get VIF configurations for bridge type."""'
newline|'\n'
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_bridge_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mac_id'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'name'
op|'='
string|'"nova-instance-"'
op|'+'
name|'instance'
op|'.'
name|'name'
op|'+'
string|'"-"'
op|'+'
name|'mac_id'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'filtername'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs_bridge
dedent|''
name|'def'
name|'get_config_ovs_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ovs_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs_hybrid
dedent|''
name|'def'
name|'get_config_ovs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newvif'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'newvif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_bridge'
op|'('
name|'instance'
op|','
name|'newvif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs
dedent|''
name|'def'
name|'get_config_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
name|'or'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'virt_type'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'virt_type'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_ivs_hybrid
dedent|''
dedent|''
name|'def'
name|'get_config_ivs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newvif'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'newvif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_bridge'
op|'('
name|'instance'
op|','
nl|'\n'
name|'newvif'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'virt_type'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_ivs_ethernet
dedent|''
name|'def'
name|'get_config_ivs_ethernet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
nl|'\n'
name|'vif'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ethernet_config'
op|'('
name|'conf'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ivs
dedent|''
name|'def'
name|'get_config_ivs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
name|'or'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ivs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'virt_type'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ivs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'virt_type'
op|','
nl|'\n'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_802qbg
dedent|''
dedent|''
name|'def'
name|'get_config_802qbg'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
name|'vif'
op|'['
string|'"qbg_params"'
op|']'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_802qbg_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'vif'
op|'['
string|"'network'"
op|']'
op|'.'
name|'get_meta'
op|'('
string|"'interface'"
op|')'
op|','
nl|'\n'
name|'params'
op|'['
string|"'managerid'"
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'typeid'"
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'typeidversion'"
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'instanceid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_802qbh
dedent|''
name|'def'
name|'get_config_802qbh'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'profile'
op|'='
name|'vif'
op|'['
string|'"profile"'
op|']'
newline|'\n'
name|'vif_details'
op|'='
name|'vif'
op|'['
string|'"details"'
op|']'
newline|'\n'
name|'net_type'
op|'='
string|"'direct'"
newline|'\n'
name|'if'
name|'vif'
op|'['
string|"'vnic_type'"
op|']'
op|'=='
name|'network_model'
op|'.'
name|'VNIC_TYPE_DIRECT'
op|':'
newline|'\n'
indent|'            '
name|'net_type'
op|'='
string|"'hostdev'"
newline|'\n'
nl|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_host_backend_802qbh_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'net_type'
op|','
name|'profile'
op|'['
string|"'pci_slot'"
op|']'
op|','
nl|'\n'
name|'vif_details'
op|'['
name|'network_model'
op|'.'
name|'VIF_DETAILS_PROFILEID'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_hw_veb
dedent|''
name|'def'
name|'get_config_hw_veb'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'profile'
op|'='
name|'vif'
op|'['
string|'"profile"'
op|']'
newline|'\n'
name|'vif_details'
op|'='
name|'vif'
op|'['
string|'"details"'
op|']'
newline|'\n'
name|'net_type'
op|'='
string|"'direct'"
newline|'\n'
name|'if'
name|'vif'
op|'['
string|"'vnic_type'"
op|']'
op|'=='
name|'network_model'
op|'.'
name|'VNIC_TYPE_DIRECT'
op|':'
newline|'\n'
indent|'            '
name|'net_type'
op|'='
string|"'hostdev'"
newline|'\n'
nl|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_host_backend_hw_veb'
op|'('
nl|'\n'
name|'conf'
op|','
name|'net_type'
op|','
name|'profile'
op|'['
string|"'pci_slot'"
op|']'
op|','
nl|'\n'
name|'vif_details'
op|'['
name|'network_model'
op|'.'
name|'VIF_DETAILS_VLAN'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_macvtap
dedent|''
name|'def'
name|'get_config_macvtap'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'vif_details'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
newline|'\n'
name|'macvtap_src'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_MACVTAP_SOURCE'
op|')'
newline|'\n'
name|'macvtap_mode'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_MACVTAP_MODE'
op|')'
newline|'\n'
name|'phys_interface'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_PHYS_INTERFACE'
op|')'
newline|'\n'
nl|'\n'
name|'missing_params'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'macvtap_src'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'missing_params'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_MACVTAP_SOURCE'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'macvtap_mode'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'missing_params'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_MACVTAP_MODE'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'phys_interface'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'missing_params'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_PHYS_INTERFACE'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'missing_params'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VifDetailsMissingMacvtapParameters'
op|'('
nl|'\n'
name|'vif_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'missing_params'
op|'='
name|'missing_params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_host_backend_direct_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'macvtap_src'
op|','
name|'macvtap_mode'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_iovisor
dedent|''
name|'def'
name|'get_config_iovisor'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ethernet_config'
op|'('
name|'conf'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_midonet
dedent|''
name|'def'
name|'get_config_midonet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ethernet_config'
op|'('
name|'conf'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_tap
dedent|''
name|'def'
name|'get_config_tap'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ethernet_config'
op|'('
name|'conf'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|_get_vhostuser_settings
dedent|''
name|'def'
name|'_get_vhostuser_settings'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_details'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
newline|'\n'
name|'mode'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_MODE'
op|','
nl|'\n'
string|"'server'"
op|')'
newline|'\n'
name|'sock_path'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_SOCKET'
op|')'
newline|'\n'
name|'if'
name|'sock_path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VifDetailsMissingVhostuserSockPath'
op|'('
nl|'\n'
name|'vif_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mode'
op|','
name|'sock_path'
newline|'\n'
nl|'\n'
DECL|member|get_config_vhostuser
dedent|''
name|'def'
name|'get_config_vhostuser'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
name|'mode'
op|','
name|'sock_path'
op|'='
name|'self'
op|'.'
name|'_get_vhostuser_settings'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_vhostuser_config'
op|'('
name|'conf'
op|','
name|'mode'
op|','
name|'sock_path'
op|')'
newline|'\n'
comment|'# (vladikr) Not setting up driver and queues for vhostuser'
nl|'\n'
comment|'# as queues are not supported in Libvirt until version 1.2.17'
nl|'\n'
name|'if'
name|'not'
name|'host'
op|'.'
name|'has_min_version'
op|'('
name|'MIN_LIBVIRT_VHOSTUSER_MQ'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Queues are not a vhostuser supported feature.'"
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'driver_name'
op|'='
name|'None'
newline|'\n'
name|'conf'
op|'.'
name|'vhost_queues'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ib_hostdev
dedent|''
name|'def'
name|'get_config_ib_hostdev'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestHostdevPCI'
op|'('
op|')'
newline|'\n'
name|'pci_slot'
op|'='
name|'vif'
op|'['
string|"'profile'"
op|']'
op|'['
string|"'pci_slot'"
op|']'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ib_hostdev_config'
op|'('
name|'conf'
op|','
name|'pci_slot'
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_vrouter
dedent|''
name|'def'
name|'get_config_vrouter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_base_config'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ethernet_config'
op|'('
name|'conf'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'inst_type'
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_type'
op|'='
name|'vif'
op|'['
string|"'type'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'vif_type=%(vif_type)s instance=%(instance)s '"
nl|'\n'
string|"'vif=%(vif)s virt_type=%(virt_type)s'"
op|','
nl|'\n'
op|'{'
string|"'vif_type'"
op|':'
name|'vif_type'
op|','
string|"'instance'"
op|':'
name|'instance'
op|','
nl|'\n'
string|"'vif'"
op|':'
name|'vif'
op|','
string|"'virt_type'"
op|':'
name|'virt_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"vif_type parameter must be present "'
nl|'\n'
string|'"for this vif_driver implementation"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'vif_slug'
op|'='
name|'self'
op|'.'
name|'_normalize_vif_type'
op|'('
name|'vif_type'
op|')'
newline|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'get_config_%s'"
op|'%'
name|'vif_slug'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'func'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unexpected vif_type=%s"'
op|')'
op|'%'
name|'vif_type'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'func'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'virt_type'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_bridge
dedent|''
name|'def'
name|'plug_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that the bridge exists, and add VIF to it."""'
newline|'\n'
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'multi_host'"
op|','
name|'False'
op|')'
name|'and'
nl|'\n'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'should_create_bridge'"
op|','
name|'False'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'should_create_vlan'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'vlan_interface'
name|'or'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'bridge_interface'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Ensuring vlan %(vlan)s and bridge %(bridge)s'"
op|','
nl|'\n'
op|'{'
string|"'vlan'"
op|':'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'vlan'"
op|')'
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
nl|'\n'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'vlan'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'iface'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'flat_interface'
name|'or'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'bridge_interface'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Ensuring bridge %s"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_bridge'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'iface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs_bridge
dedent|''
dedent|''
dedent|''
name|'def'
name|'plug_ovs_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No manual plugging required."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_plug_bridge_with_port
dedent|''
name|'def'
name|'_plug_bridge_with_port'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iface_id'
op|'='
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'br_name'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'v1_name'
op|','
name|'v2_name'
op|'='
name|'self'
op|'.'
name|'get_veth_pair_names'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'linux_net'
op|'.'
name|'device_exists'
op|'('
name|'br_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'addbr'"
op|','
name|'br_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'setfd'"
op|','
name|'br_name'
op|','
number|'0'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'stp'"
op|','
name|'br_name'
op|','
string|"'off'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'tee'"
op|','
nl|'\n'
op|'('
string|"'/sys/class/net/%s/bridge/multicast_snooping'"
op|'%'
nl|'\n'
name|'br_name'
op|')'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'0'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
name|'disv6'
op|'='
string|"'/proc/sys/net/ipv6/conf/%s/disable_ipv6'"
op|'%'
name|'br_name'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'disv6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'tee'"
op|','
nl|'\n'
name|'disv6'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'1'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'linux_net'
op|'.'
name|'device_exists'
op|'('
name|'v2_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mtu'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'.'
name|'get_meta'
op|'('
string|"'mtu'"
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'_create_veth_pair'
op|'('
name|'v1_name'
op|','
name|'v2_name'
op|','
name|'mtu'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'br_name'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'addif'"
op|','
name|'br_name'
op|','
name|'v1_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'port'
op|'=='
string|"'ovs'"
op|':'
newline|'\n'
indent|'                '
name|'linux_net'
op|'.'
name|'create_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'v2_name'
op|','
name|'iface_id'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'mtu'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'port'
op|'=='
string|"'ivs'"
op|':'
newline|'\n'
indent|'                '
name|'linux_net'
op|'.'
name|'create_ivs_vif_port'
op|'('
name|'v2_name'
op|','
name|'iface_id'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs_hybrid
dedent|''
dedent|''
dedent|''
name|'def'
name|'plug_ovs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug using hybrid strategy\n\n        Create a per-VIF linux bridge, then link that bridge to the OVS\n        integration bridge via a veth device, setting up the other end\n        of the veth device just like a normal OVS port.  Then boot the\n        VIF on the linux bridge using standard libvirt mechanisms.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_plug_bridge_with_port'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'port'
op|'='
string|"'ovs'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs
dedent|''
name|'def'
name|'plug_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
name|'or'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ivs_ethernet
dedent|''
dedent|''
name|'def'
name|'plug_ivs_ethernet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iface_id'
op|'='
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_tap_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_ivs_vif_port'
op|'('
name|'dev'
op|','
name|'iface_id'
op|','
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ivs_hybrid
dedent|''
name|'def'
name|'plug_ivs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug using hybrid strategy (same as OVS)\n\n        Create a per-VIF linux bridge, then link that bridge to the OVS\n        integration bridge via a veth device, setting up the other end\n        of the veth device just like a normal IVS port.  Then boot the\n        VIF on the linux bridge using standard libvirt mechanisms.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_plug_bridge_with_port'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'port'
op|'='
string|"'ivs'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ivs
dedent|''
name|'def'
name|'plug_ivs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
name|'or'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ivs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ivs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ib_hostdev
dedent|''
dedent|''
name|'def'
name|'plug_ib_hostdev'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fabric'
op|'='
name|'vif'
op|'.'
name|'get_physical_network'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fabric'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkMissingPhysicalNetwork'
op|'('
nl|'\n'
name|'network_uuid'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'pci_slot'
op|'='
name|'vif'
op|'['
string|"'profile'"
op|']'
op|'['
string|"'pci_slot'"
op|']'
newline|'\n'
name|'device_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'vnic_mac'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ebrctl'"
op|','
string|"'add-port'"
op|','
name|'vnic_mac'
op|','
name|'device_id'
op|','
nl|'\n'
name|'fabric'
op|','
name|'network_model'
op|'.'
name|'VIF_TYPE_IB_HOSTDEV'
op|','
nl|'\n'
name|'pci_slot'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_LE'
op|'('
string|'"Failed while plugging ib hostdev vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_802qbg
dedent|''
dedent|''
name|'def'
name|'plug_802qbg'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|plug_802qbh
dedent|''
name|'def'
name|'plug_802qbh'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|plug_hw_veb
dedent|''
name|'def'
name|'plug_hw_veb'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vif'
op|'['
string|"'vnic_type'"
op|']'
op|'=='
name|'network_model'
op|'.'
name|'VNIC_TYPE_MACVTAP'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'set_vf_interface_vlan'
op|'('
nl|'\n'
name|'vif'
op|'['
string|"'profile'"
op|']'
op|'['
string|"'pci_slot'"
op|']'
op|','
nl|'\n'
name|'mac_addr'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'vlan'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'['
name|'network_model'
op|'.'
name|'VIF_DETAILS_VLAN'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_macvtap
dedent|''
dedent|''
name|'def'
name|'plug_macvtap'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_details'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
newline|'\n'
name|'vlan'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_VLAN'
op|')'
newline|'\n'
name|'if'
name|'vlan'
op|':'
newline|'\n'
indent|'            '
name|'vlan_name'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_MACVTAP_SOURCE'
op|')'
newline|'\n'
name|'phys_if'
op|'='
name|'vif_details'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_PHYS_INTERFACE'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_vlan'
op|'('
nl|'\n'
name|'vlan'
op|','
name|'phys_if'
op|','
name|'interface'
op|'='
name|'vlan_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_midonet
dedent|''
dedent|''
name|'def'
name|'plug_midonet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug into MidoNet\'s network port\n\n        Bind the vif to a MidoNet virtual port.\n        """'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'port_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'create_tap_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mm-ctl'"
op|','
string|"'--bind-port'"
op|','
name|'port_id'
op|','
name|'dev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while plugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_iovisor
dedent|''
dedent|''
name|'def'
name|'plug_iovisor'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug using PLUMgrid IO Visor Driver\n\n        Connect a network device to their respective\n        Virtual Domain in PLUMgrid Platform.\n        """'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'iface_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_tap_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'net_id'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'tenant_id'
op|'='
name|'instance'
op|'.'
name|'project_id'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ifc_ctl'"
op|','
string|"'gateway'"
op|','
string|"'add_port'"
op|','
name|'dev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ifc_ctl'"
op|','
string|"'gateway'"
op|','
string|"'ifup'"
op|','
name|'dev'
op|','
nl|'\n'
string|"'access_vm'"
op|','
nl|'\n'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|'+'
string|'"_"'
op|'+'
name|'iface_id'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
string|"'pgtag2=%s'"
op|'%'
name|'net_id'
op|','
nl|'\n'
string|"'pgtag1=%s'"
op|'%'
name|'tenant_id'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while plugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_tap
dedent|''
dedent|''
name|'def'
name|'plug_tap'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug a VIF_TYPE_TAP virtual interface."""'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'mac'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
name|'network_model'
op|'.'
name|'VIF_DETAILS_TAP_MAC_ADDRESS'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_tap_dev'
op|'('
name|'dev'
op|','
name|'mac'
op|')'
newline|'\n'
name|'network'
op|'='
name|'vif'
op|'.'
name|'get'
op|'('
string|"'network'"
op|')'
newline|'\n'
name|'mtu'
op|'='
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'mtu'"
op|')'
name|'if'
name|'network'
name|'else'
name|'None'
newline|'\n'
name|'linux_net'
op|'.'
name|'_set_device_mtu'
op|'('
name|'dev'
op|','
name|'mtu'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vhostuser_fp
dedent|''
name|'def'
name|'plug_vhostuser_fp'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a fp netdevice interface with a vhostuser socket"""'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'if'
name|'linux_net'
op|'.'
name|'device_exists'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'ovs_plug'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_OVS_PLUG'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'sockmode_qemu'
op|','
name|'sockpath'
op|'='
name|'self'
op|'.'
name|'_get_vhostuser_settings'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'sockmode_port'
op|'='
string|"'client'"
name|'if'
name|'sockmode_qemu'
op|'=='
string|"'server'"
name|'else'
string|"'server'"
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'create_fp_dev'
op|'('
name|'dev'
op|','
name|'sockpath'
op|','
name|'sockmode_port'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ovs_plug'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'plug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'addif'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
op|','
nl|'\n'
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'iface_id'
op|'='
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'mtu'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'.'
name|'get_meta'
op|'('
string|"'mtu'"
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'dev'
op|','
name|'iface_id'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
name|'mtu'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while plugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vhostuser_ovs
dedent|''
dedent|''
name|'def'
name|'plug_vhostuser_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug a VIF_TYPE_VHOSTUSER into an ovs bridge"""'
newline|'\n'
name|'iface_id'
op|'='
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'port_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
nl|'\n'
name|'vif'
op|'['
string|"'details'"
op|']'
op|'['
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_SOCKET'
op|']'
op|')'
newline|'\n'
name|'mtu'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'.'
name|'get_meta'
op|'('
string|"'mtu'"
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_ovs_vif_port'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'port_name'
op|','
name|'iface_id'
op|','
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
name|'mtu'
op|','
nl|'\n'
name|'interface_type'
op|'='
name|'network_model'
op|'.'
name|'OVS_VHOSTUSER_INTERFACE_TYPE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vhostuser
dedent|''
name|'def'
name|'plug_vhostuser'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp_plug'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_FP_PLUG'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'ovs_plug'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_OVS_PLUG'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'if'
name|'fp_plug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_vhostuser_fp'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ovs_plug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_vhostuser_ovs'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vrouter
dedent|''
dedent|''
name|'def'
name|'plug_vrouter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug into Contrail\'s network port\n\n        Bind the vif to a Contrail virtual port.\n        """'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'ip_addr'
op|'='
string|"'0.0.0.0'"
newline|'\n'
name|'ip6_addr'
op|'='
name|'None'
newline|'\n'
name|'subnets'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
newline|'\n'
name|'for'
name|'subnet'
name|'in'
name|'subnets'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'ips'
op|'='
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'ips'
op|'['
string|"'address'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'ips'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ips'
op|'['
string|"'address'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'ip_addr'
op|'='
name|'ips'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'ips'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ips'
op|'['
string|"'address'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'ip6_addr'
op|'='
name|'ips'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'ptype'
op|'='
string|"'NovaVMPort'"
newline|'\n'
name|'if'
op|'('
name|'cfg'
op|'.'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'virt_type'
op|'=='
string|"'lxc'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ptype'
op|'='
string|"'NameSpacePort'"
newline|'\n'
nl|'\n'
dedent|''
name|'cmd_args'
op|'='
op|'('
string|'"--oper=add --uuid=%s --instance_uuid=%s --vn_uuid=%s "'
nl|'\n'
string|'"--vm_project_uuid=%s --ip_address=%s --ipv6_address=%s"'
nl|'\n'
string|'" --vm_name=%s --mac=%s --tap_name=%s --port_type=%s "'
nl|'\n'
string|'"--tx_vlan_id=%d --rx_vlan_id=%d"'
op|'%'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'project_id'
op|','
name|'ip_addr'
op|','
name|'ip6_addr'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'display_name'
op|','
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'devname'"
op|']'
op|','
name|'ptype'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'create_tap_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'vrouter-port-control'"
op|','
name|'cmd_args'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while plugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_type'
op|'='
name|'vif'
op|'['
string|"'type'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'vif_type=%(vif_type)s instance=%(instance)s '"
nl|'\n'
string|"'vif=%(vif)s'"
op|','
nl|'\n'
op|'{'
string|"'vif_type'"
op|':'
name|'vif_type'
op|','
string|"'instance'"
op|':'
name|'instance'
op|','
nl|'\n'
string|"'vif'"
op|':'
name|'vif'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfacePlugException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"vif_type parameter must be present "'
nl|'\n'
string|'"for this vif_driver implementation"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'vif_slug'
op|'='
name|'self'
op|'.'
name|'_normalize_vif_type'
op|'('
name|'vif_type'
op|')'
newline|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'plug_%s'"
op|'%'
name|'vif_slug'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'func'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VirtualInterfacePlugException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Plug vif failed because of unexpected "'
nl|'\n'
string|'"vif_type=%s"'
op|')'
op|'%'
name|'vif_type'
op|')'
newline|'\n'
dedent|''
name|'func'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_bridge
dedent|''
name|'def'
name|'unplug_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No manual unplugging required."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs_bridge
dedent|''
name|'def'
name|'unplug_ovs_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No manual unplugging required."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs_hybrid
dedent|''
name|'def'
name|'unplug_ovs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""UnPlug using hybrid strategy\n\n        Unhook port from OVS, unhook port from bridge, delete\n        bridge, and delete both veth devices.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'br_name'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'v1_name'
op|','
name|'v2_name'
op|'='
name|'self'
op|'.'
name|'get_veth_pair_names'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'linux_net'
op|'.'
name|'device_exists'
op|'('
name|'br_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'delif'"
op|','
name|'br_name'
op|','
name|'v1_name'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'br_name'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'delbr'"
op|','
name|'br_name'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'linux_net'
op|'.'
name|'delete_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'v2_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs
dedent|''
dedent|''
name|'def'
name|'unplug_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
name|'or'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ivs_ethernet
dedent|''
dedent|''
name|'def'
name|'unplug_ivs_ethernet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug the VIF by deleting the port from the bridge."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'delete_ivs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ivs_hybrid
dedent|''
dedent|''
name|'def'
name|'unplug_ivs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""UnPlug using hybrid strategy (same as OVS)\n\n        Unhook port from IVS, unhook port from bridge, delete\n        bridge, and delete both veth devices.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'br_name'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'v1_name'
op|','
name|'v2_name'
op|'='
name|'self'
op|'.'
name|'get_veth_pair_names'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'delif'"
op|','
name|'br_name'
op|','
name|'v1_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'br_name'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'delbr'"
op|','
name|'br_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'delete_ivs_vif_port'
op|'('
name|'v2_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ivs
dedent|''
dedent|''
name|'def'
name|'unplug_ivs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
name|'vif'
op|')'
name|'or'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ivs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ivs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ib_hostdev
dedent|''
dedent|''
name|'def'
name|'unplug_ib_hostdev'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fabric'
op|'='
name|'vif'
op|'.'
name|'get_physical_network'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fabric'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkMissingPhysicalNetwork'
op|'('
nl|'\n'
name|'network_uuid'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'vnic_mac'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ebrctl'"
op|','
string|"'del-port'"
op|','
name|'fabric'
op|','
name|'vnic_mac'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging ib hostdev vif"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_802qbg
dedent|''
dedent|''
name|'def'
name|'unplug_802qbg'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug_802qbh
dedent|''
name|'def'
name|'unplug_802qbh'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug_hw_veb
dedent|''
name|'def'
name|'unplug_hw_veb'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vif'
op|'['
string|"'vnic_type'"
op|']'
op|'=='
name|'network_model'
op|'.'
name|'VNIC_TYPE_MACVTAP'
op|':'
newline|'\n'
comment|"# The ip utility doesn't accept the MAC 00:00:00:00:00:00."
nl|'\n'
comment|'# Therefore, keep the MAC unchanged.  Later operations on'
nl|'\n'
comment|'# the same VF will not be affected by the existing MAC.'
nl|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'set_vf_interface_vlan'
op|'('
name|'vif'
op|'['
string|"'profile'"
op|']'
op|'['
string|"'pci_slot'"
op|']'
op|','
nl|'\n'
name|'mac_addr'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_macvtap
dedent|''
dedent|''
name|'def'
name|'unplug_macvtap'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug_midonet
dedent|''
name|'def'
name|'unplug_midonet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug from MidoNet network port\n\n        Unbind the vif from a MidoNet virtual port.\n        """'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'port_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mm-ctl'"
op|','
string|"'--unbind-port'"
op|','
name|'port_id'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_tap
dedent|''
dedent|''
name|'def'
name|'unplug_tap'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug a VIF_TYPE_TAP virtual interface."""'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_iovisor
dedent|''
dedent|''
name|'def'
name|'unplug_iovisor'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug using PLUMgrid IO Visor Driver\n\n        Delete network device and to their respective\n        connection to the Virtual Domain in PLUMgrid Platform.\n        """'
newline|'\n'
name|'iface_id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ifc_ctl'"
op|','
string|"'gateway'"
op|','
string|"'ifdown'"
op|','
nl|'\n'
name|'dev'
op|','
string|"'access_vm'"
op|','
nl|'\n'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|'+'
string|'"_"'
op|'+'
name|'iface_id'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ifc_ctl'"
op|','
string|"'gateway'"
op|','
string|"'del_port'"
op|','
name|'dev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vhostuser_fp
dedent|''
dedent|''
name|'def'
name|'unplug_vhostuser_fp'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a fp netdevice interface with a vhostuser socket"""'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'ovs_plug'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_OVS_PLUG'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ovs_plug'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'vif'
op|'.'
name|'is_hybrid_plug_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'unplug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'linux_net'
op|'.'
name|'delete_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'dev'
op|','
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'linux_net'
op|'.'
name|'delete_fp_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vhostuser_ovs
dedent|''
dedent|''
name|'def'
name|'unplug_vhostuser_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug a VIF_TYPE_VHOSTUSER into an ovs bridge"""'
newline|'\n'
name|'port_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
nl|'\n'
name|'vif'
op|'['
string|"'details'"
op|']'
op|'['
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_SOCKET'
op|']'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'delete_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'vif'
op|')'
op|','
nl|'\n'
name|'port_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vhostuser
dedent|''
name|'def'
name|'unplug_vhostuser'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp_plug'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_FP_PLUG'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'ovs_plug'
op|'='
name|'vif'
op|'['
string|"'details'"
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_DETAILS_VHOSTUSER_OVS_PLUG'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'if'
name|'fp_plug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_vhostuser_fp'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ovs_plug'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_vhostuser_ovs'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vrouter
dedent|''
dedent|''
name|'def'
name|'unplug_vrouter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug Contrail\'s network port\n\n        Unbind the vif from a Contrail virtual port.\n        """'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'cmd_args'
op|'='
op|'('
string|'"--oper=delete --uuid=%s"'
op|'%'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'vrouter-port-control'"
op|','
name|'cmd_args'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'delete_net_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_LE'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_type'
op|'='
name|'vif'
op|'['
string|"'type'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'vif_type=%(vif_type)s instance=%(instance)s '"
nl|'\n'
string|"'vif=%(vif)s'"
op|','
nl|'\n'
op|'{'
string|"'vif_type'"
op|':'
name|'vif_type'
op|','
string|"'instance'"
op|':'
name|'instance'
op|','
nl|'\n'
string|"'vif'"
op|':'
name|'vif'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"vif_type parameter must be present "'
nl|'\n'
string|'"for this vif_driver implementation"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'vif_slug'
op|'='
name|'self'
op|'.'
name|'_normalize_vif_type'
op|'('
name|'vif_type'
op|')'
newline|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'unplug_%s'"
op|'%'
name|'vif_slug'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'func'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unexpected vif_type=%s"'
op|')'
op|'%'
name|'vif_type'
op|')'
newline|'\n'
dedent|''
name|'func'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

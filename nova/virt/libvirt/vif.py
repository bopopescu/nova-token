begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (C) 2011 Midokura KK'
nl|'\n'
comment|'# Copyright (C) 2011 Nicira, Inc'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""VIF drivers for libvirt."""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'designer'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|libvirt_vif_opts
name|'libvirt_vif_opts'
op|'='
op|'['
nl|'\n'
comment|'# quantum_ovs_bridge is used, if Quantum provides Nova'
nl|'\n'
comment|"# the 'vif_type' portbinding field"
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'libvirt_ovs_bridge'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'br-int'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of Integration Bridge used by Open vSwitch'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'libvirt_use_virtio_for_bridges'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use virtio for bridge interfaces with KVM/QEMU'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'libvirt_vif_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'libvirt_type'"
op|','
string|"'nova.virt.libvirt.driver'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'use_ipv6'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Since libvirt 0.9.11, <interface type='bridge'>"
nl|'\n'
comment|'# supports OpenVSwitch natively.'
nl|'\n'
DECL|variable|LIBVIRT_OVS_VPORT_VERSION
name|'LIBVIRT_OVS_VPORT_VERSION'
op|'='
number|'9011'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_vif_model_valid_for_virt
name|'def'
name|'is_vif_model_valid_for_virt'
op|'('
name|'virt_type'
op|','
name|'vif_model'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'valid_models'
op|'='
op|'{'
nl|'\n'
string|"'qemu'"
op|':'
op|'['
string|"'virtio'"
op|','
string|"'ne2k_pci'"
op|','
string|"'pcnet'"
op|','
string|"'rtl8139'"
op|','
string|"'e1000'"
op|']'
op|','
nl|'\n'
string|"'kvm'"
op|':'
op|'['
string|"'virtio'"
op|','
string|"'ne2k_pci'"
op|','
string|"'pcnet'"
op|','
string|"'rtl8139'"
op|','
string|"'e1000'"
op|']'
op|','
nl|'\n'
string|"'xen'"
op|':'
op|'['
string|"'netfront'"
op|','
string|"'ne2k_pci'"
op|','
string|"'pcnet'"
op|','
string|"'rtl8139'"
op|','
string|"'e1000'"
op|']'
op|','
nl|'\n'
string|"'lxc'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'uml'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_model'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'virt_type'
name|'not'
name|'in'
name|'valid_models'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedVirtType'
op|'('
name|'virt'
op|'='
name|'virt_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'vif_model'
name|'in'
name|'valid_models'
op|'['
name|'virt_type'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtBaseVIFDriver
dedent|''
name|'class'
name|'LibvirtBaseVIFDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'get_connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'get_connection'
op|'='
name|'get_connection'
newline|'\n'
name|'self'
op|'.'
name|'libvirt_version'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|has_libvirt_version
dedent|''
name|'def'
name|'has_libvirt_version'
op|'('
name|'self'
op|','
name|'want'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'libvirt_version'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'self'
op|'.'
name|'get_connection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'libvirt_version'
op|'='
name|'conn'
op|'.'
name|'getLibVersion'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'libvirt_version'
op|'>='
name|'want'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_vif_devname
dedent|''
name|'def'
name|'get_vif_devname'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'vif_devname'"
name|'in'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'mapping'
op|'['
string|"'vif_devname'"
op|']'
newline|'\n'
dedent|''
name|'return'
op|'('
string|'"nic"'
op|'+'
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestInterface'
op|'('
op|')'
newline|'\n'
comment|'# Default to letting libvirt / the hypervisor choose the model'
nl|'\n'
name|'model'
op|'='
name|'None'
newline|'\n'
name|'driver'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# If the user has specified a 'vif_model' against the"
nl|'\n'
comment|'# image then honour that model'
nl|'\n'
name|'if'
name|'image_meta'
op|':'
newline|'\n'
indent|'            '
name|'vif_model'
op|'='
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
nl|'\n'
op|'{'
op|'}'
op|')'
op|'.'
name|'get'
op|'('
string|"'hw_vif_model'"
op|')'
newline|'\n'
name|'if'
name|'vif_model'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'model'
op|'='
name|'vif_model'
newline|'\n'
nl|'\n'
comment|'# Else if the virt type is KVM/QEMU, use virtio according'
nl|'\n'
comment|'# to the global config parameter'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'model'
name|'is'
name|'None'
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt_type'
name|'in'
op|'('
string|"'kvm'"
op|','
string|"'qemu'"
op|')'
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt_use_virtio_for_bridges'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'model'
op|'='
string|'"virtio"'
newline|'\n'
nl|'\n'
comment|'# Workaround libvirt bug, where it mistakenly'
nl|'\n'
comment|'# enables vhost mode, even for non-KVM guests'
nl|'\n'
dedent|''
name|'if'
name|'model'
op|'=='
string|'"virtio"'
name|'and'
name|'CONF'
op|'.'
name|'libvirt_type'
op|'=='
string|'"qemu"'
op|':'
newline|'\n'
indent|'            '
name|'driver'
op|'='
string|'"qemu"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'is_vif_model_valid_for_virt'
op|'('
name|'CONF'
op|'.'
name|'libvirt_type'
op|','
nl|'\n'
name|'model'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedHardware'
op|'('
name|'model'
op|'='
name|'model'
op|','
nl|'\n'
name|'virt'
op|'='
name|'CONF'
op|'.'
name|'libvirt_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_guest_frontend_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|','
name|'model'
op|','
name|'driver'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtGenericVIFDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtGenericVIFDriver'
op|'('
name|'LibvirtBaseVIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generic VIF driver for libvirt networking."""'
newline|'\n'
nl|'\n'
DECL|member|get_bridge_name
name|'def'
name|'get_bridge_name'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_ovs_interfaceid
dedent|''
name|'def'
name|'get_ovs_interfaceid'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'mapping'
op|'['
string|"'ovs_interfaceid'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_br_name
dedent|''
name|'def'
name|'get_br_name'
op|'('
name|'self'
op|','
name|'iface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"qbr"'
op|'+'
name|'iface_id'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_veth_pair_names
dedent|''
name|'def'
name|'get_veth_pair_names'
op|'('
name|'self'
op|','
name|'iface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
string|'"qvb%s"'
op|'%'
name|'iface_id'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
op|','
nl|'\n'
op|'('
string|'"qvo%s"'
op|'%'
name|'iface_id'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_firewall_required
dedent|''
name|'def'
name|'get_firewall_required'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# TODO(berrange): Extend this to use information from VIF model'
nl|'\n'
comment|'# which can indicate whether the network provider (eg Quantum)'
nl|'\n'
comment|'# has already applied firewall filtering itself.'
nl|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'firewall_driver'
op|'!='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_config_bridge
dedent|''
name|'def'
name|'get_config_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get VIF configurations for bridge type."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_bridge_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'mapping'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mac_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'name'
op|'='
string|'"nova-instance-"'
op|'+'
name|'instance'
op|'['
string|"'name'"
op|']'
op|'+'
string|'"-"'
op|'+'
name|'mac_id'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'filtername'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'designer'
op|'.'
name|'set_vif_bandwidth_config'
op|'('
name|'conf'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs_ethernet
dedent|''
name|'def'
name|'get_config_ovs_ethernet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'mapping'
op|')'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ethernet_config'
op|'('
name|'conf'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs_bridge
dedent|''
name|'def'
name|'get_config_ovs_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_ovs_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'mapping'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'mapping'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs_hybrid
dedent|''
name|'def'
name|'get_config_ovs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'newnet'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'network'
op|')'
newline|'\n'
name|'newnet'
op|'['
string|"'bridge'"
op|']'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_bridge'
op|'('
name|'instance'
op|','
nl|'\n'
name|'newnet'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_ovs
dedent|''
name|'def'
name|'get_config_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'has_libvirt_version'
op|'('
name|'LIBVIRT_OVS_VPORT_VERSION'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_bridge'
op|'('
name|'instance'
op|','
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_ethernet'
op|'('
name|'instance'
op|','
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_802qbg
dedent|''
dedent|''
name|'def'
name|'get_config_802qbg'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
name|'mapping'
op|'['
string|'"qbg_params"'
op|']'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_802qbg_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'network'
op|'['
string|'"interface"'
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'managerid'"
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'typeid'"
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'typeidversion'"
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'instanceid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config_802qbh
dedent|''
name|'def'
name|'get_config_802qbh'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
name|'mapping'
op|'['
string|'"qbh_params"'
op|']'
newline|'\n'
name|'designer'
op|'.'
name|'set_vif_host_backend_802qbh_config'
op|'('
nl|'\n'
name|'conf'
op|','
name|'network'
op|'['
string|'"interface"'
op|']'
op|','
nl|'\n'
name|'params'
op|'['
string|"'profileid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_type'
op|'='
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'vif_type'"
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"vif_type=%(vif_type)s instance=%(instance)s "'
nl|'\n'
string|'"network=%(network)s mapping=%(mapping)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"vif_type parameter must be present "'
nl|'\n'
string|'"for this vif_driver implementation"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_bridge'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_OVS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_ovs'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBG'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_802qbg'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBH'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_config_802qbh'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unexpected vif_type=%s"'
op|')'
op|'%'
name|'vif_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_bridge
dedent|''
dedent|''
name|'def'
name|'plug_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that the bridge exists, and add VIF to it."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'network'
op|'.'
name|'get'
op|'('
string|"'multi_host'"
op|')'
name|'and'
nl|'\n'
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'should_create_bridge'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'should_create_vlan'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'vlan_interface'
name|'or'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Ensuring vlan %(vlan)s and bridge %(bridge)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'vlan'"
op|':'
name|'network'
op|'['
string|"'vlan'"
op|']'
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
nl|'\n'
name|'network'
op|'['
string|"'vlan'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'iface'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'iface'
op|'='
name|'CONF'
op|'.'
name|'flat_interface'
name|'or'
name|'network'
op|'['
string|"'bridge_interface'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Ensuring bridge %s"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'LinuxBridgeInterfaceDriver'
op|'.'
name|'ensure_bridge'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'iface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs_ethernet
dedent|''
dedent|''
dedent|''
name|'def'
name|'plug_ovs_ethernet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'iface_id'
op|'='
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'mapping'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'mapping'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_tap_dev'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'dev'
op|','
name|'iface_id'
op|','
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs_bridge
dedent|''
name|'def'
name|'plug_ovs_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No manual plugging required."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs_hybrid
dedent|''
name|'def'
name|'plug_ovs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug using hybrid strategy\n\n        Create a per-VIF linux bridge, then link that bridge to the OVS\n        integration bridge via a veth device, setting up the other end\n        of the veth device just like a normal OVS port.  Then boot the\n        VIF on the linux bridge using standard libvirt mechanisms.\n        """'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'iface_id'
op|'='
name|'self'
op|'.'
name|'get_ovs_interfaceid'
op|'('
name|'mapping'
op|')'
newline|'\n'
name|'br_name'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
newline|'\n'
name|'v1_name'
op|','
name|'v2_name'
op|'='
name|'self'
op|'.'
name|'get_veth_pair_names'
op|'('
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'linux_net'
op|'.'
name|'device_exists'
op|'('
name|'br_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'addbr'"
op|','
name|'br_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'setfd'"
op|','
name|'br_name'
op|','
number|'0'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'stp'"
op|','
name|'br_name'
op|','
string|"'off'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'linux_net'
op|'.'
name|'device_exists'
op|'('
name|'v2_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'_create_veth_pair'
op|'('
name|'v1_name'
op|','
name|'v2_name'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'br_name'
op|','
string|"'up'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'addif'"
op|','
name|'br_name'
op|','
name|'v1_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'create_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'v2_name'
op|','
name|'iface_id'
op|','
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_ovs
dedent|''
dedent|''
name|'def'
name|'plug_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'has_libvirt_version'
op|'('
name|'LIBVIRT_OVS_VPORT_VERSION'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ovs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_802qbg
dedent|''
dedent|''
name|'def'
name|'plug_802qbg'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_802qbh
dedent|''
name|'def'
name|'plug_802qbh'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'vif_type'
op|'='
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'vif_type'"
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"vif_type=%(vif_type)s instance=%(instance)s "'
nl|'\n'
string|'"network=%(network)s mapping=%(mapping)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"vif_type parameter must be present "'
nl|'\n'
string|'"for this vif_driver implementation"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_OVS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_ovs'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBG'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_802qbg'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBH'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'plug_802qbh'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unexpected vif_type=%s"'
op|')'
op|'%'
name|'vif_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_bridge
dedent|''
dedent|''
name|'def'
name|'unplug_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No manual unplugging required."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs_ethernet
dedent|''
name|'def'
name|'unplug_ovs_ethernet'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug the VIF by deleting the port from the bridge."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'linux_net'
op|'.'
name|'delete_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_vif_devname'
op|'('
name|'mapping'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs_bridge
dedent|''
dedent|''
name|'def'
name|'unplug_ovs_bridge'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No manual unplugging required."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs_hybrid
dedent|''
name|'def'
name|'unplug_ovs_hybrid'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""UnPlug using hybrid strategy\n\n        Unhook port from OVS, unhook port from bridge, delete\n        bridge, and delete both veth devices.\n        """'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'br_name'
op|'='
name|'self'
op|'.'
name|'get_br_name'
op|'('
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
newline|'\n'
name|'v1_name'
op|','
name|'v2_name'
op|'='
name|'self'
op|'.'
name|'get_veth_pair_names'
op|'('
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'delif'"
op|','
name|'br_name'
op|','
name|'v1_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'link'"
op|','
string|"'set'"
op|','
name|'br_name'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'brctl'"
op|','
string|"'delbr'"
op|','
name|'br_name'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'linux_net'
op|'.'
name|'delete_ovs_vif_port'
op|'('
name|'self'
op|'.'
name|'get_bridge_name'
op|'('
name|'network'
op|')'
op|','
nl|'\n'
name|'v2_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Failed while unplugging vif"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_ovs
dedent|''
dedent|''
name|'def'
name|'unplug_ovs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'get_firewall_required'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'has_libvirt_version'
op|'('
name|'LIBVIRT_OVS_VPORT_VERSION'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ovs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_802qbg
dedent|''
dedent|''
name|'def'
name|'unplug_802qbg'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_802qbh
dedent|''
name|'def'
name|'unplug_802qbh'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtGenericVIFDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|','
name|'mapping'
op|'='
name|'vif'
newline|'\n'
name|'vif_type'
op|'='
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'vif_type'"
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"vif_type=%(vif_type)s instance=%(instance)s "'
nl|'\n'
string|'"network=%(network)s mapping=%(mapping)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vif_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"vif_type parameter must be present "'
nl|'\n'
string|'"for this vif_driver implementation"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_OVS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_ovs'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBG'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_802qbg'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vif_type'
op|'=='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBH'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unplug_802qbh'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unexpected vif_type=%s"'
op|')'
op|'%'
name|'vif_type'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtBridgeDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtBridgeDriver'
op|'('
name|'LibvirtGenericVIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retained in Grizzly for compatibility with Quantum\n       drivers which do not yet report \'vif_type\' port binding.\n       Will be deprecated in Havana, and removed in Ixxxx.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_config
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'_'
op|'('
string|'"The LibvirtBridgeDriver VIF driver is now "'
nl|'\n'
string|'"deprecated and will be removed in the next release. "'
nl|'\n'
string|'"Please use the LibvirtGenericVIFDriver VIF driver, "'
nl|'\n'
string|'"together with a network plugin that reports the "'
nl|'\n'
string|'"\'vif_type\' attribute"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_bridge'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'plug_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unplug_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtOpenVswitchDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtOpenVswitchDriver'
op|'('
name|'LibvirtGenericVIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retained in Grizzly for compatibility with Quantum\n       drivers which do not yet report \'vif_type\' port binding.\n       Will be deprecated in Havana, and removed in Ixxxx.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_bridge_name
name|'def'
name|'get_bridge_name'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network'
op|'.'
name|'get'
op|'('
string|"'bridge'"
op|')'
name|'or'
name|'CONF'
op|'.'
name|'libvirt_ovs_bridge'
newline|'\n'
nl|'\n'
DECL|member|get_ovs_interfaceid
dedent|''
name|'def'
name|'get_ovs_interfaceid'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'ovs_interfaceid'"
op|')'
name|'or'
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'_'
op|'('
string|'"The LibvirtOpenVswitchDriver VIF driver is now "'
nl|'\n'
string|'"deprecated and will be removed in the next release. "'
nl|'\n'
string|'"Please use the LibvirtGenericVIFDriver VIF driver, "'
nl|'\n'
string|'"together with a network plugin that reports the "'
nl|'\n'
string|'"\'vif_type\' attribute"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_ethernet'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'plug_ovs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unplug_ovs_ethernet'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtHybridOVSBridgeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtHybridOVSBridgeDriver'
op|'('
name|'LibvirtGenericVIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retained in Grizzly for compatibility with Quantum\n       drivers which do not yet report \'vif_type\' port binding.\n       Will be deprecated in Havana, and removed in Ixxxx.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_bridge_name
name|'def'
name|'get_bridge_name'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network'
op|'.'
name|'get'
op|'('
string|"'bridge'"
op|')'
name|'or'
name|'CONF'
op|'.'
name|'libvirt_ovs_bridge'
newline|'\n'
nl|'\n'
DECL|member|get_ovs_interfaceid
dedent|''
name|'def'
name|'get_ovs_interfaceid'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'ovs_interfaceid'"
op|')'
name|'or'
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'_'
op|'('
string|'"The LibvirtHybridOVSBridgeDriver VIF driver is now "'
nl|'\n'
string|'"deprecated and will be removed in the next release. "'
nl|'\n'
string|'"Please use the LibvirtGenericVIFDriver VIF driver, "'
nl|'\n'
string|'"together with a network plugin that reports the "'
nl|'\n'
string|'"\'vif_type\' attribute"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_hybrid'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'plug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'unplug_ovs_hybrid'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtOpenVswitchVirtualPortDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtOpenVswitchVirtualPortDriver'
op|'('
name|'LibvirtGenericVIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retained in Grizzly for compatibility with Quantum\n       drivers which do not yet report \'vif_type\' port binding.\n       Will be deprecated in Havana, and removed in Ixxxx.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_bridge_name
name|'def'
name|'get_bridge_name'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'network'
op|'.'
name|'get'
op|'('
string|"'bridge'"
op|')'
name|'or'
name|'CONF'
op|'.'
name|'libvirt_ovs_bridge'
newline|'\n'
nl|'\n'
DECL|member|get_ovs_interfaceid
dedent|''
name|'def'
name|'get_ovs_interfaceid'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'ovs_interfaceid'"
op|')'
name|'or'
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'_'
op|'('
string|'"The LibvirtOpenVswitchVirtualPortDriver VIF driver "'
nl|'\n'
string|'"is now deprecated and will be removed in the next "'
nl|'\n'
string|'"release. Please use the LibvirtGenericVIFDriver VIF "'
nl|'\n'
string|'"driver, together with a network plugin that reports "'
nl|'\n'
string|'"the \'vif_type\' attribute"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config_ovs_bridge'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network'
op|','
name|'mapping'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'plug_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'unplug_ovs_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumLinuxBridgeVIFDriver
dedent|''
dedent|''
name|'class'
name|'QuantumLinuxBridgeVIFDriver'
op|'('
name|'LibvirtGenericVIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retained in Grizzly for compatibility with Quantum\n       drivers which do not yet report \'vif_type\' port binding.\n       Will be deprecated in Havana, and removed in Ixxxx.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_bridge_name
name|'def'
name|'get_bridge_name'
op|'('
name|'self'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'def_bridge'
op|'='
op|'('
string|'"brq"'
op|'+'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
name|'return'
name|'network'
op|'.'
name|'get'
op|'('
string|"'bridge'"
op|')'
name|'or'
name|'def_bridge'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'_'
op|'('
string|'"The QuantumLinuxBridgeVIFDriver VIF driver is now "'
nl|'\n'
string|'"deprecated and will be removed in the next release. "'
nl|'\n'
string|'"Please use the LibvirtGenericVIFDriver VIF driver, "'
nl|'\n'
string|'"together with a network plugin that reports the "'
nl|'\n'
string|'"\'vif_type\' attribute"'
op|')'
op|')'
newline|'\n'
comment|'# In order for libvirt to make use of the bridge name then it has'
nl|'\n'
comment|'# to ensure that the bridge exists'
nl|'\n'
name|'if'
string|"'should_create_bridge'"
name|'not'
name|'in'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'['
string|"'should_create_bridge'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_config_bridge'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug
dedent|''
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'plug_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unplug_bridge'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

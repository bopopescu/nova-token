begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA connection to a hypervisor through libvirt.\n\nSupports KVM, LXC, QEMU, UML, and XEN.\n\n**Related Flags**\n\n:libvirt_type:  Libvirt domain type.  Can be kvm, qemu, uml, xen\n                (default: kvm).\n:libvirt_uri:  Override for the default libvirt URI (depends on libvirt_type).\n:libvirt_xml_template:  Libvirt XML Template.\n:rescue_image_id:  Rescue ami image (default: ami-rescue).\n:rescue_kernel_id:  Rescue aki image (default: aki-rescue).\n:rescue_ramdisk_id:  Rescue ari image (default: ari-rescue).\n:injected_network_template:  Template file for injected network\n:allow_project_net_traffic:  Whether to allow in project network traffic\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'multiprocessing'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
name|'import'
name|'ElementTree'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'vnc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'netutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
DECL|variable|libxml2
name|'libxml2'
op|'='
name|'None'
newline|'\n'
DECL|variable|Template
name|'Template'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.virt.libvirt_conn'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
comment|'# TODO(vish): These flags should probably go into a shared location'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_image_id'"
op|','
string|"'ami-rescue'"
op|','
string|"'Rescue ami image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_kernel_id'"
op|','
string|"'aki-rescue'"
op|','
string|"'Rescue aki image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'rescue_ramdisk_id'"
op|','
string|"'ari-rescue'"
op|','
string|"'Rescue ari image'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/libvirt.xml.template'"
op|')'
op|','
nl|'\n'
string|"'Libvirt XML Template'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_type'"
op|','
nl|'\n'
string|"'kvm'"
op|','
nl|'\n'
string|"'Libvirt domain type (valid options are: '"
nl|'\n'
string|"'kvm, lxc, qemu, uml, xen)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_uri'"
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
string|"'Override the default libvirt URI (which is dependent'"
nl|'\n'
string|"' on libvirt_type)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'allow_project_net_traffic'"
op|','
nl|'\n'
name|'True'
op|','
nl|'\n'
string|"'Whether to allow in project network traffic'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_cow_images'"
op|','
nl|'\n'
name|'True'
op|','
nl|'\n'
string|"'Whether to use cow images'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'ajaxterm_portrange'"
op|','
nl|'\n'
string|"'10000-12000'"
op|','
nl|'\n'
string|"'Range of ports that ajaxterm should randomly try to bind'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'firewall_driver'"
op|','
nl|'\n'
string|"'nova.virt.libvirt.firewall.IptablesFirewallDriver'"
op|','
nl|'\n'
string|"'Firewall driver (defaults to iptables)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'cpuinfo_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'virt/cpuinfo.xml.template'"
op|')'
op|','
nl|'\n'
string|"'CpuInfo XML Template (Used only live migration now)'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'live_migration_uri'"
op|','
nl|'\n'
string|'"qemu+tcp://%s/system"'
op|','
nl|'\n'
string|"'Define protocol used by live_migration feature'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'live_migration_flag'"
op|','
nl|'\n'
string|'"VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER"'
op|','
nl|'\n'
string|"'Define live migration behavior.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'live_migration_bandwidth'"
op|','
number|'0'
op|','
nl|'\n'
string|"'Define live migration behavior'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'qemu_img'"
op|','
string|"'qemu-img'"
op|','
nl|'\n'
string|"'binary to use for qemu-img commands'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'start_guests_on_host_boot'"
op|','
name|'False'
op|','
nl|'\n'
string|"'Whether to restart guests when the host reboots'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_connection
name|'def'
name|'get_connection'
op|'('
name|'read_only'
op|')'
op|':'
newline|'\n'
comment|"# These are loaded late so that there's no need to install these"
nl|'\n'
comment|'# libraries when not using libvirt.'
nl|'\n'
comment|'# Cheetah is separate because the unit tests want to load Cheetah,'
nl|'\n'
comment|'# but not libvirt.'
nl|'\n'
indent|'    '
name|'global'
name|'libvirt'
newline|'\n'
name|'global'
name|'libxml2'
newline|'\n'
name|'if'
name|'libvirt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'libxml2'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libxml2'
op|'='
name|'__import__'
op|'('
string|"'libxml2'"
op|')'
newline|'\n'
dedent|''
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'return'
name|'LibvirtConnection'
op|'('
name|'read_only'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_late_load_cheetah
dedent|''
name|'def'
name|'_late_load_cheetah'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'Template'
newline|'\n'
name|'if'
name|'Template'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'__import__'
op|'('
string|"'Cheetah.Template'"
op|','
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
op|'['
string|"'Template'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'Template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_strip_dev
dedent|''
dedent|''
name|'def'
name|'_strip_dev'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'^/dev/'"
op|','
string|"''"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnection
dedent|''
name|'class'
name|'LibvirtConnection'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnection'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'libvirt_uri'
op|'='
name|'self'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'libvirt_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cpuinfo_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'cpuinfo_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'read_only'
op|'='
name|'read_only'
newline|'\n'
nl|'\n'
name|'fw_class'
op|'='
name|'utils'
op|'.'
name|'import_class'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'fw_class'
op|'('
name|'get_connection'
op|'='
name|'self'
op|'.'
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
comment|"# Adopt existing VM's running here"
nl|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'ctxt'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Checking state of %s'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'power_state'
op|'.'
name|'SHUTOFF'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Current state of %(name)s was %(state)s.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
string|"'state'"
op|':'
name|'state'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): We no longer delete SHUTOFF instances,'
nl|'\n'
comment|'# the user may want to power them back on'
nl|'\n'
nl|'\n'
name|'if'
name|'state'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_wrapped_conn'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_test_connection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connecting to libvirt: %s'"
op|')'
op|','
name|'self'
op|'.'
name|'libvirt_uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'self'
op|'.'
name|'_connect'
op|'('
name|'self'
op|'.'
name|'libvirt_uri'
op|','
nl|'\n'
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped_conn'
newline|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_connection
name|'def'
name|'_test_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_wrapped_conn'
op|'.'
name|'getInfo'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
name|'and'
name|'e'
op|'.'
name|'get_error_domain'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_FROM_REMOTE'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connection to libvirt broke'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|get_uri
dedent|''
dedent|''
name|'def'
name|'get_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'uml:///system'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'xen'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'xen:///'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'lxc:///'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'qemu:///system'"
newline|'\n'
dedent|''
name|'return'
name|'uri'
newline|'\n'
nl|'\n'
DECL|member|_connect
dedent|''
name|'def'
name|'_connect'
op|'('
name|'self'
op|','
name|'uri'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'auth'
op|'='
op|'['
op|'['
name|'libvirt'
op|'.'
name|'VIR_CRED_AUTHNAME'
op|','
name|'libvirt'
op|'.'
name|'VIR_CRED_NOECHOPROMPT'
op|']'
op|','
nl|'\n'
string|"'root'"
op|','
nl|'\n'
name|'None'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'read_only'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openReadOnly'
op|'('
name|'uri'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openAuth'
op|'('
name|'uri'
op|','
name|'auth'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'x'
op|')'
op|'.'
name|'name'
op|'('
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_map_to_instance_info
dedent|''
name|'def'
name|'_map_to_instance_info'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets info from a virsh domain object into an InstanceInfo"""'
newline|'\n'
nl|'\n'
comment|'# domain.info() returns a list of:'
nl|'\n'
comment|'#    state:       one of the state values (virDomainState)'
nl|'\n'
comment|'#    maxMemory:   the maximum memory used by the domain'
nl|'\n'
comment|'#    memory:      the current amount of memory used by the domain'
nl|'\n'
comment|'#    nbVirtCPU:   the number of virtual CPU'
nl|'\n'
comment|'#    puTime:      the time used by the domain in nanoseconds'
nl|'\n'
nl|'\n'
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_num_cpu'
op|','
name|'_cpu_time'
op|')'
op|'='
name|'domain'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
name|'domain'
op|'.'
name|'name'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'driver'
op|'.'
name|'InstanceInfo'
op|'('
name|'name'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances_detail
dedent|''
name|'def'
name|'list_instances_detail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'infos'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'domain_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'domain_id'
op|')'
newline|'\n'
name|'info'
op|'='
name|'self'
op|'.'
name|'_map_to_instance_info'
op|'('
name|'domain'
op|')'
newline|'\n'
name|'infos'
op|'.'
name|'append'
op|'('
name|'info'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'infos'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# If the instance is already terminated, we're still happy"
nl|'\n'
comment|'# Otherwise, destroy it'
nl|'\n'
dedent|''
name|'if'
name|'virt_dom'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'is_okay'
op|'='
name|'False'
newline|'\n'
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errcode'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_OPERATION_INVALID'
op|':'
newline|'\n'
comment|'# If the instance if already shut off, we get this:'
nl|'\n'
comment|'# Code=55 Error=Requested operation is not valid:'
nl|'\n'
comment|'# domain is not running'
nl|'\n'
indent|'                    '
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_cpus'
op|','
name|'_t'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'                        '
name|'is_okay'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'is_okay'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during destroy of "'
nl|'\n'
string|'"%(instance_name)s. Code=%(errcode)s "'
nl|'\n'
string|'"Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(justinsb): We remove the domain definition. We probably'
nl|'\n'
comment|'# would do better to keep it if cleanup=False (e.g. volumes?)'
nl|'\n'
comment|'# (e.g. #2 - not losing machines on failure)'
nl|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during undefine of "'
nl|'\n'
string|'"%(instance_name)s. Code=%(errcode)s "'
nl|'\n'
string|'"Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_destroy
dedent|''
dedent|''
name|'def'
name|'_wait_for_destroy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is gone."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_name'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s destroyed successfully."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_destroy'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cleanup'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'target'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %(instance_name)s: deleting instance files'"
nl|'\n'
string|"' %(target)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'disk'
op|'.'
name|'destroy_container'
op|'('
name|'target'
op|','
name|'instance'
op|','
name|'nbd'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'device_path'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'mount_device'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'if'
name|'device_path'
op|'.'
name|'startswith'
op|'('
string|"'/dev/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'='
string|'"""<disk type=\'block\'>\n                         <driver name=\'qemu\' type=\'raw\'/>\n                         <source dev=\'%s\'/>\n                         <target dev=\'%s\' bus=\'virtio\'/>\n                     </disk>"""'
op|'%'
op|'('
name|'device_path'
op|','
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"':'"
name|'in'
name|'device_path'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'protocol'
op|','
name|'name'
op|')'
op|'='
name|'device_path'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'xml'
op|'='
string|'"""<disk type=\'network\'>\n                         <driver name=\'qemu\' type=\'raw\'/>\n                         <source protocol=\'%s\' name=\'%s\'/>\n                         <target dev=\'%s\' bus=\'virtio\'/>\n                     </disk>"""'
op|'%'
op|'('
name|'protocol'
op|','
nl|'\n'
name|'name'
op|','
nl|'\n'
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'device_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'virt_dom'
op|'.'
name|'attachDevice'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_disk_xml
dedent|''
name|'def'
name|'_get_disk_xml'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the xml for the disk mounted at device"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'ctx'
op|'='
name|'doc'
op|'.'
name|'xpathNewContext'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'ctx'
op|'.'
name|'xpathEval'
op|'('
string|"'/domain/devices/disk'"
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
op|'=='
name|'device'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'str'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'.'
name|'xpathFreeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doc'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'.'
name|'freeDoc'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'mount_device'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_disk_xml'
op|'('
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'xml'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'DiskNotFound'
op|'('
name|'location'
op|'='
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'virt_dom'
op|'.'
name|'detachDevice'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|snapshot
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_href'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        This command only works with qemu 0.14+, the qemu_img flag is\n        provided so that a locally compiled binary of qemu-img can be used\n        to support this command.\n\n        """'
newline|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
nl|'\n'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
name|'base'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'elevated'
op|','
name|'image_id'
op|')'
newline|'\n'
op|'('
name|'snapshot_image_service'
op|','
name|'snapshot_image_id'
op|')'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
name|'image_href'
op|')'
newline|'\n'
name|'snapshot'
op|'='
name|'snapshot_image_service'
op|'.'
name|'show'
op|'('
name|'elevated'
op|','
name|'snapshot_image_id'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'disk_format'"
op|':'
name|'base'
op|'['
string|"'disk_format'"
op|']'
op|','
nl|'\n'
string|"'container_format'"
op|':'
name|'base'
op|'['
string|"'container_format'"
op|']'
op|','
nl|'\n'
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'active'"
op|','
nl|'\n'
string|"'name'"
op|':'
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
nl|'\n'
string|"'kernel_id'"
op|':'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
string|"'image_location'"
op|':'
string|"'snapshot'"
op|','
nl|'\n'
string|"'image_state'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'owner_id'"
op|':'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'if'
string|"'architecture'"
name|'in'
name|'base'
op|'['
string|"'properties'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'arch'
op|'='
name|'base'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'architecture'"
op|']'
newline|'\n'
name|'metadata'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'architecture'"
op|']'
op|'='
name|'arch'
newline|'\n'
nl|'\n'
comment|'# Make the snapshot'
nl|'\n'
dedent|''
name|'snapshot_name'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'snapshot_xml'
op|'='
string|'"""\n        <domainsnapshot>\n            <name>%s</name>\n        </domainsnapshot>\n        """'
op|'%'
name|'snapshot_name'
newline|'\n'
name|'snapshot_ptr'
op|'='
name|'virt_dom'
op|'.'
name|'snapshotCreateXML'
op|'('
name|'snapshot_xml'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Find the disk'
nl|'\n'
name|'xml_desc'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'domain'
op|'='
name|'ElementTree'
op|'.'
name|'fromstring'
op|'('
name|'xml_desc'
op|')'
newline|'\n'
name|'source'
op|'='
name|'domain'
op|'.'
name|'find'
op|'('
string|"'devices/disk/source'"
op|')'
newline|'\n'
name|'disk_path'
op|'='
name|'source'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Export the snapshot to a raw image'
nl|'\n'
name|'temp_dir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'out_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'temp_dir'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
name|'qemu_img_cmd'
op|'='
op|'('
name|'FLAGS'
op|'.'
name|'qemu_img'
op|','
nl|'\n'
string|"'convert'"
op|','
nl|'\n'
string|"'-f'"
op|','
nl|'\n'
string|"'qcow2'"
op|','
nl|'\n'
string|"'-O'"
op|','
nl|'\n'
string|"'raw'"
op|','
nl|'\n'
string|"'-s'"
op|','
nl|'\n'
name|'snapshot_name'
op|','
nl|'\n'
name|'disk_path'
op|','
nl|'\n'
name|'out_path'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'qemu_img_cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Upload that image to the image service'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'out_path'
op|')'
name|'as'
name|'image_file'
op|':'
newline|'\n'
indent|'            '
name|'image_service'
op|'.'
name|'update'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'image_href'
op|','
nl|'\n'
name|'metadata'
op|','
nl|'\n'
name|'image_file'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up'
nl|'\n'
dedent|''
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'temp_dir'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot a virtual machine, given an instance reference.\n\n        This method actually destroys and re-creates the domain to ensure the\n        reboot happens, as the guest OS cannot ignore this action.\n\n        """'
newline|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
comment|'# NOTE(itoumsn): Use XML delived from the running instance'
nl|'\n'
comment|'# instead of using to_xml(instance). This is almost the ultimate'
nl|'\n'
comment|'# stupid workaround.'
nl|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
comment|'# NOTE(itoumsn): self.shutdown() and wait instead of self.destroy() is'
nl|'\n'
comment|'# better because we cannot ensure flushing dirty buffers'
nl|'\n'
comment|'# in the guest OS. But, in case of KVM, shutdown() does not work...'
nl|'\n'
name|'self'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_reboot
name|'def'
name|'_wait_for_reboot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is running again."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_name'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"During reboot, %s disappeared."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s rebooted successfully."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_reboot'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'suspend'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause paused VM instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'resume'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'managedSave'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""resume the specified instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Loads a VM using rescue images.\n\n        A rescue is normally performed when something goes wrong with the\n        primary images and data needs to be corrected/recovered. Rescuing\n        should not edit or over-ride the original image, only allow for\n        data recovery.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
name|'rescue_images'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_image_id'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_kernel_id'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_ramdisk_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'instance'
op|','
name|'xml'
op|','
string|"'.rescue'"
op|','
name|'rescue_images'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_rescue
name|'def'
name|'_wait_for_rescue'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is running again."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_name'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"During reboot, %s disappeared."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s rescued successfully."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_rescue'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the VM which is being rescued back into primary images.\n\n        Because reboot destroys and re-creates instances, unresue should\n        simply call reboot.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|poll_rescued_instances
name|'def'
name|'poll_rescued_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# NOTE(ilyaalekseyev): Implementation like in multinics'
nl|'\n'
comment|'# for xenapi(tr3buchet)'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|spawn
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_mapping'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|','
name|'False'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
name|'or'
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'instance'
op|','
name|'xml'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
op|')'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: is running"'
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'start_guests_on_host_boot'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: setting autostart ON"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'domain'
op|'.'
name|'setAutostart'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_boot
dedent|''
name|'def'
name|'_wait_for_boot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is running."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_name'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"During reboot, %s disappeared."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s spawned successfully."'
op|')'
op|'%'
name|'instance_name'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_boot'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_flush_xen_console
dedent|''
name|'def'
name|'_flush_xen_console'
op|'('
name|'self'
op|','
name|'virsh_output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'virsh said: %r'"
op|')'
op|','
name|'virsh_output'
op|')'
newline|'\n'
name|'virsh_output'
op|'='
name|'virsh_output'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'virsh_output'
op|'.'
name|'startswith'
op|'('
string|"'/dev/'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"cool, it\'s a device"'
op|')'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'dd'"
op|','
nl|'\n'
string|'"if=%s"'
op|'%'
name|'virsh_output'
op|','
nl|'\n'
string|"'iflag=nonblock'"
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'return'
name|'out'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|_append_to_file
dedent|''
dedent|''
name|'def'
name|'_append_to_file'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'fpath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'data: %(data)r, fpath: %(fpath)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'fpath'
op|','
string|"'a+'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'fpath'
newline|'\n'
nl|'\n'
DECL|member|_dump_file
dedent|''
name|'def'
name|'_dump_file'
op|'('
name|'self'
op|','
name|'fpath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
name|'fpath'
op|','
string|"'r+'"
op|')'
newline|'\n'
name|'contents'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Contents of file %(fpath)s: %(contents)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'contents'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'console_log'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'console.log'"
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'chown'"
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|','
name|'console_log'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'xen'"
op|':'
newline|'\n'
comment|'# Xen is special'
nl|'\n'
indent|'            '
name|'virsh_output'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'virsh'"
op|','
string|"'ttyconsole'"
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_flush_xen_console'
op|'('
name|'virsh_output'
op|')'
newline|'\n'
name|'fpath'
op|'='
name|'self'
op|'.'
name|'_append_to_file'
op|'('
name|'data'
op|','
name|'console_log'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
comment|'# LXC is also special'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Unable to read LXC console"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fpath'
op|'='
name|'console_log'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_dump_file'
op|'('
name|'fpath'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_ajax_console
name|'def'
name|'get_ajax_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
DECL|function|get_open_port
indent|'        '
name|'def'
name|'get_open_port'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start_port'
op|','
name|'end_port'
op|'='
name|'FLAGS'
op|'.'
name|'ajaxterm_portrange'
op|'.'
name|'split'
op|'('
string|'"-"'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
number|'100'
op|')'
op|':'
comment|"# don't loop forever"
newline|'\n'
indent|'                '
name|'port'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
name|'int'
op|'('
name|'start_port'
op|')'
op|','
name|'int'
op|'('
name|'end_port'
op|')'
op|')'
newline|'\n'
comment|'# netcat will exit with 0 only if the port is in use,'
nl|'\n'
comment|'# so a nonzero return value implies it is unused'
nl|'\n'
name|'cmd'
op|'='
string|"'netcat'"
op|','
string|"'0.0.0.0'"
op|','
name|'port'
op|','
string|"'-w'"
op|','
string|"'1'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'stdout'
op|','
name|'stderr'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'process_input'
op|'='
string|"''"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'port'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Unable to find an open port'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_pty_for_instance
dedent|''
name|'def'
name|'get_pty_for_instance'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'serial'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'serial'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'serial'
op|'.'
name|'getAttribute'
op|'('
string|"'type'"
op|')'
op|'=='
string|"'pty'"
op|':'
newline|'\n'
indent|'                    '
name|'source'
op|'='
name|'serial'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'source'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'source'
op|'.'
name|'getAttribute'
op|'('
string|"'path'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'port'
op|'='
name|'get_open_port'
op|'('
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
nl|'\n'
name|'ajaxterm_cmd'
op|'='
string|"'sudo socat - %s'"
op|'%'
name|'get_pty_for_instance'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
string|'\'%s/tools/ajaxterm/ajaxterm.py --command "%s" -t %s -p %s\''
op|'%'
op|'('
name|'utils'
op|'.'
name|'novadir'
op|'('
op|')'
op|','
name|'ajaxterm_cmd'
op|','
name|'token'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'token'"
op|':'
name|'token'
op|','
string|"'host'"
op|':'
name|'host'
op|','
string|"'port'"
op|':'
name|'port'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_host_ip_addr
dedent|''
name|'def'
name|'get_host_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FLAGS'
op|'.'
name|'my_ip'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
DECL|function|get_vnc_port_for_instance
indent|'        '
name|'def'
name|'get_vnc_port_for_instance'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
comment|'# TODO: use etree instead of minidom'
nl|'\n'
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'graphic'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'graphics'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'graphic'
op|'.'
name|'getAttribute'
op|'('
string|"'type'"
op|')'
op|'=='
string|"'vnc'"
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'graphic'
op|'.'
name|'getAttribute'
op|'('
string|"'port'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'port'
op|'='
name|'get_vnc_port_for_instance'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'token'"
op|':'
name|'token'
op|','
string|"'host'"
op|':'
name|'host'
op|','
string|"'port'"
op|':'
name|'port'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_cache_image
name|'def'
name|'_cache_image'
op|'('
name|'fn'
op|','
name|'target'
op|','
name|'fname'
op|','
name|'cow'
op|'='
name|'False'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for a method that creates an image that caches the image.\n\n        This wrapper will save the image into a common store and create a\n        copy for use by the hypervisor.\n\n        The underlying method should specify a kwarg of target representing\n        where the image will be saved.\n\n        fname is used as the filename of the base image.  The filename needs\n        to be unique to a given image.\n\n        If cow is True, it will make a CoW image instead of a copy.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
string|"'_base'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'base_dir'
op|')'
newline|'\n'
dedent|''
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'fname'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'fname'
op|')'
newline|'\n'
DECL|function|call_if_not_exists
name|'def'
name|'call_if_not_exists'
op|'('
name|'base'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'fn'
op|'('
name|'target'
op|'='
name|'base'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'call_if_not_exists'
op|'('
name|'base'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'cow'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'create'"
op|','
string|"'-f'"
op|','
string|"'qcow2'"
op|','
string|"'-o'"
op|','
nl|'\n'
string|"'cluster_size=2M,backing_file=%s'"
op|'%'
name|'base'
op|','
nl|'\n'
name|'target'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'cp'"
op|','
name|'base'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image
dedent|''
dedent|''
dedent|''
name|'def'
name|'_fetch_image'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'image_id'
op|','
name|'user'
op|','
name|'project'
op|','
name|'size'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Grab image and optionally attempt to resize it"""'
newline|'\n'
name|'images'
op|'.'
name|'fetch'
op|'('
name|'image_id'
op|','
name|'target'
op|','
name|'user'
op|','
name|'project'
op|')'
newline|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'disk'
op|'.'
name|'extend'
op|'('
name|'target'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_local
dedent|''
dedent|''
name|'def'
name|'_create_local'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'local_gb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a blank image of specified size"""'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'truncate'"
op|','
name|'target'
op|','
string|"'-s'"
op|','
string|'"%dG"'
op|'%'
name|'local_gb'
op|')'
newline|'\n'
comment|'# TODO(vish): should we format disk by default?'
nl|'\n'
nl|'\n'
DECL|member|_create_image
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'self'
op|','
name|'inst'
op|','
name|'libvirt_xml'
op|','
name|'suffix'
op|'='
string|"''"
op|','
name|'disk_images'
op|'='
name|'None'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_mapping'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
name|'or'
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'            '
name|'suffix'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# syntactic nicety'
nl|'\n'
DECL|function|basepath
dedent|''
name|'def'
name|'basepath'
op|'('
name|'fname'
op|'='
string|"''"
op|','
name|'suffix'
op|'='
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'fname'
op|'+'
name|'suffix'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure directories exist and are writable'
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'basepath'
op|'('
name|'suffix'
op|'='
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %s: Creating image'"
op|')'
op|','
name|'inst'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'basepath'
op|'('
string|"'libvirt.xml'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'libvirt_xml'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'container_dir'
op|'='
string|"'%s/rootfs'"
op|'%'
name|'basepath'
op|'('
name|'suffix'
op|'='
string|"''"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'container_dir'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): No need add the suffix to console.log'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'close'
op|'('
name|'os'
op|'.'
name|'open'
op|'('
name|'basepath'
op|'('
string|"'console.log'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_WRONLY'
op|','
number|'0660'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'user'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_user'
op|'('
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'project'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'disk_images'
op|':'
newline|'\n'
indent|'            '
name|'disk_images'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'inst'
op|'['
string|"'image_ref'"
op|']'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'inst'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'inst'
op|'['
string|"'ramdisk_id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
string|"'%08x'"
op|'%'
name|'int'
op|'('
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'project'
op|'='
name|'project'
op|')'
newline|'\n'
name|'if'
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
string|"'%08x'"
op|'%'
name|'int'
op|'('
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'project'
op|'='
name|'project'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'root_fname'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
name|'disk_images'
op|'['
string|"'image_id'"
op|']'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'size'
op|'='
name|'FLAGS'
op|'.'
name|'minimum_root_size'
newline|'\n'
nl|'\n'
name|'inst_type_id'
op|'='
name|'inst'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst_type_id'
op|')'
newline|'\n'
name|'if'
name|'inst_type'
op|'['
string|"'name'"
op|']'
op|'=='
string|"'m1.tiny'"
name|'or'
name|'suffix'
op|'=='
string|"'.rescue'"
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'None'
newline|'\n'
name|'root_fname'
op|'+='
string|'"_sm"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'self'
op|'.'
name|'root_mount_device'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'root_fname'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'image_id'"
op|']'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'project'
op|'='
name|'project'
op|','
nl|'\n'
name|'size'
op|'='
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'local_mount_device'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_create_local'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk.local'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
string|'"local_%s"'
op|'%'
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# For now, we assume that if we're not using a kernel, we're using a"
nl|'\n'
comment|'# partitioned disk image where the target partition is the first'
nl|'\n'
comment|'# partition'
nl|'\n'
dedent|''
name|'target_partition'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'inst'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'target_partition'
op|'='
string|'"1"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'target_partition'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'inst'
op|'['
string|"'key_data'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'str'
op|'('
name|'inst'
op|'['
string|"'key_data'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'net'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'nets'
op|'='
op|'['
op|']'
newline|'\n'
name|'ifc_template'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'injected_network_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'ifc_num'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'have_injected_networks'
op|'='
name|'False'
newline|'\n'
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'for'
op|'('
name|'network_ref'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'ifc_num'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'network_ref'
op|'['
string|"'injected'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'have_injected_networks'
op|'='
name|'True'
newline|'\n'
name|'address'
op|'='
name|'mapping'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ip'"
op|']'
newline|'\n'
name|'netmask'
op|'='
name|'mapping'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'netmask'"
op|']'
newline|'\n'
name|'address_v6'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'address_v6'
op|'='
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ip'"
op|']'
newline|'\n'
name|'netmask_v6'
op|'='
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'netmask'"
op|']'
newline|'\n'
dedent|''
name|'net_info'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'eth%d'"
op|'%'
name|'ifc_num'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'netmask'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'mapping'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'mapping'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
name|'mapping'
op|'['
string|"'dns'"
op|']'
op|','
nl|'\n'
string|"'address_v6'"
op|':'
name|'address_v6'
op|','
nl|'\n'
string|"'gateway6'"
op|':'
name|'mapping'
op|'['
string|"'gateway6'"
op|']'
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
name|'netmask_v6'
op|'}'
newline|'\n'
name|'nets'
op|'.'
name|'append'
op|'('
name|'net_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'have_injected_networks'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'str'
op|'('
name|'Template'
op|'('
name|'ifc_template'
op|','
nl|'\n'
name|'searchList'
op|'='
op|'['
op|'{'
string|"'interfaces'"
op|':'
name|'nets'
op|','
nl|'\n'
string|"'use_ipv6'"
op|':'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|'}'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'or'
name|'net'
op|':'
newline|'\n'
indent|'            '
name|'inst_name'
op|'='
name|'inst'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'img_id'
op|'='
name|'inst'
op|'.'
name|'image_ref'
newline|'\n'
name|'if'
name|'key'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %(inst_name)s: injecting key into'"
nl|'\n'
string|"' image %(img_id)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'net'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance %(inst_name)s: injecting net into'"
nl|'\n'
string|"' image %(img_id)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'inject_data'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
name|'key'
op|','
name|'net'
op|','
nl|'\n'
name|'partition'
op|'='
name|'target_partition'
op|','
nl|'\n'
name|'nbd'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'                    '
name|'disk'
op|'.'
name|'setup_container'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
nl|'\n'
name|'container_dir'
op|'='
name|'container_dir'
op|','
nl|'\n'
name|'nbd'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# This could be a windows image, or a vmdk format disk'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'instance %(inst_name)s: ignoring error injecting'"
nl|'\n'
string|"' data into image %(img_id)s (%(e)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'chown'"
op|','
string|"'root'"
op|','
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_nic_for_xml
dedent|''
dedent|''
name|'def'
name|'_get_nic_for_xml'
op|'('
name|'self'
op|','
name|'network'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
comment|'# Assume that the gateway also acts as the dhcp server.'
nl|'\n'
indent|'        '
name|'dhcp_server'
op|'='
name|'mapping'
op|'['
string|"'gateway'"
op|']'
newline|'\n'
name|'gateway6'
op|'='
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'gateway6'"
op|')'
newline|'\n'
name|'mac_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'template'
op|'='
string|'"<parameter name=\\"%s\\"value=\\"%s\\" />\\n"'
newline|'\n'
name|'net'
op|','
name|'mask'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_mask'
op|'('
name|'network'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'['
op|'('
string|'"PROJNET"'
op|','
name|'net'
op|')'
op|','
op|'('
string|'"PROJMASK"'
op|','
name|'mask'
op|')'
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'net_v6'
op|','
name|'prefixlen_v6'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_prefixlen'
op|'('
nl|'\n'
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'.'
name|'extend'
op|'('
op|'['
op|'('
string|'"PROJNETV6"'
op|','
name|'net_v6'
op|')'
op|','
nl|'\n'
op|'('
string|'"PROJMASKV6"'
op|','
name|'prefixlen_v6'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'extra_params'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
op|'['
name|'template'
op|'%'
name|'value'
name|'for'
name|'value'
name|'in'
name|'values'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'extra_params'
op|'='
string|'"\\n"'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'mac_id'
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|','
nl|'\n'
string|"'ip_address'"
op|':'
name|'mapping'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ip'"
op|']'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
name|'dhcp_server'
op|','
nl|'\n'
string|"'extra_params'"
op|':'
name|'extra_params'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'gateway6'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'gateway6'"
op|']'
op|'='
name|'gateway6'
op|'+'
string|'"/128"'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|variable|root_mount_device
dedent|''
name|'root_mount_device'
op|'='
string|"'vda'"
comment|"# FIXME for now. it's hard coded."
newline|'\n'
DECL|variable|local_mount_device
name|'local_mount_device'
op|'='
string|"'vdb'"
comment|"# FIXME for now. it's hard coded."
newline|'\n'
nl|'\n'
DECL|member|_volume_in_mapping
name|'def'
name|'_volume_in_mapping'
op|'('
name|'self'
op|','
name|'mount_device'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mount_device_'
op|'='
name|'_strip_dev'
op|'('
name|'mount_device'
op|')'
newline|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'vol_mount_device'
op|'='
name|'_strip_dev'
op|'('
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vol_mount_device'
op|'=='
name|'mount_device_'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_prepare_xml_info
dedent|''
name|'def'
name|'_prepare_xml_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'rescue'
op|'='
name|'False'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
name|'or'
op|'['
op|']'
newline|'\n'
comment|'# TODO(adiantum) remove network_info creation code'
nl|'\n'
comment|'# when multinics will be completed'
nl|'\n'
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'nics'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nics'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_get_nic_for_xml'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
op|')'
newline|'\n'
comment|'# FIXME(vish): stick this in db'
nl|'\n'
dedent|''
name|'inst_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|':'
newline|'\n'
indent|'            '
name|'driver_type'
op|'='
string|"'qcow2'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'driver_type'
op|'='
string|"'raw'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|'='
name|'_strip_dev'
op|'('
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'ebs_root'
op|'='
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'self'
op|'.'
name|'root_mount_device'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'self'
op|'.'
name|'local_mount_device'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'local_gb'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'local_gb'
op|'='
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'xml_info'
op|'='
op|'{'
string|"'type'"
op|':'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'basepath'"
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|','
nl|'\n'
string|"'memory_kb'"
op|':'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'*'
number|'1024'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'inst_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'rescue'"
op|':'
name|'rescue'
op|','
nl|'\n'
string|"'local'"
op|':'
name|'local_gb'
op|','
nl|'\n'
string|"'driver_type'"
op|':'
name|'driver_type'
op|','
nl|'\n'
string|"'nics'"
op|':'
name|'nics'
op|','
nl|'\n'
string|"'ebs_root'"
op|':'
name|'ebs_root'
op|','
nl|'\n'
string|"'volumes'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'vnc_enabled'
name|'and'
name|'FLAGS'
op|'.'
name|'libvirt_type'
name|'not'
name|'in'
op|'('
string|"'lxc'"
op|','
string|"'uml'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml_info'
op|'['
string|"'vncserver_host'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'vncserver_host'
newline|'\n'
name|'xml_info'
op|'['
string|"'vnc_keymap'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'vnc_keymap'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'xml_info'
op|'['
string|"'kernel'"
op|']'
op|'='
name|'xml_info'
op|'['
string|"'basepath'"
op|']'
op|'+'
string|'"/kernel"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'xml_info'
op|'['
string|"'ramdisk'"
op|']'
op|'='
name|'xml_info'
op|'['
string|"'basepath'"
op|']'
op|'+'
string|'"/ramdisk"'
newline|'\n'
nl|'\n'
dedent|''
name|'xml_info'
op|'['
string|"'disk'"
op|']'
op|'='
name|'xml_info'
op|'['
string|"'basepath'"
op|']'
op|'+'
string|'"/disk"'
newline|'\n'
dedent|''
name|'return'
name|'xml_info'
newline|'\n'
nl|'\n'
DECL|member|to_xml
dedent|''
name|'def'
name|'to_xml'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'rescue'
op|'='
name|'False'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
name|'or'
op|'['
op|']'
newline|'\n'
comment|'# TODO(termie): cache?'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: starting toXML method'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'xml_info'
op|'='
name|'self'
op|'.'
name|'_prepare_xml_info'
op|'('
name|'instance'
op|','
name|'rescue'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'str'
op|'('
name|'Template'
op|'('
name|'self'
op|'.'
name|'libvirt_xml'
op|','
name|'searchList'
op|'='
op|'['
name|'xml_info'
op|']'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: finished toXML method'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|_lookup_by_name
dedent|''
name|'def'
name|'_lookup_by_name'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve libvirt domain object given an instance name.\n\n        All libvirt error handling should be handled in this method and\n        relevant nova exceptions should be raised in response.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'error_code'
op|'='
name|'ex'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'error_code'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_NO_DOMAIN'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"Error from libvirt while looking up %(instance_name)s: "'
nl|'\n'
string|'"[Error Code %(error_code)s] %(ex)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve information from libvirt for a specific instance name.\n\n        If a libvirt error is encountered during lookup, we might raise a\n        NotFound exception or Error exception depending on how severe the\n        libvirt error is.\n\n        """'
newline|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
op|'('
name|'state'
op|','
name|'max_mem'
op|','
name|'mem'
op|','
name|'num_cpu'
op|','
name|'cpu_time'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
name|'cpu_time'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_create_new_domain
dedent|''
name|'def'
name|'_create_new_domain'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'persistent'
op|'='
name|'True'
op|','
name|'launch_flags'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(justinsb): libvirt has two types of domain:'
nl|'\n'
comment|'# * a transient domain disappears when the guest is shutdown'
nl|'\n'
comment|'# or the host is rebooted.'
nl|'\n'
comment|'# * a permanent domain is not automatically deleted'
nl|'\n'
comment|'# NOTE(justinsb): Even for ephemeral instances, transient seems risky'
nl|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'persistent'
op|':'
newline|'\n'
comment|'# To create a persistent domain, first define it, then launch it.'
nl|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'defineXML'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'domain'
op|'.'
name|'createWithFlags'
op|'('
name|'launch_flags'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# createXML call creates a transient domain'
nl|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'xml'
op|','
name|'launch_flags'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'domain'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
name|'_'
op|'('
string|'"diagnostics are not supported "'
nl|'\n'
string|'"for libvirt"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_disks
dedent|''
name|'def'
name|'get_disks'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n\n        Returns a list of all block devices for this domain.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
comment|'# TODO(devcamcar): Replace libxml2 with etree.'
nl|'\n'
name|'xml'
op|'='
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'ctx'
op|'='
name|'doc'
op|'.'
name|'xpathNewContext'
op|'('
op|')'
newline|'\n'
name|'disks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'ctx'
op|'.'
name|'xpathEval'
op|'('
string|"'/domain/devices/disk'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'devdst'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                        '
name|'devdst'
op|'='
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'devdst'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'disks'
op|'.'
name|'append'
op|'('
name|'devdst'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'.'
name|'xpathFreeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doc'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'.'
name|'freeDoc'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'disks'
newline|'\n'
nl|'\n'
DECL|member|get_interfaces
dedent|''
name|'def'
name|'get_interfaces'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n\n        Returns a list of all network interfaces for this instance.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
comment|'# TODO(devcamcar): Replace libxml2 with etree.'
nl|'\n'
name|'xml'
op|'='
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'ctx'
op|'='
name|'doc'
op|'.'
name|'xpathNewContext'
op|'('
op|')'
newline|'\n'
name|'interfaces'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'ctx'
op|'.'
name|'xpathEval'
op|'('
string|"'/domain/devices/interface'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'devdst'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                        '
name|'devdst'
op|'='
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'devdst'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'interfaces'
op|'.'
name|'append'
op|'('
name|'devdst'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ctx'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'.'
name|'xpathFreeContext'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'doc'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'.'
name|'freeDoc'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'interfaces'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_total
dedent|''
name|'def'
name|'get_vcpu_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get vcpu number of physical computer.\n\n        :returns: the number of cpu core.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# On certain platforms, this will raise a NotImplementedError.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'multiprocessing'
op|'.'
name|'cpu_count'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Cannot get the number of cpu, because this "'
nl|'\n'
string|'"function is not implemented for this platform. "'
nl|'\n'
string|'"This error can be safely ignored for now."'
op|')'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_total
dedent|''
dedent|''
name|'def'
name|'get_memory_mb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the total memory size(MB) of physical computer.\n\n        :returns: the total amount of memory(MB).\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'LINUX2'"
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'meminfo'
op|'='
name|'open'
op|'('
string|"'/proc/meminfo'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'idx'
op|'='
name|'meminfo'
op|'.'
name|'index'
op|'('
string|"'MemTotal:'"
op|')'
newline|'\n'
comment|'# transforming kb to mb.'
nl|'\n'
name|'return'
name|'int'
op|'('
name|'meminfo'
op|'['
name|'idx'
op|'+'
number|'1'
op|']'
op|')'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_total
dedent|''
name|'def'
name|'get_local_gb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the total hdd size(GB) of physical computer.\n\n        :returns:\n            The total amount of HDD(GB).\n            Note that this value shows a partition where\n            NOVA-INST-DIR/instances mounts.\n\n        """'
newline|'\n'
nl|'\n'
name|'hddinfo'
op|'='
name|'os'
op|'.'
name|'statvfs'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
name|'return'
name|'hddinfo'
op|'.'
name|'f_frsize'
op|'*'
name|'hddinfo'
op|'.'
name|'f_blocks'
op|'/'
number|'1024'
op|'/'
number|'1024'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_used
dedent|''
name|'def'
name|'get_vcpu_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Get vcpu usage number of physical computer.\n\n        :returns: The total number of vcpu that currently used.\n\n        """'
newline|'\n'
nl|'\n'
name|'total'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'dom_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'dom_id'
op|')'
newline|'\n'
name|'total'
op|'+='
name|'len'
op|'('
name|'dom'
op|'.'
name|'vcpus'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'total'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_used
dedent|''
name|'def'
name|'get_memory_mb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the free memory size(MB) of physical computer.\n\n        :returns: the total usage of memory(MB).\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'LINUX2'"
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'m'
op|'='
name|'open'
op|'('
string|"'/proc/meminfo'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'idx1'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'MemFree:'"
op|')'
newline|'\n'
name|'idx2'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'Buffers:'"
op|')'
newline|'\n'
name|'idx3'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'Cached:'"
op|')'
newline|'\n'
name|'avail'
op|'='
op|'('
name|'int'
op|'('
name|'m'
op|'['
name|'idx1'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
name|'int'
op|'('
name|'m'
op|'['
name|'idx2'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
name|'int'
op|'('
name|'m'
op|'['
name|'idx3'
op|'+'
number|'1'
op|']'
op|')'
op|')'
op|'/'
number|'1024'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|'-'
name|'avail'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_used
dedent|''
name|'def'
name|'get_local_gb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the free hdd size(GB) of physical computer.\n\n        :returns:\n           The total usage of HDD(GB).\n           Note that this value shows a partition where\n           NOVA-INST-DIR/instances mounts.\n\n        """'
newline|'\n'
nl|'\n'
name|'hddinfo'
op|'='
name|'os'
op|'.'
name|'statvfs'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
name|'avail'
op|'='
name|'hddinfo'
op|'.'
name|'f_frsize'
op|'*'
name|'hddinfo'
op|'.'
name|'f_bavail'
op|'/'
number|'1024'
op|'/'
number|'1024'
op|'/'
number|'1024'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
op|'-'
name|'avail'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_type
dedent|''
name|'def'
name|'get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get hypervisor type.\n\n        :returns: hypervisor type (ex. qemu)\n\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getType'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_version
dedent|''
name|'def'
name|'get_hypervisor_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get hypervisor version.\n\n        :returns: hypervisor version (ex. 12003)\n\n        """'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): getVersion moved between libvirt versions'
nl|'\n'
comment|'# Trying to do be compatible with older versions is a lost cause'
nl|'\n'
comment|'# But ... we can at least give the user a nice message'
nl|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_conn'
op|','
string|"'getVersion'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"libvirt version is too old"'
nl|'\n'
string|'" (does not support getVersion)"'
op|')'
op|')'
newline|'\n'
comment|'# NOTE(justinsb): If we wanted to get the version, we could:'
nl|'\n'
comment|"# method = getattr(libvirt, 'getVersion', None)"
nl|'\n'
comment|'# NOTE(justinsb): This would then rely on a proper version check'
nl|'\n'
nl|'\n'
dedent|''
name|'return'
name|'method'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_cpu_info
dedent|''
name|'def'
name|'get_cpu_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get cpuinfo information.\n\n        Obtains cpu feature from virConnect.getCapabilities,\n        and returns as a json string.\n\n        :return: see above description\n\n        """'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'nodes'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"\'<cpu>\' must be 1, but %d\\n"'
op|')'
op|'%'
name|'len'
op|'('
name|'nodes'
op|')'
newline|'\n'
name|'reason'
op|'+='
name|'xml'
op|'.'
name|'serialize'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cpu_info'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'arch_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/arch'"
op|')'
newline|'\n'
name|'if'
name|'arch_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'arch'"
op|']'
op|'='
name|'arch_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'model_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/model'"
op|')'
newline|'\n'
name|'if'
name|'model_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'model'"
op|']'
op|'='
name|'model_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vendor_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/vendor'"
op|')'
newline|'\n'
name|'if'
name|'vendor_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'vendor'"
op|']'
op|'='
name|'vendor_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'topology_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/topology'"
op|')'
newline|'\n'
name|'topology'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'topology_nodes'
op|':'
newline|'\n'
indent|'            '
name|'topology_node'
op|'='
name|'topology_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'get_properties'
op|'('
op|')'
newline|'\n'
name|'while'
name|'topology_node'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'topology_node'
op|'.'
name|'get_name'
op|'('
op|')'
newline|'\n'
name|'topology'
op|'['
name|'name'
op|']'
op|'='
name|'topology_node'
op|'.'
name|'getContent'
op|'('
op|')'
newline|'\n'
name|'topology_node'
op|'='
name|'topology_node'
op|'.'
name|'get_next'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'keys'
op|'='
op|'['
string|"'cores'"
op|','
string|"'sockets'"
op|','
string|"'threads'"
op|']'
newline|'\n'
name|'tkeys'
op|'='
name|'topology'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'if'
name|'set'
op|'('
name|'tkeys'
op|')'
op|'!='
name|'set'
op|'('
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ks'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"topology (%(topology)s) must have %(ks)s"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'feature_nodes'
op|'='
name|'xml'
op|'.'
name|'xpathEval'
op|'('
string|"'//host/cpu/feature'"
op|')'
newline|'\n'
name|'features'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'for'
name|'nodes'
name|'in'
name|'feature_nodes'
op|':'
newline|'\n'
indent|'            '
name|'features'
op|'.'
name|'append'
op|'('
name|'nodes'
op|'.'
name|'get_properties'
op|'('
op|')'
op|'.'
name|'getContent'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cpu_info'
op|'['
string|"'topology'"
op|']'
op|'='
name|'topology'
newline|'\n'
name|'cpu_info'
op|'['
string|"'features'"
op|']'
op|'='
name|'features'
newline|'\n'
name|'return'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|block_stats
dedent|''
name|'def'
name|'block_stats'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'disk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'domain'
op|'.'
name|'blockStats'
op|'('
name|'disk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|interface_stats
dedent|''
name|'def'
name|'interface_stats'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name, not an Instance, so\n        that it can be called by monitor.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'domain'
op|'.'
name|'interfaceStats'
op|'('
name|'interface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
comment|'#TODO(mdragon): console proxy should be implemented for libvirt,'
nl|'\n'
comment|'#               in case someone wants to use it with kvm or'
nl|'\n'
comment|'#               such. For now return fake data.'
nl|'\n'
indent|'        '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'username'"
op|':'
string|"'fakeuser'"
op|','
nl|'\n'
string|"'password'"
op|':'
string|"'fakepassword'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_available_resource
dedent|''
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates compute manager resource info on ComputeNode table.\n\n        This method is called when nova-coompute launches, and\n        whenever admin executes "nova-manage service update_resource".\n\n        :param ctxt: security context\n        :param host: hostname that compute manager is currently running\n\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'service_ref'
op|'='
name|'db'
op|'.'
name|'service_get_all_compute_by_host'
op|'('
name|'ctxt'
op|','
name|'host'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ComputeServiceUnavailable'
op|'('
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# Updating host information'
nl|'\n'
dedent|''
name|'dic'
op|'='
op|'{'
string|"'vcpus'"
op|':'
name|'self'
op|'.'
name|'get_vcpu_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'self'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'self'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
name|'self'
op|'.'
name|'get_vcpu_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'self'
op|'.'
name|'get_memory_mb_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'self'
op|'.'
name|'get_local_gb_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'self'
op|'.'
name|'get_hypervisor_type'
op|'('
op|')'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'self'
op|'.'
name|'get_hypervisor_version'
op|'('
op|')'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
name|'self'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'compute_node_ref'
op|'='
name|'service_ref'
op|'['
string|"'compute_node'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'compute_node_ref'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record created for %s '"
op|')'
op|'%'
name|'host'
op|')'
newline|'\n'
name|'dic'
op|'['
string|"'service_id'"
op|']'
op|'='
name|'service_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_create'
op|'('
name|'ctxt'
op|','
name|'dic'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record updated for %s '"
op|')'
op|'%'
name|'host'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_update'
op|'('
name|'ctxt'
op|','
name|'compute_node_ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'dic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compare_cpu
dedent|''
dedent|''
name|'def'
name|'compare_cpu'
op|'('
name|'self'
op|','
name|'cpu_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks the host cpu is compatible to a cpu given by xml.\n\n        "xml" must be a part of libvirt.openReadonly().getCapabilities().\n        return values follows by virCPUCompareResult.\n        if 0 > return value, do live migration.\n        \'http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult\'\n\n        :param cpu_info: json string that shows cpu feature(see get_cpu_info())\n        :returns:\n            None. if given cpu info is not compatible to this server,\n            raise exception.\n\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance launched has CPU info:\\n%s'"
op|')'
op|'%'
name|'cpu_info'
op|')'
newline|'\n'
name|'dic'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'str'
op|'('
name|'Template'
op|'('
name|'self'
op|'.'
name|'cpuinfo_xml'
op|','
name|'searchList'
op|'='
name|'dic'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'to xml...\\n:%s '"
op|'%'
name|'xml'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'u'
op|'='
string|'"http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult"'
newline|'\n'
name|'m'
op|'='
name|'_'
op|'('
string|'"CPU doesn\'t have compatibility.\\n\\n%(ret)s\\n\\nRefer to %(u)s"'
op|')'
newline|'\n'
comment|'# unknown character exists in xml, then libvirt complains'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'('
name|'xml'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'e'
op|'.'
name|'message'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'m'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ret'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
name|'m'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
DECL|member|ensure_filtering_rules_for_instance
dedent|''
name|'def'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setting up filtering rules and waiting for its completion.\n\n        To migrate an instance, filtering rules to hypervisors\n        and firewalls are inevitable on destination host.\n        ( Waiting only for filterling rules to hypervisor,\n        since filtering rules to firewall rules can be set faster).\n\n        Concretely, the below method must be called.\n        - setup_basic_filtering (for nova-basic, etc.)\n        - prepare_instance_filter(for nova-instance-instance-xxx, etc.)\n\n        to_xml may have to be called since it defines PROJNET, PROJMASK.\n        but libvirt migrates those value through migrateToURI(),\n        so , no need to be called.\n\n        Don\'t use thread for this method since migration should\n        not be started when setting-up filtering rules operations\n        are not completed.\n\n        :params instance_ref: nova.db.sqlalchemy.models.Instance object\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'time'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'='
name|'greenthread'
newline|'\n'
nl|'\n'
comment|'# If any instances never launch at destination host,'
nl|'\n'
comment|'# basic-filtering must be set here.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
comment|'# setting up n)ova-instance-instance-xx mainly.'
nl|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for completion'
nl|'\n'
name|'timeout_count'
op|'='
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_retry_count'
op|')'
newline|'\n'
name|'while'
name|'timeout_count'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'instance_filter_exists'
op|'('
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'timeout_count'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'timeout_count'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Timeout migrating for %s. nwfilter not found.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|'%'
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawning live_migration operation for distributing high-load.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params dest: destination host\n        :params post_method:\n            post operation method.\n            expected nova.compute.manager.post_live_migration.\n        :params recover_method:\n            recovery method when any exception occurs.\n            expected nova.compute.manager.recover_live_migration.\n\n        """'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_live_migration'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_live_migration
dedent|''
name|'def'
name|'_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do live migration.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params dest: destination host\n        :params post_method:\n            post operation method.\n            expected nova.compute.manager.post_live_migration.\n        :params recover_method:\n            recovery method when any exception occurs.\n            expected nova.compute.manager.recover_live_migration.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# Do live migration.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'flaglist'
op|'='
name|'FLAGS'
op|'.'
name|'live_migration_flag'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'flagvals'
op|'='
op|'['
name|'getattr'
op|'('
name|'libvirt'
op|','
name|'x'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'flaglist'
op|']'
newline|'\n'
name|'logical_sum'
op|'='
name|'reduce'
op|'('
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'x'
op|'|'
name|'y'
op|','
name|'flagvals'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'read_only'
op|':'
newline|'\n'
indent|'                '
name|'tmpconn'
op|'='
name|'self'
op|'.'
name|'_connect'
op|'('
name|'self'
op|'.'
name|'libvirt_uri'
op|','
name|'False'
op|')'
newline|'\n'
name|'dom'
op|'='
name|'tmpconn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
nl|'\n'
name|'logical_sum'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
newline|'\n'
name|'tmpconn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
nl|'\n'
name|'logical_sum'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'recover_method'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|'='
name|'dest'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
comment|'# Waiting for completion of live_migration.'
nl|'\n'
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|wait_for_live_migration
name|'def'
name|'wait_for_live_migration'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""waiting for live migration completion"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'post_method'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'wait_for_live_migration'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See comments of same method in firewall_driver."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_host_status
dedent|''
name|'def'
name|'update_host_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See xenapi_conn.py implementation."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_host_stats
dedent|''
name|'def'
name|'get_host_stats'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See xenapi_conn.py implementation."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

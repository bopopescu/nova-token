begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Piston Cloud Computing, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA connection to a hypervisor through libvirt.\n\nSupports KVM, LXC, QEMU, UML, and XEN.\n\n**Related Flags**\n\n:libvirt_type:  Libvirt domain type.  Can be kvm, qemu, uml, xen\n                (default: kvm).\n:libvirt_uri:  Override for the default libvirt URI (depends on libvirt_type).\n:libvirt_disk_prefix:  Override the default disk prefix for the devices\n                       attached to a server.\n:rescue_image_id:  Rescue ami image (None = original image).\n:rescue_kernel_id:  Rescue aki image (None = original image).\n:rescue_ramdisk_id:  Rescue ari image (None = original image).\n:injected_network_template:  Template file for injected network\n:allow_same_net_traffic:  Whether to allow in project network traffic\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'glob'
newline|'\n'
name|'import'
name|'multiprocessing'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
name|'import'
name|'api'
name|'as'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'imagecache'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'libvirt_utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
DECL|variable|Template
name|'Template'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|libvirt_opts
name|'libvirt_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rescue_image_id'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Rescue ami image'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rescue_kernel_id'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Rescue aki image'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rescue_ramdisk_id'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Rescue ari image'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'libvirt_type'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'kvm'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Libvirt domain type (valid options are: '"
nl|'\n'
string|"'kvm, lxc, qemu, uml, xen)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'libvirt_uri'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Override the default libvirt URI '"
nl|'\n'
string|"'(which is dependent on libvirt_type)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'libvirt_inject_password'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Inject the admin password at boot time, '"
nl|'\n'
string|"'without an agent.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'libvirt_inject_key'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Inject the ssh public key at boot time'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_usb_tablet'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Sync virtual and real mouse cursors in Windows VMs'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'live_migration_uri'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"qemu+tcp://%s/system"'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Define protocol used by live_migration feature'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'live_migration_flag'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Define live migration behavior.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'block_migration_flag'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER, '"
nl|'\n'
string|"'VIR_MIGRATE_NON_SHARED_INC'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Define block migration behavior.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'live_migration_bandwidth'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Define live migration behavior'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'snapshot_image_format'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Snapshot image format (valid options are : '"
nl|'\n'
string|"'raw, qcow2, vmdk, vdi). '"
nl|'\n'
string|"'Defaults to same as source image'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'libvirt_vif_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.libvirt.vif.LibvirtBridgeDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The libvirt VIF driver to configure the VIFs.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'libvirt_volume_drivers'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
nl|'\n'
string|"'iscsi=nova.virt.libvirt.volume.LibvirtISCSIVolumeDriver'"
op|','
nl|'\n'
string|"'local=nova.virt.libvirt.volume.LibvirtVolumeDriver'"
op|','
nl|'\n'
string|"'fake=nova.virt.libvirt.volume.LibvirtFakeVolumeDriver'"
op|','
nl|'\n'
string|"'rbd=nova.virt.libvirt.volume.LibvirtNetVolumeDriver'"
op|','
nl|'\n'
string|"'sheepdog=nova.virt.libvirt.volume.LibvirtNetVolumeDriver'"
nl|'\n'
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Libvirt handlers for remote volumes.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'libvirt_disk_prefix'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Override the default disk prefix for the devices attached'"
nl|'\n'
string|"' to a server, which is dependent on libvirt_type. '"
nl|'\n'
string|"'(valid options are: sd, xvd, uvd, vd)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'libvirt_wait_soft_reboot_seconds'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'120'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds to wait for instance to shut down after'"
nl|'\n'
string|"' soft reboot request is made. We fall back to hard reboot'"
nl|'\n'
string|"' if instance does not shutdown within this window.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'libvirt_nonblocking'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use a separated OS thread pool to realize non-blocking'"
nl|'\n'
string|"' libvirt calls'"
op|')'
op|','
nl|'\n'
comment|'# force_config_drive is a string option, to allow for future behaviors'
nl|'\n'
comment|'#  (e.g. use config_drive based on image properties)'
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'force_config_drive'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Set to force injection to take place on a config drive '"
nl|'\n'
string|"'(if set, valid options are: always)'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'libvirt_opts'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'vncserver_proxyclient_address'"
op|','
string|"'nova.vnc'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|patch_tpool_proxy
name|'def'
name|'patch_tpool_proxy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""eventlet.tpool.Proxy doesn\'t work with old-style class in __str__()\n    or __repr__() calls. See bug #962840 for details.\n    We perform a monkey patch to replace those two instance methods.\n    """'
newline|'\n'
DECL|function|str_method
name|'def'
name|'str_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|function|repr_method
dedent|''
name|'def'
name|'repr_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repr'
op|'('
name|'self'
op|'.'
name|'_obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'tpool'
op|'.'
name|'Proxy'
op|'.'
name|'__str__'
op|'='
name|'str_method'
newline|'\n'
name|'tpool'
op|'.'
name|'Proxy'
op|'.'
name|'__repr__'
op|'='
name|'repr_method'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'patch_tpool_proxy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_connection
name|'def'
name|'get_connection'
op|'('
name|'read_only'
op|')'
op|':'
newline|'\n'
comment|"# These are loaded late so that there's no need to install these"
nl|'\n'
comment|'# libraries when not using libvirt.'
nl|'\n'
comment|'# Cheetah is separate because the unit tests want to load Cheetah,'
nl|'\n'
comment|'# but not libvirt.'
nl|'\n'
indent|'    '
name|'global'
name|'libvirt'
newline|'\n'
name|'if'
name|'libvirt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
dedent|''
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'return'
name|'LibvirtConnection'
op|'('
name|'read_only'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_late_load_cheetah
dedent|''
name|'def'
name|'_late_load_cheetah'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'Template'
newline|'\n'
name|'if'
name|'Template'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'__import__'
op|'('
string|"'Cheetah.Template'"
op|','
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
op|'['
string|"'Template'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'Template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_eph_disk
dedent|''
dedent|''
name|'def'
name|'_get_eph_disk'
op|'('
name|'ephemeral'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'disk.eph'"
op|'+'
name|'str'
op|'('
name|'ephemeral'
op|'['
string|"'num'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnection
dedent|''
name|'class'
name|'LibvirtConnection'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnection'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_host_state'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_initiator'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'container'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'read_only'
op|'='
name|'read_only'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'firewall_driver'
name|'not'
name|'in'
name|'firewall'
op|'.'
name|'drivers'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'set_default'
op|'('
string|"'firewall_driver'"
op|','
name|'firewall'
op|'.'
name|'drivers'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'fw_class'
op|'='
name|'utils'
op|'.'
name|'import_class'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'fw_class'
op|'('
name|'get_connection'
op|'='
name|'self'
op|'.'
name|'_get_connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vif_driver'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_vif_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_drivers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'driver_str'
name|'in'
name|'FLAGS'
op|'.'
name|'libvirt_volume_drivers'
op|':'
newline|'\n'
indent|'            '
name|'driver_type'
op|','
name|'_sep'
op|','
name|'driver'
op|'='
name|'driver_str'
op|'.'
name|'partition'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'driver_class'
op|'='
name|'utils'
op|'.'
name|'import_class'
op|'('
name|'driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_drivers'
op|'['
name|'driver_type'
op|']'
op|'='
name|'driver_class'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_host_state'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'disk_prefix_map'
op|'='
op|'{'
string|'"lxc"'
op|':'
string|'""'
op|','
string|'"uml"'
op|':'
string|'"ubd"'
op|','
string|'"xen"'
op|':'
string|'"sd"'
op|'}'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_disk_prefix'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disk_prefix'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_disk_prefix'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disk_prefix'
op|'='
name|'disk_prefix_map'
op|'.'
name|'get'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|','
string|"'vd'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'default_root_device'
op|'='
name|'self'
op|'.'
name|'_disk_prefix'
op|'+'
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'default_second_device'
op|'='
name|'self'
op|'.'
name|'_disk_prefix'
op|'+'
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'default_third_device'
op|'='
name|'self'
op|'.'
name|'_disk_prefix'
op|'+'
string|"'c'"
newline|'\n'
name|'self'
op|'.'
name|'default_last_device'
op|'='
name|'self'
op|'.'
name|'_disk_prefix'
op|'+'
string|"'z'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_disk_cachemode'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'image_cache_manager'
op|'='
name|'imagecache'
op|'.'
name|'ImageCacheManager'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|disk_cachemode
name|'def'
name|'disk_cachemode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_disk_cachemode'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# We prefer 'none' for consistent performance, host crash"
nl|'\n'
comment|'# safety & migration correctness by avoiding host page cache.'
nl|'\n'
comment|"# Some filesystems (eg GlusterFS via FUSE) don't support"
nl|'\n'
comment|"# O_DIRECT though. For those we fallback to 'writethrough'"
nl|'\n'
comment|'# which gives host crash safety, and is safe for migration'
nl|'\n'
comment|'# provided the filesystem is cache coherant (cluster filesystems'
nl|'\n'
comment|'# typically are, but things like NFS are not).'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disk_cachemode'
op|'='
string|'"none"'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_supports_direct_io'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_disk_cachemode'
op|'='
string|'"writethrough"'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_disk_cachemode'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|host_state
name|'def'
name|'host_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_host_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_host_state'
op|'='
name|'HostState'
op|'('
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_host_state'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(nsokolov): moved instance restarting to ComputeManager'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_wrapped_conn'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_test_connection'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connecting to libvirt: %s'"
op|')'
op|','
name|'self'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'libvirt_nonblocking'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'self'
op|'.'
name|'_connect'
op|'('
name|'self'
op|'.'
name|'uri'
op|','
nl|'\n'
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_wrapped_conn'
op|'='
name|'tpool'
op|'.'
name|'proxy_call'
op|'('
nl|'\n'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|','
name|'libvirt'
op|'.'
name|'virConnect'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_connect'
op|','
name|'self'
op|'.'
name|'uri'
op|','
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_wrapped_conn'
newline|'\n'
nl|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_connection
name|'def'
name|'_test_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_wrapped_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
name|'and'
nl|'\n'
name|'e'
op|'.'
name|'get_error_domain'
op|'('
op|')'
name|'in'
op|'('
name|'libvirt'
op|'.'
name|'VIR_FROM_REMOTE'
op|','
nl|'\n'
name|'libvirt'
op|'.'
name|'VIR_FROM_RPC'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Connection to libvirt broke'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|uri
name|'def'
name|'uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'uml:///system'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'xen'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'xen:///'"
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'lxc:///'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'uri'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_uri'
name|'or'
string|"'qemu:///system'"
newline|'\n'
dedent|''
name|'return'
name|'uri'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_connect
name|'def'
name|'_connect'
op|'('
name|'uri'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'auth'
op|'='
op|'['
op|'['
name|'libvirt'
op|'.'
name|'VIR_CRED_AUTHNAME'
op|','
name|'libvirt'
op|'.'
name|'VIR_CRED_NOECHOPROMPT'
op|']'
op|','
nl|'\n'
string|"'root'"
op|','
nl|'\n'
name|'None'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'read_only'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openReadOnly'
op|'('
name|'uri'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'libvirt'
op|'.'
name|'openAuth'
op|'('
name|'uri'
op|','
name|'auth'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_num_instances
dedent|''
dedent|''
name|'def'
name|'get_num_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Efficient override of base instance_exists method."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'numOfDomains'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Efficient override of base instance_exists method."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'x'
op|')'
op|'.'
name|'name'
op|'('
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
nl|'\n'
name|'if'
name|'x'
op|'!='
number|'0'
op|']'
comment|'# We skip domains with ID 0 (hypervisors).'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_map_to_instance_info
name|'def'
name|'_map_to_instance_info'
op|'('
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets info from a virsh domain object into an InstanceInfo"""'
newline|'\n'
nl|'\n'
comment|'# domain.info() returns a list of:'
nl|'\n'
comment|'#    state:       one of the state values (virDomainState)'
nl|'\n'
comment|'#    maxMemory:   the maximum memory used by the domain'
nl|'\n'
comment|'#    memory:      the current amount of memory used by the domain'
nl|'\n'
comment|'#    nbVirtCPU:   the number of virtual CPU'
nl|'\n'
comment|'#    puTime:      the time used by the domain in nanoseconds'
nl|'\n'
nl|'\n'
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_num_cpu'
op|','
name|'_cpu_time'
op|')'
op|'='
name|'domain'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
name|'domain'
op|'.'
name|'name'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'driver'
op|'.'
name|'InstanceInfo'
op|'('
name|'name'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances_detail
dedent|''
name|'def'
name|'list_instances_detail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'infos'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'domain_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'domain_id'
op|')'
newline|'\n'
name|'info'
op|'='
name|'self'
op|'.'
name|'_map_to_instance_info'
op|'('
name|'domain'
op|')'
newline|'\n'
name|'infos'
op|'.'
name|'append'
op|'('
name|'info'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'infos'
newline|'\n'
nl|'\n'
DECL|member|plug_vifs
dedent|''
name|'def'
name|'plug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug VIFs into networks."""'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vifs
dedent|''
dedent|''
name|'def'
name|'unplug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug VIFs from networks."""'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy
dedent|''
dedent|''
name|'def'
name|'_destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# If the instance is already terminated, we're still happy"
nl|'\n'
comment|'# Otherwise, destroy it'
nl|'\n'
dedent|''
name|'if'
name|'virt_dom'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'is_okay'
op|'='
name|'False'
newline|'\n'
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errcode'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_OPERATION_INVALID'
op|':'
newline|'\n'
comment|'# If the instance if already shut off, we get this:'
nl|'\n'
comment|'# Code=55 Error=Requested operation is not valid:'
nl|'\n'
comment|'# domain is not running'
nl|'\n'
indent|'                    '
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_cpus'
op|','
name|'_t'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'                        '
name|'is_okay'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'is_okay'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during destroy. "'
nl|'\n'
string|'"Code=%(errcode)s Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(derekh): we can switch to undefineFlags and'
nl|'\n'
comment|'# VIR_DOMAIN_UNDEFINE_MANAGED_SAVE once we require 0.9.4'
nl|'\n'
indent|'                '
name|'if'
name|'virt_dom'
op|'.'
name|'hasManagedSaveImage'
op|'('
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'virt_dom'
op|'.'
name|'managedSaveRemove'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during saved instance "'
nl|'\n'
string|'"removal. Code=%(errcode)s Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(justinsb): We remove the domain definition. We probably'
nl|'\n'
comment|'# would do better to keep it if cleanup=False (e.g. volumes?)'
nl|'\n'
comment|'# (e.g. #2 - not losing machines on failure)'
nl|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during undefine. "'
nl|'\n'
string|'"Code=%(errcode)s Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_destroy
name|'def'
name|'_wait_for_destroy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is gone."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance destroyed successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_destroy'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'errcode'
op|'='
name|'e'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Error from libvirt during unfilter. "'
nl|'\n'
string|'"Code=%(errcode)s Error=%(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'reason'
op|'='
string|'"Error unfiltering instance."'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): we disconnect from volumes regardless'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'='
name|'vol'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'mountpoint'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'volume_driver_method'
op|'('
string|"'disconnect_volume'"
op|','
nl|'\n'
name|'connection_info'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cleanup'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'cleanup'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'target'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Deleting instance files %(target)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'disk'
op|'.'
name|'destroy_container'
op|'('
name|'self'
op|'.'
name|'container'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_volume_connector
dedent|''
dedent|''
name|'def'
name|'get_volume_connector'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_initiator'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_initiator'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_iscsi_initiator'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_initiator'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Could not determine iscsi initiator name'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'FLAGS'
op|'.'
name|'my_ip'
op|','
nl|'\n'
string|"'initiator'"
op|':'
name|'self'
op|'.'
name|'_initiator'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_resize
dedent|''
name|'def'
name|'_cleanup_resize'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'target'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|'+'
string|'"_resize"'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|volume_driver_method
dedent|''
dedent|''
name|'def'
name|'volume_driver_method'
op|'('
name|'self'
op|','
name|'method_name'
op|','
name|'connection_info'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'driver_type'
op|'='
name|'connection_info'
op|'.'
name|'get'
op|'('
string|"'driver_volume_type'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'driver_type'
name|'in'
name|'self'
op|'.'
name|'volume_drivers'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VolumeDriverNotFound'
op|'('
name|'driver_type'
op|'='
name|'driver_type'
op|')'
newline|'\n'
dedent|''
name|'driver'
op|'='
name|'self'
op|'.'
name|'volume_drivers'
op|'['
name|'driver_type'
op|']'
newline|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'driver'
op|','
name|'method_name'
op|')'
newline|'\n'
name|'return'
name|'method'
op|'('
name|'connection_info'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'instance_name'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'mount_device'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'conf'
op|'='
name|'self'
op|'.'
name|'volume_driver_method'
op|'('
string|"'connect_volume'"
op|','
nl|'\n'
name|'connection_info'
op|','
nl|'\n'
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_attach_lxc_volume'
op|'('
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
op|','
name|'virt_dom'
op|','
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'attachDevice'
op|'('
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'ex'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'volume_driver_method'
op|'('
string|"'disconnect_volume'"
op|','
nl|'\n'
name|'connection_info'
op|','
nl|'\n'
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'ex'
op|','
name|'libvirt'
op|'.'
name|'libvirtError'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'errcode'
op|'='
name|'ex'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'errcode'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_OPERATION_FAILED'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'exception'
op|'.'
name|'DeviceIsBusy'
op|'('
name|'device'
op|'='
name|'mount_device'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_get_disk_xml
name|'def'
name|'_get_disk_xml'
op|'('
name|'xml'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the xml for the disk mounted at device"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk'"
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'getchildren'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'child'
op|'.'
name|'tag'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|'=='
name|'device'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'etree'
op|'.'
name|'tostring'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'instance_name'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mount_device'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(vish): This is called to cleanup volumes after live'
nl|'\n'
comment|'#             migration, so we should still logout even if'
nl|'\n'
comment|"#             the instance doesn't exist here anymore."
nl|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_disk_xml'
op|'('
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'xml'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'DiskNotFound'
op|'('
name|'location'
op|'='
name|'mount_device'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_detach_lxc_volume'
op|'('
name|'xml'
op|','
name|'virt_dom'
op|','
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'virt_dom'
op|'.'
name|'detachDevice'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'volume_driver_method'
op|'('
string|"'disconnect_volume'"
op|','
nl|'\n'
name|'connection_info'
op|','
nl|'\n'
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|_attach_lxc_volume
name|'def'
name|'_attach_lxc_volume'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'virt_dom'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'attaching LXC block device'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'lxc_container_root'
op|'='
name|'self'
op|'.'
name|'get_lxc_container_root'
op|'('
name|'virt_dom'
op|')'
newline|'\n'
name|'lxc_host_volume'
op|'='
name|'self'
op|'.'
name|'get_lxc_host_device'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'lxc_container_device'
op|'='
name|'self'
op|'.'
name|'get_lxc_container_target'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'lxc_container_target'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'lxc_container_root'
op|','
nl|'\n'
name|'lxc_container_device'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'lxc_container_target'
op|':'
newline|'\n'
indent|'            '
name|'disk'
op|'.'
name|'bind'
op|'('
name|'lxc_host_volume'
op|','
name|'lxc_container_target'
op|','
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|_detach_lxc_volume
name|'def'
name|'_detach_lxc_volume'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'virt_dom'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'detaching LXC block device'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'lxc_container_root'
op|'='
name|'self'
op|'.'
name|'get_lxc_container_root'
op|'('
name|'virt_dom'
op|')'
newline|'\n'
name|'lxc_container_device'
op|'='
name|'self'
op|'.'
name|'get_lxc_container_target'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'lxc_container_target'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'lxc_container_root'
op|','
nl|'\n'
name|'lxc_container_device'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'lxc_container_target'
op|':'
newline|'\n'
indent|'            '
name|'disk'
op|'.'
name|'unbind'
op|'('
name|'lxc_container_target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_lxc_container_root
name|'def'
name|'get_lxc_container_root'
op|'('
name|'virt_dom'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'filesystem_block'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/filesystem'"
op|')'
newline|'\n'
name|'for'
name|'cnt'
op|','
name|'filesystem_nodes'
name|'in'
name|'enumerate'
op|'('
name|'filesystem_block'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'filesystem_nodes'
op|'['
name|'cnt'
op|']'
op|'.'
name|'get'
op|'('
string|"'dir'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_lxc_host_device
name|'def'
name|'get_lxc_host_device'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'device'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'source'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
op|'.'
name|'getAttribute'
op|'('
string|"'dev'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_lxc_container_target
name|'def'
name|'get_lxc_container_target'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'device'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'target'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filesystem'
op|'='
name|'device'
op|'.'
name|'getAttribute'
op|'('
string|"'dev'"
op|')'
newline|'\n'
name|'return'
string|"'dev/%s'"
op|'%'
name|'filesystem'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|snapshot
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_href'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        This command only works with qemu 0.14+\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ImageNotFound'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'_image_service'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
name|'context'
op|','
name|'image_href'
op|')'
newline|'\n'
name|'snapshot_image_service'
op|','
name|'snapshot_image_id'
op|'='
name|'_image_service'
newline|'\n'
name|'snapshot'
op|'='
name|'snapshot_image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'snapshot_image_id'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'active'"
op|','
nl|'\n'
string|"'name'"
op|':'
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
nl|'\n'
string|"'kernel_id'"
op|':'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
string|"'image_location'"
op|':'
string|"'snapshot'"
op|','
nl|'\n'
string|"'image_state'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'owner_id'"
op|':'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'if'
string|"'architecture'"
name|'in'
name|'base'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'arch'
op|'='
name|'base'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'architecture'"
op|']'
newline|'\n'
name|'metadata'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'architecture'"
op|']'
op|'='
name|'arch'
newline|'\n'
nl|'\n'
dedent|''
name|'source_format'
op|'='
name|'base'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
name|'or'
string|"'raw'"
newline|'\n'
name|'if'
name|'source_format'
op|'=='
string|"'ami'"
op|':'
newline|'\n'
comment|'# NOTE(vish): assume amis are raw'
nl|'\n'
indent|'            '
name|'source_format'
op|'='
string|"'raw'"
newline|'\n'
dedent|''
name|'image_format'
op|'='
name|'FLAGS'
op|'.'
name|'snapshot_image_format'
name|'or'
name|'source_format'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|':'
newline|'\n'
indent|'            '
name|'source_format'
op|'='
string|"'qcow2'"
newline|'\n'
comment|'# NOTE(vish): glance forces ami disk format to be ami'
nl|'\n'
dedent|''
name|'if'
name|'base'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'ami'"
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'disk_format'"
op|']'
op|'='
string|"'ami'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'disk_format'"
op|']'
op|'='
name|'image_format'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'container_format'"
name|'in'
name|'base'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'container_format'"
op|']'
op|'='
name|'base'
op|'['
string|"'container_format'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Find the disk'
nl|'\n'
dedent|''
name|'xml_desc'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'domain'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml_desc'
op|')'
newline|'\n'
name|'source'
op|'='
name|'domain'
op|'.'
name|'find'
op|'('
string|"'devices/disk/source'"
op|')'
newline|'\n'
name|'disk_path'
op|'='
name|'source'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
name|'snapshot_name'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
nl|'\n'
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_cpus'
op|','
name|'_t'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'.'
name|'managedSave'
op|'('
number|'0'
op|')'
newline|'\n'
comment|'# Make the snapshot'
nl|'\n'
dedent|''
name|'libvirt_utils'
op|'.'
name|'create_snapshot'
op|'('
name|'disk_path'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Export the snapshot to a raw image'
nl|'\n'
name|'with'
name|'utils'
op|'.'
name|'tempdir'
op|'('
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'out_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'extract_snapshot'
op|'('
name|'disk_path'
op|','
name|'source_format'
op|','
nl|'\n'
name|'snapshot_name'
op|','
name|'out_path'
op|','
nl|'\n'
name|'image_format'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'libvirt_utils'
op|'.'
name|'delete_snapshot'
op|'('
name|'disk_path'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'virt_dom'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Upload that image to the image service'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'libvirt_utils'
op|'.'
name|'file_open'
op|'('
name|'out_path'
op|')'
name|'as'
name|'image_file'
op|':'
newline|'\n'
indent|'                '
name|'image_service'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'image_href'
op|','
nl|'\n'
name|'metadata'
op|','
nl|'\n'
name|'image_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|'='
string|"'SOFT'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot a virtual machine, given an instance reference."""'
newline|'\n'
name|'if'
name|'reboot_type'
op|'=='
string|"'SOFT'"
op|':'
newline|'\n'
comment|'# NOTE(vish): This will attempt to do a graceful shutdown/restart.'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_soft_reboot'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance soft rebooted successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Failed to soft reboot instance."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_hard_reboot'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_soft_reboot
dedent|''
name|'def'
name|'_soft_reboot'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attempt to shutdown and restart the instance gracefully.\n\n        We use shutdown and create here so we can return if the guest\n        responded and actually rebooted. Note that this method only\n        succeeds if the guest responds to acpi. Therefore we return\n        success or failure so we can fall back to a hard reboot if\n        necessary.\n\n        :returns: True if the reboot succeeded\n        """'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_cpus'
op|','
name|'_t'
op|')'
op|'='
name|'dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(vish): This check allows us to reboot an instance that'
nl|'\n'
comment|'#             is already shutdown.'
nl|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'.'
name|'shutdown'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(vish): This actually could take slighty longer than the'
nl|'\n'
comment|'#             FLAG defines depending on how long the get_info'
nl|'\n'
comment|'#             call takes to return.'
nl|'\n'
dedent|''
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_wait_soft_reboot_seconds'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'state'
op|','
name|'_max_mem'
op|','
name|'_mem'
op|','
name|'_cpus'
op|','
name|'_t'
op|')'
op|'='
name|'dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'state'
name|'in'
op|'['
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance shutdown successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'self'
op|'.'
name|'_wait_for_running'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_hard_reboot
dedent|''
name|'def'
name|'_hard_reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'xml'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot a virtual machine, given an instance reference.\n\n        This method actually destroys and re-creates the domain to ensure the\n        reboot happens, as the guest OS cannot ignore this action.\n\n        If xml is set, it uses the passed in xml in place of the xml from the\n        existing domain.\n        """'
newline|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
comment|'# NOTE(itoumsn): Use XML delived from the running instance'
nl|'\n'
comment|'# instead of using to_xml(instance, network_info). This is almost'
nl|'\n'
comment|'# the ultimate stupid workaround.'
nl|'\n'
name|'if'
name|'not'
name|'xml'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'cleanup'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_reboot
name|'def'
name|'_wait_for_reboot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is running again."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"During reboot, instance disappeared."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance rebooted successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_reboot'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'suspend'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause paused VM instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'resume'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'managedSave'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""resume the specified instance"""'
newline|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Loads a VM using rescue images.\n\n        A rescue is normally performed when something goes wrong with the\n        primary images and data needs to be corrected/recovered. Rescuing\n        should not edit or over-ride the original image, only allow for\n        data recovery.\n\n        """'
newline|'\n'
nl|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'unrescue_xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'unrescue_xml_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'unrescue.xml'"
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'unrescue_xml_path'
op|','
name|'unrescue_xml'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
name|'rescue_images'
op|'='
op|'{'
nl|'\n'
string|"'image_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_image_id'
name|'or'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_kernel_id'
name|'or'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'FLAGS'
op|'.'
name|'rescue_ramdisk_id'
name|'or'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'xml'
op|','
string|"'.rescue'"
op|','
name|'rescue_images'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_hard_reboot'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'xml'
op|'='
name|'xml'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the VM which is being rescued back into primary images.\n\n        Because reboot destroys and re-creates instances, unresue should\n        simply call reboot.\n\n        """'
newline|'\n'
name|'unrescue_xml_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'unrescue.xml'"
op|')'
newline|'\n'
name|'xml'
op|'='
name|'libvirt_utils'
op|'.'
name|'load_file'
op|'('
name|'unrescue_xml_path'
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'file_delete'
op|'('
name|'unrescue_xml_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_hard_reboot'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'xml'
op|'='
name|'xml'
op|')'
newline|'\n'
name|'rescue_files'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"*.rescue"'
op|')'
newline|'\n'
name|'for'
name|'rescue_file'
name|'in'
name|'glob'
op|'.'
name|'iglob'
op|'('
name|'rescue_files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'file_delete'
op|'('
name|'rescue_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|poll_rebooting_instances
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|poll_rescued_instances
name|'def'
name|'poll_rescued_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|poll_unconfirmed_resizes
name|'def'
name|'poll_unconfirmed_resizes'
op|'('
name|'self'
op|','
name|'resize_confirm_window'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll for unconfirmed resizes.\n\n        Look for any unconfirmed resizes that are older than\n        `resize_confirm_window` and automatically confirm them.\n        """'
newline|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'migrations'
op|'='
name|'db'
op|'.'
name|'migration_get_all_unconfirmed'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'resize_confirm_window'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'migrations'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(migration_count)d unconfirmed migrations "'
nl|'\n'
string|'"older than %(confirm_window)d seconds"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'migration_count'"
op|':'
name|'len'
op|'('
name|'migrations'
op|')'
op|','
nl|'\n'
string|"'confirm_window'"
op|':'
name|'resize_confirm_window'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically confirming migration %d"'
op|')'
op|','
name|'migration'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'confirm_resize'
op|'('
name|'ctxt'
op|','
name|'migration'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_enable_hairpin
dedent|''
dedent|''
name|'def'
name|'_enable_hairpin'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'interfaces'
op|'='
name|'self'
op|'.'
name|'get_interfaces'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'interface'
name|'in'
name|'interfaces'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'tee'"
op|','
nl|'\n'
string|"'/sys/class/net/%s/brport/hairpin_mode'"
op|'%'
name|'interface'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'1'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ilyaalekseyev): Implementation like in multinics'
nl|'\n'
comment|'# for xenapi(tr3buchet)'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|spawn
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
name|'False'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'xml'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Instance is running"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_enable_hairpin'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_boot
name|'def'
name|'_wait_for_boot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Called at an interval until the VM is running."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"During spawn, instance disappeared."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance spawned successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_wait_for_boot'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_flush_libvirt_console
dedent|''
name|'def'
name|'_flush_libvirt_console'
op|'('
name|'self'
op|','
name|'pty'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'dd'"
op|','
nl|'\n'
string|"'if=%s'"
op|'%'
name|'pty'
op|','
nl|'\n'
string|"'iflag=nonblock'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'return'
name|'out'
newline|'\n'
nl|'\n'
DECL|member|_append_to_file
dedent|''
name|'def'
name|'_append_to_file'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'fpath'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'data: %(data)r, fpath: %(fpath)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'fpath'
op|','
string|"'a+'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'fpath'
newline|'\n'
nl|'\n'
DECL|member|_inject_files
dedent|''
name|'def'
name|'_inject_files'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'files'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
string|"'disk'"
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'inject_files'
op|'('
name|'disk_path'
op|','
name|'files'
op|','
name|'partition'
op|'='
name|'partition'
op|','
nl|'\n'
name|'use_cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'console_types'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|"# NOTE(comstud): We want to try 'file' types first, then try 'pty'"
nl|'\n'
comment|"# types.  We can't use Python 2.7 syntax of:"
nl|'\n'
comment|'# tree.find("./devices/console[@type=\'file\']/source")'
nl|'\n'
comment|'# because we need to support 2.6.'
nl|'\n'
name|'console_nodes'
op|'='
name|'tree'
op|'.'
name|'findall'
op|'('
string|"'./devices/console'"
op|')'
newline|'\n'
name|'for'
name|'console_node'
name|'in'
name|'console_nodes'
op|':'
newline|'\n'
indent|'            '
name|'console_type'
op|'='
name|'console_node'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
newline|'\n'
name|'console_types'
op|'.'
name|'setdefault'
op|'('
name|'console_type'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'console_types'
op|'['
name|'console_type'
op|']'
op|'.'
name|'append'
op|'('
name|'console_node'
op|')'
newline|'\n'
nl|'\n'
comment|'# If the guest has a console logging to a file prefer to use that'
nl|'\n'
dedent|''
name|'if'
name|'console_types'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'file_console'
name|'in'
name|'console_types'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'source_node'
op|'='
name|'file_console'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
newline|'\n'
name|'if'
name|'source_node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'path'
op|'='
name|'source_node'
op|'.'
name|'get'
op|'('
string|'"path"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'path'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'libvirt_utils'
op|'.'
name|'chown'
op|'('
name|'path'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'libvirt_utils'
op|'.'
name|'load_file'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
comment|"# Try 'pty' types"
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'console_types'
op|'.'
name|'get'
op|'('
string|"'pty'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'pty_console'
name|'in'
name|'console_types'
op|'.'
name|'get'
op|'('
string|"'pty'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'source_node'
op|'='
name|'pty_console'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
newline|'\n'
name|'if'
name|'source_node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'pty'
op|'='
name|'source_node'
op|'.'
name|'get'
op|'('
string|'"path"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'pty'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Guest does not have a console available"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_chown_console_log_for_instance'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_flush_libvirt_console'
op|'('
name|'pty'
op|')'
newline|'\n'
name|'console_log'
op|'='
name|'self'
op|'.'
name|'_get_console_log_path'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'fpath'
op|'='
name|'self'
op|'.'
name|'_append_to_file'
op|'('
name|'data'
op|','
name|'console_log'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'libvirt_utils'
op|'.'
name|'load_file'
op|'('
name|'fpath'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_host_ip_addr
name|'def'
name|'get_host_ip_addr'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FLAGS'
op|'.'
name|'my_ip'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
DECL|function|get_vnc_port_for_instance
indent|'        '
name|'def'
name|'get_vnc_port_for_instance'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
comment|'# TODO(sleepsonthefloor): use etree instead of minidom'
nl|'\n'
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'graphic'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'graphics'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'graphic'
op|'.'
name|'getAttribute'
op|'('
string|"'type'"
op|')'
op|'=='
string|"'vnc'"
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'graphic'
op|'.'
name|'getAttribute'
op|'('
string|"'port'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'port'
op|'='
name|'get_vnc_port_for_instance'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'host'
op|'='
name|'FLAGS'
op|'.'
name|'vncserver_proxyclient_address'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'host'"
op|':'
name|'host'
op|','
string|"'port'"
op|':'
name|'port'
op|','
string|"'internal_access_path'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_supports_direct_io
name|'def'
name|'_supports_direct_io'
op|'('
name|'dirpath'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'os'
op|','
string|"'O_DIRECT'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"This python runtime does not support direct I/O"'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'testfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'dirpath'
op|','
string|'".directio.test"'
op|')'
newline|'\n'
nl|'\n'
name|'hasDirectIO'
op|'='
name|'True'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'testfile'
op|','
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_WRONLY'
op|'|'
name|'os'
op|'.'
name|'O_DIRECT'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'f'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Path \'%(path)s\' supports direct I/O"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'path'"
op|':'
name|'dirpath'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINVAL'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Path \'%(path)s\' does not support direct I/O: "'
nl|'\n'
string|'"\'%(ex)s\'"'
op|')'
op|'%'
op|'{'
string|"'path'"
op|':'
name|'dirpath'
op|','
string|"'ex'"
op|':'
name|'str'
op|'('
name|'e'
op|')'
op|'}'
op|')'
newline|'\n'
name|'hasDirectIO'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Error on \'%(path)s\' while checking direct I/O: "'
nl|'\n'
string|'"\'%(ex)s\'"'
op|')'
op|'%'
op|'{'
string|"'path'"
op|':'
name|'dirpath'
op|','
string|"'ex'"
op|':'
name|'str'
op|'('
name|'e'
op|')'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'e'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Error on \'%(path)s\' while checking direct I/O: "'
nl|'\n'
string|'"\'%(ex)s\'"'
op|')'
op|'%'
op|'{'
string|"'path'"
op|':'
name|'dirpath'
op|','
string|"'ex'"
op|':'
name|'str'
op|'('
name|'e'
op|')'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'e'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'testfile'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'hasDirectIO'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_cache_image
name|'def'
name|'_cache_image'
op|'('
name|'fn'
op|','
name|'target'
op|','
name|'fname'
op|','
name|'cow'
op|'='
name|'False'
op|','
name|'size'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrapper for a method that creates an image that caches the image.\n\n        This wrapper will save the image into a common store and create a\n        copy for use by the hypervisor.\n\n        The underlying method should specify a kwarg of target representing\n        where the image will be saved.\n\n        fname is used as the filename of the base image.  The filename needs\n        to be unique to a given image.\n\n        If cow is True, it will make a CoW image instead of a copy.\n\n        If size is specified, we attempt to resize up to that size.\n        """'
newline|'\n'
nl|'\n'
comment|"# NOTE(mikal): Checksums aren't created here, even if the image cache"
nl|'\n'
comment|'# manager is enabled, as that would slow down VM startup. If both'
nl|'\n'
comment|'# cache management and checksumming are enabled, then the checksum'
nl|'\n'
comment|'# will be created on the first pass of the image cache manager.'
nl|'\n'
nl|'\n'
name|'generating'
op|'='
string|"'image_id'"
name|'not'
name|'in'
name|'kwargs'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'FLAGS'
op|'.'
name|'base_dir_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'libvirt_utils'
op|'.'
name|'ensure_tree'
op|'('
name|'base_dir'
op|')'
newline|'\n'
dedent|''
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'fname'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'fname'
op|')'
newline|'\n'
DECL|function|call_if_not_exists
name|'def'
name|'call_if_not_exists'
op|'('
name|'base'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'utils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'fn'
op|'('
name|'target'
op|'='
name|'base'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'cow'
name|'or'
name|'not'
name|'generating'
op|':'
newline|'\n'
indent|'                '
name|'call_if_not_exists'
op|'('
name|'base'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'generating'
op|':'
newline|'\n'
comment|"# For raw it's quicker to just generate outside the cache"
nl|'\n'
indent|'                '
name|'call_if_not_exists'
op|'('
name|'target'
op|','
name|'fn'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'base'
op|')'
newline|'\n'
DECL|function|copy_and_extend
name|'def'
name|'copy_and_extend'
op|'('
name|'cow'
op|','
name|'generating'
op|','
name|'base'
op|','
name|'target'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cow'
op|':'
newline|'\n'
indent|'                    '
name|'cow_base'
op|'='
name|'base'
newline|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
indent|'                        '
name|'size_gb'
op|'='
name|'size'
op|'/'
op|'('
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'cow_base'
op|'+='
string|'"_%d"'
op|'%'
name|'size_gb'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'cow_base'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'with'
name|'utils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'cow_base'
op|')'
op|':'
newline|'\n'
indent|'                                '
name|'libvirt_utils'
op|'.'
name|'copy_image'
op|'('
name|'base'
op|','
name|'cow_base'
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'extend'
op|'('
name|'cow_base'
op|','
name|'size'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'libvirt_utils'
op|'.'
name|'create_cow_image'
op|'('
name|'cow_base'
op|','
name|'target'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'generating'
op|':'
newline|'\n'
indent|'                    '
name|'libvirt_utils'
op|'.'
name|'copy_image'
op|'('
name|'base'
op|','
name|'target'
op|')'
newline|'\n'
comment|"# Resize after the copy, as it's usually much faster"
nl|'\n'
comment|'# to make sparse updates, rather than potentially'
nl|'\n'
comment|'# naively copying the whole image file.'
nl|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
indent|'                        '
name|'disk'
op|'.'
name|'extend'
op|'('
name|'target'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'with'
name|'utils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'copy_and_extend'
op|'('
name|'cow'
op|','
name|'generating'
op|','
name|'base'
op|','
name|'target'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_create_local
name|'def'
name|'_create_local'
op|'('
name|'target'
op|','
name|'local_size'
op|','
name|'unit'
op|'='
string|"'G'"
op|','
nl|'\n'
name|'fs_format'
op|'='
name|'None'
op|','
name|'label'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a blank image of specified size"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'fs_format'
op|':'
newline|'\n'
indent|'            '
name|'fs_format'
op|'='
name|'FLAGS'
op|'.'
name|'default_ephemeral_format'
newline|'\n'
nl|'\n'
dedent|''
name|'libvirt_utils'
op|'.'
name|'create_image'
op|'('
string|"'raw'"
op|','
name|'target'
op|','
nl|'\n'
string|"'%d%c'"
op|'%'
op|'('
name|'local_size'
op|','
name|'unit'
op|')'
op|')'
newline|'\n'
name|'if'
name|'fs_format'
op|':'
newline|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'mkfs'
op|'('
name|'fs_format'
op|','
name|'target'
op|','
name|'label'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_ephemeral
dedent|''
dedent|''
name|'def'
name|'_create_ephemeral'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'ephemeral_size'
op|','
name|'fs_label'
op|','
name|'os_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_local'
op|'('
name|'target'
op|','
name|'ephemeral_size'
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'mkfs'
op|'('
name|'os_type'
op|','
name|'fs_label'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_create_swap
name|'def'
name|'_create_swap'
op|'('
name|'target'
op|','
name|'swap_mb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a swap file of specified size"""'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'create_image'
op|'('
string|"'raw'"
op|','
name|'target'
op|','
string|"'%dM'"
op|'%'
name|'swap_mb'
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'mkfs'
op|'('
string|"'swap'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_get_console_log_path
name|'def'
name|'_get_console_log_path'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance_name'
op|','
nl|'\n'
string|"'console.log'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_chown_console_log_for_instance
dedent|''
name|'def'
name|'_chown_console_log_for_instance'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'console_log'
op|'='
name|'self'
op|'.'
name|'_get_console_log_path'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'console_log'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'chown'
op|'('
name|'console_log'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_image
dedent|''
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'libvirt_xml'
op|','
name|'suffix'
op|'='
string|"''"
op|','
nl|'\n'
name|'disk_images'
op|'='
name|'None'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'            '
name|'suffix'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# syntactic nicety'
nl|'\n'
DECL|function|basepath
dedent|''
name|'def'
name|'basepath'
op|'('
name|'fname'
op|'='
string|"''"
op|','
name|'suffix'
op|'='
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'fname'
op|'+'
name|'suffix'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure directories exist and are writable'
nl|'\n'
dedent|''
name|'libvirt_utils'
op|'.'
name|'ensure_tree'
op|'('
name|'basepath'
op|'('
name|'suffix'
op|'='
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Creating image'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'basepath'
op|'('
string|"'libvirt.xml'"
op|')'
op|','
name|'libvirt_xml'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'container_dir'
op|'='
string|"'%s/rootfs'"
op|'%'
name|'basepath'
op|'('
name|'suffix'
op|'='
string|"''"
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'ensure_tree'
op|'('
name|'container_dir'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(dprince): for rescue console.log may already exist... chown it.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_chown_console_log_for_instance'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): No need add the suffix to console.log'
nl|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'basepath'
op|'('
string|"'console.log'"
op|','
string|"''"
op|')'
op|','
string|"''"
op|','
number|'007'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'disk_images'
op|':'
newline|'\n'
indent|'            '
name|'disk_images'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fname'
op|'='
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'root_fname'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
name|'str'
op|'('
name|'disk_images'
op|'['
string|"'image_id'"
op|']'
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'size'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'inst_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst_type_id'
op|')'
newline|'\n'
name|'if'
name|'size'
op|'=='
number|'0'
name|'or'
name|'suffix'
op|'=='
string|"'.rescue'"
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'self'
op|'.'
name|'default_root_device'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'root_fname'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'disk_images'
op|'['
string|"'image_id'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'size'
op|'='
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemeral_gb'
op|'='
name|'instance'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
name|'if'
name|'ephemeral_gb'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'default_second_device'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'swap_device'
op|'='
name|'self'
op|'.'
name|'default_third_device'
newline|'\n'
name|'fn'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'self'
op|'.'
name|'_create_ephemeral'
op|','
nl|'\n'
name|'fs_label'
op|'='
string|"'ephemeral0'"
op|','
nl|'\n'
name|'os_type'
op|'='
name|'instance'
op|'.'
name|'os_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'fn'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk.local'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
string|'"ephemeral_%s_%s_%s"'
op|'%'
nl|'\n'
op|'('
string|'"0"'
op|','
name|'ephemeral_gb'
op|','
name|'instance'
op|'.'
name|'os_type'
op|')'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'ephemeral_size'
op|'='
name|'ephemeral_gb'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'swap_device'
op|'='
name|'self'
op|'.'
name|'default_second_device'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'eph'
name|'in'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fn'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'self'
op|'.'
name|'_create_ephemeral'
op|','
nl|'\n'
name|'fs_label'
op|'='
string|"'ephemeral%d'"
op|'%'
name|'eph'
op|'['
string|"'num'"
op|']'
op|','
nl|'\n'
name|'os_type'
op|'='
name|'instance'
op|'.'
name|'os_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'fn'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
name|'_get_eph_disk'
op|'('
name|'eph'
op|')'
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
string|'"ephemeral_%s_%s_%s"'
op|'%'
nl|'\n'
op|'('
name|'eph'
op|'['
string|"'num'"
op|']'
op|','
name|'eph'
op|'['
string|"'size'"
op|']'
op|','
name|'instance'
op|'.'
name|'os_type'
op|')'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'ephemeral_size'
op|'='
name|'eph'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'swap_mb'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'swap'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_swap'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'driver'
op|'.'
name|'swap_is_usable'
op|'('
name|'swap'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'swap_mb'
op|'='
name|'swap'
op|'['
string|"'swap_size'"
op|']'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'inst_type'
op|'['
string|"'swap'"
op|']'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'not'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'swap_device'
op|','
name|'block_device_info'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'swap_mb'
op|'='
name|'inst_type'
op|'['
string|"'swap'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'swap_mb'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'self'
op|'.'
name|'_create_swap'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk.swap'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
string|'"swap_%s"'
op|'%'
name|'swap_mb'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'swap_mb'
op|'='
name|'swap_mb'
op|')'
newline|'\n'
nl|'\n'
comment|"# For now, we assume that if we're not using a kernel, we're using a"
nl|'\n'
comment|'# partitioned disk image where the target partition is the first'
nl|'\n'
comment|'# partition'
nl|'\n'
dedent|''
name|'target_partition'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'target_partition'
op|'='
string|'"1"'
newline|'\n'
nl|'\n'
dedent|''
name|'config_drive'
op|','
name|'config_drive_id'
op|'='
name|'self'
op|'.'
name|'_get_config_drive_info'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'any'
op|'('
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|','
name|'config_drive'
op|','
name|'config_drive_id'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'target_partition'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'config_drive_id'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
name|'config_drive_id'
newline|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|','
nl|'\n'
name|'target'
op|'='
name|'basepath'
op|'('
string|"'disk.config'"
op|')'
op|','
nl|'\n'
name|'fname'
op|'='
name|'fname'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'config_drive_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'config_drive'
op|':'
newline|'\n'
indent|'            '
name|'label'
op|'='
string|"'config'"
newline|'\n'
name|'with'
name|'utils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'basepath'
op|'('
string|"'disk.config'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_create_local'
op|'('
name|'basepath'
op|'('
string|"'disk.config'"
op|')'
op|','
number|'64'
op|','
name|'unit'
op|'='
string|"'M'"
op|','
nl|'\n'
name|'fs_format'
op|'='
string|"'msdos'"
op|','
name|'label'
op|'='
name|'label'
op|')'
comment|'# 64MB'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_inject_key'
name|'and'
name|'instance'
op|'['
string|"'key_data'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'str'
op|'('
name|'instance'
op|'['
string|"'key_data'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'net'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'nets'
op|'='
op|'['
op|']'
newline|'\n'
name|'ifc_template'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'injected_network_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'ifc_num'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'have_injected_networks'
op|'='
name|'False'
newline|'\n'
name|'for'
op|'('
name|'network_ref'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'ifc_num'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'network_ref'
op|'['
string|"'injected'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'have_injected_networks'
op|'='
name|'True'
newline|'\n'
name|'address'
op|'='
name|'mapping'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ip'"
op|']'
newline|'\n'
name|'netmask'
op|'='
name|'mapping'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'netmask'"
op|']'
newline|'\n'
name|'address_v6'
op|'='
name|'None'
newline|'\n'
name|'gateway_v6'
op|'='
name|'None'
newline|'\n'
name|'netmask_v6'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'address_v6'
op|'='
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ip'"
op|']'
newline|'\n'
name|'netmask_v6'
op|'='
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'netmask'"
op|']'
newline|'\n'
name|'gateway_v6'
op|'='
name|'mapping'
op|'['
string|"'gateway_v6'"
op|']'
newline|'\n'
dedent|''
name|'net_info'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'eth%d'"
op|'%'
name|'ifc_num'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'netmask'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'mapping'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'mapping'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
string|"' '"
op|'.'
name|'join'
op|'('
name|'mapping'
op|'['
string|"'dns'"
op|']'
op|')'
op|','
nl|'\n'
string|"'address_v6'"
op|':'
name|'address_v6'
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
name|'gateway_v6'
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
name|'netmask_v6'
op|'}'
newline|'\n'
name|'nets'
op|'.'
name|'append'
op|'('
name|'net_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'have_injected_networks'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'str'
op|'('
name|'Template'
op|'('
name|'ifc_template'
op|','
nl|'\n'
name|'searchList'
op|'='
op|'['
op|'{'
string|"'interfaces'"
op|':'
name|'nets'
op|','
nl|'\n'
string|"'use_ipv6'"
op|':'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|'}'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'metadata'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_inject_password'
op|':'
newline|'\n'
indent|'            '
name|'admin_password'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'admin_pass'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'admin_password'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'any'
op|'('
op|'('
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|','
name|'admin_password'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'config_drive'
op|':'
comment|'# Should be True or None by now.'
newline|'\n'
indent|'                '
name|'injection_path'
op|'='
name|'basepath'
op|'('
string|"'disk.config'"
op|')'
newline|'\n'
name|'img_id'
op|'='
string|"'config-drive'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'injection_path'
op|'='
name|'basepath'
op|'('
string|"'disk'"
op|')'
newline|'\n'
name|'img_id'
op|'='
name|'instance'
op|'.'
name|'image_ref'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'injection'
name|'in'
op|'('
string|"'metadata'"
op|','
string|"'key'"
op|','
string|"'net'"
op|','
string|"'admin_password'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'locals'
op|'('
op|')'
op|'['
name|'injection'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Injecting %(injection)s into image'"
nl|'\n'
string|"' %(img_id)s'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'inject_data'
op|'('
name|'injection_path'
op|','
nl|'\n'
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'partition'
op|'='
name|'target_partition'
op|','
nl|'\n'
name|'use_cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# This could be a windows image, or a vmdk format disk'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Ignoring error injecting data into image '"
nl|'\n'
string|"'%(img_id)s (%(e)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'lxc'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'container'
op|'='
name|'disk'
op|'.'
name|'setup_container'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
nl|'\n'
name|'container_dir'
op|'='
name|'container_dir'
op|','
nl|'\n'
name|'use_cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|"'uml'"
op|':'
newline|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'chown'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
string|"'root'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'files_to_inject'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'injected_files'"
op|')'
newline|'\n'
name|'if'
name|'files_to_inject'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_inject_files'
op|'('
name|'instance'
op|','
name|'files_to_inject'
op|','
nl|'\n'
name|'partition'
op|'='
name|'target_partition'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_volume_in_mapping
name|'def'
name|'_volume_in_mapping'
op|'('
name|'mount_device'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_list'
op|'='
op|'['
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'vol'
name|'in'
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|']'
newline|'\n'
name|'swap'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_swap'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'driver'
op|'.'
name|'swap_is_usable'
op|'('
name|'swap'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'block_device_list'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'swap'
op|'['
string|"'device_name'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'block_device_list'
op|'+='
op|'['
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'ephemeral'
op|'['
string|"'device_name'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'ephemeral'
name|'in'
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"block_device_list %s"'
op|')'
op|','
name|'block_device_list'
op|')'
newline|'\n'
name|'return'
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'mount_device'
op|')'
name|'in'
name|'block_device_list'
newline|'\n'
nl|'\n'
DECL|member|_get_config_drive_info
dedent|''
name|'def'
name|'_get_config_drive_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_drive'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'config_drive'"
op|')'
newline|'\n'
name|'config_drive_id'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'config_drive_id'"
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'force_config_drive'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'config_drive_id'
op|':'
newline|'\n'
indent|'                '
name|'config_drive'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'config_drive'
op|','
name|'config_drive_id'
newline|'\n'
nl|'\n'
DECL|member|_has_config_drive
dedent|''
name|'def'
name|'_has_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_drive'
op|','
name|'config_drive_id'
op|'='
name|'self'
op|'.'
name|'_get_config_drive_info'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'any'
op|'('
op|'('
name|'config_drive'
op|','
name|'config_drive_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_guest_config
dedent|''
name|'def'
name|'get_guest_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
name|'rescue'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'devs'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# FIXME(vish): stick this in db'
nl|'\n'
name|'inst_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'guest'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuest'
op|'('
op|')'
newline|'\n'
name|'guest'
op|'.'
name|'virt_type'
op|'='
name|'FLAGS'
op|'.'
name|'libvirt_type'
newline|'\n'
name|'guest'
op|'.'
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'guest'
op|'.'
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'guest'
op|'.'
name|'memory'
op|'='
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'*'
number|'1024'
newline|'\n'
name|'guest'
op|'.'
name|'vcpus'
op|'='
name|'inst_type'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
nl|'\n'
name|'root_device_name'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_root'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'root_device_name'
op|':'
newline|'\n'
indent|'            '
name|'root_device'
op|'='
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'root_device_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(yamahata):'
nl|'\n'
comment|'# for nova.api.ec2.cloud.CloudController.get_metadata()'
nl|'\n'
indent|'            '
name|'root_device'
op|'='
name|'self'
op|'.'
name|'default_root_device'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
nl|'\n'
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'root_device_name'"
op|':'
string|"'/dev/'"
op|'+'
name|'self'
op|'.'
name|'default_root_device'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"lxc"'
op|':'
newline|'\n'
indent|'            '
name|'guest'
op|'.'
name|'os_type'
op|'='
string|'"exe"'
newline|'\n'
name|'guest'
op|'.'
name|'os_init_path'
op|'='
string|'"/sbin/init"'
newline|'\n'
name|'guest'
op|'.'
name|'os_cmdline'
op|'='
string|'"console=ttyS0"'
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"uml"'
op|':'
newline|'\n'
indent|'            '
name|'guest'
op|'.'
name|'os_type'
op|'='
string|'"uml"'
newline|'\n'
name|'guest'
op|'.'
name|'os_kernel'
op|'='
string|'"/usr/bin/linux"'
newline|'\n'
name|'guest'
op|'.'
name|'os_root'
op|'='
name|'root_device_name'
name|'or'
string|'"/dev/ubda"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"xen"'
op|':'
newline|'\n'
indent|'                '
name|'guest'
op|'.'
name|'os_type'
op|'='
string|'"linux"'
newline|'\n'
name|'guest'
op|'.'
name|'os_root'
op|'='
name|'root_device_name'
name|'or'
string|'"/dev/xvda"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'guest'
op|'.'
name|'os_type'
op|'='
string|'"hvm"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'guest'
op|'.'
name|'os_kernel'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"kernel.rescue"'
op|')'
newline|'\n'
name|'guest'
op|'.'
name|'os_initrd'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"ramdisk.rescue"'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'guest'
op|'.'
name|'os_kernel'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"kernel"'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"xen"'
op|':'
newline|'\n'
indent|'                    '
name|'guest'
op|'.'
name|'os_cmdline'
op|'='
string|'"ro"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'guest'
op|'.'
name|'os_cmdline'
op|'='
string|'"root=%s console=ttyS0"'
op|'%'
op|'('
nl|'\n'
name|'root_device_name'
name|'or'
string|'"/dev/vda"'
op|','
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'guest'
op|'.'
name|'os_initrd'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"ramdisk"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'guest'
op|'.'
name|'os_boot_dev'
op|'='
string|'"hd"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'!='
string|'"lxc"'
name|'and'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'!='
string|'"uml"'
op|':'
newline|'\n'
indent|'            '
name|'guest'
op|'.'
name|'acpi'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"lxc"'
op|':'
newline|'\n'
indent|'            '
name|'fs'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestFilesys'
op|'('
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'type'
op|'='
string|'"mount"'
newline|'\n'
name|'fs'
op|'.'
name|'source_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"rootfs"'
op|')'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'fs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|':'
newline|'\n'
indent|'                '
name|'driver_type'
op|'='
string|"'qcow2'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'driver_type'
op|'='
string|"'raw'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_meta'
name|'and'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'iso'"
op|':'
newline|'\n'
indent|'                '
name|'root_device_type'
op|'='
string|"'cdrom'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'root_device_type'
op|'='
string|"'disk'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"uml"'
op|':'
newline|'\n'
indent|'                '
name|'ephemeral_disk_bus'
op|'='
string|'"uml"'
newline|'\n'
dedent|''
name|'elif'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"xen"'
op|':'
newline|'\n'
indent|'                '
name|'ephemeral_disk_bus'
op|'='
string|'"xen"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ephemeral_disk_bus'
op|'='
string|'"virtio"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'diskrescue'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskrescue'
op|'.'
name|'source_type'
op|'='
string|'"file"'
newline|'\n'
name|'diskrescue'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk.rescue"'
op|')'
newline|'\n'
name|'diskrescue'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'diskrescue'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskrescue'
op|'.'
name|'target_dev'
op|'='
name|'self'
op|'.'
name|'default_root_device'
newline|'\n'
name|'diskrescue'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskrescue'
op|')'
newline|'\n'
nl|'\n'
name|'diskos'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskos'
op|'.'
name|'source_type'
op|'='
string|'"file"'
newline|'\n'
name|'diskos'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk"'
op|')'
newline|'\n'
name|'diskos'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'diskos'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskos'
op|'.'
name|'target_dev'
op|'='
name|'self'
op|'.'
name|'default_second_device'
newline|'\n'
name|'diskos'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskos'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ebs_root'
op|'='
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'self'
op|'.'
name|'default_root_device'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'ebs_root'
op|':'
newline|'\n'
indent|'                    '
name|'diskos'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskos'
op|'.'
name|'source_type'
op|'='
string|'"file"'
newline|'\n'
name|'diskos'
op|'.'
name|'source_device'
op|'='
name|'root_device_type'
newline|'\n'
name|'diskos'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'diskos'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskos'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk"'
op|')'
newline|'\n'
name|'diskos'
op|'.'
name|'target_dev'
op|'='
name|'root_device'
newline|'\n'
name|'if'
name|'root_device_type'
op|'=='
string|'"cdrom"'
op|':'
newline|'\n'
indent|'                        '
name|'diskos'
op|'.'
name|'target_bus'
op|'='
string|'"ide"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'diskos'
op|'.'
name|'target_bus'
op|'='
string|'"virtio"'
newline|'\n'
dedent|''
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskos'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemeral_device'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'self'
op|'.'
name|'default_second_device'
op|','
nl|'\n'
name|'block_device_info'
op|')'
name|'or'
nl|'\n'
number|'0'
name|'in'
op|'['
name|'eph'
op|'['
string|"'num'"
op|']'
name|'for'
name|'eph'
name|'in'
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'instance'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'ephemeral_device'
op|'='
name|'self'
op|'.'
name|'default_second_device'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ephemeral_device'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'disklocal'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'disklocal'
op|'.'
name|'source_type'
op|'='
string|'"file"'
newline|'\n'
name|'disklocal'
op|'.'
name|'source_device'
op|'='
name|'root_device_type'
newline|'\n'
name|'disklocal'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'disklocal'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'disklocal'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk.local"'
op|')'
newline|'\n'
name|'disklocal'
op|'.'
name|'target_dev'
op|'='
name|'ephemeral_device'
newline|'\n'
name|'disklocal'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'disklocal'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ephemeral_device'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'swap_device'
op|'='
name|'self'
op|'.'
name|'default_third_device'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
nl|'\n'
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'default_ephemeral_device'"
op|':'
nl|'\n'
string|"'/dev/'"
op|'+'
name|'self'
op|'.'
name|'default_second_device'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'swap_device'
op|'='
name|'self'
op|'.'
name|'default_second_device'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'eph'
name|'in'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'diskeph'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskeph'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'diskeph'
op|'.'
name|'source_device'
op|'='
name|'root_device_type'
newline|'\n'
name|'diskeph'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'diskeph'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskeph'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'_get_eph_disk'
op|'('
name|'eph'
op|')'
op|')'
newline|'\n'
name|'diskeph'
op|'.'
name|'target_dev'
op|'='
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
nl|'\n'
name|'eph'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'diskeph'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskeph'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'swap'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_swap'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'driver'
op|'.'
name|'swap_is_usable'
op|'('
name|'swap'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'diskswap'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskswap'
op|'.'
name|'disk_type'
op|'='
string|'"file"'
newline|'\n'
name|'diskswap'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'diskswap'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskswap'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk.swap"'
op|')'
newline|'\n'
name|'diskswap'
op|'.'
name|'target_dev'
op|'='
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
nl|'\n'
name|'swap'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'diskswap'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskswap'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'inst_type'
op|'['
string|"'swap'"
op|']'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'not'
name|'self'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'swap_device'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'diskswap'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskswap'
op|'.'
name|'disk_type'
op|'='
string|'"file"'
newline|'\n'
name|'diskswap'
op|'.'
name|'driver_format'
op|'='
name|'driver_type'
newline|'\n'
name|'diskswap'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskswap'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk.swap"'
op|')'
newline|'\n'
name|'diskswap'
op|'.'
name|'target_dev'
op|'='
name|'swap_device'
newline|'\n'
name|'diskswap'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskswap'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
nl|'\n'
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'default_swap_device'"
op|':'
string|"'/dev/'"
op|'+'
name|'swap_device'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'                    '
name|'connection_info'
op|'='
name|'vol'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'mountpoint'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
newline|'\n'
name|'cfg'
op|'='
name|'self'
op|'.'
name|'volume_driver_method'
op|'('
string|"'connect_volume'"
op|','
nl|'\n'
name|'connection_info'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'cfg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_has_config_drive'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'diskconfig'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'diskconfig'
op|'.'
name|'source_type'
op|'='
string|'"file"'
newline|'\n'
name|'diskconfig'
op|'.'
name|'driver_format'
op|'='
string|'"raw"'
newline|'\n'
name|'diskconfig'
op|'.'
name|'driver_cache'
op|'='
name|'self'
op|'.'
name|'disk_cachemode'
newline|'\n'
name|'diskconfig'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"disk.config"'
op|')'
newline|'\n'
name|'diskconfig'
op|'.'
name|'target_dev'
op|'='
name|'self'
op|'.'
name|'default_last_device'
newline|'\n'
name|'diskconfig'
op|'.'
name|'target_bus'
op|'='
name|'ephemeral_disk_bus'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'diskconfig'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'cfg'
op|'='
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'cfg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"qemu"'
name|'or'
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'=='
string|'"kvm"'
op|':'
newline|'\n'
comment|"# The QEMU 'pty' driver throws away any data if no"
nl|'\n'
comment|"# client app is connected. Thus we can't get away"
nl|'\n'
comment|'# with a single type=pty console. Instead we have'
nl|'\n'
comment|'# to configure two separate consoles.'
nl|'\n'
indent|'            '
name|'consolelog'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestSerial'
op|'('
op|')'
newline|'\n'
name|'consolelog'
op|'.'
name|'type'
op|'='
string|'"file"'
newline|'\n'
name|'consolelog'
op|'.'
name|'source_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|'"console.log"'
op|')'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'consolelog'
op|')'
newline|'\n'
nl|'\n'
name|'consolepty'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestSerial'
op|'('
op|')'
newline|'\n'
name|'consolepty'
op|'.'
name|'type'
op|'='
string|'"pty"'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'consolepty'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'consolepty'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestConsole'
op|'('
op|')'
newline|'\n'
name|'consolepty'
op|'.'
name|'type'
op|'='
string|'"pty"'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'consolepty'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'vnc_enabled'
name|'and'
name|'FLAGS'
op|'.'
name|'libvirt_type'
name|'not'
name|'in'
op|'('
string|"'lxc'"
op|','
string|"'uml'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'use_usb_tablet'
op|':'
newline|'\n'
indent|'                '
name|'tablet'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestInput'
op|'('
op|')'
newline|'\n'
name|'tablet'
op|'.'
name|'type'
op|'='
string|'"tablet"'
newline|'\n'
name|'tablet'
op|'.'
name|'bus'
op|'='
string|'"usb"'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'tablet'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'graphics'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigGuestGraphics'
op|'('
op|')'
newline|'\n'
name|'graphics'
op|'.'
name|'type'
op|'='
string|'"vnc"'
newline|'\n'
name|'graphics'
op|'.'
name|'keymap'
op|'='
name|'FLAGS'
op|'.'
name|'vnc_keymap'
newline|'\n'
name|'graphics'
op|'.'
name|'listen'
op|'='
name|'FLAGS'
op|'.'
name|'vncserver_listen'
newline|'\n'
name|'guest'
op|'.'
name|'add_device'
op|'('
name|'graphics'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'guest'
newline|'\n'
nl|'\n'
DECL|member|to_xml
dedent|''
name|'def'
name|'to_xml'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Starting toXML method'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'conf'
op|'='
name|'self'
op|'.'
name|'get_guest_config'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue'
op|','
name|'block_device_info'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Finished toXML method'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|_lookup_by_name
dedent|''
name|'def'
name|'_lookup_by_name'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve libvirt domain object given an instance name.\n\n        All libvirt error handling should be handled in this method and\n        relevant nova exceptions should be raised in response.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'error_code'
op|'='
name|'ex'
op|'.'
name|'get_error_code'
op|'('
op|')'
newline|'\n'
name|'if'
name|'error_code'
op|'=='
name|'libvirt'
op|'.'
name|'VIR_ERR_NO_DOMAIN'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"Error from libvirt while looking up %(instance_name)s: "'
nl|'\n'
string|'"[Error Code %(error_code)s] %(ex)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve information from libvirt for a specific instance name.\n\n        If a libvirt error is encountered during lookup, we might raise a\n        NotFound exception or Error exception depending on how severe the\n        libvirt error is.\n\n        """'
newline|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
op|'('
name|'state'
op|','
name|'max_mem'
op|','
name|'mem'
op|','
name|'num_cpu'
op|','
name|'cpu_time'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
name|'cpu_time'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_create_new_domain
dedent|''
name|'def'
name|'_create_new_domain'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'persistent'
op|'='
name|'True'
op|','
name|'launch_flags'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(justinsb): libvirt has two types of domain:'
nl|'\n'
comment|'# * a transient domain disappears when the guest is shutdown'
nl|'\n'
comment|'# or the host is rebooted.'
nl|'\n'
comment|'# * a permanent domain is not automatically deleted'
nl|'\n'
comment|'# NOTE(justinsb): Even for ephemeral instances, transient seems risky'
nl|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'persistent'
op|':'
newline|'\n'
comment|'# To create a persistent domain, first define it, then launch it.'
nl|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'defineXML'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'domain'
op|'.'
name|'createWithFlags'
op|'('
name|'launch_flags'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# createXML call creates a transient domain'
nl|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'xml'
op|','
name|'launch_flags'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'domain'
newline|'\n'
nl|'\n'
DECL|member|get_all_block_devices
dedent|''
name|'def'
name|'get_all_block_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return all block devices in use on this node.\n        """'
newline|'\n'
name|'devices'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'dom_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'dom_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk'"
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'node'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|'!='
string|"'block'"
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'getchildren'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'tag'
op|'=='
string|"'source'"
op|':'
newline|'\n'
indent|'                        '
name|'devices'
op|'.'
name|'append'
op|'('
name|'child'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'devices'
newline|'\n'
nl|'\n'
DECL|member|get_disks
dedent|''
name|'def'
name|'get_disks'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name.\n\n        Returns a list of all block devices for this domain.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'disks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'            '
name|'devdst'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'children'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'child'
op|'.'
name|'name'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                    '
name|'devdst'
op|'='
name|'child'
op|'.'
name|'prop'
op|'('
string|"'dev'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'devdst'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'disks'
op|'.'
name|'append'
op|'('
name|'devdst'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'disks'
newline|'\n'
nl|'\n'
DECL|member|get_interfaces
dedent|''
name|'def'
name|'get_interfaces'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name.\n\n        Returns a list of all network interfaces for this instance.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'domain'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'interfaces'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'node'
name|'in'
name|'ret'
op|':'
newline|'\n'
indent|'            '
name|'devdst'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'list'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'child'
op|'.'
name|'tag'
op|'=='
string|"'target'"
op|':'
newline|'\n'
indent|'                    '
name|'devdst'
op|'='
name|'child'
op|'.'
name|'attrib'
op|'['
string|"'dev'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'devdst'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'interfaces'
op|'.'
name|'append'
op|'('
name|'devdst'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'interfaces'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_vcpu_total
name|'def'
name|'get_vcpu_total'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get vcpu number of physical computer.\n\n        :returns: the number of cpu core.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# On certain platforms, this will raise a NotImplementedError.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'multiprocessing'
op|'.'
name|'cpu_count'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Cannot get the number of cpu, because this "'
nl|'\n'
string|'"function is not implemented for this platform. "'
nl|'\n'
string|'"This error can be safely ignored for now."'
op|')'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_memory_mb_total
name|'def'
name|'get_memory_mb_total'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the total memory size(MB) of physical computer.\n\n        :returns: the total amount of memory(MB).\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'['
string|"'LINUX2'"
op|','
string|"'LINUX3'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'meminfo'
op|'='
name|'open'
op|'('
string|"'/proc/meminfo'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'idx'
op|'='
name|'meminfo'
op|'.'
name|'index'
op|'('
string|"'MemTotal:'"
op|')'
newline|'\n'
comment|'# transforming kb to mb.'
nl|'\n'
name|'return'
name|'int'
op|'('
name|'meminfo'
op|'['
name|'idx'
op|'+'
number|'1'
op|']'
op|')'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_local_gb_total
name|'def'
name|'get_local_gb_total'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the total hdd size(GB) of physical computer.\n\n        :returns:\n            The total amount of HDD(GB).\n            Note that this value shows a partition where\n            NOVA-INST-DIR/instances mounts.\n\n        """'
newline|'\n'
nl|'\n'
name|'stats'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_fs_info'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
name|'return'
name|'stats'
op|'['
string|"'total'"
op|']'
op|'/'
op|'('
number|'1024'
op|'**'
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_used
dedent|''
name|'def'
name|'get_vcpu_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Get vcpu usage number of physical computer.\n\n        :returns: The total number of vcpu that currently used.\n\n        """'
newline|'\n'
nl|'\n'
name|'total'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'dom_id'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'dom_id'
op|')'
newline|'\n'
name|'vcpus'
op|'='
name|'dom'
op|'.'
name|'vcpus'
op|'('
op|')'
newline|'\n'
name|'if'
name|'vcpus'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# dom.vcpus is not implemented for lxc, but returning 0 for'
nl|'\n'
comment|'# a used count is hardly useful for something measuring usage'
nl|'\n'
indent|'                '
name|'total'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'total'
op|'+='
name|'len'
op|'('
name|'vcpus'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'total'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_used
dedent|''
name|'def'
name|'get_memory_mb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the free memory size(MB) of physical computer.\n\n        :returns: the total usage of memory(MB).\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'['
string|"'LINUX2'"
op|','
string|"'LINUX3'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'m'
op|'='
name|'open'
op|'('
string|"'/proc/meminfo'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'idx1'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'MemFree:'"
op|')'
newline|'\n'
name|'idx2'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'Buffers:'"
op|')'
newline|'\n'
name|'idx3'
op|'='
name|'m'
op|'.'
name|'index'
op|'('
string|"'Cached:'"
op|')'
newline|'\n'
name|'avail'
op|'='
op|'('
name|'int'
op|'('
name|'m'
op|'['
name|'idx1'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
name|'int'
op|'('
name|'m'
op|'['
name|'idx2'
op|'+'
number|'1'
op|']'
op|')'
op|'+'
name|'int'
op|'('
name|'m'
op|'['
name|'idx3'
op|'+'
number|'1'
op|']'
op|')'
op|')'
op|'/'
number|'1024'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|'-'
name|'avail'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_used
dedent|''
name|'def'
name|'get_local_gb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the free hdd size(GB) of physical computer.\n\n        :returns:\n           The total usage of HDD(GB).\n           Note that this value shows a partition where\n           NOVA-INST-DIR/instances mounts.\n\n        """'
newline|'\n'
nl|'\n'
name|'stats'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_fs_info'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
name|'return'
name|'stats'
op|'['
string|"'used'"
op|']'
op|'/'
op|'('
number|'1024'
op|'**'
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_type
dedent|''
name|'def'
name|'get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get hypervisor type.\n\n        :returns: hypervisor type (ex. qemu)\n\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getType'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_version
dedent|''
name|'def'
name|'get_hypervisor_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get hypervisor version.\n\n        :returns: hypervisor version (ex. 12003)\n\n        """'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): getVersion moved between libvirt versions'
nl|'\n'
comment|'# Trying to do be compatible with older versions is a lost cause'
nl|'\n'
comment|'# But ... we can at least give the user a nice message'
nl|'\n'
name|'method'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_conn'
op|','
string|"'getVersion'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"libvirt version is too old"'
nl|'\n'
string|'" (does not support getVersion)"'
op|')'
op|')'
newline|'\n'
comment|'# NOTE(justinsb): If we wanted to get the version, we could:'
nl|'\n'
comment|"# method = getattr(libvirt, 'getVersion', None)"
nl|'\n'
comment|'# NOTE(justinsb): This would then rely on a proper version check'
nl|'\n'
nl|'\n'
dedent|''
name|'return'
name|'method'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_cpu_info
dedent|''
name|'def'
name|'get_cpu_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get cpuinfo information.\n\n        Obtains cpu feature from virConnect.getCapabilities,\n        and returns as a json string.\n\n        :return: see above description\n\n        """'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'xml'
op|'.'
name|'findall'
op|'('
string|"'.//host/cpu'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'nodes'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"\'<cpu>\' must be 1, but %d\\n"'
op|')'
op|'%'
name|'len'
op|'('
name|'nodes'
op|')'
newline|'\n'
name|'reason'
op|'+='
name|'xml'
op|'.'
name|'serialize'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cpu_info'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'arch_nodes'
op|'='
name|'xml'
op|'.'
name|'findall'
op|'('
string|"'.//host/cpu/arch'"
op|')'
newline|'\n'
name|'if'
name|'arch_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'arch'"
op|']'
op|'='
name|'arch_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'text'
newline|'\n'
nl|'\n'
dedent|''
name|'model_nodes'
op|'='
name|'xml'
op|'.'
name|'findall'
op|'('
string|"'.//host/cpu/model'"
op|')'
newline|'\n'
name|'if'
name|'model_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'model'"
op|']'
op|'='
name|'model_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'text'
newline|'\n'
nl|'\n'
dedent|''
name|'vendor_nodes'
op|'='
name|'xml'
op|'.'
name|'findall'
op|'('
string|"'.//host/cpu/vendor'"
op|')'
newline|'\n'
name|'if'
name|'vendor_nodes'
op|':'
newline|'\n'
indent|'            '
name|'cpu_info'
op|'['
string|"'vendor'"
op|']'
op|'='
name|'vendor_nodes'
op|'['
number|'0'
op|']'
op|'.'
name|'text'
newline|'\n'
nl|'\n'
dedent|''
name|'topology_nodes'
op|'='
name|'xml'
op|'.'
name|'findall'
op|'('
string|"'.//host/cpu/topology'"
op|')'
newline|'\n'
name|'topology'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'topology_nodes'
op|':'
newline|'\n'
indent|'            '
name|'topology_node'
op|'='
name|'topology_nodes'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'keys'
op|'='
op|'['
string|"'cores'"
op|','
string|"'sockets'"
op|','
string|"'threads'"
op|']'
newline|'\n'
name|'tkeys'
op|'='
name|'topology_node'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'if'
name|'set'
op|'('
name|'tkeys'
op|')'
op|'!='
name|'set'
op|'('
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ks'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"topology (%(topology)s) must have %(ks)s"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'topology'
op|'['
name|'key'
op|']'
op|'='
name|'topology_node'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'feature_nodes'
op|'='
name|'xml'
op|'.'
name|'findall'
op|'('
string|"'.//host/cpu/feature'"
op|')'
newline|'\n'
name|'features'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'for'
name|'nodes'
name|'in'
name|'feature_nodes'
op|':'
newline|'\n'
indent|'            '
name|'features'
op|'.'
name|'append'
op|'('
name|'nodes'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cpu_info'
op|'['
string|"'topology'"
op|']'
op|'='
name|'topology'
newline|'\n'
name|'cpu_info'
op|'['
string|"'features'"
op|']'
op|'='
name|'features'
newline|'\n'
name|'return'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|block_stats
dedent|''
name|'def'
name|'block_stats'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'disk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'domain'
op|'.'
name|'blockStats'
op|'('
name|'disk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|interface_stats
dedent|''
name|'def'
name|'interface_stats'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Note that this function takes an instance name.\n        """'
newline|'\n'
name|'domain'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'domain'
op|'.'
name|'interfaceStats'
op|'('
name|'interface'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
comment|'#TODO(mdragon): console proxy should be implemented for libvirt,'
nl|'\n'
comment|'#               in case someone wants to use it with kvm or'
nl|'\n'
comment|'#               such. For now return fake data.'
nl|'\n'
indent|'        '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'username'"
op|':'
string|"'fakeuser'"
op|','
nl|'\n'
string|"'password'"
op|':'
string|"'fakepassword'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_available_resource
dedent|''
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates compute manager resource info on ComputeNode table.\n\n        This method is called as an periodic tasks and is used only\n        in live migration currently.\n\n        :param ctxt: security context\n        :param host: hostname that compute manager is currently running\n\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'service_ref'
op|'='
name|'db'
op|'.'
name|'service_get_all_compute_by_host'
op|'('
name|'ctxt'
op|','
name|'host'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ComputeServiceUnavailable'
op|'('
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# Updating host information'
nl|'\n'
dedent|''
name|'dic'
op|'='
op|'{'
string|"'vcpus'"
op|':'
name|'self'
op|'.'
name|'get_vcpu_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'self'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'self'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
name|'self'
op|'.'
name|'get_vcpu_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'self'
op|'.'
name|'get_memory_mb_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'self'
op|'.'
name|'get_local_gb_used'
op|'('
op|')'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'self'
op|'.'
name|'get_hypervisor_type'
op|'('
op|')'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'self'
op|'.'
name|'get_hypervisor_version'
op|'('
op|')'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
name|'self'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
op|','
nl|'\n'
string|"'service_id'"
op|':'
name|'service_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'disk_available_least'"
op|':'
name|'self'
op|'.'
name|'get_disk_available_least'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'compute_node_ref'
op|'='
name|'service_ref'
op|'['
string|"'compute_node'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'compute_node_ref'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record created for %s '"
op|')'
op|'%'
name|'host'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_create'
op|'('
name|'ctxt'
op|','
name|'dic'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record updated for %s '"
op|')'
op|'%'
name|'host'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_update'
op|'('
name|'ctxt'
op|','
name|'compute_node_ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'dic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compare_cpu
dedent|''
dedent|''
name|'def'
name|'compare_cpu'
op|'('
name|'self'
op|','
name|'cpu_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks the host cpu is compatible to a cpu given by xml.\n\n        "xml" must be a part of libvirt.openReadonly().getCapabilities().\n        return values follows by virCPUCompareResult.\n        if 0 > return value, do live migration.\n        \'http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult\'\n\n        :param cpu_info: json string that shows cpu feature(see get_cpu_info())\n        :returns:\n            None. if given cpu info is not compatible to this server,\n            raise exception.\n\n        """'
newline|'\n'
nl|'\n'
name|'info'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance launched has CPU info:\\n%s'"
op|')'
op|'%'
name|'cpu_info'
op|')'
newline|'\n'
name|'cpu'
op|'='
name|'config'
op|'.'
name|'LibvirtConfigCPU'
op|'('
op|')'
newline|'\n'
name|'cpu'
op|'.'
name|'arch'
op|'='
name|'info'
op|'['
string|"'arch'"
op|']'
newline|'\n'
name|'cpu'
op|'.'
name|'model'
op|'='
name|'info'
op|'['
string|"'model'"
op|']'
newline|'\n'
name|'cpu'
op|'.'
name|'vendor'
op|'='
name|'info'
op|'['
string|"'vendor'"
op|']'
newline|'\n'
name|'cpu'
op|'.'
name|'sockets'
op|'='
name|'info'
op|'['
string|"'topology'"
op|']'
op|'['
string|"'sockets'"
op|']'
newline|'\n'
name|'cpu'
op|'.'
name|'cores'
op|'='
name|'info'
op|'['
string|"'topology'"
op|']'
op|'['
string|"'cores'"
op|']'
newline|'\n'
name|'cpu'
op|'.'
name|'threads'
op|'='
name|'info'
op|'['
string|"'topology'"
op|']'
op|'['
string|"'threads'"
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'info'
op|'['
string|"'features'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'cpu'
op|'.'
name|'add_feature'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'u'
op|'='
string|'"http://libvirt.org/html/libvirt-libvirt.html#virCPUCompareResult"'
newline|'\n'
name|'m'
op|'='
name|'_'
op|'('
string|'"CPU doesn\'t have compatibility.\\n\\n%(ret)s\\n\\nRefer to %(u)s"'
op|')'
newline|'\n'
comment|'# unknown character exists in xml, then libvirt complains'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'('
name|'cpu'
op|'.'
name|'to_xml'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'e'
op|'.'
name|'message'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'m'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ret'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
name|'m'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
DECL|member|ensure_filtering_rules_for_instance
dedent|''
name|'def'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|','
nl|'\n'
name|'time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Setting up filtering rules and waiting for its completion.\n\n        To migrate an instance, filtering rules to hypervisors\n        and firewalls are inevitable on destination host.\n        ( Waiting only for filterling rules to hypervisor,\n        since filtering rules to firewall rules can be set faster).\n\n        Concretely, the below method must be called.\n        - setup_basic_filtering (for nova-basic, etc.)\n        - prepare_instance_filter(for nova-instance-instance-xxx, etc.)\n\n        to_xml may have to be called since it defines PROJNET, PROJMASK.\n        but libvirt migrates those value through migrateToURI(),\n        so , no need to be called.\n\n        Don\'t use thread for this method since migration should\n        not be started when setting-up filtering rules operations\n        are not completed.\n\n        :params instance_ref: nova.db.sqlalchemy.models.Instance object\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'time'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'='
name|'greenthread'
newline|'\n'
nl|'\n'
comment|'# If any instances never launch at destination host,'
nl|'\n'
comment|'# basic-filtering must be set here.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
comment|'# setting up nova-instance-instance-xx mainly.'
nl|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait for completion'
nl|'\n'
name|'timeout_count'
op|'='
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_retry_count'
op|')'
newline|'\n'
name|'while'
name|'timeout_count'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'instance_filter_exists'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'timeout_count'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'timeout_count'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Timeout migrating for %s. nwfilter not found.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|'%'
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawning live_migration operation for distributing high-load.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params dest: destination host\n        :params block_migration: destination host\n        :params post_method:\n            post operation method.\n            expected nova.compute.manager.post_live_migration.\n        :params recover_method:\n            recovery method when any exception occurs.\n            expected nova.compute.manager.recover_live_migration.\n        :params block_migration: if true, do block migration.\n\n        """'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'_live_migration'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_live_migration
dedent|''
name|'def'
name|'_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
name|'post_method'
op|','
nl|'\n'
name|'recover_method'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do live migration.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params dest: destination host\n        :params post_method:\n            post operation method.\n            expected nova.compute.manager.post_live_migration.\n        :params recover_method:\n            recovery method when any exception occurs.\n            expected nova.compute.manager.recover_live_migration.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# Do live migration.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'flaglist'
op|'='
name|'FLAGS'
op|'.'
name|'block_migration_flag'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'flaglist'
op|'='
name|'FLAGS'
op|'.'
name|'live_migration_flag'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
dedent|''
name|'flagvals'
op|'='
op|'['
name|'getattr'
op|'('
name|'libvirt'
op|','
name|'x'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'flaglist'
op|']'
newline|'\n'
name|'logical_sum'
op|'='
name|'reduce'
op|'('
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'x'
op|'|'
name|'y'
op|','
name|'flagvals'
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
nl|'\n'
name|'logical_sum'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'recover_method'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
comment|'# Waiting for completion of live_migration.'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|wait_for_live_migration
name|'def'
name|'wait_for_live_migration'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""waiting for live migration completion"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance_ref'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'post_method'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'wait_for_live_migration'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_live_migration
dedent|''
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparation live migration.\n\n        :params block_device_info:\n            It must be the result of _get_instance_volume_bdms()\n            at compute manager.\n        """'
newline|'\n'
nl|'\n'
comment|'# Establishing connection to volume server.'
nl|'\n'
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'='
name|'vol'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'mountpoint'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'volume_driver_method'
op|'('
string|"'connect_volume'"
op|','
nl|'\n'
name|'connection_info'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_block_migration
dedent|''
dedent|''
name|'def'
name|'pre_block_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'disk_info_json'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparation block migration.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :params disk_info_json:\n            json strings specified in get_instance_disk_info\n\n        """'
newline|'\n'
name|'disk_info'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'disk_info_json'
op|')'
newline|'\n'
nl|'\n'
comment|'# make instance directory'
nl|'\n'
name|'instance_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'instance_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'DestinationDiskExists'
op|'('
name|'path'
op|'='
name|'instance_dir'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'instance_dir'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'info'
name|'in'
name|'disk_info'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
comment|'# Get image type and create empty disk image, and'
nl|'\n'
comment|'# create backing file in case of qcow2.'
nl|'\n'
name|'instance_disk'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_dir'
op|','
name|'base'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'info'
op|'['
string|"'backing_file'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'libvirt_utils'
op|'.'
name|'create_image'
op|'('
name|'info'
op|'['
string|"'type'"
op|']'
op|','
name|'instance_disk'
op|','
nl|'\n'
name|'info'
op|'['
string|"'disk_size'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Creating backing file follows same way as spawning instances.'
nl|'\n'
indent|'                '
name|'cache_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'info'
op|'['
string|"'backing_file'"
op|']'
op|')'
newline|'\n'
comment|'# Remove any size tags which the cache manages'
nl|'\n'
name|'cache_name'
op|'='
name|'cache_name'
op|'.'
name|'split'
op|'('
string|"'_'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cache_image'
op|'('
name|'fn'
op|'='
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|','
nl|'\n'
name|'context'
op|'='
name|'ctxt'
op|','
nl|'\n'
name|'target'
op|'='
name|'instance_disk'
op|','
nl|'\n'
name|'fname'
op|'='
name|'cache_name'
op|','
nl|'\n'
name|'cow'
op|'='
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'instance_ref'
op|'['
string|"'image_ref'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance_ref'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance_ref'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'size'
op|'='
name|'info'
op|'['
string|"'disk_size'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# if image has kernel and ramdisk, just download'
nl|'\n'
comment|'# following normal way.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'instance_ref'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_dir'
op|','
string|"'kernel'"
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_dir'
op|','
string|"'ramdisk'"
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration_at_destination
dedent|''
dedent|''
dedent|''
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operation of live migration at destination host.\n\n        :param ctxt: security context\n        :param instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :param network_info: instance network infomation\n        :param block_migration: if true, post operation of block_migraiton.\n        """'
newline|'\n'
comment|'# Define migrated instance, otherwise, suspend/destroy does not work.'
nl|'\n'
name|'dom_list'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDefinedDomains'
op|'('
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'.'
name|'name'
name|'not'
name|'in'
name|'dom_list'
op|':'
newline|'\n'
indent|'            '
name|'instance_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'xml_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_dir'
op|','
string|"'libvirt.xml'"
op|')'
newline|'\n'
comment|'# In case of block migration, destination does not have'
nl|'\n'
comment|'# libvirt.xml'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'xml_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_dir'
op|','
string|"'libvirt.xml'"
op|')'
op|','
string|"'w+'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
comment|'# libvirt.xml should be made by to_xml(), but libvirt'
nl|'\n'
comment|'# does not accept to_xml() result, since uuid is not'
nl|'\n'
comment|'# included in to_xml() result.'
nl|'\n'
dedent|''
name|'dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'defineXML'
op|'('
name|'dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_disk_info
dedent|''
dedent|''
name|'def'
name|'get_instance_disk_info'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparation block migration.\n\n        :params ctxt: security context\n        :params instance_ref:\n            nova.db.sqlalchemy.models.Instance object\n            instance object that is migrated.\n        :return:\n            json strings with below format::\n\n                "[{\'path\':\'disk\', \'type\':\'raw\',\n                  \'virt_disk_size\':\'10737418240\',\n                  \'backing_file\':\'backing_file\',\n                  \'disk_size\':\'83886080\'},...]"\n\n        """'
newline|'\n'
name|'disk_info'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_lookup_by_name'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'virt_dom'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'disk_nodes'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'.//devices/disk'"
op|')'
newline|'\n'
name|'path_nodes'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'.//devices/disk/source'"
op|')'
newline|'\n'
name|'driver_nodes'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'.//devices/disk/driver'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'cnt'
op|','
name|'path_node'
name|'in'
name|'enumerate'
op|'('
name|'path_nodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'disk_type'
op|'='
name|'disk_nodes'
op|'['
name|'cnt'
op|']'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
newline|'\n'
name|'path'
op|'='
name|'path_node'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_type'
op|'!='
string|"'file'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'skipping %(path)s since it looks like volume'"
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# get the real disk size or'
nl|'\n'
comment|'# raise a localized error if image is unavailable'
nl|'\n'
dedent|''
name|'dk_size'
op|'='
name|'int'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'disk_type'
op|'='
name|'driver_nodes'
op|'['
name|'cnt'
op|']'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
newline|'\n'
name|'if'
name|'disk_type'
op|'=='
string|'"qcow2"'
op|':'
newline|'\n'
indent|'                '
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'info'"
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
comment|'# virtual size:'
nl|'\n'
name|'size'
op|'='
op|'['
name|'i'
op|'.'
name|'split'
op|'('
string|"'('"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
name|'for'
name|'i'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
nl|'\n'
name|'if'
name|'i'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'find'
op|'('
string|"'virtual size'"
op|')'
op|'>='
number|'0'
op|']'
newline|'\n'
name|'virt_size'
op|'='
name|'int'
op|'('
name|'size'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# backing file:(actual path:)'
nl|'\n'
name|'backing_file'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_disk_backing_file'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'backing_file'
op|'='
string|'""'
newline|'\n'
name|'virt_size'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'disk_info'
op|'.'
name|'append'
op|'('
op|'{'
string|"'type'"
op|':'
name|'disk_type'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'path'
op|','
nl|'\n'
string|"'virt_disk_size'"
op|':'
name|'virt_size'
op|','
nl|'\n'
string|"'backing_file'"
op|':'
name|'backing_file'
op|','
nl|'\n'
string|"'disk_size'"
op|':'
name|'dk_size'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_disk_available_least
dedent|''
name|'def'
name|'get_disk_available_least'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return disk available least size.\n\n        The size of available disk, when block_migration command given\n        disk_over_commit param is FALSE.\n\n        The size that deducted real nstance disk size from the total size\n        of the virtual disk of all instances.\n\n        """'
newline|'\n'
comment|'# available size of the disk'
nl|'\n'
name|'dk_sz_gb'
op|'='
name|'self'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'get_local_gb_used'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Disk size that all instance uses : virtual_size - disk_size'
nl|'\n'
name|'instances_name'
op|'='
name|'self'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'instances_sz'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'i_name'
name|'in'
name|'instances_name'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'disk_infos'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'self'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'i_name'
op|')'
op|')'
newline|'\n'
name|'for'
name|'info'
name|'in'
name|'disk_infos'
op|':'
newline|'\n'
indent|'                    '
name|'i_vt_sz'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'virt_disk_size'"
op|']'
op|')'
newline|'\n'
name|'i_dk_sz'
op|'='
name|'int'
op|'('
name|'info'
op|'['
string|"'disk_size'"
op|']'
op|')'
newline|'\n'
name|'instances_sz'
op|'+='
name|'i_vt_sz'
op|'-'
name|'i_dk_sz'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Getting disk size of %(i_name)s: %(e)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# Instance was deleted during the check so ignore it'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Disk available least size'
nl|'\n'
dedent|''
dedent|''
name|'available_least_size'
op|'='
name|'dk_sz_gb'
op|'*'
op|'('
number|'1024'
op|'**'
number|'3'
op|')'
op|'-'
name|'instances_sz'
newline|'\n'
name|'return'
op|'('
name|'available_least_size'
op|'/'
number|'1024'
op|'/'
number|'1024'
op|'/'
number|'1024'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See comments of same method in firewall_driver."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_host_status
dedent|''
name|'def'
name|'update_host_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve status info from libvirt.\n\n        Query libvirt to get the state of the compute node, such\n        as memory and disk usage.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'host_state'
op|'.'
name|'update_status'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_host_stats
dedent|''
name|'def'
name|'get_host_stats'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the current state of the host.\n\n        If \'refresh\' is True, run update the stats first."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'host_state'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'refresh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_maintenance_mode
dedent|''
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|manage_image_cache
dedent|''
name|'def'
name|'manage_image_cache'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Manage the local cache of images."""'
newline|'\n'
name|'self'
op|'.'
name|'image_cache_manager'
op|'.'
name|'verify_base_images'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|migrate_disk_and_power_off
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting migrate_disk_and_power_off"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'disk_info_text'
op|'='
name|'self'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'disk_info'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'disk_info_text'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'cleanup'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# copy disks to destination'
nl|'\n'
comment|'# if disk type is qcow2, convert to raw then send to dest.'
nl|'\n'
comment|'# rename instance dir to +_resize at first for using'
nl|'\n'
comment|'# shared storage for instance dir (eg. NFS).'
nl|'\n'
name|'same_host'
op|'='
op|'('
name|'dest'
op|'=='
name|'self'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
op|')'
newline|'\n'
name|'inst_base'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'inst_base_resize'
op|'='
name|'inst_base'
op|'+'
string|'"_resize"'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mv'"
op|','
name|'inst_base'
op|','
name|'inst_base_resize'
op|')'
newline|'\n'
name|'if'
name|'same_host'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'inst_base'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ssh'"
op|','
name|'dest'
op|','
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'inst_base'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'info'
name|'in'
name|'disk_info'
op|':'
newline|'\n'
comment|"# assume inst_base == dirname(info['path'])"
nl|'\n'
indent|'                '
name|'to_path'
op|'='
string|'"%s:%s"'
op|'%'
op|'('
name|'dest'
op|','
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
name|'fname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
name|'from_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'inst_base_resize'
op|','
name|'fname'
op|')'
newline|'\n'
name|'if'
name|'info'
op|'['
string|"'type'"
op|']'
op|'=='
string|"'qcow2'"
op|':'
newline|'\n'
indent|'                    '
name|'tmp_path'
op|'='
name|'from_path'
op|'+'
string|'"_rbase"'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'convert'"
op|','
string|"'-f'"
op|','
string|"'qcow2'"
op|','
nl|'\n'
string|"'-O'"
op|','
string|"'raw'"
op|','
name|'from_path'
op|','
name|'tmp_path'
op|')'
newline|'\n'
name|'if'
name|'same_host'
op|':'
newline|'\n'
indent|'                        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mv'"
op|','
name|'tmp_path'
op|','
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'scp'"
op|','
name|'tmp_path'
op|','
name|'to_path'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'rm'"
op|','
string|"'-f'"
op|','
name|'tmp_path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
comment|'# raw'
newline|'\n'
indent|'                    '
name|'if'
name|'same_host'
op|':'
newline|'\n'
indent|'                        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'cp'"
op|','
name|'from_path'
op|','
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'scp'"
op|','
name|'from_path'
op|','
name|'to_path'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'inst_base_resize'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'rm'"
op|','
string|"'-rf'"
op|','
name|'inst_base'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mv'"
op|','
name|'inst_base_resize'
op|','
name|'inst_base'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'ssh'"
op|','
name|'dest'
op|','
string|"'rm'"
op|','
string|"'-rf'"
op|','
name|'inst_base'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'raise'
name|'e'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'disk_info_text'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_running
dedent|''
name|'def'
name|'_wait_for_running'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"During wait running, instance disappeared."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance running successfully."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|finish_migration
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting finish_migration"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# resize disks. only "disk" and "disk.local" are necessary.'
nl|'\n'
name|'disk_info'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'disk_info'
op|')'
newline|'\n'
name|'for'
name|'info'
name|'in'
name|'disk_info'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'fname'
op|'=='
string|"'disk'"
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'extend'
op|'('
name|'info'
op|'['
string|"'path'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fname'
op|'=='
string|"'disk.local'"
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'extend'
op|'('
name|'info'
op|'['
string|"'path'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
op|':'
newline|'\n'
comment|'# back to qcow2 (no backing_file though) so that snapshot'
nl|'\n'
comment|'# will be available'
nl|'\n'
indent|'                '
name|'path_qcow'
op|'='
name|'info'
op|'['
string|"'path'"
op|']'
op|'+'
string|"'_qcow'"
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'convert'"
op|','
string|"'-f'"
op|','
string|"'raw'"
op|','
nl|'\n'
string|"'-O'"
op|','
string|"'qcow2'"
op|','
name|'info'
op|'['
string|"'path'"
op|']'
op|','
name|'path_qcow'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mv'"
op|','
name|'path_qcow'
op|','
name|'info'
op|'['
string|"'path'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'xml'
op|'='
name|'self'
op|'.'
name|'to_xml'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
comment|'# assume _create_image do nothing if a target file exists.'
nl|'\n'
comment|'# TODO(oda): injecting files is not necessary'
nl|'\n'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'xml'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'self'
op|'.'
name|'_wait_for_running'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|finish_revert_migration
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting finish_revert_migration"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst_base'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'inst_base_resize'
op|'='
name|'inst_base'
op|'+'
string|'"_resize"'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mv'"
op|','
name|'inst_base_resize'
op|','
name|'inst_base'
op|')'
newline|'\n'
nl|'\n'
name|'xml_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'inst_base'
op|','
string|"'libvirt.xml'"
op|')'
newline|'\n'
name|'xml'
op|'='
name|'open'
op|'('
name|'xml_path'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
comment|'# images already exist'
nl|'\n'
name|'self'
op|'.'
name|'_create_new_domain'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'self'
op|'.'
name|'_wait_for_running'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a resize, destroying the source VM"""'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_resize'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostState
dedent|''
dedent|''
name|'class'
name|'HostState'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages information about the compute node through libvirt"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HostState'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'read_only'
op|'='
name|'read_only'
newline|'\n'
name|'self'
op|'.'
name|'_stats'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'update_status'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_host_stats
dedent|''
name|'def'
name|'get_host_stats'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the current state of the host.\n\n        If \'refresh\' is True, run update the stats first."""'
newline|'\n'
name|'if'
name|'refresh'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update_status'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_stats'
newline|'\n'
nl|'\n'
DECL|member|update_status
dedent|''
name|'def'
name|'update_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve status info from libvirt."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating host stats"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'='
name|'get_connection'
op|'('
name|'self'
op|'.'
name|'read_only'
op|')'
newline|'\n'
dedent|''
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'data'
op|'['
string|'"vcpus"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_vcpu_total'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|'"vcpus_used"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_vcpu_used'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|'"cpu_info"'
op|']'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'data'
op|'['
string|'"disk_total"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_local_gb_total'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|'"disk_used"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_local_gb_used'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|'"disk_available"'
op|']'
op|'='
name|'data'
op|'['
string|'"disk_total"'
op|']'
op|'-'
name|'data'
op|'['
string|'"disk_used"'
op|']'
newline|'\n'
name|'data'
op|'['
string|'"host_memory_total"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|'"host_memory_free"'
op|']'
op|'='
op|'('
name|'data'
op|'['
string|'"host_memory_total"'
op|']'
op|'-'
nl|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_memory_mb_used'
op|'('
op|')'
op|')'
newline|'\n'
name|'data'
op|'['
string|'"hypervisor_type"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_hypervisor_type'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|'"hypervisor_version"'
op|']'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_hypervisor_version'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stats'
op|'='
name|'data'
newline|'\n'
nl|'\n'
name|'return'
name|'data'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

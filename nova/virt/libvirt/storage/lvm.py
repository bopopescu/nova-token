begin_unit
comment|'#    Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'#    Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'#    All Rights Reserved.'
nl|'\n'
comment|'#    Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#    Copyright (c) 2011 Piston Cloud Computing, Inc'
nl|'\n'
comment|'#    Copyright (c) 2011 OpenStack Foundation'
nl|'\n'
comment|'#    (c) Copyright 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|lvm_opts
name|'lvm_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'volume_clear'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'zero'"
op|','
nl|'\n'
DECL|variable|choices
name|'choices'
op|'='
op|'('
string|"'none'"
op|','
string|"'zero'"
op|','
string|"'shred'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Method used to wipe old volumes.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'volume_clear_size'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
name|'help'
op|'='
string|"'Size in MiB to wipe at start of old volumes. 0 => all'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'lvm_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'instances_path'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_volume
name|'def'
name|'create_volume'
op|'('
name|'vg'
op|','
name|'lv'
op|','
name|'size'
op|','
name|'sparse'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create LVM image.\n\n    Creates a LVM image with given size.\n\n    :param vg: existing volume group which should hold this image\n    :param lv: name for this image (logical volume)\n    :size: size of image in bytes\n    :sparse: create sparse logical volume\n    """'
newline|'\n'
name|'vg_info'
op|'='
name|'get_volume_group_info'
op|'('
name|'vg'
op|')'
newline|'\n'
name|'free_space'
op|'='
name|'vg_info'
op|'['
string|"'free'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|check_size
name|'def'
name|'check_size'
op|'('
name|'vg'
op|','
name|'lv'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'size'
op|'>'
name|'free_space'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'Insufficient Space on Volume Group %(vg)s.'"
nl|'\n'
string|"' Only %(free_space)db available,'"
nl|'\n'
string|"' but %(size)d bytes required'"
nl|'\n'
string|"' by volume %(lv)s.'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'vg'"
op|':'
name|'vg'
op|','
nl|'\n'
string|"'free_space'"
op|':'
name|'free_space'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'size'
op|','
nl|'\n'
string|"'lv'"
op|':'
name|'lv'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'sparse'
op|':'
newline|'\n'
indent|'        '
name|'preallocated_space'
op|'='
number|'64'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'check_size'
op|'('
name|'vg'
op|','
name|'lv'
op|','
name|'preallocated_space'
op|')'
newline|'\n'
name|'if'
name|'free_space'
op|'<'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Volume group %(vg)s will not be able'"
nl|'\n'
string|"' to hold sparse volume %(lv)s.'"
nl|'\n'
string|"' Virtual volume size is %(size)d bytes,'"
nl|'\n'
string|"' but free space on volume group is'"
nl|'\n'
string|"' only %(free_space)db.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'vg'"
op|':'
name|'vg'
op|','
nl|'\n'
string|"'free_space'"
op|':'
name|'free_space'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'size'
op|','
nl|'\n'
string|"'lv'"
op|':'
name|'lv'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
op|'('
string|"'lvcreate'"
op|','
string|"'-L'"
op|','
string|"'%db'"
op|'%'
name|'preallocated_space'
op|','
nl|'\n'
string|"'--virtualsize'"
op|','
string|"'%db'"
op|'%'
name|'size'
op|','
string|"'-n'"
op|','
name|'lv'
op|','
name|'vg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'check_size'
op|'('
name|'vg'
op|','
name|'lv'
op|','
name|'size'
op|')'
newline|'\n'
name|'cmd'
op|'='
op|'('
string|"'lvcreate'"
op|','
string|"'-L'"
op|','
string|"'%db'"
op|'%'
name|'size'
op|','
string|"'-n'"
op|','
name|'lv'
op|','
name|'vg'
op|')'
newline|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
name|'attempts'
op|'='
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_volume_group_info
dedent|''
name|'def'
name|'get_volume_group_info'
op|'('
name|'vg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return free/used/total space info for a volume group in bytes\n\n    :param vg: volume group name\n    :returns: A dict containing:\n             :total: How big the filesystem is (in bytes)\n             :free: How much space is free (in bytes)\n             :used: How much space is used (in bytes)\n    """'
newline|'\n'
nl|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'vgs'"
op|','
string|"'--noheadings'"
op|','
string|"'--nosuffix'"
op|','
nl|'\n'
string|"'--separator'"
op|','
string|"'|'"
op|','
nl|'\n'
string|"'--units'"
op|','
string|"'b'"
op|','
string|"'-o'"
op|','
string|"'vg_size,vg_free'"
op|','
name|'vg'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'info'
op|'='
name|'out'
op|'.'
name|'split'
op|'('
string|"'|'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'info'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|'"vg %s must be LVM volume group"'
op|')'
op|'%'
name|'vg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'total'"
op|':'
name|'int'
op|'('
name|'info'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|"'free'"
op|':'
name|'int'
op|'('
name|'info'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
string|"'used'"
op|':'
name|'int'
op|'('
name|'info'
op|'['
number|'0'
op|']'
op|')'
op|'-'
name|'int'
op|'('
name|'info'
op|'['
number|'1'
op|']'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|list_volumes
dedent|''
name|'def'
name|'list_volumes'
op|'('
name|'vg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""List logical volumes paths for given volume group.\n\n    :param vg: volume group name\n    :returns: Return a logical volume list for given volume group\n            : Data format example\n            : [\'volume-aaa\', \'volume-bbb\', \'volume-ccc\']\n    """'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'lvs'"
op|','
string|"'--noheadings'"
op|','
string|"'-o'"
op|','
string|"'lv_name'"
op|','
name|'vg'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'['
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'splitlines'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_info
dedent|''
name|'def'
name|'volume_info'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get logical volume info.\n\n    :param path: logical volume path\n    :returns: Return a dict object including info of given logical volume\n            : Data format example\n            : {\'#Seg\': \'1\', \'Move\': \'\', \'Log\': \'\', \'Meta%\': \'\', \'Min\': \'-1\',\n            : ...\n            : \'Free\': \'9983\', \'LV\': \'volume-aaa\', \'Host\': \'xyz.com\',\n            : \'Active\': \'active\', \'Path\': \'/dev/vg/volume-aaa\', \'#LV\': \'3\',\n            : \'Maj\': \'-1\', \'VSize\': \'50.00g\', \'VFree\': \'39.00g\', \'Pool\': \'\',\n            : \'VG Tags\': \'\', \'KMaj\': \'253\', \'Convert\': \'\', \'LProfile\': \'\',\n            : \'#Ext\': \'12799\', \'Attr\': \'-wi-a-----\', \'VG\': \'vg\',\n            : ...\n            : \'LSize\': \'1.00g\', \'#PV\': \'1\', \'#VMdaCps\': \'unmanaged\'}\n    """'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'lvs'"
op|','
string|"'-o'"
op|','
string|"'vg_all,lv_all'"
op|','
nl|'\n'
string|"'--separator'"
op|','
string|"'|'"
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'info'
op|'='
op|'['
name|'line'
op|'.'
name|'split'
op|'('
string|"'|'"
op|')'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'splitlines'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'info'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|'"Path %s must be LVM logical volume"'
op|')'
op|'%'
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'dict'
op|'('
name|'zip'
op|'('
op|'*'
name|'info'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_volume_size
dedent|''
name|'def'
name|'get_volume_size'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get logical volume size in bytes.\n\n    :param path: logical volume path\n    :raises: processutils.ProcessExecutionError if getting the volume size\n             fails in some unexpected way.\n    :raises: exception.VolumeBDMPathNotFound if the volume path does not exist.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'blockdev'"
op|','
string|"'--getsize64'"
op|','
name|'path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'utils'
op|'.'
name|'path_exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VolumeBDMPathNotFound'
op|'('
name|'path'
op|'='
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'int'
op|'('
name|'out'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_zero_volume
dedent|''
name|'def'
name|'_zero_volume'
op|'('
name|'path'
op|','
name|'volume_size'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write zeros over the specified path\n\n    :param path: logical volume path\n    :param size: number of zeros to write\n    """'
newline|'\n'
name|'bs'
op|'='
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'direct_flags'
op|'='
op|'('
string|"'oflag=direct'"
op|','
op|')'
newline|'\n'
name|'sync_flags'
op|'='
op|'('
op|')'
newline|'\n'
name|'remaining_bytes'
op|'='
name|'volume_size'
newline|'\n'
nl|'\n'
comment|'# The loop efficiently writes zeros using dd,'
nl|'\n'
comment|"# and caters for versions of dd that don't have"
nl|'\n'
comment|'# the easier to use iflag=count_bytes option.'
nl|'\n'
name|'while'
name|'remaining_bytes'
op|':'
newline|'\n'
indent|'        '
name|'zero_blocks'
op|'='
name|'remaining_bytes'
op|'/'
name|'bs'
newline|'\n'
name|'seek_blocks'
op|'='
op|'('
name|'volume_size'
op|'-'
name|'remaining_bytes'
op|')'
op|'/'
name|'bs'
newline|'\n'
name|'zero_cmd'
op|'='
op|'('
string|"'dd'"
op|','
string|"'bs=%s'"
op|'%'
name|'bs'
op|','
nl|'\n'
string|"'if=/dev/zero'"
op|','
string|"'of=%s'"
op|'%'
name|'path'
op|','
nl|'\n'
string|"'seek=%s'"
op|'%'
name|'seek_blocks'
op|','
string|"'count=%s'"
op|'%'
name|'zero_blocks'
op|')'
newline|'\n'
name|'zero_cmd'
op|'+='
name|'direct_flags'
newline|'\n'
name|'zero_cmd'
op|'+='
name|'sync_flags'
newline|'\n'
name|'if'
name|'zero_blocks'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'zero_cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'remaining_bytes'
op|'%='
name|'bs'
newline|'\n'
name|'bs'
op|'/='
name|'units'
op|'.'
name|'Ki'
comment|'# Limit to 3 iterations'
newline|'\n'
comment|'# Use O_DIRECT with initial block size and fdatasync otherwise'
nl|'\n'
name|'direct_flags'
op|'='
op|'('
op|')'
newline|'\n'
name|'sync_flags'
op|'='
op|'('
string|"'conv=fdatasync'"
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clear_volume
dedent|''
dedent|''
name|'def'
name|'clear_volume'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Obfuscate the logical volume.\n\n    :param path: logical volume path\n    """'
newline|'\n'
name|'volume_clear'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'volume_clear'
newline|'\n'
nl|'\n'
name|'if'
name|'volume_clear'
op|'=='
string|"'none'"
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'volume_clear_size'
op|'='
name|'int'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'volume_clear_size'
op|')'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'volume_size'
op|'='
name|'get_volume_size'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VolumeBDMPathNotFound'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'ignoring missing logical volume %(path)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
name|'path'
op|'}'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'volume_clear_size'
op|'!='
number|'0'
name|'and'
name|'volume_clear_size'
op|'<'
name|'volume_size'
op|':'
newline|'\n'
indent|'        '
name|'volume_size'
op|'='
name|'volume_clear_size'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'volume_clear'
op|'=='
string|"'zero'"
op|':'
newline|'\n'
comment|'# NOTE(p-draigbrady): we could use shred to do the zeroing'
nl|'\n'
comment|'# with -n0 -z, however only versions >= 8.22 perform as well as dd'
nl|'\n'
indent|'        '
name|'_zero_volume'
op|'('
name|'path'
op|','
name|'volume_size'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'volume_clear'
op|'=='
string|"'shred'"
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'shred'"
op|','
string|"'-n3'"
op|','
string|"'-s%d'"
op|'%'
name|'volume_size'
op|','
name|'path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_volumes
dedent|''
dedent|''
name|'def'
name|'remove_volumes'
op|'('
name|'paths'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove one or more logical volume."""'
newline|'\n'
nl|'\n'
name|'errors'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'paths'
op|':'
newline|'\n'
indent|'        '
name|'clear_volume'
op|'('
name|'path'
op|')'
newline|'\n'
name|'lvremove'
op|'='
op|'('
string|"'lvremove'"
op|','
string|"'-f'"
op|','
name|'path'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'lvremove'
op|','
name|'attempts'
op|'='
number|'3'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'.'
name|'append'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'errors'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'VolumesNotRemoved'
op|'('
name|'reason'
op|'='
op|'('
string|"', '"
op|')'
op|'.'
name|'join'
op|'('
name|'errors'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'urllib'
op|'.'
name|'parse'
name|'as'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
op|'.'
name|'volume'
name|'import'
name|'volume'
name|'as'
name|'libvirt_volume'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|volume_opts
name|'volume_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scality_sofs_config'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path or URL to Scality SOFS configuration file'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scality_sofs_mount_point'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$state_path/scality'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Base dir where Scality SOFS shall be mounted'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'volume_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtScalityVolumeDriver
name|'class'
name|'LibvirtScalityVolumeDriver'
op|'('
name|'libvirt_volume'
op|'.'
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Scality SOFS Nova driver. Provide hypervisors with access\n    to sparse files on SOFS.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to SOFS and check connection."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtScalityVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_path
dedent|''
name|'def'
name|'_get_device_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_mount_point'
op|','
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'sofs_path'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtScalityVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
nl|'\n'
comment|"# The default driver cache policy is 'none', and this causes"
nl|'\n'
comment|'# qemu/kvm to open the volume file with O_DIRECT, which is'
nl|'\n'
comment|'# rejected by FUSE (on kernels older than 3.3). Scality SOFS'
nl|'\n'
comment|'# is FUSE based, so we must provide a more sensible default.'
nl|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|"'writethrough'"
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'self'
op|'.'
name|'_check_prerequisites'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mount_sofs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_device_path'
op|'('
name|'connection_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_prerequisites
dedent|''
name|'def'
name|'_check_prerequisites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sanity checks before attempting to mount SOFS."""'
newline|'\n'
nl|'\n'
comment|'# config is mandatory'
nl|'\n'
name|'config'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_config'
newline|'\n'
name|'if'
name|'not'
name|'config'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Value required for \'scality_sofs_config\'"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# config can be a file path or a URL, check it'
nl|'\n'
dedent|''
name|'if'
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'config'
op|')'
op|'.'
name|'scheme'
op|'=='
string|"''"
op|':'
newline|'\n'
comment|'# turn local path into URL'
nl|'\n'
indent|'            '
name|'config'
op|'='
string|"'file://%s'"
op|'%'
name|'config'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'urllib'
op|'.'
name|'request'
op|'.'
name|'urlopen'
op|'('
name|'config'
op|','
name|'timeout'
op|'='
number|'5'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'urllib'
op|'.'
name|'error'
op|'.'
name|'URLError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot access \'scality_sofs_config\': %s"'
op|')'
op|'%'
name|'e'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# mount.sofs must be installed'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'access'
op|'('
string|"'/sbin/mount.sofs'"
op|','
name|'os'
op|'.'
name|'X_OK'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot execute /sbin/mount.sofs"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_mount_sofs
dedent|''
dedent|''
name|'def'
name|'_mount_sofs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_config'
newline|'\n'
name|'mount_path'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_mount_point'
newline|'\n'
name|'sysdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'mount_path'
op|','
string|"'sys'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'sysdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'sofs'"
op|','
name|'config'
op|','
name|'mount_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'sysdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot mount Scality SOFS, check syslog for errors"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2015 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
op|'.'
name|'volume'
name|'import'
name|'volume'
name|'as'
name|'libvirt_volume'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
name|'class'
name|'LibvirtBaseFileSystemVolumeDriver'
op|'('
nl|'\n'
DECL|class|LibvirtBaseFileSystemVolumeDriver
name|'libvirt_volume'
op|'.'
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The base class for file system type volume drivers"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtBaseFileSystemVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|_get_mount_point_base
name|'def'
name|'_get_mount_point_base'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the mount point path prefix.\n\n        This is used to build the device path.\n\n        :returns: The mount point path prefix.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|"'_get_mount_point_base'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_normalize_export
dedent|''
name|'def'
name|'_normalize_export'
op|'('
name|'self'
op|','
name|'export'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Normalize the export (share) if necessary.\n\n        Subclasses should override this method if they have a non-standard\n        export value, e.g. if the export is a URL. By default this method just\n        returns the export value passed in unchanged.\n\n        :param export: The export (share) value to normalize.\n        :returns: The normalized export value.\n        """'
newline|'\n'
name|'return'
name|'export'
newline|'\n'
nl|'\n'
DECL|member|_get_mount_path
dedent|''
name|'def'
name|'_get_mount_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the mount path prefix using the mount point base and share.\n\n        :param connection_info: dict of the form\n\n        ::\n\n          connection_info = {\n              \'data\': {\n                  \'export\': the file system share,\n                  ...\n              }\n              ...\n          }\n\n        :returns: The mount path prefix.\n        """'
newline|'\n'
name|'share'
op|'='
name|'self'
op|'.'
name|'_normalize_export'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_get_mount_point_base'
op|'('
op|')'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'share'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_path
dedent|''
name|'def'
name|'_get_device_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the hashed path to the device.\n\n        :param connection_info: dict of the form\n\n        ::\n\n          connection_info = {\n              \'data\': {\n                  \'export\': the file system share,\n                  \'name\': the name of the device,\n                  ...\n              }\n              ...\n          }\n\n        :returns: The full path to the device.\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_path'
op|'('
name|'connection_info'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'mount_path'
op|','
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 Michael Still and Canonical Inc'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Image cache manager.\n\nThe cache manager implements the specification at\nhttp://wiki.openstack.org/nova-image-cache-management.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'fileutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'imagecache'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'virtutils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|imagecache_opts
name|'imagecache_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'image_info_filename_pattern'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$instances_path/$image_cache_subdirectory_name/'"
nl|'\n'
string|"'%(image)s.info'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Allows image information files to be stored in '"
nl|'\n'
string|"'non-standard locations'"
op|','
nl|'\n'
DECL|variable|deprecated_group
name|'deprecated_group'
op|'='
string|"'DEFAULT'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'remove_unused_kernels'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Should unused kernel images be removed? This is only '"
nl|'\n'
string|"'safe to enable if all compute nodes have been updated '"
nl|'\n'
string|"'to support this option. This will be enabled by default '"
nl|'\n'
string|"'in future.'"
op|','
nl|'\n'
DECL|variable|deprecated_group
name|'deprecated_group'
op|'='
string|"'DEFAULT'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'remove_unused_resized_minimum_age_seconds'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Unused resized base images younger than this will not be '"
nl|'\n'
string|"'removed'"
op|','
nl|'\n'
DECL|variable|deprecated_group
name|'deprecated_group'
op|'='
string|"'DEFAULT'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'checksum_base_images'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Write a checksum for files in _base to disk'"
op|','
nl|'\n'
DECL|variable|deprecated_group
name|'deprecated_group'
op|'='
string|"'DEFAULT'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'checksum_interval_seconds'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How frequently to checksum base images'"
op|','
nl|'\n'
DECL|variable|deprecated_group
name|'deprecated_group'
op|'='
string|"'DEFAULT'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'imagecache_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'instances_path'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'image_cache_subdirectory_name'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cache_fname
name|'def'
name|'get_cache_fname'
op|'('
name|'images'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a filename based on the SHA1 hash of a given image ID.\n\n    Image files stored in the _base directory that match this pattern\n    are considered for cleanup by the image cache manager. The cache\n    manager considers the file to be in use if it matches an instance\'s\n    image_ref, kernel_id or ramdisk_id property.\n\n    However, in grizzly-3 and before, only the image_ref property was\n    considered. This means that it\'s unsafe to store kernel and ramdisk\n    images using this pattern until we\'re sure that all compute nodes\n    are running a cache manager newer than grizzly-3. For now, we\n    require admins to confirm that by setting the remove_unused_kernels\n    boolean but, at some point in the future, we\'ll be safely able to\n    assume this.\n    """'
newline|'\n'
name|'image_id'
op|'='
name|'str'
op|'('
name|'images'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
name|'if'
op|'('
op|'('
name|'not'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'remove_unused_kernels'
name|'and'
nl|'\n'
name|'key'
name|'in'
op|'['
string|"'kernel_id'"
op|','
string|"'ramdisk_id'"
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'image_id'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hashlib'
op|'.'
name|'sha1'
op|'('
name|'image_id'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_info_filename
dedent|''
dedent|''
name|'def'
name|'get_info_filename'
op|'('
name|'base_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Construct a filename for storing additional information about a base\n    image.\n\n    Returns a filename.\n    """'
newline|'\n'
nl|'\n'
name|'base_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'base_path'
op|')'
newline|'\n'
name|'return'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'image_info_filename_pattern'
nl|'\n'
op|'%'
op|'{'
string|"'image'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_info_file
dedent|''
name|'def'
name|'is_valid_info_file'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if a given path matches the pattern for info files."""'
newline|'\n'
nl|'\n'
name|'digest_size'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
op|')'
op|'.'
name|'digestsize'
op|'*'
number|'2'
newline|'\n'
name|'regexp'
op|'='
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'image_info_filename_pattern'
nl|'\n'
op|'%'
op|'{'
string|"'image'"
op|':'
op|'('
string|"'([0-9a-f]{%(digest_size)d}|'"
nl|'\n'
string|"'[0-9a-f]{%(digest_size)d}_sm|'"
nl|'\n'
string|"'[0-9a-f]{%(digest_size)d}_[0-9]+)'"
nl|'\n'
op|'%'
op|'{'
string|"'digest_size'"
op|':'
name|'digest_size'
op|'}'
op|')'
op|'}'
op|')'
newline|'\n'
name|'m'
op|'='
name|'re'
op|'.'
name|'match'
op|'('
name|'regexp'
op|','
name|'path'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_read_possible_json
dedent|''
name|'def'
name|'_read_possible_json'
op|'('
name|'serialized'
op|','
name|'info_file'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'serialized'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Error reading image info file %(filename)s: '"
nl|'\n'
string|"'%(error)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'filename'"
op|':'
name|'info_file'
op|','
nl|'\n'
string|"'error'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_stored_info
dedent|''
name|'def'
name|'read_stored_info'
op|'('
name|'target'
op|','
name|'field'
op|'='
name|'None'
op|','
name|'timestamped'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read information about an image.\n\n    Returns an empty dictionary if there is no info, just the field value if\n    a field is requested, or the entire dictionary otherwise.\n    """'
newline|'\n'
nl|'\n'
name|'info_file'
op|'='
name|'get_info_filename'
op|'('
name|'target'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'info_file'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mikal): Special case to handle essex checksums being converted.'
nl|'\n'
comment|'# There is an assumption here that target is a base image filename.'
nl|'\n'
indent|'        '
name|'old_filename'
op|'='
name|'target'
op|'+'
string|"'.sha1'"
newline|'\n'
name|'if'
name|'field'
op|'=='
string|"'sha1'"
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'old_filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'hash_file'
op|'='
name|'open'
op|'('
name|'old_filename'
op|')'
newline|'\n'
name|'hash_value'
op|'='
name|'hash_file'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'hash_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'write_stored_info'
op|'('
name|'target'
op|','
name|'field'
op|'='
name|'field'
op|','
name|'value'
op|'='
name|'hash_value'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'remove'
op|'('
name|'old_filename'
op|')'
newline|'\n'
name|'d'
op|'='
op|'{'
name|'field'
op|':'
name|'hash_value'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'lock_name'
op|'='
string|"'info-%s'"
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'target'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'lock_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
string|"'locks'"
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'lock_name'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'lock_path'
op|')'
newline|'\n'
DECL|function|read_file
name|'def'
name|'read_file'
op|'('
name|'info_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Reading image info file: %s'"
op|')'
op|','
name|'info_file'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'info_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'serialized'
op|'='
name|'read_file'
op|'('
name|'info_file'
op|')'
newline|'\n'
name|'d'
op|'='
name|'_read_possible_json'
op|'('
name|'serialized'
op|','
name|'info_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'field'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'timestamped'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'d'
op|'.'
name|'get'
op|'('
name|'field'
op|','
name|'None'
op|')'
op|','
name|'d'
op|'.'
name|'get'
op|'('
string|"'%s-timestamp'"
op|'%'
name|'field'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'d'
op|'.'
name|'get'
op|'('
name|'field'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_stored_info
dedent|''
name|'def'
name|'write_stored_info'
op|'('
name|'target'
op|','
name|'field'
op|'='
name|'None'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write information about an image."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'field'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'info_file'
op|'='
name|'get_info_filename'
op|'('
name|'target'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Writing stored info to %s'"
op|')'
op|','
name|'info_file'
op|')'
newline|'\n'
name|'fileutils'
op|'.'
name|'ensure_tree'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'info_file'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'lock_name'
op|'='
string|"'info-%s'"
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'target'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'lock_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
string|"'locks'"
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'lock_name'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'lock_path'
op|')'
newline|'\n'
DECL|function|write_file
name|'def'
name|'write_file'
op|'('
name|'info_file'
op|','
name|'field'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'info_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'info_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'_read_possible_json'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'info_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'d'
op|'['
name|'field'
op|']'
op|'='
name|'value'
newline|'\n'
name|'d'
op|'['
string|"'%s-timestamp'"
op|'%'
name|'field'
op|']'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'info_file'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'d'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'write_file'
op|'('
name|'info_file'
op|','
name|'field'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_hash_file
dedent|''
name|'def'
name|'_hash_file'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a hash for the contents of a file."""'
newline|'\n'
name|'checksum'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'filename'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'chunk'
name|'in'
name|'iter'
op|'('
name|'lambda'
op|':'
name|'f'
op|'.'
name|'read'
op|'('
number|'32768'
op|')'
op|','
string|"b''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'checksum'
op|'.'
name|'update'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'checksum'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_stored_checksum
dedent|''
name|'def'
name|'read_stored_checksum'
op|'('
name|'target'
op|','
name|'timestamped'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read the checksum.\n\n    Returns the checksum (as hex) or None.\n    """'
newline|'\n'
name|'return'
name|'read_stored_info'
op|'('
name|'target'
op|','
name|'field'
op|'='
string|"'sha1'"
op|','
name|'timestamped'
op|'='
name|'timestamped'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_stored_checksum
dedent|''
name|'def'
name|'write_stored_checksum'
op|'('
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write a checksum to disk for a file in _base."""'
newline|'\n'
name|'write_stored_info'
op|'('
name|'target'
op|','
name|'field'
op|'='
string|"'sha1'"
op|','
name|'value'
op|'='
name|'_hash_file'
op|'('
name|'target'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageCacheManager
dedent|''
name|'class'
name|'ImageCacheManager'
op|'('
name|'imagecache'
op|'.'
name|'ImageCacheManager'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ImageCacheManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lock_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
string|"'locks'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reset_state'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reset_state
dedent|''
name|'def'
name|'_reset_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset state variables used for each pass."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'used_images'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'image_popularity'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'instance_names'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'active_base_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'corrupt_base_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'originals'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'removable_base_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'unexplained_images'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|_store_image
dedent|''
name|'def'
name|'_store_image'
op|'('
name|'self'
op|','
name|'base_dir'
op|','
name|'ent'
op|','
name|'original'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Store a base image for later examination."""'
newline|'\n'
name|'entpath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'ent'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'entpath'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unexplained_images'
op|'.'
name|'append'
op|'('
name|'entpath'
op|')'
newline|'\n'
name|'if'
name|'original'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'originals'
op|'.'
name|'append'
op|'('
name|'entpath'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_list_base_images
dedent|''
dedent|''
dedent|''
name|'def'
name|'_list_base_images'
op|'('
name|'self'
op|','
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of the images present in _base.\n\n        Determine what images we have on disk. There will be other files in\n        this directory so we only grab the ones which are the right length\n        to be disk images.\n        """'
newline|'\n'
nl|'\n'
name|'digest_size'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
op|')'
op|'.'
name|'digestsize'
op|'*'
number|'2'
newline|'\n'
name|'for'
name|'ent'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'ent'
op|')'
op|'=='
name|'digest_size'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_store_image'
op|'('
name|'base_dir'
op|','
name|'ent'
op|','
name|'original'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
op|'('
name|'len'
op|'('
name|'ent'
op|')'
op|'>'
name|'digest_size'
op|'+'
number|'2'
name|'and'
nl|'\n'
name|'ent'
op|'['
name|'digest_size'
op|']'
op|'=='
string|"'_'"
name|'and'
nl|'\n'
name|'not'
name|'is_valid_info_file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'ent'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_store_image'
op|'('
name|'base_dir'
op|','
name|'ent'
op|','
name|'original'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'unexplained_images'"
op|':'
name|'self'
op|'.'
name|'unexplained_images'
op|','
nl|'\n'
string|"'originals'"
op|':'
name|'self'
op|'.'
name|'originals'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_list_backing_images
dedent|''
name|'def'
name|'_list_backing_images'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List the backing images currently in use."""'
newline|'\n'
name|'inuse_images'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ent'
name|'in'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ent'
name|'in'
name|'self'
op|'.'
name|'instance_names'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'%s is a valid instance name'"
op|')'
op|','
name|'ent'
op|')'
newline|'\n'
name|'disk_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
name|'ent'
op|','
string|"'disk'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'disk_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'%s has a disk file'"
op|')'
op|','
name|'ent'
op|')'
newline|'\n'
name|'backing_file'
op|'='
name|'virtutils'
op|'.'
name|'get_disk_backing_file'
op|'('
name|'disk_path'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Instance %(instance)s is backed by '"
nl|'\n'
string|"'%(backing)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance'"
op|':'
name|'ent'
op|','
nl|'\n'
string|"'backing'"
op|':'
name|'backing_file'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'backing_file'
op|':'
newline|'\n'
indent|'                        '
name|'backing_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
op|','
nl|'\n'
name|'backing_file'
op|')'
newline|'\n'
name|'if'
name|'backing_path'
name|'not'
name|'in'
name|'inuse_images'
op|':'
newline|'\n'
indent|'                            '
name|'inuse_images'
op|'.'
name|'append'
op|'('
name|'backing_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'backing_path'
name|'in'
name|'self'
op|'.'
name|'unexplained_images'
op|':'
newline|'\n'
indent|'                            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Instance %(instance)s is using a '"
nl|'\n'
string|"'backing file %(backing)s which '"
nl|'\n'
string|"'does not appear in the image '"
nl|'\n'
string|"'service'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance'"
op|':'
name|'ent'
op|','
nl|'\n'
string|"'backing'"
op|':'
name|'backing_file'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unexplained_images'
op|'.'
name|'remove'
op|'('
name|'backing_path'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'inuse_images'
newline|'\n'
nl|'\n'
DECL|member|_find_base_file
dedent|''
name|'def'
name|'_find_base_file'
op|'('
name|'self'
op|','
name|'base_dir'
op|','
name|'fingerprint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find the base file matching this fingerprint.\n\n        Yields the name of the base file, a boolean which is True if the image\n        is "small", and a boolean which indicates if this is a resized image.\n        Note that is is possible for more than one yield to result from this\n        check.\n\n        If no base file is found, then nothing is yielded.\n        """'
newline|'\n'
comment|'# The original file from glance'
nl|'\n'
name|'base_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'fingerprint'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'base_file'
op|','
name|'False'
op|','
name|'False'
newline|'\n'
nl|'\n'
comment|'# An older naming style which can be removed sometime after Folsom'
nl|'\n'
dedent|''
name|'base_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'fingerprint'
op|'+'
string|"'_sm'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'base_file'
op|','
name|'True'
op|','
name|'False'
newline|'\n'
nl|'\n'
comment|'# Resized images'
nl|'\n'
dedent|''
name|'resize_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'.*/%s_[0-9]+$'"
op|'%'
name|'fingerprint'
op|')'
newline|'\n'
name|'for'
name|'img'
name|'in'
name|'self'
op|'.'
name|'unexplained_images'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'resize_re'
op|'.'
name|'match'
op|'('
name|'img'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'img'
op|','
name|'False'
op|','
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_verify_checksum
dedent|''
dedent|''
dedent|''
name|'def'
name|'_verify_checksum'
op|'('
name|'self'
op|','
name|'img_id'
op|','
name|'base_file'
op|','
name|'create_if_missing'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare the checksum stored on disk with the current file.\n\n        Note that if the checksum fails to verify this is logged, but no actual\n        action occurs. This is something sysadmins should monitor for and\n        handle manually when it occurs.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'checksum_base_images'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'lock_name'
op|'='
string|"'hash-%s'"
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'base_file'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# Protect against other nova-computes performing checksums at the same'
nl|'\n'
comment|'# time if we are using shared storage'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'lock_name'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'lock_path'
op|')'
newline|'\n'
DECL|function|inner_verify_checksum
name|'def'
name|'inner_verify_checksum'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'stored_checksum'
op|','
name|'stored_timestamp'
op|')'
op|'='
name|'read_stored_checksum'
op|'('
nl|'\n'
name|'base_file'
op|','
name|'timestamped'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'stored_checksum'
op|':'
newline|'\n'
comment|'# NOTE(mikal): Checksums are timestamped. If we have recently'
nl|'\n'
comment|'# checksummed (possibly on another compute node if we are using'
nl|'\n'
comment|"# shared storage), then we don't need to checksum again."
nl|'\n'
indent|'                '
name|'if'
op|'('
name|'stored_timestamp'
name|'and'
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'stored_timestamp'
op|'<'
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'checksum_interval_seconds'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): If there is no timestamp, then the checksum was'
nl|'\n'
comment|'# performed by a previous version of the code.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'stored_timestamp'
op|':'
newline|'\n'
indent|'                    '
name|'write_stored_info'
op|'('
name|'base_file'
op|','
name|'field'
op|'='
string|"'sha1'"
op|','
nl|'\n'
name|'value'
op|'='
name|'stored_checksum'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_checksum'
op|'='
name|'_hash_file'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'current_checksum'
op|'!='
name|'stored_checksum'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): image '"
nl|'\n'
string|"'verification failed'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): image '"
nl|'\n'
string|"'verification skipped, no hash stored'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): If the checksum file is missing, then we should'
nl|'\n'
comment|"# create one. We don't create checksums when we download images"
nl|'\n'
comment|'# from glance because that would delay VM startup.'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'checksum_base_images'
name|'and'
name|'create_if_missing'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'%(id)s (%(base_file)s): generating checksum'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
name|'write_stored_checksum'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'inner_verify_checksum'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_base_file
dedent|''
name|'def'
name|'_remove_base_file'
op|'('
name|'self'
op|','
name|'base_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a single base file if it is old enough.\n\n        Returns nothing.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Cannot remove %(base_file)s, it does not exist'"
op|')'
op|','
nl|'\n'
name|'base_file'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'base_file'
op|')'
newline|'\n'
name|'age'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'mtime'
newline|'\n'
nl|'\n'
name|'maxage'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'remove_unused_resized_minimum_age_seconds'
newline|'\n'
name|'if'
name|'base_file'
name|'in'
name|'self'
op|'.'
name|'originals'
op|':'
newline|'\n'
indent|'            '
name|'maxage'
op|'='
name|'CONF'
op|'.'
name|'remove_unused_original_minimum_age_seconds'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'age'
op|'<'
name|'maxage'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Base file too young to remove: %s'"
op|')'
op|','
nl|'\n'
name|'base_file'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Removing base file: %s'"
op|')'
op|','
name|'base_file'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'remove'
op|'('
name|'base_file'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'get_info_filename'
op|'('
name|'base_file'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'signature'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'remove'
op|'('
name|'signature'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Failed to remove %(base_file)s, '"
nl|'\n'
string|"'error was %(error)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'base_file'"
op|':'
name|'base_file'
op|','
nl|'\n'
string|"'error'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_base_image
dedent|''
dedent|''
dedent|''
name|'def'
name|'_handle_base_image'
op|'('
name|'self'
op|','
name|'img_id'
op|','
name|'base_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handle the checks for a single base image."""'
newline|'\n'
nl|'\n'
name|'image_bad'
op|'='
name|'False'
newline|'\n'
name|'image_in_use'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): checking'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'base_file'
name|'in'
name|'self'
op|'.'
name|'unexplained_images'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unexplained_images'
op|'.'
name|'remove'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'base_file'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_file'
op|')'
nl|'\n'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'base_file'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# _verify_checksum returns True if the checksum is ok, and None if'
nl|'\n'
comment|'# there is no checksum file'
nl|'\n'
indent|'            '
name|'checksum_result'
op|'='
name|'self'
op|'.'
name|'_verify_checksum'
op|'('
name|'img_id'
op|','
name|'base_file'
op|')'
newline|'\n'
name|'if'
name|'checksum_result'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'image_bad'
op|'='
name|'not'
name|'checksum_result'
newline|'\n'
nl|'\n'
comment|'# Give other threads a chance to run'
nl|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'img_id'
name|'in'
name|'self'
op|'.'
name|'used_images'
op|':'
newline|'\n'
indent|'            '
name|'local'
op|','
name|'remote'
op|','
name|'instances'
op|'='
name|'self'
op|'.'
name|'used_images'
op|'['
name|'img_id'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'local'
op|'>'
number|'0'
name|'or'
name|'remote'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'image_in_use'
op|'='
name|'True'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): '"
nl|'\n'
string|"'in use: on this node %(local)d local, '"
nl|'\n'
string|"'%(remote)d on other nodes sharing this instance '"
nl|'\n'
string|"'storage'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|','
nl|'\n'
string|"'local'"
op|':'
name|'local'
op|','
nl|'\n'
string|"'remote'"
op|':'
name|'remote'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'active_base_files'
op|'.'
name|'append'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'base_file'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): warning '"
nl|'\n'
string|"'-- an absent base file is in use! '"
nl|'\n'
string|"'instances: %(instance_list)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|','
nl|'\n'
string|"'instance_list'"
op|':'
string|"' '"
op|'.'
name|'join'
op|'('
name|'instances'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'image_bad'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'corrupt_base_files'
op|'.'
name|'append'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'base_file'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'image_in_use'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): image is not in '"
nl|'\n'
string|"'use'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'removable_base_files'
op|'.'
name|'append'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'image %(id)s at (%(base_file)s): image is in '"
nl|'\n'
string|"'use'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img_id'
op|','
nl|'\n'
string|"'base_file'"
op|':'
name|'base_file'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_file'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'virtutils'
op|'.'
name|'chown'
op|'('
name|'base_file'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'utime'
op|'('
name|'base_file'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_age_and_verify_cached_images
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_age_and_verify_cached_images'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'all_instances'
op|','
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Verify base images'"
op|')'
op|')'
newline|'\n'
comment|"# Determine what images are on disk because they're in use"
nl|'\n'
name|'for'
name|'img'
name|'in'
name|'self'
op|'.'
name|'used_images'
op|':'
newline|'\n'
indent|'            '
name|'fingerprint'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
name|'img'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Image id %(id)s yields fingerprint %(fingerprint)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'img'
op|','
nl|'\n'
string|"'fingerprint'"
op|':'
name|'fingerprint'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'result'
name|'in'
name|'self'
op|'.'
name|'_find_base_file'
op|'('
name|'base_dir'
op|','
name|'fingerprint'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'base_file'
op|','
name|'image_small'
op|','
name|'image_resized'
op|'='
name|'result'
newline|'\n'
name|'self'
op|'.'
name|'_handle_base_image'
op|'('
name|'img'
op|','
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'image_small'
name|'and'
name|'not'
name|'image_resized'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'originals'
op|'.'
name|'append'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
comment|'# Elements remaining in unexplained_images might be in use'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'inuse_backing_images'
op|'='
name|'self'
op|'.'
name|'_list_backing_images'
op|'('
op|')'
newline|'\n'
name|'for'
name|'backing_path'
name|'in'
name|'inuse_backing_images'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'backing_path'
name|'not'
name|'in'
name|'self'
op|'.'
name|'active_base_files'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'active_base_files'
op|'.'
name|'append'
op|'('
name|'backing_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Anything left is an unknown base image'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'img'
name|'in'
name|'self'
op|'.'
name|'unexplained_images'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Unknown base file: %s'"
op|')'
op|','
name|'img'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'removable_base_files'
op|'.'
name|'append'
op|'('
name|'img'
op|')'
newline|'\n'
nl|'\n'
comment|'# Dump these lists'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'active_base_files'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Active base files: %s'"
op|')'
op|','
nl|'\n'
string|"' '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'active_base_files'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'corrupt_base_files'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Corrupt base files: %s'"
op|')'
op|','
nl|'\n'
string|"' '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'corrupt_base_files'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'removable_base_files'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Removable base files: %s'"
op|')'
op|','
nl|'\n'
string|"' '"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'removable_base_files'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'remove_unused_base_images'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'base_file'
name|'in'
name|'self'
op|'.'
name|'removable_base_files'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_remove_base_file'
op|'('
name|'base_file'
op|')'
newline|'\n'
nl|'\n'
comment|"# That's it"
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Verification complete'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_base
dedent|''
name|'def'
name|'_get_base'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): The new scheme for base images is as follows -- an'
nl|'\n'
comment|'# image is streamed from the image service to _base (filename is the'
nl|'\n'
comment|'# sha1 hash of the image id). If CoW is enabled, that file is then'
nl|'\n'
comment|'# resized to be the correct size for the instance (filename is the'
nl|'\n'
comment|'# same as the original, but with an underscore and the resized size'
nl|'\n'
comment|"# in bytes). This second file is then CoW'd to the instance disk. If"
nl|'\n'
comment|'# CoW is disabled, the resize occurs as part of the copy from the'
nl|'\n'
comment|'# cache to the instance directory. Files ending in _sm are no longer'
nl|'\n'
comment|'# created, but may remain from previous versions.'
nl|'\n'
nl|'\n'
indent|'        '
name|'base_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Skipping verification, no base directory at %s'"
op|')'
op|','
nl|'\n'
name|'base_dir'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'base_dir'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'all_instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_dir'
op|'='
name|'self'
op|'.'
name|'_get_base'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'base_dir'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
comment|'# reset the local statistics'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_reset_state'
op|'('
op|')'
newline|'\n'
comment|'# read the cached images'
nl|'\n'
name|'self'
op|'.'
name|'_list_base_images'
op|'('
name|'base_dir'
op|')'
newline|'\n'
comment|'# read running instances data'
nl|'\n'
name|'running'
op|'='
name|'self'
op|'.'
name|'_list_running_instances'
op|'('
name|'context'
op|','
name|'all_instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'used_images'
op|'='
name|'running'
op|'['
string|"'used_images'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'image_popularity'
op|'='
name|'running'
op|'['
string|"'image_popularity'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'instance_names'
op|'='
name|'running'
op|'['
string|"'instance_names'"
op|']'
newline|'\n'
comment|'# perform the aging and image verification'
nl|'\n'
name|'self'
op|'.'
name|'_age_and_verify_cached_images'
op|'('
name|'context'
op|','
name|'all_instances'
op|','
name|'base_dir'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

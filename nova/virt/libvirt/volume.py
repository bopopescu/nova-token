begin_unit
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# (c) Copyright 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Volume drivers for libvirt."""'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'os_brick'
op|'.'
name|'initiator'
name|'import'
name|'connector'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'urllib'
op|'.'
name|'parse'
name|'as'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LI'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'quobyte'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'remotefs'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'libvirt_utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|volume_opts
name|'volume_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_iscsi_scan_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to rescan iSCSI target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_iser_scan_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to rescan iSER target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rbd_user'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The RADOS client name for accessing rbd volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rbd_secret_uuid'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The libvirt UUID of the secret for the rbd_user'"
nl|'\n'
string|"'volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory where the NFS volume is mounted on the'"
nl|'\n'
string|"' compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_mount_options'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Mount options passed to the NFS client. See section '"
nl|'\n'
string|"'of the nfs man page for details'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'smbfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory where the SMBFS shares are mounted on the '"
nl|'\n'
string|"'compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'smbfs_mount_options'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Mount options passed to the SMBFS client. See '"
nl|'\n'
string|"'mount.cifs man page for details. Note that the '"
nl|'\n'
string|"'libvirt-qemu uid and gid must be specified.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_aoe_discover_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to rediscover AoE target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'glusterfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory where the glusterfs volume is mounted on the '"
nl|'\n'
string|"'compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'iscsi_use_multipath'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use multipath connection of the iSCSI volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'iser_use_multipath'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use multipath connection of the iSER volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scality_sofs_config'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path or URL to Scality SOFS configuration file'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scality_sofs_mount_point'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$state_path/scality'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Base dir where Scality SOFS shall be mounted'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'qemu_allowed_storage_drivers'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Protocols listed here will be accessed directly '"
nl|'\n'
string|"'from QEMU. Currently supported protocols: [gluster]'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'quobyte_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory where the Quobyte volume is mounted on the '"
nl|'\n'
string|"'compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'quobyte_client_cfg'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path to a Quobyte Client configuration file.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'iscsi_iface'"
op|','
nl|'\n'
DECL|variable|deprecated_name
name|'deprecated_name'
op|'='
string|"'iscsi_transport'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The iSCSI transport iface to use to connect to target in '"
nl|'\n'
string|"'case offload support is desired. Default format is of '"
nl|'\n'
string|"'the form <transport_name>.<hwaddress> where '"
nl|'\n'
string|"'<transport_name> is one of (be2iscsi, bnx2i, cxgb3i, '"
nl|'\n'
string|"'cxgb4i, qla4xxx, ocs) and <hwadress> is the MAC address '"
nl|'\n'
string|"'of the interface and can be generated via the '"
nl|'\n'
string|"'iscsiadm -m iface command. Do not confuse the '"
nl|'\n'
string|"'iscsi_iface parameter to be provided here with the '"
nl|'\n'
string|"'actual transport name.'"
op|')'
op|','
nl|'\n'
comment|'# iser is also supported, but use LibvirtISERVolumeDriver'
nl|'\n'
comment|'# instead'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'volume_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtBaseVolumeDriver
name|'class'
name|'LibvirtBaseVolumeDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for volume drivers."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
name|'is_block_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'is_block_dev'
op|'='
name|'is_block_dev'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'driver_name'
op|'='
name|'libvirt_utils'
op|'.'
name|'pick_disk_driver_name'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_host'
op|'.'
name|'get_version'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'is_block_dev'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_device'
op|'='
name|'disk_info'
op|'['
string|"'type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
string|'"raw"'
newline|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|'"none"'
newline|'\n'
name|'conf'
op|'.'
name|'target_dev'
op|'='
name|'disk_info'
op|'['
string|"'dev'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'target_bus'
op|'='
name|'disk_info'
op|'['
string|"'bus'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'serial'
op|'='
name|'connection_info'
op|'.'
name|'get'
op|'('
string|"'serial'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Support for block size tuning'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
string|"'data'"
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'logical_block_size'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'logical_block_size'
op|'='
name|'data'
op|'['
string|"'logical_block_size'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'physical_block_size'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'physical_block_size'
op|'='
name|'data'
op|'['
string|"'physical_block_size'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Extract rate_limit control parameters'
nl|'\n'
dedent|''
name|'if'
string|"'qos_specs'"
name|'in'
name|'data'
name|'and'
name|'data'
op|'['
string|"'qos_specs'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'tune_opts'
op|'='
op|'['
string|"'total_bytes_sec'"
op|','
string|"'read_bytes_sec'"
op|','
nl|'\n'
string|"'write_bytes_sec'"
op|','
string|"'total_iops_sec'"
op|','
nl|'\n'
string|"'read_iops_sec'"
op|','
string|"'write_iops_sec'"
op|']'
newline|'\n'
name|'specs'
op|'='
name|'data'
op|'['
string|"'qos_specs'"
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'specs'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'specs'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'k'
name|'in'
name|'tune_opts'
op|':'
newline|'\n'
indent|'                        '
name|'new_key'
op|'='
string|"'disk_'"
op|'+'
name|'k'
newline|'\n'
name|'setattr'
op|'('
name|'conf'
op|','
name|'new_key'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'Unknown content in connection_info/'"
nl|'\n'
string|"'qos_specs: %s'"
op|')'
op|','
name|'specs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Extract access_mode control parameters'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'access_mode'"
name|'in'
name|'data'
name|'and'
name|'data'
op|'['
string|"'access_mode'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'access_mode'
op|'='
name|'data'
op|'['
string|"'access_mode'"
op|']'
newline|'\n'
name|'if'
name|'access_mode'
name|'in'
op|'('
string|"'ro'"
op|','
string|"'rw'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'.'
name|'readonly'
op|'='
name|'access_mode'
op|'=='
string|"'ro'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Unknown content in '"
nl|'\n'
string|"'connection_info/access_mode: %s'"
op|')'
op|','
nl|'\n'
name|'access_mode'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidVolumeAccessMode'
op|'('
nl|'\n'
name|'access_mode'
op|'='
name|'access_mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|_get_secret_uuid
dedent|''
name|'def'
name|'_get_secret_uuid'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'secret'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_host'
op|'.'
name|'find_secret'
op|'('
name|'conf'
op|'.'
name|'source_protocol'
op|','
nl|'\n'
name|'conf'
op|'.'
name|'source_name'
op|')'
newline|'\n'
name|'if'
name|'secret'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'secret'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_host'
op|'.'
name|'create_secret'
op|'('
name|'conf'
op|'.'
name|'source_protocol'
op|','
nl|'\n'
name|'conf'
op|'.'
name|'source_name'
op|','
nl|'\n'
name|'password'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'secret'
op|'.'
name|'UUIDString'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_secret_by_name
dedent|''
name|'def'
name|'_delete_secret_by_name'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'source_protocol'
op|'='
name|'connection_info'
op|'['
string|"'driver_volume_type'"
op|']'
newline|'\n'
name|'netdisk_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'if'
name|'source_protocol'
op|'=='
string|"'rbd'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'source_protocol'
op|'=='
string|"'iscsi'"
op|':'
newline|'\n'
indent|'            '
name|'usage_type'
op|'='
string|"'iscsi'"
newline|'\n'
name|'usage_name'
op|'='
op|'('
string|'"%(target_iqn)s/%(target_lun)s"'
op|'%'
nl|'\n'
name|'netdisk_properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_host'
op|'.'
name|'delete_secret'
op|'('
name|'usage_type'
op|','
name|'usage_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class for volumes backed by local file."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtFakeVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtFakeVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach fake volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtFakeVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtFakeVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"network"'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
string|'"fake"'
newline|'\n'
name|'conf'
op|'.'
name|'source_name'
op|'='
string|'"fake"'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtNetVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtNetVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'netdisk_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"network"'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
name|'connection_info'
op|'['
string|"'driver_volume_type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_name'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_hosts'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'hosts'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_ports'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'ports'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'auth_enabled'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'auth_enabled'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'conf'
op|'.'
name|'source_protocol'
op|'=='
string|"'rbd'"
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
newline|'\n'
name|'auth_enabled'
op|'='
name|'True'
comment|'# Force authentication locally'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'.'
name|'auth_username'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'conf'
op|'.'
name|'source_protocol'
op|'=='
string|"'iscsi'"
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'.'
name|'source_name'
op|'='
op|'('
string|'"%(target_iqn)s/%(target_lun)s"'
op|'%'
nl|'\n'
name|'netdisk_properties'
op|')'
newline|'\n'
name|'target_portal'
op|'='
name|'netdisk_properties'
op|'['
string|"'target_portal'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Invalid volume source data"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ip'
op|','
name|'port'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
name|'target_portal'
op|')'
newline|'\n'
name|'if'
name|'ip'
op|'=='
string|"''"
name|'or'
name|'port'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Invalid target_lun"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'conf'
op|'.'
name|'source_hosts'
op|'='
op|'['
name|'ip'
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_ports'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
name|'if'
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'auth_method'"
op|')'
op|'=='
string|"'CHAP'"
op|':'
newline|'\n'
indent|'                '
name|'auth_enabled'
op|'='
name|'True'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_type'
op|'='
string|"'iscsi'"
newline|'\n'
name|'password'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'auth_password'"
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
name|'self'
op|'.'
name|'_get_secret_uuid'
op|'('
name|'conf'
op|','
name|'password'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'auth_enabled'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'auth_username'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_username'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'auth_username'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_type'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_secret_type'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'secret_type'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_secret_uuid'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'secret_uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'disk_dev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_secret_by_name'
op|'('
name|'connection_info'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtISCSIVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtISCSIVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
nl|'\n'
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Call the factory here so we can support'
nl|'\n'
comment|'# more than x86 architectures.'
nl|'\n'
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
op|'.'
name|'InitiatorConnector'
op|'.'
name|'factory'
op|'('
nl|'\n'
string|"'ISCSI'"
op|','
name|'utils'
op|'.'
name|'_get_root_helper'
op|'('
op|')'
op|','
nl|'\n'
name|'use_multipath'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iscsi_use_multipath'
op|','
nl|'\n'
name|'device_scan_attempts'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_iscsi_scan_tries'
op|','
nl|'\n'
name|'transport'
op|'='
name|'self'
op|'.'
name|'_get_transport'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_transport
dedent|''
name|'def'
name|'_get_transport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iscsi_iface'
op|':'
newline|'\n'
indent|'            '
name|'transport'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iscsi_iface'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'transport'
op|'='
string|"'default'"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'transport'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach the volume to instance_name."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Calling os-brick to attach iSCSI Volume"'
op|')'
newline|'\n'
name|'device_info'
op|'='
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Attached iSCSI volume %s"'
op|','
name|'device_info'
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'device_info'
op|'['
string|"'path'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"calling os-brick to detach iSCSI Volume"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Disconnected iSCSI Volume %s"'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtISERVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtISERVolumeDriver'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtISERVolumeDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|')'
newline|'\n'
nl|'\n'
comment|'# Call the factory here so we can support'
nl|'\n'
comment|'# more than x86 architectures.'
nl|'\n'
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
op|'.'
name|'InitiatorConnector'
op|'.'
name|'factory'
op|'('
nl|'\n'
string|"'ISER'"
op|','
name|'utils'
op|'.'
name|'_get_root_helper'
op|'('
op|')'
op|','
nl|'\n'
name|'use_multipath'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iser_use_multipath'
op|','
nl|'\n'
name|'device_scan_attempts'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_iser_scan_tries'
op|','
nl|'\n'
name|'transport'
op|'='
name|'self'
op|'.'
name|'_get_transport'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_transport
dedent|''
name|'def'
name|'_get_transport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'iser'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtNFSVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtNFSVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for NFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to nfs."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtNFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_path
dedent|''
name|'def'
name|'_get_device_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtNFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'format'"
op|','
string|"'raw'"
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'options'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'options'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_mounted'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|','
name|'options'
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_device_path'
op|'('
name|'connection_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
nl|'\n'
name|'export'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'export'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'umount'"
op|','
name|'mount_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
string|"'device is busy'"
name|'in'
name|'exc'
op|'.'
name|'message'
name|'or'
nl|'\n'
string|"'target is busy'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"The NFS share %s is still in use."'
op|','
name|'export'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Couldn\'t unmount the NFS share %s"'
op|')'
op|','
name|'export'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_mounted
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ensure_mounted'
op|'('
name|'self'
op|','
name|'nfs_export'
op|','
name|'options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@type nfs_export: string\n           @type options: string\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'nfs_export'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
name|'nfs_export'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mount_nfs'
op|'('
name|'mount_path'
op|','
name|'nfs_export'
op|','
name|'options'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|_mount_nfs
dedent|''
name|'def'
name|'_mount_nfs'
op|'('
name|'self'
op|','
name|'mount_path'
op|','
name|'nfs_share'
op|','
name|'options'
op|'='
name|'None'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount nfs export to mount path."""'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct the NFS mount command.'
nl|'\n'
name|'nfs_cmd'
op|'='
op|'['
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'nfs'"
op|']'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-o'"
op|','
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_options'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
name|'options'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'nfs_share'
op|','
name|'mount_path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'nfs_cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'nfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtSMBFSVolumeDriver
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtSMBFSVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for SMBFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtSMBFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'username_regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
nl|'\n'
string|'r"(user(?:name)?)=(?:[^ ,]+\\\\)?([^ ,]+)"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_path
dedent|''
name|'def'
name|'_get_device_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'smbfs_share'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_path'
op|'('
name|'smbfs_share'
op|')'
newline|'\n'
name|'volume_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'mount_path'
op|','
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'volume_path'
newline|'\n'
nl|'\n'
DECL|member|_get_mount_path
dedent|''
name|'def'
name|'_get_mount_path'
op|'('
name|'self'
op|','
name|'smbfs_share'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'smbfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'smbfs_share'
op|')'
op|')'
newline|'\n'
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtSMBFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|"'writethrough'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'format'"
op|','
string|"'raw'"
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume."""'
newline|'\n'
name|'smbfs_share'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_path'
op|'('
name|'smbfs_share'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
name|'smbfs_share'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mount_options'
op|'='
name|'self'
op|'.'
name|'_parse_mount_options'
op|'('
name|'connection_info'
op|')'
newline|'\n'
name|'remotefs'
op|'.'
name|'mount_share'
op|'('
name|'mount_path'
op|','
name|'smbfs_share'
op|','
nl|'\n'
name|'export_type'
op|'='
string|"'cifs'"
op|','
name|'options'
op|'='
name|'mount_options'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'device_path'
op|'='
name|'self'
op|'.'
name|'_get_device_path'
op|'('
name|'connection_info'
op|')'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'device_path'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
name|'smbfs_share'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_path'
op|'('
name|'smbfs_share'
op|')'
newline|'\n'
name|'remotefs'
op|'.'
name|'unmount_share'
op|'('
name|'mount_path'
op|','
name|'smbfs_share'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_mount_options
dedent|''
name|'def'
name|'_parse_mount_options'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mount_options'
op|'='
string|'" "'
op|'.'
name|'join'
op|'('
nl|'\n'
op|'['
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'options'"
op|')'
name|'or'
string|"''"
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'smbfs_mount_options'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'username_regex'
op|'.'
name|'findall'
op|'('
name|'mount_options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mount_options'
op|'='
name|'mount_options'
op|'+'
string|"' -o username=guest'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Remove the Domain Name from user name'
nl|'\n'
indent|'            '
name|'mount_options'
op|'='
name|'self'
op|'.'
name|'username_regex'
op|'.'
name|'sub'
op|'('
string|"r'\\1=\\2'"
op|','
name|'mount_options'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mount_options'
op|'.'
name|'strip'
op|'('
string|'", "'
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtAOEVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtAOEVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach AoE volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Call the factory here so we can support'
nl|'\n'
comment|'# more than x86 architectures.'
nl|'\n'
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
op|'.'
name|'InitiatorConnector'
op|'.'
name|'factory'
op|'('
nl|'\n'
string|"'AOE'"
op|','
name|'utils'
op|'.'
name|'_get_root_helper'
op|'('
op|')'
op|','
nl|'\n'
name|'device_scan_attempts'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_aoe_discover_tries'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Calling os-brick to attach AoE Volume"'
op|')'
newline|'\n'
name|'device_info'
op|'='
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Attached AoE volume %s"'
op|','
name|'device_info'
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'device_info'
op|'['
string|"'path'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"calling os-brick to detach AoE Volume %s"'
op|','
nl|'\n'
name|'connection_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Disconnected AoE Volume %s"'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtGlusterfsVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtGlusterfsVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for GlusterFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to glusterfs."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGlusterfsVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_path
dedent|''
name|'def'
name|'_get_device_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGlusterfsVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'gluster'"
name|'in'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'qemu_allowed_storage_drivers'
op|':'
newline|'\n'
indent|'            '
name|'vol_name'
op|'='
name|'data'
op|'['
string|"'export'"
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'source_host'
op|'='
name|'data'
op|'['
string|"'export'"
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'0'
op|']'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_ports'
op|'='
op|'['
string|"'24007'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'network'"
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
string|"'gluster'"
newline|'\n'
name|'conf'
op|'.'
name|'source_hosts'
op|'='
op|'['
name|'source_host'
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_name'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'vol_name'
op|','
name|'data'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'conf'
op|'.'
name|'driver_format'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'format'"
op|','
string|"'raw'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'gluster'"
name|'not'
name|'in'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'qemu_allowed_storage_drivers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_ensure_mounted'
op|'('
name|'data'
op|'['
string|"'export'"
op|']'
op|','
name|'data'
op|'.'
name|'get'
op|'('
string|"'options'"
op|')'
op|')'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_device_path'
op|'('
name|'connection_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
nl|'\n'
name|'if'
string|"'gluster'"
name|'in'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'qemu_allowed_storage_drivers'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'export'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'export'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'umount'"
op|','
name|'mount_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'target is busy'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"The GlusterFS share %s is still in use."'
op|','
name|'export'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Couldn\'t unmount the GlusterFS share %s"'
op|')'
op|','
nl|'\n'
name|'export'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_mounted
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ensure_mounted'
op|'('
name|'self'
op|','
name|'glusterfs_export'
op|','
name|'options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@type glusterfs_export: string\n           @type options: string\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'glusterfs_export'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
name|'glusterfs_export'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mount_glusterfs'
op|'('
name|'mount_path'
op|','
name|'glusterfs_export'
op|','
nl|'\n'
name|'options'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|_mount_glusterfs
dedent|''
name|'def'
name|'_mount_glusterfs'
op|'('
name|'self'
op|','
name|'mount_path'
op|','
name|'glusterfs_share'
op|','
nl|'\n'
name|'options'
op|'='
name|'None'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount glusterfs export to mount path."""'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
name|'gluster_cmd'
op|'='
op|'['
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'glusterfs'"
op|']'
newline|'\n'
name|'if'
name|'options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'gluster_cmd'
op|'.'
name|'extend'
op|'('
name|'options'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'gluster_cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'glusterfs_share'
op|','
name|'mount_path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'gluster_cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'glusterfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtFibreChannelVolumeDriver
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtFibreChannelVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Fibre Channel Network volumes to libvirt."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtFibreChannelVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Call the factory here so we can support'
nl|'\n'
comment|'# more than x86 architectures.'
nl|'\n'
name|'self'
op|'.'
name|'connector'
op|'='
name|'connector'
op|'.'
name|'InitiatorConnector'
op|'.'
name|'factory'
op|'('
nl|'\n'
string|"'FIBRE_CHANNEL'"
op|','
name|'utils'
op|'.'
name|'_get_root_helper'
op|'('
op|')'
op|','
nl|'\n'
name|'use_multipath'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iscsi_use_multipath'
op|','
nl|'\n'
name|'device_scan_attempts'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_iscsi_scan_tries'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtFibreChannelVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach the volume to instance_name."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Calling os-brick to attach FC Volume"'
op|')'
newline|'\n'
name|'device_info'
op|'='
name|'self'
op|'.'
name|'connector'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Attached FC volume %s"'
op|','
name|'device_info'
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'device_info'
op|'['
string|"'path'"
op|']'
newline|'\n'
name|'if'
string|"'multipath_id'"
name|'in'
name|'device_info'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'multipath_id'"
op|']'
op|'='
name|'device_info'
op|'['
string|"'multipath_id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"calling os-brick to detach FC Volume"'
op|')'
newline|'\n'
comment|'# TODO(walter-boring) eliminated the need for preserving'
nl|'\n'
comment|'# multipath_id.  Use scsi_id instead of multipath -ll'
nl|'\n'
comment|'# This will then eliminate the need to pass anything in'
nl|'\n'
comment|'# the 2nd param of disconnect_volume and be consistent'
nl|'\n'
comment|'# with the rest of the connectors.'
nl|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|','
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Disconnected FC Volume %s"'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'LibvirtFibreChannelVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtScalityVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtScalityVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Scality SOFS Nova driver. Provide hypervisors with access\n    to sparse files on SOFS.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to SOFS and check connection."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtScalityVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_path
dedent|''
name|'def'
name|'_get_device_path'
op|'('
name|'self'
op|','
name|'connection_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_mount_point'
op|','
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'sofs_path'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtScalityVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
nl|'\n'
comment|"# The default driver cache policy is 'none', and this causes"
nl|'\n'
comment|'# qemu/kvm to open the volume file with O_DIRECT, which is'
nl|'\n'
comment|'# rejected by FUSE (on kernels older than 3.3). Scality SOFS'
nl|'\n'
comment|'# is FUSE based, so we must provide a more sensible default.'
nl|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|"'writethrough'"
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'self'
op|'.'
name|'_check_prerequisites'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mount_sofs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_device_path'
op|'('
name|'connection_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_prerequisites
dedent|''
name|'def'
name|'_check_prerequisites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sanity checks before attempting to mount SOFS."""'
newline|'\n'
nl|'\n'
comment|'# config is mandatory'
nl|'\n'
name|'config'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_config'
newline|'\n'
name|'if'
name|'not'
name|'config'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Value required for \'scality_sofs_config\'"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# config can be a file path or a URL, check it'
nl|'\n'
dedent|''
name|'if'
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'config'
op|')'
op|'.'
name|'scheme'
op|'=='
string|"''"
op|':'
newline|'\n'
comment|'# turn local path into URL'
nl|'\n'
indent|'            '
name|'config'
op|'='
string|"'file://%s'"
op|'%'
name|'config'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'urllib'
op|'.'
name|'request'
op|'.'
name|'urlopen'
op|'('
name|'config'
op|','
name|'timeout'
op|'='
number|'5'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'urllib'
op|'.'
name|'error'
op|'.'
name|'URLError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot access \'scality_sofs_config\': %s"'
op|')'
op|'%'
name|'e'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# mount.sofs must be installed'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'access'
op|'('
string|"'/sbin/mount.sofs'"
op|','
name|'os'
op|'.'
name|'X_OK'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot execute /sbin/mount.sofs"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_mount_sofs
dedent|''
dedent|''
name|'def'
name|'_mount_sofs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_config'
newline|'\n'
name|'mount_path'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_mount_point'
newline|'\n'
name|'sysdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'mount_path'
op|','
string|"'sys'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'sysdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'sofs'"
op|','
name|'config'
op|','
name|'mount_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'sysdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot mount Scality SOFS, check syslog for errors"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtGPFSVolumeDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtGPFSVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class for volumes backed by gpfs volume."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtGPFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGPFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"file"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtQuobyteVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtQuobyteVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for Quobyte."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to Quobyte."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtQuobyteVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtQuobyteVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
name|'quobyte'
op|'.'
name|'SOURCE_PROTOCOL'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
name|'quobyte'
op|'.'
name|'SOURCE_TYPE'
newline|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
name|'quobyte'
op|'.'
name|'DRIVER_CACHE'
newline|'\n'
name|'conf'
op|'.'
name|'driver_io'
op|'='
name|'quobyte'
op|'.'
name|'DRIVER_IO'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'format'"
op|','
string|"'raw'"
op|')'
newline|'\n'
nl|'\n'
name|'quobyte_volume'
op|'='
name|'self'
op|'.'
name|'_normalize_url'
op|'('
name|'data'
op|'['
string|"'export'"
op|']'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_get_mount_point_for_share'
op|'('
name|'quobyte_volume'
op|')'
op|','
nl|'\n'
name|'data'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'path'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|')'
newline|'\n'
DECL|member|connect_volume
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume."""'
newline|'\n'
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'quobyte_volume'
op|'='
name|'self'
op|'.'
name|'_normalize_url'
op|'('
name|'data'
op|'['
string|"'export'"
op|']'
op|')'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_point_for_share'
op|'('
name|'quobyte_volume'
op|')'
newline|'\n'
name|'mounted'
op|'='
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
nl|'\n'
name|'quobyte'
op|'.'
name|'SOURCE_PROTOCOL'
nl|'\n'
op|'+'
string|"'@'"
op|'+'
name|'quobyte_volume'
op|')'
newline|'\n'
name|'if'
name|'mounted'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'stat'
op|'('
name|'mount_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOTCONN'
op|':'
newline|'\n'
indent|'                    '
name|'mounted'
op|'='
name|'False'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Fixing previous mount %s which was not'"
nl|'\n'
string|"' unmounted correctly.'"
op|')'
op|','
name|'mount_path'
op|')'
newline|'\n'
name|'quobyte'
op|'.'
name|'umount_volume'
op|'('
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'mounted'
op|':'
newline|'\n'
indent|'            '
name|'quobyte'
op|'.'
name|'mount_volume'
op|'('
name|'quobyte_volume'
op|','
nl|'\n'
name|'mount_path'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'quobyte_client_cfg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'quobyte'
op|'.'
name|'validate_volume'
op|'('
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|')'
newline|'\n'
DECL|member|disconnect_volume
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
nl|'\n'
name|'quobyte_volume'
op|'='
name|'self'
op|'.'
name|'_normalize_url'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
newline|'\n'
name|'mount_path'
op|'='
name|'self'
op|'.'
name|'_get_mount_point_for_share'
op|'('
name|'quobyte_volume'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
string|"'quobyte@'"
op|'+'
name|'quobyte_volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'quobyte'
op|'.'
name|'umount_volume'
op|'('
name|'mount_path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Trying to disconnected unmounted volume at %s"'
op|')'
op|','
nl|'\n'
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_normalize_url
dedent|''
dedent|''
name|'def'
name|'_normalize_url'
op|'('
name|'self'
op|','
name|'export'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'protocol'
op|'='
name|'quobyte'
op|'.'
name|'SOURCE_PROTOCOL'
op|'+'
string|'"://"'
newline|'\n'
name|'if'
name|'export'
op|'.'
name|'startswith'
op|'('
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'export'
op|'='
name|'export'
op|'['
name|'len'
op|'('
name|'protocol'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'export'
newline|'\n'
nl|'\n'
DECL|member|_get_mount_point_for_share
dedent|''
name|'def'
name|'_get_mount_point_for_share'
op|'('
name|'self'
op|','
name|'quobyte_volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return mount point for Quobyte volume.\n\n        :param quobyte_volume: Example: storage-host/openstack-volumes\n        """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'quobyte_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'quobyte_volume'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

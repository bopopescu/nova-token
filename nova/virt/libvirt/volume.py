begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Volume drivers for libvirt."""'
newline|'\n'
nl|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'virtutils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|volume_opts
name|'volume_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_iscsi_scan_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'number of times to rescan iSCSI target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rbd_user'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'the RADOS client name for accessing rbd volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rbd_secret_uuid'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'the libvirt uuid of the secret for the rbd_user'"
nl|'\n'
string|"'volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Dir where the nfs volume is mounted on the compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_mount_options'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Mount options passed to the nfs client. See section '"
nl|'\n'
string|"'of the nfs man page for details'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'num_aoe_discover_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'number of times to rediscover AoE target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'glusterfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Dir where the glusterfs volume is mounted on the '"
nl|'\n'
string|"'compute node'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'volume_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtBaseVolumeDriver
name|'class'
name|'LibvirtBaseVolumeDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for volume drivers."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
name|'is_block_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'is_block_dev'
op|'='
name|'is_block_dev'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
nl|'\n'
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'driver_name'
op|'='
name|'virtutils'
op|'.'
name|'pick_disk_driver_name'
op|'('
name|'self'
op|'.'
name|'is_block_dev'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'device_type'
op|'='
name|'disk_info'
op|'['
string|"'type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
string|'"raw"'
newline|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|'"none"'
newline|'\n'
name|'conf'
op|'.'
name|'target_dev'
op|'='
name|'disk_info'
op|'['
string|"'dev'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'target_bus'
op|'='
name|'disk_info'
op|'['
string|"'bus'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'serial'
op|'='
name|'connection_info'
op|'.'
name|'get'
op|'('
string|"'serial'"
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class for volumes backed by local file."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume to a local device."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtFakeVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtFakeVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach fake volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtFakeVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume to a fake device."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtFakeVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"network"'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
string|'"fake"'
newline|'\n'
name|'conf'
op|'.'
name|'source_host'
op|'='
string|'"fake"'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtNetVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtNetVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"network"'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
name|'connection_info'
op|'['
string|"'driver_volume_type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_host'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'netdisk_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'auth_enabled'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'auth_enabled'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'conf'
op|'.'
name|'source_protocol'
op|'=='
string|"'rbd'"
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'rbd_secret_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
name|'CONF'
op|'.'
name|'rbd_secret_uuid'
newline|'\n'
name|'auth_enabled'
op|'='
name|'True'
comment|'# Force authentication locally'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'rbd_user'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'.'
name|'auth_username'
op|'='
name|'CONF'
op|'.'
name|'rbd_user'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'auth_enabled'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'auth_username'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_username'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'auth_username'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_type'
op|'='
name|'netdisk_properties'
op|'['
string|"'secret_type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_secret_uuid'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'secret_uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtISCSIVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtISCSIVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_iscsiadm
dedent|''
name|'def'
name|'_run_iscsiadm'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
name|'iscsi_command'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
number|'0'
op|')'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
op|'*'
name|'iscsi_command'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"iscsiadm %s: stdout=%s stderr=%s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_command'
op|','
name|'out'
op|','
name|'err'
op|')'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_iscsiadm_update
dedent|''
name|'def'
name|'_iscsiadm_update'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
name|'property_key'
op|','
name|'property_value'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iscsi_command'
op|'='
op|'('
string|"'--op'"
op|','
string|"'update'"
op|','
string|"'-n'"
op|','
name|'property_key'
op|','
nl|'\n'
string|"'-v'"
op|','
name|'property_value'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
name|'iscsi_command'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|member|connect_volume
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach the volume to instance_name."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'iscsi_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
comment|'# NOTE(vish): If we are on the same host as nova volume, the'
nl|'\n'
comment|"#             discovery makes the target so we don't need to"
nl|'\n'
comment|'#             run --op new. Therefore, we check to see if the'
nl|'\n'
comment|'#             target exists, and if we get 255 (Not Found), then'
nl|'\n'
comment|'#             we run --op new. This will also happen if another'
nl|'\n'
comment|'#             volume is using the same target.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|'# iscsiadm returns 21 for "No records found" after version 2.0-871'
nl|'\n'
indent|'            '
name|'if'
name|'exc'
op|'.'
name|'exit_code'
name|'in'
op|'['
number|'21'
op|','
number|'255'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|"'--op'"
op|','
string|"'new'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'iscsi_properties'
op|'.'
name|'get'
op|'('
string|"'auth_method'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.session.auth.authmethod"'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'auth_method'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.session.auth.username"'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'auth_username'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.session.auth.password"'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'auth_password'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): If we have another lun on the same target, we may'
nl|'\n'
comment|'#             have a duplicate login'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|'"--login"'
op|','
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
string|'"node.startup"'
op|','
string|'"automatic"'
op|')'
newline|'\n'
nl|'\n'
name|'host_device'
op|'='
op|'('
string|'"/dev/disk/by-path/ip-%s-iscsi-%s-lun-%s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|','
nl|'\n'
name|'iscsi_properties'
op|'.'
name|'get'
op|'('
string|"'target_lun'"
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The /dev/disk/by-path/... node is not always present immediately'
nl|'\n'
comment|'# TODO(justinsb): This retry-with-delay is a pattern, move to utils?'
nl|'\n'
name|'tries'
op|'='
number|'0'
newline|'\n'
name|'disk_dev'
op|'='
name|'disk_info'
op|'['
string|"'dev'"
op|']'
newline|'\n'
name|'while'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'host_device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'tries'
op|'>='
name|'CONF'
op|'.'
name|'num_iscsi_scan_tries'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"iSCSI device not found at %s"'
op|')'
nl|'\n'
op|'%'
op|'('
name|'host_device'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"ISCSI volume not yet found at: %(disk_dev)s. "'
nl|'\n'
string|'"Will rescan & retry.  Try number: %(tries)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# The rescan isn't documented as being necessary(?), but it helps"
nl|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|'"--rescan"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'tries'
op|'='
name|'tries'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'host_device'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
name|'tries'
op|'**'
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'tries'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found iSCSI node %(disk_dev)s "'
nl|'\n'
string|'"(after %(tries)s rescans)"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'host_device'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|member|disconnect_volume
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'disk_dev'
op|')'
newline|'\n'
name|'iscsi_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
comment|'# NOTE(vish): Only disconnect from the target if no luns from the'
nl|'\n'
comment|'#             target are in use.'
nl|'\n'
name|'device_prefix'
op|'='
op|'('
string|'"/dev/disk/by-path/ip-%s-iscsi-%s-lun-"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|')'
op|')'
newline|'\n'
name|'devices'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_all_block_devices'
op|'('
op|')'
newline|'\n'
name|'devices'
op|'='
op|'['
name|'dev'
name|'for'
name|'dev'
name|'in'
name|'devices'
name|'if'
name|'dev'
op|'.'
name|'startswith'
op|'('
name|'device_prefix'
op|')'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'devices'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
string|'"node.startup"'
op|','
string|'"manual"'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|'"--logout"'
op|','
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|"'--op'"
op|','
string|"'delete'"
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtNFSVolumeDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtNFSVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for NFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to nfs."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtNFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtNFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'disk_info'
op|')'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'_ensure_mounted'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'path'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|_ensure_mounted
dedent|''
name|'def'
name|'_ensure_mounted'
op|'('
name|'self'
op|','
name|'nfs_export'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type nfs_export: string\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_hash_str'
op|'('
name|'nfs_export'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mount_nfs'
op|'('
name|'mount_path'
op|','
name|'nfs_export'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|_mount_nfs
dedent|''
name|'def'
name|'_mount_nfs'
op|'('
name|'self'
op|','
name|'mount_path'
op|','
name|'nfs_share'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount nfs export to mount path."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_path_exists'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct the NFS mount command.'
nl|'\n'
dedent|''
name|'nfs_cmd'
op|'='
op|'['
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'nfs'"
op|']'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'nfs_mount_options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-o'"
op|','
name|'CONF'
op|'.'
name|'nfs_mount_options'
op|']'
op|')'
newline|'\n'
dedent|''
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'nfs_share'
op|','
name|'mount_path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'nfs_cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'nfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_hash_str
name|'def'
name|'get_hash_str'
op|'('
name|'base_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns string that represents hash of base_str (in hex format)."""'
newline|'\n'
name|'return'
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'base_str'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_path_exists
name|'def'
name|'_path_exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check path."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'stat'"
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtAOEVolumeDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtAOEVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach AoE volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_aoe_discover
dedent|''
name|'def'
name|'_aoe_discover'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call aoe-discover (aoe-tools) AoE Discover."""'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'aoe-discover'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
number|'0'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_aoe_revalidate
dedent|''
name|'def'
name|'_aoe_revalidate'
op|'('
name|'self'
op|','
name|'aoedev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Revalidate the LUN Geometry (When an AoE ID is reused)."""'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'aoe-revalidate'"
op|','
name|'aoedev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
number|'0'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shelf'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'target_shelf'"
op|']'
newline|'\n'
name|'lun'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'target_lun'"
op|']'
newline|'\n'
name|'aoedev'
op|'='
string|"'e%s.%s'"
op|'%'
op|'('
name|'shelf'
op|','
name|'lun'
op|')'
newline|'\n'
name|'aoedevpath'
op|'='
string|"'/dev/etherd/%s'"
op|'%'
op|'('
name|'aoedev'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'aoedevpath'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(jbr_): If aoedevpath already exists, revalidate the LUN.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_aoe_revalidate'
op|'('
name|'aoedev'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(jbr_): If aoedevpath does not exist, do a discover.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_aoe_discover'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE(jbr_): Device path is not always present immediately'
nl|'\n'
DECL|function|_wait_for_device_discovery
dedent|''
name|'def'
name|'_wait_for_device_discovery'
op|'('
name|'aoedevpath'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'aoedevpath'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'tries'
op|'>='
name|'CONF'
op|'.'
name|'num_aoe_discover_tries'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"AoE device not found at %s"'
op|')'
op|'%'
nl|'\n'
op|'('
name|'aoedevpath'
op|')'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"AoE volume not yet found at: %(aoedevpath)s. "'
nl|'\n'
string|'"Try number: %(tries)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_aoe_discover'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'tries'
op|'='
number|'0'
newline|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'FixedIntervalLoopingCall'
op|'('
name|'_wait_for_device_discovery'
op|','
nl|'\n'
name|'aoedevpath'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'2'
op|')'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
newline|'\n'
name|'if'
name|'tries'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found AoE device %(aoedevpath)s "'
nl|'\n'
string|'"(after %(tries)s rediscover)"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'aoedevpath'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtGlusterfsVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtGlusterfsVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for GlusterFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to glusterfs."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGlusterfsVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGlusterfsVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'_ensure_mounted'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'path'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|_ensure_mounted
dedent|''
name|'def'
name|'_ensure_mounted'
op|'('
name|'self'
op|','
name|'glusterfs_export'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type glusterfs_export: string\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'self'
op|'.'
name|'get_hash_str'
op|'('
name|'glusterfs_export'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mount_glusterfs'
op|'('
name|'mount_path'
op|','
name|'glusterfs_export'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|_mount_glusterfs
dedent|''
name|'def'
name|'_mount_glusterfs'
op|'('
name|'self'
op|','
name|'mount_path'
op|','
name|'glusterfs_share'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount glusterfs export to mount path."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_path_exists'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'glusterfs'"
op|','
name|'glusterfs_share'
op|','
nl|'\n'
name|'mount_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'glusterfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_hash_str
name|'def'
name|'get_hash_str'
op|'('
name|'base_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns string that represents hash of base_str (in hex format)."""'
newline|'\n'
name|'return'
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'base_str'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_path_exists
name|'def'
name|'_path_exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check path."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'stat'"
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

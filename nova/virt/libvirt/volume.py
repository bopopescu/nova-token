begin_unit
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# (c) Copyright 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Volume drivers for libvirt."""'
newline|'\n'
nl|'\n'
name|'import'
name|'glob'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib2'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'strutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'import'
name|'six'
op|'.'
name|'moves'
op|'.'
name|'urllib'
op|'.'
name|'parse'
name|'as'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'loopingcall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'storage'
name|'import'
name|'linuxscsi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'libvirt_utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|volume_opts
name|'volume_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_iscsi_scan_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to rescan iSCSI target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_iser_scan_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to rescan iSER target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rbd_user'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The RADOS client name for accessing rbd volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rbd_secret_uuid'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The libvirt UUID of the secret for the rbd_user'"
nl|'\n'
string|"'volumes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory where the NFS volume is mounted on the'"
nl|'\n'
string|"' compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'nfs_mount_options'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Mount options passedf to the NFS client. See section '"
nl|'\n'
string|"'of the nfs man page for details'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'num_aoe_discover_tries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to rediscover AoE target to find volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'glusterfs_mount_point_base'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'mnt'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory where the glusterfs volume is mounted on the '"
nl|'\n'
string|"'compute node'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'iscsi_use_multipath'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use multipath connection of the iSCSI volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'iser_use_multipath'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use multipath connection of the iSER volume'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scality_sofs_config'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path or URL to Scality SOFS configuration file'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scality_sofs_mount_point'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$state_path/scality'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Base dir where Scality SOFS shall be mounted'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'qemu_allowed_storage_drivers'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Protocols listed here will be accessed directly '"
nl|'\n'
string|"'from QEMU. Currently supported protocols: [gluster]'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'volume_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtBaseVolumeDriver
name|'class'
name|'LibvirtBaseVolumeDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for volume drivers."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
name|'is_block_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'is_block_dev'
op|'='
name|'is_block_dev'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'driver_name'
op|'='
name|'libvirt_utils'
op|'.'
name|'pick_disk_driver_name'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_get_hypervisor_version'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'is_block_dev'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_device'
op|'='
name|'disk_info'
op|'['
string|"'type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
string|'"raw"'
newline|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|'"none"'
newline|'\n'
name|'conf'
op|'.'
name|'target_dev'
op|'='
name|'disk_info'
op|'['
string|"'dev'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'target_bus'
op|'='
name|'disk_info'
op|'['
string|"'bus'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'serial'
op|'='
name|'connection_info'
op|'.'
name|'get'
op|'('
string|"'serial'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Support for block size tuning'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
string|"'data'"
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'logical_block_size'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'logical_block_size'
op|'='
name|'data'
op|'['
string|"'logical_block_size'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'physical_block_size'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'physical_block_size'
op|'='
name|'data'
op|'['
string|"'physical_block_size'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Extract rate_limit control parameters'
nl|'\n'
dedent|''
name|'if'
string|"'qos_specs'"
name|'in'
name|'data'
name|'and'
name|'data'
op|'['
string|"'qos_specs'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'tune_opts'
op|'='
op|'['
string|"'total_bytes_sec'"
op|','
string|"'read_bytes_sec'"
op|','
nl|'\n'
string|"'write_bytes_sec'"
op|','
string|"'total_iops_sec'"
op|','
nl|'\n'
string|"'read_iops_sec'"
op|','
string|"'write_iops_sec'"
op|']'
newline|'\n'
name|'specs'
op|'='
name|'data'
op|'['
string|"'qos_specs'"
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'specs'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'specs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'k'
name|'in'
name|'tune_opts'
op|':'
newline|'\n'
indent|'                        '
name|'new_key'
op|'='
string|"'disk_'"
op|'+'
name|'k'
newline|'\n'
name|'setattr'
op|'('
name|'conf'
op|','
name|'new_key'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'Unknown content in connection_info/'"
nl|'\n'
string|"'qos_specs: %s'"
op|')'
op|','
name|'specs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Extract access_mode control parameters'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'access_mode'"
name|'in'
name|'data'
name|'and'
name|'data'
op|'['
string|"'access_mode'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'access_mode'
op|'='
name|'data'
op|'['
string|"'access_mode'"
op|']'
newline|'\n'
name|'if'
name|'access_mode'
name|'in'
op|'('
string|"'ro'"
op|','
string|"'rw'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'.'
name|'readonly'
op|'='
name|'access_mode'
op|'=='
string|"'ro'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Unknown content in '"
nl|'\n'
string|"'connection_info/access_mode: %s'"
op|')'
op|','
nl|'\n'
name|'access_mode'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidVolumeAccessMode'
op|'('
nl|'\n'
name|'access_mode'
op|'='
name|'access_mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class for volumes backed by local file."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtFakeVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtFakeVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach fake volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtFakeVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtFakeVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"network"'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
string|'"fake"'
newline|'\n'
name|'conf'
op|'.'
name|'source_name'
op|'='
string|'"fake"'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtNetVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtNetVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtNetVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'netdisk_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"network"'
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
name|'connection_info'
op|'['
string|"'driver_volume_type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_name'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_hosts'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'hosts'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_ports'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'ports'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'auth_enabled'
op|'='
name|'netdisk_properties'
op|'.'
name|'get'
op|'('
string|"'auth_enabled'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'conf'
op|'.'
name|'source_protocol'
op|'=='
string|"'rbd'"
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
newline|'\n'
name|'auth_enabled'
op|'='
name|'True'
comment|'# Force authentication locally'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
op|':'
newline|'\n'
indent|'                '
name|'conf'
op|'.'
name|'auth_username'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'auth_enabled'
op|':'
newline|'\n'
indent|'            '
name|'conf'
op|'.'
name|'auth_username'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_username'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'auth_username'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_type'
op|'='
name|'netdisk_properties'
op|'['
string|"'secret_type'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'auth_secret_uuid'
op|'='
op|'('
name|'conf'
op|'.'
name|'auth_secret_uuid'
name|'or'
nl|'\n'
name|'netdisk_properties'
op|'['
string|"'secret_uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtISCSIVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtISCSIVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
nl|'\n'
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'num_scan_tries'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_iscsi_scan_tries'
newline|'\n'
name|'self'
op|'.'
name|'use_multipath'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iscsi_use_multipath'
newline|'\n'
nl|'\n'
DECL|member|_run_iscsiadm
dedent|''
name|'def'
name|'_run_iscsiadm'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
name|'iscsi_command'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
number|'0'
op|')'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
op|'*'
name|'iscsi_command'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'msg'
op|'='
op|'('
string|"'iscsiadm %(command)s: stdout=%(out)s stderr=%(err)s'"
op|'%'
nl|'\n'
op|'{'
string|"'command'"
op|':'
name|'iscsi_command'
op|','
string|"'out'"
op|':'
name|'out'
op|','
string|"'err'"
op|':'
name|'err'
op|'}'
op|')'
newline|'\n'
comment|'# NOTE(bpokorny): iscsi_command can contain passwords so we need to'
nl|'\n'
comment|'# sanitize the password in the message.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'strutils'
op|'.'
name|'mask_password'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_iscsiadm_update
dedent|''
name|'def'
name|'_iscsiadm_update'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
name|'property_key'
op|','
name|'property_value'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'iscsi_command'
op|'='
op|'('
string|"'--op'"
op|','
string|"'update'"
op|','
string|"'-n'"
op|','
name|'property_key'
op|','
nl|'\n'
string|"'-v'"
op|','
name|'property_value'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
name|'iscsi_command'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_target_portals_from_iscsiadm_output
dedent|''
name|'def'
name|'_get_target_portals_from_iscsiadm_output'
op|'('
name|'self'
op|','
name|'output'
op|')'
op|':'
newline|'\n'
comment|'# return both portals and iqns'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# as we are parsing a command line utility, allow for the'
nl|'\n'
comment|'# possibility that additional debug data is spewed in the'
nl|'\n'
comment|'# stream, and only grab actual ip / iqn lines.'
nl|'\n'
indent|'        '
name|'targets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'data'
name|'in'
op|'['
name|'line'
op|'.'
name|'split'
op|'('
op|')'
name|'for'
name|'line'
name|'in'
name|'output'
op|'.'
name|'splitlines'
op|'('
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'data'
op|')'
op|'=='
number|'2'
name|'and'
name|'data'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'iqn.'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'targets'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'targets'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'host_device'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|')'
newline|'\n'
DECL|member|connect_volume
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach the volume to instance_name."""'
newline|'\n'
name|'iscsi_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'use_multipath'
op|':'
newline|'\n'
comment|'# multipath installed, discovering other targets if available'
nl|'\n'
comment|'# multipath should be configured on the nova-compute node,'
nl|'\n'
comment|'# in order to fit storage vendor'
nl|'\n'
indent|'            '
name|'out'
op|'='
name|'self'
op|'.'
name|'_run_iscsiadm_bare'
op|'('
op|'['
string|"'-m'"
op|','
nl|'\n'
string|"'discovery'"
op|','
nl|'\n'
string|"'-t'"
op|','
nl|'\n'
string|"'sendtargets'"
op|','
nl|'\n'
string|"'-p'"
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|']'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'255'
op|']'
op|')'
op|'['
number|'0'
op|']'
name|'or'
string|'""'
newline|'\n'
nl|'\n'
name|'for'
name|'ip'
op|','
name|'iqn'
name|'in'
name|'self'
op|'.'
name|'_get_target_portals_from_iscsiadm_output'
op|'('
name|'out'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'props'
op|'='
name|'iscsi_properties'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'target_portal'"
op|']'
op|'='
name|'ip'
newline|'\n'
name|'props'
op|'['
string|"'target_iqn'"
op|']'
op|'='
name|'iqn'
newline|'\n'
name|'self'
op|'.'
name|'_connect_to_iscsi_portal'
op|'('
name|'props'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_rescan_iscsi'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_connect_to_iscsi_portal'
op|'('
name|'iscsi_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# Detect new/resized LUNs for existing sessions'
nl|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|'"--rescan"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'host_device'
op|'='
name|'self'
op|'.'
name|'_get_host_device'
op|'('
name|'iscsi_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# The /dev/disk/by-path/... node is not always present immediately'
nl|'\n'
comment|'# TODO(justinsb): This retry-with-delay is a pattern, move to utils?'
nl|'\n'
name|'tries'
op|'='
number|'0'
newline|'\n'
name|'disk_dev'
op|'='
name|'disk_info'
op|'['
string|"'dev'"
op|']'
newline|'\n'
name|'while'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'host_device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'tries'
op|'>='
name|'self'
op|'.'
name|'num_scan_tries'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"iSCSI device not found at %s"'
op|')'
nl|'\n'
op|'%'
op|'('
name|'host_device'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"ISCSI volume not yet found at: %(disk_dev)s. "'
nl|'\n'
string|'"Will rescan & retry.  Try number: %(tries)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'disk_dev'"
op|':'
name|'disk_dev'
op|','
string|"'tries'"
op|':'
name|'tries'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|"# The rescan isn't documented as being necessary(?), but it helps"
nl|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|'"--rescan"'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'tries'
op|'='
name|'tries'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'host_device'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
name|'tries'
op|'**'
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'tries'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Found iSCSI node %(disk_dev)s "'
nl|'\n'
string|'"(after %(tries)s rescans)"'
op|','
nl|'\n'
op|'{'
string|"'disk_dev'"
op|':'
name|'disk_dev'
op|','
nl|'\n'
string|"'tries'"
op|':'
name|'tries'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'use_multipath'
op|':'
newline|'\n'
comment|'# we use the multipath device instead of the single path device'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rescan_multipath'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'multipath_device'
op|'='
name|'self'
op|'.'
name|'_get_multipath_device_name'
op|'('
name|'host_device'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'multipath_device'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'host_device'
op|'='
name|'multipath_device'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'multipath_id'"
op|']'
op|'='
name|'multipath_device'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'host_device'"
op|']'
op|'='
name|'host_device'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|')'
newline|'\n'
DECL|member|disconnect_volume
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
name|'iscsi_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'host_device'
op|'='
name|'self'
op|'.'
name|'_get_host_device'
op|'('
name|'iscsi_properties'
op|')'
newline|'\n'
name|'multipath_device'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'use_multipath'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'multipath_id'"
name|'in'
name|'iscsi_properties'
op|':'
newline|'\n'
indent|'                '
name|'multipath_device'
op|'='
op|'('
string|"'/dev/mapper/%s'"
op|'%'
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'multipath_id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'multipath_device'
op|'='
name|'self'
op|'.'
name|'_get_multipath_device_name'
op|'('
name|'host_device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'super'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'disk_dev'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'use_multipath'
name|'and'
name|'multipath_device'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_disconnect_volume_multipath_iscsi'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
name|'multipath_device'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): Only disconnect from the target if no luns from the'
nl|'\n'
comment|'#             target are in use.'
nl|'\n'
dedent|''
name|'device_prefix'
op|'='
op|'('
string|'"/dev/disk/by-path/ip-%s-iscsi-%s-lun-"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|')'
op|')'
newline|'\n'
name|'devices'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_get_all_block_devices'
op|'('
op|')'
newline|'\n'
name|'devices'
op|'='
op|'['
name|'dev'
name|'for'
name|'dev'
name|'in'
name|'devices'
name|'if'
name|'dev'
op|'.'
name|'startswith'
op|'('
name|'device_prefix'
op|')'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'devices'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnect_from_iscsi_portal'
op|'('
name|'iscsi_properties'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'host_device'
name|'not'
name|'in'
name|'devices'
op|':'
newline|'\n'
comment|'# Delete device if LUN is not in use by another instance'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_device'
op|'('
name|'host_device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_device
dedent|''
dedent|''
name|'def'
name|'_delete_device'
op|'('
name|'self'
op|','
name|'device_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'device_path'
op|')'
op|')'
newline|'\n'
name|'delete_control'
op|'='
string|"'/sys/block/'"
op|'+'
name|'device_name'
op|'+'
string|"'/device/delete'"
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'delete_control'
op|')'
op|':'
newline|'\n'
comment|"# Copy '1' from stdin to the device delete control file"
nl|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'cp'"
op|','
string|"'/dev/stdin'"
op|','
name|'delete_control'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'1'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"Unable to delete volume device %s"'
op|')'
op|','
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_multipath_device_descriptor
dedent|''
dedent|''
name|'def'
name|'_remove_multipath_device_descriptor'
op|'('
name|'self'
op|','
name|'disk_descriptor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_descriptor'
op|'='
name|'disk_descriptor'
op|'.'
name|'replace'
op|'('
string|"'/dev/mapper/'"
op|','
string|"''"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_multipath'
op|'('
op|'['
string|"'-f'"
op|','
name|'disk_descriptor'
op|']'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|'# Because not all cinder drivers need to remove the dev mapper,'
nl|'\n'
comment|'# here just logs a warning to avoid affecting those drivers in'
nl|'\n'
comment|'# exceptional cases.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'Failed to remove multipath device descriptor '"
nl|'\n'
string|"'%(dev_mapper)s. Exception message: %(msg)s'"
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'dev_mapper'"
op|':'
name|'disk_descriptor'
op|','
nl|'\n'
string|"'msg'"
op|':'
name|'exc'
op|'.'
name|'message'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disconnect_volume_multipath_iscsi
dedent|''
dedent|''
name|'def'
name|'_disconnect_volume_multipath_iscsi'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
nl|'\n'
name|'multipath_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_rescan_iscsi'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_rescan_multipath'
op|'('
op|')'
newline|'\n'
name|'block_devices'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'_get_all_block_devices'
op|'('
op|')'
newline|'\n'
name|'devices'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'dev'
name|'in'
name|'block_devices'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|'"/mapper/"'
name|'in'
name|'dev'
op|':'
newline|'\n'
indent|'                '
name|'devices'
op|'.'
name|'append'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'mpdev'
op|'='
name|'self'
op|'.'
name|'_get_multipath_device_name'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'mpdev'
op|':'
newline|'\n'
indent|'                    '
name|'devices'
op|'.'
name|'append'
op|'('
name|'mpdev'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do a discovery to find all targets.'
nl|'\n'
comment|'# Targets for multiple paths for the same multipath device'
nl|'\n'
comment|'# may not be the same.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'out'
op|'='
name|'self'
op|'.'
name|'_run_iscsiadm_bare'
op|'('
op|'['
string|"'-m'"
op|','
nl|'\n'
string|"'discovery'"
op|','
nl|'\n'
string|"'-t'"
op|','
nl|'\n'
string|"'sendtargets'"
op|','
nl|'\n'
string|"'-p'"
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|']'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'255'
op|']'
op|')'
op|'['
number|'0'
op|']'
name|'or'
string|'""'
newline|'\n'
nl|'\n'
name|'ips_iqns'
op|'='
name|'self'
op|'.'
name|'_get_target_portals_from_iscsiadm_output'
op|'('
name|'out'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'devices'
op|':'
newline|'\n'
comment|'# disconnect if no other multipath devices'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnect_mpath'
op|'('
name|'iscsi_properties'
op|','
name|'ips_iqns'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# Get a target for all other multipath devices'
nl|'\n'
dedent|''
name|'other_iqns'
op|'='
op|'['
name|'self'
op|'.'
name|'_get_multipath_iqn'
op|'('
name|'device'
op|')'
nl|'\n'
name|'for'
name|'device'
name|'in'
name|'devices'
op|']'
newline|'\n'
comment|'# Get all the targets for the current multipath device'
nl|'\n'
name|'current_iqns'
op|'='
op|'['
name|'iqn'
name|'for'
name|'ip'
op|','
name|'iqn'
name|'in'
name|'ips_iqns'
op|']'
newline|'\n'
nl|'\n'
name|'in_use'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'current'
name|'in'
name|'current_iqns'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'current'
name|'in'
name|'other_iqns'
op|':'
newline|'\n'
indent|'                '
name|'in_use'
op|'='
name|'True'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
comment|'# If no other multipath device attached has the same iqn'
nl|'\n'
comment|'# as the current device'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'in_use'
op|':'
newline|'\n'
comment|'# disconnect if no other multipath devices with same iqn'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_disconnect_mpath'
op|'('
name|'iscsi_properties'
op|','
name|'ips_iqns'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'multipath_device'
name|'not'
name|'in'
name|'devices'
op|':'
newline|'\n'
comment|'# delete the devices associated w/ the unused multipath'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_mpath'
op|'('
name|'iscsi_properties'
op|','
name|'multipath_device'
op|','
name|'ips_iqns'
op|')'
newline|'\n'
nl|'\n'
comment|'# else do not disconnect iscsi portals,'
nl|'\n'
comment|'# as they are used for other luns,'
nl|'\n'
comment|'# just remove multipath mapping device descriptor'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_remove_multipath_device_descriptor'
op|'('
name|'multipath_device'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|_connect_to_iscsi_portal
dedent|''
name|'def'
name|'_connect_to_iscsi_portal'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): If we are on the same host as nova volume, the'
nl|'\n'
comment|"#             discovery makes the target so we don't need to"
nl|'\n'
comment|'#             run --op new. Therefore, we check to see if the'
nl|'\n'
comment|'#             target exists, and if we get 255 (Not Found), then'
nl|'\n'
comment|'#             we run --op new. This will also happen if another'
nl|'\n'
comment|'#             volume is using the same target.'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|'# iscsiadm returns 21 for "No records found" after version 2.0-871'
nl|'\n'
indent|'            '
name|'if'
name|'exc'
op|'.'
name|'exit_code'
name|'in'
op|'['
number|'21'
op|','
number|'255'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_reconnect'
op|'('
name|'iscsi_properties'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'iscsi_properties'
op|'.'
name|'get'
op|'('
string|"'auth_method'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.session.auth.authmethod"'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'auth_method'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.session.auth.username"'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'auth_username'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.session.auth.password"'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'auth_password'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# duplicate logins crash iscsiadm after load,'
nl|'\n'
comment|'# so we scan active sessions to see if the node is logged in.'
nl|'\n'
dedent|''
name|'out'
op|'='
name|'self'
op|'.'
name|'_run_iscsiadm_bare'
op|'('
op|'['
string|'"-m"'
op|','
string|'"session"'
op|']'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|','
number|'21'
op|']'
op|')'
op|'['
number|'0'
op|']'
name|'or'
string|'""'
newline|'\n'
nl|'\n'
name|'portals'
op|'='
op|'['
op|'{'
string|"'portal'"
op|':'
name|'p'
op|'.'
name|'split'
op|'('
string|'" "'
op|')'
op|'['
number|'2'
op|']'
op|','
string|"'iqn'"
op|':'
name|'p'
op|'.'
name|'split'
op|'('
string|'" "'
op|')'
op|'['
number|'3'
op|']'
op|'}'
nl|'\n'
name|'for'
name|'p'
name|'in'
name|'out'
op|'.'
name|'splitlines'
op|'('
op|')'
name|'if'
name|'p'
op|'.'
name|'startswith'
op|'('
string|'"tcp:"'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'stripped_portal'
op|'='
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'portals'
op|')'
op|'=='
number|'0'
name|'or'
name|'len'
op|'('
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'portals'
nl|'\n'
name|'if'
name|'stripped_portal'
op|'=='
nl|'\n'
name|'s'
op|'['
string|"'portal'"
op|']'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|'['
number|'0'
op|']'
nl|'\n'
name|'and'
nl|'\n'
name|'s'
op|'['
string|"'iqn'"
op|']'
op|'=='
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|']'
nl|'\n'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
op|'('
string|'"--login"'
op|','
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'err'
op|':'
newline|'\n'
comment|'# as this might be one of many paths,'
nl|'\n'
comment|'# only set successful logins to startup automatically'
nl|'\n'
indent|'                '
name|'if'
name|'err'
op|'.'
name|'exit_code'
name|'in'
op|'['
number|'15'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.startup"'
op|','
nl|'\n'
string|'"automatic"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
nl|'\n'
string|'"node.startup"'
op|','
nl|'\n'
string|'"automatic"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disconnect_from_iscsi_portal
dedent|''
dedent|''
name|'def'
name|'_disconnect_from_iscsi_portal'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_iscsiadm_update'
op|'('
name|'iscsi_properties'
op|','
string|'"node.startup"'
op|','
string|'"manual"'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|'"--logout"'
op|','
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|"'--op'"
op|','
string|"'delete'"
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_multipath_device_name
dedent|''
name|'def'
name|'_get_multipath_device_name'
op|'('
name|'self'
op|','
name|'single_path_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'single_path_device'
op|')'
newline|'\n'
nl|'\n'
name|'out'
op|'='
name|'self'
op|'.'
name|'_run_multipath'
op|'('
op|'['
string|"'-ll'"
op|','
nl|'\n'
name|'device'
op|']'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'mpath_line'
op|'='
op|'['
name|'line'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'splitlines'
op|'('
op|')'
nl|'\n'
name|'if'
string|'"scsi_id"'
name|'not'
name|'in'
name|'line'
op|']'
comment|'# ignore udev errors'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'mpath_line'
op|')'
op|'>'
number|'0'
name|'and'
name|'len'
op|'('
name|'mpath_line'
op|'['
number|'0'
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"/dev/mapper/%s"'
op|'%'
name|'mpath_line'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|'" "'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_iscsi_devices
dedent|''
name|'def'
name|'_get_iscsi_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'devices'
op|'='
name|'list'
op|'('
name|'os'
op|'.'
name|'walk'
op|'('
string|"'/dev/disk/by-path'"
op|')'
op|')'
op|'['
number|'0'
op|']'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'entry'
name|'for'
name|'entry'
name|'in'
name|'devices'
name|'if'
name|'entry'
op|'.'
name|'startswith'
op|'('
string|'"ip-"'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_delete_mpath
dedent|''
name|'def'
name|'_delete_mpath'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
name|'multipath_device'
op|','
name|'ips_iqns'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'entries'
op|'='
name|'self'
op|'.'
name|'_get_iscsi_devices'
op|'('
op|')'
newline|'\n'
comment|'# Loop through ips_iqns to construct all paths'
nl|'\n'
name|'iqn_luns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ip'
op|','
name|'iqn'
name|'in'
name|'ips_iqns'
op|':'
newline|'\n'
indent|'            '
name|'iqn_lun'
op|'='
string|"'%s-lun-%s'"
op|'%'
op|'('
name|'iqn'
op|','
nl|'\n'
name|'iscsi_properties'
op|'.'
name|'get'
op|'('
string|"'target_lun'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'iqn_luns'
op|'.'
name|'append'
op|'('
name|'iqn_lun'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'dev'
name|'in'
op|'['
string|"'/dev/disk/by-path/%s'"
op|'%'
name|'dev'
name|'for'
name|'dev'
name|'in'
name|'entries'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'iqn_lun'
name|'in'
name|'iqn_luns'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'iqn_lun'
name|'in'
name|'dev'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_delete_device'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_rescan_multipath'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disconnect_mpath
dedent|''
name|'def'
name|'_disconnect_mpath'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|','
name|'ips_iqns'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ip'
op|','
name|'iqn'
name|'in'
name|'ips_iqns'
op|':'
newline|'\n'
indent|'            '
name|'props'
op|'='
name|'iscsi_properties'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'target_portal'"
op|']'
op|'='
name|'ip'
newline|'\n'
name|'props'
op|'['
string|"'target_iqn'"
op|']'
op|'='
name|'iqn'
newline|'\n'
name|'self'
op|'.'
name|'_disconnect_from_iscsi_portal'
op|'('
name|'props'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_rescan_multipath'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_multipath_iqn
dedent|''
name|'def'
name|'_get_multipath_iqn'
op|'('
name|'self'
op|','
name|'multipath_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'entries'
op|'='
name|'self'
op|'.'
name|'_get_iscsi_devices'
op|'('
op|')'
newline|'\n'
name|'for'
name|'entry'
name|'in'
name|'entries'
op|':'
newline|'\n'
indent|'            '
name|'entry_real_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
string|'"/dev/disk/by-path/%s"'
op|'%'
name|'entry'
op|')'
newline|'\n'
name|'entry_multipath'
op|'='
name|'self'
op|'.'
name|'_get_multipath_device_name'
op|'('
name|'entry_real_path'
op|')'
newline|'\n'
name|'if'
name|'entry_multipath'
op|'=='
name|'multipath_device'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'entry'
op|'.'
name|'split'
op|'('
string|'"iscsi-"'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|'"-lun"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_run_iscsiadm_bare
dedent|''
name|'def'
name|'_run_iscsiadm_bare'
op|'('
name|'self'
op|','
name|'iscsi_command'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
number|'0'
op|')'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'iscsiadm'"
op|','
nl|'\n'
op|'*'
name|'iscsi_command'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"iscsiadm %(command)s: stdout=%(out)s stderr=%(err)s"'
op|','
nl|'\n'
op|'{'
string|"'command'"
op|':'
name|'iscsi_command'
op|','
string|"'out'"
op|':'
name|'out'
op|','
string|"'err'"
op|':'
name|'err'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_multipath
dedent|''
name|'def'
name|'_run_multipath'
op|'('
name|'self'
op|','
name|'multipath_command'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
number|'0'
op|')'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'multipath'"
op|','
nl|'\n'
op|'*'
name|'multipath_command'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"multipath %(command)s: stdout=%(out)s stderr=%(err)s"'
op|','
nl|'\n'
op|'{'
string|"'command'"
op|':'
name|'multipath_command'
op|','
string|"'out'"
op|':'
name|'out'
op|','
string|"'err'"
op|':'
name|'err'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rescan_iscsi
dedent|''
name|'def'
name|'_rescan_iscsi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_run_iscsiadm_bare'
op|'('
op|'('
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'--rescan'"
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_iscsiadm_bare'
op|'('
op|'('
string|"'-m'"
op|','
string|"'session'"
op|','
string|"'--rescan'"
op|')'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|','
number|'21'
op|','
number|'255'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rescan_multipath
dedent|''
name|'def'
name|'_rescan_multipath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_run_multipath'
op|'('
op|'['
string|"'-r'"
op|']'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|','
number|'21'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_device
dedent|''
name|'def'
name|'_get_host_device'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"/dev/disk/by-path/ip-%s-iscsi-%s-lun-%s"'
op|'%'
nl|'\n'
op|'('
name|'iscsi_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
name|'iscsi_properties'
op|'['
string|"'target_iqn'"
op|']'
op|','
nl|'\n'
name|'iscsi_properties'
op|'.'
name|'get'
op|'('
string|"'target_lun'"
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reconnect
dedent|''
name|'def'
name|'_reconnect'
op|'('
name|'self'
op|','
name|'iscsi_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iscsi_properties'
op|','
op|'('
string|"'--op'"
op|','
string|"'new'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtISERVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtISERVolumeDriver'
op|'('
name|'LibvirtISCSIVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Network volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtISERVolumeDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'num_scan_tries'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_iser_scan_tries'
newline|'\n'
name|'self'
op|'.'
name|'use_multipath'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'iser_use_multipath'
newline|'\n'
nl|'\n'
DECL|member|_get_multipath_iqn
dedent|''
name|'def'
name|'_get_multipath_iqn'
op|'('
name|'self'
op|','
name|'multipath_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'entries'
op|'='
name|'self'
op|'.'
name|'_get_iscsi_devices'
op|'('
op|')'
newline|'\n'
name|'for'
name|'entry'
name|'in'
name|'entries'
op|':'
newline|'\n'
indent|'            '
name|'entry_real_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
string|'"/dev/disk/by-path/%s"'
op|'%'
name|'entry'
op|')'
newline|'\n'
name|'entry_multipath'
op|'='
name|'self'
op|'.'
name|'_get_multipath_device_name'
op|'('
name|'entry_real_path'
op|')'
newline|'\n'
name|'if'
name|'entry_multipath'
op|'=='
name|'multipath_device'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'entry'
op|'.'
name|'split'
op|'('
string|'"iser-"'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|'"-lun"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_host_device
dedent|''
name|'def'
name|'_get_host_device'
op|'('
name|'self'
op|','
name|'iser_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'host_device'
op|'='
name|'None'
newline|'\n'
name|'device'
op|'='
op|'('
string|'"ip-%s-iscsi-%s-lun-%s"'
op|'%'
nl|'\n'
op|'('
name|'iser_properties'
op|'['
string|"'target_portal'"
op|']'
op|','
nl|'\n'
name|'iser_properties'
op|'['
string|"'target_iqn'"
op|']'
op|','
nl|'\n'
name|'iser_properties'
op|'.'
name|'get'
op|'('
string|"'target_lun'"
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
name|'look_for_device'
op|'='
name|'glob'
op|'.'
name|'glob'
op|'('
string|"'/dev/disk/by-path/*%s'"
op|'%'
name|'device'
op|')'
newline|'\n'
name|'if'
name|'look_for_device'
op|':'
newline|'\n'
indent|'            '
name|'host_device'
op|'='
name|'look_for_device'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'host_device'
newline|'\n'
nl|'\n'
DECL|member|_reconnect
dedent|''
name|'def'
name|'_reconnect'
op|'('
name|'self'
op|','
name|'iser_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_run_iscsiadm'
op|'('
name|'iser_properties'
op|','
nl|'\n'
op|'('
string|"'--interface'"
op|','
string|"'iser'"
op|','
string|"'--op'"
op|','
string|"'new'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtNFSVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtNFSVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for NFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to nfs."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtNFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtNFSVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|')'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'path'
newline|'\n'
name|'conf'
op|'.'
name|'driver_format'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'format'"
op|','
string|"'raw'"
op|')'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'options'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'options'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_mounted'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
op|','
name|'options'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
nl|'\n'
name|'export'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'export'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'umount'"
op|','
name|'mount_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
string|"'device is busy'"
name|'in'
name|'exc'
op|'.'
name|'message'
name|'or'
nl|'\n'
string|"'target is busy'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"The NFS share %s is still in use."'
op|','
name|'export'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Couldn\'t unmount the NFS share %s"'
op|')'
op|','
name|'export'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_mounted
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ensure_mounted'
op|'('
name|'self'
op|','
name|'nfs_export'
op|','
name|'options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@type nfs_export: string\n           @type options: string\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'nfs_export'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
name|'nfs_export'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mount_nfs'
op|'('
name|'mount_path'
op|','
name|'nfs_export'
op|','
name|'options'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|_mount_nfs
dedent|''
name|'def'
name|'_mount_nfs'
op|'('
name|'self'
op|','
name|'mount_path'
op|','
name|'nfs_share'
op|','
name|'options'
op|'='
name|'None'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount nfs export to mount path."""'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct the NFS mount command.'
nl|'\n'
name|'nfs_cmd'
op|'='
op|'['
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'nfs'"
op|']'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-o'"
op|','
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'nfs_mount_options'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
name|'options'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'nfs_cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'nfs_share'
op|','
name|'mount_path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'nfs_cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'nfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtAOEVolumeDriver
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtAOEVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach AoE volumes to libvirt."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_aoe_discover
dedent|''
name|'def'
name|'_aoe_discover'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call aoe-discover (aoe-tools) AoE Discover."""'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'aoe-discover'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
number|'0'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_aoe_revalidate
dedent|''
name|'def'
name|'_aoe_revalidate'
op|'('
name|'self'
op|','
name|'aoedev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Revalidate the LUN Geometry (When an AoE ID is reused)."""'
newline|'\n'
op|'('
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'aoe-revalidate'"
op|','
name|'aoedev'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'check_exit_code'
op|'='
number|'0'
op|')'
newline|'\n'
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtAOEVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'shelf'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'target_shelf'"
op|']'
newline|'\n'
name|'lun'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'target_lun'"
op|']'
newline|'\n'
name|'aoedev'
op|'='
string|"'e%s.%s'"
op|'%'
op|'('
name|'shelf'
op|','
name|'lun'
op|')'
newline|'\n'
name|'aoedevpath'
op|'='
string|"'/dev/etherd/%s'"
op|'%'
op|'('
name|'aoedev'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'aoedevpath'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shelf'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'target_shelf'"
op|']'
newline|'\n'
name|'lun'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'target_lun'"
op|']'
newline|'\n'
name|'aoedev'
op|'='
string|"'e%s.%s'"
op|'%'
op|'('
name|'shelf'
op|','
name|'lun'
op|')'
newline|'\n'
name|'aoedevpath'
op|'='
string|"'/dev/etherd/%s'"
op|'%'
op|'('
name|'aoedev'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'aoedevpath'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(jbr_): If aoedevpath already exists, revalidate the LUN.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_aoe_revalidate'
op|'('
name|'aoedev'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(jbr_): If aoedevpath does not exist, do a discover.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_aoe_discover'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jbr_): Device path is not always present immediately'
nl|'\n'
DECL|function|_wait_for_device_discovery
dedent|''
name|'def'
name|'_wait_for_device_discovery'
op|'('
name|'aoedevpath'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'aoedevpath'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'loopingcall'
op|'.'
name|'LoopingCallDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'tries'
op|'>='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_aoe_discover_tries'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"AoE device not found at %s"'
op|')'
op|'%'
nl|'\n'
op|'('
name|'aoedevpath'
op|')'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"AoE volume not yet found at: %(aoedevpath)s. "'
nl|'\n'
string|'"Try number: %(tries)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'aoedevpath'"
op|':'
name|'aoedevpath'
op|','
string|"'tries'"
op|':'
name|'tries'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_aoe_discover'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'tries'
op|'='
number|'0'
newline|'\n'
name|'timer'
op|'='
name|'loopingcall'
op|'.'
name|'FixedIntervalLoopingCall'
op|'('
nl|'\n'
name|'_wait_for_device_discovery'
op|','
name|'aoedevpath'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'2'
op|')'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
newline|'\n'
name|'if'
name|'tries'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Found AoE device %(aoedevpath)s "'
nl|'\n'
string|'"(after %(tries)s rediscover)"'
op|','
nl|'\n'
op|'{'
string|"'aoedevpath'"
op|':'
name|'aoedevpath'
op|','
nl|'\n'
string|"'tries'"
op|':'
name|'tries'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtGlusterfsVolumeDriver
dedent|''
dedent|''
name|'class'
name|'LibvirtGlusterfsVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class implements libvirt part of volume driver for GlusterFS."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to glusterfs."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtGlusterfsVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtGlusterfsVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'gluster'"
name|'in'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'qemu_allowed_storage_drivers'
op|':'
newline|'\n'
indent|'            '
name|'vol_name'
op|'='
name|'data'
op|'['
string|"'export'"
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'source_host'
op|'='
name|'data'
op|'['
string|"'export'"
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'0'
op|']'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_ports'
op|'='
op|'['
string|"'24007'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'network'"
newline|'\n'
name|'conf'
op|'.'
name|'source_protocol'
op|'='
string|"'gluster'"
newline|'\n'
name|'conf'
op|'.'
name|'source_hosts'
op|'='
op|'['
name|'source_host'
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'source_name'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'vol_name'
op|','
name|'data'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'data'
op|'['
string|"'export'"
op|']'
op|')'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'data'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'path'
newline|'\n'
nl|'\n'
dedent|''
name|'conf'
op|'.'
name|'driver_format'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'format'"
op|','
string|"'raw'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'gluster'"
name|'not'
name|'in'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'qemu_allowed_storage_drivers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_ensure_mounted'
op|'('
name|'data'
op|'['
string|"'export'"
op|']'
op|','
name|'data'
op|'.'
name|'get'
op|'('
string|"'options'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnect_volume
dedent|''
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disconnect the volume."""'
newline|'\n'
nl|'\n'
name|'if'
string|"'gluster'"
name|'in'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'qemu_allowed_storage_drivers'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'export'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'export'"
op|']'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'export'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'umount'"
op|','
name|'mount_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'target is busy'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"The GlusterFS share %s is still in use."'
op|','
name|'export'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Couldn\'t unmount the GlusterFS share %s"'
op|')'
op|','
nl|'\n'
name|'export'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_mounted
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ensure_mounted'
op|'('
name|'self'
op|','
name|'glusterfs_export'
op|','
name|'options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""@type glusterfs_export: string\n           @type options: string\n        """'
newline|'\n'
name|'mount_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'glusterfs_mount_point_base'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'glusterfs_export'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'libvirt_utils'
op|'.'
name|'is_mounted'
op|'('
name|'mount_path'
op|','
name|'glusterfs_export'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mount_glusterfs'
op|'('
name|'mount_path'
op|','
name|'glusterfs_export'
op|','
nl|'\n'
name|'options'
op|','
name|'ensure'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'mount_path'
newline|'\n'
nl|'\n'
DECL|member|_mount_glusterfs
dedent|''
name|'def'
name|'_mount_glusterfs'
op|'('
name|'self'
op|','
name|'mount_path'
op|','
name|'glusterfs_share'
op|','
nl|'\n'
name|'options'
op|'='
name|'None'
op|','
name|'ensure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount glusterfs export to mount path."""'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
nl|'\n'
name|'gluster_cmd'
op|'='
op|'['
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'glusterfs'"
op|']'
newline|'\n'
name|'if'
name|'options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'gluster_cmd'
op|'.'
name|'extend'
op|'('
name|'options'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'gluster_cmd'
op|'.'
name|'extend'
op|'('
op|'['
name|'glusterfs_share'
op|','
name|'mount_path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'gluster_cmd'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ensure'
name|'and'
string|"'already mounted'"
name|'in'
name|'exc'
op|'.'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"%s is already mounted"'
op|')'
op|','
name|'glusterfs_share'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtFibreChannelVolumeDriver
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtFibreChannelVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to attach Fibre Channel Network volumes to libvirt."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtFibreChannelVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_pci_num
dedent|''
name|'def'
name|'_get_pci_num'
op|'('
name|'self'
op|','
name|'hba'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(walter-boring)'
nl|'\n'
comment|'# device path is in format of'
nl|'\n'
comment|'# /sys/devices/pci0000:00/0000:00:03.0/0000:05:00.3/host2/fc_host/host2'
nl|'\n'
comment|'# sometimes an extra entry exists before the host2 value'
nl|'\n'
comment|'# we always want the value prior to the host2 value'
nl|'\n'
indent|'        '
name|'pci_num'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'hba'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|'"device_path"'
name|'in'
name|'hba'
op|':'
newline|'\n'
indent|'                '
name|'index'
op|'='
number|'0'
newline|'\n'
name|'device_path'
op|'='
name|'hba'
op|'['
string|"'device_path'"
op|']'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'for'
name|'value'
name|'in'
name|'device_path'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'value'
op|'.'
name|'startswith'
op|'('
string|"'host'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'index'
op|'='
name|'index'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'index'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'pci_num'
op|'='
name|'device_path'
op|'['
name|'index'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'pci_num'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtFibreChannelVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|'"block"'
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|')'
newline|'\n'
DECL|member|connect_volume
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach the volume to instance_name."""'
newline|'\n'
name|'fc_properties'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
name|'mount_device'
op|'='
name|'disk_info'
op|'['
string|'"dev"'
op|']'
newline|'\n'
nl|'\n'
name|'ports'
op|'='
name|'fc_properties'
op|'['
string|"'target_wwn'"
op|']'
newline|'\n'
name|'wwns'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# we support a list of wwns or a single wwn'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'ports'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'wwn'
name|'in'
name|'ports'
op|':'
newline|'\n'
indent|'                '
name|'wwns'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'wwn'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'ports'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'wwns'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'ports'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# We need to look for wwns on every hba'
nl|'\n'
comment|"# because we don't know ahead of time"
nl|'\n'
comment|'# where they will show up.'
nl|'\n'
dedent|''
name|'hbas'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_fc_hbas_info'
op|'('
op|')'
newline|'\n'
name|'host_devices'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'hba'
name|'in'
name|'hbas'
op|':'
newline|'\n'
indent|'            '
name|'pci_num'
op|'='
name|'self'
op|'.'
name|'_get_pci_num'
op|'('
name|'hba'
op|')'
newline|'\n'
name|'if'
name|'pci_num'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'wwn'
name|'in'
name|'wwns'
op|':'
newline|'\n'
indent|'                    '
name|'target_wwn'
op|'='
string|'"0x%s"'
op|'%'
name|'wwn'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'host_device'
op|'='
op|'('
string|'"/dev/disk/by-path/pci-%s-fc-%s-lun-%s"'
op|'%'
nl|'\n'
op|'('
name|'pci_num'
op|','
nl|'\n'
name|'target_wwn'
op|','
nl|'\n'
name|'fc_properties'
op|'.'
name|'get'
op|'('
string|"'target_lun'"
op|','
number|'0'
op|')'
op|')'
op|')'
newline|'\n'
name|'host_devices'
op|'.'
name|'append'
op|'('
name|'host_device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'host_devices'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# this is empty because we don't have any FC HBAs"
nl|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"We are unable to locate any Fibre Channel devices"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# The /dev/disk/by-path/... node is not always present immediately'
nl|'\n'
comment|'# We only need to find the first device.  Once we see the first device'
nl|'\n'
comment|'# multipath will have any others.'
nl|'\n'
DECL|function|_wait_for_device_discovery
dedent|''
name|'def'
name|'_wait_for_device_discovery'
op|'('
name|'host_devices'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'host_devices'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Looking for Fibre Channel dev %(device)s"'
op|','
nl|'\n'
op|'{'
string|"'device'"
op|':'
name|'device'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'host_device'
op|'='
name|'device'
newline|'\n'
comment|'# get the /dev/sdX device.  This is used'
nl|'\n'
comment|'# to find the multipath device.'
nl|'\n'
name|'self'
op|'.'
name|'device_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'device'
op|')'
newline|'\n'
name|'raise'
name|'loopingcall'
op|'.'
name|'LoopingCallDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'tries'
op|'>='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'num_iscsi_scan_tries'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Fibre Channel device not found."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"Fibre volume not yet found at: %(mount_device)s. "'
nl|'\n'
string|'"Will rescan & retry.  Try number: %(tries)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'mount_device'"
op|':'
name|'mount_device'
op|','
string|"'tries'"
op|':'
name|'tries'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'linuxscsi'
op|'.'
name|'rescan_hosts'
op|'('
name|'hbas'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'host_device'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'device_name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'tries'
op|'='
number|'0'
newline|'\n'
name|'timer'
op|'='
name|'loopingcall'
op|'.'
name|'FixedIntervalLoopingCall'
op|'('
nl|'\n'
name|'_wait_for_device_discovery'
op|','
name|'host_devices'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'2'
op|')'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'tries'
op|'='
name|'self'
op|'.'
name|'tries'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'host_device'
name|'is'
name|'not'
name|'None'
name|'and'
name|'self'
op|'.'
name|'device_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Found Fibre Channel volume %(mount_device)s "'
nl|'\n'
string|'"(after %(tries)s rescans)"'
op|','
nl|'\n'
op|'{'
string|"'mount_device'"
op|':'
name|'mount_device'
op|','
nl|'\n'
string|"'tries'"
op|':'
name|'tries'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# see if the new drive is part of a multipath'
nl|'\n'
comment|"# device.  If so, we'll use the multipath device."
nl|'\n'
dedent|''
name|'mdev_info'
op|'='
name|'linuxscsi'
op|'.'
name|'find_multipath_device'
op|'('
name|'self'
op|'.'
name|'device_name'
op|')'
newline|'\n'
name|'if'
name|'mdev_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Multipath device discovered %(device)s"'
op|','
nl|'\n'
op|'{'
string|"'device'"
op|':'
name|'mdev_info'
op|'['
string|"'device'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'device_path'
op|'='
name|'mdev_info'
op|'['
string|"'device'"
op|']'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'device_path'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'devices'"
op|']'
op|'='
name|'mdev_info'
op|'['
string|"'devices'"
op|']'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'multipath_id'"
op|']'
op|'='
name|'mdev_info'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# we didn't find a multipath device."
nl|'\n'
comment|'# so we assume the kernel only sees 1 device'
nl|'\n'
indent|'            '
name|'device_path'
op|'='
name|'self'
op|'.'
name|'host_device'
newline|'\n'
name|'device_info'
op|'='
name|'linuxscsi'
op|'.'
name|'get_device_info'
op|'('
name|'self'
op|'.'
name|'device_name'
op|')'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'device_path'
newline|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'devices'"
op|']'
op|'='
op|'['
name|'device_info'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'connect_volume'"
op|')'
newline|'\n'
DECL|member|disconnect_volume
name|'def'
name|'disconnect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'mount_device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the volume from instance_name."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtFibreChannelVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
comment|'# If this is a multipath device, we need to search again'
nl|'\n'
comment|'# and make sure we remove all the devices. Some of them'
nl|'\n'
comment|'# might not have shown up at attach time.'
nl|'\n'
name|'if'
string|"'multipath_id'"
name|'in'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'multipath_id'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'multipath_id'"
op|']'
newline|'\n'
name|'mdev_info'
op|'='
name|'linuxscsi'
op|'.'
name|'find_multipath_device'
op|'('
name|'multipath_id'
op|')'
newline|'\n'
name|'devices'
op|'='
name|'mdev_info'
op|'['
string|"'devices'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"devices to remove = %s"'
op|','
name|'devices'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# only needed when multipath-tools work improperly'
nl|'\n'
indent|'            '
name|'devices'
op|'='
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'.'
name|'get'
op|'('
string|"'devices'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"multipath-tools probably work improperly. "'
nl|'\n'
string|'"devices to remove = %s."'
op|')'
op|'%'
name|'devices'
op|')'
newline|'\n'
nl|'\n'
comment|'# There may have been more than 1 device mounted'
nl|'\n'
comment|'# by the kernel for this volume.  We have to remove'
nl|'\n'
comment|'# all of them'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'devices'
op|':'
newline|'\n'
indent|'            '
name|'linuxscsi'
op|'.'
name|'remove_device'
op|'('
name|'device'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtScalityVolumeDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtScalityVolumeDriver'
op|'('
name|'LibvirtBaseVolumeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Scality SOFS Nova driver. Provide hypervisors with access\n    to sparse files on SOFS.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create back-end to SOFS and check connection."""'
newline|'\n'
name|'super'
op|'('
name|'LibvirtScalityVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'connection'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config
dedent|''
name|'def'
name|'get_config'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns xml for libvirt."""'
newline|'\n'
name|'conf'
op|'='
name|'super'
op|'('
name|'LibvirtScalityVolumeDriver'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_mount_point'
op|','
nl|'\n'
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'['
string|"'sofs_path'"
op|']'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'source_type'
op|'='
string|"'file'"
newline|'\n'
name|'conf'
op|'.'
name|'source_path'
op|'='
name|'path'
newline|'\n'
nl|'\n'
comment|"# The default driver cache policy is 'none', and this causes"
nl|'\n'
comment|'# qemu/kvm to open the volume file with O_DIRECT, which is'
nl|'\n'
comment|'# rejected by FUSE (on kernels older than 3.3). Scality SOFS'
nl|'\n'
comment|'# is FUSE based, so we must provide a more sensible default.'
nl|'\n'
name|'conf'
op|'.'
name|'driver_cache'
op|'='
string|"'writethrough'"
newline|'\n'
nl|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|connect_volume
dedent|''
name|'def'
name|'connect_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect the volume. Returns xml for libvirt."""'
newline|'\n'
name|'self'
op|'.'
name|'_check_prerequisites'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mount_sofs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'get_config'
op|'('
name|'connection_info'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_prerequisites
dedent|''
name|'def'
name|'_check_prerequisites'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sanity checks before attempting to mount SOFS."""'
newline|'\n'
nl|'\n'
comment|'# config is mandatory'
nl|'\n'
name|'config'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_config'
newline|'\n'
name|'if'
name|'not'
name|'config'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Value required for \'scality_sofs_config\'"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# config can be a file path or a URL, check it'
nl|'\n'
dedent|''
name|'if'
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'config'
op|')'
op|'.'
name|'scheme'
op|'=='
string|"''"
op|':'
newline|'\n'
comment|'# turn local path into URL'
nl|'\n'
indent|'            '
name|'config'
op|'='
string|"'file://%s'"
op|'%'
name|'config'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'urllib2'
op|'.'
name|'urlopen'
op|'('
name|'config'
op|','
name|'timeout'
op|'='
number|'5'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'urllib2'
op|'.'
name|'URLError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Cannot access \'scality_sofs_config\': %s"'
op|')'
op|'%'
name|'e'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# mount.sofs must be installed'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'access'
op|'('
string|"'/sbin/mount.sofs'"
op|','
name|'os'
op|'.'
name|'X_OK'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Cannot execute /sbin/mount.sofs"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_mount_sofs
dedent|''
dedent|''
name|'def'
name|'_mount_sofs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_config'
newline|'\n'
name|'mount_path'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'scality_sofs_mount_point'
newline|'\n'
name|'sysdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'mount_path'
op|','
string|"'sys'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'mount_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkdir'"
op|','
string|"'-p'"
op|','
name|'mount_path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'sysdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mount'"
op|','
string|"'-t'"
op|','
string|"'sofs'"
op|','
name|'config'
op|','
name|'mount_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'sysdir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Cannot mount Scality SOFS, check syslog for errors"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

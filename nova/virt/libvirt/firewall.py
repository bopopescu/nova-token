begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'firewall'
name|'as'
name|'base_firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'netutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.libvirt.firewall"'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'libvirt'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Libvirt module could not be loaded. NWFilterFirewall will "'
nl|'\n'
string|'"not work correctly."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterFirewall
dedent|''
name|'class'
name|'NWFilterFirewall'
op|'('
name|'base_firewall'
op|'.'
name|'FirewallDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class implements a network filtering mechanism versatile\n    enough for EC2 style Security Group filtering by leveraging\n    libvirt\'s nwfilter.\n\n    First, all instances get a filter ("nova-base-filter") applied.\n    This filter provides some basic security such as protection against\n    MAC spoofing, IP spoofing, and ARP spoofing.\n\n    This filter drops all incoming ipv4 and ipv6 connections.\n    Outgoing connections are never blocked.\n\n    Second, every security group maps to a nwfilter filter(*).\n    NWFilters can be updated at runtime and changes are applied\n    immediately, so changes to security groups can be applied at\n    runtime (as mandated by the spec).\n\n    Security group rules are named "nova-secgroup-<id>" where <id>\n    is the internal id of the security group. They\'re applied only on\n    hosts that have instances in the security group in question.\n\n    Updates to security groups are done by updating the data model\n    (in response to API calls) followed by a request sent to all\n    the nodes with instances in the security group to refresh the\n    security group.\n\n    Each instance has its own NWFilter, which references the above\n    mentioned security group NWFilters. This was done because\n    interfaces can only reference one filter while filters can\n    reference multiple other filters. This has the added benefit of\n    actually being able to add and remove security groups from an\n    instance at run time. This functionality is not exposed anywhere,\n    though.\n\n    Outstanding questions:\n\n    The name is unique, so would there be any good reason to sync\n    the uuid across the nodes (by assigning it from the datamodel)?\n\n\n    (*) This sentence brought to you by the redundancy department of\n        redundancy.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'get_connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_libvirt_get_connection'
op|'='
name|'get_connection'
newline|'\n'
name|'self'
op|'.'
name|'static_filters_configured'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'handle_security_groups'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No-op. Everything is done in prepare_instance_filter"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_libvirt_get_connection'
op|'('
op|')'
newline|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|nova_dhcp_filter
name|'def'
name|'nova_dhcp_filter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The standard allow-dhcp-server filter is an <ip> one, so it uses\n           ebtables to allow traffic through. Without a corresponding rule in\n           iptables, it\'ll get blocked anyway."""'
newline|'\n'
nl|'\n'
name|'return'
string|"'''<filter name='nova-allow-dhcp-server' chain='ipv4'>\n                    <uuid>891e4787-e5c0-d59b-cbd6-41bc3c6b36fc</uuid>\n                    <rule action='accept' direction='out'\n                          priority='100'>\n                      <udp srcipaddr='0.0.0.0'\n                           dstipaddr='255.255.255.255'\n                           srcportstart='68'\n                           dstportstart='67'/>\n                    </rule>\n                    <rule action='accept' direction='in'\n                          priority='100'>\n                      <udp srcipaddr='$DHCPSERVER'\n                           srcportstart='67'\n                           dstportstart='68'/>\n                    </rule>\n                  </filter>'''"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|nova_ra_filter
name|'def'
name|'nova_ra_filter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'''<filter name='nova-allow-ra-server' chain='root'>\n                            <uuid>d707fa71-4fb5-4b27-9ab7-ba5ca19c8804</uuid>\n                              <rule action='accept' direction='inout'\n                                    priority='100'>\n                                <icmpv6 srcipaddr='$RASERVER'/>\n                              </rule>\n                            </filter>'''"
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up basic filtering (MAC, IP, and ARP spoofing protection)"""'
newline|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|"'called setup_basic_filtering in nwfilter'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'handle_security_groups'
op|':'
newline|'\n'
comment|"# No point in setting up a filter set that we'll be overriding"
nl|'\n'
comment|'# anyway.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'logging'
op|'.'
name|'info'
op|'('
string|"'ensuring static filters'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_static_filters'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-vpn'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-base'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_filter_name'
op|','
nl|'\n'
op|'['
name|'base_filter'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_static_filters
dedent|''
dedent|''
name|'def'
name|'_ensure_static_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Static filters are filters that have no need to be IP aware.\n\n        There is no configuration or tuneability of these filters, so they\n        can be set up once and forgotten about.\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'static_filters_configured'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
string|"'nova-base'"
op|','
nl|'\n'
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
string|"'nova-vpn'"
op|','
nl|'\n'
op|'['
string|"'allow-dhcp-server'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_base_ipv4_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_base_ipv6_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_dhcp_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_ra_filter'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_same_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_project_filter'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_project_filter_v6'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'static_filters_configured'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_filter_container
dedent|''
name|'def'
name|'_filter_container'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|"'''<filter name='%s' chain='root'>%s</filter>'''"
op|'%'
op|'('
nl|'\n'
name|'name'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|'"<filterref filter=\'%s\'/>"'
op|'%'
op|'('
name|'f'
op|','
op|')'
name|'for'
name|'f'
name|'in'
name|'filters'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|nova_base_ipv4_filter
name|'def'
name|'nova_base_ipv4_filter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-base-ipv4\' chain=\'ipv4\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'direction'
op|','
name|'action'
op|','
name|'priority'
name|'in'
op|'['
op|'('
string|"'out'"
op|','
string|"'accept'"
op|','
number|'399'
op|')'
op|','
nl|'\n'
op|'('
string|"'in'"
op|','
string|"'drop'"
op|','
number|'400'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'retval'
op|'+='
string|'"""<rule action=\'%s\' direction=\'%s\' priority=\'%d\'>\n                               <%s />\n                             </rule>"""'
op|'%'
op|'('
name|'action'
op|','
name|'direction'
op|','
nl|'\n'
name|'priority'
op|','
name|'protocol'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|nova_base_ipv6_filter
name|'def'
name|'nova_base_ipv6_filter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-base-ipv6\' chain=\'ipv6\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp-ipv6'"
op|','
string|"'udp-ipv6'"
op|','
string|"'icmpv6'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'direction'
op|','
name|'action'
op|','
name|'priority'
name|'in'
op|'['
op|'('
string|"'out'"
op|','
string|"'accept'"
op|','
number|'399'
op|')'
op|','
nl|'\n'
op|'('
string|"'in'"
op|','
string|"'drop'"
op|','
number|'400'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'retval'
op|'+='
string|'"""<rule action=\'%s\' direction=\'%s\' priority=\'%d\'>\n                               <%s />\n                             </rule>"""'
op|'%'
op|'('
name|'action'
op|','
name|'direction'
op|','
nl|'\n'
name|'priority'
op|','
name|'protocol'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|nova_project_filter
name|'def'
name|'nova_project_filter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-project\' chain=\'ipv4\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'+='
string|'"""<rule action=\'accept\' direction=\'in\' priority=\'200\'>\n                           <%s srcipaddr=\'$PROJNET\' srcipmask=\'$PROJMASK\' />\n                         </rule>"""'
op|'%'
name|'protocol'
newline|'\n'
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|nova_project_filter_v6
name|'def'
name|'nova_project_filter_v6'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-project-v6\' chain=\'ipv6\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp-ipv6'"
op|','
string|"'udp-ipv6'"
op|','
string|"'icmpv6'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'+='
string|'"""<rule action=\'accept\' direction=\'inout\'\n                                                   priority=\'200\'>\n                           <%s srcipaddr=\'$PROJNETV6\'\n                               srcipmask=\'$PROJMASKV6\' />\n                         </rule>"""'
op|'%'
op|'('
name|'protocol'
op|')'
newline|'\n'
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|_define_filter
dedent|''
name|'def'
name|'_define_filter'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'callable'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'='
name|'xml'
op|'('
op|')'
newline|'\n'
comment|'# execute in a native thread and block current greenthread until done'
nl|'\n'
dedent|''
name|'tpool'
op|'.'
name|'execute'
op|'('
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterDefineXML'
op|','
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear out the nwfilter rules."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'instance_filter_name'
op|')'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'The nwfilter(%(instance_filter_name)s) '"
nl|'\n'
string|"'for %(instance_name)s is not found.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'instance_secgroup_filter_name'
op|'='
string|"'%s-secgroup'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'instance_secgroup_filter_name'
op|')'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'The nwfilter(%(instance_secgroup_filter_name)s) '"
nl|'\n'
string|"'for %(instance_name)s is not found.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
dedent|''
dedent|''
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates an NWFilter for the given instance.\n\n        In the process, it makes sure the filters for the provider blocks,\n        security groups, and base filter are all in place.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_secgroup_filter_name'
op|'='
string|"'%s-secgroup'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instance_secgroup_filter_children'
op|'='
op|'['
string|"'nova-base-ipv4'"
op|','
nl|'\n'
string|"'nova-base-ipv6'"
op|','
nl|'\n'
string|"'nova-allow-dhcp-server'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'='
op|'['
name|'network'
name|'for'
op|'('
name|'network'
op|','
name|'info'
op|')'
name|'in'
name|'network_info'
name|'if'
nl|'\n'
name|'info'
op|'['
string|"'gateway_v6'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'networks'
op|':'
newline|'\n'
indent|'                '
name|'instance_secgroup_filter_children'
op|'.'
name|'append'
op|'('
string|"'nova-allow-ra-server'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'security_group'
name|'in'
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance_secgroup_filter_children'
op|'.'
name|'append'
op|'('
string|"'nova-secgroup-%s'"
op|'%'
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_secgroup_filter_name'
op|','
nl|'\n'
name|'instance_secgroup_filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_filters'
op|'='
name|'self'
op|'.'
name|'_create_network_filters'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance_secgroup_filter_name'
op|')'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'children'
op|')'
name|'in'
name|'network_filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_define_filters'
op|'('
name|'name'
op|','
name|'children'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_network_filters
dedent|''
dedent|''
name|'def'
name|'_create_network_filters'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance_secgroup_filter_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-vpn'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-base'"
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'_n'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'instance_filter_children'
op|'='
op|'['
name|'base_filter'
op|','
string|"'nova-provider-rules'"
op|','
nl|'\n'
name|'instance_secgroup_filter_name'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_same_net_traffic'
op|':'
newline|'\n'
indent|'                '
name|'instance_filter_children'
op|'.'
name|'append'
op|'('
string|"'nova-project'"
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                    '
name|'instance_filter_children'
op|'.'
name|'append'
op|'('
string|"'nova-project-v6'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
op|'('
name|'instance_filter_name'
op|','
name|'instance_filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_define_filters
dedent|''
name|'def'
name|'_define_filters'
op|'('
name|'self'
op|','
name|'filter_name'
op|','
name|'filter_children'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'filter_name'
op|','
nl|'\n'
name|'filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'security_group_to_nwfilter_xml'
op|'('
name|'security_group_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update rules for all instances.\n\n        This is part of the FirewallDriver API and is called when the\n        provider firewall rules change in the database.  In the\n        `prepare_instance_filter` we add a reference to the\n        \'nova-provider-rules\' filter for each instance\'s firewall, and\n        by changing that filter we update them all.\n\n        """'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'provider_fw_to_nwfilter_xml'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|security_group_to_nwfilter_xml
name|'def'
name|'security_group_to_nwfilter_xml'
op|'('
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'security_group_id'
op|')'
newline|'\n'
name|'rule_xml'
op|'='
string|'""'
newline|'\n'
name|'v6protocol'
op|'='
op|'{'
string|"'tcp'"
op|':'
string|"'tcp-ipv6'"
op|','
string|"'udp'"
op|':'
string|"'udp-ipv6'"
op|','
string|"'icmp'"
op|':'
string|"'icmpv6'"
op|'}'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'rule_xml'
op|'+='
string|'"<rule action=\'accept\' direction=\'in\' priority=\'300\'>"'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'version'
op|'='
name|'netutils'
op|'.'
name|'get_ip_version'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
name|'and'
name|'version'
op|'=='
number|'6'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|','
name|'prefixlen'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_prefixlen'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'v6protocol'
op|'['
name|'rule'
op|'.'
name|'protocol'
op|']'
op|','
name|'net'
op|','
name|'prefixlen'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|','
name|'mask'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_mask'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'protocol'
op|','
name|'net'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'rule_xml'
op|'+='
string|'"dstportstart=\'%s\' dstportend=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'rule.protocol: %r, rule.from_port: %r, '"
nl|'\n'
string|"'rule.to_port: %r'"
op|','
name|'rule'
op|'.'
name|'protocol'
op|','
nl|'\n'
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'from_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'rule_xml'
op|'+='
string|'"type=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'to_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'rule_xml'
op|'+='
string|'"code=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'rule_xml'
op|'+='
string|"'/>\\n'"
newline|'\n'
dedent|''
name|'rule_xml'
op|'+='
string|'"</rule>\\n"'
newline|'\n'
dedent|''
name|'xml'
op|'='
string|'"<filter name=\'nova-secgroup-%s\' "'
op|'%'
name|'security_group_id'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'root\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'ipv4\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|provider_fw_to_nwfilter_xml
name|'def'
name|'provider_fw_to_nwfilter_xml'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compose a filter of drop rules from specified cidrs."""'
newline|'\n'
name|'rule_xml'
op|'='
string|'""'
newline|'\n'
name|'v6protocol'
op|'='
op|'{'
string|"'tcp'"
op|':'
string|"'tcp-ipv6'"
op|','
string|"'udp'"
op|':'
string|"'udp-ipv6'"
op|','
string|"'icmp'"
op|':'
string|"'icmpv6'"
op|'}'
newline|'\n'
name|'rules'
op|'='
name|'db'
op|'.'
name|'provider_fw_rule_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'rule_xml'
op|'+='
string|'"<rule action=\'block\' direction=\'in\' priority=\'150\'>"'
newline|'\n'
name|'version'
op|'='
name|'netutils'
op|'.'
name|'get_ip_version'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
name|'and'
name|'version'
op|'=='
number|'6'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|','
name|'prefixlen'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_prefixlen'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'v6protocol'
op|'['
name|'rule'
op|'.'
name|'protocol'
op|']'
op|','
name|'net'
op|','
name|'prefixlen'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|','
name|'mask'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_mask'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'protocol'
op|','
name|'net'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'rule_xml'
op|'+='
string|'"dstportstart=\'%s\' dstportend=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'rule.protocol: %r, rule.from_port: %r, '"
nl|'\n'
string|"'rule.to_port: %r'"
op|','
name|'rule'
op|'.'
name|'protocol'
op|','
nl|'\n'
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'from_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'rule_xml'
op|'+='
string|'"type=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'to_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'rule_xml'
op|'+='
string|'"code=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
nl|'\n'
dedent|''
name|'rule_xml'
op|'+='
string|"'/>\\n'"
newline|'\n'
dedent|''
name|'rule_xml'
op|'+='
string|'"</rule>\\n"'
newline|'\n'
dedent|''
name|'xml'
op|'='
string|'"<filter name=\'nova-provider-rules\' "'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'root\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'ipv4\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_instance_filter_name
name|'def'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'nic_id'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'nova-instance-%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'nova-instance-%s-%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'nic_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_filter_exists
dedent|''
name|'def'
name|'instance_filter_exists'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check nova-instance-instance-xxx exists"""'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'instance_filter_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'The nwfilter(%(instance_filter_name)s) for'"
nl|'\n'
string|"'%(name)s is not found.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallDriver
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallDriver'
op|'('
name|'base_firewall'
op|'.'
name|'IptablesFirewallDriver'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'execute'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IptablesFirewallDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nwfilter'
op|'='
name|'NWFilterFirewall'
op|'('
name|'kwargs'
op|'['
string|"'get_connection'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up provider rules and basic NWFilter."""'
newline|'\n'
name|'self'
op|'.'
name|'nwfilter'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'basicly_filtered'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'iptables firewall: Setup Basic Filtering'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'basicly_filtered'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No-op. Everything is done in prepare_instance_filter"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(salvatore-orlando):'
nl|'\n'
comment|'# Overriding base class method for applying nwfilter operation'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'pop'
op|'('
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): use the passed info instead of the stored info'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_infos'
op|'.'
name|'pop'
op|'('
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remove_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nwfilter'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Attempted to unfilter instance %s which is not '"
nl|'\n'
string|"'filtered'"
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_basic_rules
dedent|''
dedent|''
name|'def'
name|'_do_basic_rules'
op|'('
name|'self'
op|','
name|'ipv4_rules'
op|','
name|'ipv6_rules'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
comment|'# Always drop invalid packets'
nl|'\n'
indent|'        '
name|'ipv4_rules'
op|'+='
op|'['
string|"'-m state --state '"
string|"'INVALID -j DROP'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-m state --state '"
string|"'INVALID -j DROP'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Allow established connections'
nl|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-m state --state ESTABLISHED,RELATED -j ACCEPT'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-m state --state ESTABLISHED,RELATED -j ACCEPT'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Pass through provider-wide drops'
nl|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-j $provider'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-j $provider'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|instance_filter_exists
dedent|''
name|'def'
name|'instance_filter_exists'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check nova-instance-instance-xxx exists"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'nwfilter'
op|'.'
name|'instance_filter_exists'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See class:FirewallDriver: docs."""'
newline|'\n'
name|'self'
op|'.'
name|'_do_refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'iptables'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_do_refresh_provider_fw_rules
name|'def'
name|'_do_refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Internal, synchronized version of refresh_provider_fw_rules."""'
newline|'\n'
name|'self'
op|'.'
name|'_purge_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_build_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_purge_provider_fw_rules
dedent|''
name|'def'
name|'_purge_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all rules from the provider chains."""'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'empty_chain'
op|'('
string|"'provider'"
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'empty_chain'
op|'('
string|"'provider'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_build_provider_fw_rules
dedent|''
dedent|''
name|'def'
name|'_build_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create all rules for the provider IP DROPs."""'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'provider'"
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'provider'"
op|')'
newline|'\n'
dedent|''
name|'ipv4_rules'
op|','
name|'ipv6_rules'
op|'='
name|'self'
op|'.'
name|'_provider_rules'
op|'('
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'ipv4_rules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'provider'"
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'rule'
name|'in'
name|'ipv6_rules'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'provider'"
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_provider_rules
name|'def'
name|'_provider_rules'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a list of rules from provider for IP4 & IP6."""'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'ipv4_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'ipv6_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'rules'
op|'='
name|'db'
op|'.'
name|'provider_fw_rule_get_all'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Adding provider rule: %s'"
op|')'
op|','
name|'rule'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'version'
op|'='
name|'netutils'
op|'.'
name|'get_ip_version'
op|'('
name|'rule'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'fw_rules'
op|'='
name|'ipv4_rules'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fw_rules'
op|'='
name|'ipv6_rules'
newline|'\n'
nl|'\n'
dedent|''
name|'protocol'
op|'='
name|'rule'
op|'['
string|"'protocol'"
op|']'
newline|'\n'
name|'if'
name|'version'
op|'=='
number|'6'
name|'and'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                '
name|'protocol'
op|'='
string|"'icmpv6'"
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'['
string|"'-p'"
op|','
name|'protocol'
op|','
string|"'-s'"
op|','
name|'rule'
op|'['
string|"'cidr'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'protocol'
name|'in'
op|'['
string|"'udp'"
op|','
string|"'tcp'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'['
string|"'from_port'"
op|']'
op|'=='
name|'rule'
op|'['
string|"'to_port'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'+='
op|'['
string|"'--dport'"
op|','
string|"'%s'"
op|'%'
op|'('
name|'rule'
op|'['
string|"'from_port'"
op|']'
op|','
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'multiport'"
op|','
nl|'\n'
string|"'--dports'"
op|','
string|"'%s:%s'"
op|'%'
op|'('
name|'rule'
op|'['
string|"'from_port'"
op|']'
op|','
nl|'\n'
name|'rule'
op|'['
string|"'to_port'"
op|']'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                '
name|'icmp_type'
op|'='
name|'rule'
op|'['
string|"'from_port'"
op|']'
newline|'\n'
name|'icmp_code'
op|'='
name|'rule'
op|'['
string|"'to_port'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'icmp_type'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'icmp_type_arg'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'icmp_type_arg'
op|'='
string|"'%s'"
op|'%'
name|'icmp_type'
newline|'\n'
name|'if'
name|'not'
name|'icmp_code'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'icmp_type_arg'
op|'+='
string|"'/%s'"
op|'%'
name|'icmp_code'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'icmp_type_arg'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'icmp'"
op|','
string|"'--icmp-type'"
op|','
nl|'\n'
name|'icmp_type_arg'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'icmp6'"
op|','
string|"'--icmpv6-type'"
op|','
nl|'\n'
name|'icmp_type_arg'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'args'
op|'+='
op|'['
string|"'-j DROP'"
op|']'
newline|'\n'
name|'fw_rules'
op|'+='
op|'['
string|"' '"
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'ipv4_rules'
op|','
name|'ipv6_rules'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

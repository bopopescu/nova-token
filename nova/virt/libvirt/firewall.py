begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'netutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.libvirt.firewall"'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'libvirt'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Libvirt module could not be loaded. NWFilterFirewall will "'
nl|'\n'
string|'"not work correctly."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FirewallDriver
dedent|''
name|'class'
name|'FirewallDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
indent|'    '
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prepare filters for the instance.\n\n        At this point, the instance isn\'t running yet.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop filtering instance."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply instance filter.\n\n        Once this method returns, the instance should be firewalled\n        appropriately. This method should as far as possible be a\n        no-op. It\'s vastly preferred to get everything set up in\n        prepare_instance_filter.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Refresh security group rules from data store.\n\n        Gets called when a rule has been added to or removed from\n        the security group.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Refresh security group members from data store.\n\n        Gets called when an instance gets added to or removed from\n        the security group.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create rules to block spoofing and allow dhcp.\n\n        This gets called when spawning an instance, before\n        :method:`prepare_instance_filter`.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_filter_exists
dedent|''
name|'def'
name|'instance_filter_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check nova-instance-instance-xxx exists."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterFirewall
dedent|''
dedent|''
name|'class'
name|'NWFilterFirewall'
op|'('
name|'FirewallDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Network filter firewall implementation.\n\n    This class implements a network filtering mechanism versatile\n    enough for EC2 style Security Group filtering by leveraging\n    libvirt\'s nwfilter.\n\n    First, all instances get a filter ("nova-base-filter") applied.\n    This filter provides some basic security such as protection against\n    MAC spoofing, IP spoofing, and ARP spoofing.\n\n    This filter drops all incoming ipv4 and ipv6 connections.\n    Outgoing connections are never blocked.\n\n    Second, every security group maps to a nwfilter filter(*).\n    NWFilters can be updated at runtime and changes are applied\n    immediately, so changes to security groups can be applied at\n    runtime (as mandated by the spec).\n\n    Security group rules are named "nova-secgroup-<id>" where <id>\n    is the internal id of the security group. They\'re applied only on\n    hosts that have instances in the security group in question.\n\n    Updates to security groups are done by updating the data model\n    (in response to API calls) followed by a request sent to all\n    the nodes with instances in the security group to refresh the\n    security group.\n\n    Each instance has its own NWFilter, which references the above\n    mentioned security group NWFilters. This was done because\n    interfaces can only reference one filter while filters can\n    reference multiple other filters. This has the added benefit of\n    actually being able to add and remove security groups from an\n    instance at run time. This functionality is not exposed anywhere,\n    though.\n\n    Outstanding questions:\n\n    The name is unique, so would there be any good reason to sync\n    the uuid across the nodes (by assigning it from the datamodel)?\n\n\n    (*) This sentence brought to you by the redundancy department of\n        redundancy.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'get_connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_libvirt_get_connection'
op|'='
name|'get_connection'
newline|'\n'
name|'self'
op|'.'
name|'static_filters_configured'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'handle_security_groups'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_libvirt_get_connection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_conn
dedent|''
name|'_conn'
op|'='
name|'property'
op|'('
name|'_get_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|nova_dhcp_filter
name|'def'
name|'nova_dhcp_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Defines nova DHCP filter.\n\n        The standard allow-dhcp-server filter is an <ip> one, so it uses\n        ebtables to allow traffic through. Without a corresponding rule in\n        iptables, it\'ll get blocked anyway.\n\n        """'
newline|'\n'
name|'return'
string|"'''<filter name='nova-allow-dhcp-server' chain='ipv4'>\n                    <uuid>891e4787-e5c0-d59b-cbd6-41bc3c6b36fc</uuid>\n                    <rule action='accept' direction='out' priority='100'>\n                        <udp srcipaddr='0.0.0.0'\n                             dstipaddr='255.255.255.255'\n                             srcportstart='68'\n                             dstportstart='67'/>\n                    </rule>\n                    <rule action='accept' direction='in' priority='100'>\n                        <udp srcipaddr='$DHCPSERVER'\n                             srcportstart='67'\n                             dstportstart='68'/>\n                    </rule>\n                  </filter>'''"
newline|'\n'
nl|'\n'
DECL|member|nova_ra_filter
dedent|''
name|'def'
name|'nova_ra_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'''<filter name='nova-allow-ra-server' chain='root'>\n                    <uuid>d707fa71-4fb5-4b27-9ab7-ba5ca19c8804</uuid>\n                    <rule action='accept' direction='inout' priority='100'>\n                      <icmpv6 srcipaddr='$RASERVER'/>\n                    </rule>\n                  </filter>'''"
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up basic filtering (MAC, IP, and ARP spoofing protection)."""'
newline|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|"'called setup_basic_filtering in nwfilter'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'handle_security_groups'
op|':'
newline|'\n'
comment|"# No point in setting up a filter set that we'll be overriding"
nl|'\n'
comment|'# anyway.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'logging'
op|'.'
name|'info'
op|'('
string|"'ensuring static filters'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_static_filters'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'image_id'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-vpn'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-base'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_filter_name'
op|','
nl|'\n'
op|'['
name|'base_filter'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_static_filters
dedent|''
dedent|''
name|'def'
name|'_ensure_static_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'static_filters_configured'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
string|"'nova-base'"
op|','
nl|'\n'
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'_filter_container'
op|'('
string|"'nova-vpn'"
op|','
nl|'\n'
op|'['
string|"'allow-dhcp-server'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_base_ipv4_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_base_ipv6_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_dhcp_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_ra_filter'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_project_filter'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_define_filter'
op|'('
name|'self'
op|'.'
name|'nova_project_filter_v6'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'static_filters_configured'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_filter_container
dedent|''
name|'def'
name|'_filter_container'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|"'''<filter name='%s' chain='root'>%s</filter>'''"
op|'%'
op|'('
nl|'\n'
name|'name'
op|','
nl|'\n'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|'"<filterref filter=\'%s\'/>"'
op|'%'
op|'('
name|'f'
op|','
op|')'
name|'for'
name|'f'
name|'in'
name|'filters'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|nova_base_ipv4_filter
dedent|''
name|'def'
name|'nova_base_ipv4_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-base-ipv4\' chain=\'ipv4\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'direction'
op|','
name|'action'
op|','
name|'priority'
name|'in'
op|'['
op|'('
string|"'out'"
op|','
string|"'accept'"
op|','
number|'399'
op|')'
op|','
nl|'\n'
op|'('
string|"'in'"
op|','
string|"'drop'"
op|','
number|'400'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'retval'
op|'+='
string|'"""<rule action=\'%s\' direction=\'%s\' priority=\'%d\'>\n                               <%s />\n                             </rule>"""'
op|'%'
op|'('
name|'action'
op|','
name|'direction'
op|','
nl|'\n'
name|'priority'
op|','
name|'protocol'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|nova_base_ipv6_filter
dedent|''
name|'def'
name|'nova_base_ipv6_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-base-ipv6\' chain=\'ipv6\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp-ipv6'"
op|','
string|"'udp-ipv6'"
op|','
string|"'icmpv6'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'direction'
op|','
name|'action'
op|','
name|'priority'
name|'in'
op|'['
op|'('
string|"'out'"
op|','
string|"'accept'"
op|','
number|'399'
op|')'
op|','
nl|'\n'
op|'('
string|"'in'"
op|','
string|"'drop'"
op|','
number|'400'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'retval'
op|'+='
string|'"""<rule action=\'%s\' direction=\'%s\' priority=\'%d\'>\n                               <%s />\n                             </rule>"""'
op|'%'
op|'('
name|'action'
op|','
name|'direction'
op|','
nl|'\n'
name|'priority'
op|','
name|'protocol'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|nova_project_filter
dedent|''
name|'def'
name|'nova_project_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-project\' chain=\'ipv4\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'+='
string|'"""<rule action=\'accept\' direction=\'in\' priority=\'200\'>\n                           <%s srcipaddr=\'$PROJNET\' srcipmask=\'$PROJMASK\' />\n                         </rule>"""'
op|'%'
name|'protocol'
newline|'\n'
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|nova_project_filter_v6
dedent|''
name|'def'
name|'nova_project_filter_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
string|'"<filter name=\'nova-project-v6\' chain=\'ipv6\'>"'
newline|'\n'
name|'for'
name|'protocol'
name|'in'
op|'['
string|"'tcp-ipv6'"
op|','
string|"'udp-ipv6'"
op|','
string|"'icmpv6'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'+='
string|'"""<rule action=\'accept\' direction=\'inout\'\n                                                   priority=\'200\'>\n                           <%s srcipaddr=\'$PROJNETV6\'\n                               srcipmask=\'$PROJMASKV6\' />\n                         </rule>"""'
op|'%'
op|'('
name|'protocol'
op|')'
newline|'\n'
dedent|''
name|'retval'
op|'+='
string|"'</filter>'"
newline|'\n'
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
DECL|member|_define_filter
dedent|''
name|'def'
name|'_define_filter'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'callable'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'='
name|'xml'
op|'('
op|')'
newline|'\n'
comment|'# execute in a native thread and block current greenthread until done'
nl|'\n'
dedent|''
name|'tpool'
op|'.'
name|'execute'
op|'('
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterDefineXML'
op|','
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'# Nothing to do'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
dedent|''
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates an NWFilter for the given instance.\n\n        In the process, it makes sure the filters for the security groups as\n        well as the base filter are all in place.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'image_id'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-vpn'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'base_filter'
op|'='
string|"'nova-base'"
newline|'\n'
nl|'\n'
dedent|''
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_secgroup_filter_name'
op|'='
string|"'%s-secgroup'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
comment|'#% (instance_filter_name,)'
nl|'\n'
nl|'\n'
name|'instance_secgroup_filter_children'
op|'='
op|'['
string|"'nova-base-ipv4'"
op|','
nl|'\n'
string|"'nova-base-ipv6'"
op|','
nl|'\n'
string|"'nova-allow-dhcp-server'"
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'security_group'
name|'in'
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance_secgroup_filter_children'
op|'+='
op|'['
op|'('
string|"'nova-secgroup-%s'"
op|'%'
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_secgroup_filter_name'
op|','
nl|'\n'
name|'instance_secgroup_filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'instance_filter_children'
op|'='
op|'['
name|'base_filter'
op|','
name|'instance_secgroup_filter_name'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                '
name|'gateway_v6'
op|'='
name|'network'
op|'['
string|"'gateway_v6'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'gateway_v6'
op|':'
newline|'\n'
indent|'                    '
name|'instance_secgroup_filter_children'
op|'+='
op|'['
string|"'nova-allow-ra-server'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'                '
name|'instance_filter_children'
op|'+='
op|'['
string|"'nova-project'"
op|']'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'                    '
name|'instance_filter_children'
op|'+='
op|'['
string|"'nova-project-v6'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_filter_container'
op|'('
name|'instance_filter_name'
op|','
nl|'\n'
name|'instance_filter_children'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_define_filter'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'security_group_to_nwfilter_xml'
op|'('
name|'security_group_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|security_group_to_nwfilter_xml
dedent|''
name|'def'
name|'security_group_to_nwfilter_xml'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'security_group_id'
op|')'
newline|'\n'
name|'rule_xml'
op|'='
string|'""'
newline|'\n'
name|'v6protocol'
op|'='
op|'{'
string|"'tcp'"
op|':'
string|"'tcp-ipv6'"
op|','
string|"'udp'"
op|':'
string|"'udp-ipv6'"
op|','
string|"'icmp'"
op|':'
string|"'icmpv6'"
op|'}'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'rule_xml'
op|'+='
string|'"<rule action=\'accept\' direction=\'in\' priority=\'300\'>"'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'version'
op|'='
name|'netutils'
op|'.'
name|'get_ip_version'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
name|'and'
name|'version'
op|'=='
number|'6'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|','
name|'prefixlen'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_prefixlen'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'v6protocol'
op|'['
name|'rule'
op|'.'
name|'protocol'
op|']'
op|','
name|'net'
op|','
name|'prefixlen'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'net'
op|','
name|'mask'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_mask'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'rule_xml'
op|'+='
string|'"<%s srcipaddr=\'%s\' srcipmask=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'protocol'
op|','
name|'net'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'protocol'
name|'in'
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'rule_xml'
op|'+='
string|'"dstportstart=\'%s\' dstportend=\'%s\' "'
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'rule.protocol: %r, rule.from_port: %r, '"
nl|'\n'
string|"'rule.to_port: %r'"
op|','
name|'rule'
op|'.'
name|'protocol'
op|','
nl|'\n'
name|'rule'
op|'.'
name|'from_port'
op|','
name|'rule'
op|'.'
name|'to_port'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'from_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'rule_xml'
op|'+='
string|'"type=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'.'
name|'to_port'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'rule_xml'
op|'+='
string|'"code=\'%s\' "'
op|'%'
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'rule_xml'
op|'+='
string|"'/>\\n'"
newline|'\n'
dedent|''
name|'rule_xml'
op|'+='
string|'"</rule>\\n"'
newline|'\n'
dedent|''
name|'xml'
op|'='
string|'"<filter name=\'nova-secgroup-%s\' "'
op|'%'
name|'security_group_id'
newline|'\n'
name|'if'
op|'('
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'root\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'xml'
op|'+='
string|'"chain=\'ipv4\'>%s</filter>"'
op|'%'
name|'rule_xml'
newline|'\n'
dedent|''
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|_instance_filter_name
dedent|''
name|'def'
name|'_instance_filter_name'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'nic_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'nic_id'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'nova-instance-%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'nova-instance-%s-%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'nic_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_filter_exists
dedent|''
name|'def'
name|'instance_filter_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check nova-instance-instance-xxx exists."""'
newline|'\n'
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'nic_id'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'instance_filter_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libvirt'
op|'.'
name|'libvirtError'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'The nwfilter(%(instance_filter_name)s) for'"
nl|'\n'
string|"'%(name)s is not found.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallDriver
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallDriver'
op|'('
name|'FirewallDriver'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'execute'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'='
name|'linux_net'
op|'.'
name|'iptables_manager'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'nwfilter'
op|'='
name|'NWFilterFirewall'
op|'('
name|'kwargs'
op|'['
string|"'get_connection'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'sg-fallback'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'sg-fallback'"
op|','
string|"'-j DROP'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
string|"'sg-fallback'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'sg-fallback'"
op|','
string|"'-j DROP'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use NWFilter from libvirt for this."""'
newline|'\n'
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'nwfilter'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""No-op. Everything is done in prepare_instance_filter."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'pop'
op|'('
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Attempted to unfilter instance %s which is not '"
nl|'\n'
string|"'filtered'"
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
dedent|''
dedent|''
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'instances'
op|'['
name|'instance'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'instance'
newline|'\n'
name|'self'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_filters_for_instance
dedent|''
name|'def'
name|'add_filters_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'chain_name'
op|'='
name|'self'
op|'.'
name|'_instance_chain_name'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
nl|'\n'
name|'ips_v4'
op|'='
op|'['
name|'ip'
op|'['
string|"'ip'"
op|']'
name|'for'
op|'('
name|'_'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'mapping'
op|'['
string|"'ips'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'ipv4_address'
name|'in'
name|'ips_v4'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'local'"
op|','
nl|'\n'
string|"'-d %s -j $%s'"
op|'%'
nl|'\n'
op|'('
name|'ipv4_address'
op|','
name|'chain_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
name|'ips_v6'
op|'='
op|'['
name|'ip'
op|'['
string|"'ip'"
op|']'
name|'for'
op|'('
name|'_'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'ipv6_address'
name|'in'
name|'ips_v6'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
string|"'local'"
op|','
nl|'\n'
string|"'-d %s -j $%s'"
op|'%'
nl|'\n'
op|'('
name|'ipv6_address'
op|','
nl|'\n'
name|'chain_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ipv4_rules'
op|','
name|'ipv6_rules'
op|'='
name|'self'
op|'.'
name|'instance_rules'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'rule'
name|'in'
name|'ipv4_rules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain_name'
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'rule'
name|'in'
name|'ipv6_rules'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'add_rule'
op|'('
name|'chain_name'
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_filters_for_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'remove_filters_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chain_name'
op|'='
name|'self'
op|'.'
name|'_instance_chain_name'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'remove_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'remove_chain'
op|'('
name|'chain_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_rules
dedent|''
dedent|''
name|'def'
name|'instance_rules'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'netutils'
op|'.'
name|'get_network_info'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ipv4_rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'ipv6_rules'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Always drop invalid packets'
nl|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-m state --state '"
string|"'INVALID -j DROP'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-m state --state '"
string|"'INVALID -j DROP'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Allow established connections'
nl|'\n'
name|'ipv4_rules'
op|'+='
op|'['
string|"'-m state --state ESTABLISHED,RELATED -j ACCEPT'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-m state --state ESTABLISHED,RELATED -j ACCEPT'"
op|']'
newline|'\n'
nl|'\n'
name|'dhcp_servers'
op|'='
op|'['
name|'network'
op|'['
string|"'gateway'"
op|']'
name|'for'
op|'('
name|'network'
op|','
name|'_m'
op|')'
name|'in'
name|'network_info'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'dhcp_server'
name|'in'
name|'dhcp_servers'
op|':'
newline|'\n'
indent|'            '
name|'ipv4_rules'
op|'.'
name|'append'
op|'('
string|"'-s %s -p udp --sport 67 --dport 68 '"
nl|'\n'
string|"'-j ACCEPT'"
op|'%'
op|'('
name|'dhcp_server'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#Allow project network traffic'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'            '
name|'cidrs'
op|'='
op|'['
name|'network'
op|'['
string|"'cidr'"
op|']'
name|'for'
op|'('
name|'network'
op|','
name|'_m'
op|')'
name|'in'
name|'network_info'
op|']'
newline|'\n'
name|'for'
name|'cidr'
name|'in'
name|'cidrs'
op|':'
newline|'\n'
indent|'                '
name|'ipv4_rules'
op|'.'
name|'append'
op|'('
string|"'-s %s -j ACCEPT'"
op|'%'
op|'('
name|'cidr'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# We wrap these in FLAGS.use_ipv6 because they might cause'
nl|'\n'
comment|'# a DB lookup. The other ones are just list operations, so'
nl|'\n'
comment|"# they're not worth the clutter."
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|':'
newline|'\n'
comment|'# Allow RA responses'
nl|'\n'
indent|'            '
name|'gateways_v6'
op|'='
op|'['
name|'network'
op|'['
string|"'gateway_v6'"
op|']'
name|'for'
op|'('
name|'network'
op|','
name|'_'
op|')'
name|'in'
nl|'\n'
name|'network_info'
op|']'
newline|'\n'
name|'for'
name|'gateway_v6'
name|'in'
name|'gateways_v6'
op|':'
newline|'\n'
indent|'                '
name|'ipv6_rules'
op|'.'
name|'append'
op|'('
nl|'\n'
string|"'-s %s/128 -p icmpv6 -j ACCEPT'"
op|'%'
op|'('
name|'gateway_v6'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#Allow project network traffic'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'allow_project_net_traffic'
op|':'
newline|'\n'
indent|'                '
name|'cidrv6s'
op|'='
op|'['
name|'network'
op|'['
string|"'cidr_v6'"
op|']'
name|'for'
op|'('
name|'network'
op|','
name|'_m'
op|')'
nl|'\n'
name|'in'
name|'network_info'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'cidrv6'
name|'in'
name|'cidrv6s'
op|':'
newline|'\n'
indent|'                    '
name|'ipv6_rules'
op|'.'
name|'append'
op|'('
string|"'-s %s -j ACCEPT'"
op|'%'
op|'('
name|'cidrv6'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'security_groups'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# then, security group chains and rules'
nl|'\n'
name|'for'
name|'security_group'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'rules'
op|'='
name|'db'
op|'.'
name|'security_group_rule_get_by_security_group'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'%r'"
op|','
name|'rule'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'rule'
op|'.'
name|'cidr'
op|':'
newline|'\n'
comment|'# Eventually, a mechanism to grant access for security'
nl|'\n'
comment|"# groups will turn up here. It'll use ipsets."
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'version'
op|'='
name|'netutils'
op|'.'
name|'get_ip_version'
op|'('
name|'rule'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'if'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                    '
name|'rules'
op|'='
name|'ipv4_rules'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'rules'
op|'='
name|'ipv6_rules'
newline|'\n'
nl|'\n'
dedent|''
name|'protocol'
op|'='
name|'rule'
op|'.'
name|'protocol'
newline|'\n'
name|'if'
name|'version'
op|'=='
number|'6'
name|'and'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'protocol'
op|'='
string|"'icmpv6'"
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'['
string|"'-p'"
op|','
name|'protocol'
op|','
string|"'-s'"
op|','
name|'rule'
op|'.'
name|'cidr'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'protocol'
name|'in'
op|'['
string|"'udp'"
op|','
string|"'tcp'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'rule'
op|'.'
name|'from_port'
op|'=='
name|'rule'
op|'.'
name|'to_port'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'+='
op|'['
string|"'--dport'"
op|','
string|"'%s'"
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'multiport'"
op|','
nl|'\n'
string|"'--dports'"
op|','
string|"'%s:%s'"
op|'%'
op|'('
name|'rule'
op|'.'
name|'from_port'
op|','
nl|'\n'
name|'rule'
op|'.'
name|'to_port'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'rule'
op|'.'
name|'protocol'
op|'=='
string|"'icmp'"
op|':'
newline|'\n'
indent|'                    '
name|'icmp_type'
op|'='
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
name|'icmp_code'
op|'='
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
nl|'\n'
name|'if'
name|'icmp_type'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'icmp_type_arg'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'icmp_type_arg'
op|'='
string|"'%s'"
op|'%'
name|'icmp_type'
newline|'\n'
name|'if'
name|'not'
name|'icmp_code'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                            '
name|'icmp_type_arg'
op|'+='
string|"'/%s'"
op|'%'
name|'icmp_code'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'icmp_type_arg'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                            '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'icmp'"
op|','
string|"'--icmp-type'"
op|','
nl|'\n'
name|'icmp_type_arg'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                            '
name|'args'
op|'+='
op|'['
string|"'-m'"
op|','
string|"'icmp6'"
op|','
string|"'--icmpv6-type'"
op|','
nl|'\n'
name|'icmp_type_arg'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'args'
op|'+='
op|'['
string|"'-j ACCEPT'"
op|']'
newline|'\n'
name|'rules'
op|'+='
op|'['
string|"' '"
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ipv4_rules'
op|'+='
op|'['
string|"'-j $sg-fallback'"
op|']'
newline|'\n'
name|'ipv6_rules'
op|'+='
op|'['
string|"'-j $sg-fallback'"
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'ipv4_rules'
op|','
name|'ipv6_rules'
newline|'\n'
nl|'\n'
DECL|member|instance_filter_exists
dedent|''
name|'def'
name|'instance_filter_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check nova-instance-instance-xxx exists."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'nwfilter'
op|'.'
name|'instance_filter_exists'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'do_refresh_security_group_rules'
op|'('
name|'security_group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'iptables'
op|'.'
name|'apply'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'iptables'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|do_refresh_security_group_rules
name|'def'
name|'do_refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_security_group_chain_name
dedent|''
dedent|''
name|'def'
name|'_security_group_chain_name'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'nova-sg-%s'"
op|'%'
op|'('
name|'security_group_id'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_chain_name
dedent|''
name|'def'
name|'_instance_chain_name'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'inst-%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

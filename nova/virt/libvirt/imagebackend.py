begin_unit
comment|'# Copyright 2012 Grid Dynamics'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'image'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'fileutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
name|'import'
name|'api'
name|'as'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'lvm'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'rbd'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'libvirt_utils'
newline|'\n'
nl|'\n'
DECL|variable|__imagebackend_opts
name|'__imagebackend_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'images_type'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'default'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'VM Images format. Acceptable values are: raw, qcow2, lvm,'"
nl|'\n'
string|"' rbd, default. If default is specified,'"
nl|'\n'
string|"' then use_cow_images flag is used instead of this one.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'images_volume_group'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'LVM Volume Group that is used for VM images, when you'"
nl|'\n'
string|"' specify images_type=lvm.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'sparse_logical_volumes'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Create sparse logical volumes (with virtualsize)'"
nl|'\n'
string|"' if this flag is set to True.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'volume_clear'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'zero'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Method used to wipe old volumes (valid options are: '"
nl|'\n'
string|"'none, zero, shred)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'volume_clear_size'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
name|'help'
op|'='
string|"'Size in MiB to wipe at start of old volumes. 0 => all'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'images_rbd_pool'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'rbd'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The RADOS pool in which rbd volumes are stored'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'images_rbd_ceph_conf'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
comment|'# default determined by librados'
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path to the ceph configuration file to use'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'__imagebackend_opts'
op|','
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'image_cache_subdirectory_name'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'preallocate_images'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'rbd_user'"
op|','
string|"'nova.virt.libvirt.volume'"
op|','
name|'group'
op|'='
string|"'libvirt'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'rbd_secret_uuid'"
op|','
string|"'nova.virt.libvirt.volume'"
op|','
name|'group'
op|'='
string|"'libvirt'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|IMAGE_API
name|'IMAGE_API'
op|'='
name|'image'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
DECL|class|Image
name|'class'
name|'Image'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|SUPPORTS_CLONE
indent|'    '
name|'SUPPORTS_CLONE'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'source_type'
op|','
name|'driver_format'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Image initialization.\n\n        :source_type: block or file\n        :driver_format: raw or qcow2\n        :is_block_dev:\n        """'
newline|'\n'
name|'self'
op|'.'
name|'source_type'
op|'='
name|'source_type'
newline|'\n'
name|'self'
op|'.'
name|'driver_format'
op|'='
name|'driver_format'
newline|'\n'
name|'self'
op|'.'
name|'is_block_dev'
op|'='
name|'is_block_dev'
newline|'\n'
name|'self'
op|'.'
name|'preallocate'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# NOTE(dripton): We store lines of json (path, disk_format) in this'
nl|'\n'
comment|'# file, for some image types, to prevent attacks based on changing the'
nl|'\n'
comment|'# disk_format.'
nl|'\n'
name|'self'
op|'.'
name|'disk_info_path'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): We need a lock directory which is shared along with'
nl|'\n'
comment|'# instance files, to cover the scenario where multiple compute nodes'
nl|'\n'
comment|'# are trying to create a base file at the same time'
nl|'\n'
name|'self'
op|'.'
name|'lock_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
string|"'locks'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|create_image
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'prepare_template'
op|','
name|'base'
op|','
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create image from template.\n\n        Contains specific behavior for each image type.\n\n        :prepare_template: function, that creates template.\n                           Should accept `target` argument.\n        :base: Template name\n        :size: Size of created image in bytes\n\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|libvirt_info
dedent|''
name|'def'
name|'libvirt_info'
op|'('
name|'self'
op|','
name|'disk_bus'
op|','
name|'disk_dev'
op|','
name|'device_type'
op|','
name|'cache_mode'
op|','
nl|'\n'
name|'extra_specs'
op|','
name|'hypervisor_version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get `LibvirtConfigGuestDisk` filled for this image.\n\n        :disk_dev: Disk bus device name\n        :disk_bus: Disk bus type\n        :device_type: Device type for this image.\n        :cache_mode: Caching mode for this image\n        :extra_specs: Instance type extra specs dict.\n        """'
newline|'\n'
name|'info'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
name|'info'
op|'.'
name|'source_type'
op|'='
name|'self'
op|'.'
name|'source_type'
newline|'\n'
name|'info'
op|'.'
name|'source_device'
op|'='
name|'device_type'
newline|'\n'
name|'info'
op|'.'
name|'target_bus'
op|'='
name|'disk_bus'
newline|'\n'
name|'info'
op|'.'
name|'target_dev'
op|'='
name|'disk_dev'
newline|'\n'
name|'info'
op|'.'
name|'driver_cache'
op|'='
name|'cache_mode'
newline|'\n'
name|'info'
op|'.'
name|'driver_format'
op|'='
name|'self'
op|'.'
name|'driver_format'
newline|'\n'
name|'driver_name'
op|'='
name|'libvirt_utils'
op|'.'
name|'pick_disk_driver_name'
op|'('
name|'hypervisor_version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'is_block_dev'
op|')'
newline|'\n'
name|'info'
op|'.'
name|'driver_name'
op|'='
name|'driver_name'
newline|'\n'
name|'info'
op|'.'
name|'source_path'
op|'='
name|'self'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
name|'tune_items'
op|'='
op|'['
string|"'disk_read_bytes_sec'"
op|','
string|"'disk_read_iops_sec'"
op|','
nl|'\n'
string|"'disk_write_bytes_sec'"
op|','
string|"'disk_write_iops_sec'"
op|','
nl|'\n'
string|"'disk_total_bytes_sec'"
op|','
string|"'disk_total_iops_sec'"
op|']'
newline|'\n'
comment|'# Note(yaguang): Currently, the only tuning available is Block I/O'
nl|'\n'
comment|'# throttling for qemu.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'source_type'
name|'in'
op|'['
string|"'file'"
op|','
string|"'block'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'extra_specs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'scope'
op|'='
name|'key'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'scope'
op|')'
op|'>'
number|'1'
name|'and'
name|'scope'
op|'['
number|'0'
op|']'
op|'=='
string|"'quota'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'scope'
op|'['
number|'1'
op|']'
name|'in'
name|'tune_items'
op|':'
newline|'\n'
indent|'                        '
name|'setattr'
op|'('
name|'info'
op|','
name|'scope'
op|'['
number|'1'
op|']'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
DECL|member|check_image_exists
dedent|''
name|'def'
name|'check_image_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache
dedent|''
name|'def'
name|'cache'
op|'('
name|'self'
op|','
name|'fetch_func'
op|','
name|'filename'
op|','
name|'size'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates image from template.\n\n        Ensures that template and image not already exists.\n        Ensures that base directory exists.\n        Synchronizes on template fetching.\n\n        :fetch_func: Function that creates the base image\n                     Should accept `target` argument.\n        :filename: Name of the file in the image directory\n        :size: Size of created image in bytes (optional)\n        """'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'filename'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'lock_path'
op|')'
newline|'\n'
DECL|function|fetch_func_sync
name|'def'
name|'fetch_func_sync'
op|'('
name|'target'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fetch_func'
op|'('
name|'target'
op|'='
name|'target'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'base_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base_dir'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fileutils'
op|'.'
name|'ensure_tree'
op|'('
name|'base_dir'
op|')'
newline|'\n'
dedent|''
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'filename'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'check_image_exists'
op|'('
op|')'
name|'or'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'create_image'
op|'('
name|'fetch_func_sync'
op|','
name|'base'
op|','
name|'size'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'size'
name|'and'
name|'self'
op|'.'
name|'preallocate'
name|'and'
name|'self'
op|'.'
name|'_can_fallocate'
op|'('
op|')'
name|'and'
nl|'\n'
name|'os'
op|'.'
name|'access'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'os'
op|'.'
name|'W_OK'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'fallocate'"
op|','
string|"'-n'"
op|','
string|"'-l'"
op|','
name|'size'
op|','
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_can_fallocate
dedent|''
dedent|''
name|'def'
name|'_can_fallocate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check once per class, whether fallocate(1) is available,\n           and that the instances directory supports fallocate(2).\n        """'
newline|'\n'
name|'can_fallocate'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'__class__'
op|','
string|"'can_fallocate'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'can_fallocate'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'trycmd'
op|'('
string|"'fallocate'"
op|','
string|"'-n'"
op|','
string|"'-l'"
op|','
string|"'1'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'path'
op|'+'
string|"'.fallocate_test'"
op|')'
newline|'\n'
name|'fileutils'
op|'.'
name|'delete_if_exists'
op|'('
name|'self'
op|'.'
name|'path'
op|'+'
string|"'.fallocate_test'"
op|')'
newline|'\n'
name|'can_fallocate'
op|'='
name|'not'
name|'err'
newline|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'can_fallocate'
op|'='
name|'can_fallocate'
newline|'\n'
name|'if'
name|'not'
name|'can_fallocate'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Unable to preallocate_images=%(imgs)s at path: '"
nl|'\n'
string|"'%(path)s'"
op|')'
op|','
op|'{'
string|"'imgs'"
op|':'
name|'CONF'
op|'.'
name|'preallocate_images'
op|','
nl|'\n'
string|"'path'"
op|':'
name|'self'
op|'.'
name|'path'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'can_fallocate'
newline|'\n'
nl|'\n'
DECL|member|verify_base_size
dedent|''
name|'def'
name|'verify_base_size'
op|'('
name|'self'
op|','
name|'base'
op|','
name|'size'
op|','
name|'base_size'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the base image is not larger than size.\n           Since images can\'t be generally shrunk, enforce this\n           constraint taking account of virtual image size.\n        """'
newline|'\n'
nl|'\n'
comment|'# Note(pbrady): The size and min_disk parameters of a glance'
nl|'\n'
comment|'#  image are checked against the instance size before the image'
nl|'\n'
comment|'#  is even downloaded from glance, but currently min_disk is'
nl|'\n'
comment|"#  adjustable and doesn't currently account for virtual disk size,"
nl|'\n'
comment|'#  so we need this extra check here.'
nl|'\n'
comment|'# NOTE(cfb): Having a flavor that sets the root size to 0 and having'
nl|'\n'
comment|'#  nova effectively ignore that size and use the size of the'
nl|'\n'
comment|'#  image is considered a feature at this time, not a bug.'
nl|'\n'
nl|'\n'
name|'if'
name|'size'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'size'
name|'and'
name|'not'
name|'base_size'
op|':'
newline|'\n'
indent|'            '
name|'base_size'
op|'='
name|'self'
op|'.'
name|'get_disk_size'
op|'('
name|'base'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'size'
op|'<'
name|'base_size'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'%(base)s virtual size %(base_size)s '"
nl|'\n'
string|"'larger than flavor root disk size %(size)s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
op|'{'
string|"'base'"
op|':'
name|'base'
op|','
nl|'\n'
string|"'base_size'"
op|':'
name|'base_size'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'size'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'FlavorDiskTooSmall'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_disk_size
dedent|''
dedent|''
name|'def'
name|'get_disk_size'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk'
op|'.'
name|'get_disk_size'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot_extract
dedent|''
name|'def'
name|'snapshot_extract'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'out_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_driver_format
dedent|''
name|'def'
name|'_get_driver_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver_format'
newline|'\n'
nl|'\n'
DECL|member|resolve_driver_format
dedent|''
name|'def'
name|'resolve_driver_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the driver format for self.path.\n\n        First checks self.disk_info_path for an entry.\n        If it\'s not there, calls self._get_driver_format(), and then\n        stores the result in self.disk_info_path\n\n        See https://bugs.launchpad.net/nova/+bug/1221190\n        """'
newline|'\n'
DECL|function|_dict_from_line
name|'def'
name|'_dict_from_line'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Could not load line %(line)s, got error "'
nl|'\n'
string|'"%(error)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'line'"
op|':'
name|'line'
op|','
string|"'error'"
op|':'
name|'unicode'
op|'('
name|'e'
op|')'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidDiskInfo'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'self'
op|'.'
name|'disk_info_path'
op|','
name|'external'
op|'='
name|'False'
op|','
nl|'\n'
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'lock_path'
op|')'
newline|'\n'
DECL|function|write_to_disk_info_file
name|'def'
name|'write_to_disk_info_file'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Use os.open to create it without group or world write permission.'
nl|'\n'
indent|'            '
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'self'
op|'.'
name|'disk_info_path'
op|','
name|'os'
op|'.'
name|'O_RDONLY'
op|'|'
name|'os'
op|'.'
name|'O_CREAT'
op|','
number|'0o644'
op|')'
newline|'\n'
name|'with'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|'"r"'
op|')'
name|'as'
name|'disk_info_file'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
name|'disk_info_file'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'dct'
op|'='
name|'_dict_from_line'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'path'
name|'in'
name|'dct'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Attempted overwrite of an existing value."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidDiskInfo'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'dct'
op|'.'
name|'update'
op|'('
op|'{'
name|'self'
op|'.'
name|'path'
op|':'
name|'driver_format'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'tmp_path'
op|'='
name|'self'
op|'.'
name|'disk_info_path'
op|'+'
string|'".tmp"'
newline|'\n'
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'tmp_path'
op|','
name|'os'
op|'.'
name|'O_WRONLY'
op|'|'
name|'os'
op|'.'
name|'O_CREAT'
op|','
number|'0o644'
op|')'
newline|'\n'
name|'with'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|'"w"'
op|')'
name|'as'
name|'tmp_file'
op|':'
newline|'\n'
indent|'                '
name|'tmp_file'
op|'.'
name|'write'
op|'('
string|"'%s\\n'"
op|'%'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'dct'
op|')'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'rename'
op|'('
name|'tmp_path'
op|','
name|'self'
op|'.'
name|'disk_info_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'self'
op|'.'
name|'disk_info_path'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'disk_info_path'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'disk_info_path'
op|')'
name|'as'
name|'disk_info_file'
op|':'
newline|'\n'
indent|'                    '
name|'line'
op|'='
name|'disk_info_file'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'dct'
op|'='
name|'_dict_from_line'
op|'('
name|'line'
op|')'
newline|'\n'
name|'for'
name|'path'
op|','
name|'driver_format'
name|'in'
name|'dct'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'path'
op|'=='
name|'self'
op|'.'
name|'path'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'driver_format'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'driver_format'
op|'='
name|'self'
op|'.'
name|'_get_driver_format'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'disk_info_path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'fileutils'
op|'.'
name|'ensure_tree'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'disk_info_path'
op|')'
op|')'
newline|'\n'
name|'write_to_disk_info_file'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'DiskInfoReadWriteFail'
op|'('
name|'reason'
op|'='
name|'unicode'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'driver_format'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|is_shared_block_storage
name|'def'
name|'is_shared_block_storage'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""True if the backend puts images on a shared block storage."""'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|clone
dedent|''
name|'def'
name|'clone'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id_or_uri'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clone an image.\n\n        Note that clone operation is backend-dependent. The backend may ask\n        the image API for a list of image "locations" and select one or more\n        of those locations to clone an image from.\n\n        :param image_id_or_uri: The ID or URI of an image to clone.\n\n        :raises: exception.ImageUnacceptable if it cannot be cloned\n        """'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|"'clone() is not implemented'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageUnacceptable'
op|'('
name|'image_id'
op|'='
name|'image_id_or_uri'
op|','
nl|'\n'
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Raw
dedent|''
dedent|''
name|'class'
name|'Raw'
op|'('
name|'Image'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'disk_name'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Raw'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|'"file"'
op|','
string|'"raw"'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'path'
op|'='
op|'('
name|'path'
name|'or'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'libvirt_utils'
op|'.'
name|'get_instance_path'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
name|'disk_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preallocate'
op|'='
name|'CONF'
op|'.'
name|'preallocate_images'
op|'!='
string|"'none'"
newline|'\n'
name|'self'
op|'.'
name|'disk_info_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|','
nl|'\n'
string|"'disk.info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'correct_format'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_driver_format
dedent|''
name|'def'
name|'_get_driver_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'images'
op|'.'
name|'qemu_img_info'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'return'
name|'data'
op|'.'
name|'file_format'
name|'or'
string|"'raw'"
newline|'\n'
nl|'\n'
DECL|member|correct_format
dedent|''
name|'def'
name|'correct_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver_format'
op|'='
name|'self'
op|'.'
name|'resolve_driver_format'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_image
dedent|''
dedent|''
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'prepare_template'
op|','
name|'base'
op|','
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'base'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'filename'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'lock_path'
op|')'
newline|'\n'
DECL|function|copy_raw_image
name|'def'
name|'copy_raw_image'
op|'('
name|'base'
op|','
name|'target'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'copy_image'
op|'('
name|'base'
op|','
name|'target'
op|')'
newline|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
comment|"# class Raw is misnamed, format may not be 'raw' in all cases"
nl|'\n'
indent|'                '
name|'use_cow'
op|'='
name|'self'
op|'.'
name|'driver_format'
op|'=='
string|"'qcow2'"
newline|'\n'
name|'disk'
op|'.'
name|'extend'
op|'('
name|'target'
op|','
name|'size'
op|','
name|'use_cow'
op|'='
name|'use_cow'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'generating'
op|'='
string|"'image_id'"
name|'not'
name|'in'
name|'kwargs'
newline|'\n'
name|'if'
name|'generating'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'check_image_exists'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Generating image in place'
nl|'\n'
indent|'                '
name|'prepare_template'
op|'('
name|'target'
op|'='
name|'self'
op|'.'
name|'path'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'prepare_template'
op|'('
name|'target'
op|'='
name|'base'
op|','
name|'max_size'
op|'='
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'verify_base_size'
op|'('
name|'base'
op|','
name|'size'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'fileutils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'copy_raw_image'
op|'('
name|'base'
op|','
name|'self'
op|'.'
name|'path'
op|','
name|'size'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'correct_format'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot_extract
dedent|''
name|'def'
name|'snapshot_extract'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'out_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'images'
op|'.'
name|'convert_image'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'target'
op|','
name|'out_format'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Qcow2
dedent|''
dedent|''
name|'class'
name|'Qcow2'
op|'('
name|'Image'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'disk_name'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Qcow2'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|'"file"'
op|','
string|'"qcow2"'
op|','
name|'is_block_dev'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'path'
op|'='
op|'('
name|'path'
name|'or'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'libvirt_utils'
op|'.'
name|'get_instance_path'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
name|'disk_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preallocate'
op|'='
name|'CONF'
op|'.'
name|'preallocate_images'
op|'!='
string|"'none'"
newline|'\n'
name|'self'
op|'.'
name|'disk_info_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|','
nl|'\n'
string|"'disk.info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resolve_driver_format'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_image
dedent|''
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'prepare_template'
op|','
name|'base'
op|','
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'base'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'filename'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'lock_path'
op|')'
newline|'\n'
DECL|function|copy_qcow2_image
name|'def'
name|'copy_qcow2_image'
op|'('
name|'base'
op|','
name|'target'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
comment|'# TODO(pbrady): Consider copying the cow image here'
nl|'\n'
comment|'# with preallocation=metadata set for performance reasons.'
nl|'\n'
comment|"# This would be keyed on a 'preallocate_images' setting."
nl|'\n'
indent|'            '
name|'libvirt_utils'
op|'.'
name|'create_cow_image'
op|'('
name|'base'
op|','
name|'target'
op|')'
newline|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'extend'
op|'('
name|'target'
op|','
name|'size'
op|','
name|'use_cow'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Download the unmodified base image unless we already have a copy.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prepare_template'
op|'('
name|'target'
op|'='
name|'base'
op|','
name|'max_size'
op|'='
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'verify_base_size'
op|'('
name|'base'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'legacy_backing_size'
op|'='
name|'None'
newline|'\n'
name|'legacy_base'
op|'='
name|'base'
newline|'\n'
nl|'\n'
comment|'# Determine whether an existing qcow2 disk uses a legacy backing by'
nl|'\n'
comment|'# actually looking at the image itself and parsing the output of the'
nl|'\n'
comment|'# backing file it expects to be using.'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'backing_path'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_disk_backing_file'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'if'
name|'backing_path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'backing_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'backing_path'
op|')'
newline|'\n'
name|'backing_parts'
op|'='
name|'backing_file'
op|'.'
name|'rpartition'
op|'('
string|"'_'"
op|')'
newline|'\n'
name|'if'
name|'backing_file'
op|'!='
name|'backing_parts'
op|'['
op|'-'
number|'1'
op|']'
name|'and'
name|'backing_parts'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'isdigit'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'legacy_backing_size'
op|'='
name|'int'
op|'('
name|'backing_parts'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'legacy_base'
op|'+='
string|"'_%d'"
op|'%'
name|'legacy_backing_size'
newline|'\n'
name|'legacy_backing_size'
op|'*='
name|'units'
op|'.'
name|'Gi'
newline|'\n'
nl|'\n'
comment|'# Create the legacy backing file if necessary.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'legacy_backing_size'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'legacy_base'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'fileutils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'legacy_base'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'libvirt_utils'
op|'.'
name|'copy_image'
op|'('
name|'base'
op|','
name|'legacy_base'
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'extend'
op|'('
name|'legacy_base'
op|','
name|'legacy_backing_size'
op|','
name|'use_cow'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'fileutils'
op|'.'
name|'remove_path_on_error'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'copy_qcow2_image'
op|'('
name|'base'
op|','
name|'self'
op|'.'
name|'path'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot_extract
dedent|''
dedent|''
dedent|''
name|'def'
name|'snapshot_extract'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'out_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'libvirt_utils'
op|'.'
name|'extract_snapshot'
op|'('
name|'self'
op|'.'
name|'path'
op|','
string|"'qcow2'"
op|','
nl|'\n'
name|'target'
op|','
nl|'\n'
name|'out_format'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Lvm
dedent|''
dedent|''
name|'class'
name|'Lvm'
op|'('
name|'Image'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|escape
name|'def'
name|'escape'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'filename'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'__'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'disk_name'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Lvm'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|'"block"'
op|','
string|'"raw"'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'='
name|'lvm'
op|'.'
name|'volume_info'
op|'('
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vg'
op|'='
name|'info'
op|'['
string|"'VG'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'lv'
op|'='
name|'info'
op|'['
string|"'LV'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_volume_group'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'You should specify'"
nl|'\n'
string|"' images_volume_group'"
nl|'\n'
string|"' flag to use LVM images.'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'vg'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_volume_group'
newline|'\n'
name|'self'
op|'.'
name|'lv'
op|'='
string|"'%s_%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'escape'
op|'('
name|'disk_name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'/dev'"
op|','
name|'self'
op|'.'
name|'vg'
op|','
name|'self'
op|'.'
name|'lv'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(pbrady): possibly deprecate libvirt.sparse_logical_volumes'
nl|'\n'
comment|'# for the more general preallocate_images'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sparse'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'sparse_logical_volumes'
newline|'\n'
name|'self'
op|'.'
name|'preallocate'
op|'='
name|'not'
name|'self'
op|'.'
name|'sparse'
newline|'\n'
nl|'\n'
DECL|member|_can_fallocate
dedent|''
name|'def'
name|'_can_fallocate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|create_image
dedent|''
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'prepare_template'
op|','
name|'base'
op|','
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'base'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'filename'
op|','
name|'external'
op|'='
name|'True'
op|','
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'lock_path'
op|')'
newline|'\n'
DECL|function|create_lvm_image
name|'def'
name|'create_lvm_image'
op|'('
name|'base'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_size'
op|'='
name|'disk'
op|'.'
name|'get_disk_size'
op|'('
name|'base'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'verify_base_size'
op|'('
name|'base'
op|','
name|'size'
op|','
name|'base_size'
op|'='
name|'base_size'
op|')'
newline|'\n'
name|'resize'
op|'='
name|'size'
op|'>'
name|'base_size'
newline|'\n'
name|'size'
op|'='
name|'size'
name|'if'
name|'resize'
name|'else'
name|'base_size'
newline|'\n'
name|'lvm'
op|'.'
name|'create_volume'
op|'('
name|'self'
op|'.'
name|'vg'
op|','
name|'self'
op|'.'
name|'lv'
op|','
nl|'\n'
name|'size'
op|','
name|'sparse'
op|'='
name|'self'
op|'.'
name|'sparse'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'convert_image'
op|'('
name|'base'
op|','
name|'self'
op|'.'
name|'path'
op|','
string|"'raw'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'resize'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'.'
name|'resize2fs'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'generated'
op|'='
string|"'ephemeral_size'"
name|'in'
name|'kwargs'
newline|'\n'
nl|'\n'
comment|'# Generate images with specified size right on volume'
nl|'\n'
name|'if'
name|'generated'
name|'and'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'lvm'
op|'.'
name|'create_volume'
op|'('
name|'self'
op|'.'
name|'vg'
op|','
name|'self'
op|'.'
name|'lv'
op|','
nl|'\n'
name|'size'
op|','
name|'sparse'
op|'='
name|'self'
op|'.'
name|'sparse'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'remove_volume_on_error'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'prepare_template'
op|'('
name|'target'
op|'='
name|'self'
op|'.'
name|'path'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'prepare_template'
op|'('
name|'target'
op|'='
name|'base'
op|','
name|'max_size'
op|'='
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'remove_volume_on_error'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'create_lvm_image'
op|'('
name|'base'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|remove_volume_on_error
name|'def'
name|'remove_volume_on_error'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lvm'
op|'.'
name|'remove_volumes'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot_extract
dedent|''
dedent|''
dedent|''
name|'def'
name|'snapshot_extract'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'out_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'images'
op|'.'
name|'convert_image'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'target'
op|','
name|'out_format'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Rbd
dedent|''
dedent|''
name|'class'
name|'Rbd'
op|'('
name|'Image'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|SUPPORTS_CLONE
indent|'    '
name|'SUPPORTS_CLONE'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'disk_name'
op|'='
name|'None'
op|','
name|'path'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Rbd'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|'"block"'
op|','
string|'"rbd"'
op|','
name|'is_block_dev'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'rbd_name'
op|'='
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rbd_name'
op|'='
string|"'%s_%s'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'disk_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_rbd_pool'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'You should specify'"
nl|'\n'
string|"' images_rbd_pool'"
nl|'\n'
string|"' flag to use rbd images.'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pool'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_rbd_pool'
newline|'\n'
name|'self'
op|'.'
name|'rbd_user'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
newline|'\n'
name|'self'
op|'.'
name|'ceph_conf'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_rbd_ceph_conf'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'rbd'
op|'.'
name|'RBDDriver'
op|'('
nl|'\n'
name|'pool'
op|'='
name|'self'
op|'.'
name|'pool'
op|','
nl|'\n'
name|'ceph_conf'
op|'='
name|'self'
op|'.'
name|'ceph_conf'
op|','
nl|'\n'
name|'rbd_user'
op|'='
name|'self'
op|'.'
name|'rbd_user'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'path'
op|'='
string|"'rbd:%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'pool'
op|','
name|'self'
op|'.'
name|'rbd_name'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'rbd_user'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|'+='
string|"':id='"
op|'+'
name|'self'
op|'.'
name|'rbd_user'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'ceph_conf'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|'+='
string|"':conf='"
op|'+'
name|'self'
op|'.'
name|'ceph_conf'
newline|'\n'
nl|'\n'
DECL|member|libvirt_info
dedent|''
dedent|''
name|'def'
name|'libvirt_info'
op|'('
name|'self'
op|','
name|'disk_bus'
op|','
name|'disk_dev'
op|','
name|'device_type'
op|','
name|'cache_mode'
op|','
nl|'\n'
name|'extra_specs'
op|','
name|'hypervisor_version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get `LibvirtConfigGuestDisk` filled for this image.\n\n        :disk_dev: Disk bus device name\n        :disk_bus: Disk bus type\n        :device_type: Device type for this image.\n        :cache_mode: Caching mode for this image\n        :extra_specs: Instance type extra specs dict.\n        """'
newline|'\n'
name|'info'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestDisk'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'hosts'
op|','
name|'ports'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_mon_addrs'
op|'('
op|')'
newline|'\n'
name|'info'
op|'.'
name|'source_device'
op|'='
name|'device_type'
newline|'\n'
name|'info'
op|'.'
name|'driver_format'
op|'='
string|"'raw'"
newline|'\n'
name|'info'
op|'.'
name|'driver_cache'
op|'='
name|'cache_mode'
newline|'\n'
name|'info'
op|'.'
name|'target_bus'
op|'='
name|'disk_bus'
newline|'\n'
name|'info'
op|'.'
name|'target_dev'
op|'='
name|'disk_dev'
newline|'\n'
name|'info'
op|'.'
name|'source_type'
op|'='
string|"'network'"
newline|'\n'
name|'info'
op|'.'
name|'source_protocol'
op|'='
string|"'rbd'"
newline|'\n'
name|'info'
op|'.'
name|'source_name'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'pool'
op|','
name|'self'
op|'.'
name|'rbd_name'
op|')'
newline|'\n'
name|'info'
op|'.'
name|'source_hosts'
op|'='
name|'hosts'
newline|'\n'
name|'info'
op|'.'
name|'source_ports'
op|'='
name|'ports'
newline|'\n'
name|'auth_enabled'
op|'='
op|'('
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'.'
name|'auth_secret_uuid'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
newline|'\n'
name|'auth_enabled'
op|'='
name|'True'
comment|'# Force authentication locally'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'.'
name|'auth_username'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_user'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'auth_enabled'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'.'
name|'auth_secret_type'
op|'='
string|"'ceph'"
newline|'\n'
name|'info'
op|'.'
name|'auth_secret_uuid'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'rbd_secret_uuid'
newline|'\n'
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
DECL|member|_can_fallocate
dedent|''
name|'def'
name|'_can_fallocate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|check_image_exists
dedent|''
name|'def'
name|'check_image_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'rbd_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_disk_size
dedent|''
name|'def'
name|'get_disk_size'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the size of the virtual disk in bytes.\n\n        The name argument is ignored since this backend already knows\n        its name, and callers may pass a non-existent local file path.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'size'
op|'('
name|'self'
op|'.'
name|'rbd_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_image
dedent|''
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'prepare_template'
op|','
name|'base'
op|','
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'check_image_exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prepare_template'
op|'('
name|'target'
op|'='
name|'base'
op|','
name|'max_size'
op|'='
name|'size'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'verify_base_size'
op|'('
name|'base'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
comment|'# prepare_template() may have cloned the image into a new rbd'
nl|'\n'
comment|'# image already instead of downloading it locally'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'check_image_exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'import_image'
op|'('
name|'base'
op|','
name|'self'
op|'.'
name|'rbd_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'size'
name|'and'
name|'size'
op|'>'
name|'self'
op|'.'
name|'get_disk_size'
op|'('
name|'self'
op|'.'
name|'rbd_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'rbd_name'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot_extract
dedent|''
dedent|''
name|'def'
name|'snapshot_extract'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'out_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'images'
op|'.'
name|'convert_image'
op|'('
name|'self'
op|'.'
name|'path'
op|','
name|'target'
op|','
name|'out_format'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|is_shared_block_storage
name|'def'
name|'is_shared_block_storage'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|clone
dedent|''
name|'def'
name|'clone'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id_or_uri'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'supports_layering'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|"'installed version of librbd does not support cloning'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageUnacceptable'
op|'('
name|'image_id'
op|'='
name|'image_id_or_uri'
op|','
nl|'\n'
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'image_meta'
op|'='
name|'IMAGE_API'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'image_id_or_uri'
op|','
nl|'\n'
name|'include_locations'
op|'='
name|'True'
op|')'
newline|'\n'
name|'locations'
op|'='
name|'image_meta'
op|'['
string|"'locations'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Image locations are: %(locs)s'"
op|'%'
op|'{'
string|"'locs'"
op|':'
name|'locations'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
name|'not'
name|'in'
op|'['
string|"'raw'"
op|','
string|"'iso'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|"'Image is not raw format'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageUnacceptable'
op|'('
name|'image_id'
op|'='
name|'image_id_or_uri'
op|','
nl|'\n'
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'location'
name|'in'
name|'locations'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'is_cloneable'
op|'('
name|'location'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'clone'
op|'('
name|'location'
op|','
name|'self'
op|'.'
name|'rbd_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'reason'
op|'='
name|'_'
op|'('
string|"'No image locations are accessible'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageUnacceptable'
op|'('
name|'image_id'
op|'='
name|'image_id_or_uri'
op|','
nl|'\n'
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Backend
dedent|''
dedent|''
name|'class'
name|'Backend'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'use_cow'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'BACKEND'
op|'='
op|'{'
nl|'\n'
string|"'raw'"
op|':'
name|'Raw'
op|','
nl|'\n'
string|"'qcow2'"
op|':'
name|'Qcow2'
op|','
nl|'\n'
string|"'lvm'"
op|':'
name|'Lvm'
op|','
nl|'\n'
string|"'rbd'"
op|':'
name|'Rbd'
op|','
nl|'\n'
string|"'default'"
op|':'
name|'Qcow2'
name|'if'
name|'use_cow'
name|'else'
name|'Raw'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|backend
dedent|''
name|'def'
name|'backend'
op|'('
name|'self'
op|','
name|'image_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'image_type'
op|':'
newline|'\n'
indent|'            '
name|'image_type'
op|'='
name|'CONF'
op|'.'
name|'libvirt'
op|'.'
name|'images_type'
newline|'\n'
dedent|''
name|'image'
op|'='
name|'self'
op|'.'
name|'BACKEND'
op|'.'
name|'get'
op|'('
name|'image_type'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'Unknown image_type=%s'"
op|')'
op|'%'
name|'image_type'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'image'
newline|'\n'
nl|'\n'
DECL|member|image
dedent|''
name|'def'
name|'image'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'disk_name'
op|','
name|'image_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Constructs image for selected backend\n\n        :instance: Instance name.\n        :name: Image name.\n        :image_type: Image type.\n                     Optional, is CONF.libvirt.images_type by default.\n\n        """'
newline|'\n'
name|'backend'
op|'='
name|'self'
op|'.'
name|'backend'
op|'('
name|'image_type'
op|')'
newline|'\n'
name|'return'
name|'backend'
op|'('
name|'instance'
op|'='
name|'instance'
op|','
name|'disk_name'
op|'='
name|'disk_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'disk_path'
op|','
name|'image_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns snapshot for given image\n\n        :path: path to image\n        :image_type: type of image\n        """'
newline|'\n'
name|'backend'
op|'='
name|'self'
op|'.'
name|'backend'
op|'('
name|'image_type'
op|')'
newline|'\n'
name|'return'
name|'backend'
op|'('
name|'path'
op|'='
name|'disk_path'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

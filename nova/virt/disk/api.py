begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2011, Piston Cloud Computing, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nUtility methods to resize, repartition, and modify disk images.\n\nIncludes injection of SSH PGP keys into authorized_keys file.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'name'
op|'!='
string|"'nt'"
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'crypt'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'oslo'
op|'.'
name|'concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'serialization'
name|'import'
name|'jsonutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
op|'.'
name|'mount'
name|'import'
name|'api'
name|'as'
name|'mount'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
op|'.'
name|'vfs'
name|'import'
name|'api'
name|'as'
name|'vfs'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|disk_opts
name|'disk_opts'
op|'='
op|'['
nl|'\n'
comment|"# NOTE(yamahata): ListOpt won't work because the command may include a"
nl|'\n'
comment|'#                 comma. For example:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#                 mkfs.ext3 -O dir_index,extent -E stride=8,stripe-width=16'
nl|'\n'
comment|'#                           --label %(fs_label)s %(target)s'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#                 list arguments are comma separated and there is no way to'
nl|'\n'
comment|'#                 escape such commas.'
nl|'\n'
comment|'#'
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'virt_mkfs'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of the mkfs commands for ephemeral device. '"
nl|'\n'
string|"'The format is <os_type>=<mkfs command>'"
op|')'
op|','
nl|'\n'
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'resize_fs_using_block_device'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Attempt to resize the filesystem by accessing the '"
nl|'\n'
string|"'image over a block device. This is done by the host '"
nl|'\n'
string|"'and may not be necessary if the image contains a recent '"
nl|'\n'
string|"'version of cloud-init. Possible mechanisms require '"
nl|'\n'
string|"'the nbd driver (for qcow and raw), or loop (for raw).'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'disk_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'default_ephemeral_format'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_MKFS_COMMAND
name|'_MKFS_COMMAND'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|_DEFAULT_MKFS_COMMAND
name|'_DEFAULT_MKFS_COMMAND'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|FS_FORMAT_EXT2
name|'FS_FORMAT_EXT2'
op|'='
string|'"ext2"'
newline|'\n'
DECL|variable|FS_FORMAT_EXT3
name|'FS_FORMAT_EXT3'
op|'='
string|'"ext3"'
newline|'\n'
DECL|variable|FS_FORMAT_EXT4
name|'FS_FORMAT_EXT4'
op|'='
string|'"ext4"'
newline|'\n'
DECL|variable|FS_FORMAT_XFS
name|'FS_FORMAT_XFS'
op|'='
string|'"xfs"'
newline|'\n'
DECL|variable|FS_FORMAT_NTFS
name|'FS_FORMAT_NTFS'
op|'='
string|'"ntfs"'
newline|'\n'
DECL|variable|FS_FORMAT_VFAT
name|'FS_FORMAT_VFAT'
op|'='
string|'"vfat"'
newline|'\n'
nl|'\n'
DECL|variable|_DEFAULT_FS_BY_OSTYPE
name|'_DEFAULT_FS_BY_OSTYPE'
op|'='
op|'{'
string|"'linux'"
op|':'
name|'FS_FORMAT_EXT3'
op|','
nl|'\n'
string|"'windows'"
op|':'
name|'FS_FORMAT_NTFS'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'s'
name|'in'
name|'CONF'
op|'.'
name|'virt_mkfs'
op|':'
newline|'\n'
comment|"# NOTE(yamahata): mkfs command may includes '=' for its options."
nl|'\n'
comment|"#                 So item.partition('=') doesn't work here"
nl|'\n'
indent|'    '
name|'os_type'
op|','
name|'mkfs_command'
op|'='
name|'s'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'os_type'
op|':'
newline|'\n'
indent|'        '
name|'_MKFS_COMMAND'
op|'['
name|'os_type'
op|']'
op|'='
name|'mkfs_command'
newline|'\n'
dedent|''
name|'if'
name|'os_type'
op|'=='
string|"'default'"
op|':'
newline|'\n'
DECL|variable|_DEFAULT_MKFS_COMMAND
indent|'        '
name|'_DEFAULT_MKFS_COMMAND'
op|'='
name|'mkfs_command'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_fs_type_for_os_type
dedent|''
dedent|''
name|'def'
name|'get_fs_type_for_os_type'
op|'('
name|'os_type'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'os_type'
name|'if'
name|'_MKFS_COMMAND'
op|'.'
name|'get'
op|'('
name|'os_type'
op|')'
name|'else'
string|"'default'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mkfs
dedent|''
name|'def'
name|'mkfs'
op|'('
name|'os_type'
op|','
name|'fs_label'
op|','
name|'target'
op|','
name|'run_as_root'
op|'='
name|'True'
op|','
name|'specified_fs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Format a file or block device using\n       a user provided command for each os type.\n       If user has not provided any configuration,\n       format type will be used according to a\n       default_ephemeral_format configuration\n       or a system defaults.\n    """'
newline|'\n'
nl|'\n'
name|'mkfs_command'
op|'='
op|'('
name|'_MKFS_COMMAND'
op|'.'
name|'get'
op|'('
name|'os_type'
op|','
name|'_DEFAULT_MKFS_COMMAND'
op|')'
name|'or'
nl|'\n'
string|"''"
op|')'
op|'%'
op|'{'
string|"'fs_label'"
op|':'
name|'fs_label'
op|','
string|"'target'"
op|':'
name|'target'
op|'}'
newline|'\n'
name|'if'
name|'mkfs_command'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'mkfs_command'
op|'.'
name|'split'
op|'('
op|')'
op|','
name|'run_as_root'
op|'='
name|'run_as_root'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'specified_fs'
op|':'
newline|'\n'
indent|'            '
name|'specified_fs'
op|'='
name|'CONF'
op|'.'
name|'default_ephemeral_format'
newline|'\n'
name|'if'
name|'not'
name|'specified_fs'
op|':'
newline|'\n'
indent|'                '
name|'specified_fs'
op|'='
name|'_DEFAULT_FS_BY_OSTYPE'
op|'.'
name|'get'
op|'('
name|'os_type'
op|','
string|"'ext3'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'utils'
op|'.'
name|'mkfs'
op|'('
name|'specified_fs'
op|','
name|'target'
op|','
name|'fs_label'
op|','
name|'run_as_root'
op|'='
name|'run_as_root'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|resize2fs
dedent|''
dedent|''
name|'def'
name|'resize2fs'
op|'('
name|'image'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|','
name|'run_as_root'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'e2fsck'"
op|','
nl|'\n'
string|"'-fp'"
op|','
nl|'\n'
name|'image'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'1'
op|','
number|'2'
op|']'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'run_as_root'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Checking the file system with e2fsck has failed, "'
nl|'\n'
string|'"the resize will be aborted. (%s)"'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'resize2fs'"
op|','
nl|'\n'
name|'image'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'run_as_root'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_disk_size
dedent|''
dedent|''
name|'def'
name|'get_disk_size'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the (virtual) size of a disk image\n\n    :param path: Path to the disk image\n    :returns: Size (in bytes) of the given disk image as it would be seen\n              by a virtual machine.\n    """'
newline|'\n'
name|'return'
name|'images'
op|'.'
name|'qemu_img_info'
op|'('
name|'path'
op|')'
op|'.'
name|'virtual_size'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|extend
dedent|''
name|'def'
name|'extend'
op|'('
name|'image'
op|','
name|'size'
op|','
name|'use_cow'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Increase image to size."""'
newline|'\n'
name|'if'
name|'not'
name|'can_resize_image'
op|'('
name|'image'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'resize'"
op|','
name|'image'
op|','
name|'size'
op|')'
newline|'\n'
nl|'\n'
comment|"# if we can't access the filesystem, we can't do anything more"
nl|'\n'
name|'if'
name|'not'
name|'is_image_partitionless'
op|'('
name|'image'
op|','
name|'use_cow'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|safe_resize2fs
dedent|''
name|'def'
name|'safe_resize2fs'
op|'('
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'False'
op|','
name|'finally_call'
op|'='
name|'lambda'
op|':'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resize2fs'
op|'('
name|'dev'
op|','
name|'run_as_root'
op|'='
name|'run_as_root'
op|','
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resizing the file system with resize2fs "'
nl|'\n'
string|'"has failed with error: %s"'
op|','
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'finally_call'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): attempts to resize filesystem'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'use_cow'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'resize_fs_using_block_device'
op|':'
newline|'\n'
comment|"# in case of non-raw disks we can't just resize the image, but"
nl|'\n'
comment|'# rather the mounted device instead'
nl|'\n'
indent|'            '
name|'mounter'
op|'='
name|'mount'
op|'.'
name|'Mount'
op|'.'
name|'instance_for_format'
op|'('
nl|'\n'
name|'image'
op|','
name|'None'
op|','
name|'None'
op|','
string|"'qcow2'"
op|')'
newline|'\n'
name|'if'
name|'mounter'
op|'.'
name|'get_dev'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'safe_resize2fs'
op|'('
name|'mounter'
op|'.'
name|'device'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
nl|'\n'
name|'finally_call'
op|'='
name|'mounter'
op|'.'
name|'unget_dev'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'safe_resize2fs'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|can_resize_image
dedent|''
dedent|''
name|'def'
name|'can_resize_image'
op|'('
name|'image'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check whether we can resize the container image file."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Checking if we can resize image %(image)s. '"
nl|'\n'
string|"'size=%(size)s'"
op|','
op|'{'
string|"'image'"
op|':'
name|'image'
op|','
string|"'size'"
op|':'
name|'size'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|"# Check that we're increasing the size"
nl|'\n'
name|'virt_size'
op|'='
name|'get_disk_size'
op|'('
name|'image'
op|')'
newline|'\n'
name|'if'
name|'virt_size'
op|'>='
name|'size'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Cannot resize image %s to a smaller size.'"
op|','
nl|'\n'
name|'image'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_image_partitionless
dedent|''
name|'def'
name|'is_image_partitionless'
op|'('
name|'image'
op|','
name|'use_cow'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check whether we can resize contained file system."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Checking if we can resize filesystem inside %(image)s. '"
nl|'\n'
string|"'CoW=%(use_cow)s'"
op|','
op|'{'
string|"'image'"
op|':'
name|'image'
op|','
string|"'use_cow'"
op|':'
name|'use_cow'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the image is unpartitioned'
nl|'\n'
name|'if'
name|'use_cow'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fs'
op|'='
name|'vfs'
op|'.'
name|'VFS'
op|'.'
name|'instance_for_image'
op|'('
name|'image'
op|','
string|"'qcow2'"
op|','
name|'None'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'setup'
op|'('
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'teardown'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Unable to mount image %(image)s with '"
nl|'\n'
string|"'error %(error)s. Cannot resize.'"
op|','
nl|'\n'
op|'{'
string|"'image'"
op|':'
name|'image'
op|','
nl|'\n'
string|"'error'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# For raw, we can directly inspect the file system'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'e2label'"
op|','
name|'image'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Unable to determine label for image %(image)s with '"
nl|'\n'
string|"'error %(error)s. Cannot resize.'"
op|','
nl|'\n'
op|'{'
string|"'image'"
op|':'
name|'image'
op|','
nl|'\n'
string|"'error'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_DiskImage
dedent|''
name|'class'
name|'_DiskImage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide operations on a disk image file."""'
newline|'\n'
nl|'\n'
DECL|variable|tmp_prefix
name|'tmp_prefix'
op|'='
string|"'openstack-disk-mount-tmp'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'image'
op|','
name|'partition'
op|'='
name|'None'
op|','
name|'use_cow'
op|'='
name|'False'
op|','
name|'mount_dir'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# These passed to each mounter'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'image'
op|'='
name|'image'
newline|'\n'
name|'self'
op|'.'
name|'partition'
op|'='
name|'partition'
newline|'\n'
name|'self'
op|'.'
name|'mount_dir'
op|'='
name|'mount_dir'
newline|'\n'
name|'self'
op|'.'
name|'use_cow'
op|'='
name|'use_cow'
newline|'\n'
nl|'\n'
comment|'# Internal'
nl|'\n'
name|'self'
op|'.'
name|'_mkdir'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_mounter'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_errors'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'mount_dir'
op|':'
newline|'\n'
indent|'            '
name|'device'
op|'='
name|'self'
op|'.'
name|'_device_for_path'
op|'('
name|'mount_dir'
op|')'
newline|'\n'
name|'if'
name|'device'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_reset'
op|'('
name|'device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_device_for_path
name|'def'
name|'_device_for_path'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'device'
op|'='
name|'None'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'path'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
string|'"/proc/mounts"'
op|','
string|"'r'"
op|')'
name|'as'
name|'ifp'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'ifp'
op|':'
newline|'\n'
indent|'                '
name|'fields'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'fields'
op|'['
number|'1'
op|']'
op|'=='
name|'path'
op|':'
newline|'\n'
indent|'                    '
name|'device'
op|'='
name|'fields'
op|'['
number|'0'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'device'
newline|'\n'
nl|'\n'
DECL|member|_reset
dedent|''
name|'def'
name|'_reset'
op|'('
name|'self'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset internal state for a previously mounted directory."""'
newline|'\n'
name|'self'
op|'.'
name|'_mounter'
op|'='
name|'mount'
op|'.'
name|'Mount'
op|'.'
name|'instance_for_device'
op|'('
name|'self'
op|'.'
name|'image'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mount_dir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'partition'
op|','
nl|'\n'
name|'device'
op|')'
newline|'\n'
nl|'\n'
name|'mount_name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'self'
op|'.'
name|'mount_dir'
name|'or'
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mkdir'
op|'='
name|'mount_name'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'tmp_prefix'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|errors
name|'def'
name|'errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the collated errors from all operations."""'
newline|'\n'
name|'return'
string|"'\\n--\\n'"
op|'.'
name|'join'
op|'('
op|'['
string|"''"
op|']'
op|'+'
name|'self'
op|'.'
name|'_errors'
op|')'
newline|'\n'
nl|'\n'
DECL|member|mount
dedent|''
name|'def'
name|'mount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mount a disk image, using the object attributes.\n\n        The first supported means provided by the mount classes is used.\n\n        True, or False is returned and the \'errors\' attribute\n        contains any diagnostics.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_mounter'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'image already mounted'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'mount_dir'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mount_dir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
name|'prefix'
op|'='
name|'self'
op|'.'
name|'tmp_prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mkdir'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'imgfmt'
op|'='
string|'"raw"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'use_cow'
op|':'
newline|'\n'
indent|'            '
name|'imgfmt'
op|'='
string|'"qcow2"'
newline|'\n'
nl|'\n'
dedent|''
name|'mounter'
op|'='
name|'mount'
op|'.'
name|'Mount'
op|'.'
name|'instance_for_format'
op|'('
name|'self'
op|'.'
name|'image'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mount_dir'
op|','
nl|'\n'
name|'self'
op|'.'
name|'partition'
op|','
nl|'\n'
name|'imgfmt'
op|')'
newline|'\n'
name|'if'
name|'mounter'
op|'.'
name|'do_mount'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mounter'
op|'='
name|'mounter'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_mounter'
op|'.'
name|'device'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'mounter'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_errors'
op|'.'
name|'append'
op|'('
name|'mounter'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|umount
dedent|''
dedent|''
name|'def'
name|'umount'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Umount a mount point from the filesystem."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_mounter'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mounter'
op|'.'
name|'do_umount'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mounter'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|teardown
dedent|''
dedent|''
name|'def'
name|'teardown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a disk image from the file system."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_mounter'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_mounter'
op|'.'
name|'do_teardown'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mounter'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_mkdir'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'self'
op|'.'
name|'mount_dir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Public module functions'
nl|'\n'
nl|'\n'
DECL|function|inject_data
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'inject_data'
op|'('
name|'image'
op|','
name|'key'
op|'='
name|'None'
op|','
name|'net'
op|'='
name|'None'
op|','
name|'metadata'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'files'
op|'='
name|'None'
op|','
name|'partition'
op|'='
name|'None'
op|','
name|'use_cow'
op|'='
name|'False'
op|','
name|'mandatory'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Inject the specified items into a disk image.\n\n    If an item name is not specified in the MANDATORY iterable, then a warning\n    is logged on failure to inject that item, rather than raising an exception.\n\n    it will mount the image as a fully partitioned disk and attempt to inject\n    into the specified partition number.\n\n    If PARTITION is not specified the image is mounted as a single partition.\n\n    Returns True if all requested operations completed without issue.\n    Raises an exception if a mandatory item can\'t be injected.\n    """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Inject data image=%(image)s key=%(key)s net=%(net)s "'
nl|'\n'
string|'"metadata=%(metadata)s admin_password=<SANITIZED> "'
nl|'\n'
string|'"files=%(files)s partition=%(partition)s use_cow=%(use_cow)s"'
op|','
nl|'\n'
op|'{'
string|"'image'"
op|':'
name|'image'
op|','
string|"'key'"
op|':'
name|'key'
op|','
string|"'net'"
op|':'
name|'net'
op|','
string|"'metadata'"
op|':'
name|'metadata'
op|','
nl|'\n'
string|"'files'"
op|':'
name|'files'
op|','
string|"'partition'"
op|':'
name|'partition'
op|','
string|"'use_cow'"
op|':'
name|'use_cow'
op|'}'
op|')'
newline|'\n'
name|'fmt'
op|'='
string|'"raw"'
newline|'\n'
name|'if'
name|'use_cow'
op|':'
newline|'\n'
indent|'        '
name|'fmt'
op|'='
string|'"qcow2"'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'fs'
op|'='
name|'vfs'
op|'.'
name|'VFS'
op|'.'
name|'instance_for_image'
op|'('
name|'image'
op|','
name|'fmt'
op|','
name|'partition'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# If a mandatory item is passed to this function,'
nl|'\n'
comment|'# then reraise the exception to indicate the error.'
nl|'\n'
indent|'        '
name|'for'
name|'inject'
name|'in'
name|'mandatory'
op|':'
newline|'\n'
indent|'            '
name|'inject_val'
op|'='
name|'locals'
op|'('
op|')'
op|'['
name|'inject'
op|']'
newline|'\n'
name|'if'
name|'inject_val'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'Ignoring error injecting data into image %(image)s '"
nl|'\n'
string|"'(%(e)s)'"
op|')'
op|','
op|'{'
string|"'image'"
op|':'
name|'image'
op|','
string|"'e'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'inject_data_into_fs'
op|'('
name|'fs'
op|','
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'files'
op|','
name|'mandatory'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'fs'
op|'.'
name|'teardown'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|setup_container
dedent|''
dedent|''
name|'def'
name|'setup_container'
op|'('
name|'image'
op|','
name|'container_dir'
op|','
name|'use_cow'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Setup the LXC container.\n\n    It will mount the loopback image to the container directory in order\n    to create the root filesystem for the container.\n\n    Returns path of image device which is mounted to the container directory.\n    """'
newline|'\n'
name|'img'
op|'='
name|'_DiskImage'
op|'('
name|'image'
op|'='
name|'image'
op|','
name|'use_cow'
op|'='
name|'use_cow'
op|','
name|'mount_dir'
op|'='
name|'container_dir'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'img'
op|'.'
name|'mount'
op|'('
op|')'
newline|'\n'
name|'if'
name|'dev'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Failed to mount container filesystem \'%(image)s\' "'
nl|'\n'
string|'"on \'%(target)s\': %(errors)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|'"image"'
op|':'
name|'img'
op|','
string|'"target"'
op|':'
name|'container_dir'
op|','
nl|'\n'
string|'"errors"'
op|':'
name|'img'
op|'.'
name|'errors'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'img'
op|'.'
name|'errors'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|teardown_container
dedent|''
name|'def'
name|'teardown_container'
op|'('
name|'container_dir'
op|','
name|'container_root_device'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Teardown the container rootfs mounting once it is spawned.\n\n    It will umount the container that is mounted,\n    and delete any linked devices.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'img'
op|'='
name|'_DiskImage'
op|'('
name|'image'
op|'='
name|'None'
op|','
name|'mount_dir'
op|'='
name|'container_dir'
op|')'
newline|'\n'
name|'img'
op|'.'
name|'teardown'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure container_root_device is released when teardown container.'
nl|'\n'
name|'if'
name|'container_root_device'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'loop'"
name|'in'
name|'container_root_device'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Release loop device %s"'
op|','
name|'container_root_device'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'losetup'"
op|','
string|"'--detach'"
op|','
name|'container_root_device'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|','
name|'attempts'
op|'='
number|'3'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Release nbd device %s'"
op|','
name|'container_root_device'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-nbd'"
op|','
string|"'-d'"
op|','
name|'container_root_device'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exn'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to teardown container filesystem: %s'"
op|')'
op|','
name|'exn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clean_lxc_namespace
dedent|''
dedent|''
name|'def'
name|'clean_lxc_namespace'
op|'('
name|'container_dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Clean up the container namespace rootfs mounting one spawned.\n\n    It will umount the mounted names that are mounted\n    but leave the linked devices alone.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'img'
op|'='
name|'_DiskImage'
op|'('
name|'image'
op|'='
name|'None'
op|','
name|'mount_dir'
op|'='
name|'container_dir'
op|')'
newline|'\n'
name|'img'
op|'.'
name|'umount'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exn'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to umount container filesystem: %s'"
op|')'
op|','
name|'exn'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|inject_data_into_fs
dedent|''
dedent|''
name|'def'
name|'inject_data_into_fs'
op|'('
name|'fs'
op|','
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|','
name|'admin_password'
op|','
name|'files'
op|','
nl|'\n'
name|'mandatory'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Injects data into a filesystem already mounted by the caller.\n    Virt connections can call this directly if they mount their fs\n    in a different way to inject_data.\n\n    If an item name is not specified in the MANDATORY iterable, then a warning\n    is logged on failure to inject that item, rather than raising an exception.\n\n    Returns True if all requested operations completed without issue.\n    Raises an exception if a mandatory item can\'t be injected.\n    """'
newline|'\n'
name|'status'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'inject'
name|'in'
op|'('
string|"'key'"
op|','
string|"'net'"
op|','
string|"'metadata'"
op|','
string|"'admin_password'"
op|','
string|"'files'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inject_val'
op|'='
name|'locals'
op|'('
op|')'
op|'['
name|'inject'
op|']'
newline|'\n'
name|'inject_func'
op|'='
name|'globals'
op|'('
op|')'
op|'['
string|"'_inject_%s_into_fs'"
op|'%'
name|'inject'
op|']'
newline|'\n'
name|'if'
name|'inject_val'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'inject_func'
op|'('
name|'inject_val'
op|','
name|'fs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'inject'
name|'in'
name|'mandatory'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'Ignoring error injecting %(inject)s into image '"
nl|'\n'
string|"'(%(e)s)'"
op|')'
op|','
op|'{'
string|"'inject'"
op|':'
name|'inject'
op|','
string|"'e'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'status'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'status'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_inject_files_into_fs
dedent|''
name|'def'
name|'_inject_files_into_fs'
op|'('
name|'files'
op|','
name|'fs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
op|'('
name|'path'
op|','
name|'contents'
op|')'
name|'in'
name|'files'
op|':'
newline|'\n'
comment|'# NOTE(wangpan): Ensure the parent dir of injecting file exists'
nl|'\n'
indent|'        '
name|'parent_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'parent_dir'
op|')'
op|'>'
number|'0'
name|'and'
name|'parent_dir'
op|'!='
string|'"/"'
nl|'\n'
name|'and'
name|'not'
name|'fs'
op|'.'
name|'has_file'
op|'('
name|'parent_dir'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fs'
op|'.'
name|'make_path'
op|'('
name|'parent_dir'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_ownership'
op|'('
name|'parent_dir'
op|','
string|'"root"'
op|','
string|'"root"'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_permissions'
op|'('
name|'parent_dir'
op|','
number|'0o744'
op|')'
newline|'\n'
dedent|''
name|'_inject_file_into_fs'
op|'('
name|'fs'
op|','
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_inject_file_into_fs
dedent|''
dedent|''
name|'def'
name|'_inject_file_into_fs'
op|'('
name|'fs'
op|','
name|'path'
op|','
name|'contents'
op|','
name|'append'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Inject file fs=%(fs)s path=%(path)s append=%(append)s"'
op|','
nl|'\n'
op|'{'
string|"'fs'"
op|':'
name|'fs'
op|','
string|"'path'"
op|':'
name|'path'
op|','
string|"'append'"
op|':'
name|'append'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'append'
op|':'
newline|'\n'
indent|'        '
name|'fs'
op|'.'
name|'append_file'
op|'('
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'fs'
op|'.'
name|'replace_file'
op|'('
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_inject_metadata_into_fs
dedent|''
dedent|''
name|'def'
name|'_inject_metadata_into_fs'
op|'('
name|'metadata'
op|','
name|'fs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Inject metadata fs=%(fs)s metadata=%(metadata)s"'
op|','
nl|'\n'
op|'{'
string|"'fs'"
op|':'
name|'fs'
op|','
string|"'metadata'"
op|':'
name|'metadata'
op|'}'
op|')'
newline|'\n'
name|'_inject_file_into_fs'
op|'('
name|'fs'
op|','
string|"'meta.js'"
op|','
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_setup_selinux_for_keys
dedent|''
name|'def'
name|'_setup_selinux_for_keys'
op|'('
name|'fs'
op|','
name|'sshdir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get selinux guests to ensure correct context on injected keys."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'fs'
op|'.'
name|'has_file'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|'"etc"'
op|','
string|'"selinux"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'rclocal'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'etc'"
op|','
string|"'rc.local'"
op|')'
newline|'\n'
name|'rc_d'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'etc'"
op|','
string|"'rc.d'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'fs'
op|'.'
name|'has_file'
op|'('
name|'rclocal'
op|')'
name|'and'
name|'fs'
op|'.'
name|'has_file'
op|'('
name|'rc_d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rclocal'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'rc_d'
op|','
string|"'rc.local'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Note some systems end rc.local with "exit 0"'
nl|'\n'
comment|"# and so to append there you'd need something like:"
nl|'\n'
comment|"#  utils.execute('sed', '-i', '${/^exit 0$/d}' rclocal, run_as_root=True)"
nl|'\n'
dedent|''
name|'restorecon'
op|'='
op|'['
nl|'\n'
string|"'\\n'"
op|','
nl|'\n'
string|"'# Added by Nova to ensure injected ssh keys have the right context\\n'"
op|','
nl|'\n'
string|"'restorecon -RF %s 2>/dev/null || :\\n'"
op|'%'
name|'sshdir'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'fs'
op|'.'
name|'has_file'
op|'('
name|'rclocal'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'restorecon'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
string|"'#!/bin/sh'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_inject_file_into_fs'
op|'('
name|'fs'
op|','
name|'rclocal'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'restorecon'
op|')'
op|','
name|'append'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_permissions'
op|'('
name|'rclocal'
op|','
number|'0o700'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_inject_key_into_fs
dedent|''
name|'def'
name|'_inject_key_into_fs'
op|'('
name|'key'
op|','
name|'fs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Add the given public ssh key to root\'s authorized_keys.\n\n    key is an ssh key string.\n    fs is the path to the base of the filesystem into which to inject the key.\n    """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Inject key fs=%(fs)s key=%(key)s"'
op|','
op|'{'
string|"'fs'"
op|':'
name|'fs'
op|','
string|"'key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
name|'sshdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'root'"
op|','
string|"'.ssh'"
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'make_path'
op|'('
name|'sshdir'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_ownership'
op|'('
name|'sshdir'
op|','
string|'"root"'
op|','
string|'"root"'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_permissions'
op|'('
name|'sshdir'
op|','
number|'0o700'
op|')'
newline|'\n'
nl|'\n'
name|'keyfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'sshdir'
op|','
string|"'authorized_keys'"
op|')'
newline|'\n'
nl|'\n'
name|'key_data'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
nl|'\n'
string|"'\\n'"
op|','
nl|'\n'
string|"'# The following ssh key was injected by Nova'"
op|','
nl|'\n'
string|"'\\n'"
op|','
nl|'\n'
name|'key'
op|'.'
name|'strip'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\n'"
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'_inject_file_into_fs'
op|'('
name|'fs'
op|','
name|'keyfile'
op|','
name|'key_data'
op|','
name|'append'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_permissions'
op|'('
name|'keyfile'
op|','
number|'0o600'
op|')'
newline|'\n'
nl|'\n'
name|'_setup_selinux_for_keys'
op|'('
name|'fs'
op|','
name|'sshdir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_inject_net_into_fs
dedent|''
name|'def'
name|'_inject_net_into_fs'
op|'('
name|'net'
op|','
name|'fs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Inject /etc/network/interfaces into the filesystem rooted at fs.\n\n    net is the contents of /etc/network/interfaces.\n    """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Inject key fs=%(fs)s net=%(net)s"'
op|','
op|'{'
string|"'fs'"
op|':'
name|'fs'
op|','
string|"'net'"
op|':'
name|'net'
op|'}'
op|')'
newline|'\n'
name|'netdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'etc'"
op|','
string|"'network'"
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'make_path'
op|'('
name|'netdir'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_ownership'
op|'('
name|'netdir'
op|','
string|'"root"'
op|','
string|'"root"'
op|')'
newline|'\n'
name|'fs'
op|'.'
name|'set_permissions'
op|'('
name|'netdir'
op|','
number|'0o744'
op|')'
newline|'\n'
nl|'\n'
name|'netfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'etc'"
op|','
string|"'network'"
op|','
string|"'interfaces'"
op|')'
newline|'\n'
name|'_inject_file_into_fs'
op|'('
name|'fs'
op|','
name|'netfile'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_inject_admin_password_into_fs
dedent|''
name|'def'
name|'_inject_admin_password_into_fs'
op|'('
name|'admin_passwd'
op|','
name|'fs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the root password to admin_passwd\n\n    admin_password is a root password\n    fs is the path to the base of the filesystem into which to inject\n    the key.\n\n    This method modifies the instance filesystem directly,\n    and does not require a guest agent running in the instance.\n\n    """'
newline|'\n'
comment|'# The approach used here is to copy the password and shadow'
nl|'\n'
comment|'# files from the instance filesystem to local files, make any'
nl|'\n'
comment|'# necessary changes, and then copy them back.'
nl|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Inject admin password fs=%(fs)s "'
nl|'\n'
string|'"admin_passwd=<SANITIZED>"'
op|','
op|'{'
string|"'fs'"
op|':'
name|'fs'
op|'}'
op|')'
newline|'\n'
name|'admin_user'
op|'='
string|"'root'"
newline|'\n'
nl|'\n'
name|'passwd_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'etc'"
op|','
string|"'passwd'"
op|')'
newline|'\n'
name|'shadow_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'etc'"
op|','
string|"'shadow'"
op|')'
newline|'\n'
nl|'\n'
name|'passwd_data'
op|'='
name|'fs'
op|'.'
name|'read_file'
op|'('
name|'passwd_path'
op|')'
newline|'\n'
name|'shadow_data'
op|'='
name|'fs'
op|'.'
name|'read_file'
op|'('
name|'shadow_path'
op|')'
newline|'\n'
nl|'\n'
name|'new_shadow_data'
op|'='
name|'_set_passwd'
op|'('
name|'admin_user'
op|','
name|'admin_passwd'
op|','
nl|'\n'
name|'passwd_data'
op|','
name|'shadow_data'
op|')'
newline|'\n'
nl|'\n'
name|'fs'
op|'.'
name|'replace_file'
op|'('
name|'shadow_path'
op|','
name|'new_shadow_data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_generate_salt
dedent|''
name|'def'
name|'_generate_salt'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'salt_set'
op|'='
op|'('
string|"'abcdefghijklmnopqrstuvwxyz'"
nl|'\n'
string|"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
nl|'\n'
string|"'0123456789./'"
op|')'
newline|'\n'
name|'salt'
op|'='
number|'16'
op|'*'
string|"' '"
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'salt_set'
op|')'
name|'for'
name|'c'
name|'in'
name|'salt'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_passwd
dedent|''
name|'def'
name|'_set_passwd'
op|'('
name|'username'
op|','
name|'admin_passwd'
op|','
name|'passwd_data'
op|','
name|'shadow_data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""set the password for username to admin_passwd\n\n    The passwd_file is not modified.  The shadow_file is updated.\n    if the username is not found in both files, an exception is raised.\n\n    :param username: the username\n    :param encrypted_passwd: the  encrypted password\n    :param passwd_file: path to the passwd file\n    :param shadow_file: path to the shadow password file\n    :returns: nothing\n    :raises: exception.NovaException(), IOError()\n\n    """'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'name'
op|'=='
string|"'nt'"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'Not implemented on Windows'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# encryption algo - id pairs for crypt()'
nl|'\n'
dedent|''
name|'algos'
op|'='
op|'{'
string|"'SHA-512'"
op|':'
string|"'$6$'"
op|','
string|"'SHA-256'"
op|':'
string|"'$5$'"
op|','
string|"'MD5'"
op|':'
string|"'$1$'"
op|','
string|"'DES'"
op|':'
string|"''"
op|'}'
newline|'\n'
nl|'\n'
name|'salt'
op|'='
name|'_generate_salt'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# crypt() depends on the underlying libc, and may not support all'
nl|'\n'
comment|'# forms of hash. We try md5 first. If we get only 13 characters back,'
nl|'\n'
comment|"# then the underlying crypt() didn't understand the '$n$salt' magic,"
nl|'\n'
comment|'# so we fall back to DES.'
nl|'\n'
comment|"# md5 is the default because it's widely supported. Although the"
nl|'\n'
comment|'# local crypt() might support stronger SHA, the target instance'
nl|'\n'
comment|'# might not.'
nl|'\n'
name|'encrypted_passwd'
op|'='
name|'crypt'
op|'.'
name|'crypt'
op|'('
name|'admin_passwd'
op|','
name|'algos'
op|'['
string|"'MD5'"
op|']'
op|'+'
name|'salt'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'encrypted_passwd'
op|')'
op|'=='
number|'13'
op|':'
newline|'\n'
indent|'        '
name|'encrypted_passwd'
op|'='
name|'crypt'
op|'.'
name|'crypt'
op|'('
name|'admin_passwd'
op|','
name|'algos'
op|'['
string|"'DES'"
op|']'
op|'+'
name|'salt'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'p_file'
op|'='
name|'passwd_data'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'s_file'
op|'='
name|'shadow_data'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
comment|"# username MUST exist in passwd file or it's an error"
nl|'\n'
name|'for'
name|'entry'
name|'in'
name|'p_file'
op|':'
newline|'\n'
indent|'        '
name|'split_entry'
op|'='
name|'entry'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'if'
name|'split_entry'
op|'['
number|'0'
op|']'
op|'=='
name|'username'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'User %(username)s not found in password file.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'username'
op|')'
newline|'\n'
nl|'\n'
comment|"# update password in the shadow file.It's an error if the"
nl|'\n'
comment|"# the user doesn't exist."
nl|'\n'
dedent|''
name|'new_shadow'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'entry'
name|'in'
name|'s_file'
op|':'
newline|'\n'
indent|'        '
name|'split_entry'
op|'='
name|'entry'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'if'
name|'split_entry'
op|'['
number|'0'
op|']'
op|'=='
name|'username'
op|':'
newline|'\n'
indent|'            '
name|'split_entry'
op|'['
number|'1'
op|']'
op|'='
name|'encrypted_passwd'
newline|'\n'
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'new_entry'
op|'='
string|"':'"
op|'.'
name|'join'
op|'('
name|'split_entry'
op|')'
newline|'\n'
name|'new_shadow'
op|'.'
name|'append'
op|'('
name|'new_entry'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'found'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'User %(username)s not found in shadow file.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'username'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'new_shadow'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

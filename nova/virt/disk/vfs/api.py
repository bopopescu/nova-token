begin_unit
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LI'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'importutils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VFS
name|'class'
name|'VFS'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interface for manipulating disk image.\n\n    The VFS class defines an interface for manipulating files within\n    a virtual disk image filesystem. This allows file injection code\n    to avoid the assumption that the virtual disk image can be mounted\n    in the host filesystem.\n\n    All paths provided to the APIs in this class should be relative\n    to the root of the virtual disk image filesystem. Subclasses\n    will translate paths as required by their implementation.\n    """'
newline|'\n'
nl|'\n'
comment|'# Class level flag to indicate whether we can consider'
nl|'\n'
comment|'# that guestfs is ready to be used.'
nl|'\n'
DECL|variable|guestfs_ready
name|'guestfs_ready'
op|'='
name|'False'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|instance_for_image
name|'def'
name|'instance_for_image'
op|'('
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance for image imgfile=%(imgfile)s "'
nl|'\n'
string|'"imgfmt=%(imgfmt)s partition=%(partition)s"'
op|','
nl|'\n'
op|'{'
string|"'imgfile'"
op|':'
name|'imgfile'
op|','
string|"'imgfmt'"
op|':'
name|'imgfmt'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'vfs'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Using primary VFSGuestFS"'
op|')'
newline|'\n'
name|'vfs'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
string|'"nova.virt.disk.vfs.guestfs.VFSGuestFS"'
op|','
nl|'\n'
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'VFS'
op|'.'
name|'guestfs_ready'
op|':'
newline|'\n'
comment|'# Inspect for capabilities and keep'
nl|'\n'
comment|'# track of the result only if succeeded.'
nl|'\n'
indent|'                '
name|'vfs'
op|'.'
name|'inspect_capabilities'
op|'('
op|')'
newline|'\n'
name|'VFS'
op|'.'
name|'guestfs_ready'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'vfs'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vfs'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# We are able to load libguestfs but'
nl|'\n'
comment|'# something wrong happens when trying to'
nl|'\n'
comment|'# check for capabilities.'
nl|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Unable to import guestfs, "'
nl|'\n'
string|'"falling back to VFSLocalFS"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
string|'"nova.virt.disk.vfs.localfs.VFSLocalFS"'
op|','
nl|'\n'
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'imgfile'
op|'='
name|'imgfile'
newline|'\n'
name|'self'
op|'.'
name|'imgfmt'
op|'='
name|'imgfmt'
newline|'\n'
name|'self'
op|'.'
name|'partition'
op|'='
name|'partition'
newline|'\n'
nl|'\n'
DECL|member|setup
dedent|''
name|'def'
name|'setup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Performs any one-time setup.\n\n        Perform any one-time setup tasks to make the virtual filesystem\n        available to future API calls.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|teardown
dedent|''
name|'def'
name|'teardown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Releases all resources initialized in the setup method."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|make_path
dedent|''
name|'def'
name|'make_path'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a directory @path.\n\n        Create a directory @path, including all intermedia path components\n        if they do not already exist.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|append_file
dedent|''
name|'def'
name|'append_file'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Appends @content to the end of the file.\n\n        Append @content to the end of the file identified by @path, creating\n        the file if it does not already exist.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|replace_file
dedent|''
name|'def'
name|'replace_file'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Replaces contents of the file.\n\n        Replace the entire contents of the file identified by @path, with\n        @content, creating the file if it does not already exist.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|read_file
dedent|''
name|'def'
name|'read_file'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the entire contents of the file identified by @path."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|has_file
dedent|''
name|'def'
name|'has_file'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a True if the file identified by @path exists."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|set_permissions
dedent|''
name|'def'
name|'set_permissions'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the permissions on the file.\n\n        Set the permissions on the file identified by @path to @mode. The file\n        must exist prior to this call.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|set_ownership
dedent|''
name|'def'
name|'set_ownership'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'user'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the ownership on the file.\n\n        Set the ownership on the file identified by @path to the username\n        @user and groupname @group. Either of @user or @group may be None,\n        in which case the current ownership will be left unchanged.\n        The ownership must be passed in string form, allowing subclasses to\n        translate to uid/gid form as required. The file must exist prior to\n        this call.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_image_fs
dedent|''
name|'def'
name|'get_image_fs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the filesystem type or an empty string.\n\n        Determine the filesystem type whether the disk image is\n        partition less.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

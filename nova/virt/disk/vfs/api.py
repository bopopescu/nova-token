begin_unit
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VFS
name|'class'
name|'VFS'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|instance_for_image
name|'def'
name|'instance_for_image'
op|'('
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Instance for image imgfile=%(imgfile)s "'
nl|'\n'
string|'"imgfmt=%(imgfmt)s partition=%(partition)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'imgfile'"
op|':'
name|'imgfile'
op|','
string|"'imgfmt'"
op|':'
name|'imgfmt'
op|','
nl|'\n'
string|"'partition'"
op|':'
name|'partition'
op|'}'
op|')'
newline|'\n'
name|'hasGuestfs'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Trying to import guestfs"'
op|')'
op|')'
newline|'\n'
name|'importutils'
op|'.'
name|'import_module'
op|'('
string|'"guestfs"'
op|')'
newline|'\n'
name|'hasGuestfs'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hasGuestfs'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Using primary VFSGuestFS"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
string|'"nova.virt.disk.vfs.guestfs.VFSGuestFS"'
op|','
nl|'\n'
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Falling back to VFSLocalFS"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
string|'"nova.virt.disk.vfs.localfs.VFSLocalFS"'
op|','
nl|'\n'
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
string|'"""\n    The VFS class defines an interface for manipulating files within\n    a virtual disk image filesystem. This allows file injection code\n    to avoid the assumption that the virtual disk image can be mounted\n    in the host filesystem.\n\n    All paths provided to the APIs in this class should be relative\n    to the root of the virtual disk image filesystem. Subclasses\n    will translate paths as required by their implementation.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'imgfile'
op|','
name|'imgfmt'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'imgfile'
op|'='
name|'imgfile'
newline|'\n'
name|'self'
op|'.'
name|'imgfmt'
op|'='
name|'imgfmt'
newline|'\n'
name|'self'
op|'.'
name|'partition'
op|'='
name|'partition'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Perform any one-time setup tasks to make the virtual\n    filesystem available to future API calls\n    """'
newline|'\n'
DECL|member|setup
name|'def'
name|'setup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Release all resources initialized in the setup method\n    """'
newline|'\n'
DECL|member|teardown
name|'def'
name|'teardown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Create a directory @path, including all intermedia\n    path components if they do not already exist\n    """'
newline|'\n'
DECL|member|make_path
name|'def'
name|'make_path'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Append @content to the end of the file identified\n    by @path, creating the file if it does not already\n    exist\n    """'
newline|'\n'
DECL|member|append_file
name|'def'
name|'append_file'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Replace the entire contents of the file identified\n    by @path, with @content, creating the file if it does\n    not already exist\n    """'
newline|'\n'
DECL|member|replace_file
name|'def'
name|'replace_file'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Return the entire contents of the file identified\n    by @path\n    """'
newline|'\n'
DECL|member|read_file
name|'def'
name|'read_file'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Return a True if the file identified by @path\n    exists\n    """'
newline|'\n'
DECL|member|has_file
name|'def'
name|'has_file'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Set the permissions on the file identified by\n    @path to @mode. The file must exist prior to\n    this call.\n    """'
newline|'\n'
DECL|member|set_permissions
name|'def'
name|'set_permissions'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\n    Set the ownership on the file identified by\n    @path to the username @user and groupname @group.\n    Either of @user or @group may be None, in which case\n    the current ownership will be left unchanged. The\n    ownership must be passed in string form, allowing\n    subclasses to translate to uid/gid form as required.\n    The file must exist prior to this call.\n    """'
newline|'\n'
DECL|member|set_ownership
name|'def'
name|'set_ownership'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'user'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
string|'"""Support for mounting images with libguestfs"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
name|'import'
name|'mount'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Mount
name|'class'
name|'Mount'
op|'('
name|'mount'
op|'.'
name|'Mount'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""libguestfs support for arbitrary images."""'
newline|'\n'
DECL|variable|mode
name|'mode'
op|'='
string|"'guestfs'"
newline|'\n'
nl|'\n'
DECL|member|map_dev
name|'def'
name|'map_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mapped'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|unmap_dev
dedent|''
name|'def'
name|'unmap_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mapped'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|mnt_dev
dedent|''
name|'def'
name|'mnt_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'partition'
op|'='
name|'int'
op|'('
name|'self'
op|'.'
name|'partition'
name|'or'
number|'0'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'error'
op|'='
name|'_'
op|'('
string|"'unsupported partition: %s'"
op|')'
op|'%'
name|'self'
op|'.'
name|'partition'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'('
string|"'guestmount'"
op|','
string|"'--rw'"
op|','
string|"'-a'"
op|','
name|'self'
op|'.'
name|'image'
op|')'
newline|'\n'
name|'if'
name|'partition'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'+='
op|'('
string|"'-i'"
op|','
op|')'
comment|'# find the OS partition'
newline|'\n'
dedent|''
name|'elif'
name|'partition'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'+='
op|'('
string|"'-m'"
op|','
string|"'/dev/sda%d'"
op|'%'
name|'partition'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# We don't resort to -i for this case yet,"
nl|'\n'
comment|'# as some older versions of libguestfs'
nl|'\n'
comment|'# have problems identifying ttylinux images for example'
nl|'\n'
indent|'            '
name|'args'
op|'+='
op|'('
string|"'-m'"
op|','
string|"'/dev/sda'"
op|')'
newline|'\n'
dedent|''
name|'args'
op|'+='
op|'('
name|'self'
op|'.'
name|'mount_dir'
op|','
op|')'
newline|'\n'
comment|'# root access should not required for guestfs (if the user'
nl|'\n'
comment|'# has permissions to fusermount (by being part of the fuse'
nl|'\n'
comment|'# group for example)).  Also note the image and mount_dir'
nl|'\n'
comment|'# have appropriate creditials at this point for read/write'
nl|'\n'
comment|'# mounting by the nova user.  However currently there are'
nl|'\n'
comment|'# subsequent access issues by both the nova and root users'
nl|'\n'
comment|'# if the nova user mounts the image, as detailed here:'
nl|'\n'
comment|'# https://bugzilla.redhat.com/show_bug.cgi?id=765814'
nl|'\n'
name|'_out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
name|'discard_warnings'
op|'='
name|'True'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'error'
op|'='
name|'_'
op|'('
string|"'Failed to mount filesystem: %s'"
op|')'
op|'%'
name|'err'
newline|'\n'
comment|'# Be defensive and ensure this is unmounted,'
nl|'\n'
comment|"# as I'm not sure guestmount will never have"
nl|'\n'
comment|'# mounted when it returns EXIT_FAILURE.'
nl|'\n'
comment|'# This is required if discard_warnings=False above'
nl|'\n'
name|'utils'
op|'.'
name|'trycmd'
op|'('
string|"'fusermount'"
op|','
string|"'-u'"
op|','
name|'self'
op|'.'
name|'mount_dir'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# More defensiveness as there are edge cases where'
nl|'\n'
comment|'# guestmount can return success while not mounting'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'self'
op|'.'
name|'mount_dir'
op|')'
op|':'
newline|'\n'
comment|"# Assume we've just got the original empty temp dir"
nl|'\n'
indent|'                '
name|'err'
op|'='
name|'_'
op|'('
string|"'unknown guestmount error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error'
op|'='
name|'_'
op|'('
string|"'Failed to mount filesystem: %s'"
op|')'
op|'%'
name|'err'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
comment|'# This is the usual path and means root has'
nl|'\n'
comment|'# probably mounted fine'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mounted'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|unmnt_dev
dedent|''
name|'def'
name|'unmnt_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'mounted'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sync'"
op|')'
newline|'\n'
comment|"# root users don't need a specific unmnt_dev()"
nl|'\n'
comment|'# but ordinary users do'
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'fusermount'"
op|','
string|"'-u'"
op|','
name|'self'
op|'.'
name|'mount_dir'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mounted'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

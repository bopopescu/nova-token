begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 IBM'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'ftplib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'import'
name|'paramiko'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
name|'as'
name|'nova_exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'exception'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'username'
op|','
name|'password'
op|','
name|'port'
op|'='
number|'22'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ssh_connect
dedent|''
dedent|''
name|'def'
name|'ssh_connect'
op|'('
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Method to connect to remote system using ssh protocol.\n\n    :param connection: a Connection object.\n    :returns: paramiko.SSHClient -- an active ssh connection.\n    :raises: PowerVMConnectionFailed\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'ssh'
op|'='
name|'paramiko'
op|'.'
name|'SSHClient'
op|'('
op|')'
newline|'\n'
name|'ssh'
op|'.'
name|'set_missing_host_key_policy'
op|'('
name|'paramiko'
op|'.'
name|'AutoAddPolicy'
op|'('
op|')'
op|')'
newline|'\n'
name|'ssh'
op|'.'
name|'connect'
op|'('
name|'connection'
op|'.'
name|'host'
op|','
nl|'\n'
name|'username'
op|'='
name|'connection'
op|'.'
name|'username'
op|','
nl|'\n'
name|'password'
op|'='
name|'connection'
op|'.'
name|'password'
op|','
nl|'\n'
name|'port'
op|'='
name|'connection'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'return'
name|'ssh'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Connection error connecting PowerVM manager'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMConnectionFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ssh_command_as_root
dedent|''
dedent|''
name|'def'
name|'ssh_command_as_root'
op|'('
name|'ssh_connection'
op|','
name|'cmd'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Method to execute remote command as root.\n\n    :param connection: an active paramiko.SSHClient connection.\n    :param command: string containing the command to run.\n    :returns: Tuple -- a tuple of (stdout, stderr)\n    :raises: nova.exception.ProcessExecutionError\n    """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Running cmd (SSH-as-root): %s'"
op|')'
op|'%'
name|'cmd'
op|')'
newline|'\n'
name|'chan'
op|'='
name|'ssh_connection'
op|'.'
name|'_transport'
op|'.'
name|'open_session'
op|'('
op|')'
newline|'\n'
comment|'# This command is required to be executed'
nl|'\n'
comment|'# in order to become root.'
nl|'\n'
name|'chan'
op|'.'
name|'exec_command'
op|'('
string|"'ioscli oem_setup_env'"
op|')'
newline|'\n'
name|'bufsize'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'stdin'
op|'='
name|'chan'
op|'.'
name|'makefile'
op|'('
string|"'wb'"
op|','
name|'bufsize'
op|')'
newline|'\n'
name|'stdout'
op|'='
name|'chan'
op|'.'
name|'makefile'
op|'('
string|"'rb'"
op|','
name|'bufsize'
op|')'
newline|'\n'
name|'stderr'
op|'='
name|'chan'
op|'.'
name|'makefile_stderr'
op|'('
string|"'rb'"
op|','
name|'bufsize'
op|')'
newline|'\n'
comment|"# We run the command and then call 'exit' to exit from"
nl|'\n'
comment|'# super user environment.'
nl|'\n'
name|'stdin'
op|'.'
name|'write'
op|'('
string|"'%s\\n%s\\n'"
op|'%'
op|'('
name|'cmd'
op|','
string|"'exit'"
op|')'
op|')'
newline|'\n'
name|'stdin'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'exit_status'
op|'='
name|'chan'
op|'.'
name|'recv_exit_status'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Lets handle the error just like nova.utils.ssh_execute does.'
nl|'\n'
name|'if'
name|'exit_status'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Result was %s'"
op|')'
op|'%'
name|'exit_status'
op|')'
newline|'\n'
name|'if'
name|'check_exit_code'
name|'and'
name|'exit_status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'nova_exception'
op|'.'
name|'ProcessExecutionError'
op|'('
name|'exit_code'
op|'='
name|'exit_status'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
nl|'\n'
name|'cmd'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'stdout'
op|','
name|'stderr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ftp_put_command
dedent|''
name|'def'
name|'ftp_put_command'
op|'('
name|'connection'
op|','
name|'local_path'
op|','
name|'remote_dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Method to transfer a file via ftp.\n\n    :param connection: a Connection object.\n    :param local_path: path to the local file\n    :param remote_dir: path to remote destination\n    :raises: PowerVMFileTransferFailed\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'ftp'
op|'='
name|'ftplib'
op|'.'
name|'FTP'
op|'('
name|'host'
op|'='
name|'connection'
op|'.'
name|'host'
op|','
nl|'\n'
name|'user'
op|'='
name|'connection'
op|'.'
name|'username'
op|','
nl|'\n'
name|'passwd'
op|'='
name|'connection'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'ftp'
op|'.'
name|'cwd'
op|'('
name|'remote_dir'
op|')'
newline|'\n'
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'local_path'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'local_path'
op|','
string|'"rb"'
op|')'
newline|'\n'
name|'ftp'
op|'.'
name|'storbinary'
op|'('
string|'"STOR "'
op|'+'
name|'name'
op|','
name|'f'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'ftp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'File transfer to PowerVM manager failed'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMFTPTransferFailed'
op|'('
name|'ftp_cmd'
op|'='
string|"'PUT'"
op|','
nl|'\n'
name|'source_path'
op|'='
name|'local_path'
op|','
name|'dest_path'
op|'='
name|'remote_dir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ftp_get_command
dedent|''
dedent|''
name|'def'
name|'ftp_get_command'
op|'('
name|'connection'
op|','
name|'remote_path'
op|','
name|'local_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieve a file via FTP\n\n    :param connection: a Connection object.\n    :param remote_path: path to the remote file\n    :param local_path: path to local destination\n    :raises: PowerVMFileTransferFailed\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'ftp'
op|'='
name|'ftplib'
op|'.'
name|'FTP'
op|'('
name|'host'
op|'='
name|'connection'
op|'.'
name|'host'
op|','
nl|'\n'
name|'user'
op|'='
name|'connection'
op|'.'
name|'username'
op|','
nl|'\n'
name|'passwd'
op|'='
name|'connection'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'ftp'
op|'.'
name|'cwd'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'remote_path'
op|')'
op|')'
newline|'\n'
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'remote_path'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ftp GET %(remote_path)s to: %(local_path)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'local_path'
op|','
string|"'w'"
op|')'
name|'as'
name|'ftpfile'
op|':'
newline|'\n'
indent|'            '
name|'ftpcmd'
op|'='
string|"'RETR %s'"
op|'%'
name|'name'
newline|'\n'
name|'ftp'
op|'.'
name|'retrbinary'
op|'('
name|'ftpcmd'
op|','
name|'ftpfile'
op|'.'
name|'write'
op|')'
newline|'\n'
dedent|''
name|'ftp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"File transfer from PowerVM manager failed"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMFTPTransferFailed'
op|'('
name|'ftp_cmd'
op|'='
string|"'GET'"
op|','
nl|'\n'
name|'source_path'
op|'='
name|'remote_path'
op|','
name|'dest_path'
op|'='
name|'local_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|aix_path_join
dedent|''
dedent|''
name|'def'
name|'aix_path_join'
op|'('
name|'path_one'
op|','
name|'path_two'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensures file path is built correctly for remote UNIX system\n\n    :param path_one: string of the first file path\n    :param path_two: string of the second file path\n    :returns: a uniform path constructed from both strings\n    """'
newline|'\n'
name|'if'
name|'path_one'
op|'.'
name|'endswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path_one'
op|'='
name|'path_one'
op|'.'
name|'rstrip'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'path_two'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path_two'
op|'='
name|'path_two'
op|'.'
name|'lstrip'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'final_path'
op|'='
name|'path_one'
op|'+'
string|"'/'"
op|'+'
name|'path_two'
newline|'\n'
name|'return'
name|'final_path'
newline|'\n'
dedent|''
endmarker|''
end_unit

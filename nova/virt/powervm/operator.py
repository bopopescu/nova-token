begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 IBM'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'decimal'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
name|'as'
name|'nova_exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'blockdev'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'command'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'lpar'
name|'as'
name|'LPAR'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_powervm_operator
name|'def'
name|'get_powervm_operator'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'CONF'
op|'.'
name|'powervm_mgr_type'
op|'=='
string|"'ivm'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'IVMOperator'
op|'('
name|'common'
op|'.'
name|'Connection'
op|'('
name|'CONF'
op|'.'
name|'powervm_mgr'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'powervm_mgr_user'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'powervm_mgr_passwd'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_powervm_disk_adapter
dedent|''
dedent|''
name|'def'
name|'get_powervm_disk_adapter'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'blockdev'
op|'.'
name|'PowerVMLocalVolumeAdapter'
op|'('
nl|'\n'
name|'common'
op|'.'
name|'Connection'
op|'('
name|'CONF'
op|'.'
name|'powervm_mgr'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'powervm_mgr_user'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'powervm_mgr_passwd'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PowerVMOperator
dedent|''
name|'class'
name|'PowerVMOperator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""PowerVM main operator.\n\n    The PowerVMOperator is intended to wrap all operations\n    from the driver and handle either IVM or HMC managed systems.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'='
name|'get_powervm_operator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_disk_adapter'
op|'='
name|'get_powervm_disk_adapter'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_host_stats'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_update_host_stats'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the current status of an LPAR instance.\n\n        Returns a dict containing:\n\n        :state:           the running state, one of the power_state codes\n        :max_mem:         (int) the maximum memory in KBytes allowed\n        :mem:             (int) the memory in KBytes used by the domain\n        :num_cpu:         (int) the number of virtual CPUs for the domain\n        :cpu_time:        (int) the CPU time used in nanoseconds\n\n        :raises: PowerVMLPARInstanceNotFound\n        """'
newline|'\n'
name|'lpar_instance'
op|'='
name|'self'
op|'.'
name|'_get_instance'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'state'
op|'='
name|'constants'
op|'.'
name|'POWERVM_POWER_STATE'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'lpar_instance'
op|'['
string|"'state'"
op|']'
op|','
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'lpar_instance'
op|'['
string|"'max_mem'"
op|']'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'lpar_instance'
op|'['
string|"'desired_mem'"
op|']'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'lpar_instance'
op|'['
string|"'max_procs'"
op|']'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
name|'lpar_instance'
op|'['
string|"'uptime'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lpar_instance'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'True'
name|'if'
name|'lpar_instance'
name|'else'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_get_instance
dedent|''
name|'def'
name|'_get_instance'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check whether or not the LPAR instance exists and return it."""'
newline|'\n'
name|'lpar_instance'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'lpar_instance'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"LPAR instance \'%s\' not found"'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARInstanceNotFound'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lpar_instance'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the names of all the instances known to the virtualization\n        layer, as a list.\n        """'
newline|'\n'
name|'lpar_instances'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'list_lpar_instances'
op|'('
op|')'
newline|'\n'
name|'return'
name|'lpar_instances'
newline|'\n'
nl|'\n'
DECL|member|get_available_resource
dedent|''
name|'def'
name|'get_available_resource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve resource info.\n\n        :returns: dictionary containing resource info\n        """'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'get_host_stats'
op|'('
op|')'
newline|'\n'
comment|'# Memory data is in MB already.'
nl|'\n'
name|'memory_mb_used'
op|'='
name|'data'
op|'['
string|"'host_memory_total'"
op|']'
op|'-'
name|'data'
op|'['
string|"'host_memory_free'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Convert to GB'
nl|'\n'
name|'local_gb'
op|'='
name|'data'
op|'['
string|"'disk_total'"
op|']'
op|'/'
number|'1024'
newline|'\n'
name|'local_gb_used'
op|'='
name|'data'
op|'['
string|"'disk_used'"
op|']'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
name|'dic'
op|'='
op|'{'
string|"'vcpus'"
op|':'
name|'data'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'data'
op|'['
string|"'host_memory_total'"
op|']'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'local_gb'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
name|'data'
op|'['
string|"'vcpus_used'"
op|']'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'memory_mb_used'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'local_gb_used'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'data'
op|'['
string|"'hypervisor_type'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'data'
op|'['
string|"'hypervisor_version'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_hostname'"
op|':'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_hostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
string|"','"
op|'.'
name|'join'
op|'('
name|'data'
op|'['
string|"'cpu_info'"
op|']'
op|')'
op|','
nl|'\n'
string|"'disk_available_least'"
op|':'
name|'data'
op|'['
string|"'disk_total'"
op|']'
op|'}'
newline|'\n'
name|'return'
name|'dic'
newline|'\n'
nl|'\n'
DECL|member|get_host_stats
dedent|''
name|'def'
name|'get_host_stats'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return currently known host stats."""'
newline|'\n'
name|'if'
name|'refresh'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_host_stats'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_host_stats'
newline|'\n'
nl|'\n'
DECL|member|_update_host_stats
dedent|''
name|'def'
name|'_update_host_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'memory_info'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_memory_info'
op|'('
op|')'
newline|'\n'
name|'cpu_info'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Note: disk avail information is not accurate. The value'
nl|'\n'
comment|'# is a sum of all Volume Groups and the result cannot'
nl|'\n'
comment|'# represent the real possibility. Example: consider two'
nl|'\n'
comment|'# VGs both 10G, the avail disk will be 20G however,'
nl|'\n'
comment|'# a 15G image does not fit in any VG. This can be improved'
nl|'\n'
comment|'# later on.'
nl|'\n'
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_disk_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'data'
op|'['
string|"'vcpus'"
op|']'
op|'='
name|'cpu_info'
op|'['
string|"'total_procs'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'vcpus_used'"
op|']'
op|'='
name|'cpu_info'
op|'['
string|"'total_procs'"
op|']'
op|'-'
name|'cpu_info'
op|'['
string|"'avail_procs'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'cpu_info'"
op|']'
op|'='
name|'constants'
op|'.'
name|'POWERVM_CPU_INFO'
newline|'\n'
name|'data'
op|'['
string|"'disk_total'"
op|']'
op|'='
name|'disk_info'
op|'['
string|"'disk_total'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'disk_used'"
op|']'
op|'='
name|'disk_info'
op|'['
string|"'disk_used'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'disk_available'"
op|']'
op|'='
name|'disk_info'
op|'['
string|"'disk_avail'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'host_memory_total'"
op|']'
op|'='
name|'memory_info'
op|'['
string|"'total_mem'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'host_memory_free'"
op|']'
op|'='
name|'memory_info'
op|'['
string|"'avail_mem'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'hypervisor_type'"
op|']'
op|'='
name|'constants'
op|'.'
name|'POWERVM_HYPERVISOR_TYPE'
newline|'\n'
name|'data'
op|'['
string|"'hypervisor_version'"
op|']'
op|'='
name|'constants'
op|'.'
name|'POWERVM_HYPERVISOR_VERSION'
newline|'\n'
name|'data'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_hostname'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|"'extres'"
op|']'
op|'='
string|"''"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_host_stats'
op|'='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
DECL|function|_create_lpar_instance
indent|'        '
name|'def'
name|'_create_lpar_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_stats'
op|'='
name|'self'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
name|'inst_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# CPU/Memory min and max can be configurable. Lets assume'
nl|'\n'
comment|'# some default values for now.'
nl|'\n'
nl|'\n'
comment|'# Memory'
nl|'\n'
name|'mem'
op|'='
name|'instance'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'if'
name|'mem'
op|'>'
name|'host_stats'
op|'['
string|"'host_memory_free'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Not enough free memory in the host'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientFreeMemory'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'mem_min'
op|'='
name|'min'
op|'('
name|'mem'
op|','
name|'constants'
op|'.'
name|'POWERVM_MIN_MEM'
op|')'
newline|'\n'
name|'mem_max'
op|'='
name|'mem'
op|'+'
name|'constants'
op|'.'
name|'POWERVM_MAX_MEM'
newline|'\n'
nl|'\n'
comment|'# CPU'
nl|'\n'
name|'cpus'
op|'='
name|'instance'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'avail_cpus'
op|'='
name|'host_stats'
op|'['
string|"'vcpus'"
op|']'
op|'-'
name|'host_stats'
op|'['
string|"'vcpus_used'"
op|']'
newline|'\n'
name|'if'
name|'cpus'
op|'>'
name|'avail_cpus'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Insufficient available CPU on PowerVM'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientCPU'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'cpus_min'
op|'='
name|'min'
op|'('
name|'cpus'
op|','
name|'constants'
op|'.'
name|'POWERVM_MIN_CPUS'
op|')'
newline|'\n'
name|'cpus_max'
op|'='
name|'cpus'
op|'+'
name|'constants'
op|'.'
name|'POWERVM_MAX_CPUS'
newline|'\n'
name|'cpus_units_min'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'cpus_min'
op|')'
op|'/'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
number|'10'
op|')'
newline|'\n'
name|'cpus_units'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'cpus'
op|')'
op|'/'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
number|'10'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Network'
nl|'\n'
comment|'# To ensure the MAC address on the guest matches the'
nl|'\n'
comment|'# generated value, pull the first 10 characters off the'
nl|'\n'
comment|'# MAC address for the mac_base_value parameter and then'
nl|'\n'
comment|'# get the integer value of the final 2 characters as the'
nl|'\n'
comment|'# slot_id parameter'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# NOTE(mjfork) the slot_id should not exceed 255 (FF) to'
nl|'\n'
comment|'#              to avoid spilling over into the next'
nl|'\n'
comment|'#              highest octet.  The contract with'
nl|'\n'
comment|'#              macs_for_instance limits to a value between'
nl|'\n'
comment|'#              32 and 63 inclusive so we are safe.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#              Further, with the contract on slot_id, we'
nl|'\n'
comment|'#              can hard code max_virtual_slots to 64 in'
nl|'\n'
comment|'#              LPAR definition.'
nl|'\n'
indent|'                '
name|'mac'
op|'='
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'mac_base_value'
op|'='
op|'('
name|'mac'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|')'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'eth_id'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_virtual_eth_adapter_id'
op|'('
op|')'
newline|'\n'
name|'slot_id'
op|'='
name|'int'
op|'('
name|'mac'
op|'['
op|'-'
number|'2'
op|':'
op|']'
op|','
number|'16'
op|')'
newline|'\n'
name|'virtual_eth_adapters'
op|'='
op|'('
string|"'%(slot_id)s/0/%(eth_id)s//0/0'"
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# LPAR configuration data'
nl|'\n'
name|'lpar_inst'
op|'='
name|'LPAR'
op|'.'
name|'LPAR'
op|'('
nl|'\n'
name|'name'
op|'='
name|'inst_name'
op|','
name|'lpar_env'
op|'='
string|"'aixlinux'"
op|','
nl|'\n'
name|'min_mem'
op|'='
name|'mem_min'
op|','
name|'desired_mem'
op|'='
name|'mem'
op|','
nl|'\n'
name|'max_mem'
op|'='
name|'mem_max'
op|','
name|'proc_mode'
op|'='
string|"'shared'"
op|','
nl|'\n'
name|'sharing_mode'
op|'='
string|"'uncap'"
op|','
name|'min_procs'
op|'='
name|'cpus_min'
op|','
nl|'\n'
name|'desired_procs'
op|'='
name|'cpus'
op|','
name|'max_procs'
op|'='
name|'cpus_max'
op|','
nl|'\n'
name|'min_proc_units'
op|'='
name|'cpus_units_min'
op|','
nl|'\n'
name|'desired_proc_units'
op|'='
name|'cpus_units'
op|','
nl|'\n'
name|'max_proc_units'
op|'='
name|'cpus_max'
op|','
nl|'\n'
name|'virtual_eth_mac_base_value'
op|'='
name|'mac_base_value'
op|','
nl|'\n'
name|'max_virtual_slots'
op|'='
number|'64'
op|','
nl|'\n'
name|'virtual_eth_adapters'
op|'='
name|'virtual_eth_adapters'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating LPAR instance \'%s\'"'
op|')'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'create_lpar'
op|'('
name|'lpar_inst'
op|')'
newline|'\n'
comment|'#TODO(mjfork) capture the error and handle the error when the MAC'
nl|'\n'
comment|'#             prefix already exists on the system (1 in 2^32)'
nl|'\n'
dedent|''
name|'except'
name|'nova_exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"LPAR instance \'%s\' creation failed"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARCreationFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_create_image
dedent|''
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Fetch image from glance and copy it to the remote system."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'root_volume'
op|'='
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'create_volume_from_image'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'attach_volume_to_host'
op|'('
name|'root_volume'
op|')'
newline|'\n'
nl|'\n'
name|'lpar_id'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'lpar_id'"
op|']'
newline|'\n'
name|'vhost'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_vhost_by_instance_id'
op|'('
name|'lpar_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'attach_disk_to_vhost'
op|'('
nl|'\n'
name|'root_volume'
op|'['
string|"'device_name'"
op|']'
op|','
name|'vhost'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"PowerVM image creation failed: %s"'
op|')'
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMImageCreationFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'spawn_start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'host_stats'
op|'='
name|'self'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
name|'lpar_inst'
op|'='
name|'self'
op|'.'
name|'_create_lpar_instance'
op|'('
name|'instance'
op|','
name|'host_stats'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'create_lpar'
op|'('
name|'lpar_inst'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating LPAR instance \'%s\'"'
op|')'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'nova_exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"LPAR instance \'%s\' creation failed"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARCreationFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Activating the LPAR instance \'%s\'"'
op|')'
nl|'\n'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'start_lpar'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for boot'
nl|'\n'
name|'timeout_count'
op|'='
name|'range'
op|'('
number|'10'
op|')'
newline|'\n'
name|'while'
name|'timeout_count'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance spawned successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'timeout_count'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'timeout_count'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Instance \'%s\' failed to boot"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'PowerVMImageCreationFailed'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# log errors in cleanup'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Error while attempting to '"
nl|'\n'
string|"'clean up failed instance launch.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'spawn_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'spawn_start'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance spawned in %s seconds"'
op|')'
op|'%'
name|'spawn_time'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy (shutdown and delete) the specified instance.\n\n        :param instance_name: Instance name.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance_name'
op|','
name|'destroy_disks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'PowerVMLPARInstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"During destroy, LPAR instance \'%s\' was not found on "'
nl|'\n'
string|'"PowerVM system."'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|capture_image
dedent|''
dedent|''
name|'def'
name|'capture_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Capture the root disk for a snapshot\n\n        :param context: nova context for this operation\n        :param instance: instance information to capture the image from\n        :param image_id: uuid of pre-created snapshot image\n        :param image_meta: metadata to upload with captured image\n        """'
newline|'\n'
name|'lpar'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'previous_state'
op|'='
name|'lpar'
op|'['
string|"'state'"
op|']'
newline|'\n'
nl|'\n'
comment|'# stop the instance if it is running'
nl|'\n'
name|'if'
name|'previous_state'
op|'=='
string|"'Running'"
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Stopping instance %s for snapshot."'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
comment|'# wait up to 2 minutes for shutdown'
nl|'\n'
name|'self'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'timeout'
op|'='
number|'120'
op|')'
newline|'\n'
nl|'\n'
comment|'# get disk_name'
nl|'\n'
dedent|''
name|'vhost'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_vhost_by_instance_id'
op|'('
name|'lpar'
op|'['
string|"'lpar_id'"
op|']'
op|')'
newline|'\n'
name|'disk_name'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_disk_name_by_vhost'
op|'('
name|'vhost'
op|')'
newline|'\n'
nl|'\n'
comment|'# do capture and upload'
nl|'\n'
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'create_image_from_volume'
op|'('
nl|'\n'
name|'disk_name'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# restart instance if it was running before'
nl|'\n'
name|'if'
name|'previous_state'
op|'=='
string|"'Running'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lpar_id'
op|'='
name|'self'
op|'.'
name|'_get_instance'
op|'('
name|'instance_name'
op|')'
op|'['
string|"'lpar_id'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vhost'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_vhost_by_instance_id'
op|'('
name|'lpar_id'
op|')'
newline|'\n'
name|'disk_name'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_disk_name_by_vhost'
op|'('
name|'vhost'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Shutting down the instance \'%s\'"'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'stop_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|'#dperaza: LPAR should be deleted first so that vhost is'
nl|'\n'
comment|'#cleanly removed and detached from disk device.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting the LPAR instance \'%s\'"'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'remove_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_name'
name|'and'
name|'destroy_disks'
op|':'
newline|'\n'
comment|'# TODO(mrodden): we should also detach from the instance'
nl|'\n'
comment|'# before we start deleting things...'
nl|'\n'
indent|'                '
name|'volume_info'
op|'='
op|'{'
string|"'device_name'"
op|':'
name|'disk_name'
op|'}'
newline|'\n'
comment|'#Volume info dictionary might need more info that is lost when'
nl|'\n'
comment|'#volume is detached from host so that it can be deleted'
nl|'\n'
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'detach_volume_from_host'
op|'('
name|'volume_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'delete_volume'
op|'('
name|'volume_info'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"PowerVM instance cleanup failed"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARInstanceCleanupFailed'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'timeout'
op|'='
number|'30'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'stop_lpar'
op|'('
name|'instance_name'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'start_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|macs_for_instance
dedent|''
name|'def'
name|'macs_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'macs_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_lpar_instance
dedent|''
name|'def'
name|'_create_lpar_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'host_stats'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# CPU/Memory min and max can be configurable. Lets assume'
nl|'\n'
comment|'# some default values for now.'
nl|'\n'
nl|'\n'
comment|'# Memory'
nl|'\n'
name|'mem'
op|'='
name|'instance'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'if'
name|'host_stats'
name|'and'
name|'mem'
op|'>'
name|'host_stats'
op|'['
string|"'host_memory_free'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Not enough free memory in the host'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientFreeMemory'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'mem_min'
op|'='
name|'min'
op|'('
name|'mem'
op|','
name|'constants'
op|'.'
name|'POWERVM_MIN_MEM'
op|')'
newline|'\n'
name|'mem_max'
op|'='
name|'mem'
op|'+'
name|'constants'
op|'.'
name|'POWERVM_MAX_MEM'
newline|'\n'
nl|'\n'
comment|'# CPU'
nl|'\n'
name|'cpus'
op|'='
name|'instance'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'if'
name|'host_stats'
op|':'
newline|'\n'
indent|'            '
name|'avail_cpus'
op|'='
name|'host_stats'
op|'['
string|"'vcpus'"
op|']'
op|'-'
name|'host_stats'
op|'['
string|"'vcpus_used'"
op|']'
newline|'\n'
name|'if'
name|'cpus'
op|'>'
name|'avail_cpus'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Insufficient available CPU on PowerVM'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientCPU'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'cpus_min'
op|'='
name|'min'
op|'('
name|'cpus'
op|','
name|'constants'
op|'.'
name|'POWERVM_MIN_CPUS'
op|')'
newline|'\n'
name|'cpus_max'
op|'='
name|'cpus'
op|'+'
name|'constants'
op|'.'
name|'POWERVM_MAX_CPUS'
newline|'\n'
name|'cpus_units_min'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'cpus_min'
op|')'
op|'/'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
number|'10'
op|')'
newline|'\n'
name|'cpus_units'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'cpus'
op|')'
op|'/'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
number|'10'
op|')'
newline|'\n'
nl|'\n'
comment|'# Network'
nl|'\n'
name|'eth_id'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_virtual_eth_adapter_id'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# LPAR configuration data'
nl|'\n'
name|'lpar_inst'
op|'='
name|'LPAR'
op|'.'
name|'LPAR'
op|'('
nl|'\n'
name|'name'
op|'='
name|'inst_name'
op|','
name|'lpar_env'
op|'='
string|"'aixlinux'"
op|','
nl|'\n'
name|'min_mem'
op|'='
name|'mem_min'
op|','
name|'desired_mem'
op|'='
name|'mem'
op|','
nl|'\n'
name|'max_mem'
op|'='
name|'mem_max'
op|','
name|'proc_mode'
op|'='
string|"'shared'"
op|','
nl|'\n'
name|'sharing_mode'
op|'='
string|"'uncap'"
op|','
name|'min_procs'
op|'='
name|'cpus_min'
op|','
nl|'\n'
name|'desired_procs'
op|'='
name|'cpus'
op|','
name|'max_procs'
op|'='
name|'cpus_max'
op|','
nl|'\n'
name|'min_proc_units'
op|'='
name|'cpus_units_min'
op|','
nl|'\n'
name|'desired_proc_units'
op|'='
name|'cpus_units'
op|','
nl|'\n'
name|'max_proc_units'
op|'='
name|'cpus_max'
op|','
nl|'\n'
name|'virtual_eth_adapters'
op|'='
string|"'4/0/%s//0/0'"
op|'%'
name|'eth_id'
op|')'
newline|'\n'
name|'return'
name|'lpar_inst'
newline|'\n'
nl|'\n'
DECL|member|_check_host_resources
dedent|''
name|'def'
name|'_check_host_resources'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vcpus'
op|','
name|'mem'
op|','
name|'host_stats'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks resources on host for resize, migrate, and spawn\n        :param vcpus: CPUs to be used\n        :param mem: memory requested by instance\n        :param disk: size of disk to be expanded or created\n        """'
newline|'\n'
name|'if'
name|'mem'
op|'>'
name|'host_stats'
op|'['
string|"'host_memory_free'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Not enough free memory in the host'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientFreeMemory'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'avail_cpus'
op|'='
name|'host_stats'
op|'['
string|"'vcpus'"
op|']'
op|'-'
name|'host_stats'
op|'['
string|"'vcpus_used'"
op|']'
newline|'\n'
name|'if'
name|'vcpus'
op|'>'
name|'avail_cpus'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Insufficient available CPU on PowerVM'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientCPU'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk
dedent|''
dedent|''
name|'def'
name|'migrate_disk'
op|'('
name|'self'
op|','
name|'device_name'
op|','
name|'src_host'
op|','
name|'dest'
op|','
name|'image_path'
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Migrates SVC or Logical Volume based disks\n\n        :param device_name: disk device name in /dev/\n        :param dest: IP or DNS name of destination host/VIOS\n        :param image_path: path on source and destination to directory\n                           for storing image files\n        :param instance_name: name of instance being migrated\n        :returns: disk_info dictionary object describing root volume\n                  information used for locating/mounting the volume\n        """'
newline|'\n'
name|'dest_file_path'
op|'='
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'migrate_volume'
op|'('
nl|'\n'
name|'device_name'
op|','
name|'src_host'
op|','
name|'dest'
op|','
name|'image_path'
op|','
name|'instance_name'
op|')'
newline|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'disk_info'
op|'['
string|"'root_disk_file'"
op|']'
op|'='
name|'dest_file_path'
newline|'\n'
name|'return'
name|'disk_info'
newline|'\n'
nl|'\n'
DECL|member|deploy_from_migrated_file
dedent|''
name|'def'
name|'deploy_from_migrated_file'
op|'('
name|'self'
op|','
name|'lpar'
op|','
name|'file_path'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
comment|'# decompress file'
nl|'\n'
indent|'        '
name|'gzip_ending'
op|'='
string|"'.gz'"
newline|'\n'
name|'if'
name|'file_path'
op|'.'
name|'endswith'
op|'('
name|'gzip_ending'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raw_file_path'
op|'='
name|'file_path'
op|'['
op|':'
op|'-'
name|'len'
op|'('
name|'gzip_ending'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raw_file_path'
op|'='
name|'file_path'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'_decompress_image_file'
op|'('
name|'file_path'
op|','
name|'raw_file_path'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# deploy lpar from file'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_deploy_from_vios_file'
op|'('
name|'lpar'
op|','
name|'raw_file_path'
op|','
name|'size'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# cleanup migrated file'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'_remove_file'
op|'('
name|'raw_file_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deploy_from_vios_file
dedent|''
dedent|''
name|'def'
name|'_deploy_from_vios_file'
op|'('
name|'self'
op|','
name|'lpar'
op|','
name|'file_path'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'create_lpar'
op|'('
name|'lpar'
op|')'
newline|'\n'
name|'lpar'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'lpar'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'lpar'
op|'['
string|"'lpar_id'"
op|']'
newline|'\n'
name|'vhost'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_vhost_by_instance_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create logical volume on IVM'
nl|'\n'
name|'diskName'
op|'='
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'_create_logical_volume'
op|'('
name|'size'
op|')'
newline|'\n'
comment|'# Attach the disk to LPAR'
nl|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'attach_disk_to_vhost'
op|'('
name|'diskName'
op|','
name|'vhost'
op|')'
newline|'\n'
nl|'\n'
comment|'# Copy file to device'
nl|'\n'
name|'self'
op|'.'
name|'_disk_adapter'
op|'.'
name|'_copy_file_to_device'
op|'('
name|'file_path'
op|','
name|'diskName'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'start_lpar'
op|'('
name|'lpar'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseOperator
dedent|''
dedent|''
name|'class'
name|'BaseOperator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base operator for IVM and HMC managed systems."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Constructor.\n\n        :param connection: common.Connection object with the\n                           information to connect to the remote\n                           ssh.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'connection_data'
op|'='
name|'connection'
newline|'\n'
nl|'\n'
DECL|member|_set_connection
dedent|''
name|'def'
name|'_set_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_connection'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_connection'
op|'='
name|'common'
op|'.'
name|'ssh_connect'
op|'('
name|'self'
op|'.'
name|'connection_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_lpar
dedent|''
dedent|''
name|'def'
name|'get_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'resource_type'
op|'='
string|"'lpar'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a LPAR object by its instance name.\n\n        :param instance_name: LPAR instance name\n        :param resource_type: the type of resources to list\n        :returns: LPAR object\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lssyscfg'
op|'('
string|'\'-r %s --filter "lpar_names=%s"\''
nl|'\n'
op|'%'
op|'('
name|'resource_type'
op|','
name|'instance_name'
op|')'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'lpar'
op|'='
name|'LPAR'
op|'.'
name|'load_from_conf_data'
op|'('
name|'output'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'return'
name|'lpar'
newline|'\n'
nl|'\n'
DECL|member|list_lpar_instances
dedent|''
name|'def'
name|'list_lpar_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List all existent LPAR instances names.\n\n        :returns: list -- list with instances names.\n        """'
newline|'\n'
name|'lpar_names'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'lssyscfg'
op|'('
nl|'\n'
string|"'-r lpar -F name'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lpar_names'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'lpar_names'
newline|'\n'
nl|'\n'
DECL|member|create_lpar
dedent|''
name|'def'
name|'create_lpar'
op|'('
name|'self'
op|','
name|'lpar'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receives a LPAR data object and creates a LPAR instance.\n\n        :param lpar: LPAR object\n        """'
newline|'\n'
name|'conf_data'
op|'='
name|'lpar'
op|'.'
name|'to_string'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'mksyscfg'
op|'('
string|'\'-r lpar -i "%s"\''
op|'%'
nl|'\n'
name|'conf_data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start_lpar
dedent|''
name|'def'
name|'start_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start a LPAR instance.\n\n        :param instance_name: LPAR instance name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'chsysstate'
op|'('
string|"'-r lpar -o on -n %s'"
nl|'\n'
op|'%'
name|'instance_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop_lpar
dedent|''
name|'def'
name|'stop_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'timeout'
op|'='
number|'30'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop a running LPAR.\n\n        :param instance_name: LPAR instance name\n        :param timeout: value in seconds for specifying\n                        how long to wait for the LPAR to stop\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'chsysstate'
op|'('
string|"'-r lpar -o shutdown --immed -n %s'"
op|'%'
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# poll instance until stopped or raise exception'
nl|'\n'
name|'lpar_obj'
op|'='
name|'self'
op|'.'
name|'get_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'wait_inc'
op|'='
number|'1'
comment|'# seconds to wait between status polling'
newline|'\n'
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'while'
name|'lpar_obj'
op|'['
string|"'state'"
op|']'
op|'!='
string|"'Not Activated'"
op|':'
newline|'\n'
indent|'            '
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
comment|'# wait up to (timeout) seconds for shutdown'
nl|'\n'
name|'if'
op|'('
name|'curr_time'
op|'-'
name|'start_time'
op|')'
op|'>'
name|'timeout'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPAROperationTimeout'
op|'('
nl|'\n'
name|'operation'
op|'='
string|"'stop_lpar'"
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
name|'wait_inc'
op|')'
newline|'\n'
name|'lpar_obj'
op|'='
name|'self'
op|'.'
name|'get_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_lpar
dedent|''
dedent|''
name|'def'
name|'remove_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a LPAR.\n\n        :param instance_name: LPAR instance name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'rmsyscfg'
op|'('
string|"'-r lpar -n %s'"
nl|'\n'
op|'%'
name|'instance_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vhost_by_instance_id
dedent|''
name|'def'
name|'get_vhost_by_instance_id'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the vhost name by the instance id.\n\n        :param instance_id: LPAR instance id\n        :returns: string -- vhost name or None in case none is found\n        """'
newline|'\n'
name|'instance_hex_id'
op|'='
string|"'%#010x'"
op|'%'
name|'int'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsmap'
op|'('
string|"'-all -field clientid svsa -fmt :'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'vhosts'
op|'='
name|'dict'
op|'('
name|'item'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
name|'for'
name|'item'
name|'in'
name|'list'
op|'('
name|'output'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_hex_id'
name|'in'
name|'vhosts'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vhosts'
op|'['
name|'instance_hex_id'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_virtual_eth_adapter_id
dedent|''
name|'def'
name|'get_virtual_eth_adapter_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Virtual ethernet adapter id.\n\n        Searches for the shared ethernet adapter and returns\n        its id.\n\n        :returns: id of the virtual ethernet adapter.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsmap'
op|'('
string|"'-all -net -field sea -fmt :'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'sea'
op|'='
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsdev'
op|'('
string|"'-dev %s -attr pvid'"
op|'%'
name|'sea'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
comment|"# Returned output looks like this: ['value', '', '1']"
nl|'\n'
name|'if'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'output'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_hostname
dedent|''
name|'def'
name|'get_hostname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the managed system hostname.\n\n        :returns: string -- hostname\n        """'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'hostname'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_disk_name_by_vhost
dedent|''
name|'def'
name|'get_disk_name_by_vhost'
op|'('
name|'self'
op|','
name|'vhost'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the disk name attached to a vhost.\n\n        :param vhost: a vhost name\n        :returns: string -- disk name\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsmap'
op|'('
string|"'-vadapter %s -field backing -fmt :'"
op|'%'
name|'vhost'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|attach_disk_to_vhost
dedent|''
name|'def'
name|'attach_disk_to_vhost'
op|'('
name|'self'
op|','
name|'disk'
op|','
name|'vhost'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach disk name to a specific vhost.\n\n        :param disk: the disk name\n        :param vhost: the vhost name\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'mkvdev'
op|'('
string|"'-vdev %s -vadapter %s'"
op|')'
op|'%'
op|'('
name|'disk'
op|','
name|'vhost'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_memory_info
dedent|''
name|'def'
name|'get_memory_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get memory info.\n\n        :returns: tuple - memory info (total_mem, avail_mem)\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lshwres'
op|'('
nl|'\n'
string|"'-r mem --level sys -F configurable_sys_mem,curr_avail_sys_mem'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'total_mem'
op|','
name|'avail_mem'
op|'='
name|'output'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'total_mem'"
op|':'
name|'int'
op|'('
name|'total_mem'
op|')'
op|','
nl|'\n'
string|"'avail_mem'"
op|':'
name|'int'
op|'('
name|'avail_mem'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_cpu_info
dedent|''
name|'def'
name|'get_cpu_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get CPU info.\n\n        :returns: tuple - cpu info (total_procs, avail_procs)\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lshwres'
op|'('
nl|'\n'
string|"'-r proc --level sys -F '"
nl|'\n'
string|"'configurable_sys_proc_units,curr_avail_sys_proc_units'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'total_procs'
op|','
name|'avail_procs'
op|'='
name|'output'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'total_procs'"
op|':'
name|'float'
op|'('
name|'total_procs'
op|')'
op|','
nl|'\n'
string|"'avail_procs'"
op|':'
name|'float'
op|'('
name|'avail_procs'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_disk_info
dedent|''
name|'def'
name|'get_disk_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the disk usage information.\n\n        :returns: tuple - disk info (disk_total, disk_used, disk_avail)\n        """'
newline|'\n'
name|'vgs'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsvg'
op|'('
op|')'
op|')'
newline|'\n'
op|'('
name|'disk_total'
op|','
name|'disk_used'
op|','
name|'disk_avail'
op|')'
op|'='
op|'['
number|'0'
op|','
number|'0'
op|','
number|'0'
op|']'
newline|'\n'
name|'for'
name|'vg'
name|'in'
name|'vgs'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsvg'
op|'('
string|"'%s -field totalpps usedpps freepps -fmt :'"
nl|'\n'
op|'%'
name|'vg'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
comment|'# Output example:'
nl|'\n'
comment|'# 1271 (10168 megabytes):0 (0 megabytes):1271 (10168 megabytes)'
nl|'\n'
op|'('
name|'d_total'
op|','
name|'d_used'
op|','
name|'d_avail'
op|')'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"r'(\\d+) megabytes'"
op|','
nl|'\n'
name|'output'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'disk_total'
op|'+='
name|'int'
op|'('
name|'d_total'
op|')'
newline|'\n'
name|'disk_used'
op|'+='
name|'int'
op|'('
name|'d_used'
op|')'
newline|'\n'
name|'disk_avail'
op|'+='
name|'int'
op|'('
name|'d_avail'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'disk_total'"
op|':'
name|'disk_total'
op|','
nl|'\n'
string|"'disk_used'"
op|':'
name|'disk_used'
op|','
nl|'\n'
string|"'disk_avail'"
op|':'
name|'disk_avail'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|run_vios_command
dedent|''
name|'def'
name|'run_vios_command'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a remote command using an active ssh connection.\n\n        :param command: String with the command to run.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_set_connection'
op|'('
op|')'
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'utils'
op|'.'
name|'ssh_execute'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'cmd'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'return'
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_vios_command_as_root
dedent|''
name|'def'
name|'run_vios_command_as_root'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a remote command as root using an active ssh connection.\n\n        :param command: List of commands.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_set_connection'
op|'('
op|')'
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'common'
op|'.'
name|'ssh_command_as_root'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_connection'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'return'
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|macs_for_instance
dedent|''
name|'def'
name|'macs_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|update_lpar
dedent|''
name|'def'
name|'update_lpar'
op|'('
name|'self'
op|','
name|'lpar_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resizing an LPAR\n\n        :param lpar_info: dictionary of LPAR information\n        """'
newline|'\n'
name|'configuration_data'
op|'='
op|'('
string|"'name=%s,min_mem=%s,desired_mem=%s,'"
nl|'\n'
string|"'max_mem=%s,min_procs=%s,desired_procs=%s,'"
nl|'\n'
string|"'max_procs=%s,min_proc_units=%s,'"
nl|'\n'
string|"'desired_proc_units=%s,max_proc_units=%s'"
op|'%'
nl|'\n'
op|'('
name|'lpar_info'
op|'['
string|"'name'"
op|']'
op|','
name|'lpar_info'
op|'['
string|"'min_mem'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'desired_mem'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'max_mem'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'min_procs'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'desired_procs'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'max_procs'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'min_proc_units'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'desired_proc_units'"
op|']'
op|','
nl|'\n'
name|'lpar_info'
op|'['
string|"'max_proc_units'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'chsyscfg'
op|'('
string|'\'-r prof -i "%s"\''
op|'%'
nl|'\n'
name|'configuration_data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_logical_vol_size
dedent|''
name|'def'
name|'get_logical_vol_size'
op|'('
name|'self'
op|','
name|'diskname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finds and calculates the logical volume size in GB\n\n        :param diskname: name of the logical volume\n        :returns: size of logical volume in GB\n        """'
newline|'\n'
name|'configuration_data'
op|'='
op|'('
string|'"ioscli lslv %s -fmt : -field pps ppsize"'
op|'%'
nl|'\n'
name|'diskname'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'configuration_data'
op|')'
newline|'\n'
name|'pps'
op|','
name|'ppsize'
op|'='
name|'output'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'ppsize'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"r'\\d+'"
op|','
name|'ppsize'
op|')'
newline|'\n'
name|'ppsize'
op|'='
name|'int'
op|'('
name|'ppsize'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'pps'
op|'='
name|'int'
op|'('
name|'pps'
op|')'
newline|'\n'
name|'lv_size'
op|'='
op|'('
op|'('
name|'pps'
op|'*'
name|'ppsize'
op|')'
op|'/'
number|'1024'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'lv_size'
newline|'\n'
nl|'\n'
DECL|member|rename_lpar
dedent|''
name|'def'
name|'rename_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'new_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rename LPAR given by instance_name to new_name\n\n        Note: For IVM based deployments, the name is\n              limited to 31 characters and will be trimmed\n              to meet this requirement\n\n        :param instance_name: name of LPAR to be renamed\n        :param new_name: desired new name of LPAR\n        :returns: new name of renamed LPAR trimmed to 31 characters\n                  if necessary\n        """'
newline|'\n'
nl|'\n'
comment|'# grab first 31 characters of new name'
nl|'\n'
name|'new_name_trimmed'
op|'='
name|'new_name'
op|'['
op|':'
number|'31'
op|']'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'chsyscfg -r lpar -i '"
op|','
nl|'\n'
string|'\'"\''
op|','
nl|'\n'
string|"'name=%s,'"
op|'%'
name|'instance_name'
op|','
nl|'\n'
string|"'new_name=%s'"
op|'%'
name|'new_name_trimmed'
op|','
nl|'\n'
string|'\'"\''
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'run_vios_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'new_name_trimmed'
newline|'\n'
nl|'\n'
DECL|member|_decompress_image_file
dedent|''
name|'def'
name|'_decompress_image_file'
op|'('
name|'self'
op|','
name|'file_path'
op|','
name|'outfile_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'command'
op|'='
string|'"/usr/bin/gunzip -c %s > %s"'
op|'%'
op|'('
name|'file_path'
op|','
name|'outfile_path'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command_as_root'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
comment|'# Remove compressed image file'
nl|'\n'
name|'command'
op|'='
string|'"/usr/bin/rm %s"'
op|'%'
name|'file_path'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_vios_command_as_root'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'outfile_path'
newline|'\n'
nl|'\n'
DECL|member|_remove_file
dedent|''
name|'def'
name|'_remove_file'
op|'('
name|'self'
op|','
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a file on the VIOS partition\n\n        :param file_path: absolute path to file to be removed\n        """'
newline|'\n'
name|'command'
op|'='
string|"'rm %s'"
op|'%'
name|'file_path'
newline|'\n'
name|'self'
op|'.'
name|'run_vios_command_as_root'
op|'('
name|'command'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IVMOperator
dedent|''
dedent|''
name|'class'
name|'IVMOperator'
op|'('
name|'BaseOperator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Integrated Virtualization Manager (IVM) Operator.\n\n    Runs specific commands on an IVM managed system.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'ivm_connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
op|'.'
name|'IVMCommand'
op|'('
op|')'
newline|'\n'
name|'BaseOperator'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'ivm_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|macs_for_instance
dedent|''
name|'def'
name|'macs_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generates set of valid MAC addresses for an IVM instance."""'
newline|'\n'
comment|'# NOTE(vish): We would prefer to use 0xfe here to ensure that linux'
nl|'\n'
comment|"#             bridge mac addresses don't change, but it appears to"
nl|'\n'
comment|'#             conflict with libvirt, so we use the next highest octet'
nl|'\n'
comment|'#             that has the unicast and locally administered bits set'
nl|'\n'
comment|'#             properly: 0xfa.'
nl|'\n'
comment|'#             Discussion: https://bugs.launchpad.net/nova/+bug/921838'
nl|'\n'
comment|'# NOTE(mjfork): For IVM-based PowerVM, we cannot directly set a MAC'
nl|'\n'
comment|'#               address on an LPAR, but rather need to construct one'
nl|'\n'
comment|'#               that can be used.  Retain the 0xfa as noted above,'
nl|'\n'
comment|'#               but ensure the final 2 hex values represent a value'
nl|'\n'
comment|'#               between 32 and 64 so we can assign as the slot id on'
nl|'\n'
comment|'#               the system. For future reference, the last octect'
nl|'\n'
comment|'#               should not exceed FF (255) since it would spill over'
nl|'\n'
comment|'#               into the higher-order octect.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#               FA:xx:xx:xx:xx:[32-64]'
nl|'\n'
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'mac_base'
op|'='
op|'['
number|'0xfa'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0x00'
op|')'
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
number|'32'
op|','
number|'64'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mac_base'
op|'['
number|'5'
op|']'
op|'='
name|'n'
newline|'\n'
name|'macs'
op|'.'
name|'add'
op|'('
string|"':'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
string|'"%02x"'
op|'%'
name|'x'
op|','
name|'mac_base'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'macs'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

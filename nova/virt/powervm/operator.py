begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 IBM'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'decimal'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
name|'as'
name|'nova_exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'command'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'powervm'
name|'import'
name|'lpar'
name|'as'
name|'LPAR'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_powervm_operator
name|'def'
name|'get_powervm_operator'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'FLAGS'
op|'.'
name|'powervm_mgr_type'
op|'=='
string|"'ivm'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'IVMOperator'
op|'('
name|'common'
op|'.'
name|'Connection'
op|'('
name|'FLAGS'
op|'.'
name|'powervm_mgr'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'powervm_mgr_user'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'powervm_mgr_passwd'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PowerVMOperator
dedent|''
dedent|''
name|'class'
name|'PowerVMOperator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""PowerVM main operator.\n\n    The PowerVMOperator is intented to wrapper all operations\n    from the driver and handle either IVM or HMC managed systems.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'='
name|'get_powervm_operator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_host_stats'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_update_host_stats'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the current status of an LPAR instance.\n\n        Returns a dict containing:\n\n        :state:           the running state, one of the power_state codes\n        :max_mem:         (int) the maximum memory in KBytes allowed\n        :mem:             (int) the memory in KBytes used by the domain\n        :num_cpu:         (int) the number of virtual CPUs for the domain\n        :cpu_time:        (int) the CPU time used in nanoseconds\n\n        :raises: PowerVMLPARInstanceNotFound\n        """'
newline|'\n'
name|'lpar_instance'
op|'='
name|'self'
op|'.'
name|'_get_instance'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'state'
op|'='
name|'constants'
op|'.'
name|'POWERVM_POWER_STATE'
op|'['
name|'lpar_instance'
op|'['
string|"'state'"
op|']'
op|']'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'lpar_instance'
op|'['
string|"'max_mem'"
op|']'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'lpar_instance'
op|'['
string|"'desired_mem'"
op|']'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'lpar_instance'
op|'['
string|"'max_procs'"
op|']'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
name|'lpar_instance'
op|'['
string|"'uptime'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lpar_instance'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'True'
name|'if'
name|'lpar_instance'
name|'else'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_get_instance
dedent|''
name|'def'
name|'_get_instance'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check whether or not the LPAR instance exists and return it."""'
newline|'\n'
name|'lpar_instance'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'lpar_instance'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"LPAR instance \'%s\' not found"'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARInstanceNotFound'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lpar_instance'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the names of all the instances known to the virtualization\n        layer, as a list.\n        """'
newline|'\n'
name|'lpar_instances'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'list_lpar_instances'
op|'('
op|')'
newline|'\n'
name|'return'
name|'lpar_instances'
newline|'\n'
nl|'\n'
DECL|member|get_available_resource
dedent|''
name|'def'
name|'get_available_resource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve resource info.\n\n        :returns: dictionary containing resource info\n        """'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'get_host_stats'
op|'('
op|')'
newline|'\n'
comment|'# Memory data is in MB already.'
nl|'\n'
name|'memory_mb_used'
op|'='
name|'data'
op|'['
string|"'host_memory_total'"
op|']'
op|'-'
name|'data'
op|'['
string|"'host_memory_free'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Convert to GB'
nl|'\n'
name|'local_gb'
op|'='
name|'data'
op|'['
string|"'disk_total'"
op|']'
op|'/'
number|'1024'
newline|'\n'
name|'local_gb_used'
op|'='
name|'data'
op|'['
string|"'disk_used'"
op|']'
op|'/'
number|'1024'
newline|'\n'
nl|'\n'
name|'dic'
op|'='
op|'{'
string|"'vcpus'"
op|':'
name|'data'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'data'
op|'['
string|"'host_memory_total'"
op|']'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'local_gb'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
name|'data'
op|'['
string|"'vcpus_used'"
op|']'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'memory_mb_used'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'local_gb_used'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'data'
op|'['
string|"'hypervisor_type'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'data'
op|'['
string|"'hypervisor_version'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_hostname'"
op|':'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_hostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
string|"','"
op|'.'
name|'join'
op|'('
name|'data'
op|'['
string|"'cpu_info'"
op|']'
op|')'
op|','
nl|'\n'
string|"'disk_available_least'"
op|':'
name|'data'
op|'['
string|"'disk_total'"
op|']'
op|'}'
newline|'\n'
name|'return'
name|'dic'
newline|'\n'
nl|'\n'
DECL|member|get_host_stats
dedent|''
name|'def'
name|'get_host_stats'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return currently known host stats"""'
newline|'\n'
name|'if'
name|'refresh'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_host_stats'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_host_stats'
newline|'\n'
nl|'\n'
DECL|member|_update_host_stats
dedent|''
name|'def'
name|'_update_host_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'memory_info'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_memory_info'
op|'('
op|')'
newline|'\n'
name|'cpu_info'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Note: disk avail information is not accurate. The value'
nl|'\n'
comment|'# is a sum of all Volume Groups and the result cannot'
nl|'\n'
comment|'# represent the real possibility. Example: consider two'
nl|'\n'
comment|'# VGs both 10G, the avail disk will be 20G however,'
nl|'\n'
comment|'# a 15G image does not fit in any VG. This can be improved'
nl|'\n'
comment|'# later on.'
nl|'\n'
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_disk_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'data'
op|'['
string|"'vcpus'"
op|']'
op|'='
name|'cpu_info'
op|'['
string|"'total_procs'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'vcpus_used'"
op|']'
op|'='
name|'cpu_info'
op|'['
string|"'total_procs'"
op|']'
op|'-'
name|'cpu_info'
op|'['
string|"'avail_procs'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'cpu_info'"
op|']'
op|'='
name|'constants'
op|'.'
name|'POWERVM_CPU_INFO'
newline|'\n'
name|'data'
op|'['
string|"'disk_total'"
op|']'
op|'='
name|'disk_info'
op|'['
string|"'disk_total'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'disk_used'"
op|']'
op|'='
name|'disk_info'
op|'['
string|"'disk_used'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'disk_available'"
op|']'
op|'='
name|'disk_info'
op|'['
string|"'disk_avail'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'host_memory_total'"
op|']'
op|'='
name|'memory_info'
op|'['
string|"'total_mem'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'host_memory_free'"
op|']'
op|'='
name|'memory_info'
op|'['
string|"'avail_mem'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'hypervisor_type'"
op|']'
op|'='
name|'constants'
op|'.'
name|'POWERVM_HYPERVISOR_TYPE'
newline|'\n'
name|'data'
op|'['
string|"'hypervisor_version'"
op|']'
op|'='
name|'constants'
op|'.'
name|'POWERVM_HYPERVISOR_VERSION'
newline|'\n'
name|'data'
op|'['
string|"'extres'"
op|']'
op|'='
string|"''"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_host_stats'
op|'='
name|'data'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
DECL|function|_create_lpar_instance
indent|'        '
name|'def'
name|'_create_lpar_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_stats'
op|'='
name|'self'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
name|'inst_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
comment|'# CPU/Memory min and max can be configurable. Lets assume'
nl|'\n'
comment|'# some default values for now.'
nl|'\n'
nl|'\n'
comment|'# Memory'
nl|'\n'
name|'mem'
op|'='
name|'instance'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'if'
name|'mem'
op|'>'
name|'host_stats'
op|'['
string|"'host_memory_free'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Not enough free memory in the host'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientFreeMemory'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'mem_min'
op|'='
name|'min'
op|'('
name|'mem'
op|','
name|'constants'
op|'.'
name|'POWERVM_MIN_MEM'
op|')'
newline|'\n'
name|'mem_max'
op|'='
name|'mem'
op|'+'
name|'constants'
op|'.'
name|'POWERVM_MAX_MEM'
newline|'\n'
nl|'\n'
comment|'# CPU'
nl|'\n'
name|'cpus'
op|'='
name|'instance'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'avail_cpus'
op|'='
name|'host_stats'
op|'['
string|"'vcpus'"
op|']'
op|'-'
name|'host_stats'
op|'['
string|"'vcpus_used'"
op|']'
newline|'\n'
name|'if'
name|'cpus'
op|'>'
name|'avail_cpus'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Insufficient available CPU on PowerVM'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMInsufficientCPU'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'cpus_min'
op|'='
name|'min'
op|'('
name|'cpus'
op|','
name|'constants'
op|'.'
name|'POWERVM_MIN_CPUS'
op|')'
newline|'\n'
name|'cpus_max'
op|'='
name|'cpus'
op|'+'
name|'constants'
op|'.'
name|'POWERVM_MAX_CPUS'
newline|'\n'
name|'cpus_units_min'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'cpus_min'
op|')'
op|'/'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
number|'10'
op|')'
newline|'\n'
name|'cpus_units'
op|'='
name|'decimal'
op|'.'
name|'Decimal'
op|'('
name|'cpus'
op|')'
op|'/'
name|'decimal'
op|'.'
name|'Decimal'
op|'('
number|'10'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Network'
nl|'\n'
indent|'                '
name|'eth_id'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_virtual_eth_adapter_id'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# LPAR configuration data'
nl|'\n'
name|'lpar_inst'
op|'='
name|'LPAR'
op|'.'
name|'LPAR'
op|'('
nl|'\n'
name|'name'
op|'='
name|'inst_name'
op|','
name|'lpar_env'
op|'='
string|"'aixlinux'"
op|','
nl|'\n'
name|'min_mem'
op|'='
name|'mem_min'
op|','
name|'desired_mem'
op|'='
name|'mem'
op|','
nl|'\n'
name|'max_mem'
op|'='
name|'mem_max'
op|','
name|'proc_mode'
op|'='
string|"'shared'"
op|','
nl|'\n'
name|'sharing_mode'
op|'='
string|"'uncap'"
op|','
name|'min_procs'
op|'='
name|'cpus_min'
op|','
nl|'\n'
name|'desired_procs'
op|'='
name|'cpus'
op|','
name|'max_procs'
op|'='
name|'cpus_max'
op|','
nl|'\n'
name|'min_proc_units'
op|'='
name|'cpus_units_min'
op|','
nl|'\n'
name|'desired_proc_units'
op|'='
name|'cpus_units'
op|','
nl|'\n'
name|'max_proc_units'
op|'='
name|'cpus_max'
op|','
nl|'\n'
name|'virtual_eth_adapters'
op|'='
string|"'4/0/%s//0/0'"
op|'%'
name|'eth_id'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating LPAR instance \'%s\'"'
op|')'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'create_lpar'
op|'('
name|'lpar_inst'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'nova_exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"LPAR instance \'%s\' creation failed"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARCreationFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_create_image
dedent|''
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Fetch image from glance and copy it to the remote system."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'file_name'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
name|'image_id'
op|','
string|"'gz'"
op|']'
op|')'
newline|'\n'
name|'file_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'powervm_img_local_path'
op|','
nl|'\n'
name|'file_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Fetching image \'%s\' from glance"'
op|')'
op|'%'
name|'image_id'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'fetch_to_raw'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'file_path'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Copying image \'%s\' to IVM"'
op|')'
op|'%'
name|'file_path'
op|')'
newline|'\n'
name|'remote_path'
op|'='
name|'FLAGS'
op|'.'
name|'powervm_img_remote_path'
newline|'\n'
name|'remote_file_name'
op|','
name|'size'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'copy_image_file'
op|'('
nl|'\n'
name|'file_path'
op|','
name|'remote_path'
op|')'
newline|'\n'
comment|'# Logical volume'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating logical volume"'
op|')'
op|')'
newline|'\n'
name|'lpar_id'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_lpar'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'lpar_id'"
op|']'
newline|'\n'
name|'vhost'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_vhost_by_instance_id'
op|'('
name|'lpar_id'
op|')'
newline|'\n'
name|'disk_name'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'create_logical_volume'
op|'('
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'attach_disk_to_vhost'
op|'('
name|'disk_name'
op|','
name|'vhost'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Copying image to the device \'%s\'"'
op|')'
op|'%'
name|'disk_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'copy_file_to_device'
op|'('
name|'remote_file_name'
op|','
name|'disk_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"PowerVM image creation failed: %s"'
op|')'
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMImageCreationFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_create_lpar_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Activating the LPAR instance \'%s\'"'
op|')'
nl|'\n'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'start_lpar'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for boot'
nl|'\n'
name|'timeout_count'
op|'='
name|'range'
op|'('
number|'10'
op|')'
newline|'\n'
name|'while'
name|'timeout_count'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance spawned successfully."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'timeout_count'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'timeout_count'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Instance \'%s\' failed to boot"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'PowerVMImageCreationFailed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy (shutdown and delete) the specified instance.\n\n        :param instance_name: Instance name.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'PowerVMLPARInstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"During destroy, LPAR instance \'%s\' was not found on "'
nl|'\n'
string|'"PowerVM system."'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup
dedent|''
dedent|''
name|'def'
name|'_cleanup'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lpar_id'
op|'='
name|'self'
op|'.'
name|'_get_instance'
op|'('
name|'instance_name'
op|')'
op|'['
string|"'lpar_id'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vhost'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_vhost_by_instance_id'
op|'('
name|'lpar_id'
op|')'
newline|'\n'
name|'disk_name'
op|'='
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'get_disk_name_by_vhost'
op|'('
name|'vhost'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Shutting down the instance \'%s\'"'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'stop_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_name'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Removing the logical volume \'%s\'"'
op|')'
op|'%'
name|'disk_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'remove_logical_volume'
op|'('
name|'disk_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting the LPAR instance \'%s\'"'
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'remove_lpar'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"PowerVM instance cleanup failed"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMLPARInstanceCleanupFailed'
op|'('
nl|'\n'
name|'instance_name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'stop'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_operator'
op|'.'
name|'start'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseOperator
dedent|''
dedent|''
name|'class'
name|'BaseOperator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base operator for IVM and HMC managed systems."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Constructor.\n\n        :param connection: common.Connection object with the\n                           information to connect to the remote\n                           ssh.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'connection_data'
op|'='
name|'connection'
newline|'\n'
nl|'\n'
DECL|member|_set_connection
dedent|''
name|'def'
name|'_set_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_connection'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_connection'
op|'='
name|'common'
op|'.'
name|'ssh_connect'
op|'('
name|'self'
op|'.'
name|'connection_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_lpar
dedent|''
dedent|''
name|'def'
name|'get_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'resource_type'
op|'='
string|"'lpar'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a LPAR object by its instance name.\n\n        :param instance_name: LPAR instance name\n        :param resource_type: the type of resources to list\n        :returns: LPAR object\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lssyscfg'
op|'('
string|'\'-r %s --filter "lpar_names=%s"\''
nl|'\n'
op|'%'
op|'('
name|'resource_type'
op|','
name|'instance_name'
op|')'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'lpar'
op|'='
name|'LPAR'
op|'.'
name|'load_from_conf_data'
op|'('
name|'output'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'return'
name|'lpar'
newline|'\n'
nl|'\n'
DECL|member|list_lpar_instances
dedent|''
name|'def'
name|'list_lpar_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List all existent LPAR instances names.\n\n        :returns: list -- list with instances names.\n        """'
newline|'\n'
name|'lpar_names'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'lssyscfg'
op|'('
string|"'-r lpar -F name'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'lpar_names'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'lpar_names'
newline|'\n'
nl|'\n'
DECL|member|create_lpar
dedent|''
name|'def'
name|'create_lpar'
op|'('
name|'self'
op|','
name|'lpar'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receives a LPAR data object and creates a LPAR instance.\n\n        :param lpar: LPAR object\n        """'
newline|'\n'
name|'conf_data'
op|'='
name|'lpar'
op|'.'
name|'to_string'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'mksyscfg'
op|'('
string|'\'-r lpar -i "%s"\''
op|'%'
name|'conf_data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start_lpar
dedent|''
name|'def'
name|'start_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start a LPAR instance.\n\n        :param instance_name: LPAR instance name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'chsysstate'
op|'('
string|"'-r lpar -o on -n %s'"
nl|'\n'
op|'%'
name|'instance_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop_lpar
dedent|''
name|'def'
name|'stop_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop a running LPAR.\n\n        :param instance_name: LPAR instance name\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'chsysstate'
op|'('
string|"'-r lpar -o shutdown --immed -n %s'"
nl|'\n'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_lpar
dedent|''
name|'def'
name|'remove_lpar'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a LPAR.\n\n        :param instance_name: LPAR instance name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'rmsyscfg'
op|'('
string|"'-r lpar -n %s'"
nl|'\n'
op|'%'
name|'instance_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vhost_by_instance_id
dedent|''
name|'def'
name|'get_vhost_by_instance_id'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the vhost name by the instance id.\n\n        :param instance_id: LPAR instance id\n        :returns: string -- vhost name or None in case none is found\n        """'
newline|'\n'
name|'instance_hex_id'
op|'='
string|"'%#010x'"
op|'%'
name|'int'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsmap'
op|'('
string|"'-all -field clientid svsa -fmt :'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'vhosts'
op|'='
name|'dict'
op|'('
name|'item'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
name|'for'
name|'item'
name|'in'
name|'list'
op|'('
name|'output'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_hex_id'
name|'in'
name|'vhosts'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vhosts'
op|'['
name|'instance_hex_id'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_virtual_eth_adapter_id
dedent|''
name|'def'
name|'get_virtual_eth_adapter_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Virtual ethernet adapter id.\n\n        Searches for the shared ethernet adapter and returns\n        its id.\n\n        :returns: id of the virtual ethernet adapter.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsmap'
op|'('
string|"'-all -net -field sea -fmt :'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'sea'
op|'='
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsdev'
op|'('
string|"'-dev %s -attr pvid'"
op|'%'
name|'sea'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
comment|"# Returned output looks like this: ['value', '', '1']"
nl|'\n'
name|'if'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'output'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_disk_name_by_vhost
dedent|''
name|'def'
name|'get_disk_name_by_vhost'
op|'('
name|'self'
op|','
name|'vhost'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the disk name attached to a vhost.\n\n        :param vhost: a vhost name\n        :returns: string -- disk name\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsmap'
op|'('
string|"'-vadapter %s -field backing -fmt :'"
nl|'\n'
op|'%'
name|'vhost'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'output'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_hostname
dedent|''
name|'def'
name|'get_hostname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the managed system hostname.\n\n        :returns: string -- hostname\n        """'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'hostname'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'output'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|remove_disk
dedent|''
name|'def'
name|'remove_disk'
op|'('
name|'self'
op|','
name|'disk_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a disk.\n\n        :param disk: a disk name\n        """'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'rmdev'
op|'('
string|"'-dev %s'"
op|'%'
name|'disk_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_logical_volume
dedent|''
name|'def'
name|'create_logical_volume'
op|'('
name|'self'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a logical volume with a minimum size.\n\n        :param size: size of the logical volume in bytes\n        :returns: string -- the name of the new logical volume.\n        :raises: PowerVMNoSpaceLeftOnVolumeGroup\n        """'
newline|'\n'
name|'vgs'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsvg'
op|'('
op|')'
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsvg'
op|'('
string|"'%s -field vgname freepps -fmt :'"
nl|'\n'
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'vgs'
op|')'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'found_vg'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# If it's not a multiple of 1MB we get the next"
nl|'\n'
comment|'# multiple and use it as the megabyte_size.'
nl|'\n'
name|'megabyte'
op|'='
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'if'
op|'('
name|'size'
op|'%'
name|'megabyte'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'megabyte_size'
op|'='
name|'int'
op|'('
name|'size'
op|'/'
name|'megabyte'
op|')'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'megabyte_size'
op|'='
name|'size'
op|'/'
name|'megabyte'
newline|'\n'
nl|'\n'
comment|'# Search for a volume group with enough free space for'
nl|'\n'
comment|'# the new logical volume.'
nl|'\n'
dedent|''
name|'for'
name|'vg'
name|'in'
name|'output'
op|':'
newline|'\n'
comment|"# Returned output example: 'rootvg:396 (25344 megabytes)'"
nl|'\n'
indent|'            '
name|'match'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|"r'^(\\w+):\\d+\\s\\((\\d+).+$'"
op|','
name|'vg'
op|')'
newline|'\n'
name|'if'
name|'match'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'vg_name'
op|','
name|'avail_size'
op|'='
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'if'
name|'megabyte_size'
op|'<='
name|'int'
op|'('
name|'avail_size'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'found_vg'
op|'='
name|'vg_name'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'found_vg'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Could not create logical volume. '"
nl|'\n'
string|"'No space left on any volume group.'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMNoSpaceLeftOnVolumeGroup'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'mklv'
op|'('
string|"'%s %sB'"
op|'%'
op|'('
name|'found_vg'
op|','
name|'size'
op|'/'
number|'512'
op|')'
op|')'
newline|'\n'
name|'lv_name'
op|','
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'lv_name'
newline|'\n'
nl|'\n'
DECL|member|remove_logical_volume
dedent|''
name|'def'
name|'remove_logical_volume'
op|'('
name|'self'
op|','
name|'lv_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes the lv and the connection between its associated vscsi.\n\n        :param lv_name: a logical volume name\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'rmvdev'
op|'('
string|"'-vdev %s -rmlv'"
op|'%'
name|'lv_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy_file_to_device
dedent|''
name|'def'
name|'copy_file_to_device'
op|'('
name|'self'
op|','
name|'source_path'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy file to device.\n\n        :param source_path: path to input source file\n        :param device: output device name\n        """'
newline|'\n'
name|'cmd'
op|'='
string|"'dd if=%s of=/dev/%s bs=1024k'"
op|'%'
op|'('
name|'source_path'
op|','
name|'device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_command_as_root'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy_image_file
dedent|''
name|'def'
name|'copy_image_file'
op|'('
name|'self'
op|','
name|'source_path'
op|','
name|'remote_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy file to VIOS, decompress it, and return its new size and name.\n\n        :param source_path: source file path\n        :param remote_path remote file path\n        """'
newline|'\n'
comment|'# Calculate source image checksum'
nl|'\n'
name|'hasher'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
op|')'
newline|'\n'
name|'block_size'
op|'='
number|'0x10000'
newline|'\n'
name|'img_file'
op|'='
name|'file'
op|'('
name|'source_path'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'buf'
op|'='
name|'img_file'
op|'.'
name|'read'
op|'('
name|'block_size'
op|')'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'buf'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'buf'
op|'='
name|'img_file'
op|'.'
name|'read'
op|'('
name|'block_size'
op|')'
newline|'\n'
dedent|''
name|'source_cksum'
op|'='
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'comp_path'
op|'='
name|'remote_path'
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'source_path'
op|')'
newline|'\n'
name|'uncomp_path'
op|'='
name|'comp_path'
op|'.'
name|'rstrip'
op|'('
string|'".gz"'
op|')'
newline|'\n'
name|'final_path'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'uncomp_path'
op|','
name|'source_cksum'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check whether the uncompressed image is already on IVM'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
string|'"ls %s"'
op|'%'
name|'final_path'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# If the image does not exist already'
nl|'\n'
name|'if'
name|'not'
name|'len'
op|'('
name|'output'
op|')'
op|':'
newline|'\n'
comment|'# Copy file to IVM'
nl|'\n'
indent|'            '
name|'common'
op|'.'
name|'ftp_put_command'
op|'('
name|'self'
op|'.'
name|'connection_data'
op|','
name|'source_path'
op|','
nl|'\n'
name|'remote_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify image file checksums match'
nl|'\n'
name|'cmd'
op|'='
op|'('
string|'"/usr/bin/csum -h MD5 %s |"'
nl|'\n'
string|'"/usr/bin/awk \'{print $1}\'"'
op|'%'
name|'comp_path'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command_as_root'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'len'
op|'('
name|'output'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to get checksum"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMFileTransferFailed'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'source_cksum'
op|'!='
name|'output'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Image checksums do not match"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMFileTransferFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Unzip the image'
nl|'\n'
dedent|''
name|'cmd'
op|'='
string|'"/usr/bin/gunzip %s"'
op|'%'
name|'comp_path'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command_as_root'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Remove existing image file'
nl|'\n'
name|'cmd'
op|'='
string|'"/usr/bin/rm -f %s.*"'
op|'%'
name|'uncomp_path'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command_as_root'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Rename unzipped image'
nl|'\n'
name|'cmd'
op|'='
string|'"/usr/bin/mv %s %s"'
op|'%'
op|'('
name|'uncomp_path'
op|','
name|'final_path'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command_as_root'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Remove compressed image file'
nl|'\n'
name|'cmd'
op|'='
string|'"/usr/bin/rm -f %s"'
op|'%'
name|'comp_path'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command_as_root'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
comment|'# Calculate file size in multiples of 512 bytes'
nl|'\n'
dedent|''
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
string|'"ls -o %s|awk \'{print $4}\'"'
nl|'\n'
op|'%'
name|'final_path'
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'output'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'int'
op|'('
name|'output'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Uncompressed image file not found"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PowerVMFileTransferFailed'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'size'
op|'%'
number|'512'
op|'!='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
op|'('
name|'int'
op|'('
name|'size'
op|'/'
number|'512'
op|')'
op|'+'
number|'1'
op|')'
op|'*'
number|'512'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'final_path'
op|','
name|'size'
newline|'\n'
nl|'\n'
DECL|member|run_cfg_dev
dedent|''
name|'def'
name|'run_cfg_dev'
op|'('
name|'self'
op|','
name|'device_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run cfgdev command for a specific device.\n\n        :param device_name: device name the cfgdev command will run.\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'cfgdev'
op|'('
string|"'-dev %s'"
op|'%'
name|'device_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_disk_to_vhost
dedent|''
name|'def'
name|'attach_disk_to_vhost'
op|'('
name|'self'
op|','
name|'disk'
op|','
name|'vhost'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach disk name to a specific vhost.\n\n        :param disk: the disk name\n        :param vhost: the vhost name\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'mkvdev'
op|'('
string|"'-vdev %s -vadapter %s'"
op|')'
op|'%'
op|'('
name|'disk'
op|','
name|'vhost'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_memory_info
dedent|''
name|'def'
name|'get_memory_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get memory info.\n\n        :returns: tuple - memory info (total_mem, avail_mem)\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lshwres'
op|'('
nl|'\n'
string|"'-r mem --level sys -F configurable_sys_mem,curr_avail_sys_mem'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'total_mem'
op|','
name|'avail_mem'
op|'='
name|'output'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'total_mem'"
op|':'
name|'int'
op|'('
name|'total_mem'
op|')'
op|','
nl|'\n'
string|"'avail_mem'"
op|':'
name|'int'
op|'('
name|'avail_mem'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_cpu_info
dedent|''
name|'def'
name|'get_cpu_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get CPU info.\n\n        :returns: tuple - cpu info (total_procs, avail_procs)\n        """'
newline|'\n'
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lshwres'
op|'('
nl|'\n'
string|"'-r proc --level sys -F '"
nl|'\n'
string|"'configurable_sys_proc_units,curr_avail_sys_proc_units'"
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'total_procs'
op|','
name|'avail_procs'
op|'='
name|'output'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'total_procs'"
op|':'
name|'float'
op|'('
name|'total_procs'
op|')'
op|','
nl|'\n'
string|"'avail_procs'"
op|':'
name|'float'
op|'('
name|'avail_procs'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_disk_info
dedent|''
name|'def'
name|'get_disk_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the disk usage information.\n\n        :returns: tuple - disk info (disk_total, disk_used, disk_avail)\n        """'
newline|'\n'
name|'vgs'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsvg'
op|'('
op|')'
op|')'
newline|'\n'
op|'('
name|'disk_total'
op|','
name|'disk_used'
op|','
name|'disk_avail'
op|')'
op|'='
op|'['
number|'0'
op|','
number|'0'
op|','
number|'0'
op|']'
newline|'\n'
name|'for'
name|'vg'
name|'in'
name|'vgs'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'self'
op|'.'
name|'command'
op|'.'
name|'lsvg'
op|'('
string|"'%s -field totalpps usedpps freepps -fmt :'"
nl|'\n'
op|'%'
name|'vg'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
comment|'# Output example:'
nl|'\n'
comment|'# 1271 (10168 megabytes):0 (0 megabytes):1271 (10168 megabytes)'
nl|'\n'
op|'('
name|'d_total'
op|','
name|'d_used'
op|','
name|'d_avail'
op|')'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"r'(\\d+) megabytes'"
op|','
nl|'\n'
name|'output'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'disk_total'
op|'+='
name|'int'
op|'('
name|'d_total'
op|')'
newline|'\n'
name|'disk_used'
op|'+='
name|'int'
op|'('
name|'d_used'
op|')'
newline|'\n'
name|'disk_avail'
op|'+='
name|'int'
op|'('
name|'d_avail'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'disk_total'"
op|':'
name|'disk_total'
op|','
nl|'\n'
string|"'disk_used'"
op|':'
name|'disk_used'
op|','
nl|'\n'
string|"'disk_avail'"
op|':'
name|'disk_avail'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|run_command
dedent|''
name|'def'
name|'run_command'
op|'('
name|'self'
op|','
name|'cmd'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a remote command using an active ssh connection.\n\n        :param command: String with the command to run.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_set_connection'
op|'('
op|')'
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'utils'
op|'.'
name|'ssh_execute'
op|'('
name|'self'
op|'.'
name|'_connection'
op|','
name|'cmd'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'return'
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_command_as_root
dedent|''
name|'def'
name|'run_command_as_root'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a remote command as root using an active ssh connection.\n\n        :param command: List of commands.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_set_connection'
op|'('
op|')'
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'common'
op|'.'
name|'ssh_command_as_root'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_connection'
op|','
name|'command'
op|','
name|'check_exit_code'
op|'='
name|'check_exit_code'
op|')'
newline|'\n'
name|'return'
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IVMOperator
dedent|''
dedent|''
name|'class'
name|'IVMOperator'
op|'('
name|'BaseOperator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Integrated Virtualization Manager (IVM) Operator.\n\n    Runs specific commands on an IVM managed system.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'ivm_connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'command'
op|'='
name|'command'
op|'.'
name|'IVMCommand'
op|'('
op|')'
newline|'\n'
name|'BaseOperator'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'ivm_connection'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

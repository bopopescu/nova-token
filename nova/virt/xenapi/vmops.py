begin_unit
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManagement class for VM-related functions (spawn, reboot, etc).\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'zlib'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_mode'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'console'
name|'import'
name|'type'
name|'as'
name|'ctype'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'pci'
name|'import'
name|'pci_manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
name|'as'
name|'virt_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'agent'
name|'as'
name|'xapi_agent'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'pool_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'vm_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'volume_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'volumeops'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|xenapi_vmops_opts
name|'xenapi_vmops_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'running_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds to wait for instance '"
nl|'\n'
string|"'to go to running state'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vif_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.xenapi.vif.XenAPIBridgeDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The XenAPI VIF driver using XenServer Network APIs.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'image_upload_handler'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.xenapi.image.glance.GlanceStore'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Dom0 plugin driver used to handle image uploads.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'xenapi_vmops_opts'
op|','
string|"'xenserver'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'vncserver_proxyclient_address'"
op|','
string|"'nova.vnc'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_FIREWALL_DRIVER
name|'DEFAULT_FIREWALL_DRIVER'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
nl|'\n'
name|'firewall'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'firewall'
op|'.'
name|'IptablesFirewallDriver'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|RESIZE_TOTAL_STEPS
name|'RESIZE_TOTAL_STEPS'
op|'='
number|'5'
newline|'\n'
nl|'\n'
DECL|variable|DEVICE_ROOT
name|'DEVICE_ROOT'
op|'='
string|"'0'"
newline|'\n'
DECL|variable|DEVICE_RESCUE
name|'DEVICE_RESCUE'
op|'='
string|"'1'"
newline|'\n'
DECL|variable|DEVICE_SWAP
name|'DEVICE_SWAP'
op|'='
string|"'2'"
newline|'\n'
DECL|variable|DEVICE_CONFIGDRIVE
name|'DEVICE_CONFIGDRIVE'
op|'='
string|"'3'"
newline|'\n'
comment|'# Note(johngarbutt) HVM guests only support four devices'
nl|'\n'
comment|'# until the PV tools activate, when others before available'
nl|'\n'
comment|'# As such, ephemeral disk only available once PV tools load'
nl|'\n'
comment|'# Note(johngarbutt) When very large ephemeral storage is required,'
nl|'\n'
comment|'# multiple disks may be added. In this case the device id below'
nl|'\n'
comment|'# is the used for the first disk. The second disk will be given'
nl|'\n'
comment|'# next device id, i.e. 5, and so on, until enough space is added.'
nl|'\n'
DECL|variable|DEVICE_EPHEMERAL
name|'DEVICE_EPHEMERAL'
op|'='
string|"'4'"
newline|'\n'
comment|"# Note(johngarbutt) Currently don't support ISO boot during rescue"
nl|'\n'
comment|'# and we must have the ISO visible before the PV drivers start'
nl|'\n'
DECL|variable|DEVICE_CD
name|'DEVICE_CD'
op|'='
string|"'1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_step_decorator
name|'def'
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'update_instance_progress'
op|','
nl|'\n'
name|'total_offset'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory to create a decorator that records instance progress as a series\n    of discrete steps.\n\n    Each time the decorator is invoked we bump the total-step-count, so after::\n\n        @step\n        def step1():\n            ...\n\n        @step\n        def step2():\n            ...\n\n    we have a total-step-count of 2.\n\n    Each time the step-function (not the step-decorator!) is invoked, we bump\n    the current-step-count by 1, so after::\n\n        step1()\n\n    the current-step-count would be 1 giving a progress of ``1 / 2 *\n    100`` or 50%.\n    """'
newline|'\n'
name|'step_info'
op|'='
name|'dict'
op|'('
name|'total'
op|'='
name|'total_offset'
op|','
name|'current'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|bump_progress
name|'def'
name|'bump_progress'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step_info'
op|'['
string|"'current'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step_info'
op|'['
string|"'current'"
op|']'
op|','
name|'step_info'
op|'['
string|"'total'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|step_decorator
dedent|''
name|'def'
name|'step_decorator'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step_info'
op|'['
string|"'total'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'bump_progress'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'step_decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOps
dedent|''
name|'class'
name|'VMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Management class for VM-related tasks."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|','
name|'virtapi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'='
name|'virtapi'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'volumeops'
op|'.'
name|'VolumeOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'firewall'
op|'.'
name|'load_driver'
op|'('
nl|'\n'
name|'DEFAULT_FIREWALL_DRIVER'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|','
nl|'\n'
name|'xenapi_session'
op|'='
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'vif_impl'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'CONF'
op|'.'
name|'xenserver'
op|'.'
name|'vif_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vif_driver'
op|'='
name|'vif_impl'
op|'('
name|'xenapi_session'
op|'='
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'default_root_dev'
op|'='
string|"'/dev/sda'"
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Importing image upload handler: %s"'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'xenserver'
op|'.'
name|'image_upload_handler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_upload_handler'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'xenserver'
op|'.'
name|'image_upload_handler'
op|')'
newline|'\n'
nl|'\n'
DECL|member|agent_enabled
dedent|''
name|'def'
name|'agent_enabled'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'xenserver'
op|'.'
name|'disable_agent'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'xapi_agent'
op|'.'
name|'should_use_agent'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_agent
dedent|''
name|'def'
name|'_get_agent'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'xapi_agent'
op|'.'
name|'XenAPIBasedAgent'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_virtapi'
op|','
nl|'\n'
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Error: Agent is disabled"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances."""'
newline|'\n'
comment|'# TODO(justinsb): Should we just always use the details method?'
nl|'\n'
comment|'#  Seems to be the same number of API calls..'
nl|'\n'
name|'name_labels'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name_labels'
op|'.'
name|'append'
op|'('
name|'vm_rec'
op|'['
string|'"name_label"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'name_labels'
newline|'\n'
nl|'\n'
DECL|member|list_instance_uuids
dedent|''
name|'def'
name|'list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the list of nova instance uuids for VMs found on the\n        hypervisor.\n        """'
newline|'\n'
name|'nova_uuids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other_config'
op|'='
name|'vm_rec'
op|'['
string|"'other_config'"
op|']'
newline|'\n'
name|'nova_uuid'
op|'='
name|'other_config'
op|'.'
name|'get'
op|'('
string|"'nova_uuid'"
op|')'
newline|'\n'
name|'if'
name|'nova_uuid'
op|':'
newline|'\n'
indent|'                '
name|'nova_uuids'
op|'.'
name|'append'
op|'('
name|'nova_uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'nova_uuids'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_destroy_orig_vm'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_orig_vm
dedent|''
name|'def'
name|'_destroy_orig_vm'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_mapped_block_devices
dedent|''
name|'def'
name|'_attach_mapped_block_devices'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
comment|'# We are attaching these volumes before start (no hotplugging)'
nl|'\n'
comment|"# because some guests (windows) don't load PV drivers quickly"
nl|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'virt_driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'='
name|'vol'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'mount_device'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'mount_device'
op|','
nl|'\n'
name|'hotplug'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_restore_orig_vm_and_cleanup_orphan'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_restore_orig_vm_and_cleanup_orphan
dedent|''
name|'def'
name|'_restore_orig_vm_and_cleanup_orphan'
op|'('
name|'self'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(sirp): the original vm was suffixed with '-orig'; find it using"
nl|'\n'
comment|'# the old suffix, remove the suffix, then power it back on.'
nl|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(danms): if we're reverting migration in the failure case,"
nl|'\n'
comment|"# make sure we don't have a conflicting vm still running here,"
nl|'\n'
comment|'# as might be the case in a failed migrate-to-same-host situation'
nl|'\n'
name|'new_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'new_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'new_ref'
op|')'
newline|'\n'
comment|"# Remove the '-orig' suffix (which was added in case the"
nl|'\n'
comment|'# resized VM ends up on the source host, common during'
nl|'\n'
comment|'# testing)'
nl|'\n'
dedent|''
name|'name_label'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'set_vm_name_label'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_attach_mapped_block_devices'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'new_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# We crashed before the -orig backup was made'
nl|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'new_ref'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'power_on'
name|'and'
name|'vm_utils'
op|'.'
name|'is_vm_shutdown'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|null_step_decorator
indent|'        '
name|'def'
name|'null_step_decorator'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|function|create_disks_step
dedent|''
name|'def'
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'name_label'
op|')'
op|':'
newline|'\n'
comment|'# TODO(johngarbutt) clean up if this is not run'
nl|'\n'
indent|'            '
name|'vdis'
op|'='
name|'vm_utils'
op|'.'
name|'import_all_migrated_disks'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_disks
name|'def'
name|'undo_create_disks'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'eph_vdis'
op|'='
name|'vdis'
op|'['
string|"'ephemerals'"
op|']'
newline|'\n'
name|'root_vdi'
op|'='
name|'vdis'
op|'['
string|"'root'"
op|']'
newline|'\n'
name|'vdi_refs'
op|'='
op|'['
name|'vdi'
op|'['
string|"'ref'"
op|']'
name|'for'
name|'vdi'
name|'in'
name|'eph_vdis'
op|'.'
name|'values'
op|'('
op|')'
op|']'
newline|'\n'
name|'vdi_refs'
op|'.'
name|'append'
op|'('
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'safe_destroy_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_disks'
op|')'
newline|'\n'
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
DECL|function|completed_callback
dedent|''
name|'def'
name|'completed_callback'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'5'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'null_step_decorator'
op|','
nl|'\n'
name|'create_disks_step'
op|','
name|'first_boot'
op|'='
name|'False'
op|','
name|'injected_files'
op|'='
name|'None'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|','
name|'name_label'
op|'='
name|'None'
op|','
nl|'\n'
name|'rescue'
op|'='
name|'False'
op|','
name|'power_on'
op|'='
name|'power_on'
op|','
name|'resize'
op|'='
name|'resize_instance'
op|','
nl|'\n'
name|'completed_callback'
op|'='
name|'completed_callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_start
dedent|''
name|'def'
name|'_start'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on a VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Starting instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attached volumes that have become non-responsive will prevent a VM'
nl|'\n'
comment|'# from starting, so scan for these before attempting to start'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# In order to make sure this detach is consistent (virt, BDM, cinder),'
nl|'\n'
comment|'# we only detach in the virt-layer if a callback is provided.'
nl|'\n'
name|'if'
name|'bad_volumes_callback'
op|':'
newline|'\n'
indent|'            '
name|'bad_devices'
op|'='
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'find_bad_volumes'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'for'
name|'device_name'
name|'in'
name|'bad_devices'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_volume'
op|'('
nl|'\n'
name|'None'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.start_on'"
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'host_ref'
op|','
nl|'\n'
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Allow higher-layers a chance to detach bad-volumes as well (in order'
nl|'\n'
comment|'# to cleanup BDM entries and detach in Cinder)'
nl|'\n'
name|'if'
name|'bad_volumes_callback'
name|'and'
name|'bad_devices'
op|':'
newline|'\n'
indent|'            '
name|'bad_volumes_callback'
op|'('
name|'bad_devices'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vdis_for_instance
dedent|''
dedent|''
name|'def'
name|'_get_vdis_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'image_id'
op|','
name|'image_type'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create or connect to all virtual disks for this instance."""'
newline|'\n'
nl|'\n'
name|'vdis'
op|'='
name|'self'
op|'.'
name|'_connect_cinder_volumes'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|"# If we didn't get a root VDI from volumes,"
nl|'\n'
comment|'# then use the Glance image as the root device'
nl|'\n'
name|'if'
string|"'root'"
name|'not'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'create_image_vdis'
op|'='
name|'vm_utils'
op|'.'
name|'create_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'name_label'
op|','
name|'image_id'
op|','
name|'image_type'
op|')'
newline|'\n'
name|'vdis'
op|'.'
name|'update'
op|'('
name|'create_image_vdis'
op|')'
newline|'\n'
nl|'\n'
comment|"# Fetch VDI refs now so we don't have to fetch the ref multiple times"
nl|'\n'
dedent|''
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vdi'
op|'['
string|"'ref'"
op|']'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
nl|'\n'
name|'vdi'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
DECL|member|_connect_cinder_volumes
dedent|''
name|'def'
name|'_connect_cinder_volumes'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach all the cinder volumes described in block_device_info."""'
newline|'\n'
name|'vdis'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'block_device_info'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"block device info: %s"'
op|'%'
name|'block_device_info'
newline|'\n'
comment|'# NOTE(mriedem): block_device_info can contain an auth_password'
nl|'\n'
comment|'# so we have to scrub the message before logging it.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'logging'
op|'.'
name|'mask_password'
op|'('
name|'msg'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'root_device_name'
op|'='
name|'block_device_info'
op|'['
string|"'root_device_name'"
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
op|'('
name|'block_device'
op|'.'
name|'strip_prefix'
op|'('
name|'bdm'
op|'['
string|"'mount_device'"
op|']'
op|')'
op|'=='
nl|'\n'
name|'block_device'
op|'.'
name|'strip_prefix'
op|'('
name|'root_device_name'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# If we're a root-device, record that fact so we don't"
nl|'\n'
comment|'# download a root image via Glance'
nl|'\n'
indent|'                    '
name|'type_'
op|'='
string|"'root'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Otherwise, use mount_device as `type_` so that we have'
nl|'\n'
comment|'# easy access to it in _attach_disks to create the VBD'
nl|'\n'
indent|'                    '
name|'type_'
op|'='
name|'bdm'
op|'['
string|"'mount_device'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'conn_info'
op|'='
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'_sr'
op|','
name|'vdi_uuid'
op|'='
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'connect_volume'
op|'('
name|'conn_info'
op|')'
newline|'\n'
name|'if'
name|'vdi_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'vdis'
op|'['
name|'type_'
op|']'
op|'='
name|'dict'
op|'('
name|'uuid'
op|'='
name|'vdi_uuid'
op|','
name|'file'
op|'='
name|'None'
op|','
name|'osvol'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'name_label'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'block_device_info'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Block device information present: %s"'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'block_device_info'
name|'and'
name|'not'
name|'block_device_info'
op|'['
string|"'root_device_name'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'block_device_info'
op|'['
string|"'root_device_name'"
op|']'
op|'='
name|'self'
op|'.'
name|'default_root_dev'
newline|'\n'
nl|'\n'
dedent|''
name|'step'
op|'='
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'step'
newline|'\n'
DECL|function|create_disks_step
name|'def'
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vdis'
op|'='
name|'self'
op|'.'
name|'_get_vdis_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_disks
name|'def'
name|'undo_create_disks'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vdi_refs'
op|'='
op|'['
name|'vdi'
op|'['
string|"'ref'"
op|']'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|'.'
name|'values'
op|'('
op|')'
nl|'\n'
name|'if'
name|'not'
name|'vdi'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'safe_destroy_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_refs'
op|')'
newline|'\n'
name|'vol_vdi_refs'
op|'='
op|'['
name|'vdi'
op|'['
string|"'ref'"
op|']'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|'.'
name|'values'
op|'('
op|')'
nl|'\n'
name|'if'
name|'vdi'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'safe_cleanup_from_vdis'
op|'('
name|'vol_vdi_refs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_disks'
op|')'
newline|'\n'
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'step'
op|','
name|'create_disks_step'
op|','
nl|'\n'
name|'True'
op|','
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'network_info'
op|','
name|'block_device_info'
op|','
name|'name_label'
op|','
name|'rescue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_spawn
dedent|''
name|'def'
name|'_spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'step'
op|','
name|'create_disks_step'
op|','
nl|'\n'
name|'first_boot'
op|','
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'name_label'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|','
name|'power_on'
op|'='
name|'True'
op|','
name|'resize'
op|'='
name|'True'
op|','
nl|'\n'
name|'completed_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name_label'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'name_label'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_ensure_instance_name_unique'
op|'('
name|'name_label'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_enough_free_mem'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|function|attach_disks
name|'def'
name|'attach_disks'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'ipxe_boot'
op|'='
name|'strutils'
op|'.'
name|'bool_from_string'
op|'('
nl|'\n'
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'ipxe_boot'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'ipxe_boot'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ipxe_boot'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'iso'"
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'                    '
name|'vm_utils'
op|'.'
name|'handle_ipxe_iso'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vdis'
op|'['
string|"'iso'"
op|']'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'ipxe_boot is True but no ISO image found'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'resize'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_resize_up_vdis'
op|'('
name|'instance'
op|','
name|'vdis'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_attach_disks'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'network_info'
op|','
name|'rescue'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'injected_files'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'first_boot'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_attach_mapped_block_devices'
op|'('
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|attach_pci_devices
dedent|''
dedent|''
name|'def'
name|'attach_pci_devices'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dev_to_passthrough'
op|'='
string|'""'
newline|'\n'
name|'devices'
op|'='
name|'pci_manager'
op|'.'
name|'get_instance_pci_devs'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'devices'
op|':'
newline|'\n'
indent|'                '
name|'pci_address'
op|'='
name|'d'
op|'['
string|'"address"'
op|']'
newline|'\n'
name|'if'
name|'pci_address'
op|'.'
name|'count'
op|'('
string|'":"'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'pci_address'
op|'='
string|'"0000:"'
op|'+'
name|'pci_address'
newline|'\n'
dedent|''
name|'dev_to_passthrough'
op|'+='
string|'",0/"'
op|'+'
name|'pci_address'
newline|'\n'
nl|'\n'
comment|'# Remove the first comma if string is not empty.'
nl|'\n'
comment|'# Note(guillaume-thouvenin): If dev_to_passthrough is empty, we'
nl|'\n'
comment|"#                            don't need to update other_config."
nl|'\n'
dedent|''
name|'if'
name|'dev_to_passthrough'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'set_other_config_pci'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'dev_to_passthrough'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|determine_disk_image_type_step
name|'def'
name|'determine_disk_image_type_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_utils'
op|'.'
name|'determine_disk_image_type'
op|'('
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_kernel_ramdisk_step
name|'def'
name|'create_kernel_ramdisk_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel_file'
op|','
name|'ramdisk_file'
op|'='
name|'vm_utils'
op|'.'
name|'create_kernel_and_ramdisk'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_kernel_ramdisk
name|'def'
name|'undo_create_kernel_ramdisk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'destroy_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_kernel_ramdisk'
op|')'
newline|'\n'
name|'return'
name|'kernel_file'
op|','
name|'ramdisk_file'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_vm_record_step
name|'def'
name|'create_vm_record_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm_record'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'kernel_file'
op|','
nl|'\n'
name|'ramdisk_file'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_vm
name|'def'
name|'undo_create_vm'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_vm'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|attach_devices_step
name|'def'
name|'attach_devices_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'attach_disks'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
newline|'\n'
name|'attach_pci_devices'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescue'
op|':'
newline|'\n'
comment|'# NOTE(johannes): Attach disks from original VM to rescue VM now,'
nl|'\n'
comment|"# before booting the VM, since we can't hotplug block devices"
nl|'\n'
comment|'# on non-PV guests'
nl|'\n'
indent|'            '
op|'@'
name|'step'
newline|'\n'
DECL|function|attach_orig_disks_step
name|'def'
name|'attach_orig_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vbd_refs'
op|'='
name|'self'
op|'.'
name|'_attach_orig_disks'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_attach_orig_disks
name|'def'
name|'undo_attach_orig_disks'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Destroy the VBDs in preparation to re-attach the VDIs'
nl|'\n'
comment|'# to its original VM.  (does not delete VDI)'
nl|'\n'
indent|'                    '
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'                        '
name|'vm_utils'
op|'.'
name|'destroy_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_attach_orig_disks'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|inject_instance_data_step
name|'def'
name|'inject_instance_data_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_inject_instance_metadata'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_inject_auto_disk_config'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
comment|'# NOTE: We add the hostname here so windows PV tools'
nl|'\n'
comment|'# can pick it up during booting'
nl|'\n'
name|'if'
name|'first_boot'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_inject_hostname'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'rescue'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_file_inject_vm_settings'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|setup_network_step
name|'def'
name|'setup_network_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_vifs'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|boot_instance_step
name|'def'
name|'boot_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_for_instance_to_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|configure_booted_instance_step
name|'def'
name|'configure_booted_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'first_boot'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_configure_new_instance_with_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_remove_hostname'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|apply_security_group_filters_step
name|'def'
name|'apply_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'='
name|'utils'
op|'.'
name|'UndoManager'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(sirp): The create_disks() step will potentially take a'
nl|'\n'
comment|'# *very* long time to complete since it has to fetch the image'
nl|'\n'
comment|'# over the network and images can be several gigs in size. To'
nl|'\n'
comment|'# avoid progress remaining at 0% for too long, make sure the'
nl|'\n'
comment|'# first step is something that completes rather quickly.'
nl|'\n'
indent|'            '
name|'disk_image_type'
op|'='
name|'determine_disk_image_type_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'vdis'
op|'='
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'name_label'
op|')'
newline|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|'='
name|'create_kernel_ramdisk_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'create_vm_record_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
name|'attach_devices_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
newline|'\n'
nl|'\n'
name|'inject_instance_data_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|')'
newline|'\n'
name|'setup_network_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'attach_orig_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'boot_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'configure_booted_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'apply_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'completed_callback'
op|':'
newline|'\n'
indent|'                '
name|'completed_callback'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to spawn, rolling back"'
op|')'
newline|'\n'
name|'undo_mgr'
op|'.'
name|'rollback_and_reraise'
op|'('
name|'msg'
op|'='
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_orig_disks
dedent|''
dedent|''
name|'def'
name|'_attach_orig_disks'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'orig_vdi_refs'
op|'='
name|'self'
op|'.'
name|'_find_vdi_refs'
op|'('
name|'orig_vm_ref'
op|','
nl|'\n'
name|'exclude_volumes'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach original root disk'
nl|'\n'
name|'root_vdi_ref'
op|'='
name|'orig_vdi_refs'
op|'.'
name|'get'
op|'('
name|'DEVICE_ROOT'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'root_vdi_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"Unable to find root VBD/VDI for VM"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vbd_ref'
op|'='
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'root_vdi_ref'
op|','
nl|'\n'
name|'DEVICE_RESCUE'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
name|'vbd_refs'
op|'='
op|'['
name|'vbd_ref'
op|']'
newline|'\n'
nl|'\n'
comment|'# Attach original swap disk'
nl|'\n'
name|'swap_vdi_ref'
op|'='
name|'orig_vdi_refs'
op|'.'
name|'get'
op|'('
name|'DEVICE_SWAP'
op|')'
newline|'\n'
name|'if'
name|'swap_vdi_ref'
op|':'
newline|'\n'
indent|'            '
name|'vbd_ref'
op|'='
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'swap_vdi_ref'
op|','
nl|'\n'
name|'DEVICE_SWAP'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
name|'vbd_refs'
op|'.'
name|'append'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach original ephemeral disks'
nl|'\n'
dedent|''
name|'for'
name|'userdevice'
op|','
name|'vdi_ref'
name|'in'
name|'orig_vdi_refs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'userdevice'
op|'>='
name|'DEVICE_EPHEMERAL'
op|':'
newline|'\n'
indent|'                '
name|'vbd_ref'
op|'='
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
name|'vbd_refs'
op|'.'
name|'append'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'vbd_refs'
newline|'\n'
nl|'\n'
DECL|member|_file_inject_vm_settings
dedent|''
name|'def'
name|'_file_inject_vm_settings'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'flat_injected'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'preconfigure_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vdis'
op|'['
string|"'root'"
op|']'
op|'['
string|"'ref'"
op|']'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_instance_name_unique
dedent|''
dedent|''
name|'def'
name|'_ensure_instance_name_unique'
op|'('
name|'self'
op|','
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_enough_free_mem
dedent|''
dedent|''
name|'def'
name|'_ensure_enough_free_mem'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'vm_utils'
op|'.'
name|'is_enough_free_mem'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InsufficientFreeMemory'
op|'('
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vm_record
dedent|''
dedent|''
name|'def'
name|'_create_vm_record'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create the VM record in Xen, making sure that we do not create\n        a duplicate name-label.  Also do a rough sanity check on memory\n        to try to short-circuit a potential failure later.  (The memory\n        check only accounts for running VMs, so it can miss other builds\n        that are in progress.)\n        """'
newline|'\n'
name|'mode'
op|'='
name|'vm_utils'
op|'.'
name|'determine_vm_mode'
op|'('
name|'instance'
op|','
name|'disk_image_type'
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'vm_mode'
op|'!='
name|'mode'
op|':'
newline|'\n'
comment|'# Update database with normalized (or determined) value'
nl|'\n'
indent|'            '
name|'instance'
op|'.'
name|'vm_mode'
op|'='
name|'mode'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'image_properties'
op|'='
name|'image_meta'
op|'.'
name|'get'
op|'('
string|'"properties"'
op|')'
newline|'\n'
name|'device_id'
op|'='
name|'vm_utils'
op|'.'
name|'get_vm_device_id'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'image_properties'
op|')'
newline|'\n'
name|'use_pv_kernel'
op|'='
op|'('
name|'mode'
op|'=='
name|'vm_mode'
op|'.'
name|'XEN'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Using PV kernel: %s"'
op|','
name|'use_pv_kernel'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'create_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|','
nl|'\n'
name|'use_pv_kernel'
op|','
name|'device_id'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_attach_disks
dedent|''
name|'def'
name|'_attach_disks'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'network_info'
op|','
name|'rescue'
op|'='
name|'False'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|','
name|'files'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (required) root disk'
nl|'\n'
name|'if'
name|'disk_image_type'
op|'=='
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'DISK_ISO'
op|':'
newline|'\n'
comment|'# DISK_ISO needs two VBDs: the ISO disk and a blank RW disk'
nl|'\n'
indent|'            '
name|'root_disk_size'
op|'='
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'if'
name|'root_disk_size'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'generate_iso_blank_root_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'DEVICE_ROOT'
op|','
name|'name_label'
op|','
name|'root_disk_size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cd_vdi'
op|'='
name|'vdis'
op|'.'
name|'pop'
op|'('
string|"'iso'"
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'attach_cd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'cd_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'DEVICE_CD'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'root_vdi'
op|'='
name|'vdis'
op|'['
string|"'root'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'auto_disk_config'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Auto configuring disk, attempting to "'
nl|'\n'
string|'"resize root disk..."'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'try_auto_configure_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'DEVICE_ROOT'
op|','
name|'bootable'
op|'='
name|'True'
op|','
nl|'\n'
name|'osvol'
op|'='
name|'root_vdi'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (optional) additional block-devices'
nl|'\n'
dedent|''
name|'for'
name|'type_'
op|','
name|'vdi_info'
name|'in'
name|'vdis'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Additional block-devices for boot use their device-name as the'
nl|'\n'
comment|'# type.'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'type_'
op|'.'
name|'startswith'
op|'('
string|"'/dev'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Convert device name to userdevice number, e.g. /dev/xvdb -> 1'
nl|'\n'
dedent|''
name|'userdevice'
op|'='
name|'ord'
op|'('
name|'block_device'
op|'.'
name|'strip_prefix'
op|'('
name|'type_'
op|')'
op|')'
op|'-'
name|'ord'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vdi_info'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|','
nl|'\n'
name|'osvol'
op|'='
name|'vdi_info'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# For rescue, swap and ephemeral disks get attached in'
nl|'\n'
comment|'# _attach_orig_disks'
nl|'\n'
nl|'\n'
comment|'# Attach (optional) swap disk'
nl|'\n'
dedent|''
name|'swap_mb'
op|'='
name|'flavor'
op|'['
string|"'swap'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'rescue'
name|'and'
name|'swap_mb'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'generate_swap'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'DEVICE_SWAP'
op|','
name|'name_label'
op|','
name|'swap_mb'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemeral_gb'
op|'='
name|'flavor'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'rescue'
name|'and'
name|'ephemeral_gb'
op|':'
newline|'\n'
indent|'            '
name|'ephemeral_vdis'
op|'='
name|'vdis'
op|'.'
name|'get'
op|'('
string|"'ephemerals'"
op|')'
newline|'\n'
name|'if'
name|'ephemeral_vdis'
op|':'
newline|'\n'
comment|'# attach existing (migrated) ephemeral disks'
nl|'\n'
indent|'                '
name|'for'
name|'userdevice'
op|','
name|'ephemeral_vdi'
name|'in'
name|'ephemeral_vdis'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'ephemeral_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# create specified ephemeral disks'
nl|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'generate_ephemeral'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'DEVICE_EPHEMERAL'
op|','
name|'name_label'
op|','
nl|'\n'
name|'ephemeral_gb'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (optional) configdrive v2 disk'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'generate_configdrive'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'DEVICE_CONFIGDRIVE'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'admin_password'
op|','
nl|'\n'
name|'files'
op|'='
name|'files'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_instance_to_start
dedent|''
dedent|''
name|'def'
name|'_wait_for_instance_to_start'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Waiting for instance state to become running'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'expiration'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
name|'CONF'
op|'.'
name|'xenserver'
op|'.'
name|'running_timeout'
newline|'\n'
name|'while'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'<'
name|'expiration'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'vm_utils'
op|'.'
name|'get_power_state'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_configure_new_instance_with_agent
dedent|''
dedent|''
name|'def'
name|'_configure_new_instance_with_agent'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'agent_enabled'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Skip agent setup, not enabled."'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'version'
op|'='
name|'agent'
op|'.'
name|'get_version'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Skip agent setup, unable to contact agent."'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Detected agent version: %s'"
op|','
name|'version'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johngarbutt) the agent object allows all of'
nl|'\n'
comment|'# the following steps to silently fail'
nl|'\n'
name|'agent'
op|'.'
name|'inject_ssh_key'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'injected_files'
op|':'
newline|'\n'
indent|'            '
name|'agent'
op|'.'
name|'inject_files'
op|'('
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'admin_password'
op|':'
newline|'\n'
indent|'            '
name|'agent'
op|'.'
name|'set_admin_password'
op|'('
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'agent'
op|'.'
name|'resetnetwork'
op|'('
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'update_if_needed'
op|'('
name|'version'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prepare_instance_filter
dedent|''
name|'def'
name|'_prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(salvatore-orlando): setup_basic_filtering might be'
nl|'\n'
comment|'# empty or not implemented at all, as basic filter could'
nl|'\n'
comment|'# be implemented with VIF rules created by xapi plugin'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_opaque_ref
dedent|''
name|'def'
name|'_get_vm_opaque_ref'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'check_rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get xapi OpaqueRef from a db record.\n        :param check_rescue: if True will return the \'name\'-rescue vm if it\n                             exists, instead of just \'name\'\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'check_rescue'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_acquire_bootlock
dedent|''
name|'def'
name|'_acquire_bootlock'
op|'('
name|'self'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prevent an instance from booting."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|'"VM.set_blocked_operations"'
op|','
nl|'\n'
name|'vm'
op|','
nl|'\n'
op|'{'
string|'"start"'
op|':'
string|'""'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_release_bootlock
dedent|''
name|'def'
name|'_release_bootlock'
op|'('
name|'self'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow an instance to boot."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|'"VM.remove_from_blocked_operations"'
op|','
nl|'\n'
name|'vm'
op|','
nl|'\n'
string|'"start"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        :param context: request context\n        :param instance: instance to be snapshotted\n        :param image_id: id of image to upload to\n\n        Steps involved in a XenServer snapshot:\n\n        1. XAPI-Snapshot: Snapshotting the instance using XenAPI. This\n           creates: Snapshot (Template) VM, Snapshot VBD, Snapshot VDI,\n           Snapshot VHD\n\n        2. Wait-for-coalesce: The Snapshot VDI and Instance VDI both point to\n           a \'base-copy\' VDI.  The base_copy is immutable and may be chained\n           with other base_copies.  If chained, the base_copies\n           coalesce together, so, we must wait for this coalescing to occur to\n           get a stable representation of the data on disk.\n\n        3. Push-to-data-store: Once coalesced, we call\n           \'image_upload_handler\' to upload the images.\n\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'label'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'vm_utils'
op|'.'
name|'snapshot_attached_here'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'label'
op|','
nl|'\n'
name|'post_snapshot_callback'
op|'='
name|'update_task_state'
op|')'
name|'as'
name|'vdi_uuids'
op|':'
newline|'\n'
indent|'            '
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|','
nl|'\n'
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_upload_handler'
op|'.'
name|'upload_image'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vdi_uuids'
op|','
nl|'\n'
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Finished snapshot and upload for VM"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_interrupted_snapshot_cleanup
dedent|''
name|'def'
name|'post_interrupted_snapshot_cleanup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleans up any resources left after a failed snapshot."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'remove_old_snapshots'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_orig_vm_name_label
dedent|''
name|'def'
name|'_get_orig_vm_name_label'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'['
string|"'name'"
op|']'
op|'+'
string|"'-orig'"
newline|'\n'
nl|'\n'
DECL|member|_update_instance_progress
dedent|''
name|'def'
name|'_update_instance_progress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'step'
op|','
name|'total_steps'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update instance progress percent to reflect current step number\n        """'
newline|'\n'
comment|"# FIXME(sirp): for now we're taking a KISS approach to instance"
nl|'\n'
comment|'# progress:'
nl|'\n'
comment|'# Divide the action\'s workflow into discrete steps and "bump" the'
nl|'\n'
comment|"# instance's progress field as each step is completed."
nl|'\n'
comment|'#'
nl|'\n'
comment|'# For a first cut this should be fine, however, for large VM images,'
nl|'\n'
comment|'# the get_vdis_for_instance step begins to dominate the equation. A'
nl|'\n'
comment|'# better approximation would use the percentage of the VM image that'
nl|'\n'
comment|'# has been streamed to the destination host.'
nl|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step'
op|')'
op|'/'
name|'total_steps'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Updating progress to %d"'
op|','
name|'progress'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'progress'
op|'='
name|'progress'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resize_ensure_vm_is_shutdown
dedent|''
name|'def'
name|'_resize_ensure_vm_is_shutdown'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vm_utils'
op|'.'
name|'is_vm_shutdown'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM was already shutdown."'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'vm_utils'
op|'.'
name|'clean_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Clean shutdown did not complete successfully, "'
nl|'\n'
string|'"trying hard shutdown."'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ResizeError'
op|'('
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"Unable to terminate instance."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_disk_resizing_down
dedent|''
dedent|''
dedent|''
name|'def'
name|'_migrate_disk_resizing_down'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|','
name|'vm_ref'
op|','
name|'sr_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step'
op|'='
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|','
nl|'\n'
name|'total_offset'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'step'
newline|'\n'
DECL|function|fake_step_to_match_resizing_up
name|'def'
name|'fake_step_to_match_resizing_up'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|rename_and_power_off_vm
name|'def'
name|'rename_and_power_off_vm'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_resize_ensure_vm_is_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_apply_orig_vm_name_label'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|function|restore_orig_vm
name|'def'
name|'restore_orig_vm'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Do not need to restore block devices, not yet been removed'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_restore_orig_vm_and_cleanup_orphan'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'restore_orig_vm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_copy_vdi_and_resize
name|'def'
name|'create_copy_vdi_and_resize'
op|'('
name|'undo_mgr'
op|','
name|'old_vdi_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_vdi_ref'
op|','
name|'new_vdi_uuid'
op|'='
name|'vm_utils'
op|'.'
name|'resize_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'old_vdi_ref'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup_vdi_copy
name|'def'
name|'cleanup_vdi_copy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'new_vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'cleanup_vdi_copy'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'new_vdi_ref'
op|','
name|'new_vdi_uuid'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|transfer_vhd_to_dest
name|'def'
name|'transfer_vhd_to_dest'
op|'('
name|'new_vdi_ref'
op|','
name|'new_vdi_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'migrate_vhd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'new_vdi_uuid'
op|','
nl|'\n'
name|'dest'
op|','
name|'sr_path'
op|','
number|'0'
op|')'
newline|'\n'
comment|"# Clean up VDI now that it's been copied"
nl|'\n'
name|'vm_utils'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'new_vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'='
name|'utils'
op|'.'
name|'UndoManager'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fake_step_to_match_resizing_up'
op|'('
op|')'
newline|'\n'
name|'rename_and_power_off_vm'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
name|'old_vdi_ref'
op|','
name|'_ignore'
op|'='
name|'vm_utils'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'new_vdi_ref'
op|','
name|'new_vdi_uuid'
op|'='
name|'create_copy_vdi_and_resize'
op|'('
nl|'\n'
name|'undo_mgr'
op|','
name|'old_vdi_ref'
op|')'
newline|'\n'
name|'transfer_vhd_to_dest'
op|'('
name|'new_vdi_ref'
op|','
name|'new_vdi_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"_migrate_disk_resizing_down failed. "'
nl|'\n'
string|'"Restoring orig vm due_to: %s."'
op|')'
op|','
name|'error'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'undo_mgr'
op|'.'
name|'_rollback'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceFaultRollback'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_disk_resizing_up
dedent|''
dedent|''
name|'def'
name|'_migrate_disk_resizing_up'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'sr_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step'
op|'='
name|'make_step_decorator'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|','
nl|'\n'
name|'total_offset'
op|'='
number|'1'
op|')'
newline|'\n'
string|'"""\n        NOTE(johngarbutt) Understanding how resize up works.\n\n        For resize up, we attempt to minimize the amount of downtime\n        for users by copying snapshots of their disks, while their\n        VM is still running.\n\n        It is worth noting, that migrating the snapshot, means migrating\n        the whole VHD chain up to, but not including, the leaf VHD the VM\n        is still writing to.\n\n        Once the snapshots have been migrated, we power down the VM\n        and migrate all the disk changes since the snapshots were taken.\n\n        In addition, the snapshots are taken at the latest possible point,\n        to help minimize the time it takes to migrate the disk changes\n        after the VM has been turned off.\n\n        Before starting to migrate any of the disks, we rename the VM,\n        to <current_vm_name>-orig, in case we attempt to migrate the VM\n        back onto this host, and so once we have completed the migration\n        of the disk, confirm/rollback migrate can work in the usual way.\n\n        If there is a failure at any point, we need to rollback to the\n        position we were in before starting to migrate. In particular,\n        we need to delete and snapshot VDIs that may have been created,\n        and restore the VM back to its original name.\n        """'
newline|'\n'
nl|'\n'
op|'@'
name|'step'
newline|'\n'
DECL|function|fake_step_to_show_snapshot_complete
name|'def'
name|'fake_step_to_show_snapshot_complete'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|transfer_immutable_vhds
name|'def'
name|'transfer_immutable_vhds'
op|'('
name|'root_vdi_uuids'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'active_root_vdi_uuid'
op|'='
name|'root_vdi_uuids'
op|'['
number|'0'
op|']'
newline|'\n'
name|'immutable_root_vdi_uuids'
op|'='
name|'root_vdi_uuids'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'for'
name|'vhd_num'
op|','
name|'vdi_uuid'
name|'in'
name|'enumerate'
op|'('
name|'immutable_root_vdi_uuids'
op|','
nl|'\n'
name|'start'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'migrate_vhd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vdi_uuid'
op|','
name|'dest'
op|','
nl|'\n'
name|'sr_path'
op|','
name|'vhd_num'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Migrated root base vhds"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'active_root_vdi_uuid'
newline|'\n'
nl|'\n'
DECL|function|_process_ephemeral_chain_recursive
dedent|''
name|'def'
name|'_process_ephemeral_chain_recursive'
op|'('
name|'ephemeral_chains'
op|','
nl|'\n'
name|'active_vdi_uuids'
op|')'
op|':'
newline|'\n'
comment|'# This method is called several times, recursively.'
nl|'\n'
comment|'# The first phase snapshots the ephemeral disks, and'
nl|'\n'
comment|'# migrates the read only VHD files.'
nl|'\n'
comment|'# The final call into this method calls'
nl|'\n'
comment|'# power_down_and_transfer_leaf_vhds'
nl|'\n'
comment|'# to turn off the VM and copy the rest of the VHDs.'
nl|'\n'
indent|'            '
name|'number_of_chains'
op|'='
name|'len'
op|'('
name|'ephemeral_chains'
op|')'
newline|'\n'
name|'if'
name|'number_of_chains'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# If we get here, we have snapshotted and migrated'
nl|'\n'
comment|'# all the ephemeral disks, so its time to power down'
nl|'\n'
comment|'# and complete the migration of the diffs since the snapshot'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Migrated all base vhds."'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'power_down_and_transfer_leaf_vhds'
op|'('
nl|'\n'
name|'active_root_vdi_uuid'
op|','
nl|'\n'
name|'active_vdi_uuids'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'remaining_chains'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'number_of_chains'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'remaining_chains'
op|'='
name|'ephemeral_chains'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemeral_disk_index'
op|'='
name|'len'
op|'('
name|'active_vdi_uuids'
op|')'
newline|'\n'
name|'userdevice'
op|'='
name|'int'
op|'('
name|'DEVICE_EPHEMERAL'
op|')'
op|'+'
name|'ephemeral_disk_index'
newline|'\n'
nl|'\n'
comment|'# Here we take a snapshot of the ephemeral disk,'
nl|'\n'
comment|'# and migrate all VHDs in the chain that are not being written to'
nl|'\n'
comment|'# Once that is completed, we call back into this method to either:'
nl|'\n'
comment|'# - migrate any remaining ephemeral disks'
nl|'\n'
comment|'# - or, if all disks are migrated, we power down and complete'
nl|'\n'
comment|'#   the migration but copying the diffs since all the snapshots'
nl|'\n'
comment|'#   were taken'
nl|'\n'
name|'with'
name|'vm_utils'
op|'.'
name|'snapshot_attached_here'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'label'
op|','
name|'str'
op|'('
name|'userdevice'
op|')'
op|')'
name|'as'
name|'chain_vdi_uuids'
op|':'
newline|'\n'
nl|'\n'
comment|'# remember active vdi, we will migrate these later'
nl|'\n'
indent|'                '
name|'active_vdi_uuids'
op|'.'
name|'append'
op|'('
name|'chain_vdi_uuids'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# migrate inactive vhds'
nl|'\n'
name|'inactive_vdi_uuids'
op|'='
name|'chain_vdi_uuids'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'ephemeral_disk_number'
op|'='
name|'ephemeral_disk_index'
op|'+'
number|'1'
newline|'\n'
name|'for'
name|'seq_num'
op|','
name|'vdi_uuid'
name|'in'
name|'enumerate'
op|'('
name|'inactive_vdi_uuids'
op|','
nl|'\n'
name|'start'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'vm_utils'
op|'.'
name|'migrate_vhd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vdi_uuid'
op|','
nl|'\n'
name|'dest'
op|','
name|'sr_path'
op|','
name|'seq_num'
op|','
nl|'\n'
name|'ephemeral_disk_number'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Read-only migrated for disk: %s"'
op|','
name|'userdevice'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# This is recursive to simplify the taking and cleaning up'
nl|'\n'
comment|'# of all the ephemeral disk snapshots'
nl|'\n'
name|'return'
name|'_process_ephemeral_chain_recursive'
op|'('
name|'remaining_chains'
op|','
nl|'\n'
name|'active_vdi_uuids'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|transfer_ephemeral_disks_then_all_leaf_vdis
name|'def'
name|'transfer_ephemeral_disks_then_all_leaf_vdis'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ephemeral_chains'
op|'='
name|'vm_utils'
op|'.'
name|'get_all_vdi_uuids_for_vm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'min_userdevice'
op|'='
name|'int'
op|'('
name|'DEVICE_EPHEMERAL'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ephemeral_chains'
op|':'
newline|'\n'
indent|'                '
name|'ephemeral_chains'
op|'='
name|'list'
op|'('
name|'ephemeral_chains'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ephemeral_chains'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'_process_ephemeral_chain_recursive'
op|'('
name|'ephemeral_chains'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|power_down_and_transfer_leaf_vhds
name|'def'
name|'power_down_and_transfer_leaf_vhds'
op|'('
name|'root_vdi_uuid'
op|','
nl|'\n'
name|'ephemeral_vdi_uuids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_resize_ensure_vm_is_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'migrate_vhd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'root_vdi_uuid'
op|','
nl|'\n'
name|'dest'
op|','
name|'sr_path'
op|','
number|'0'
op|')'
newline|'\n'
name|'if'
name|'ephemeral_vdi_uuids'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'ephemeral_disk_number'
op|','
name|'ephemeral_vdi_uuid'
name|'in'
name|'enumerate'
op|'('
nl|'\n'
name|'ephemeral_vdi_uuids'
op|','
name|'start'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'vm_utils'
op|'.'
name|'migrate_vhd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'ephemeral_vdi_uuid'
op|','
name|'dest'
op|','
nl|'\n'
name|'sr_path'
op|','
number|'0'
op|','
name|'ephemeral_disk_number'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_apply_orig_vm_name_label'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'label'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'with'
name|'vm_utils'
op|'.'
name|'snapshot_attached_here'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
name|'as'
name|'root_vdi_uuids'
op|':'
newline|'\n'
comment|'# NOTE(johngarbutt) snapshot attached here will delete'
nl|'\n'
comment|'# the snapshot if an error occurs'
nl|'\n'
indent|'                '
name|'fake_step_to_show_snapshot_complete'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# transfer all the non-active VHDs in the root disk chain'
nl|'\n'
name|'active_root_vdi_uuid'
op|'='
name|'transfer_immutable_vhds'
op|'('
name|'root_vdi_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# snapshot and transfer all ephemeral disks'
nl|'\n'
comment|'# then power down and transfer any diffs since'
nl|'\n'
comment|'# the snapshots were taken'
nl|'\n'
name|'transfer_ephemeral_disks_then_all_leaf_vdis'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"_migrate_disk_resizing_up failed. "'
nl|'\n'
string|'"Restoring orig vm due_to: %s."'
op|')'
op|','
name|'error'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_restore_orig_vm_and_cleanup_orphan'
op|'('
name|'instance'
op|')'
newline|'\n'
comment|'# TODO(johngarbutt) should also cleanup VHDs at destination'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'rollback_error'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"_migrate_disk_resizing_up failed to "'
nl|'\n'
string|'"rollback: %s"'
op|')'
op|','
name|'rollback_error'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InstanceFaultRollback'
op|'('
name|'error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_apply_orig_vm_name_label
dedent|''
dedent|''
name|'def'
name|'_apply_orig_vm_name_label'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(sirp): in case we're resizing to the same host (for dev"
nl|'\n'
comment|'# purposes), apply a suffix to name-label so the two VM records'
nl|'\n'
comment|"# extant until a confirm_resize don't collide."
nl|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'set_vm_name_label'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_not_resize_down_ephemeral
dedent|''
name|'def'
name|'_ensure_not_resize_down_ephemeral'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_gb'
op|'='
name|'instance'
op|'['
string|'"ephemeral_gb"'
op|']'
newline|'\n'
name|'new_gb'
op|'='
name|'flavor'
op|'['
string|'"ephemeral_gb"'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'old_gb'
op|'>'
name|'new_gb'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Can\'t resize down ephemeral disks."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ResizeError'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copies a VHD from one host machine to another, possibly\n        resizing filesystem before hand.\n\n        :param instance: the instance that owns the VHD in question.\n        :param dest: the destination host machine.\n        :param flavor: flavor to resize to\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_not_resize_down_ephemeral'
op|'('
name|'instance'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
comment|'# 0. Zero out the progress to begin'
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'0'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
name|'old_gb'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'new_gb'
op|'='
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'resize_down'
op|'='
name|'old_gb'
op|'>'
name|'new_gb'
newline|'\n'
nl|'\n'
name|'if'
name|'new_gb'
op|'=='
number|'0'
name|'and'
name|'old_gb'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Can\'t resize a disk to 0 GB."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ResizeError'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'sr_path'
op|'='
name|'vm_utils'
op|'.'
name|'get_sr_path'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resize_down'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_disk_resizing_down'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'flavor'
op|','
name|'vm_ref'
op|','
name|'sr_path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_disk_resizing_up'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'vm_ref'
op|','
name|'sr_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_detach_block_devices_from_orig_vm'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): disk_info isn't used by the xenapi driver, instead it"
nl|'\n'
comment|'# uses a staging-area (/images/instance<uuid>) and sequence-numbered'
nl|'\n'
comment|'# VHDs to figure out how to reconstruct the VDI chain after syncing'
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'return'
name|'disk_info'
newline|'\n'
nl|'\n'
DECL|member|_detach_block_devices_from_orig_vm
dedent|''
name|'def'
name|'_detach_block_devices_from_orig_vm'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'virt_driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'='
name|'vol'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'mount_device'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_volume'
op|'('
name|'connection_info'
op|','
name|'name_label'
op|','
nl|'\n'
name|'mount_device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resize_up_vdis
dedent|''
dedent|''
name|'def'
name|'_resize_up_vdis'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vdis'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_root_gb'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'root_vdi'
op|'='
name|'vdis'
op|'.'
name|'get'
op|'('
string|"'root'"
op|')'
newline|'\n'
name|'if'
name|'new_root_gb'
name|'and'
name|'root_vdi'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'root_vdi'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|','
name|'False'
op|')'
op|':'
comment|"# Don't resize root volumes."
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Not resizing the root volume."'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'vdi_ref'
op|'='
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'update_vdi_virtual_size'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vdi_ref'
op|','
name|'new_root_gb'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ephemeral_vdis'
op|'='
name|'vdis'
op|'.'
name|'get'
op|'('
string|"'ephemerals'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ephemeral_vdis'
op|':'
newline|'\n'
comment|'# NOTE(johngarbutt) no existing (migrated) ephemeral disks'
nl|'\n'
comment|'# to resize, so nothing more to do here.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'total_ephemeral_gb'
op|'='
name|'instance'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
name|'if'
name|'total_ephemeral_gb'
op|':'
newline|'\n'
indent|'            '
name|'sizes'
op|'='
name|'vm_utils'
op|'.'
name|'get_ephemeral_disk_sizes'
op|'('
name|'total_ephemeral_gb'
op|')'
newline|'\n'
comment|'# resize existing (migrated) ephemeral disks,'
nl|'\n'
comment|'# and add any extra disks if required due to a'
nl|'\n'
comment|'# larger total_ephemeral_gb (resize down is not supported).'
nl|'\n'
name|'for'
name|'userdevice'
op|','
name|'new_size'
name|'in'
name|'enumerate'
op|'('
name|'sizes'
op|','
nl|'\n'
name|'start'
op|'='
name|'int'
op|'('
name|'DEVICE_EPHEMERAL'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vdi'
op|'='
name|'ephemeral_vdis'
op|'.'
name|'get'
op|'('
name|'str'
op|'('
name|'userdevice'
op|')'
op|')'
newline|'\n'
name|'if'
name|'vdi'
op|':'
newline|'\n'
indent|'                    '
name|'vdi_ref'
op|'='
name|'vdi'
op|'['
string|"'ref'"
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'update_vdi_virtual_size'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vdi_ref'
op|','
name|'new_size'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Generating new ephemeral vdi %d during resize"'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|"# NOTE(johngarbutt) we generate but don't attach"
nl|'\n'
comment|'# the new disk to make up any additional ephemeral space'
nl|'\n'
name|'vdi_ref'
op|'='
name|'vm_utils'
op|'.'
name|'generate_single_ephemeral'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'userdevice'
op|','
name|'new_size'
op|')'
newline|'\n'
name|'vdis'
op|'['
name|'str'
op|'('
name|'userdevice'
op|')'
op|']'
op|'='
op|'{'
string|"'ref'"
op|':'
name|'vdi_ref'
op|','
string|"'generated'"
op|':'
name|'True'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'reboot_type'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot VM instance."""'
newline|'\n'
comment|'# Note (salvatore-orlando): security group rules are not re-enforced'
nl|'\n'
comment|'# upon reboot, since this action on the XenAPI drivers does not'
nl|'\n'
comment|'# remove existing filters'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|','
name|'check_rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'reboot_type'
op|'=='
string|'"HARD"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.hard_reboot'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.clean_reboot'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'details'
op|'='
name|'exc'
op|'.'
name|'details'
newline|'\n'
name|'if'
op|'('
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'VM_BAD_POWER_STATE'"
name|'and'
nl|'\n'
name|'details'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'halted'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Starting halted instance found during reboot"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
nl|'\n'
name|'bad_volumes_callback'
op|'='
name|'bad_volumes_callback'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'SR_BACKEND_FAILURE_46'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Reboot failed due to bad volumes, detaching bad"'
nl|'\n'
string|'" volumes and starting halted instance"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
nl|'\n'
name|'bad_volumes_callback'
op|'='
name|'bad_volumes_callback'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|set_admin_password
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'new_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password on the VM instance."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'set_admin_password'
op|'('
name|'new_pass'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_file
dedent|''
dedent|''
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the VM instance."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'inject_file'
op|'('
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_sanitize_xenstore_key
name|'def'
name|'_sanitize_xenstore_key'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Xenstore only allows the following characters as keys:\n\n        ABCDEFGHIJKLMNOPQRSTUVWXYZ\n        abcdefghijklmnopqrstuvwxyz\n        0123456789-/_@\n\n        So convert the others to _\n\n        Also convert / to _, because that is somewhat like a path\n        separator.\n        """'
newline|'\n'
name|'allowed_chars'
op|'='
op|'('
string|'"ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
nl|'\n'
string|'"abcdefghijklmnopqrstuvwxyz"'
nl|'\n'
string|'"0123456789-_@"'
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'x'
name|'in'
name|'allowed_chars'
name|'and'
name|'x'
name|'or'
string|"'_'"
name|'for'
name|'x'
name|'in'
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_inject_instance_metadata
dedent|''
name|'def'
name|'_inject_instance_metadata'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject instance metadata into xenstore."""'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'xenstore-'"
op|'+'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
DECL|function|store_meta
name|'def'
name|'store_meta'
op|'('
name|'topdir'
op|','
name|'data_dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'data_dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'self'
op|'.'
name|'_sanitize_xenstore_key'
op|'('
name|'key'
op|')'
newline|'\n'
name|'value'
op|'='
name|'value'
name|'or'
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
string|"'%s/%s'"
op|'%'
op|'('
name|'topdir'
op|','
name|'key'
op|')'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Store user metadata'
nl|'\n'
dedent|''
dedent|''
name|'store_meta'
op|'('
string|"'vm-data/user-metadata'"
op|','
name|'utils'
op|'.'
name|'instance_meta'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_inject_auto_disk_config
dedent|''
name|'def'
name|'_inject_auto_disk_config'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject instance\'s auto_disk_config attribute into xenstore."""'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'xenstore-'"
op|'+'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
DECL|function|store_auto_disk_config
name|'def'
name|'store_auto_disk_config'
op|'('
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'value'
name|'and'
name|'True'
name|'or'
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'key'
op|','
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'store_auto_disk_config'
op|'('
string|"'vm-data/auto-disk-config'"
op|','
nl|'\n'
name|'instance'
op|'['
string|"'auto_disk_config'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|change_instance_metadata
dedent|''
name|'def'
name|'change_instance_metadata'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'diff'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply changes to instance metadata to xenstore."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|'# NOTE(johngarbutt) race conditions mean we can still get here'
nl|'\n'
comment|'# during operations where the VM is not present, like resize.'
nl|'\n'
comment|'# Skip the update when not possible, as the updated metadata will'
nl|'\n'
comment|'# get added when the VM is being booted up at the end of the'
nl|'\n'
comment|'# resize or rebuild.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Unable to update metadata, VM not found."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|function|process_change
dedent|''
name|'def'
name|'process_change'
op|'('
name|'location'
op|','
name|'change'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'change'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_remove_from_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'location'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_delete_from_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# If the VM is not running then no need to update'
nl|'\n'
comment|'# the live xenstore - the param xenstore will be'
nl|'\n'
comment|'# used next time the VM is booted'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'change'
op|'['
number|'0'
op|']'
op|'=='
string|"'+'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'location'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'change'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_write_to_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
name|'change'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# If the VM is not running then no need to update'
nl|'\n'
comment|'# the live xenstore'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'xenstore-'"
op|'+'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
DECL|function|update_meta
name|'def'
name|'update_meta'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'change'
name|'in'
name|'diff'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'self'
op|'.'
name|'_sanitize_xenstore_key'
op|'('
name|'key'
op|')'
newline|'\n'
name|'location'
op|'='
string|"'vm-data/user-metadata/%s'"
op|'%'
name|'key'
newline|'\n'
name|'process_change'
op|'('
name|'location'
op|','
name|'change'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'update_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_vdi_refs
dedent|''
name|'def'
name|'_find_vdi_refs'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'exclude_volumes'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find and return the root and ephemeral vdi refs for a VM."""'
newline|'\n'
name|'if'
name|'not'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'vdi_refs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vbd_ref'
name|'in'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vbd'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_record"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'exclude_volumes'
name|'or'
string|"'osvol'"
name|'not'
name|'in'
name|'vbd'
op|'['
string|"'other_config'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'vdi_refs'
op|'['
name|'vbd'
op|'['
string|"'userdevice'"
op|']'
op|']'
op|'='
name|'vbd'
op|'['
string|"'VDI'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'vdi_refs'
newline|'\n'
nl|'\n'
DECL|member|_destroy_vdis
dedent|''
name|'def'
name|'_destroy_vdis'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys all VDIs associated with a VM."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Destroying VDIs"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'vdi_refs'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vdi_refs'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'vdi_ref'
name|'in'
name|'vdi_refs'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'StorageError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_kernel_ramdisk
dedent|''
dedent|''
dedent|''
name|'def'
name|'_destroy_kernel_ramdisk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Three situations can occur:\n\n            1. We have neither a ramdisk nor a kernel, in which case we are a\n               RAW image and can omit this step\n\n            2. We have one or the other, in which case, we should flag as an\n               error\n\n            3. We have both, in which case we safely remove both the kernel\n               and the ramdisk.\n\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
comment|'# 1. No kernel or ramdisk'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Using RAW or VHD, skipping kernel and ramdisk "'
nl|'\n'
string|'"deletion"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
name|'and'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
op|':'
newline|'\n'
comment|'# 2. We only have kernel xor ramdisk'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnacceptable'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance has a kernel or ramdisk but not both"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. We have both kernel and ramdisk'
nl|'\n'
dedent|''
op|'('
name|'kernel'
op|','
name|'ramdisk'
op|')'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'kernel'
name|'or'
name|'ramdisk'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'destroy_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'kernel'
op|','
name|'ramdisk'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"kernel/ramdisk files removed"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_rescue_instance
dedent|''
dedent|''
name|'def'
name|'_destroy_rescue_instance'
op|'('
name|'self'
op|','
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy a rescue instance."""'
newline|'\n'
comment|'# Shutdown Rescue VM'
nl|'\n'
name|'state'
op|'='
name|'vm_utils'
op|'.'
name|'get_power_state'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'!='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.hard_shutdown"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy Rescue VDIs'
nl|'\n'
dedent|''
name|'vdi_refs'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|"# Don't destroy any VDIs belonging to the original VM"
nl|'\n'
name|'orig_vdi_refs'
op|'='
name|'self'
op|'.'
name|'_find_vdi_refs'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'vdi_refs'
op|'='
name|'set'
op|'('
name|'vdi_refs'
op|')'
op|'-'
name|'set'
op|'('
name|'orig_vdi_refs'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'vm_utils'
op|'.'
name|'safe_destroy_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy Rescue VM'
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.destroy"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VM instance.\n\n        This is the method exposed by xenapi_conn.destroy(). The rest of the\n        destroy_* methods are internal.\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Destroying VM"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|"# We don't use _get_vm_opaque_ref because the instance may"
nl|'\n'
comment|'# truly not exist because of a failure during build. A valid'
nl|'\n'
comment|'# vm_ref is checked correctly where necessary.'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): `block_device_info` is not used, information about which'
nl|'\n'
comment|'# volumes should be detached is determined by the'
nl|'\n'
comment|"# VBD.other_config['osvol'] attribute"
nl|'\n'
comment|"# NOTE(alaski): `block_device_info` is used to determine if there's a"
nl|'\n'
comment|'# volume still attached if the VM is not present.'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy
dedent|''
name|'def'
name|'_destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys VM instance by performing:\n\n            1. A shutdown\n            2. Destroying associated VDIs.\n            3. Destroying kernel and ramdisk files (if necessary).\n            4. Destroying that actual VM record.\n\n        """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"VM is not present, skipping destroy..."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# NOTE(alaski): There should not be a block device mapping here,'
nl|'\n'
comment|'# but if there is it very likely means there was an error cleaning'
nl|'\n'
comment|'# it up previously and there is now an orphaned sr/pbd.  This will'
nl|'\n'
comment|'# prevent both volume and instance deletes from completing.'
nl|'\n'
name|'bdms'
op|'='
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
name|'or'
op|'['
op|']'
newline|'\n'
name|'if'
name|'not'
name|'bdms'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'                '
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|'['
string|"'data'"
op|']'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
name|'sr_uuid'
op|'='
string|"'FA15E-D15C-%s'"
op|'%'
name|'volume_id'
newline|'\n'
name|'sr_ref'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'sr_ref'
op|'='
name|'volume_utils'
op|'.'
name|'find_sr_by_uuid'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'sr_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to find an SR for volume %s'"
op|')'
op|','
nl|'\n'
name|'volume_id'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'sr_ref'
op|':'
newline|'\n'
indent|'                        '
name|'volume_utils'
op|'.'
name|'forget_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'sr_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Volume %s is associated with the '"
nl|'\n'
string|"'instance but no SR was found for it'"
op|')'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to forget the SR for volume %s'"
op|')'
op|','
nl|'\n'
name|'volume_id'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'destroy_disks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_all'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_vdis'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_kernel_ramdisk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_utils'
op|'.'
name|'destroy_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.pause'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.unpause'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.suspend'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.resume'"
op|','
name|'vm_ref'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance.\n\n            - shutdown the instance VM.\n            - set \'bootlock\' to prevent the instance from starting in rescue.\n            - spawn a rescue VM (the vm name-label will be instance-N-rescue).\n\n        """'
newline|'\n'
name|'rescue_name_label'
op|'='
string|"'%s-rescue'"
op|'%'
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_name_label'
op|')'
newline|'\n'
name|'if'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|'"Instance is already in Rescue Mode: %s"'
op|')'
nl|'\n'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'rescue_password'
op|','
nl|'\n'
name|'network_info'
op|','
name|'name_label'
op|'='
name|'rescue_name_label'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_bootable
dedent|''
name|'def'
name|'set_bootable'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'is_bootable'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the ability to power on/off an instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'is_bootable'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance.\n\n            - unplug the instance VM\'s disk from the rescue VM.\n            - teardown the rescue VM.\n            - release the bootlock to allow the instance VM to start.\n\n        """'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotInRescueMode'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'original_vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|soft_delete
dedent|''
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Soft delete the specified instance."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"VM is not present, skipping soft delete..."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|restore
dedent|''
dedent|''
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cancel_stale_tasks
dedent|''
name|'def'
name|'_cancel_stale_tasks'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'task'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the given tasks that are older than the given timeout."""'
newline|'\n'
name|'task_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.get_by_name_label"'
op|','
name|'task'
op|')'
newline|'\n'
name|'for'
name|'task_ref'
name|'in'
name|'task_refs'
op|':'
newline|'\n'
indent|'            '
name|'task_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.get_record"'
op|','
name|'task_ref'
op|')'
newline|'\n'
name|'task_created'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
name|'task_rec'
op|'['
string|'"created"'
op|']'
op|'.'
name|'value'
op|','
nl|'\n'
string|'"%Y%m%dT%H:%M:%SZ"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'task_created'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.cancel"'
op|','
name|'task_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
dedent|''
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for expirable rebooting instances.\n\n            - issue a "hard" reboot to any instance that has been stuck in a\n              reboot state for >= the given timeout\n        """'
newline|'\n'
comment|'# NOTE(jk0): All existing clean_reboot tasks must be cancelled before'
nl|'\n'
comment|'# we can kick off the hard_reboot tasks.'
nl|'\n'
name|'self'
op|'.'
name|'_cancel_stale_tasks'
op|'('
name|'timeout'
op|','
string|"'VM.clean_reboot'"
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instances_info'
op|'='
name|'dict'
op|'('
name|'instance_count'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instances_info'
op|'['
string|'"instance_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(instance_count)d hung reboots "'
nl|'\n'
string|'"older than %(timeout)d seconds"'
op|')'
op|'%'
name|'instances_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically hard rebooting"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
string|'"HARD"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'vm_utils'
op|'.'
name|'compile_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'vm_utils'
op|'.'
name|'compile_diagnostics'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics using the common API."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'VM'
op|'.'
name|'get_record'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'vm_utils'
op|'.'
name|'compile_instance_diagnostics'
op|'('
name|'instance'
op|','
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vif_device_map
dedent|''
name|'def'
name|'_get_vif_device_map'
op|'('
name|'self'
op|','
name|'vm_rec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vif'
name|'in'
op|'['
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VIF.get_record"'
op|','
name|'vrec'
op|')'
nl|'\n'
name|'for'
name|'vrec'
name|'in'
name|'vm_rec'
op|'['
string|"'VIFs'"
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'vif_map'
op|'['
name|'vif'
op|'['
string|"'device'"
op|']'
op|']'
op|'='
name|'vif'
op|'['
string|"'MAC'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'vif_map'
newline|'\n'
nl|'\n'
DECL|member|get_all_bw_counters
dedent|''
name|'def'
name|'get_all_bw_counters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return running bandwidth counter for each interface on each\n           running VM.\n        """'
newline|'\n'
name|'counters'
op|'='
name|'vm_utils'
op|'.'
name|'fetch_bandwidth'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'bw'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif_map'
op|'='
name|'self'
op|'.'
name|'_get_vif_device_map'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
name|'name'
op|'='
name|'vm_rec'
op|'['
string|"'name_label'"
op|']'
newline|'\n'
name|'if'
string|"'nova_uuid'"
name|'not'
name|'in'
name|'vm_rec'
op|'['
string|"'other_config'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'dom'
op|'='
name|'vm_rec'
op|'.'
name|'get'
op|'('
string|"'domid'"
op|')'
newline|'\n'
name|'if'
name|'dom'
name|'is'
name|'None'
name|'or'
name|'dom'
name|'not'
name|'in'
name|'counters'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'vifs_bw'
op|'='
name|'bw'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'vif_num'
op|','
name|'vif_data'
name|'in'
name|'counters'
op|'['
name|'dom'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'mac'
op|'='
name|'vif_map'
op|'['
name|'vif_num'
op|']'
newline|'\n'
name|'vif_data'
op|'['
string|"'mac_address'"
op|']'
op|'='
name|'mac'
newline|'\n'
name|'vifs_bw'
op|'['
name|'mac'
op|']'
op|'='
name|'vif_data'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'bw'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return last few lines of instance console."""'
newline|'\n'
name|'dom_id'
op|'='
name|'self'
op|'.'
name|'_get_dom_id'
op|'('
name|'instance'
op|','
name|'check_rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raw_console_data'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
string|"'console'"
op|','
nl|'\n'
string|"'get_console_log'"
op|','
op|'{'
string|"'dom_id'"
op|':'
name|'dom_id'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Guest does not have a console available"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'zlib'
op|'.'
name|'decompress'
op|'('
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'raw_console_data'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console."""'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'RESCUED'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'%s-rescue'"
op|'%'
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# The rescue instance might not be ready at this point.'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# The compute manager expects InstanceNotFound for this case.'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'session_id'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_session_id'
op|'('
op|')'
newline|'\n'
name|'path'
op|'='
string|'"/console?ref=%s&session_id=%s"'
op|'%'
op|'('
name|'str'
op|'('
name|'vm_ref'
op|')'
op|','
name|'session_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE: XS5.6sp2+ use http over port 80 for xenapi com'
nl|'\n'
name|'return'
name|'ctype'
op|'.'
name|'ConsoleVNC'
op|'('
nl|'\n'
name|'host'
op|'='
name|'CONF'
op|'.'
name|'vncserver_proxyclient_address'
op|','
nl|'\n'
name|'port'
op|'='
number|'80'
op|','
nl|'\n'
name|'internal_access_path'
op|'='
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_vif_xenstore_data
dedent|''
name|'def'
name|'_vif_xenstore_data'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""convert a network info vif to injectable instance data."""'
newline|'\n'
nl|'\n'
DECL|function|get_ip
name|'def'
name|'get_ip'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'ip'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fixed_ip_dict
dedent|''
name|'def'
name|'fixed_ip_dict'
op|'('
name|'ip'
op|','
name|'subnet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'netmask'
op|'='
name|'str'
op|'('
name|'subnet'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'netmask'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'netmask'
op|'='
name|'subnet'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'_prefixlen'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'ip'"
op|':'
name|'ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|"'enabled'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'netmask'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'get_ip'
op|'('
name|'subnet'
op|'['
string|"'gateway'"
op|']'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|convert_route
dedent|''
name|'def'
name|'convert_route'
op|'('
name|'route'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'route'"
op|':'
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'route'
op|'['
string|"'cidr'"
op|']'
op|')'
op|'.'
name|'network'
op|')'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'route'
op|'['
string|"'cidr'"
op|']'
op|')'
op|'.'
name|'netmask'
op|')'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'get_ip'
op|'('
name|'route'
op|'['
string|"'gateway'"
op|']'
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'v4_subnets'
op|'='
op|'['
name|'subnet'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|']'
newline|'\n'
name|'v6_subnets'
op|'='
op|'['
name|'subnet'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): routes and DNS come from all subnets'
nl|'\n'
name|'routes'
op|'='
op|'['
name|'convert_route'
op|'('
name|'route'
op|')'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'for'
name|'route'
name|'in'
name|'subnet'
op|'['
string|"'routes'"
op|']'
op|']'
newline|'\n'
name|'dns'
op|'='
op|'['
name|'get_ip'
op|'('
name|'ip'
op|')'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'subnet'
op|'['
string|"'dns'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'info_dict'
op|'='
op|'{'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'mac'"
op|':'
name|'vif'
op|'['
string|"'address'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'v4_subnets'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): gateway and broadcast from first subnet'
nl|'\n'
comment|'#                  primary IP will be from first subnet'
nl|'\n'
comment|'#                  subnets are generally unordered :('
nl|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'gateway'"
op|']'
op|'='
name|'get_ip'
op|'('
name|'v4_subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|')'
newline|'\n'
name|'info_dict'
op|'['
string|"'broadcast'"
op|']'
op|'='
name|'str'
op|'('
name|'v4_subnets'
op|'['
number|'0'
op|']'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
name|'info_dict'
op|'['
string|"'ips'"
op|']'
op|'='
op|'['
name|'fixed_ip_dict'
op|'('
name|'ip'
op|','
name|'subnet'
op|')'
nl|'\n'
name|'for'
name|'subnet'
name|'in'
name|'v4_subnets'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'v6_subnets'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): gateway from first subnet'
nl|'\n'
comment|'#                  primary IP will be from first subnet'
nl|'\n'
comment|'#                  subnets are generally unordered :('
nl|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'gateway_v6'"
op|']'
op|'='
name|'get_ip'
op|'('
name|'v6_subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|')'
newline|'\n'
name|'info_dict'
op|'['
string|"'ip6s'"
op|']'
op|'='
op|'['
name|'fixed_ip_dict'
op|'('
name|'ip'
op|','
name|'subnet'
op|')'
nl|'\n'
name|'for'
name|'subnet'
name|'in'
name|'v6_subnets'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'routes'
op|':'
newline|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'routes'"
op|']'
op|'='
name|'routes'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'dns'
op|':'
newline|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'dns'"
op|']'
op|'='
name|'list'
op|'('
name|'set'
op|'('
name|'dns'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'info_dict'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the network info and make calls to place it into the\n        xenstore and the xenstore param list.\n        vm_ref can be passed in because it will sometimes be different than\n        what vm_utils.lookup(session, instance[\'name\']) will find (ex: rescue)\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Injecting network info to xenstore"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'xenstore-'"
op|'+'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
DECL|function|update_nwinfo
name|'def'
name|'update_nwinfo'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'xs_data'
op|'='
name|'self'
op|'.'
name|'_vif_xenstore_data'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'location'
op|'='
op|'('
string|"'vm-data/networking/%s'"
op|'%'
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
nl|'\n'
name|'location'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'xs_data'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_write_to_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
name|'xs_data'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# If the VM is not running, no need to update the'
nl|'\n'
comment|'# live xenstore'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'update_nwinfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vifs
dedent|''
name|'def'
name|'_create_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates vifs for an instance."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating vifs"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# this function raises if vm_ref is not a vm_opaque_ref'
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_domid"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'device'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif_rec'
op|'='
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'device'
op|'='
name|'device'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'vif_rec'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Creating VIF for network %s'"
op|','
nl|'\n'
name|'network_ref'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vif_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VIF.create'"
op|','
name|'vif_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Created VIF %(vif_ref)s, network %(network_ref)s'"
op|','
nl|'\n'
op|'{'
string|"'vif_ref'"
op|':'
name|'vif_ref'
op|','
string|"'network_ref'"
op|':'
name|'network_ref'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vifs
dedent|''
dedent|''
name|'def'
name|'plug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up VIF networking on the host."""'
newline|'\n'
name|'for'
name|'device'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'device'
op|'='
name|'device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vifs
dedent|''
dedent|''
name|'def'
name|'unplug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset_network
dedent|''
dedent|''
dedent|''
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls resetnetwork method in agent."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_inject_hostname'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'rescue'
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'resetnetwork'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_remove_hostname'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_inject_hostname
dedent|''
dedent|''
name|'def'
name|'_inject_hostname'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'rescue'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject the hostname of the instance into the xenstore."""'
newline|'\n'
name|'hostname'
op|'='
name|'instance'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
string|"'RESCUE-%s'"
op|'%'
name|'hostname'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'os_type'"
op|']'
op|'=='
string|'"windows"'
op|':'
newline|'\n'
comment|'# NOTE(jk0): Windows hostnames can only be <= 15 chars.'
nl|'\n'
indent|'            '
name|'hostname'
op|'='
name|'hostname'
op|'['
op|':'
number|'15'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Injecting hostname (%s) into xenstore"'
op|','
name|'hostname'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'xenstore-'"
op|'+'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
DECL|function|update_hostname
name|'def'
name|'update_hostname'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
string|"'vm-data/hostname'"
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'update_hostname'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_hostname
dedent|''
name|'def'
name|'_remove_hostname'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Removing hostname from xenstore"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'xenstore-'"
op|'+'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
DECL|function|update_hostname
name|'def'
name|'update_hostname'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_remove_from_param_xenstore'
op|'('
name|'vm_ref'
op|','
string|"'vm-data/hostname'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'update_hostname'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_write_to_xenstore
dedent|''
name|'def'
name|'_write_to_xenstore'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'value'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Writes the passed value to the xenstore record for the given VM\n        at the specified location. A XenAPIPlugin.PluginError will be raised\n        if any error is encountered in the write process.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'xenstore.py'"
op|','
string|"'write_record'"
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'path'
op|'='
name|'path'
op|','
nl|'\n'
name|'value'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_from_xenstore
dedent|''
name|'def'
name|'_delete_from_xenstore'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the value from the xenstore record for the given VM at\n        the specified location.  A XenAPIPlugin.PluginError will be\n        raised if any error is encountered in the delete process.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'xenstore.py'"
op|','
string|"'delete_record'"
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'path'
op|'='
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_plugin_call
dedent|''
name|'def'
name|'_make_plugin_call'
op|'('
name|'self'
op|','
name|'plugin'
op|','
name|'method'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'addl_args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Abstracts out the process of calling a method of a xenapi plugin.\n        Any errors raised by the plugin will in turn raise a RuntimeError here.\n        """'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance'
name|'or'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|"'dom_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_dom_id'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'update'
op|'('
name|'addl_args'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
name|'plugin'
op|','
name|'method'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'err_msg'
op|'='
name|'e'
op|'.'
name|'details'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
string|"'TIMEOUT:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'TIMEOUT: The call to %(method)s timed out. '"
nl|'\n'
string|"'args=%(args)r'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'args'"
op|':'
name|'args'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'timeout'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'elif'
string|"'NOT IMPLEMENTED:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'NOT IMPLEMENTED: The call to %(method)s is not'"
nl|'\n'
string|"' supported by the agent. args=%(args)r'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'args'"
op|':'
name|'args'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'notimplemented'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'The call to %(method)s returned an error: %(e)s. '"
nl|'\n'
string|"'args=%(args)r'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'method'
op|','
string|"'args'"
op|':'
name|'args'
op|','
string|"'e'"
op|':'
name|'e'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'error'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_dom_id
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_dom_id'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
name|'check_rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|','
name|'check_rescue'
op|')'
newline|'\n'
name|'domid'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_domid"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'domid'
name|'or'
name|'domid'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'domid'
newline|'\n'
nl|'\n'
DECL|member|_add_to_param_xenstore
dedent|''
name|'def'
name|'_add_to_param_xenstore'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Takes a key/value pair and adds it to the xenstore parameter\n        record for the given vm instance. If the key exists in xenstore,\n        it is overwritten\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_remove_from_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.add_to_xenstore_data'"
op|','
name|'vm_ref'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_from_param_xenstore
dedent|''
name|'def'
name|'_remove_from_param_xenstore'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Takes a single key and removes it from the xenstore parameter\n        record data for the given VM.\n        If the key doesn\'t exist, the request is ignored.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.remove_from_xenstore_data'"
op|','
name|'vm_ref'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""recreates security group rules for every instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""recreates security group rules for every instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_instance_security_rules
dedent|''
name|'def'
name|'refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""recreates security group rules for specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_instance_security_rules'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes filters for each VIF of the specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_uuid_from_aggregate
dedent|''
name|'def'
name|'_get_host_uuid_from_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'current_aggregate'
op|'='
name|'objects'
op|'.'
name|'AggregateList'
op|'.'
name|'get_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'CONF'
op|'.'
name|'host'
op|','
name|'key'
op|'='
name|'pool_states'
op|'.'
name|'POOL_FLAG'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'current_aggregate'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AggregateHostNotFound'
op|'('
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'current_aggregate'
op|'.'
name|'metadata'
op|'['
name|'hostname'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|"'Destination host:%s must be in the same '"
nl|'\n'
string|"'aggregate as the source server'"
op|')'
op|'%'
name|'hostname'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_host_in_aggregate
dedent|''
dedent|''
name|'def'
name|'_ensure_host_in_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_host_uuid_from_aggregate'
op|'('
name|'context'
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_opaque_ref
dedent|''
name|'def'
name|'_get_host_opaque_ref'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host_uuid'
op|'='
name|'self'
op|'.'
name|'_get_host_uuid_from_aggregate'
op|'('
name|'context'
op|','
name|'hostname'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.get_by_uuid"'
op|','
name|'host_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_receive
dedent|''
name|'def'
name|'_migrate_receive'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'destref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'host_ref'
newline|'\n'
comment|'# Get the network to for migrate.'
nl|'\n'
comment|'# This is the one associated with the pif marked management. From cli:'
nl|'\n'
comment|'# uuid=`xe pif-list --minimal management=true`'
nl|'\n'
comment|'# xe pif-param-get param-name=network-uuid uuid=$uuid'
nl|'\n'
name|'expr'
op|'='
string|'\'field "management" = "true"\''
newline|'\n'
name|'pifs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'PIF.get_all_records_where'"
op|','
nl|'\n'
name|'expr'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'pifs'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'No suitable network for migrate'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pifkey'
op|'='
name|'pifs'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
name|'pifs'
op|'['
name|'pifkey'
op|']'
op|'['
string|"'IP'"
op|']'
op|')'
name|'or'
nl|'\n'
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
name|'pifs'
op|'['
name|'pifkey'
op|']'
op|'['
string|"'IPv6'"
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|"'PIF %s does not contain IP address'"
op|')'
nl|'\n'
op|'%'
name|'pifs'
op|'['
name|'pifkey'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'nwref'
op|'='
name|'pifs'
op|'['
name|'pifs'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|']'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'migrate_data'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.migrate_receive"'
op|','
nl|'\n'
name|'destref'
op|','
nl|'\n'
name|'nwref'
op|','
nl|'\n'
name|'options'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Migrate Receive failed'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'migrate_data'
newline|'\n'
nl|'\n'
DECL|member|_get_iscsi_srs
dedent|''
name|'def'
name|'_get_iscsi_srs'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'vbd_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'iscsi_srs'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_VDI"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
comment|"# Check if it's on an iSCSI SR"
nl|'\n'
name|'sr_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_SR"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"SR.get_type"'
op|','
name|'sr_ref'
op|')'
op|'=='
string|"'iscsi'"
op|':'
newline|'\n'
indent|'                '
name|'iscsi_srs'
op|'.'
name|'append'
op|'('
name|'sr_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'iscsi_srs'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_destination
dedent|''
name|'def'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it is possible to execute live migration.\n\n        :param context: security context\n        :param instance_ref: nova.db.sqlalchemy.models.Instance object\n        :param block_migration: if true, prepare for block migration\n        :param disk_over_commit: if true, allow disk over commit\n\n        """'
newline|'\n'
name|'dest_check_data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'migrate_send_data'
op|'='
name|'self'
op|'.'
name|'_migrate_receive'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'destination_sr_ref'
op|'='
name|'vm_utils'
op|'.'
name|'safe_find_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'dest_check_data'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'{'
string|'"block_migration"'
op|':'
name|'block_migration'
op|','
nl|'\n'
string|'"migrate_data"'
op|':'
op|'{'
string|'"migrate_send_data"'
op|':'
name|'migrate_send_data'
op|','
nl|'\n'
string|'"destination_sr_ref"'
op|':'
name|'destination_sr_ref'
op|'}'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'src'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_host_in_aggregate'
op|'('
name|'ctxt'
op|','
name|'src'
op|')'
newline|'\n'
comment|'# TODO(johngarbutt) we currently assume'
nl|'\n'
comment|'# instance is on a SR shared with other destination'
nl|'\n'
comment|'# block migration work will be able to resolve this'
nl|'\n'
dedent|''
name|'return'
name|'dest_check_data'
newline|'\n'
nl|'\n'
DECL|member|_is_xsm_sr_check_relaxed
dedent|''
name|'def'
name|'_is_xsm_sr_check_relaxed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cached_xsm_sr_relaxed'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'config_value'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'config_value'
op|'='
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'config_file'"
op|','
nl|'\n'
string|"'get_val'"
op|','
nl|'\n'
name|'key'
op|'='
string|"'relax-xsm-sr-check'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cached_xsm_sr_relaxed'
op|'='
name|'config_value'
op|'=='
string|'"true"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cached_xsm_sr_relaxed'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_source
dedent|''
dedent|''
name|'def'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it\'s possible to execute live migration on the source side.\n\n        :param context: security context\n        :param instance_ref: nova.db.sqlalchemy.models.Instance object\n        :param dest_check_data: data returned by the check on the\n                                destination, includes block_migration flag\n\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_get_iscsi_srs'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
comment|'# XAPI must support the relaxed SR check for live migrating with'
nl|'\n'
comment|'# iSCSI VBDs'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_is_xsm_sr_check_relaxed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'_'
op|'('
string|"'XAPI supporting '"
nl|'\n'
string|"'relax-xsm-sr-check=true required'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'migrate_data'"
name|'in'
name|'dest_check_data'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'migrate_data'
op|'='
name|'dest_check_data'
op|'['
string|"'migrate_data'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_call_live_migrate_command'
op|'('
nl|'\n'
string|'"VM.assert_can_migrate"'
op|','
name|'vm_ref'
op|','
name|'migrate_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
name|'exc'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'assert_can_migrate failed because: %s'"
op|')'
op|'%'
name|'reason'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dest_check_data'
newline|'\n'
nl|'\n'
DECL|member|_generate_vdi_map
dedent|''
name|'def'
name|'_generate_vdi_map'
op|'('
name|'self'
op|','
name|'destination_sr_ref'
op|','
name|'vm_ref'
op|','
name|'sr_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""generate a vdi_map for _call_live_migrate_command."""'
newline|'\n'
name|'if'
name|'sr_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'sr_ref'
op|'='
name|'vm_utils'
op|'.'
name|'safe_find_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
dedent|''
name|'vm_vdis'
op|'='
name|'vm_utils'
op|'.'
name|'get_instance_vdis_for_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'('
name|'vdi'
op|','
name|'destination_sr_ref'
op|')'
name|'for'
name|'vdi'
name|'in'
name|'vm_vdis'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_live_migrate_command
dedent|''
name|'def'
name|'_call_live_migrate_command'
op|'('
name|'self'
op|','
name|'command_name'
op|','
name|'vm_ref'
op|','
name|'migrate_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""unpack xapi specific parameters, and call a live migrate command."""'
newline|'\n'
name|'destination_sr_ref'
op|'='
name|'migrate_data'
op|'['
string|"'destination_sr_ref'"
op|']'
newline|'\n'
name|'migrate_send_data'
op|'='
name|'migrate_data'
op|'['
string|"'migrate_send_data'"
op|']'
newline|'\n'
nl|'\n'
name|'vdi_map'
op|'='
name|'self'
op|'.'
name|'_generate_vdi_map'
op|'('
name|'destination_sr_ref'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add destination SR refs for all of the VDIs that we created'
nl|'\n'
comment|'# as part of the pre migration callback'
nl|'\n'
name|'if'
string|"'pre_live_migration_result'"
name|'in'
name|'migrate_data'
op|':'
newline|'\n'
indent|'            '
name|'pre_migrate_data'
op|'='
name|'migrate_data'
op|'['
string|"'pre_live_migration_result'"
op|']'
newline|'\n'
name|'sr_uuid_map'
op|'='
name|'pre_migrate_data'
op|'.'
name|'get'
op|'('
string|"'sr_uuid_map'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'for'
name|'sr_uuid'
name|'in'
name|'sr_uuid_map'
op|':'
newline|'\n'
comment|'# Source and destination SRs have the same UUID, so get the'
nl|'\n'
comment|'# reference for the local SR'
nl|'\n'
indent|'                '
name|'sr_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"SR.get_by_uuid"'
op|','
name|'sr_uuid'
op|')'
newline|'\n'
name|'vdi_map'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_generate_vdi_map'
op|'('
nl|'\n'
name|'sr_uuid_map'
op|'['
name|'sr_uuid'
op|']'
op|','
name|'vm_ref'
op|','
name|'sr_ref'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'vif_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
name|'command_name'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'migrate_send_data'
op|','
name|'True'
op|','
nl|'\n'
name|'vdi_map'
op|','
name|'vif_map'
op|','
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migrate
dedent|''
name|'def'
name|'live_migrate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'destination_hostname'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'migrate_data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
op|'('
name|'kernel'
op|','
name|'ramdisk'
op|')'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_kernel_ramdisk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'migrate_data'
op|'['
string|"'kernel-file'"
op|']'
op|'='
name|'kernel'
newline|'\n'
name|'migrate_data'
op|'['
string|"'ramdisk-file'"
op|']'
op|'='
name|'ramdisk'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'migrate_data'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
string|"'Block Migration '"
nl|'\n'
string|"'requires migrate data from destination'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iscsi_srs'
op|'='
name|'self'
op|'.'
name|'_get_iscsi_srs'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_call_live_migrate_command'
op|'('
nl|'\n'
string|'"VM.migrate_send"'
op|','
name|'vm_ref'
op|','
name|'migrate_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'_'
op|'('
string|"'Migrate Send failed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tidy up the iSCSI SRs'
nl|'\n'
dedent|''
name|'for'
name|'sr_ref'
name|'in'
name|'iscsi_srs'
op|':'
newline|'\n'
indent|'                    '
name|'volume_utils'
op|'.'
name|'forget_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'sr_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'host_ref'
op|'='
name|'self'
op|'.'
name|'_get_host_opaque_ref'
op|'('
name|'context'
op|','
nl|'\n'
name|'destination_hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.pool_migrate"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'host_ref'
op|','
op|'{'
string|'"live"'
op|':'
string|'"true"'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'post_method'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'destination_hostname'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'recover_method'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'destination_hostname'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration
dedent|''
dedent|''
dedent|''
name|'def'
name|'post_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'migrate_data'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'destroy_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'migrate_data'
op|'.'
name|'get'
op|'('
string|"'kernel-file'"
op|')'
op|','
nl|'\n'
name|'migrate_data'
op|'.'
name|'get'
op|'('
string|"'ramdisk-file'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration_at_destination
dedent|''
dedent|''
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(johngarbutt): we should block all traffic until we have'
nl|'\n'
comment|'# applied security groups, however this requires changes to XenServer'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_prepare_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'create_kernel_and_ramdisk'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johngarbutt) workaround XenServer bug CA-98606'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'strip_base_mirror_from_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_per_instance_usage
dedent|''
name|'def'
name|'get_per_instance_usage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get usage info about each active instance."""'
newline|'\n'
name|'usage'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_is_active
name|'def'
name|'_is_active'
op|'('
name|'vm_rec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'power_state'
op|'='
name|'vm_rec'
op|'['
string|"'power_state'"
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'power_state'
name|'in'
op|'['
string|"'running'"
op|','
string|"'paused'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_get_uuid
dedent|''
name|'def'
name|'_get_uuid'
op|'('
name|'vm_rec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other_config'
op|'='
name|'vm_rec'
op|'['
string|"'other_config'"
op|']'
newline|'\n'
name|'return'
name|'other_config'
op|'.'
name|'get'
op|'('
string|"'nova_uuid'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
name|'_get_uuid'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'_is_active'
op|'('
name|'vm_rec'
op|')'
name|'and'
name|'uuid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'memory_mb'
op|'='
name|'int'
op|'('
name|'vm_rec'
op|'['
string|"'memory_static_max'"
op|']'
op|')'
op|'/'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'usage'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
name|'memory_mb'
op|','
string|"'uuid'"
op|':'
name|'uuid'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'usage'
newline|'\n'
nl|'\n'
DECL|member|connect_block_device_volumes
dedent|''
name|'def'
name|'connect_block_device_volumes'
op|'('
name|'self'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sr_uuid_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'block_device_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'block_device_map'
name|'in'
name|'block_device_info'
op|'['
nl|'\n'
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'sr_uuid'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'connect_volume'
op|'('
nl|'\n'
name|'block_device_map'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'sr_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.get_by_uuid'"
op|','
nl|'\n'
name|'sr_uuid'
op|')'
newline|'\n'
name|'sr_uuid_map'
op|'['
name|'sr_uuid'
op|']'
op|'='
name|'sr_ref'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Disconnect the volumes we just connected'
nl|'\n'
indent|'                '
name|'for'
name|'sr'
name|'in'
name|'sr_uuid_map'
op|':'
newline|'\n'
indent|'                    '
name|'volume_utils'
op|'.'
name|'forget_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'sr_uuid_map'
op|'['
name|'sr_ref'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'sr_uuid_map'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

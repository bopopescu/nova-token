begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManagement class for VM-related functions (spawn, reboot, etc).\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_mode'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
name|'as'
name|'virt_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'agent'
name|'as'
name|'xapi_agent'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'pool_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'vm_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'volume_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'volumeops'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|xenapi_vmops_opts
name|'xenapi_vmops_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'xenapi_running_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'number of seconds to wait for instance '"
nl|'\n'
string|"'to go to running state'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'xenapi_vif_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.xenapi.vif.XenAPIBridgeDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The XenAPI VIF driver using XenServer Network APIs.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'xenapi_image_upload_handler'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.xenapi.imageupload.glance.GlanceStore'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Object Store Driver used to handle image uploads.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'xenapi_vmops_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'vncserver_proxyclient_address'"
op|','
string|"'nova.vnc'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_FIREWALL_DRIVER
name|'DEFAULT_FIREWALL_DRIVER'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
nl|'\n'
name|'firewall'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'firewall'
op|'.'
name|'IptablesFirewallDriver'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|RESIZE_TOTAL_STEPS
name|'RESIZE_TOTAL_STEPS'
op|'='
number|'5'
newline|'\n'
nl|'\n'
DECL|variable|DEVICE_ROOT
name|'DEVICE_ROOT'
op|'='
string|"'0'"
newline|'\n'
DECL|variable|DEVICE_RESCUE
name|'DEVICE_RESCUE'
op|'='
string|"'1'"
newline|'\n'
DECL|variable|DEVICE_SWAP
name|'DEVICE_SWAP'
op|'='
string|"'2'"
newline|'\n'
DECL|variable|DEVICE_CONFIGDRIVE
name|'DEVICE_CONFIGDRIVE'
op|'='
string|"'3'"
newline|'\n'
comment|'# Note(johngarbutt) HVM guests only support four devices'
nl|'\n'
comment|'# until the PV tools activate, when others before available'
nl|'\n'
comment|'# As such, ephemeral disk only available once PV tools load'
nl|'\n'
DECL|variable|DEVICE_EPHEMERAL
name|'DEVICE_EPHEMERAL'
op|'='
string|"'4'"
newline|'\n'
comment|"# Note(johngarbutt) Currently don't support ISO boot during rescue"
nl|'\n'
comment|'# and we must have the ISO visible before the PV drivers start'
nl|'\n'
DECL|variable|DEVICE_CD
name|'DEVICE_CD'
op|'='
string|"'1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cmp_version
name|'def'
name|'cmp_version'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compare two version strings (eg 0.0.1.10 > 0.0.1.9)."""'
newline|'\n'
name|'a'
op|'='
name|'a'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'b'
op|'='
name|'b'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Compare each individual portion of both version strings'
nl|'\n'
name|'for'
name|'va'
op|','
name|'vb'
name|'in'
name|'zip'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'int'
op|'('
name|'va'
op|')'
op|'-'
name|'int'
op|'('
name|'vb'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
comment|'# Fallback to comparing length last'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'len'
op|'('
name|'a'
op|')'
op|'-'
name|'len'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_step_decorator
dedent|''
name|'def'
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'instance_update'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory to create a decorator that records instance progress as a series\n    of discrete steps.\n\n    Each time the decorator is invoked we bump the total-step-count, so after::\n\n        @step\n        def step1():\n            ...\n\n        @step\n        def step2():\n            ...\n\n    we have a total-step-count of 2.\n\n    Each time the step-function (not the step-decorator!) is invoked, we bump\n    the current-step-count by 1, so after::\n\n        step1()\n\n    the current-step-count would be 1 giving a progress of ``1 / 2 *\n    100`` or 50%.\n    """'
newline|'\n'
name|'step_info'
op|'='
name|'dict'
op|'('
name|'total'
op|'='
number|'0'
op|','
name|'current'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|bump_progress
name|'def'
name|'bump_progress'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step_info'
op|'['
string|"'current'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step_info'
op|'['
string|"'current'"
op|']'
op|')'
op|'/'
nl|'\n'
name|'step_info'
op|'['
string|"'total'"
op|']'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating progress to %(progress)d"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'{'
string|"'progress'"
op|':'
name|'progress'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|step_decorator
dedent|''
name|'def'
name|'step_decorator'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step_info'
op|'['
string|"'total'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'bump_progress'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'step_decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOps
dedent|''
name|'class'
name|'VMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Management class for VM-related tasks\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|','
name|'virtapi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'='
name|'virtapi'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'volumeops'
op|'.'
name|'VolumeOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'firewall'
op|'.'
name|'load_driver'
op|'('
nl|'\n'
name|'DEFAULT_FIREWALL_DRIVER'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|','
nl|'\n'
name|'xenapi_session'
op|'='
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'vif_impl'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'CONF'
op|'.'
name|'xenapi_vif_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vif_driver'
op|'='
name|'vif_impl'
op|'('
name|'xenapi_session'
op|'='
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'default_root_dev'
op|'='
string|"'/dev/sda'"
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Importing image upload handler: %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|'%'
name|'CONF'
op|'.'
name|'xenapi_image_upload_handler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_upload_handler'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'xenapi_image_upload_handler'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|agent_enabled
name|'def'
name|'agent_enabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'CONF'
op|'.'
name|'xenapi_disable_agent'
newline|'\n'
nl|'\n'
DECL|member|_get_agent
dedent|''
name|'def'
name|'_get_agent'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'xapi_agent'
op|'.'
name|'XenAPIBasedAgent'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_virtapi'
op|','
nl|'\n'
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Error: Agent is disabled"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances."""'
newline|'\n'
comment|'# TODO(justinsb): Should we just always use the details method?'
nl|'\n'
comment|'#  Seems to be the same number of API calls..'
nl|'\n'
name|'name_labels'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name_labels'
op|'.'
name|'append'
op|'('
name|'vm_rec'
op|'['
string|'"name_label"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'name_labels'
newline|'\n'
nl|'\n'
DECL|member|list_instance_uuids
dedent|''
name|'def'
name|'list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the list of nova instance uuids for VMs found on the\n        hypervisor.\n        """'
newline|'\n'
name|'nova_uuids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other_config'
op|'='
name|'vm_rec'
op|'['
string|"'other_config'"
op|']'
newline|'\n'
name|'nova_uuid'
op|'='
name|'other_config'
op|'.'
name|'get'
op|'('
string|"'nova_uuid'"
op|')'
newline|'\n'
name|'if'
name|'nova_uuid'
op|':'
newline|'\n'
indent|'                '
name|'nova_uuids'
op|'.'
name|'append'
op|'('
name|'nova_uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'nova_uuids'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_mapped_block_devices
dedent|''
name|'def'
name|'_attach_mapped_block_devices'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
comment|'# We are attaching these volumes before start (no hotplugging)'
nl|'\n'
comment|"# because some guests (windows) don't load PV drivers quickly"
nl|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'virt_driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'vol'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'='
name|'vol'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'mount_device'
op|'='
name|'vol'
op|'['
string|"'mount_device'"
op|']'
op|'.'
name|'rpartition'
op|'('
string|'"/"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'mount_device'
op|','
nl|'\n'
name|'hotplug'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(sirp): the original vm was suffixed with '-orig'; find it using"
nl|'\n'
comment|'# the old suffix, remove the suffix, then power it back on.'
nl|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(danms): if we're reverting migration in the failure case,"
nl|'\n'
comment|"# make sure we don't have a conflicting vm still running here,"
nl|'\n'
comment|'# as might be the case in a failed migrate-to-same-host situation'
nl|'\n'
name|'new_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'new_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'new_ref'
op|')'
newline|'\n'
comment|"# Remove the '-orig' suffix (which was added in case the"
nl|'\n'
comment|'# resized VM ends up on the source host, common during'
nl|'\n'
comment|'# testing)'
nl|'\n'
dedent|''
name|'name_label'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'set_vm_name_label'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_attach_mapped_block_devices'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'new_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# We crashed before the -orig backup was made'
nl|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'new_ref'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root_vdi'
op|'='
name|'vm_utils'
op|'.'
name|'move_disks'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resize_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_resize_instance'
op|'('
name|'instance'
op|','
name|'root_vdi'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if kernel and ramdisk are external'
nl|'\n'
dedent|''
name|'kernel_file'
op|'='
name|'None'
newline|'\n'
name|'ramdisk_file'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'name_label'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'vdis'
op|'='
name|'vm_utils'
op|'.'
name|'create_kernel_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'name_label'
op|','
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'KERNEL'
op|')'
newline|'\n'
name|'kernel_file'
op|'='
name|'vdis'
op|'['
string|"'kernel'"
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'vdis'
op|'='
name|'vm_utils'
op|'.'
name|'create_kernel_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'name_label'
op|','
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'RAMDISK'
op|')'
newline|'\n'
name|'ramdisk_file'
op|'='
name|'vdis'
op|'['
string|"'ramdisk'"
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'disk_image_type'
op|'='
name|'vm_utils'
op|'.'
name|'determine_disk_image_type'
op|'('
name|'image_meta'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'root'"
op|':'
name|'root_vdi'
op|'}'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'network_info'
op|','
name|'kernel_file'
op|','
nl|'\n'
name|'ramdisk_file'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_attach_mapped_block_devices'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# 5. Start VM'
nl|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'5'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_start
dedent|''
name|'def'
name|'_start'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on a VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attached volumes that have become non-responsive will prevent a VM'
nl|'\n'
comment|'# from starting, so scan for these before attempting to start'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# In order to make sure this detach is consistent (virt, BDM, cinder),'
nl|'\n'
comment|'# we only detach in the virt-layer if a callback is provided.'
nl|'\n'
name|'if'
name|'bad_volumes_callback'
op|':'
newline|'\n'
indent|'            '
name|'bad_devices'
op|'='
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'find_bad_volumes'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'for'
name|'device_name'
name|'in'
name|'bad_devices'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_volume'
op|'('
nl|'\n'
name|'None'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.start_on'"
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
op|','
nl|'\n'
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Allow higher-layers a chance to detach bad-volumes as well (in order'
nl|'\n'
comment|'# to cleanup BDM entries and detach in Cinder)'
nl|'\n'
name|'if'
name|'bad_volumes_callback'
name|'and'
name|'bad_devices'
op|':'
newline|'\n'
indent|'            '
name|'bad_volumes_callback'
op|'('
name|'bad_devices'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_disks
dedent|''
dedent|''
name|'def'
name|'_create_disks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vdis'
op|'='
name|'vm_utils'
op|'.'
name|'get_vdis_for_instance'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
op|','
nl|'\n'
name|'disk_image_type'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
comment|'# Just get the VDI ref once'
nl|'\n'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vdi'
op|'['
string|"'ref'"
op|']'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
nl|'\n'
name|'vdi'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'root_vdi'
op|'='
name|'vdis'
op|'.'
name|'get'
op|'('
string|"'root'"
op|')'
newline|'\n'
name|'if'
name|'root_vdi'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_resize_instance'
op|'('
name|'instance'
op|','
name|'root_vdi'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'name_label'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name_label'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'name_label'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'step'
op|'='
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'.'
name|'instance_update'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'step'
newline|'\n'
DECL|function|determine_disk_image_type_step
name|'def'
name|'determine_disk_image_type_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_utils'
op|'.'
name|'determine_disk_image_type'
op|'('
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_disks_step
name|'def'
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vdis'
op|'='
name|'self'
op|'.'
name|'_create_disks'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_disks
name|'def'
name|'undo_create_disks'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vdi_refs'
op|'='
op|'['
name|'vdi'
op|'['
string|"'ref'"
op|']'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|'.'
name|'values'
op|'('
op|')'
nl|'\n'
name|'if'
name|'not'
name|'vdi'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'safe_destroy_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_disks'
op|')'
newline|'\n'
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_kernel_ramdisk_step
name|'def'
name|'create_kernel_ramdisk_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel_file'
op|'='
name|'None'
newline|'\n'
name|'ramdisk_file'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'vdis'
op|'='
name|'vm_utils'
op|'.'
name|'create_kernel_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'name_label'
op|','
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'KERNEL'
op|')'
newline|'\n'
name|'kernel_file'
op|'='
name|'vdis'
op|'['
string|"'kernel'"
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'vdis'
op|'='
name|'vm_utils'
op|'.'
name|'create_kernel_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'name_label'
op|','
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'RAMDISK'
op|')'
newline|'\n'
name|'ramdisk_file'
op|'='
name|'vdis'
op|'['
string|"'ramdisk'"
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_kernel_ramdisk
dedent|''
name|'def'
name|'undo_create_kernel_ramdisk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'kernel_file'
name|'or'
name|'ramdisk_file'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Removing kernel/ramdisk files from dom0"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'destroy_kernel_ramdisk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_kernel_ramdisk'
op|')'
newline|'\n'
name|'return'
name|'kernel_file'
op|','
name|'ramdisk_file'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_vm_record_step
name|'def'
name|'create_vm_record_step'
op|'('
name|'undo_mgr'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm_record'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'vdis'
op|','
name|'disk_image_type'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_vm
name|'def'
name|'undo_create_vm'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_vm'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|attach_disks_step
name|'def'
name|'attach_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_attach_disks'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescue'
op|':'
newline|'\n'
comment|'# NOTE(johannes): Attach root disk to rescue VM now, before'
nl|'\n'
comment|"# booting the VM, since we can't hotplug block devices"
nl|'\n'
comment|'# on non-PV guests'
nl|'\n'
indent|'            '
op|'@'
name|'step'
newline|'\n'
DECL|function|attach_root_disk_step
name|'def'
name|'attach_root_disk_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'orig_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_find_root_vdi_ref'
op|'('
name|'orig_vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'DEVICE_RESCUE'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|setup_network_step
name|'def'
name|'setup_network_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setup_vm_networking'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'network_info'
op|','
nl|'\n'
name|'rescue'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|inject_metadata_step
name|'def'
name|'inject_metadata_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'inject_instance_metadata'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|prepare_security_group_filters_step
name|'def'
name|'prepare_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(salvatore-orlando): setup_basic_filtering might be'
nl|'\n'
comment|'# empty or not implemented at all, as basic filter could'
nl|'\n'
comment|'# be implemented with VIF rules created by xapi plugin'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|boot_instance_step
name|'def'
name|'boot_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_boot_new_instance'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|apply_security_group_filters_step
name|'def'
name|'apply_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|bdev_set_default_root
name|'def'
name|'bdev_set_default_root'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'block_device_info'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Block device information present: %s"'
op|')'
nl|'\n'
op|'%'
name|'block_device_info'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'block_device_info'
name|'and'
name|'not'
name|'block_device_info'
op|'['
string|"'root_device_name'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'block_device_info'
op|'['
string|"'root_device_name'"
op|']'
op|'='
name|'self'
op|'.'
name|'default_root_dev'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'undo_mgr'
op|'='
name|'utils'
op|'.'
name|'UndoManager'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(sirp): The create_disks() step will potentially take a'
nl|'\n'
comment|'# *very* long time to complete since it has to fetch the image'
nl|'\n'
comment|'# over the network and images can be several gigs in size. To'
nl|'\n'
comment|'# avoid progress remaining at 0% for too long, make sure the'
nl|'\n'
comment|'# first step is something that completes rather quickly.'
nl|'\n'
indent|'            '
name|'bdev_set_default_root'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
name|'disk_image_type'
op|'='
name|'determine_disk_image_type_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'vdis'
op|'='
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'disk_image_type'
op|','
name|'image_meta'
op|')'
newline|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|'='
name|'create_kernel_ramdisk_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'create_vm_record_step'
op|'('
name|'undo_mgr'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
name|'attach_disks_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
newline|'\n'
name|'setup_network_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|')'
newline|'\n'
name|'inject_metadata_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'prepare_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'attach_root_disk_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'boot_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'apply_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to spawn, rolling back"'
op|')'
newline|'\n'
name|'undo_mgr'
op|'.'
name|'rollback_and_reraise'
op|'('
name|'msg'
op|'='
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vm
dedent|''
dedent|''
name|'def'
name|'_create_vm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'network_info'
op|','
name|'kernel_file'
op|'='
name|'None'
op|','
nl|'\n'
name|'ramdisk_file'
op|'='
name|'None'
op|','
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm_record'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'vdis'
op|','
name|'disk_image_type'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_attach_disks'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_vm_networking'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'network_info'
op|','
nl|'\n'
name|'rescue'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): file injection only happens if we are _not_ using a'
nl|'\n'
comment|'# configdrive.'
nl|'\n'
name|'if'
name|'not'
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'inject_instance_metadata'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_setup_vm_networking
dedent|''
name|'def'
name|'_setup_vm_networking'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vdis'
op|','
name|'network_info'
op|','
nl|'\n'
name|'rescue'
op|')'
op|':'
newline|'\n'
comment|'# Alter the image before VM start for network injection.'
nl|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'flat_injected'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'preconfigure_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vdis'
op|'['
string|"'root'"
op|']'
op|'['
string|"'ref'"
op|']'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_vifs'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'hostname'
op|'='
name|'instance'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
string|"'RESCUE-%s'"
op|'%'
name|'hostname'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'inject_hostname'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vm_record
dedent|''
name|'def'
name|'_create_vm_record'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create the VM record in Xen, making sure that we do not create\n        a duplicate name-label.  Also do a rough sanity check on memory\n        to try to short-circuit a potential failure later.  (The memory\n        check only accounts for running VMs, so it can miss other builds\n        that are in progress.)\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure enough free memory is available'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'vm_utils'
op|'.'
name|'ensure_free_mem'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InsufficientFreeMemory'
op|'('
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mode'
op|'='
name|'self'
op|'.'
name|'_determine_vm_mode'
op|'('
name|'instance'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'vm_mode'"
op|']'
op|'!='
name|'mode'
op|':'
newline|'\n'
comment|'# Update database with normalized (or determined) value'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_virtapi'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'{'
string|"'vm_mode'"
op|':'
name|'mode'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'use_pv_kernel'
op|'='
op|'('
name|'mode'
op|'=='
name|'vm_mode'
op|'.'
name|'XEN'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'create_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'name_label'
op|','
nl|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|','
name|'use_pv_kernel'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_determine_vm_mode
dedent|''
name|'def'
name|'_determine_vm_mode'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vdis'
op|','
name|'disk_image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'current_mode'
op|'='
name|'vm_mode'
op|'.'
name|'get_from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'current_mode'
op|'=='
name|'vm_mode'
op|'.'
name|'XEN'
name|'or'
name|'current_mode'
op|'=='
name|'vm_mode'
op|'.'
name|'HVM'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'current_mode'
newline|'\n'
nl|'\n'
dedent|''
name|'is_pv'
op|'='
name|'False'
newline|'\n'
name|'if'
string|"'root'"
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'os_type'
op|'='
name|'instance'
op|'['
string|"'os_type'"
op|']'
newline|'\n'
name|'vdi_ref'
op|'='
name|'vdis'
op|'['
string|"'root'"
op|']'
op|'['
string|"'ref'"
op|']'
newline|'\n'
name|'is_pv'
op|'='
name|'vm_utils'
op|'.'
name|'determine_is_pv'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'os_type'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'is_pv'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_mode'
op|'.'
name|'XEN'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_mode'
op|'.'
name|'HVM'
newline|'\n'
nl|'\n'
DECL|member|_attach_disks
dedent|''
dedent|''
name|'def'
name|'_attach_disks'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|','
name|'vdis'
op|','
nl|'\n'
name|'disk_image_type'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
name|'files'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'extract_instance_type'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (required) root disk'
nl|'\n'
name|'if'
name|'disk_image_type'
op|'=='
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'DISK_ISO'
op|':'
newline|'\n'
comment|'# DISK_ISO needs two VBDs: the ISO disk and a blank RW disk'
nl|'\n'
indent|'            '
name|'root_disk_size'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'if'
name|'root_disk_size'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'generate_iso_blank_root_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'DEVICE_ROOT'
op|','
name|'name_label'
op|','
name|'root_disk_size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cd_vdi'
op|'='
name|'vdis'
op|'.'
name|'pop'
op|'('
string|"'iso'"
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'attach_cd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'cd_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'DEVICE_CD'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'root_vdi'
op|'='
name|'vdis'
op|'['
string|"'root'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'auto_disk_config'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Auto configuring disk, attempting to "'
nl|'\n'
string|'"resize partition..."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'auto_configure_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'DEVICE_ROOT'
op|','
name|'bootable'
op|'='
name|'True'
op|','
nl|'\n'
name|'osvol'
op|'='
name|'root_vdi'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (optional) additional block-devices'
nl|'\n'
dedent|''
name|'for'
name|'type_'
op|','
name|'vdi_info'
name|'in'
name|'vdis'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Additional block-devices for boot use their device-name as the'
nl|'\n'
comment|'# type.'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'type_'
op|'.'
name|'startswith'
op|'('
string|"'/dev'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Convert device name to userdevice number, e.g. /dev/xvdb -> 1'
nl|'\n'
dedent|''
name|'userdevice'
op|'='
name|'ord'
op|'('
name|'block_device'
op|'.'
name|'strip_prefix'
op|'('
name|'type_'
op|')'
op|')'
op|'-'
name|'ord'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vdi_info'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|','
nl|'\n'
name|'osvol'
op|'='
name|'vdi_info'
op|'.'
name|'get'
op|'('
string|"'osvol'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (optional) swap disk'
nl|'\n'
dedent|''
name|'swap_mb'
op|'='
name|'instance_type'
op|'['
string|"'swap'"
op|']'
newline|'\n'
name|'if'
name|'swap_mb'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'generate_swap'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'DEVICE_SWAP'
op|','
name|'name_label'
op|','
name|'swap_mb'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (optional) ephemeral disk'
nl|'\n'
dedent|''
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
name|'if'
name|'ephemeral_gb'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'generate_ephemeral'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'DEVICE_EPHEMERAL'
op|','
name|'name_label'
op|','
nl|'\n'
name|'ephemeral_gb'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach (optional) configdrive v2 disk'
nl|'\n'
dedent|''
name|'if'
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'generate_configdrive'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'DEVICE_CONFIGDRIVE'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'admin_password'
op|','
nl|'\n'
name|'files'
op|'='
name|'files'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_boot_new_instance
dedent|''
dedent|''
name|'def'
name|'_boot_new_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Boot a new instance and configure it."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Starting VM'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for boot to finish'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Waiting for instance state to become running'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'expiration'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
name|'CONF'
op|'.'
name|'xenapi_running_timeout'
newline|'\n'
name|'while'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'<'
name|'expiration'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|':'
newline|'\n'
indent|'            '
name|'agent_build'
op|'='
name|'self'
op|'.'
name|'_virtapi'
op|'.'
name|'agent_build_get_by_triple'
op|'('
nl|'\n'
name|'ctx'
op|','
string|"'xen'"
op|','
name|'instance'
op|'['
string|"'os_type'"
op|']'
op|','
name|'instance'
op|'['
string|"'architecture'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'agent_build'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Latest agent build for %(hypervisor)s/%(os)s'"
nl|'\n'
string|"'/%(architecture)s is %(version)s'"
op|')'
op|'%'
name|'agent_build'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No agent build found for %(hypervisor)s/%(os)s'"
nl|'\n'
string|"'/%(architecture)s'"
op|')'
op|'%'
op|'{'
nl|'\n'
string|"'hypervisor'"
op|':'
string|"'xen'"
op|','
nl|'\n'
string|"'os'"
op|':'
name|'instance'
op|'['
string|"'os_type'"
op|']'
op|','
nl|'\n'
string|"'architecture'"
op|':'
name|'instance'
op|'['
string|"'architecture'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Update agent, if necessary'
nl|'\n'
comment|'# This also waits until the agent starts'
nl|'\n'
dedent|''
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'version'
op|'='
name|'agent'
op|'.'
name|'get_agent_version'
op|'('
op|')'
newline|'\n'
name|'if'
name|'version'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance agent version: %s'"
op|')'
op|','
name|'version'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'version'
name|'and'
name|'agent_build'
name|'and'
nl|'\n'
name|'cmp_version'
op|'('
name|'version'
op|','
name|'agent_build'
op|'['
string|"'version'"
op|']'
op|')'
op|'<'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'agent'
op|'.'
name|'agent_update'
op|'('
name|'agent_build'
op|')'
newline|'\n'
nl|'\n'
comment|'# if the guest agent is not available, configure the'
nl|'\n'
comment|'# instance, but skip the admin password configuration'
nl|'\n'
dedent|''
name|'no_agent'
op|'='
name|'version'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Inject ssh key.'
nl|'\n'
name|'agent'
op|'.'
name|'inject_ssh_key'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Inject files, if necessary'
nl|'\n'
name|'if'
name|'injected_files'
op|':'
newline|'\n'
comment|'# Inject any files, if specified'
nl|'\n'
indent|'                '
name|'for'
name|'path'
op|','
name|'contents'
name|'in'
name|'injected_files'
op|':'
newline|'\n'
indent|'                    '
name|'agent'
op|'.'
name|'inject_file'
op|'('
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set admin password, if necessary'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'admin_password'
name|'and'
name|'not'
name|'no_agent'
op|':'
newline|'\n'
indent|'                '
name|'agent'
op|'.'
name|'set_admin_password'
op|'('
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reset network config'
nl|'\n'
dedent|''
name|'agent'
op|'.'
name|'resetnetwork'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Set VCPU weight'
nl|'\n'
dedent|''
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'extract_instance_type'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vcpu_weight'
op|'='
name|'instance_type'
op|'['
string|"'vcpu_weight'"
op|']'
newline|'\n'
name|'if'
name|'vcpu_weight'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Setting VCPU weight"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.add_to_VCPUs_params'"
op|','
name|'vm_ref'
op|','
nl|'\n'
string|"'weight'"
op|','
name|'str'
op|'('
name|'vcpu_weight'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_opaque_ref
dedent|''
dedent|''
name|'def'
name|'_get_vm_opaque_ref'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'check_rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get xapi OpaqueRef from a db record.\n        :param check_rescue: if True will return the \'name\'-rescue vm if it\n                             exists, instead of just \'name\'\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'check_rescue'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|"'Could not find VM with name %s'"
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_acquire_bootlock
dedent|''
name|'def'
name|'_acquire_bootlock'
op|'('
name|'self'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prevent an instance from booting."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|'"VM.set_blocked_operations"'
op|','
nl|'\n'
name|'vm'
op|','
nl|'\n'
op|'{'
string|'"start"'
op|':'
string|'""'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_release_bootlock
dedent|''
name|'def'
name|'_release_bootlock'
op|'('
name|'self'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow an instance to boot."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|'"VM.remove_from_blocked_operations"'
op|','
nl|'\n'
name|'vm'
op|','
nl|'\n'
string|'"start"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        :param context: request context\n        :param instance: instance to be snapshotted\n        :param image_id: id of image to upload to\n\n        Steps involved in a XenServer snapshot:\n\n        1. XAPI-Snapshot: Snapshotting the instance using XenAPI. This\n           creates: Snapshot (Template) VM, Snapshot VBD, Snapshot VDI,\n           Snapshot VHD\n\n        2. Wait-for-coalesce: The Snapshot VDI and Instance VDI both point to\n           a \'base-copy\' VDI.  The base_copy is immutable and may be chained\n           with other base_copies.  If chained, the base_copies\n           coalesce together, so, we must wait for this coalescing to occur to\n           get a stable representation of the data on disk.\n\n        3. Push-to-data-store: Once coalesced, we call a plugin on the\n           XenServer that will bundle the VHDs together and then push the\n           bundle. Depending on the configured value of\n           \'xenapi_image_upload_handler\', image data may be pushed to\n           Glance or the specified data store.\n\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'label'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'vm_utils'
op|'.'
name|'snapshot_attached_here'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'label'
op|','
nl|'\n'
name|'update_task_state'
op|')'
name|'as'
name|'vdi_uuids'
op|':'
newline|'\n'
indent|'            '
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|','
nl|'\n'
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_upload_handler'
op|'.'
name|'upload_image'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vdi_uuids'
op|','
nl|'\n'
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Finished snapshot and upload for VM"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_vhd
dedent|''
name|'def'
name|'_migrate_vhd'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vdi_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|','
name|'seq_num'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Migrating VHD \'%(vdi_uuid)s\' with seq_num %(seq_num)d"'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin_serialized'
op|'('
string|"'migration'"
op|','
string|"'transfer_vhd'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
name|'host'
op|'='
name|'dest'
op|','
name|'vdi_uuid'
op|'='
name|'vdi_uuid'
op|','
nl|'\n'
name|'sr_path'
op|'='
name|'sr_path'
op|','
name|'seq_num'
op|'='
name|'seq_num'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to transfer vhd to new host"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_orig_vm_name_label
dedent|''
dedent|''
name|'def'
name|'_get_orig_vm_name_label'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'['
string|"'name'"
op|']'
op|'+'
string|"'-orig'"
newline|'\n'
nl|'\n'
DECL|member|_update_instance_progress
dedent|''
name|'def'
name|'_update_instance_progress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'step'
op|','
name|'total_steps'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update instance progress percent to reflect current step number\n        """'
newline|'\n'
comment|"# FIXME(sirp): for now we're taking a KISS approach to instance"
nl|'\n'
comment|'# progress:'
nl|'\n'
comment|'# Divide the action\'s workflow into discrete steps and "bump" the'
nl|'\n'
comment|"# instance's progress field as each step is completed."
nl|'\n'
comment|'#'
nl|'\n'
comment|'# For a first cut this should be fine, however, for large VM images,'
nl|'\n'
comment|'# the _create_disks step begins to dominate the equation. A'
nl|'\n'
comment|'# better approximation would use the percentage of the VM image that'
nl|'\n'
comment|'# has been streamed to the destination host.'
nl|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step'
op|')'
op|'/'
name|'total_steps'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating progress to %(progress)d"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'progress'"
op|':'
name|'progress'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_disk_resizing_down
dedent|''
name|'def'
name|'_migrate_disk_resizing_down'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'vm_ref'
op|','
name|'sr_path'
op|')'
op|':'
newline|'\n'
comment|"# 1. NOOP since we're not transmitting the base-copy separately"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'1'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
name|'vdi_ref'
op|','
name|'vm_vdi_rec'
op|'='
name|'vm_utils'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'vdi_uuid'
op|'='
name|'vm_vdi_rec'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'old_gb'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'new_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resizing down VDI %(vdi_uuid)s from "'
nl|'\n'
string|'"%(old_gb)dGB to %(new_gb)dGB"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2. Power down the instance before resizing'
nl|'\n'
name|'if'
name|'not'
name|'vm_utils'
op|'.'
name|'clean_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Clean shutdown did not complete successfully, "'
nl|'\n'
string|'"trying hard shutdown."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'2'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. Copy VDI, resize partition and filesystem, forget VDI,'
nl|'\n'
comment|'# truncate VHD'
nl|'\n'
name|'new_ref'
op|','
name|'new_uuid'
op|'='
name|'vm_utils'
op|'.'
name|'resize_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vdi_ref'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'3'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 4. Transfer the new VHD'
nl|'\n'
name|'self'
op|'.'
name|'_migrate_vhd'
op|'('
name|'instance'
op|','
name|'new_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'4'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|"# Clean up VDI now that it's been copied"
nl|'\n'
name|'vm_utils'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'new_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_disk_resizing_up
dedent|''
name|'def'
name|'_migrate_disk_resizing_up'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'sr_path'
op|')'
op|':'
newline|'\n'
comment|'# 1. Create Snapshot'
nl|'\n'
indent|'        '
name|'label'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'with'
name|'vm_utils'
op|'.'
name|'snapshot_attached_here'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
name|'as'
name|'vdi_uuids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'1'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2. Transfer the immutable VHDs (base-copies)'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The first VHD will be the leaf (aka COW) that is being used by'
nl|'\n'
comment|"# the VM. For this step, we're only interested in the immutable"
nl|'\n'
comment|'# VHDs which are all of the parents of the leaf VHD.'
nl|'\n'
name|'for'
name|'seq_num'
op|','
name|'vdi_uuid'
name|'in'
name|'itertools'
op|'.'
name|'islice'
op|'('
nl|'\n'
name|'enumerate'
op|'('
name|'vdi_uuids'
op|')'
op|','
number|'1'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_migrate_vhd'
op|'('
name|'instance'
op|','
name|'vdi_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|','
name|'seq_num'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'2'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. Now power down the instance'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'vm_utils'
op|'.'
name|'clean_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Clean shutdown did not complete successfully, "'
nl|'\n'
string|'"trying hard shutdown."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'3'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 4. Transfer the COW VHD'
nl|'\n'
name|'vdi_ref'
op|','
name|'vm_vdi_rec'
op|'='
name|'vm_utils'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'cow_uuid'
op|'='
name|'vm_vdi_rec'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_migrate_vhd'
op|'('
name|'instance'
op|','
name|'cow_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'4'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copies a VHD from one host machine to another, possibly\n        resizing filesystem before hand.\n\n        :param instance: the instance that owns the VHD in question.\n        :param dest: the destination host machine.\n        :param instance_type: instance_type to resize to\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'sr_path'
op|'='
name|'vm_utils'
op|'.'
name|'get_sr_path'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'resize_down'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'>'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'if'
name|'resize_down'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'auto_disk_config'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|"'Resize down not allowed without auto_disk_config'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ResizeError'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'# 0. Zero out the progress to begin'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'0'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): in case we're resizing to the same host (for dev"
nl|'\n'
comment|'# purposes), apply a suffix to name-label so the two VM records'
nl|'\n'
comment|"# extant until a confirm_resize don't collide."
nl|'\n'
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'set_vm_name_label'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resize_down'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_disk_resizing_down'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'instance_type'
op|','
name|'vm_ref'
op|','
name|'sr_path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_disk_resizing_up'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'vm_ref'
op|','
name|'sr_path'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): disk_info isn't used by the xenapi driver, instead it"
nl|'\n'
comment|'# uses a staging-area (/images/instance<uuid>) and sequence-numbered'
nl|'\n'
comment|'# VHDs to figure out how to reconstruct the VDI chain after syncing'
nl|'\n'
dedent|''
name|'disk_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'return'
name|'disk_info'
newline|'\n'
nl|'\n'
DECL|member|_resize_instance
dedent|''
name|'def'
name|'_resize_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'root_vdi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resize an instances root disk."""'
newline|'\n'
nl|'\n'
name|'new_disk_size'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'if'
name|'not'
name|'new_disk_size'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Get current size of VDI'
nl|'\n'
dedent|''
name|'virtual_size'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_virtual_size'"
op|','
nl|'\n'
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|')'
newline|'\n'
name|'virtual_size'
op|'='
name|'int'
op|'('
name|'virtual_size'
op|')'
newline|'\n'
nl|'\n'
name|'old_gb'
op|'='
name|'virtual_size'
op|'/'
op|'('
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'new_gb'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'virtual_size'
op|'<'
name|'new_disk_size'
op|':'
newline|'\n'
comment|'# Resize up. Simple VDI resize will do the trick'
nl|'\n'
indent|'            '
name|'vdi_uuid'
op|'='
name|'root_vdi'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resizing up VDI %(vdi_uuid)s from %(old_gb)dGB to "'
nl|'\n'
string|'"%(new_gb)dGB"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'resize_func_name'
op|'='
name|'self'
op|'.'
name|'check_resize_func_name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
name|'resize_func_name'
op|','
name|'root_vdi'
op|'['
string|"'ref'"
op|']'
op|','
nl|'\n'
name|'str'
op|'('
name|'new_disk_size'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resize complete"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_resize_func_name
dedent|''
dedent|''
name|'def'
name|'check_resize_func_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check the function name used to resize an instance based\n        on product_brand and product_version."""'
newline|'\n'
nl|'\n'
name|'brand'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'product_brand'
newline|'\n'
name|'version'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'product_version'
newline|'\n'
nl|'\n'
comment|'# To maintain backwards compatibility. All recent versions'
nl|'\n'
comment|'# should use VDI.resize'
nl|'\n'
name|'if'
name|'bool'
op|'('
name|'version'
op|')'
name|'and'
name|'bool'
op|'('
name|'brand'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'xcp'
op|'='
name|'brand'
op|'=='
string|"'XCP'"
newline|'\n'
name|'r1_2_or_above'
op|'='
op|'('
nl|'\n'
op|'('
nl|'\n'
name|'version'
op|'['
number|'0'
op|']'
op|'=='
number|'1'
nl|'\n'
name|'and'
name|'version'
op|'['
number|'1'
op|']'
op|'>'
number|'1'
nl|'\n'
op|')'
nl|'\n'
name|'or'
name|'version'
op|'['
number|'0'
op|']'
op|'>'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'xenserver'
op|'='
name|'brand'
op|'=='
string|"'XenServer'"
newline|'\n'
name|'r6_or_above'
op|'='
name|'version'
op|'['
number|'0'
op|']'
op|'>'
number|'5'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'xcp'
name|'and'
name|'not'
name|'r1_2_or_above'
op|')'
name|'or'
op|'('
name|'xenserver'
name|'and'
name|'not'
name|'r6_or_above'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'VDI.resize_online'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
string|"'VDI.resize'"
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'reboot_type'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot VM instance."""'
newline|'\n'
comment|'# Note (salvatore-orlando): security group rules are not re-enforced'
nl|'\n'
comment|'# upon reboot, since this action on the XenAPI drivers does not'
nl|'\n'
comment|'# remove existing filters'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|','
name|'check_rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'reboot_type'
op|'=='
string|'"HARD"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.hard_reboot'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.clean_reboot'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'details'
op|'='
name|'exc'
op|'.'
name|'details'
newline|'\n'
name|'if'
op|'('
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'VM_BAD_POWER_STATE'"
name|'and'
nl|'\n'
name|'details'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'halted'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Starting halted instance found during reboot"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
nl|'\n'
name|'bad_volumes_callback'
op|'='
name|'bad_volumes_callback'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'SR_BACKEND_FAILURE_46'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Reboot failed due to bad volumes, detaching bad"'
nl|'\n'
string|'" volumes and starting halted instance"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
nl|'\n'
name|'bad_volumes_callback'
op|'='
name|'bad_volumes_callback'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|set_admin_password
dedent|''
dedent|''
dedent|''
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'new_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password on the VM instance."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'set_admin_password'
op|'('
name|'new_pass'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_file
dedent|''
dedent|''
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the VM instance."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'inject_file'
op|'('
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_sanitize_xenstore_key
name|'def'
name|'_sanitize_xenstore_key'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Xenstore only allows the following characters as keys:\n\n        ABCDEFGHIJKLMNOPQRSTUVWXYZ\n        abcdefghijklmnopqrstuvwxyz\n        0123456789-/_@\n\n        So convert the others to _\n\n        Also convert / to _, because that is somewhat like a path\n        separator.\n        """'
newline|'\n'
name|'allowed_chars'
op|'='
op|'('
string|'"ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
nl|'\n'
string|'"abcdefghijklmnopqrstuvwxyz"'
nl|'\n'
string|'"0123456789-_@"'
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'x'
name|'in'
name|'allowed_chars'
name|'and'
name|'x'
name|'or'
string|"'_'"
name|'for'
name|'x'
name|'in'
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_instance_metadata
dedent|''
name|'def'
name|'inject_instance_metadata'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject instance metadata into xenstore."""'
newline|'\n'
DECL|function|store_meta
name|'def'
name|'store_meta'
op|'('
name|'topdir'
op|','
name|'data_list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'item'
name|'in'
name|'data_list'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'self'
op|'.'
name|'_sanitize_xenstore_key'
op|'('
name|'item'
op|'['
string|"'key'"
op|']'
op|')'
newline|'\n'
name|'value'
op|'='
name|'item'
op|'['
string|"'value'"
op|']'
name|'or'
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
string|"'%s/%s'"
op|'%'
op|'('
name|'topdir'
op|','
name|'key'
op|')'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Store user metadata'
nl|'\n'
dedent|''
dedent|''
name|'store_meta'
op|'('
string|"'vm-data/user-metadata'"
op|','
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|change_instance_metadata
dedent|''
name|'def'
name|'change_instance_metadata'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'diff'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply changes to instance metadata to xenstore."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'change'
name|'in'
name|'diff'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'self'
op|'.'
name|'_sanitize_xenstore_key'
op|'('
name|'key'
op|')'
newline|'\n'
name|'location'
op|'='
string|"'vm-data/user-metadata/%s'"
op|'%'
name|'key'
newline|'\n'
name|'if'
name|'change'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_remove_from_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'location'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_delete_from_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|"# catch KeyError for domid if instance isn't running"
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'change'
op|'['
number|'0'
op|']'
op|'=='
string|"'+'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'location'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'change'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_write_to_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
name|'change'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|"# catch KeyError for domid if instance isn't running"
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_find_root_vdi_ref
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_find_root_vdi_ref'
op|'('
name|'self'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find and return the root vdi ref for a VM."""'
newline|'\n'
name|'if'
name|'not'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'vbd_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'vbd_uuid'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'vbd'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_record"'
op|','
name|'vbd_uuid'
op|')'
newline|'\n'
name|'if'
name|'vbd'
op|'['
string|'"userdevice"'
op|']'
op|'=='
name|'DEVICE_ROOT'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vbd'
op|'['
string|'"VDI"'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"Unable to find root VBD/VDI for VM"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_vdis
dedent|''
name|'def'
name|'_destroy_vdis'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys all VDIs associated with a VM."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Destroying VDIs"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'vdi_refs'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vdi_refs'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'vdi_ref'
name|'in'
name|'vdi_refs'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_utils'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'volume_utils'
op|'.'
name|'StorageError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_kernel_ramdisk
dedent|''
dedent|''
dedent|''
name|'def'
name|'_destroy_kernel_ramdisk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Three situations can occur:\n\n            1. We have neither a ramdisk nor a kernel, in which case we are a\n               RAW image and can omit this step\n\n            2. We have one or the other, in which case, we should flag as an\n               error\n\n            3. We have both, in which case we safely remove both the kernel\n               and the ramdisk.\n\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|':'
newline|'\n'
comment|'# 1. No kernel or ramdisk'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Using RAW or VHD, skipping kernel and ramdisk "'
nl|'\n'
string|'"deletion"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'instance'
op|'['
string|"'kernel_id'"
op|']'
name|'and'
name|'instance'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
op|':'
newline|'\n'
comment|'# 2. We only have kernel xor ramdisk'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnacceptable'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance has a kernel or ramdisk but not both"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. We have both kernel and ramdisk'
nl|'\n'
dedent|''
op|'('
name|'kernel'
op|','
name|'ramdisk'
op|')'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'kernel'
name|'or'
name|'ramdisk'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'destroy_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'kernel'
op|','
name|'ramdisk'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"kernel/ramdisk files removed"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_rescue_instance
dedent|''
dedent|''
name|'def'
name|'_destroy_rescue_instance'
op|'('
name|'self'
op|','
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy a rescue instance."""'
newline|'\n'
comment|'# Shutdown Rescue VM'
nl|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
name|'state'
op|'='
name|'vm_utils'
op|'.'
name|'compile_info'
op|'('
name|'vm_rec'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'!='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.hard_shutdown"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy Rescue VDIs'
nl|'\n'
dedent|''
name|'vdi_refs'
op|'='
name|'vm_utils'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
name|'root_vdi_ref'
op|'='
name|'self'
op|'.'
name|'_find_root_vdi_ref'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'vdi_refs'
op|'='
op|'['
name|'vdi_ref'
name|'for'
name|'vdi_ref'
name|'in'
name|'vdi_refs'
name|'if'
name|'vdi_ref'
op|'!='
name|'root_vdi_ref'
op|']'
newline|'\n'
name|'vm_utils'
op|'.'
name|'safe_destroy_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy Rescue VM'
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.destroy"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VM instance.\n\n        This is the method exposed by xenapi_conn.destroy(). The rest of the\n        destroy_* methods are internal.\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Destroying VM"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|"# We don't use _get_vm_opaque_ref because the instance may"
nl|'\n'
comment|'# truly not exist because of a failure during build. A valid'
nl|'\n'
comment|'# vm_ref is checked correctly where necessary.'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): `block_device_info` is not used, information about which'
nl|'\n'
comment|'# volumes should be detached is determined by the'
nl|'\n'
comment|"# VBD.other_config['osvol'] attribute"
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy
dedent|''
name|'def'
name|'_destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys VM instance by performing:\n\n            1. A shutdown\n            2. Destroying associated VDIs.\n            3. Destroying kernel and ramdisk files (if necessary).\n            4. Destroying that actual VM record.\n\n        """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"VM is not present, skipping destroy..."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'destroy_disks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_all'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_vdis'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_kernel_ramdisk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_utils'
op|'.'
name|'destroy_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.pause'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.unpause'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.suspend'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.resume'"
op|','
name|'vm_ref'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance.\n\n            - shutdown the instance VM.\n            - set \'bootlock\' to prevent the instance from starting in rescue.\n            - spawn a rescue VM (the vm name-label will be instance-N-rescue).\n\n        """'
newline|'\n'
name|'rescue_name_label'
op|'='
string|"'%s-rescue'"
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_name_label'
op|')'
newline|'\n'
name|'if'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|'"Instance is already in Rescue Mode: %s"'
op|')'
nl|'\n'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'rescue_password'
op|','
nl|'\n'
name|'network_info'
op|','
name|'name_label'
op|'='
name|'rescue_name_label'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance.\n\n            - unplug the instance VM\'s disk from the rescue VM.\n            - teardown the rescue VM.\n            - release the bootlock to allow the instance VM to start.\n\n        """'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotInRescueMode'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'original_vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|soft_delete
dedent|''
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Soft delete the specified instance."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"VM is not present, skipping soft delete..."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|restore
dedent|''
dedent|''
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_utils'
op|'.'
name|'hard_shutdown_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cancel_stale_tasks
dedent|''
name|'def'
name|'_cancel_stale_tasks'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'task'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the given tasks that are older than the given timeout."""'
newline|'\n'
name|'task_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.get_by_name_label"'
op|','
name|'task'
op|')'
newline|'\n'
name|'for'
name|'task_ref'
name|'in'
name|'task_refs'
op|':'
newline|'\n'
indent|'            '
name|'task_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.get_record"'
op|','
name|'task_ref'
op|')'
newline|'\n'
name|'task_created'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
name|'task_rec'
op|'['
string|'"created"'
op|']'
op|'.'
name|'value'
op|','
nl|'\n'
string|'"%Y%m%dT%H:%M:%SZ"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'task_created'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.cancel"'
op|','
name|'task_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
dedent|''
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for expirable rebooting instances.\n\n            - issue a "hard" reboot to any instance that has been stuck in a\n              reboot state for >= the given timeout\n        """'
newline|'\n'
comment|'# NOTE(jk0): All existing clean_reboot tasks must be cancelled before'
nl|'\n'
comment|'# we can kick off the hard_reboot tasks.'
nl|'\n'
name|'self'
op|'.'
name|'_cancel_stale_tasks'
op|'('
name|'timeout'
op|','
string|"'VM.clean_reboot'"
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instances_info'
op|'='
name|'dict'
op|'('
name|'instance_count'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instances_info'
op|'['
string|'"instance_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(instance_count)d hung reboots "'
nl|'\n'
string|'"older than %(timeout)d seconds"'
op|')'
op|'%'
name|'instances_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically hard rebooting"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
string|'"HARD"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'vm_utils'
op|'.'
name|'compile_info'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'vm_utils'
op|'.'
name|'compile_diagnostics'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vif_device_map
dedent|''
name|'def'
name|'_get_vif_device_map'
op|'('
name|'self'
op|','
name|'vm_rec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vif'
name|'in'
op|'['
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VIF.get_record"'
op|','
name|'vrec'
op|')'
nl|'\n'
name|'for'
name|'vrec'
name|'in'
name|'vm_rec'
op|'['
string|"'VIFs'"
op|']'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'vif_map'
op|'['
name|'vif'
op|'['
string|"'device'"
op|']'
op|']'
op|'='
name|'vif'
op|'['
string|"'MAC'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'vif_map'
newline|'\n'
nl|'\n'
DECL|member|get_all_bw_counters
dedent|''
name|'def'
name|'get_all_bw_counters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return running bandwidth counter for each interface on each\n           running VM"""'
newline|'\n'
name|'counters'
op|'='
name|'vm_utils'
op|'.'
name|'fetch_bandwidth'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'bw'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif_map'
op|'='
name|'self'
op|'.'
name|'_get_vif_device_map'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
name|'name'
op|'='
name|'vm_rec'
op|'['
string|"'name_label'"
op|']'
newline|'\n'
name|'if'
string|"'nova_uuid'"
name|'not'
name|'in'
name|'vm_rec'
op|'['
string|"'other_config'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'dom'
op|'='
name|'vm_rec'
op|'.'
name|'get'
op|'('
string|"'domid'"
op|')'
newline|'\n'
name|'if'
name|'dom'
name|'is'
name|'None'
name|'or'
name|'dom'
name|'not'
name|'in'
name|'counters'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'vifs_bw'
op|'='
name|'bw'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'vif_num'
op|','
name|'vif_data'
name|'in'
name|'counters'
op|'['
name|'dom'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'mac'
op|'='
name|'vif_map'
op|'['
name|'vif_num'
op|']'
newline|'\n'
name|'vif_data'
op|'['
string|"'mac_address'"
op|']'
op|'='
name|'mac'
newline|'\n'
name|'vifs_bw'
op|'['
name|'mac'
op|']'
op|'='
name|'vif_data'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'bw'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return snapshot of console."""'
newline|'\n'
comment|'# TODO(armando-migliaccio): implement this to fix pylint!'
nl|'\n'
name|'return'
string|"'FAKE CONSOLE OUTPUT of instance'"
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console."""'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'RESCUED'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'%s-rescue'"
op|'%'
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# The rescue instance might not be ready at this point.'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'vm_utils'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# The compute manager expects InstanceNotFound for this case.'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'session_id'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_session_id'
op|'('
op|')'
newline|'\n'
name|'path'
op|'='
string|'"/console?ref=%s&session_id=%s"'
op|'%'
op|'('
name|'str'
op|'('
name|'vm_ref'
op|')'
op|','
name|'session_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE: XS5.6sp2+ use http over port 80 for xenapi com'
nl|'\n'
name|'return'
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'vncserver_proxyclient_address'
op|','
string|"'port'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
name|'path'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_vif_xenstore_data
dedent|''
name|'def'
name|'_vif_xenstore_data'
op|'('
name|'self'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""convert a network info vif to injectable instance data."""'
newline|'\n'
nl|'\n'
DECL|function|get_ip
name|'def'
name|'get_ip'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'ip'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fixed_ip_dict
dedent|''
name|'def'
name|'fixed_ip_dict'
op|'('
name|'ip'
op|','
name|'subnet'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'netmask'
op|'='
name|'str'
op|'('
name|'subnet'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'netmask'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'netmask'
op|'='
name|'subnet'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'_prefixlen'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'ip'"
op|':'
name|'ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|"'enabled'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'netmask'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'get_ip'
op|'('
name|'subnet'
op|'['
string|"'gateway'"
op|']'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|convert_route
dedent|''
name|'def'
name|'convert_route'
op|'('
name|'route'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'route'"
op|':'
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'route'
op|'['
string|"'cidr'"
op|']'
op|')'
op|'.'
name|'network'
op|')'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'route'
op|'['
string|"'cidr'"
op|']'
op|')'
op|'.'
name|'netmask'
op|')'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'get_ip'
op|'('
name|'route'
op|'['
string|"'gateway'"
op|']'
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'v4_subnets'
op|'='
op|'['
name|'subnet'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|']'
newline|'\n'
name|'v6_subnets'
op|'='
op|'['
name|'subnet'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): routes and DNS come from all subnets'
nl|'\n'
name|'routes'
op|'='
op|'['
name|'convert_route'
op|'('
name|'route'
op|')'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'for'
name|'route'
name|'in'
name|'subnet'
op|'['
string|"'routes'"
op|']'
op|']'
newline|'\n'
name|'dns'
op|'='
op|'['
name|'get_ip'
op|'('
name|'ip'
op|')'
name|'for'
name|'subnet'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'subnet'
op|'['
string|"'dns'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'info_dict'
op|'='
op|'{'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'mac'"
op|':'
name|'vif'
op|'['
string|"'address'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'v4_subnets'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): gateway and broadcast from first subnet'
nl|'\n'
comment|'#                  primary IP will be from first subnet'
nl|'\n'
comment|'#                  subnets are generally unordered :('
nl|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'gateway'"
op|']'
op|'='
name|'get_ip'
op|'('
name|'v4_subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|')'
newline|'\n'
name|'info_dict'
op|'['
string|"'broadcast'"
op|']'
op|'='
name|'str'
op|'('
name|'v4_subnets'
op|'['
number|'0'
op|']'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
name|'info_dict'
op|'['
string|"'ips'"
op|']'
op|'='
op|'['
name|'fixed_ip_dict'
op|'('
name|'ip'
op|','
name|'subnet'
op|')'
nl|'\n'
name|'for'
name|'subnet'
name|'in'
name|'v4_subnets'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'v6_subnets'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): gateway from first subnet'
nl|'\n'
comment|'#                  primary IP will be from first subnet'
nl|'\n'
comment|'#                  subnets are generally unordered :('
nl|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'gateway_v6'"
op|']'
op|'='
name|'get_ip'
op|'('
name|'v6_subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|')'
newline|'\n'
name|'info_dict'
op|'['
string|"'ip6s'"
op|']'
op|'='
op|'['
name|'fixed_ip_dict'
op|'('
name|'ip'
op|','
name|'subnet'
op|')'
nl|'\n'
name|'for'
name|'subnet'
name|'in'
name|'v6_subnets'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'routes'
op|':'
newline|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'routes'"
op|']'
op|'='
name|'routes'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'dns'
op|':'
newline|'\n'
indent|'            '
name|'info_dict'
op|'['
string|"'dns'"
op|']'
op|'='
name|'list'
op|'('
name|'set'
op|'('
name|'dns'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'info_dict'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate the network info and make calls to place it into the\n        xenstore and the xenstore param list.\n        vm_ref can be passed in because it will sometimes be different than\n        what vm_utils.lookup(session, instance[\'name\']) will find (ex: rescue)\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Injecting network info to xenstore"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'xs_data'
op|'='
name|'self'
op|'.'
name|'_vif_xenstore_data'
op|'('
name|'vif'
op|')'
newline|'\n'
name|'location'
op|'='
op|'('
string|"'vm-data/networking/%s'"
op|'%'
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
nl|'\n'
name|'location'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'xs_data'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_write_to_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
name|'xs_data'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|"# catch KeyError for domid if instance isn't running"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_create_vifs
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_vifs'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates vifs for an instance."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating vifs"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# this function raises if vm_ref is not a vm_opaque_ref'
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'device'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif_rec'
op|'='
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'device'
op|'='
name|'device'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'vif_rec'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VIF for network %(network_ref)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vif_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VIF.create'"
op|','
name|'vif_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VIF %(vif_ref)s, network %(network_ref)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vifs
dedent|''
dedent|''
name|'def'
name|'plug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up VIF networking on the host."""'
newline|'\n'
name|'for'
name|'device'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'device'
op|'='
name|'device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vifs
dedent|''
dedent|''
name|'def'
name|'unplug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset_network
dedent|''
dedent|''
dedent|''
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls resetnetwork method in agent."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'agent_enabled'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'agent'
op|'='
name|'self'
op|'.'
name|'_get_agent'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'agent'
op|'.'
name|'resetnetwork'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_hostname
dedent|''
dedent|''
name|'def'
name|'inject_hostname'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject the hostname of the instance into the xenstore."""'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'os_type'"
op|']'
op|'=='
string|'"windows"'
op|':'
newline|'\n'
comment|'# NOTE(jk0): Windows hostnames can only be <= 15 chars.'
nl|'\n'
indent|'            '
name|'hostname'
op|'='
name|'hostname'
op|'['
op|':'
number|'15'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Injecting hostname to xenstore"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
string|"'vm-data/hostname'"
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_write_to_xenstore
dedent|''
name|'def'
name|'_write_to_xenstore'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'value'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Writes the passed value to the xenstore record for the given VM\n        at the specified location. A XenAPIPlugin.PluginError will be raised\n        if any error is encountered in the write process.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'xenstore.py'"
op|','
string|"'write_record'"
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'path'
op|'='
name|'path'
op|','
nl|'\n'
name|'value'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_from_xenstore
dedent|''
name|'def'
name|'_delete_from_xenstore'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deletes the value from the xenstore record for the given VM at\n        the specified location.  A XenAPIPlugin.PluginError will be\n        raised if any error is encountered in the delete process.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'xenstore.py'"
op|','
string|"'delete_record'"
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'path'
op|'='
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_plugin_call
dedent|''
name|'def'
name|'_make_plugin_call'
op|'('
name|'self'
op|','
name|'plugin'
op|','
name|'method'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'addl_args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Abstracts out the process of calling a method of a xenapi plugin.\n        Any errors raised by the plugin will in turn raise a RuntimeError here.\n        """'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance'
name|'or'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'args'
op|'['
string|"'dom_id'"
op|']'
op|'='
name|'vm_rec'
op|'['
string|"'domid'"
op|']'
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'update'
op|'('
name|'addl_args'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
name|'plugin'
op|','
name|'method'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'err_msg'
op|'='
name|'e'
op|'.'
name|'details'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
string|"'TIMEOUT:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'TIMEOUT: The call to %(method)s timed out. '"
nl|'\n'
string|"'args=%(args)r'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'timeout'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'elif'
string|"'NOT IMPLEMENTED:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'NOT IMPLEMENTED: The call to %(method)s is not'"
nl|'\n'
string|"' supported by the agent. args=%(args)r'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'notimplemented'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'The call to %(method)s returned an error: %(e)s. '"
nl|'\n'
string|"'args=%(args)r'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'error'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_add_to_param_xenstore
dedent|''
dedent|''
name|'def'
name|'_add_to_param_xenstore'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Takes a key/value pair and adds it to the xenstore parameter\n        record for the given vm instance. If the key exists in xenstore,\n        it is overwritten\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_remove_from_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.add_to_xenstore_data'"
op|','
name|'vm_ref'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_from_param_xenstore
dedent|''
name|'def'
name|'_remove_from_param_xenstore'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Takes a single key and removes it from the xenstore parameter\n        record data for the given VM.\n        If the key doesn\'t exist, the request is ignored.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.remove_from_xenstore_data'"
op|','
name|'vm_ref'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""recreates security group rules for every instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""recreates security group rules for every instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_instance_security_rules
dedent|''
name|'def'
name|'refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""recreates security group rules for specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_instance_security_rules'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes filters for each VIF of the specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_uuid_from_aggregate
dedent|''
name|'def'
name|'_get_host_uuid_from_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'current_aggregate'
op|'='
name|'self'
op|'.'
name|'_virtapi'
op|'.'
name|'aggregate_get_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'CONF'
op|'.'
name|'host'
op|','
name|'key'
op|'='
name|'pool_states'
op|'.'
name|'POOL_FLAG'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'current_aggregate'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AggregateHostNotFound'
op|'('
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'current_aggregate'
op|'.'
name|'metadetails'
op|'['
name|'hostname'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|"'Destination host:%(hostname)s must be in the same '"
nl|'\n'
string|"'aggregate as the source server'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_host_in_aggregate
dedent|''
dedent|''
name|'def'
name|'_ensure_host_in_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_host_uuid_from_aggregate'
op|'('
name|'context'
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_opaque_ref
dedent|''
name|'def'
name|'_get_host_opaque_ref'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host_uuid'
op|'='
name|'self'
op|'.'
name|'_get_host_uuid_from_aggregate'
op|'('
name|'context'
op|','
name|'hostname'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.get_by_uuid"'
op|','
name|'host_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_receive
dedent|''
name|'def'
name|'_migrate_receive'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'destref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
comment|'# Get the network to for migrate.'
nl|'\n'
comment|'# This is the one associated with the pif marked management. From cli:'
nl|'\n'
comment|'# uuid=`xe pif-list --minimal management=true`'
nl|'\n'
comment|'# xe pif-param-get param-name=network-uuid uuid=$uuid'
nl|'\n'
name|'expr'
op|'='
string|'\'field "management" = "true"\''
newline|'\n'
name|'pifs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'PIF.get_all_records_where'"
op|','
nl|'\n'
name|'expr'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'pifs'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'No suitable network for migrate'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'nwref'
op|'='
name|'pifs'
op|'['
name|'pifs'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|']'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'migrate_data'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.migrate_receive"'
op|','
nl|'\n'
name|'destref'
op|','
nl|'\n'
name|'nwref'
op|','
nl|'\n'
name|'options'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Migrate Receive failed'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'migrate_data'
newline|'\n'
nl|'\n'
DECL|member|_get_iscsi_srs
dedent|''
name|'def'
name|'_get_iscsi_srs'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'vbd_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'iscsi_srs'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_VDI"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
comment|"# Check if it's on an iSCSI SR"
nl|'\n'
name|'sr_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_SR"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"SR.get_type"'
op|','
name|'sr_ref'
op|')'
op|'=='
string|"'iscsi'"
op|':'
newline|'\n'
indent|'                '
name|'iscsi_srs'
op|'.'
name|'append'
op|'('
name|'sr_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'iscsi_srs'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_destination
dedent|''
name|'def'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it is possible to execute live migration.\n\n        :param context: security context\n        :param instance_ref: nova.db.sqlalchemy.models.Instance object\n        :param block_migration: if true, prepare for block migration\n        :param disk_over_commit: if true, allow disk over commit\n\n        """'
newline|'\n'
name|'dest_check_data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'migrate_send_data'
op|'='
name|'self'
op|'.'
name|'_migrate_receive'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'destination_sr_ref'
op|'='
name|'vm_utils'
op|'.'
name|'safe_find_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'dest_check_data'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'{'
string|'"block_migration"'
op|':'
name|'block_migration'
op|','
nl|'\n'
string|'"migrate_data"'
op|':'
op|'{'
string|'"migrate_send_data"'
op|':'
name|'migrate_send_data'
op|','
nl|'\n'
string|'"destination_sr_ref"'
op|':'
name|'destination_sr_ref'
op|'}'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'src'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_host_in_aggregate'
op|'('
name|'ctxt'
op|','
name|'src'
op|')'
newline|'\n'
comment|'# TODO(johngarbutt) we currently assume'
nl|'\n'
comment|'# instance is on a SR shared with other destination'
nl|'\n'
comment|'# block migration work will be able to resolve this'
nl|'\n'
dedent|''
name|'return'
name|'dest_check_data'
newline|'\n'
nl|'\n'
DECL|member|_is_xsm_sr_check_relaxed
dedent|''
name|'def'
name|'_is_xsm_sr_check_relaxed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cached_xsm_sr_relaxed'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'config_value'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'config_value'
op|'='
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'config_file'"
op|','
nl|'\n'
string|"'get_val'"
op|','
nl|'\n'
name|'key'
op|'='
string|"'relax-xsm-sr-check'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cached_xsm_sr_relaxed'
op|'='
name|'config_value'
op|'=='
string|'"true"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cached_xsm_sr_relaxed'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_source
dedent|''
dedent|''
name|'def'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it\'s possible to execute live migration on the source side.\n\n        :param context: security context\n        :param instance_ref: nova.db.sqlalchemy.models.Instance object\n        :param dest_check_data: data returned by the check on the\n                                destination, includes block_migration flag\n\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_get_iscsi_srs'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
comment|'# XAPI must support the relaxed SR check for live migrating with'
nl|'\n'
comment|'# iSCSI VBDs'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_is_xsm_sr_check_relaxed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'_'
op|'('
string|"'XAPI supporting '"
nl|'\n'
string|"'relax-xsm-sr-check=true requried'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'migrate_data'"
name|'in'
name|'dest_check_data'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'migrate_data'
op|'='
name|'dest_check_data'
op|'['
string|"'migrate_data'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_call_live_migrate_command'
op|'('
nl|'\n'
string|'"VM.assert_can_migrate"'
op|','
name|'vm_ref'
op|','
name|'migrate_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'VM.assert_can_migrate failed'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dest_check_data'
newline|'\n'
nl|'\n'
DECL|member|_generate_vdi_map
dedent|''
name|'def'
name|'_generate_vdi_map'
op|'('
name|'self'
op|','
name|'destination_sr_ref'
op|','
name|'vm_ref'
op|','
name|'sr_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""generate a vdi_map for _call_live_migrate_command."""'
newline|'\n'
name|'if'
name|'sr_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'sr_ref'
op|'='
name|'vm_utils'
op|'.'
name|'safe_find_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
dedent|''
name|'vm_vdis'
op|'='
name|'vm_utils'
op|'.'
name|'get_instance_vdis_for_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'('
name|'vdi'
op|','
name|'destination_sr_ref'
op|')'
name|'for'
name|'vdi'
name|'in'
name|'vm_vdis'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_live_migrate_command
dedent|''
name|'def'
name|'_call_live_migrate_command'
op|'('
name|'self'
op|','
name|'command_name'
op|','
name|'vm_ref'
op|','
name|'migrate_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""unpack xapi specific parameters, and call a live migrate command."""'
newline|'\n'
name|'destination_sr_ref'
op|'='
name|'migrate_data'
op|'['
string|"'destination_sr_ref'"
op|']'
newline|'\n'
name|'migrate_send_data'
op|'='
name|'migrate_data'
op|'['
string|"'migrate_send_data'"
op|']'
newline|'\n'
nl|'\n'
name|'vdi_map'
op|'='
name|'self'
op|'.'
name|'_generate_vdi_map'
op|'('
name|'destination_sr_ref'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add destination SR refs for all of the VDIs that we created'
nl|'\n'
comment|'# as part of the pre migration callback'
nl|'\n'
name|'if'
string|"'pre_live_migration_result'"
name|'in'
name|'migrate_data'
op|':'
newline|'\n'
indent|'            '
name|'pre_migrate_data'
op|'='
name|'migrate_data'
op|'['
string|"'pre_live_migration_result'"
op|']'
newline|'\n'
name|'sr_uuid_map'
op|'='
name|'pre_migrate_data'
op|'.'
name|'get'
op|'('
string|"'sr_uuid_map'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'for'
name|'sr_uuid'
name|'in'
name|'sr_uuid_map'
op|':'
newline|'\n'
comment|'# Source and destination SRs have the same UUID, so get the'
nl|'\n'
comment|'# reference for the local SR'
nl|'\n'
indent|'                '
name|'sr_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"SR.get_by_uuid"'
op|','
name|'sr_uuid'
op|')'
newline|'\n'
name|'vdi_map'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_generate_vdi_map'
op|'('
nl|'\n'
name|'sr_uuid_map'
op|'['
name|'sr_uuid'
op|']'
op|','
name|'vm_ref'
op|','
name|'sr_ref'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'vif_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
name|'command_name'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'migrate_send_data'
op|','
name|'True'
op|','
nl|'\n'
name|'vdi_map'
op|','
name|'vif_map'
op|','
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migrate
dedent|''
name|'def'
name|'live_migrate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'destination_hostname'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'migrate_data'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
string|"'Block Migration '"
nl|'\n'
string|"'requires migrate data from destination'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'iscsi_srs'
op|'='
name|'self'
op|'.'
name|'_get_iscsi_srs'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_call_live_migrate_command'
op|'('
nl|'\n'
string|'"VM.migrate_send"'
op|','
name|'vm_ref'
op|','
name|'migrate_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'_'
op|'('
string|"'Migrate Send failed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tidy up the iSCSI SRs'
nl|'\n'
dedent|''
name|'for'
name|'sr_ref'
name|'in'
name|'iscsi_srs'
op|':'
newline|'\n'
indent|'                    '
name|'volume_utils'
op|'.'
name|'forget_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'sr_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'host_ref'
op|'='
name|'self'
op|'.'
name|'_get_host_opaque_ref'
op|'('
name|'context'
op|','
nl|'\n'
name|'destination_hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.pool_migrate"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'host_ref'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'post_method'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'destination_hostname'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'recover_method'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'destination_hostname'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_per_instance_usage
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_per_instance_usage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get usage info about each active instance."""'
newline|'\n'
name|'usage'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_is_active
name|'def'
name|'_is_active'
op|'('
name|'vm_rec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'power_state'
op|'='
name|'vm_rec'
op|'['
string|"'power_state'"
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'power_state'
name|'in'
op|'['
string|"'running'"
op|','
string|"'paused'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_get_uuid
dedent|''
name|'def'
name|'_get_uuid'
op|'('
name|'vm_rec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'other_config'
op|'='
name|'vm_rec'
op|'['
string|"'other_config'"
op|']'
newline|'\n'
name|'return'
name|'other_config'
op|'.'
name|'get'
op|'('
string|"'nova_uuid'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'vm_utils'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
name|'_get_uuid'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'_is_active'
op|'('
name|'vm_rec'
op|')'
name|'and'
name|'uuid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'memory_mb'
op|'='
name|'int'
op|'('
name|'vm_rec'
op|'['
string|"'memory_static_max'"
op|']'
op|')'
op|'/'
number|'1024'
op|'/'
number|'1024'
newline|'\n'
name|'usage'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
name|'memory_mb'
op|','
string|"'uuid'"
op|':'
name|'uuid'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'usage'
newline|'\n'
nl|'\n'
DECL|member|attach_block_device_volumes
dedent|''
name|'def'
name|'attach_block_device_volumes'
op|'('
name|'self'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sr_uuid_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'block_device_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'block_device_map'
name|'in'
name|'block_device_info'
op|'['
nl|'\n'
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'sr_uuid'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_volume'
op|'('
nl|'\n'
name|'block_device_map'
op|'['
string|"'connection_info'"
op|']'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'block_device_map'
op|'['
string|"'mount_device'"
op|']'
op|','
nl|'\n'
name|'hotplug'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'sr_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.get_by_uuid'"
op|','
nl|'\n'
name|'sr_uuid'
op|')'
newline|'\n'
name|'sr_uuid_map'
op|'['
name|'sr_uuid'
op|']'
op|'='
name|'sr_ref'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Disconnect the volumes we just connected'
nl|'\n'
indent|'                '
name|'for'
name|'sr'
name|'in'
name|'sr_uuid_map'
op|':'
newline|'\n'
indent|'                    '
name|'volume_utils'
op|'.'
name|'forget_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'sr_uuid_map'
op|'['
name|'sr_ref'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'sr_uuid_map'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

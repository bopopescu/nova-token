begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManagement class for VM-related functions (spawn, reboot, etc).\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'M2Crypto'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
op|'.'
name|'manager'
name|'import'
name|'AuthManager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
op|'.'
name|'network_utils'
name|'import'
name|'NetworkHelper'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
op|'.'
name|'vm_utils'
name|'import'
name|'VMHelper'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
op|'.'
name|'vm_utils'
name|'import'
name|'ImageType'
newline|'\n'
nl|'\n'
DECL|variable|XenAPI
name|'XenAPI'
op|'='
name|'None'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.xenapi.vmops"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOps
name|'class'
name|'VMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Management class for VM-related tasks\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'XenAPI'
op|'='
name|'session'
op|'.'
name|'get_imported_xenapi'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'VMHelper'
op|'.'
name|'XenAPI'
op|'='
name|'self'
op|'.'
name|'XenAPI'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances"""'
newline|'\n'
name|'vms'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm'
name|'in'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_all'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_record'
op|'('
name|'vm'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rec'
op|'['
string|'"is_a_template"'
op|']'
name|'and'
name|'not'
name|'rec'
op|'['
string|'"is_control_domain"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'vms'
op|'.'
name|'append'
op|'('
name|'rec'
op|'['
string|'"name_label"'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'vms'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create VM instance"""'
newline|'\n'
name|'vm'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Duplicate'
op|'('
name|'_'
op|'('
string|"'Attempted to create'"
nl|'\n'
string|"' non-unique name %s'"
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|"#ensure enough free memory, otherwise don't bother"
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'VMHelper'
op|'.'
name|'ensure_free_mem'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'instance %s: not enough free memory'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'bridge'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
name|'network_ref'
op|'='
name|'NetworkHelper'
op|'.'
name|'find_network_with_bridge'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
name|'user'
op|'='
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_user'
op|'('
name|'instance'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'project'
op|'='
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'instance'
op|'.'
name|'project_id'
op|')'
newline|'\n'
comment|'#if kernel is not present we must download a raw disk'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'disk_image_type'
op|'='
name|'ImageType'
op|'.'
name|'DISK'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'disk_image_type'
op|'='
name|'ImageType'
op|'.'
name|'DISK_RAW'
newline|'\n'
dedent|''
name|'vdi_uuid'
op|'='
name|'VMHelper'
op|'.'
name|'fetch_image'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'id'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'image_id'
op|','
name|'user'
op|','
name|'project'
op|','
name|'disk_image_type'
op|')'
newline|'\n'
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
name|'vdi_uuid'
op|')'
newline|'\n'
comment|'#Have a look at the VDI and see if it has a PV kernel'
nl|'\n'
name|'pv_kernel'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'pv_kernel'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_image'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'id'
op|','
nl|'\n'
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
name|'kernel'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'kernel'
op|'='
name|'VMHelper'
op|'.'
name|'fetch_image'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'id'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'kernel_id'
op|','
name|'user'
op|','
name|'project'
op|','
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|')'
newline|'\n'
dedent|''
name|'ramdisk'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'            '
name|'ramdisk'
op|'='
name|'VMHelper'
op|'.'
name|'fetch_image'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'id'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'ramdisk_id'
op|','
name|'user'
op|','
name|'project'
op|','
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|')'
newline|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'create_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'kernel'
op|','
name|'ramdisk'
op|','
name|'pv_kernel'
op|')'
newline|'\n'
name|'VMHelper'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
number|'0'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'network_ref'
op|':'
newline|'\n'
indent|'            '
name|'VMHelper'
op|'.'
name|'create_vif'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'network_ref'
op|','
name|'instance'
op|'.'
name|'mac_address'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Starting VM %s...'"
op|')'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.start'"
op|','
name|'vm_ref'
op|','
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Spawning VM %(instance_name)s created %(vm_ref)s.'"
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(armando): Do we really need to do this in virt?'
nl|'\n'
name|'timer'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_boot
name|'def'
name|'_wait_for_boot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Instance %s: booted'"
op|')'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'instance %s: failed to boot'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'_wait_for_boot'
newline|'\n'
name|'return'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_opaque_ref
dedent|''
name|'def'
name|'_get_vm_opaque_ref'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Refactored out the common code of many methods that receive either\n        a vm name or a vm instance, and want a vm instance in return.\n        """'
newline|'\n'
name|'vm'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_or_vm'
op|'.'
name|'startswith'
op|'('
string|'"OpaqueRef:"'
op|')'
op|':'
newline|'\n'
comment|'# Got passed an opaque ref; return it'
nl|'\n'
indent|'                '
name|'return'
name|'instance_or_vm'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Must be the instance name'
nl|'\n'
indent|'                '
name|'instance_name'
op|'='
name|'instance_or_vm'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'AttributeError'
op|','
name|'KeyError'
op|')'
op|':'
newline|'\n'
comment|'# Note the the KeyError will only happen with fakes.py'
nl|'\n'
comment|'# Not a string; must be an ID or a vm instance'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'instance_or_vm'
op|','
op|'('
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'instance_obj'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'ctx'
op|','
name|'instance_or_vm'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance_obj'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|'# The unit tests screw this up, as they use an integer for'
nl|'\n'
comment|"# the vm name. I'd fix that up, but that's a matter for"
nl|'\n'
comment|'# another bug report. So for now, just try with the passed'
nl|'\n'
comment|'# value'
nl|'\n'
indent|'                    '
name|'instance_name'
op|'='
name|'instance_or_vm'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance_name'
op|'='
name|'instance_or_vm'
op|'.'
name|'name'
newline|'\n'
dedent|''
dedent|''
name|'vm'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance_name'
op|')'
newline|'\n'
name|'if'
name|'vm'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Instance not present %s'"
op|')'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create snapshot from a running VM instance\n\n        :param instance: instance to be snapshotted\n        :param image_id: id of image to upload to\n\n        Steps involved in a XenServer snapshot:\n\n        1. XAPI-Snapshot: Snapshotting the instance using XenAPI. This\n            creates: Snapshot (Template) VM, Snapshot VBD, Snapshot VDI,\n            Snapshot VHD\n\n        2. Wait-for-coalesce: The Snapshot VDI and Instance VDI both point to\n            a \'base-copy\' VDI.  The base_copy is immutable and may be chained\n            with other base_copies.  If chained, the base_copies\n            coalesce together, so, we must wait for this coalescing to occur to\n            get a stable representation of the data on disk.\n\n        3. Push-to-glance: Once coalesced, we call a plugin on the XenServer\n            that will bundle the VHDs together and then push the bundle into\n            Glance.\n        """'
newline|'\n'
nl|'\n'
comment|'#TODO(sirp): Add quiesce and VSS locking support when Windows support'
nl|'\n'
comment|'# is added'
nl|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting snapshot for VM %s"'
op|')'
op|','
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'label'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
op|'='
name|'VMHelper'
op|'.'
name|'create_snapshot'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'id'
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to Snapshot %(vm_ref)s: %(exc)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# call plugin to ship snapshot off to glance'
nl|'\n'
indent|'            '
name|'VMHelper'
op|'.'
name|'upload_image'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'id'
op|','
name|'template_vdi_uuids'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'template_vm_ref'
op|','
name|'shutdown'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'logging'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Finished snapshot and upload for VM %s"'
op|')'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot VM instance"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.clean_reboot'"
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_admin_password
dedent|''
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'new_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password on the VM instance. This is done via\n        an agent running on the VM. Communication between nova and the agent\n        is done via writing xenstore records. Since communication is done over\n        the XenAPI RPC calls, we need to encrypt the password. We\'re using a\n        simple Diffie-Hellman class instead of the more advanced one in\n        M2Crypto for compatibility with the agent code.\n        """'
newline|'\n'
comment|'# Need to uniquely identify this request.'
nl|'\n'
name|'transaction_id'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# The simple Diffie-Hellman class is used to manage key exchange.'
nl|'\n'
name|'dh'
op|'='
name|'SimpleDH'
op|'('
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'id'"
op|':'
name|'transaction_id'
op|','
string|"'pub'"
op|':'
name|'str'
op|'('
name|'dh'
op|'.'
name|'get_public'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'key_init'"
op|','
name|'instance'
op|','
string|"''"
op|','
name|'args'
op|')'
newline|'\n'
name|'if'
name|'resp'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# No response from the agent'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'resp_dict'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'resp'
op|')'
newline|'\n'
comment|"# Successful return code from key_init is 'D0'"
nl|'\n'
name|'if'
name|'resp_dict'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'D0'"
op|':'
newline|'\n'
comment|'# There was some sort of error; the message will contain'
nl|'\n'
comment|'# a description of the error.'
nl|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'resp_dict'
op|'['
string|"'message'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'agent_pub'
op|'='
name|'int'
op|'('
name|'resp_dict'
op|'['
string|"'message'"
op|']'
op|')'
newline|'\n'
name|'dh'
op|'.'
name|'compute_shared'
op|'('
name|'agent_pub'
op|')'
newline|'\n'
name|'enc_pass'
op|'='
name|'dh'
op|'.'
name|'encrypt'
op|'('
name|'new_pass'
op|')'
newline|'\n'
comment|'# Send the encrypted password'
nl|'\n'
name|'args'
op|'['
string|"'enc_pass'"
op|']'
op|'='
name|'enc_pass'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'password'"
op|','
name|'instance'
op|','
string|"''"
op|','
name|'args'
op|')'
newline|'\n'
name|'if'
name|'resp'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# No response from the agent'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'resp_dict'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'resp'
op|')'
newline|'\n'
comment|"# Successful return code from password is '0'"
nl|'\n'
name|'if'
name|'resp_dict'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'0'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'resp_dict'
op|'['
string|"'message'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp_dict'
op|'['
string|"'message'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_shutdown
dedent|''
name|'def'
name|'_shutdown'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance """'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"VM %(vm)s already halted, skipping shutdown..."'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.hard_shutdown'"
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_vdis
dedent|''
dedent|''
name|'def'
name|'_destroy_vdis'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys all VDIs associated with a VM """'
newline|'\n'
name|'vdis'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VDI.destroy'"
op|','
name|'vdi'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_vm
dedent|''
dedent|''
dedent|''
name|'def'
name|'_destroy_vm'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys a VM record """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.destroy'"
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Destroy VM instance\n\n        This is the method exposed by xenapi_conn.destroy(). The rest of the\n        destroy_* methods are internal.\n        """'
newline|'\n'
name|'vm'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm'
op|','
name|'shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy
dedent|''
name|'def'
name|'_destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm'
op|','
name|'shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Destroys VM instance by performing:\n\n        1. A shutdown if requested\n        2. Destroying associated VDIs\n        3. Destroying that actual VM record\n        """'
newline|'\n'
name|'if'
name|'vm'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# Don't complain, just return.  This lets us clean up instances"
nl|'\n'
comment|'# that have already disappeared from the underlying platform.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'shutdown'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_shutdown'
op|'('
name|'instance'
op|','
name|'vm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_destroy_vdis'
op|'('
name|'instance'
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_vm'
op|'('
name|'instance'
op|','
name|'vm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_with_callback
dedent|''
name|'def'
name|'_wait_with_callback'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'task'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'wait_for_task'
op|'('
name|'instance_id'
op|','
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'ret'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.pause'"
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_with_callback'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause VM instance"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.unpause'"
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_with_callback'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""suspend the specified instance"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.suspend'"
op|','
name|'vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_with_callback'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""resume the specified instance"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.resume'"
op|','
name|'vm'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_with_callback'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'task'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM instance"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_record'
op|'('
name|'vm'
op|')'
newline|'\n'
name|'return'
name|'VMHelper'
op|'.'
name|'compile_info'
op|'('
name|'rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_record'
op|'('
name|'vm'
op|')'
newline|'\n'
name|'return'
name|'VMHelper'
op|'.'
name|'compile_diagnostics'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return snapshot of console"""'
newline|'\n'
comment|'# TODO: implement this to fix pylint!'
nl|'\n'
name|'return'
string|"'FAKE CONSOLE OUTPUT of instance'"
newline|'\n'
nl|'\n'
DECL|member|get_ajax_console
dedent|''
name|'def'
name|'get_ajax_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return link to instance\'s ajax console"""'
newline|'\n'
comment|'# TODO: implement this!'
nl|'\n'
name|'return'
string|"'http://fakeajaxconsole/fake_url'"
newline|'\n'
nl|'\n'
DECL|member|list_from_xenstore
dedent|''
name|'def'
name|'list_from_xenstore'
op|'('
name|'self'
op|','
name|'vm'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Runs the xenstore-ls command to get a listing of all records\n        from \'path\' downward. Returns a dict with the sub-paths as keys,\n        and the value stored in those paths as values. If nothing is\n        found at that path, returns None.\n        """'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'_make_xenstore_call'
op|'('
string|"'list_records'"
op|','
name|'vm'
op|','
name|'path'
op|')'
newline|'\n'
name|'return'
name|'json'
op|'.'
name|'loads'
op|'('
name|'ret'
op|')'
newline|'\n'
nl|'\n'
DECL|member|read_from_xenstore
dedent|''
name|'def'
name|'read_from_xenstore'
op|'('
name|'self'
op|','
name|'vm'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the value stored in the xenstore record for the given VM\n        at the specified location. A XenAPIPlugin.PluginError will be raised\n        if any error is encountered in the read process.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_make_xenstore_call'
op|'('
string|"'read_record'"
op|','
name|'vm'
op|','
name|'path'
op|','
nl|'\n'
op|'{'
string|"'ignore_missing_path'"
op|':'
string|"'True'"
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'ret'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|'=='
string|'"None"'
op|':'
newline|'\n'
comment|"# Can't marshall None over RPC calls."
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|write_to_xenstore
dedent|''
name|'def'
name|'write_to_xenstore'
op|'('
name|'self'
op|','
name|'vm'
op|','
name|'path'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Writes the passed value to the xenstore record for the given VM\n        at the specified location. A XenAPIPlugin.PluginError will be raised\n        if any error is encountered in the write process.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_xenstore_call'
op|'('
string|"'write_record'"
op|','
name|'vm'
op|','
name|'path'
op|','
nl|'\n'
op|'{'
string|"'value'"
op|':'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clear_xenstore
dedent|''
name|'def'
name|'clear_xenstore'
op|'('
name|'self'
op|','
name|'vm'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the VM\'s xenstore record for the specified path.\n        If there is no such record, the request is ignored.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_make_xenstore_call'
op|'('
string|"'delete_record'"
op|','
name|'vm'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_xenstore_call
dedent|''
name|'def'
name|'_make_xenstore_call'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'vm'
op|','
name|'path'
op|','
name|'addl_args'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles calls to the xenstore xenapi plugin."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'xenstore.py'"
op|','
name|'method'
op|'='
name|'method'
op|','
name|'vm'
op|'='
name|'vm'
op|','
nl|'\n'
name|'path'
op|'='
name|'path'
op|','
name|'addl_args'
op|'='
name|'addl_args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_agent_call
dedent|''
name|'def'
name|'_make_agent_call'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'vm'
op|','
name|'path'
op|','
name|'addl_args'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Abstracts out the interaction with the agent xenapi plugin."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'agent'"
op|','
name|'method'
op|'='
name|'method'
op|','
name|'vm'
op|'='
name|'vm'
op|','
nl|'\n'
name|'path'
op|'='
name|'path'
op|','
name|'addl_args'
op|'='
name|'addl_args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_plugin_call
dedent|''
name|'def'
name|'_make_plugin_call'
op|'('
name|'self'
op|','
name|'plugin'
op|','
name|'method'
op|','
name|'vm'
op|','
name|'path'
op|','
name|'addl_args'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Abstracts out the process of calling a method of a xenapi plugin.\n        Any errors raised by the plugin will in turn raise a RuntimeError here.\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'vm'
op|'.'
name|'id'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'vm'
op|')'
newline|'\n'
name|'rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_record'
op|'('
name|'vm'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'dom_id'"
op|':'
name|'rec'
op|'['
string|"'domid'"
op|']'
op|','
string|"'path'"
op|':'
name|'path'
op|'}'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'addl_args'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'async_call_plugin'
op|'('
name|'plugin'
op|','
name|'method'
op|','
name|'args'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'wait_for_task'
op|'('
name|'instance_id'
op|','
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'None'
newline|'\n'
name|'err_trace'
op|'='
name|'e'
op|'.'
name|'details'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'err_msg'
op|'='
name|'err_trace'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'strargs'
op|'='
name|'str'
op|'('
name|'args'
op|')'
newline|'\n'
name|'if'
string|"'TIMEOUT:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'TIMEOUT: The call to %(method)s timed out. '"
nl|'\n'
string|"'VM id=%(instance_id)s; args=%(strargs)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'The call to %(method)s returned an error: %(e)s. '"
nl|'\n'
string|"'VM id=%(instance_id)s; args=%(strargs)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|add_to_xenstore
dedent|''
name|'def'
name|'add_to_xenstore'
op|'('
name|'self'
op|','
name|'vm'
op|','
name|'path'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the passed key/value pair to the xenstore record for\n        the given VM at the specified location. A XenAPIPlugin.PluginError\n        will be raised if any error is encountered in the write process.\n        """'
newline|'\n'
name|'current'
op|'='
name|'self'
op|'.'
name|'read_from_xenstore'
op|'('
name|'vm'
op|','
name|'path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'current'
op|':'
newline|'\n'
comment|'# Nothing at that location'
nl|'\n'
indent|'            '
name|'current'
op|'='
op|'{'
name|'key'
op|':'
name|'value'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'current'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'write_to_xenstore'
op|'('
name|'vm'
op|','
name|'path'
op|','
name|'current'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_from_xenstore
dedent|''
name|'def'
name|'remove_from_xenstore'
op|'('
name|'self'
op|','
name|'vm'
op|','
name|'path'
op|','
name|'key_or_keys'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Takes either a single key or a list of keys and removes\n        them from the xenstoreirecord data for the given VM.\n        If the key doesn\'t exist, the request is ignored.\n        """'
newline|'\n'
name|'current'
op|'='
name|'self'
op|'.'
name|'list_from_xenstore'
op|'('
name|'vm'
op|','
name|'path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'current'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'key_or_keys'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
op|'['
name|'key_or_keys'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
name|'key_or_keys'
newline|'\n'
dedent|''
name|'keys'
op|'.'
name|'sort'
op|'('
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'cmp'
op|'('
name|'y'
op|'.'
name|'count'
op|'('
string|"'/'"
op|')'
op|','
name|'x'
op|'.'
name|'count'
op|'('
string|"'/'"
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'                '
name|'keypath'
op|'='
string|'"%s/%s"'
op|'%'
op|'('
name|'path'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'keypath'
op|'='
name|'key'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_make_xenstore_call'
op|'('
string|"'delete_record'"
op|','
name|'vm'
op|','
name|'keypath'
op|')'
newline|'\n'
nl|'\n'
comment|'########################################################################'
nl|'\n'
comment|'###### The following methods interact with the xenstore parameter'
nl|'\n'
comment|'###### record, not the live xenstore. They were created before I'
nl|'\n'
comment|'###### knew the difference, and are left in here in case they prove'
nl|'\n'
comment|"###### to be useful. They all have '_param' added to their method"
nl|'\n'
comment|'###### names to distinguish them. (dabo)'
nl|'\n'
comment|'########################################################################'
nl|'\n'
DECL|member|read_partial_from_param_xenstore
dedent|''
dedent|''
name|'def'
name|'read_partial_from_param_xenstore'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|','
name|'key_prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a dict of all the keys in the xenstore parameter record\n        for the given instance that begin with the key_prefix.\n        """'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'read_from_param_xenstore'
op|'('
name|'instance_or_vm'
op|')'
newline|'\n'
name|'badkeys'
op|'='
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
nl|'\n'
name|'if'
name|'not'
name|'k'
op|'.'
name|'startswith'
op|'('
name|'key_prefix'
op|')'
op|']'
newline|'\n'
name|'for'
name|'badkey'
name|'in'
name|'badkeys'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'data'
op|'['
name|'badkey'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|read_from_param_xenstore
dedent|''
name|'def'
name|'read_from_param_xenstore'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|','
name|'keys'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the xenstore parameter record data for the specified VM\n        instance as a dict. Accepts an optional key or list of keys; if a\n        value for \'keys\' is passed, the returned dict is filtered to only\n        return the values for those keys.\n        """'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_or_vm'
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi_request'
op|'('
string|"'VM.get_xenstore_data'"
op|','
nl|'\n'
op|'('
name|'vm'
op|','
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'keys'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'keys'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
op|'['
name|'keys'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'raw'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'raw'
op|':'
newline|'\n'
indent|'                '
name|'ret'
op|'['
name|'key'
op|']'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'raw'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ret'
op|'['
name|'key'
op|']'
op|'='
name|'raw'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|add_to_param_xenstore
dedent|''
name|'def'
name|'add_to_param_xenstore'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Takes a key/value pair and adds it to the xenstore parameter\n        record for the given vm instance. If the key exists in xenstore,\n        it is overwritten"""'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_or_vm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remove_from_param_xenstore'
op|'('
name|'instance_or_vm'
op|','
name|'key'
op|')'
newline|'\n'
name|'jsonval'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'val'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi_request'
op|'('
string|"'VM.add_to_xenstore_data'"
op|','
nl|'\n'
op|'('
name|'vm'
op|','
name|'key'
op|','
name|'jsonval'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write_to_param_xenstore
dedent|''
name|'def'
name|'write_to_param_xenstore'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Takes a dict and writes each key/value pair to the xenstore\n        parameter record for the given vm instance. Any existing data for\n        those keys is overwritten.\n        """'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'add_to_param_xenstore'
op|'('
name|'instance_or_vm'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_from_param_xenstore
dedent|''
dedent|''
name|'def'
name|'remove_from_param_xenstore'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|','
name|'key_or_keys'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Takes either a single key or a list of keys and removes\n        them from the xenstore parameter record data for the given VM.\n        If the key doesn\'t exist, the request is ignored.\n        """'
newline|'\n'
name|'vm'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance_or_vm'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'key_or_keys'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
op|'['
name|'key_or_keys'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
name|'key_or_keys'
newline|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi_request'
op|'('
string|"'VM.remove_from_xenstore_data'"
op|','
nl|'\n'
op|'('
name|'vm'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clear_param_xenstore
dedent|''
dedent|''
name|'def'
name|'clear_param_xenstore'
op|'('
name|'self'
op|','
name|'instance_or_vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes all data from the xenstore parameter record for this VM."""'
newline|'\n'
name|'self'
op|'.'
name|'write_to_param_xenstore'
op|'('
name|'instance_or_vm'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
comment|'########################################################################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_runproc
dedent|''
dedent|''
name|'def'
name|'_runproc'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pipe'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
newline|'\n'
name|'return'
name|'subprocess'
op|'.'
name|'Popen'
op|'('
op|'['
name|'cmd'
op|']'
op|','
name|'shell'
op|'='
name|'True'
op|','
name|'stdin'
op|'='
name|'pipe'
op|','
name|'stdout'
op|'='
name|'pipe'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'pipe'
op|','
name|'close_fds'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleDH
dedent|''
name|'class'
name|'SimpleDH'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This class wraps all the functionality needed to implement\n    basic Diffie-Hellman-Merkle key exchange in Python. It features\n    intelligent defaults for the prime and base numbers needed for the\n    calculation, while allowing you to supply your own. It requires that\n    the openssl binary be installed on the system on which this is run,\n    as it uses that to handle the encryption and decryption. If openssl\n    is not available, a RuntimeError will be raised.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'prime'
op|'='
name|'None'
op|','
name|'base'
op|'='
name|'None'
op|','
name|'secret'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""You can specify the values for prime and base if you wish;\n        otherwise, reasonable default values will be used.\n        """'
newline|'\n'
name|'if'
name|'prime'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prime'
op|'='
number|'162259276829213363391578010288127'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prime'
op|'='
name|'prime'
newline|'\n'
dedent|''
name|'if'
name|'base'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_base'
op|'='
number|'5'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_base'
op|'='
name|'base'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_shared'
op|'='
name|'self'
op|'.'
name|'_public'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_dh'
op|'='
name|'M2Crypto'
op|'.'
name|'DH'
op|'.'
name|'set_params'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'dec_to_mpi'
op|'('
name|'self'
op|'.'
name|'_prime'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dec_to_mpi'
op|'('
name|'self'
op|'.'
name|'_base'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_dh'
op|'.'
name|'gen_key'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_public'
op|'='
name|'self'
op|'.'
name|'mpi_to_dec'
op|'('
name|'self'
op|'.'
name|'_dh'
op|'.'
name|'pub'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_public
dedent|''
name|'def'
name|'get_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_public'
newline|'\n'
nl|'\n'
DECL|member|compute_shared
dedent|''
name|'def'
name|'compute_shared'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_shared'
op|'='
name|'self'
op|'.'
name|'bin_to_dec'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_dh'
op|'.'
name|'compute_key'
op|'('
name|'self'
op|'.'
name|'dec_to_mpi'
op|'('
name|'other'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_shared'
newline|'\n'
nl|'\n'
DECL|member|mpi_to_dec
dedent|''
name|'def'
name|'mpi_to_dec'
op|'('
name|'self'
op|','
name|'mpi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bn'
op|'='
name|'M2Crypto'
op|'.'
name|'m2'
op|'.'
name|'mpi_to_bn'
op|'('
name|'mpi'
op|')'
newline|'\n'
name|'hexval'
op|'='
name|'M2Crypto'
op|'.'
name|'m2'
op|'.'
name|'bn_to_hex'
op|'('
name|'bn'
op|')'
newline|'\n'
name|'dec'
op|'='
name|'int'
op|'('
name|'hexval'
op|','
number|'16'
op|')'
newline|'\n'
name|'return'
name|'dec'
newline|'\n'
nl|'\n'
DECL|member|bin_to_dec
dedent|''
name|'def'
name|'bin_to_dec'
op|'('
name|'self'
op|','
name|'binval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bn'
op|'='
name|'M2Crypto'
op|'.'
name|'m2'
op|'.'
name|'bin_to_bn'
op|'('
name|'binval'
op|')'
newline|'\n'
name|'hexval'
op|'='
name|'M2Crypto'
op|'.'
name|'m2'
op|'.'
name|'bn_to_hex'
op|'('
name|'bn'
op|')'
newline|'\n'
name|'dec'
op|'='
name|'int'
op|'('
name|'hexval'
op|','
number|'16'
op|')'
newline|'\n'
name|'return'
name|'dec'
newline|'\n'
nl|'\n'
DECL|member|dec_to_mpi
dedent|''
name|'def'
name|'dec_to_mpi'
op|'('
name|'self'
op|','
name|'dec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bn'
op|'='
name|'M2Crypto'
op|'.'
name|'m2'
op|'.'
name|'dec_to_bn'
op|'('
string|"'%s'"
op|'%'
name|'dec'
op|')'
newline|'\n'
name|'mpi'
op|'='
name|'M2Crypto'
op|'.'
name|'m2'
op|'.'
name|'bn_to_mpi'
op|'('
name|'bn'
op|')'
newline|'\n'
name|'return'
name|'mpi'
newline|'\n'
nl|'\n'
DECL|member|_run_ssl
dedent|''
name|'def'
name|'_run_ssl'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'which'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_cmd'
op|'='
op|'('
string|"'cat %(tmpfile)s | openssl enc -aes-128-cbc '"
nl|'\n'
string|"'-a -pass pass:%(shared)s -nosalt %(dec_flag)s'"
op|')'
newline|'\n'
name|'if'
name|'which'
op|'.'
name|'lower'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|"'d'"
op|':'
newline|'\n'
indent|'            '
name|'dec_flag'
op|'='
string|"' -d'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dec_flag'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'fd'
op|','
name|'tmpfile'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'file'
op|'('
name|'tmpfile'
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
name|'shared'
op|'='
name|'self'
op|'.'
name|'_shared'
newline|'\n'
name|'cmd'
op|'='
name|'base_cmd'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'proc'
op|'='
name|'_runproc'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'proc'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'proc'
op|'.'
name|'stderr'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'OpenSSL error: %s'"
op|')'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'proc'
op|'.'
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|encrypt
dedent|''
name|'def'
name|'encrypt'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_run_ssl'
op|'('
name|'text'
op|','
string|"'enc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|decrypt
dedent|''
name|'def'
name|'decrypt'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_run_ssl'
op|'('
name|'text'
op|','
string|"'dec'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

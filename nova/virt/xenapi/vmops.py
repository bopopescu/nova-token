begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManagement class for VM-related functions (spawn, reboot, etc).\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'binascii'
newline|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'network_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'vm_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'volume_utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|VolumeHelper
name|'VolumeHelper'
op|'='
name|'volume_utils'
op|'.'
name|'VolumeHelper'
newline|'\n'
DECL|variable|NetworkHelper
name|'NetworkHelper'
op|'='
name|'network_utils'
op|'.'
name|'NetworkHelper'
newline|'\n'
DECL|variable|VMHelper
name|'VMHelper'
op|'='
name|'vm_utils'
op|'.'
name|'VMHelper'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|xenapi_vmops_opts
name|'xenapi_vmops_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'agent_version_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'300'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'number of seconds to wait for agent '"
nl|'\n'
string|"'to be fully operational'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'xenapi_running_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'number of seconds to wait for instance '"
nl|'\n'
string|"'to go to running state'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'xenapi_vif_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.xenapi.vif.XenAPIBridgeDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The XenAPI VIF driver using XenServer Network APIs.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'xenapi_generate_swap'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to generate swap '"
nl|'\n'
string|"'(False means fetching it from OVA)'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'xenapi_vmops_opts'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'vncserver_proxyclient_address'"
op|','
string|"'nova.vnc'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|RESIZE_TOTAL_STEPS
name|'RESIZE_TOTAL_STEPS'
op|'='
number|'5'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cmp_version
name|'def'
name|'cmp_version'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compare two version strings (eg 0.0.1.10 > 0.0.1.9)"""'
newline|'\n'
name|'a'
op|'='
name|'a'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'b'
op|'='
name|'b'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Compare each individual portion of both version strings'
nl|'\n'
name|'for'
name|'va'
op|','
name|'vb'
name|'in'
name|'zip'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'int'
op|'('
name|'va'
op|')'
op|'-'
name|'int'
op|'('
name|'vb'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
comment|'# Fallback to comparing length last'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'len'
op|'('
name|'a'
op|')'
op|'-'
name|'len'
op|'('
name|'b'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_step_decorator
dedent|''
name|'def'
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory to create a decorator that records instance progress as a series\n    of discrete steps.\n\n    Each time the decorator is invoked we bump the total-step-count, so after::\n\n        @step\n        def step1():\n            ...\n\n        @step\n        def step2():\n            ...\n\n    we have a total-step-count of 2.\n\n    Each time the step-function (not the step-decorator!) is invoked, we bump\n    the current-step-count by 1, so after::\n\n        step1()\n\n    the current-step-count would be 1 giving a progress of ``1 / 2 *\n    100`` or 50%.\n    """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'step_info'
op|'='
name|'dict'
op|'('
name|'total'
op|'='
number|'0'
op|','
name|'current'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|bump_progress
name|'def'
name|'bump_progress'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step_info'
op|'['
string|"'current'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step_info'
op|'['
string|"'current'"
op|']'
op|')'
op|'/'
nl|'\n'
name|'step_info'
op|'['
string|"'total'"
op|']'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating progress to %(progress)d"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'progress'"
op|':'
name|'progress'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|step_decorator
dedent|''
name|'def'
name|'step_decorator'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step_info'
op|'['
string|"'total'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rv'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'bump_progress'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'step_decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOps
dedent|''
name|'class'
name|'VMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Management class for VM-related tasks\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'XenAPI'
op|'='
name|'session'
op|'.'
name|'get_imported_xenapi'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'self'
op|'.'
name|'poll_rescue_last_ran'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'firewall_driver'
name|'not'
name|'in'
name|'firewall'
op|'.'
name|'drivers'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'set_default'
op|'('
string|"'firewall_driver'"
op|','
name|'firewall'
op|'.'
name|'drivers'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'fw_class'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'='
name|'fw_class'
op|'('
name|'xenapi_session'
op|'='
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'vif_impl'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'FLAGS'
op|'.'
name|'xenapi_vif_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vif_driver'
op|'='
name|'vif_impl'
op|'('
name|'xenapi_session'
op|'='
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances."""'
newline|'\n'
comment|'# TODO(justinsb): Should we just always use the details method?'
nl|'\n'
comment|'#  Seems to be the same number of API calls..'
nl|'\n'
name|'name_labels'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'VMHelper'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name_labels'
op|'.'
name|'append'
op|'('
name|'vm_rec'
op|'['
string|'"name_label"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'name_labels'
newline|'\n'
nl|'\n'
DECL|member|list_instances_detail
dedent|''
name|'def'
name|'list_instances_detail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances, returning InstanceInfo objects."""'
newline|'\n'
name|'details'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'VMHelper'
op|'.'
name|'list_vms'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'vm_rec'
op|'['
string|'"name_label"'
op|']'
newline|'\n'
nl|'\n'
comment|'# TODO(justinsb): This a roundabout way to map the state'
nl|'\n'
name|'openstack_format'
op|'='
name|'VMHelper'
op|'.'
name|'compile_info'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
name|'state'
op|'='
name|'openstack_format'
op|'['
string|"'state'"
op|']'
newline|'\n'
nl|'\n'
name|'instance_info'
op|'='
name|'driver'
op|'.'
name|'InstanceInfo'
op|'('
name|'name'
op|','
name|'state'
op|')'
newline|'\n'
name|'details'
op|'.'
name|'append'
op|'('
name|'instance_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'details'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(sirp): the original vm was suffixed with '-orig'; find it using"
nl|'\n'
comment|'# the old suffix, remove the suffix, then power it back on.'
nl|'\n'
indent|'        '
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
comment|"# Remove the '-orig' suffix (which was added in case the resized VM"
nl|'\n'
comment|'# ends up on the source host, common during testing)'
nl|'\n'
name|'name_label'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'VMHelper'
op|'.'
name|'set_vm_name_label'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vdi_uuid'
op|'='
name|'self'
op|'.'
name|'_move_disks'
op|'('
name|'instance'
op|','
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resize_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_resize_instance'
op|'('
name|'instance'
op|','
name|'vdi_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'['
name|'dict'
op|'('
name|'vdi_type'
op|'='
string|"'root'"
op|','
name|'vdi_uuid'
op|'='
name|'vdi_uuid'
op|')'
op|']'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# 5. Start VM'
nl|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'5'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_start
dedent|''
name|'def'
name|'_start'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on a VM instance"""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.start_on'"
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
op|','
nl|'\n'
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_disks
dedent|''
name|'def'
name|'_create_disks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_image_type'
op|'='
name|'VMHelper'
op|'.'
name|'determine_disk_image_type'
op|'('
name|'image_meta'
op|')'
newline|'\n'
name|'vdis'
op|'='
name|'VMHelper'
op|'.'
name|'create_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'disk_image_type'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vdi'
op|'['
string|'"vdi_type"'
op|']'
op|'=='
string|'"root"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_resize_instance'
op|'('
name|'instance'
op|','
name|'vdi'
op|'['
string|'"vdi_uuid"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'step'
op|'='
name|'make_step_decorator'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'step'
newline|'\n'
DECL|function|vanity_step
name|'def'
name|'vanity_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(sirp): _create_disk will potentially take a *very* long'
nl|'\n'
comment|'# time to complete since it has to fetch the image over the'
nl|'\n'
comment|'# network and images can be several gigs in size. To avoid'
nl|'\n'
comment|'# progress remaining at 0% for too long, which will appear to be'
nl|'\n'
comment|'# an error, we insert a "vanity" step to bump the progress up one'
nl|'\n'
comment|'# notch above 0.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_disks_step
name|'def'
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vdis'
op|'='
name|'self'
op|'.'
name|'_create_disks'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_disks
name|'def'
name|'undo_create_disks'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'vdi_refs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|"'VDI.get_by_uuid'"
op|','
name|'vdi'
op|'['
string|"'vdi_uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'vdi_refs'
op|'.'
name|'append'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_safe_destroy_vdis'
op|'('
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_disks'
op|')'
newline|'\n'
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_kernel_ramdisk_step
name|'def'
name|'create_kernel_ramdisk_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel_file'
op|'='
name|'None'
newline|'\n'
name|'ramdisk_file'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
indent|'                '
name|'kernel'
op|'='
name|'VMHelper'
op|'.'
name|'create_kernel_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'instance'
op|'.'
name|'kernel_id'
op|','
name|'instance'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'project_id'
op|','
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'KERNEL'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'kernel_file'
op|'='
name|'kernel'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'                '
name|'ramdisk'
op|'='
name|'VMHelper'
op|'.'
name|'create_kernel_image'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
name|'instance'
op|'.'
name|'ramdisk_id'
op|','
name|'instance'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'project_id'
op|','
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'RAMDISK'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'ramdisk_file'
op|'='
name|'ramdisk'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_kernel_ramdisk
dedent|''
name|'def'
name|'undo_create_kernel_ramdisk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'kernel_file'
name|'or'
name|'ramdisk_file'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Removing kernel/ramdisk files from dom0"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_kernel_ramdisk_plugin_call'
op|'('
name|'kernel_file'
op|','
nl|'\n'
name|'ramdisk_file'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_kernel_ramdisk'
op|')'
newline|'\n'
name|'return'
name|'kernel_file'
op|','
name|'ramdisk_file'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|create_vm_step
name|'def'
name|'create_vm_step'
op|'('
name|'undo_mgr'
op|','
name|'vdis'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'vdis'
op|','
name|'network_info'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'kernel_file'
op|'='
name|'kernel_file'
op|','
nl|'\n'
name|'ramdisk_file'
op|'='
name|'ramdisk_file'
op|')'
newline|'\n'
nl|'\n'
DECL|function|undo_create_vm
name|'def'
name|'undo_create_vm'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'.'
name|'undo_with'
op|'('
name|'undo_create_vm'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|prepare_security_group_filters_step
name|'def'
name|'prepare_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'setup_basic_filtering'
op|'('
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(salvatore-orlando): setup_basic_filtering might be'
nl|'\n'
comment|'# empty or not implemented at all, as basic filter could'
nl|'\n'
comment|'# be implemented with VIF rules created by xapi plugin'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|boot_instance_step
name|'def'
name|'boot_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_boot_new_instance'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'step'
newline|'\n'
DECL|function|apply_security_group_filters_step
name|'def'
name|'apply_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'undo_mgr'
op|'='
name|'utils'
op|'.'
name|'UndoManager'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vanity_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'vdis'
op|'='
name|'create_disks_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
name|'kernel_file'
op|','
name|'ramdisk_file'
op|'='
name|'create_kernel_ramdisk_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'create_vm_step'
op|'('
name|'undo_mgr'
op|','
name|'vdis'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|')'
newline|'\n'
name|'prepare_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
nl|'\n'
name|'boot_instance_step'
op|'('
name|'undo_mgr'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'apply_security_group_filters_step'
op|'('
name|'undo_mgr'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to spawn, rolling back"'
op|')'
newline|'\n'
name|'undo_mgr'
op|'.'
name|'rollback_and_reraise'
op|'('
name|'msg'
op|'='
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_generate_hostname
dedent|''
dedent|''
name|'def'
name|'_generate_hostname'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the instance\'s hostname."""'
newline|'\n'
name|'hostname'
op|'='
name|'instance'
op|'['
string|'"hostname"'
op|']'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'instance'
op|','
string|'"_rescue"'
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
string|'"RESCUE-%s"'
op|'%'
name|'hostname'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'hostname'
newline|'\n'
nl|'\n'
DECL|member|_create_vm
dedent|''
name|'def'
name|'_create_vm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'vdis'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'kernel_file'
op|'='
name|'None'
op|','
name|'ramdisk_file'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create VM instance."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance_name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure enough free memory is available'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'VMHelper'
op|'.'
name|'ensure_free_mem'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InsufficientFreeMemory'
op|'('
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'disk_image_type'
op|'='
name|'VMHelper'
op|'.'
name|'determine_disk_image_type'
op|'('
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(jk0): Since vdi_type may contain either 'root' or 'swap', we"
nl|'\n'
comment|"# need to ensure that the 'swap' VDI is not chosen as the mount"
nl|'\n'
comment|'# point for file injection.'
nl|'\n'
name|'first_vdi_ref'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vdi'
op|'.'
name|'get'
op|'('
string|"'vdi_type'"
op|')'
op|'!='
string|"'swap'"
op|':'
newline|'\n'
comment|'# Create the VM ref and attach the first disk'
nl|'\n'
indent|'                '
name|'first_vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|"'VDI.get_by_uuid'"
op|','
name|'vdi'
op|'['
string|"'vdi_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'vm_mode'
op|'='
name|'instance'
op|'.'
name|'vm_mode'
name|'and'
name|'instance'
op|'.'
name|'vm_mode'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'vm_mode'
op|'=='
string|"'pv'"
op|':'
newline|'\n'
indent|'            '
name|'use_pv_kernel'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'vm_mode'
name|'in'
op|'('
string|"'hv'"
op|','
string|"'hvm'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'use_pv_kernel'
op|'='
name|'False'
newline|'\n'
name|'vm_mode'
op|'='
string|"'hvm'"
comment|'# Normalize'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'use_pv_kernel'
op|'='
name|'VMHelper'
op|'.'
name|'determine_is_pv'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'first_vdi_ref'
op|','
name|'disk_image_type'
op|','
name|'instance'
op|'.'
name|'os_type'
op|')'
newline|'\n'
name|'vm_mode'
op|'='
name|'use_pv_kernel'
name|'and'
string|"'pv'"
name|'or'
string|"'hvm'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'vm_mode'
op|'!='
name|'vm_mode'
op|':'
newline|'\n'
comment|'# Update database with normalized (or determined) value'
nl|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'vm_mode'"
op|':'
name|'vm_mode'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'create_vm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'kernel_file'
op|','
name|'ramdisk_file'
op|','
nl|'\n'
name|'use_pv_kernel'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add disks to VM'
nl|'\n'
name|'self'
op|'.'
name|'_attach_disks'
op|'('
name|'instance'
op|','
name|'disk_image_type'
op|','
name|'vm_ref'
op|','
name|'first_vdi_ref'
op|','
nl|'\n'
name|'vdis'
op|')'
newline|'\n'
nl|'\n'
comment|'# Alter the image before VM start for network injection.'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'flat_injected'
op|':'
newline|'\n'
indent|'            '
name|'VMHelper'
op|'.'
name|'preconfigure_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'first_vdi_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_vifs'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'hostname'
op|'='
name|'self'
op|'.'
name|'_generate_hostname'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inject_hostname'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_attach_disks
dedent|''
name|'def'
name|'_attach_disks'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'disk_image_type'
op|','
name|'vm_ref'
op|','
name|'first_vdi_ref'
op|','
nl|'\n'
name|'vdis'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# device 0 reserved for RW disk'
nl|'\n'
name|'userdevice'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# DISK_ISO needs two VBDs: the ISO disk and a blank RW disk'
nl|'\n'
name|'if'
name|'disk_image_type'
op|'=='
name|'vm_utils'
op|'.'
name|'ImageType'
op|'.'
name|'DISK_ISO'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Detected ISO image type, creating blank VM "'
nl|'\n'
string|'"for install"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'cd_vdi_ref'
op|'='
name|'first_vdi_ref'
newline|'\n'
name|'first_vdi_ref'
op|'='
name|'VMHelper'
op|'.'
name|'fetch_blank_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'VMHelper'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'first_vdi_ref'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|"# device 1 reserved for rescue disk and we've used '0'"
nl|'\n'
name|'userdevice'
op|'='
number|'2'
newline|'\n'
name|'VMHelper'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'cd_vdi_ref'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'vbd_type'
op|'='
string|"'CD'"
op|','
name|'bootable'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# set user device to next free value'
nl|'\n'
name|'userdevice'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'auto_disk_config'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Auto configuring disk, attempting to "'
nl|'\n'
string|'"resize partition..."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'VMHelper'
op|'.'
name|'auto_configure_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'first_vdi_ref'
op|','
nl|'\n'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'VMHelper'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'first_vdi_ref'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# set user device to next free value'
nl|'\n'
comment|"# userdevice 1 is reserved for rescue and we've used '0'"
nl|'\n'
name|'userdevice'
op|'='
number|'2'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_type'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'ctx'
op|','
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'swap_mb'
op|'='
name|'instance_type'
op|'['
string|"'swap'"
op|']'
newline|'\n'
name|'generate_swap'
op|'='
name|'swap_mb'
name|'and'
name|'FLAGS'
op|'.'
name|'xenapi_generate_swap'
newline|'\n'
name|'if'
name|'generate_swap'
op|':'
newline|'\n'
indent|'            '
name|'VMHelper'
op|'.'
name|'generate_swap'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'userdevice'
op|','
name|'swap_mb'
op|')'
newline|'\n'
name|'userdevice'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
name|'if'
name|'ephemeral_gb'
op|':'
newline|'\n'
indent|'            '
name|'VMHelper'
op|'.'
name|'generate_ephemeral'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'userdevice'
op|','
name|'ephemeral_gb'
op|')'
newline|'\n'
name|'userdevice'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Attach any other disks'
nl|'\n'
dedent|''
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
nl|'\n'
name|'vdi'
op|'['
string|"'vdi_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'generate_swap'
name|'and'
name|'vdi'
op|'['
string|"'vdi_type'"
op|']'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
comment|"# We won't be using it, so don't let it leak"
nl|'\n'
indent|'                '
name|'VMHelper'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'VMHelper'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
name|'userdevice'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_boot_new_instance
dedent|''
dedent|''
name|'def'
name|'_boot_new_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Boot a new instance and configure it."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Starting VM'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'agent_build'
op|'='
name|'db'
op|'.'
name|'agent_build_get_by_triple'
op|'('
name|'ctx'
op|','
string|"'xen'"
op|','
nl|'\n'
name|'instance'
op|'.'
name|'os_type'
op|','
name|'instance'
op|'.'
name|'architecture'
op|')'
newline|'\n'
name|'if'
name|'agent_build'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Latest agent build for %(hypervisor)s/%(os)s'"
nl|'\n'
string|"'/%(architecture)s is %(version)s'"
op|')'
op|'%'
name|'agent_build'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No agent build found for %(hypervisor)s/%(os)s'"
nl|'\n'
string|"'/%(architecture)s'"
op|')'
op|'%'
op|'{'
nl|'\n'
string|"'hypervisor'"
op|':'
string|"'xen'"
op|','
nl|'\n'
string|"'os'"
op|':'
name|'instance'
op|'.'
name|'os_type'
op|','
nl|'\n'
string|"'architecture'"
op|':'
name|'instance'
op|'.'
name|'architecture'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for boot to finish'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Waiting for instance state to become running'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'expiration'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
name|'FLAGS'
op|'.'
name|'xenapi_running_timeout'
newline|'\n'
name|'while'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'<'
name|'expiration'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0.5'
op|')'
newline|'\n'
nl|'\n'
comment|'# Update agent, if necessary'
nl|'\n'
comment|'# This also waits until the agent starts'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Querying agent version"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'version'
op|'='
name|'self'
op|'.'
name|'_get_agent_version'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance agent version: %s'"
op|')'
op|','
name|'version'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'version'
name|'and'
name|'agent_build'
name|'and'
nl|'\n'
name|'cmp_version'
op|'('
name|'version'
op|','
name|'agent_build'
op|'['
string|"'version'"
op|']'
op|')'
op|'<'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Updating Agent to %s'"
op|')'
op|','
name|'agent_build'
op|'['
string|"'version'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_agent_update'
op|'('
name|'instance'
op|','
name|'agent_build'
op|'['
string|"'url'"
op|']'
op|','
nl|'\n'
name|'agent_build'
op|'['
string|"'md5hash'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# if the guest agent is not available, configure the'
nl|'\n'
comment|'# instance, but skip the admin password configuration'
nl|'\n'
dedent|''
name|'no_agent'
op|'='
name|'version'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Inject files, if necessary'
nl|'\n'
name|'injected_files'
op|'='
name|'instance'
op|'.'
name|'injected_files'
newline|'\n'
name|'if'
name|'injected_files'
op|':'
newline|'\n'
comment|'# Check if this is a JSON-encoded string and convert if needed.'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'injected_files'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'injected_files'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'injected_files'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Invalid value for injected_files: %r"'
op|')'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# Inject any files, if specified'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'path'
op|','
name|'contents'
name|'in'
name|'instance'
op|'.'
name|'injected_files'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Injecting file path: \'%s\'"'
op|')'
op|'%'
name|'path'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inject_file'
op|'('
name|'instance'
op|','
name|'path'
op|','
name|'contents'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'admin_password'
op|'='
name|'instance'
op|'.'
name|'admin_pass'
newline|'\n'
comment|'# Set admin password, if necessary'
nl|'\n'
name|'if'
name|'admin_password'
name|'and'
name|'not'
name|'no_agent'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Setting admin password"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_admin_password'
op|'('
name|'instance'
op|','
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reset network config'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resetting network"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set VCPU weight'
nl|'\n'
name|'inst_type'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'ctx'
op|','
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'vcpu_weight'
op|'='
name|'inst_type'
op|'['
string|"'vcpu_weight'"
op|']'
newline|'\n'
name|'if'
name|'vcpu_weight'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Setting VCPU weight"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.add_to_VCPUs_params'"
op|','
name|'vm_ref'
op|','
nl|'\n'
string|"'weight'"
op|','
name|'str'
op|'('
name|'vcpu_weight'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_opaque_ref
dedent|''
dedent|''
name|'def'
name|'_get_vm_opaque_ref'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|"'Could not find VM with name %s'"
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_acquire_bootlock
dedent|''
name|'def'
name|'_acquire_bootlock'
op|'('
name|'self'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prevent an instance from booting."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|'"VM.set_blocked_operations"'
op|','
nl|'\n'
name|'vm'
op|','
nl|'\n'
op|'{'
string|'"start"'
op|':'
string|'""'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_release_bootlock
dedent|''
name|'def'
name|'_release_bootlock'
op|'('
name|'self'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow an instance to boot."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
nl|'\n'
string|'"VM.remove_from_blocked_operations"'
op|','
nl|'\n'
name|'vm'
op|','
nl|'\n'
string|'"start"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        :param context: request context\n        :param instance: instance to be snapshotted\n        :param image_id: id of image to upload to\n\n        Steps involved in a XenServer snapshot:\n\n        1. XAPI-Snapshot: Snapshotting the instance using XenAPI. This\n           creates: Snapshot (Template) VM, Snapshot VBD, Snapshot VDI,\n           Snapshot VHD\n\n        2. Wait-for-coalesce: The Snapshot VDI and Instance VDI both point to\n           a \'base-copy\' VDI.  The base_copy is immutable and may be chained\n           with other base_copies.  If chained, the base_copies\n           coalesce together, so, we must wait for this coalescing to occur to\n           get a stable representation of the data on disk.\n\n        3. Push-to-glance: Once coalesced, we call a plugin on the XenServer\n           that will bundle the VHDs together and then push the bundle into\n           Glance.\n\n        """'
newline|'\n'
name|'template_vm_ref'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_snapshot_info'
op|'='
name|'self'
op|'.'
name|'_create_snapshot'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
op|'='
name|'_snapshot_info'
newline|'\n'
comment|'# call plugin to ship snapshot off to glance'
nl|'\n'
name|'VMHelper'
op|'.'
name|'upload_image'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'template_vdi_uuids'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'template_vm_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'template_vm_ref'
op|','
nl|'\n'
name|'destroy_kernel_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Finished snapshot and upload for VM"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_snapshot
dedent|''
name|'def'
name|'_create_snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'#TODO(sirp): Add quiesce and VSS locking support when Windows support'
nl|'\n'
comment|'# is added'
nl|'\n'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Starting snapshot for VM"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'label'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
op|'='
name|'VMHelper'
op|'.'
name|'create_snapshot'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
newline|'\n'
name|'return'
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to Snapshot instance: %(exc)s"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_migrate_vhd
dedent|''
dedent|''
name|'def'
name|'_migrate_vhd'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vdi_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'dest'
op|','
nl|'\n'
string|"'vdi_uuid'"
op|':'
name|'vdi_uuid'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'sr_path'"
op|':'
name|'sr_path'
op|'}'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'_params'
op|'='
op|'{'
string|"'params'"
op|':'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'params'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
string|"'migration'"
op|','
string|"'transfer_vhd'"
op|','
nl|'\n'
name|'_params'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to transfer vhd to new host"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_orig_vm_name_label
dedent|''
dedent|''
name|'def'
name|'_get_orig_vm_name_label'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'.'
name|'name'
op|'+'
string|"'-orig'"
newline|'\n'
nl|'\n'
DECL|member|_update_instance_progress
dedent|''
name|'def'
name|'_update_instance_progress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'step'
op|','
name|'total_steps'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update instance progress percent to reflect current step number\n        """'
newline|'\n'
comment|"# FIXME(sirp): for now we're taking a KISS approach to instance"
nl|'\n'
comment|'# progress:'
nl|'\n'
comment|'# Divide the action\'s workflow into discrete steps and "bump" the'
nl|'\n'
comment|"# instance's progress field as each step is completed."
nl|'\n'
comment|'#'
nl|'\n'
comment|'# For a first cut this should be fine, however, for large VM images,'
nl|'\n'
comment|'# the _create_disks step begins to dominate the equation. A'
nl|'\n'
comment|'# better approximation would use the percentage of the VM image that'
nl|'\n'
comment|'# has been streamed to the destination host.'
nl|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step'
op|')'
op|'/'
name|'total_steps'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating progress to %(progress)d"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'progress'"
op|':'
name|'progress'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copies a VHD from one host machine to another, possibly\n        resizing filesystem before hand.\n\n        :param instance: the instance that owns the VHD in question.\n        :param dest: the destination host machine.\n        :param disk_type: values are \'primary\' or \'cow\'.\n\n        """'
newline|'\n'
comment|'# 0. Zero out the progress to begin'
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'0'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# The primary VDI becomes the COW after the snapshot, and we can'
nl|'\n'
comment|'# identify it via the VBD. The base copy is the parent_uuid returned'
nl|'\n'
comment|'# from the snapshot creation'
nl|'\n'
nl|'\n'
name|'base_copy_uuid'
op|'='
name|'cow_uuid'
op|'='
name|'None'
newline|'\n'
name|'template_vdi_uuids'
op|'='
name|'template_vm_ref'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# 1. Create Snapshot'
nl|'\n'
indent|'            '
name|'_snapshot_info'
op|'='
name|'self'
op|'.'
name|'_create_snapshot'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
op|'='
name|'_snapshot_info'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'1'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
name|'base_copy_uuid'
op|'='
name|'template_vdi_uuids'
op|'['
string|"'image'"
op|']'
newline|'\n'
name|'_vdi_info'
op|'='
name|'VMHelper'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'vdi_ref'
op|','
name|'vm_vdi_rec'
op|'='
name|'_vdi_info'
newline|'\n'
name|'cow_uuid'
op|'='
name|'vm_vdi_rec'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'sr_path'
op|'='
name|'VMHelper'
op|'.'
name|'get_sr_path'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'instance'
op|'['
string|"'auto_disk_config'"
op|']'
name|'and'
nl|'\n'
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'>'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|')'
op|':'
newline|'\n'
comment|'# Resizing disk storage down'
nl|'\n'
indent|'                '
name|'old_gb'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'new_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resizing down VDI %(cow_uuid)s from "'
nl|'\n'
string|'"%(old_gb)dGB to %(new_gb)dGB"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2. Power down the instance before resizing'
nl|'\n'
name|'self'
op|'.'
name|'_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hard'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'2'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. Copy VDI, resize partition and filesystem, forget VDI,'
nl|'\n'
comment|'# truncate VHD'
nl|'\n'
name|'new_ref'
op|','
name|'new_uuid'
op|'='
name|'VMHelper'
op|'.'
name|'resize_disk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vdi_ref'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'3'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 4. Transfer the new VHD'
nl|'\n'
name|'self'
op|'.'
name|'_migrate_vhd'
op|'('
name|'instance'
op|','
name|'new_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'4'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|"# Clean up VDI now that it's been copied"
nl|'\n'
name|'VMHelper'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'new_ref'
op|')'
newline|'\n'
nl|'\n'
name|'vdis'
op|'='
op|'{'
string|"'base_copy'"
op|':'
name|'new_uuid'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Resizing disk storage up, will be handled on destination'
nl|'\n'
nl|'\n'
comment|'# As an optimization, we transfer the base VDI first,'
nl|'\n'
comment|'# then shut down the VM, followed by transfering the COW'
nl|'\n'
comment|'# VDI.'
nl|'\n'
nl|'\n'
comment|'# 2. Transfer the base copy'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_migrate_vhd'
op|'('
name|'instance'
op|','
name|'base_copy_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'2'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. Now power down the instance'
nl|'\n'
name|'self'
op|'.'
name|'_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hard'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'3'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 4. Transfer the COW VHD'
nl|'\n'
name|'self'
op|'.'
name|'_migrate_vhd'
op|'('
name|'instance'
op|','
name|'cow_uuid'
op|','
name|'dest'
op|','
name|'sr_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'4'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(mdietz): we could also consider renaming these to'
nl|'\n'
comment|"# something sensible so we don't need to blindly pass"
nl|'\n'
comment|'# around dictionaries'
nl|'\n'
name|'vdis'
op|'='
op|'{'
string|"'base_copy'"
op|':'
name|'base_copy_uuid'
op|','
string|"'cow'"
op|':'
name|'cow_uuid'
op|'}'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): in case we're resizing to the same host (for dev"
nl|'\n'
comment|'# purposes), apply a suffix to name-label so the two VM records'
nl|'\n'
comment|"# extant until a confirm_resize don't collide."
nl|'\n'
dedent|''
name|'name_label'
op|'='
name|'self'
op|'.'
name|'_get_orig_vm_name_label'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'VMHelper'
op|'.'
name|'set_vm_name_label'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'template_vm_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'template_vm_ref'
op|','
nl|'\n'
name|'destroy_kernel_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
DECL|member|_move_disks
dedent|''
name|'def'
name|'_move_disks'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move and possibly link VHDs via the XAPI plugin."""'
newline|'\n'
name|'base_copy_uuid'
op|'='
name|'disk_info'
op|'['
string|"'base_copy'"
op|']'
newline|'\n'
name|'new_base_copy_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'sr_path'"
op|':'
name|'VMHelper'
op|'.'
name|'get_sr_path'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
op|','
nl|'\n'
string|"'old_base_copy_uuid'"
op|':'
name|'base_copy_uuid'
op|','
nl|'\n'
string|"'new_base_copy_uuid'"
op|':'
name|'new_base_copy_uuid'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
string|"'cow'"
name|'in'
name|'disk_info'
op|':'
newline|'\n'
indent|'            '
name|'cow_uuid'
op|'='
name|'disk_info'
op|'['
string|"'cow'"
op|']'
newline|'\n'
name|'new_cow_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'params'
op|'['
string|"'old_cow_uuid'"
op|']'
op|'='
name|'cow_uuid'
newline|'\n'
name|'params'
op|'['
string|"'new_cow_uuid'"
op|']'
op|'='
name|'new_cow_uuid'
newline|'\n'
nl|'\n'
name|'new_uuid'
op|'='
name|'new_cow_uuid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_uuid'
op|'='
name|'new_base_copy_uuid'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
string|"'migration'"
op|','
string|"'move_vhds_into_sr'"
op|','
nl|'\n'
op|'{'
string|"'params'"
op|':'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'params'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now we rescan the SR so we find the VHDs'
nl|'\n'
name|'VMHelper'
op|'.'
name|'scan_default_sr'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set name-label so we can find if we need to clean up a failed'
nl|'\n'
comment|'# migration'
nl|'\n'
name|'VMHelper'
op|'.'
name|'set_vdi_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'new_uuid'
op|','
name|'instance'
op|'.'
name|'name'
op|','
string|"'root'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'new_uuid'
newline|'\n'
nl|'\n'
DECL|member|_resize_instance
dedent|''
name|'def'
name|'_resize_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vdi_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resize an instances root disk."""'
newline|'\n'
nl|'\n'
name|'new_disk_size'
op|'='
name|'instance'
op|'.'
name|'root_gb'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'if'
name|'not'
name|'new_disk_size'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Get current size of VDI'
nl|'\n'
dedent|''
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
name|'vdi_uuid'
op|')'
newline|'\n'
name|'virtual_size'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_virtual_size'"
op|','
nl|'\n'
name|'vdi_ref'
op|')'
newline|'\n'
name|'virtual_size'
op|'='
name|'int'
op|'('
name|'virtual_size'
op|')'
newline|'\n'
nl|'\n'
name|'old_gb'
op|'='
name|'virtual_size'
op|'/'
op|'('
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'new_gb'
op|'='
name|'instance'
op|'.'
name|'root_gb'
newline|'\n'
nl|'\n'
name|'if'
name|'virtual_size'
op|'<'
name|'new_disk_size'
op|':'
newline|'\n'
comment|'# Resize up. Simple VDI resize will do the trick'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resizing up VDI %(vdi_uuid)s from %(old_gb)dGB to "'
nl|'\n'
string|'"%(new_gb)dGB"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'product_version'
op|'['
number|'0'
op|']'
op|'>'
number|'5'
op|':'
newline|'\n'
indent|'                '
name|'resize_func_name'
op|'='
string|"'VDI.resize'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'resize_func_name'
op|'='
string|"'VDI.resize_online'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
name|'resize_func_name'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'new_disk_size'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resize complete"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'reboot_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot VM instance."""'
newline|'\n'
comment|'# Note (salvatore-orlando): security group rules are not re-enforced'
nl|'\n'
comment|'# upon reboot, since this action on the XenAPI drivers does not'
nl|'\n'
comment|'# remove existing filters'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'reboot_type'
op|'=='
string|'"HARD"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.hard_reboot'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.clean_reboot'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_agent_version
dedent|''
dedent|''
name|'def'
name|'_get_agent_version'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the version of the agent running on the VM instance."""'
newline|'\n'
nl|'\n'
comment|'# The agent can be slow to start for a variety of reasons. On Windows,'
nl|'\n'
comment|'# it will generally perform a setup process on first boot that can'
nl|'\n'
comment|'# take a couple of minutes and then reboot. On Linux, the system can'
nl|'\n'
comment|'# also take a while to boot. So we need to be more patient than'
nl|'\n'
comment|'# normal as well as watch for domid changes'
nl|'\n'
nl|'\n'
DECL|function|_call
name|'def'
name|'_call'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Send the encrypted password'
nl|'\n'
indent|'            '
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'version'"
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'0'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Failed to query agent version: %(resp)r'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
comment|'# Some old versions of the Windows agent have a trailing \\\\r\\\\n'
nl|'\n'
comment|'# (ie CRLF escaped) for some reason. Strip that off.'
nl|'\n'
dedent|''
name|'return'
name|'resp'
op|'['
string|"'message'"
op|']'
op|'.'
name|'replace'
op|'('
string|"'\\\\r\\\\n'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'domid'
op|'='
name|'vm_rec'
op|'['
string|"'domid'"
op|']'
newline|'\n'
nl|'\n'
name|'expiration'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
name|'FLAGS'
op|'.'
name|'agent_version_timeout'
newline|'\n'
name|'while'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'<'
name|'expiration'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'_call'
op|'('
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'vm_rec'
op|'['
string|"'domid'"
op|']'
op|'!='
name|'domid'
op|':'
newline|'\n'
indent|'                '
name|'newdomid'
op|'='
name|'vm_rec'
op|'['
string|"'domid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'domid changed from %(domid)s to %(newdomid)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'domid'
op|'='
name|'vm_rec'
op|'['
string|"'domid'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_agent_update
dedent|''
name|'def'
name|'_agent_update'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'url'
op|','
name|'md5sum'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update agent on the VM instance."""'
newline|'\n'
nl|'\n'
comment|'# Send the encrypted password'
nl|'\n'
name|'args'
op|'='
op|'{'
string|"'url'"
op|':'
name|'url'
op|','
string|"'md5sum'"
op|':'
name|'md5sum'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'agentupdate'"
op|','
name|'instance'
op|','
name|'args'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'0'"
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Failed to update agent: %(resp)r'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'resp'
op|'['
string|"'message'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|set_admin_password
dedent|''
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'new_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password on the VM instance.\n\n        This is done via an agent running on the VM. Communication between nova\n        and the agent is done via writing xenstore records. Since communication\n        is done over the XenAPI RPC calls, we need to encrypt the password.\n        We\'re using a simple Diffie-Hellman class instead of the more advanced\n        one in M2Crypto for compatibility with the agent code.\n\n        """'
newline|'\n'
comment|'# The simple Diffie-Hellman class is used to manage key exchange.'
nl|'\n'
name|'dh'
op|'='
name|'SimpleDH'
op|'('
op|')'
newline|'\n'
name|'key_init_args'
op|'='
op|'{'
string|"'pub'"
op|':'
name|'str'
op|'('
name|'dh'
op|'.'
name|'get_public'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'key_init'"
op|','
name|'instance'
op|','
name|'key_init_args'
op|')'
newline|'\n'
comment|"# Successful return code from key_init is 'D0'"
nl|'\n'
name|'if'
name|'resp'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'D0'"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to exchange keys: %(resp)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
name|'msg'
op|')'
newline|'\n'
comment|'# Some old versions of the Windows agent have a trailing \\\\r\\\\n'
nl|'\n'
comment|'# (ie CRLF escaped) for some reason. Strip that off.'
nl|'\n'
dedent|''
name|'agent_pub'
op|'='
name|'int'
op|'('
name|'resp'
op|'['
string|"'message'"
op|']'
op|'.'
name|'replace'
op|'('
string|"'\\\\r\\\\n'"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
name|'dh'
op|'.'
name|'compute_shared'
op|'('
name|'agent_pub'
op|')'
newline|'\n'
comment|'# Some old versions of Linux and Windows agent expect trailing \\n'
nl|'\n'
comment|'# on password to work correctly.'
nl|'\n'
name|'enc_pass'
op|'='
name|'dh'
op|'.'
name|'encrypt'
op|'('
name|'new_pass'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
comment|'# Send the encrypted password'
nl|'\n'
name|'password_args'
op|'='
op|'{'
string|"'enc_pass'"
op|':'
name|'enc_pass'
op|'}'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'password'"
op|','
name|'instance'
op|','
name|'password_args'
op|')'
newline|'\n'
comment|"# Successful return code from password is '0'"
nl|'\n'
name|'if'
name|'resp'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'0'"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to update password: %(resp)r'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
op|'['
string|"'message'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|inject_file
dedent|''
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the VM instance.\n\n        The path to which it is to be written and the contents of the file\n        need to be supplied; both will be base64-encoded to prevent errors\n        with non-ASCII characters being transmitted. If the agent does not\n        support file injection, or the user has disabled it, a\n        NotImplementedError will be raised.\n\n        """'
newline|'\n'
comment|'# Files/paths must be base64-encoded for transmission to agent'
nl|'\n'
name|'b64_path'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'path'
op|')'
newline|'\n'
name|'b64_contents'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'contents'
op|')'
newline|'\n'
nl|'\n'
comment|'# Need to uniquely identify this request.'
nl|'\n'
name|'args'
op|'='
op|'{'
string|"'b64_path'"
op|':'
name|'b64_path'
op|','
string|"'b64_contents'"
op|':'
name|'b64_contents'
op|'}'
newline|'\n'
comment|"# If the agent doesn't support file injection, a NotImplementedError"
nl|'\n'
comment|'# will be raised with the appropriate message.'
nl|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'inject_file'"
op|','
name|'instance'
op|','
name|'args'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'['
string|"'returncode'"
op|']'
op|'!='
string|"'0'"
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Failed to inject file: %(resp)r'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'resp'
op|'['
string|"'message'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_shutdown
dedent|''
name|'def'
name|'_shutdown'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hard'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance."""'
newline|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"VM already halted, skipping shutdown..."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Shutting down VM"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hard'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.hard_shutdown'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.clean_shutdown'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_root_vdi_ref
dedent|''
dedent|''
name|'def'
name|'_find_root_vdi_ref'
op|'('
name|'self'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find and return the root vdi ref for a VM."""'
newline|'\n'
name|'if'
name|'not'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'vbd_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'vbd_refs'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Unable to find VBD for VM"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'vbd_refs'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
comment|"# If we only have one VBD, assume it's the root fs"
nl|'\n'
indent|'            '
name|'vbd_ref'
op|'='
name|'vbd_refs'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If we have more than one VBD, swap will be first by convention'
nl|'\n'
comment|'# with the root fs coming second'
nl|'\n'
indent|'            '
name|'vbd_ref'
op|'='
name|'vbd_refs'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_record"'
op|','
name|'vbd_ref'
op|')'
op|'['
string|'"VDI"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_safe_destroy_vdis
dedent|''
name|'def'
name|'_safe_destroy_vdis'
op|'('
name|'self'
op|','
name|'vdi_refs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the requested VDIs, logging any StorageError exceptions."""'
newline|'\n'
name|'for'
name|'vdi_ref'
name|'in'
name|'vdi_refs'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'VMHelper'
op|'.'
name|'destroy_vdi'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'volume_utils'
op|'.'
name|'StorageError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_kernel_ramdisk_plugin_call
dedent|''
dedent|''
dedent|''
name|'def'
name|'_destroy_kernel_ramdisk_plugin_call'
op|'('
name|'self'
op|','
name|'kernel'
op|','
name|'ramdisk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'kernel'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|"'kernel-file'"
op|']'
op|'='
name|'kernel'
newline|'\n'
dedent|''
name|'if'
name|'ramdisk'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|"'ramdisk-file'"
op|']'
op|'='
name|'ramdisk'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
string|"'glance'"
op|','
string|"'remove_kernel_ramdisk'"
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_kernel_ramdisk
dedent|''
name|'def'
name|'_destroy_kernel_ramdisk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Three situations can occur:\n\n            1. We have neither a ramdisk nor a kernel, in which case we are a\n               RAW image and can omit this step\n\n            2. We have one or the other, in which case, we should flag as an\n               error\n\n            3. We have both, in which case we safely remove both the kernel\n               and the ramdisk.\n\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'.'
name|'kernel_id'
name|'and'
name|'not'
name|'instance'
op|'.'
name|'ramdisk_id'
op|':'
newline|'\n'
comment|'# 1. No kernel or ramdisk'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Using RAW or VHD, skipping kernel and ramdisk "'
nl|'\n'
string|'"deletion"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'instance'
op|'.'
name|'kernel_id'
name|'and'
name|'instance'
op|'.'
name|'ramdisk_id'
op|')'
op|':'
newline|'\n'
comment|'# 2. We only have kernel xor ramdisk'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnacceptable'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance has a kernel or ramdisk but not both"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. We have both kernel and ramdisk'
nl|'\n'
dedent|''
op|'('
name|'kernel'
op|','
name|'ramdisk'
op|')'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_kernel_ramdisk'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_destroy_kernel_ramdisk_plugin_call'
op|'('
name|'kernel'
op|','
name|'ramdisk'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"kernel/ramdisk files removed"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_vm
dedent|''
name|'def'
name|'_destroy_vm'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys a VM record."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.destroy'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"VM destroyed"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_rescue_instance
dedent|''
name|'def'
name|'_destroy_rescue_instance'
op|'('
name|'self'
op|','
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy a rescue instance."""'
newline|'\n'
comment|'# Shutdown Rescue VM'
nl|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
name|'state'
op|'='
name|'VMHelper'
op|'.'
name|'compile_info'
op|'('
name|'vm_rec'
op|')'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'!='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.hard_shutdown"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy Rescue VDIs'
nl|'\n'
dedent|''
name|'vdi_refs'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
name|'root_vdi_ref'
op|'='
name|'self'
op|'.'
name|'_find_root_vdi_ref'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'vdi_refs'
op|'='
op|'['
name|'vdi_ref'
name|'for'
name|'vdi_ref'
name|'in'
name|'vdi_refs'
name|'if'
name|'vdi_ref'
op|'!='
name|'root_vdi_ref'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_safe_destroy_vdis'
op|'('
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy Rescue VM'
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.destroy"'
op|','
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VM instance.\n\n        This is the method exposed by xenapi_conn.destroy(). The rest of the\n        destroy_* methods are internal.\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Destroying VM"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|"# We don't use _get_vm_opaque_ref because the instance may"
nl|'\n'
comment|'# truly not exist because of a failure during build. A valid'
nl|'\n'
comment|'# vm_ref is checked correctly where necessary.'
nl|'\n'
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_destroy'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy
dedent|''
name|'def'
name|'_destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_kernel_ramdisk'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys VM instance by performing:\n\n            1. A shutdown\n            2. Destroying associated VDIs.\n            3. Destroying kernel and ramdisk files (if necessary).\n            4. Destroying that actual VM record.\n\n        """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"VM is not present, skipping destroy..."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'is_snapshot'
op|'='
name|'VMHelper'
op|'.'
name|'is_snapshot'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Destroy VDIs'
nl|'\n'
name|'vdi_refs'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_safe_destroy_vdis'
op|'('
name|'vdi_refs'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'destroy_kernel_ramdisk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy_kernel_ramdisk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_destroy_vm'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
comment|'# Remove security groups filters for instance'
nl|'\n'
comment|'# Unless the vm is a snapshot'
nl|'\n'
name|'if'
name|'not'
name|'is_snapshot'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.pause'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.unpause'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.suspend'"
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.resume'"
op|','
name|'vm_ref'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance.\n\n            - shutdown the instance VM.\n            - set \'bootlock\' to prevent the instance from starting in rescue.\n            - spawn a rescue VM (the vm name-label will be instance-N-rescue).\n\n        """'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|'"Instance is already in Rescue Mode: %s"'
op|')'
nl|'\n'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_acquire_bootlock'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'_rescue'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|')'
newline|'\n'
comment|'# instance.name now has -rescue appended because of magic'
nl|'\n'
name|'rescue_vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'vdi_ref'
op|'='
name|'self'
op|'.'
name|'_find_root_vdi_ref'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_vbd_ref'
op|'='
name|'VMHelper'
op|'.'
name|'create_vbd'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'rescue_vm_ref'
op|','
nl|'\n'
name|'vdi_ref'
op|','
number|'1'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VBD.plug'"
op|','
name|'rescue_vbd_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance.\n\n            - unplug the instance VM\'s disk from the rescue VM.\n            - teardown the rescue VM.\n            - release the bootlock to allow the instance VM to start.\n\n        """'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
string|'"%s-rescue"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rescue_vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotInRescueMode'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'original_vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'_rescue'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hard'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cancel_stale_tasks
dedent|''
name|'def'
name|'_cancel_stale_tasks'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'task'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the given tasks that are older than the given timeout."""'
newline|'\n'
name|'task_refs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.get_by_name_label"'
op|','
name|'task'
op|')'
newline|'\n'
name|'for'
name|'task_ref'
name|'in'
name|'task_refs'
op|':'
newline|'\n'
indent|'            '
name|'task_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.get_record"'
op|','
name|'task_ref'
op|')'
newline|'\n'
name|'task_created'
op|'='
name|'utils'
op|'.'
name|'parse_strtime'
op|'('
name|'task_rec'
op|'['
string|'"created"'
op|']'
op|'.'
name|'value'
op|','
nl|'\n'
string|'"%Y%m%dT%H:%M:%SZ"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'utils'
op|'.'
name|'is_older_than'
op|'('
name|'task_created'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"task.cancel"'
op|','
name|'task_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
dedent|''
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for expirable rebooting instances.\n\n            - issue a "hard" reboot to any instance that has been stuck in a\n              reboot state for >= the given timeout\n        """'
newline|'\n'
comment|'# NOTE(jk0): All existing clean_reboot tasks must be cancelled before'
nl|'\n'
comment|'# we can kick off the hard_reboot tasks.'
nl|'\n'
name|'self'
op|'.'
name|'_cancel_stale_tasks'
op|'('
name|'timeout'
op|','
string|"'VM.clean_reboot'"
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all_hung_in_rebooting'
op|'('
name|'ctxt'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'instances_info'
op|'='
name|'dict'
op|'('
name|'instance_count'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instances_info'
op|'['
string|'"instance_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(instance_count)d hung reboots "'
nl|'\n'
string|'"older than %(timeout)d seconds"'
op|')'
op|'%'
name|'instances_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically hard rebooting"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
string|'"HARD"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rescued_instances
dedent|''
dedent|''
name|'def'
name|'poll_rescued_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for expirable rescued instances.\n\n            - forcibly exit rescue mode for any instances that have been\n              in rescue mode for >= the provided timeout\n\n        """'
newline|'\n'
name|'last_ran'
op|'='
name|'self'
op|'.'
name|'poll_rescue_last_ran'
newline|'\n'
name|'if'
name|'not'
name|'last_ran'
op|':'
newline|'\n'
comment|'# We need a base time to start tracking.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'poll_rescue_last_ran'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_older_than'
op|'('
name|'last_ran'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
comment|"# Do not run. Let's bail."
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Update the time tracker and proceed.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'poll_rescue_last_ran'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rescue_vms'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'list_instances'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'endswith'
op|'('
string|'"-rescue"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rescue_vms'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'name'
op|'='
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'vm'
name|'in'
name|'rescue_vms'
op|':'
newline|'\n'
indent|'            '
name|'rescue_vm_ref'
op|'='
name|'vm'
op|'['
string|'"vm_ref"'
op|']'
newline|'\n'
nl|'\n'
name|'original_name'
op|'='
name|'vm'
op|'['
string|'"name"'
op|']'
op|'.'
name|'split'
op|'('
string|'"-rescue"'
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'original_vm_ref'
op|'='
name|'VMHelper'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'original_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_destroy_rescue_instance'
op|'('
name|'rescue_vm_ref'
op|','
name|'original_vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_release_bootlock'
op|'('
name|'original_vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.start"'
op|','
name|'original_vm_ref'
op|','
name|'False'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_unconfirmed_resizes
dedent|''
dedent|''
name|'def'
name|'poll_unconfirmed_resizes'
op|'('
name|'self'
op|','
name|'resize_confirm_window'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll for unconfirmed resizes.\n\n        Look for any unconfirmed resizes that are older than\n        `resize_confirm_window` and automatically confirm them.  Check\n        all migrations despite exceptions when trying to confirm and\n        yield to other greenthreads on each iteration.\n        """'
newline|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'migrations'
op|'='
name|'db'
op|'.'
name|'migration_get_all_unconfirmed'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'resize_confirm_window'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'migrations'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(migration_count)d unconfirmed migrations "'
nl|'\n'
string|'"older than %(confirm_window)d seconds"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'migration_count'"
op|':'
name|'len'
op|'('
name|'migrations'
op|')'
op|','
nl|'\n'
string|"'confirm_window'"
op|':'
name|'resize_confirm_window'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_set_migration_to_error
dedent|''
name|'def'
name|'_set_migration_to_error'
op|'('
name|'migration_id'
op|','
name|'reason'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Setting migration %(migration_id)s to error: "'
nl|'\n'
string|'"%(reason)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'ctxt'
op|','
name|'migration_id'
op|','
op|'{'
string|"'status'"
op|':'
string|"'error'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Yield to other greenthreads.  Putting this'
nl|'\n'
comment|'# at the top so we make sure to do it on each iteration.'
nl|'\n'
indent|'            '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'migration_id'
op|'='
name|'migration'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'migration'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically confirming migration %(migration_id)s "'
nl|'\n'
string|'"for instance %(instance_uuid)s"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Instance %(instance_uuid)s not found"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration_id'
op|','
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'ERROR'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
name|'_'
op|'('
string|'"In ERROR state"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration_id'
op|','
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|'!='
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|':'
newline|'\n'
indent|'                '
name|'task_state'
op|'='
name|'instance'
op|'['
string|"'task_state'"
op|']'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"In %(task_state)s task_state, not RESIZE_VERIFY"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration_id'
op|','
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'confirm_resize'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Error auto-confirming resize: %(e)s. "'
nl|'\n'
string|'"Will retry later."'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'VMHelper'
op|'.'
name|'compile_info'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'VMHelper'
op|'.'
name|'compile_diagnostics'
op|'('
name|'vm_rec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_bw_usage
dedent|''
name|'def'
name|'get_all_bw_usage'
op|'('
name|'self'
op|','
name|'start_time'
op|','
name|'stop_time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return bandwidth usage info for each interface on each\n           running VM"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'metrics'
op|'='
name|'VMHelper'
op|'.'
name|'compile_metrics'
op|'('
name|'start_time'
op|','
name|'stop_time'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'CouldNotFetchMetrics'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Could not get bandwidth info."'
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'bw'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'uuid'
op|','
name|'data'
name|'in'
name|'metrics'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_by_uuid"'
op|','
name|'uuid'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'vif_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vif'
name|'in'
op|'['
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VIF.get_record"'
op|','
name|'vrec'
op|')'
nl|'\n'
name|'for'
name|'vrec'
name|'in'
name|'vm_rec'
op|'['
string|"'VIFs'"
op|']'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'vif_map'
op|'['
name|'vif'
op|'['
string|"'device'"
op|']'
op|']'
op|'='
name|'vif'
op|'['
string|"'MAC'"
op|']'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'vm_rec'
op|'['
string|"'name_label'"
op|']'
newline|'\n'
name|'if'
name|'vm_rec'
op|'['
string|'"is_a_template"'
op|']'
name|'or'
name|'vm_rec'
op|'['
string|'"is_control_domain"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'vifs_bw'
op|'='
name|'bw'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'data'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'vif_'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'vname'
op|'='
name|'key'
op|'.'
name|'split'
op|'('
string|"'_'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'vif_bw'
op|'='
name|'vifs_bw'
op|'.'
name|'setdefault'
op|'('
name|'vif_map'
op|'['
name|'vname'
op|']'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'.'
name|'endswith'
op|'('
string|"'tx'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'vif_bw'
op|'['
string|"'bw_out'"
op|']'
op|'='
name|'int'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'key'
op|'.'
name|'endswith'
op|'('
string|"'rx'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'vif_bw'
op|'['
string|"'bw_in'"
op|']'
op|'='
name|'int'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'bw'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return snapshot of console."""'
newline|'\n'
comment|'# TODO(armando-migliaccio): implement this to fix pylint!'
nl|'\n'
name|'return'
string|"'FAKE CONSOLE OUTPUT of instance'"
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'session_id'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'get_session_id'
op|'('
op|')'
newline|'\n'
name|'path'
op|'='
string|'"/console?ref=%s&session_id=%s"'
op|'%'
op|'('
name|'str'
op|'('
name|'vm_ref'
op|')'
op|','
name|'session_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE: XS5.6sp2+ use http over port 80 for xenapi com'
nl|'\n'
name|'return'
op|'{'
string|"'host'"
op|':'
name|'FLAGS'
op|'.'
name|'vncserver_proxyclient_address'
op|','
string|"'port'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
name|'path'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate the network info and make calls to place it into the\n        xenstore and the xenstore param list.\n        vm_ref can be passed in because it will sometimes be different than\n        what VMHelper.lookup(session, instance.name) will find (ex: rescue)\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Injecting network info to xenstore"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'info'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'location'
op|'='
string|"'vm-data/networking/%s'"
op|'%'
name|'info'
op|'['
string|"'mac'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'location'
op|','
name|'json'
op|'.'
name|'dumps'
op|'('
name|'info'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_write_to_xenstore'
op|'('
name|'instance'
op|','
name|'location'
op|','
name|'info'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|"# catch KeyError for domid if instance isn't running"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_create_vifs
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_vifs'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates vifs for an instance."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating vifs"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# this function raises if vm_ref is not a vm_opaque_ref'
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'device'
op|','
op|'('
name|'network'
op|','
name|'info'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif_rec'
op|'='
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'info'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'device'
op|'='
name|'device'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'vif_rec'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VIF for network %(network_ref)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vif_ref'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VIF.create'"
op|','
name|'vif_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VIF %(vif_ref)s, network %(network_ref)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vifs
dedent|''
dedent|''
name|'def'
name|'plug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up VIF networking on the host."""'
newline|'\n'
name|'for'
name|'device'
op|','
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|','
name|'device'
op|'='
name|'device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug_vifs
dedent|''
dedent|''
name|'def'
name|'unplug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'vif_driver'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset_network
dedent|''
dedent|''
dedent|''
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls resetnetwork method in agent."""'
newline|'\n'
name|'self'
op|'.'
name|'_make_agent_call'
op|'('
string|"'resetnetwork'"
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_hostname
dedent|''
name|'def'
name|'inject_hostname'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject the hostname of the instance into the xenstore."""'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'os_type'
op|'=='
string|'"windows"'
op|':'
newline|'\n'
comment|'# NOTE(jk0): Windows hostnames can only be <= 15 chars.'
nl|'\n'
indent|'            '
name|'hostname'
op|'='
name|'hostname'
op|'['
op|':'
number|'15'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Injecting hostname to xenstore"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_param_xenstore'
op|'('
name|'vm_ref'
op|','
string|"'vm-data/hostname'"
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_write_to_xenstore
dedent|''
name|'def'
name|'_write_to_xenstore'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'value'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Writes the passed value to the xenstore record for the given VM\n        at the specified location. A XenAPIPlugin.PluginError will be raised\n        if any error is encountered in the write process.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'xenstore.py'"
op|','
string|"'write_record'"
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
name|'path'
op|'='
name|'path'
op|','
nl|'\n'
name|'value'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_agent_call
dedent|''
name|'def'
name|'_make_agent_call'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'instance'
op|','
name|'args'
op|'='
name|'None'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Abstracts out the interaction with the agent xenapi plugin."""'
newline|'\n'
name|'if'
name|'args'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'args'
op|'['
string|"'id'"
op|']'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'_make_plugin_call'
op|'('
string|"'agent'"
op|','
name|'method'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|','
nl|'\n'
op|'**'
name|'args'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'ret'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ret'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'json'
op|'.'
name|'loads'
op|'('
name|'ret'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'The agent call to %(method)s returned an invalid'"
nl|'\n'
string|"' response: %(ret)r. path=%(path)s; args=%(args)r'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'error'"
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'unable to deserialize response'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_make_plugin_call
dedent|''
dedent|''
name|'def'
name|'_make_plugin_call'
op|'('
name|'self'
op|','
name|'plugin'
op|','
name|'method'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'addl_args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Abstracts out the process of calling a method of a xenapi plugin.\n        Any errors raised by the plugin will in turn raise a RuntimeError here.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
name|'or'
name|'self'
op|'.'
name|'_get_vm_opaque_ref'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_rec'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'dom_id'"
op|':'
name|'vm_rec'
op|'['
string|"'domid'"
op|']'
op|'}'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'addl_args'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_plugin'
op|'('
name|'plugin'
op|','
name|'method'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'err_msg'
op|'='
name|'e'
op|'.'
name|'details'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'if'
string|"'TIMEOUT:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'TIMEOUT: The call to %(method)s timed out. '"
nl|'\n'
string|"'args=%(args)r'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'timeout'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'elif'
string|"'NOT IMPLEMENTED:'"
name|'in'
name|'err_msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'NOT IMPLEMENTED: The call to %(method)s is not'"
nl|'\n'
string|"' supported by the agent. args=%(args)r'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'notimplemented'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'The call to %(method)s returned an error: %(e)s. '"
nl|'\n'
string|"'args=%(args)r'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'returncode'"
op|':'
string|"'error'"
op|','
string|"'message'"
op|':'
name|'err_msg'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_add_to_param_xenstore
dedent|''
dedent|''
name|'def'
name|'_add_to_param_xenstore'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Takes a key/value pair and adds it to the xenstore parameter\n        record for the given vm instance. If the key exists in xenstore,\n        it is overwritten\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_remove_from_param_xenstore'
op|'('
name|'vm_ref'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.add_to_xenstore_data'"
op|','
name|'vm_ref'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_from_param_xenstore
dedent|''
name|'def'
name|'_remove_from_param_xenstore'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Takes a single key and removes it from the xenstore parameter\n        record data for the given VM.\n        If the key doesn\'t exist, the request is ignored.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.remove_from_xenstore_data'"
op|','
name|'vm_ref'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" recreates security group rules for every instance """'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" recreates security group rules for every instance """'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes filters for each VIF of the specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'firewall_driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleDH
dedent|''
dedent|''
name|'class'
name|'SimpleDH'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class wraps all the functionality needed to implement\n    basic Diffie-Hellman-Merkle key exchange in Python. It features\n    intelligent defaults for the prime and base numbers needed for the\n    calculation, while allowing you to supply your own. It requires that\n    the openssl binary be installed on the system on which this is run,\n    as it uses that to handle the encryption and decryption. If openssl\n    is not available, a RuntimeError will be raised.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_prime'
op|'='
number|'162259276829213363391578010288127'
newline|'\n'
name|'self'
op|'.'
name|'_base'
op|'='
number|'5'
newline|'\n'
name|'self'
op|'.'
name|'_public'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_shared'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'generate_private'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_private
dedent|''
name|'def'
name|'generate_private'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_private'
op|'='
name|'int'
op|'('
name|'binascii'
op|'.'
name|'hexlify'
op|'('
name|'os'
op|'.'
name|'urandom'
op|'('
number|'10'
op|')'
op|')'
op|','
number|'16'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_private'
newline|'\n'
nl|'\n'
DECL|member|get_public
dedent|''
name|'def'
name|'get_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_public'
op|'='
name|'self'
op|'.'
name|'mod_exp'
op|'('
name|'self'
op|'.'
name|'_base'
op|','
name|'self'
op|'.'
name|'_private'
op|','
name|'self'
op|'.'
name|'_prime'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_public'
newline|'\n'
nl|'\n'
DECL|member|compute_shared
dedent|''
name|'def'
name|'compute_shared'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_shared'
op|'='
name|'self'
op|'.'
name|'mod_exp'
op|'('
name|'other'
op|','
name|'self'
op|'.'
name|'_private'
op|','
name|'self'
op|'.'
name|'_prime'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_shared'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|mod_exp
name|'def'
name|'mod_exp'
op|'('
name|'num'
op|','
name|'exp'
op|','
name|'mod'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Efficient implementation of (num ** exp) % mod"""'
newline|'\n'
name|'result'
op|'='
number|'1'
newline|'\n'
name|'while'
name|'exp'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'exp'
op|'&'
number|'1'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
op|'('
name|'result'
op|'*'
name|'num'
op|')'
op|'%'
name|'mod'
newline|'\n'
dedent|''
name|'exp'
op|'='
name|'exp'
op|'>>'
number|'1'
newline|'\n'
name|'num'
op|'='
op|'('
name|'num'
op|'*'
name|'num'
op|')'
op|'%'
name|'mod'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_run_ssl
dedent|''
name|'def'
name|'_run_ssl'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'decrypt'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
op|'['
string|"'openssl'"
op|','
string|"'aes-128-cbc'"
op|','
string|"'-A'"
op|','
string|"'-a'"
op|','
string|"'-pass'"
op|','
nl|'\n'
string|"'pass:%s'"
op|'%'
name|'self'
op|'.'
name|'_shared'
op|','
string|"'-nosalt'"
op|']'
newline|'\n'
name|'if'
name|'decrypt'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'.'
name|'append'
op|'('
string|"'-d'"
op|')'
newline|'\n'
dedent|''
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
name|'process_input'
op|'='
name|'text'
op|')'
newline|'\n'
name|'if'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'OpenSSL error: %s'"
op|')'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'out'
newline|'\n'
nl|'\n'
DECL|member|encrypt
dedent|''
name|'def'
name|'encrypt'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_run_ssl'
op|'('
name|'text'
op|')'
op|'.'
name|'strip'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|decrypt
dedent|''
name|'def'
name|'decrypt'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_run_ssl'
op|'('
name|'text'
op|','
name|'decrypt'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 Piston Cloud Computing, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nHelper methods for operations related to the management of VM records and\ntheir attributes like VDIs, VIFs, as well as their lookup functions.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'from'
name|'decimal'
name|'import'
name|'Decimal'
op|','
name|'InvalidOperation'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
name|'import'
name|'api'
name|'as'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'HelperBase'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'volume_utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.xenapi.vm_utils"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|xenapi_vm_utils_opts
name|'xenapi_vm_utils_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'default_os_type'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'linux'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default OS type'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'block_device_creation_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'time to wait for a block device to be created'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'max_kernel_ramdisk_size'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'16'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'maximum size in bytes of kernel or ramdisk images'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'sr_matching_filter'"
op|','
nl|'\n'
name|'default'
op|'='
string|"'other-config:i18n-key=local-storage'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Filter for finding the SR to be used to install guest '"
nl|'\n'
string|"'instances on. The default value is the Local Storage in '"
nl|'\n'
string|"'default XenServer/XCP installations. To select an SR '"
nl|'\n'
string|"'with a different matching criteria, you could set it to '"
nl|'\n'
string|"'other-config:my_favorite_sr=true. On the other hand, to '"
nl|'\n'
string|"'fall back on the Default SR, as displayed by XenCenter, '"
nl|'\n'
string|"'set this flag to: default-sr:true'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'xenapi_vm_utils_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|XENAPI_POWER_STATE
name|'XENAPI_POWER_STATE'
op|'='
op|'{'
nl|'\n'
string|"'Halted'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
string|"'Running'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'Paused'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
string|"'Suspended'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
string|"'Crashed'"
op|':'
name|'power_state'
op|'.'
name|'CRASHED'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|SECTOR_SIZE
name|'SECTOR_SIZE'
op|'='
number|'512'
newline|'\n'
DECL|variable|MBR_SIZE_SECTORS
name|'MBR_SIZE_SECTORS'
op|'='
number|'63'
newline|'\n'
DECL|variable|MBR_SIZE_BYTES
name|'MBR_SIZE_BYTES'
op|'='
name|'MBR_SIZE_SECTORS'
op|'*'
name|'SECTOR_SIZE'
newline|'\n'
DECL|variable|KERNEL_DIR
name|'KERNEL_DIR'
op|'='
string|"'/boot/guest'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageType
name|'class'
name|'ImageType'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Enumeration class for distinguishing different image types\n        0 - kernel image (goes on dom0\'s filesystem)\n        1 - ramdisk image (goes on dom0\'s filesystem)\n        2 - disk image (local SR, partitioned by objectstore plugin)\n        3 - raw disk image (local SR, NOT partitioned by plugin)\n        4 - vhd disk image (local SR, NOT inspected by XS, PV assumed for\n            linux, HVM assumed for Windows)\n        5 - ISO disk image (local SR, NOT partitioned by plugin)\n    """'
newline|'\n'
nl|'\n'
DECL|variable|KERNEL
name|'KERNEL'
op|'='
number|'0'
newline|'\n'
DECL|variable|RAMDISK
name|'RAMDISK'
op|'='
number|'1'
newline|'\n'
DECL|variable|DISK
name|'DISK'
op|'='
number|'2'
newline|'\n'
DECL|variable|DISK_RAW
name|'DISK_RAW'
op|'='
number|'3'
newline|'\n'
DECL|variable|DISK_VHD
name|'DISK_VHD'
op|'='
number|'4'
newline|'\n'
DECL|variable|DISK_ISO
name|'DISK_ISO'
op|'='
number|'5'
newline|'\n'
DECL|variable|_ids
name|'_ids'
op|'='
op|'('
name|'KERNEL'
op|','
name|'RAMDISK'
op|','
name|'DISK'
op|','
name|'DISK_RAW'
op|','
name|'DISK_VHD'
op|','
name|'DISK_ISO'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|KERNEL_STR
name|'KERNEL_STR'
op|'='
string|'"kernel"'
newline|'\n'
DECL|variable|RAMDISK_STR
name|'RAMDISK_STR'
op|'='
string|'"ramdisk"'
newline|'\n'
DECL|variable|DISK_STR
name|'DISK_STR'
op|'='
string|'"os"'
newline|'\n'
DECL|variable|DISK_RAW_STR
name|'DISK_RAW_STR'
op|'='
string|'"os_raw"'
newline|'\n'
DECL|variable|DISK_VHD_STR
name|'DISK_VHD_STR'
op|'='
string|'"vhd"'
newline|'\n'
DECL|variable|DISK_ISO_STR
name|'DISK_ISO_STR'
op|'='
string|'"iso"'
newline|'\n'
DECL|variable|_strs
name|'_strs'
op|'='
op|'('
name|'KERNEL_STR'
op|','
name|'RAMDISK_STR'
op|','
name|'DISK_STR'
op|','
name|'DISK_RAW_STR'
op|','
name|'DISK_VHD_STR'
op|','
nl|'\n'
name|'DISK_ISO_STR'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|to_string
name|'def'
name|'to_string'
op|'('
name|'cls'
op|','
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
name|'zip'
op|'('
name|'ImageType'
op|'.'
name|'_ids'
op|','
name|'ImageType'
op|'.'
name|'_strs'
op|')'
op|')'
op|'.'
name|'get'
op|'('
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_string
name|'def'
name|'from_string'
op|'('
name|'cls'
op|','
name|'image_type_str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
name|'zip'
op|'('
name|'ImageType'
op|'.'
name|'_strs'
op|','
name|'ImageType'
op|'.'
name|'_ids'
op|')'
op|')'
op|'.'
name|'get'
op|'('
name|'image_type_str'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMHelper
dedent|''
dedent|''
name|'class'
name|'VMHelper'
op|'('
name|'HelperBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The class that wraps the helper methods together.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_vm
name|'def'
name|'create_vm'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'kernel'
op|','
name|'ramdisk'
op|','
nl|'\n'
name|'use_pv_kernel'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VM record.  Returns a Deferred that gives the new\n        VM reference.\n        the use_pv_kernel flag indicates whether the guest is HVM or PV\n\n        There are 3 scenarios:\n\n            1. Using paravirtualization,  kernel passed in\n\n            2. Using paravirtualization, kernel within the image\n\n            3. Using hardware virtualization\n        """'
newline|'\n'
name|'inst_type_id'
op|'='
name|'instance'
op|'.'
name|'instance_type_id'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst_type_id'
op|')'
newline|'\n'
name|'mem'
op|'='
name|'str'
op|'('
name|'long'
op|'('
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|')'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'vcpus'
op|'='
name|'str'
op|'('
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'rec'
op|'='
op|'{'
nl|'\n'
string|"'actions_after_crash'"
op|':'
string|"'destroy'"
op|','
nl|'\n'
string|"'actions_after_reboot'"
op|':'
string|"'restart'"
op|','
nl|'\n'
string|"'actions_after_shutdown'"
op|':'
string|"'destroy'"
op|','
nl|'\n'
string|"'affinity'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'blocked_operations'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'ha_always_run'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'ha_restart_priority'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'HVM_boot_params'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'HVM_boot_policy'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'is_a_template'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'memory_dynamic_min'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'memory_dynamic_max'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'memory_static_min'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'memory_static_max'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'memory_target'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'name_description'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'name_label'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'other_config'"
op|':'
op|'{'
string|"'allowvssprovider'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
string|"'other_config'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'PCI_bus'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'platform'"
op|':'
op|'{'
string|"'acpi'"
op|':'
string|"'true'"
op|','
string|"'apic'"
op|':'
string|"'true'"
op|','
string|"'pae'"
op|':'
string|"'true'"
op|','
nl|'\n'
string|"'viridian'"
op|':'
string|"'true'"
op|','
string|"'timeoffset'"
op|':'
string|"'0'"
op|'}'
op|','
nl|'\n'
string|"'PV_args'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_bootloader'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_bootloader_args'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_kernel'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_legacy_args'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_ramdisk'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'recommendations'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'tags'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'user_version'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'VCPUs_at_startup'"
op|':'
name|'vcpus'
op|','
nl|'\n'
string|"'VCPUs_max'"
op|':'
name|'vcpus'
op|','
nl|'\n'
string|"'VCPUs_params'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'xenstore_data'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Complete VM configuration record according to the image type'
nl|'\n'
comment|'# non-raw/raw with PV kernel/raw in HVM mode'
nl|'\n'
name|'if'
name|'use_pv_kernel'
op|':'
newline|'\n'
indent|'            '
name|'rec'
op|'['
string|"'platform'"
op|']'
op|'['
string|"'nx'"
op|']'
op|'='
string|"'false'"
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
comment|'# 1. Kernel explicitly passed in, use that'
nl|'\n'
indent|'                '
name|'rec'
op|'['
string|"'PV_args'"
op|']'
op|'='
string|"'root=/dev/xvda1'"
newline|'\n'
name|'rec'
op|'['
string|"'PV_kernel'"
op|']'
op|'='
name|'kernel'
newline|'\n'
name|'rec'
op|'['
string|"'PV_ramdisk'"
op|']'
op|'='
name|'ramdisk'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# 2. Use kernel within the image'
nl|'\n'
indent|'                '
name|'rec'
op|'['
string|"'PV_bootloader'"
op|']'
op|'='
string|"'pygrub'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# 3. Using hardware virtualization'
nl|'\n'
indent|'            '
name|'rec'
op|'['
string|"'platform'"
op|']'
op|'['
string|"'nx'"
op|']'
op|'='
string|"'true'"
newline|'\n'
name|'rec'
op|'['
string|"'HVM_boot_params'"
op|']'
op|'='
op|'{'
string|"'order'"
op|':'
string|"'dc'"
op|'}'
newline|'\n'
name|'rec'
op|'['
string|"'HVM_boot_policy'"
op|']'
op|'='
string|"'BIOS order'"
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VM %s...'"
op|')'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.create'"
op|','
name|'rec'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VM %(instance_name)s as %(vm_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|ensure_free_mem
name|'def'
name|'ensure_free_mem'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_type_id'
op|'='
name|'instance'
op|'.'
name|'instance_type_id'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'inst_type_id'
op|')'
newline|'\n'
name|'mem'
op|'='
name|'long'
op|'('
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|')'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
comment|'#get free memory from host'
nl|'\n'
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'host_free_mem'
op|'='
name|'long'
op|'('
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.compute_free_memory"'
op|','
nl|'\n'
name|'host'
op|')'
op|')'
newline|'\n'
name|'return'
name|'host_free_mem'
op|'>='
name|'mem'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_cd_vbd
name|'def'
name|'create_cd_vbd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
name|'userdevice'
op|','
name|'bootable'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VBD record.  Returns a Deferred that gives the new\n        VBD reference specific to CDRom devices."""'
newline|'\n'
name|'vbd_rec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VM'"
op|']'
op|'='
name|'vm_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VDI'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'='
name|'str'
op|'('
name|'userdevice'
op|')'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'bootable'"
op|']'
op|'='
name|'bootable'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'mode'"
op|']'
op|'='
string|"'RO'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'type'"
op|']'
op|'='
string|"'CD'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'unpluggable'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'empty'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'other_config'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_type'"
op|']'
op|'='
string|"''"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_params'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_supported_algorithms'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating a CDROM-specific VBD for VM %(vm_ref)s,'"
nl|'\n'
string|"' VDI %(vdi_ref)s ... '"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'vbd_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VBD.create'"
op|','
name|'vbd_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created a CDROM-specific VBD %(vbd_ref)s '"
nl|'\n'
string|"' for VM %(vm_ref)s, VDI %(vdi_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vbd_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|find_vbd_by_number
name|'def'
name|'find_vbd_by_number'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the VBD reference from the device number"""'
newline|'\n'
name|'vbd_refs'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'vbd_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_record"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'if'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'=='
name|'str'
op|'('
name|'number'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'vbd_ref'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'raise'
name|'volume_utils'
op|'.'
name|'StorageError'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'VBD not found in instance %s'"
op|')'
op|'%'
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|unplug_vbd
name|'def'
name|'unplug_vbd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vbd_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug VBD from VM"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vbd_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VBD.unplug'"
op|','
name|'vbd_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'if'
name|'exc'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
op|'!='
string|"'DEVICE_ALREADY_DETACHED'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'volume_utils'
op|'.'
name|'StorageError'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Unable to unplug VBD %s'"
op|')'
op|'%'
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|destroy_vbd
name|'def'
name|'destroy_vbd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vbd_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VBD from host database"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VBD.destroy'"
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'raise'
name|'volume_utils'
op|'.'
name|'StorageError'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Unable to destroy VBD %s'"
op|')'
op|'%'
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|destroy_vdi
name|'def'
name|'destroy_vdi'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vdi_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VDI.destroy'"
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'raise'
name|'volume_utils'
op|'.'
name|'StorageError'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Unable to destroy VDI %s'"
op|')'
op|'%'
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_vdi
name|'def'
name|'create_vdi'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'sr_ref'
op|','
name|'name_label'
op|','
name|'virtual_size'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VDI record and returns its reference."""'
newline|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.create"'
op|','
nl|'\n'
op|'{'
string|"'name_label'"
op|':'
name|'name_label'
op|','
nl|'\n'
string|"'name_description'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'SR'"
op|':'
name|'sr_ref'
op|','
nl|'\n'
string|"'virtual_size'"
op|':'
name|'str'
op|'('
name|'virtual_size'
op|')'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'User'"
op|','
nl|'\n'
string|"'sharable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'read_only'"
op|':'
name|'read_only'
op|','
nl|'\n'
string|"'xenstore_data'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'other_config'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'sm_config'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'tags'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VDI %(vdi_ref)s (%(name_label)s,'"
nl|'\n'
string|"' %(virtual_size)s, %(read_only)s) on %(sr_ref)s.'"
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|copy_vdi
name|'def'
name|'copy_vdi'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'sr_ref'
op|','
name|'vdi_to_copy_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy a VDI and return the new VDIs reference."""'
newline|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.copy'"
op|','
name|'vdi_to_copy_ref'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Copied VDI %(vdi_ref)s from VDI '"
nl|'\n'
string|"'%(vdi_to_copy_ref)s on %(sr_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|clone_vdi
name|'def'
name|'clone_vdi'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vdi_to_clone_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clones a VDI and return the new VDIs reference."""'
newline|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.clone'"
op|','
name|'vdi_to_clone_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Cloned VDI %(vdi_ref)s from VDI '"
nl|'\n'
string|"'%(vdi_to_clone_ref)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|set_vdi_name_label
name|'def'
name|'set_vdi_name_label'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vdi_uuid'
op|','
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_by_uuid"'
op|','
name|'vdi_uuid'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.set_name_label"'
op|','
name|'vdi_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_vdi_for_vm_safely
name|'def'
name|'get_vdi_for_vm_safely'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the primary VDI for a VM"""'
newline|'\n'
name|'vbd_refs'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'for'
name|'vbd'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'vbd_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_record"'
op|','
name|'vbd'
op|')'
newline|'\n'
comment|'# Convention dictates the primary VDI will be userdevice 0'
nl|'\n'
name|'if'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'=='
string|"'0'"
op|':'
newline|'\n'
indent|'                '
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_record"'
op|','
name|'vbd_rec'
op|'['
string|"'VDI'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'vbd_rec'
op|'['
string|"'VDI'"
op|']'
op|','
name|'vdi_rec'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"No primary VDI found for"'
nl|'\n'
string|'"%(vm_ref)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_snapshot
name|'def'
name|'create_snapshot'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates Snapshot (Template) VM, Snapshot VBD, Snapshot VDI,\n        Snapshot VHD"""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Snapshotting VM %(vm_ref)s with label \'%(label)s\'..."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'vm_vdi_ref'
op|','
name|'vm_vdi_rec'
op|'='
name|'cls'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'sr_ref'
op|'='
name|'vm_vdi_rec'
op|'['
string|'"SR"'
op|']'
newline|'\n'
nl|'\n'
name|'original_parent_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vm_vdi_ref'
op|')'
newline|'\n'
nl|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.snapshot'"
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
newline|'\n'
name|'template_vm_ref'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'template_vdi_rec'
op|'='
name|'cls'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
name|'session'
op|','
nl|'\n'
name|'template_vm_ref'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'template_vdi_uuid'
op|'='
name|'template_vdi_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created snapshot %(template_vm_ref)s from'"
nl|'\n'
string|"' VM %(vm_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'parent_uuid'
op|','
name|'base_uuid'
op|'='
name|'_wait_for_vhd_coalesce'
op|'('
nl|'\n'
name|'session'
op|','
name|'instance'
op|','
name|'sr_ref'
op|','
name|'vm_vdi_ref'
op|','
name|'original_parent_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'template_vdi_uuids'
op|'='
op|'{'
string|"'base'"
op|':'
name|'base_uuid'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'parent_uuid'
op|','
nl|'\n'
string|"'snap'"
op|':'
name|'template_vdi_uuid'
op|'}'
newline|'\n'
name|'return'
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_sr_path
name|'def'
name|'get_sr_path'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the path to our storage repository\n\n        This is used when we\'re dealing with VHDs directly, either by taking\n        snapshots or by restoring an image in the DISK_VHD format.\n        """'
newline|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'sr_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"SR.get_record"'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'sr_uuid'
op|'='
name|'sr_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'xenapi_sr_base_path'
op|','
name|'sr_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|find_cached_image
name|'def'
name|'find_cached_image'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'image_id'
op|','
name|'sr_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the vdi-ref of the cached image."""'
newline|'\n'
name|'for'
name|'vdi_ref'
op|','
name|'vdi_rec'
name|'in'
name|'_get_all_vdis_in_sr'
op|'('
name|'session'
op|','
name|'sr_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
string|"'image-id'"
name|'in'
name|'vdi_rec'
op|'['
string|"'other_config'"
op|']'
name|'and'
nl|'\n'
name|'vdi_rec'
op|'['
string|"'other_config'"
op|']'
op|'['
string|"'image-id'"
op|']'
op|'=='
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'vdi_ref'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|upload_image
name|'def'
name|'upload_image'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vdi_uuids'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Requests that the Glance plugin bundle the specified VDIs and\n        push them into Glance using the specified human-friendly name.\n        """'
newline|'\n'
comment|'# NOTE(sirp): Currently we only support uploading images as VHD, there'
nl|'\n'
comment|'# is no RAW equivalent (yet)'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Asking xapi to upload %(vdi_uuids)s as"'
nl|'\n'
string|'" ID %(image_id)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'glance_host'
op|','
name|'glance_port'
op|'='
name|'glance'
op|'.'
name|'pick_glance_api_server'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'properties'
op|'['
string|"'auto_disk_config'"
op|']'
op|'='
name|'instance'
op|'.'
name|'auto_disk_config'
newline|'\n'
name|'properties'
op|'['
string|"'os_type'"
op|']'
op|'='
name|'instance'
op|'.'
name|'os_type'
name|'or'
name|'FLAGS'
op|'.'
name|'default_os_type'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vdi_uuids'"
op|':'
name|'vdi_uuids'
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'glance_host'"
op|':'
name|'glance_host'
op|','
nl|'\n'
string|"'glance_port'"
op|':'
name|'glance_port'
op|','
nl|'\n'
string|"'sr_path'"
op|':'
name|'cls'
op|'.'
name|'get_sr_path'
op|'('
name|'session'
op|')'
op|','
nl|'\n'
string|"'auth_token'"
op|':'
name|'getattr'
op|'('
name|'context'
op|','
string|"'auth_token'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
string|"'properties'"
op|':'
name|'properties'
op|'}'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'params'"
op|':'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'params'
op|')'
op|'}'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
string|"'upload_vhd'"
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|resize_disk
name|'def'
name|'resize_disk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vdi_ref'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
comment|'# Copy VDI over to something we can resize'
nl|'\n'
comment|'# NOTE(jerdfelt): Would be nice to just set vdi_ref to read/write'
nl|'\n'
indent|'        '
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'copy_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.copy'"
op|','
name|'vdi_ref'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'copy_uuid'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_uuid'"
op|','
name|'copy_ref'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Resize partition and filesystem down'
nl|'\n'
indent|'            '
name|'cls'
op|'.'
name|'auto_configure_disk'
op|'('
name|'session'
op|'='
name|'session'
op|','
nl|'\n'
name|'vdi_ref'
op|'='
name|'copy_ref'
op|','
nl|'\n'
name|'new_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create new VDI'
nl|'\n'
name|'new_ref'
op|'='
name|'cls'
op|'.'
name|'fetch_blank_disk'
op|'('
name|'session'
op|','
nl|'\n'
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'new_uuid'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_uuid'"
op|','
name|'new_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Manually copy contents over'
nl|'\n'
name|'virtual_size'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'_copy_partition'
op|'('
name|'session'
op|','
name|'copy_ref'
op|','
name|'new_ref'
op|','
number|'1'
op|','
name|'virtual_size'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'new_ref'
op|','
name|'new_uuid'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'destroy_vdi'
op|'('
name|'session'
op|','
name|'copy_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|auto_configure_disk
name|'def'
name|'auto_configure_disk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vdi_ref'
op|','
name|'new_gb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Partition and resize FS to match the size specified by\n        instance_types.root_gb.\n\n        This is a fail-safe to prevent accidentally destroying data on a disk\n        erroneously marked as auto_disk_config=True.\n\n        The criteria for allowing resize are:\n\n            1. \'auto_disk_config\' must be true for the instance (and image).\n               (If we\'ve made it here, then auto_disk_config=True.)\n\n            2. The disk must have only one partition.\n\n            3. The file-system on the one partition must be ext3 or ext4.\n        """'
newline|'\n'
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
name|'as'
name|'dev'
op|':'
newline|'\n'
indent|'            '
name|'partitions'
op|'='
name|'_get_partitions'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'partitions'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'num'
op|','
name|'start'
op|','
name|'old_sectors'
op|','
name|'ptype'
op|'='
name|'partitions'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'ptype'
name|'in'
op|'('
string|"'ext3'"
op|','
string|"'ext4'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'new_sectors'
op|'='
name|'new_gb'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'/'
name|'SECTOR_SIZE'
newline|'\n'
name|'_resize_part_and_fs'
op|'('
name|'dev'
op|','
name|'start'
op|','
name|'old_sectors'
op|','
name|'new_sectors'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_generate_disk
name|'def'
name|'_generate_disk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'userdevice'
op|','
name|'name'
op|','
nl|'\n'
name|'size_mb'
op|','
name|'fs_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Steps to programmatically generate a disk:\n\n            1. Create VDI of desired size\n\n            2. Attach VDI to compute worker\n\n            3. Create partition\n\n            4. Create VBD between instance VM and VDI\n        """'
newline|'\n'
comment|'# 1. Create VDI'
nl|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'name_label'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'name'
op|')'
newline|'\n'
name|'ONE_MEG'
op|'='
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'virtual_size'
op|'='
name|'size_mb'
op|'*'
name|'ONE_MEG'
newline|'\n'
name|'vdi_ref'
op|'='
name|'cls'
op|'.'
name|'create_vdi'
op|'('
nl|'\n'
name|'session'
op|','
name|'sr_ref'
op|','
name|'name_label'
op|','
name|'virtual_size'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# 2. Attach VDI to compute worker (VBD hotplug)'
nl|'\n'
indent|'            '
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
name|'as'
name|'dev'
op|':'
newline|'\n'
comment|'# 3. Create partition'
nl|'\n'
indent|'                '
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dev_path'
op|','
nl|'\n'
string|"'mklabel'"
op|','
string|"'msdos'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'partition_start'
op|'='
number|'0'
newline|'\n'
name|'partition_end'
op|'='
name|'size_mb'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dev_path'
op|','
nl|'\n'
string|"'mkpart'"
op|','
string|"'primary'"
op|','
nl|'\n'
name|'str'
op|'('
name|'partition_start'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'partition_end'
op|')'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'partition_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|','
name|'partition'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'fs_type'
op|'=='
string|"'linux-swap'"
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkswap'"
op|','
name|'partition_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fs_type'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
name|'fs_type'
op|','
name|'partition_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# 4. Create VBD between instance VM and swap VDI'
nl|'\n'
dedent|''
dedent|''
name|'volume_utils'
op|'.'
name|'VolumeHelper'
op|'.'
name|'create_vbd'
op|'('
nl|'\n'
name|'session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
name|'userdevice'
op|','
name|'bootable'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cls'
op|'.'
name|'destroy_vdi'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|generate_swap
name|'def'
name|'generate_swap'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'userdevice'
op|','
name|'swap_mb'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(jk0): We use a FAT32 filesystem for the Windows swap'
nl|'\n'
comment|'# partition because that is what parted supports.'
nl|'\n'
indent|'        '
name|'is_windows'
op|'='
name|'instance'
op|'.'
name|'os_type'
op|'=='
string|'"windows"'
newline|'\n'
name|'fs_type'
op|'='
string|'"vfat"'
name|'if'
name|'is_windows'
name|'else'
string|'"linux-swap"'
newline|'\n'
nl|'\n'
name|'cls'
op|'.'
name|'_generate_disk'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'userdevice'
op|','
nl|'\n'
string|"'swap'"
op|','
name|'swap_mb'
op|','
name|'fs_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|generate_ephemeral
name|'def'
name|'generate_ephemeral'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'userdevice'
op|','
nl|'\n'
name|'size_gb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cls'
op|'.'
name|'_generate_disk'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'userdevice'
op|','
nl|'\n'
string|"'ephemeral'"
op|','
name|'size_gb'
op|'*'
number|'1024'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'default_ephemeral_format'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|fetch_blank_disk
name|'def'
name|'fetch_blank_disk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_type_id'
op|')'
op|':'
newline|'\n'
comment|'# Size the blank harddrive to suit the machine type:'
nl|'\n'
indent|'        '
name|'one_gig'
op|'='
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'req_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
name|'req_size'
op|'='
name|'req_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating blank HD of size %(req_size)d gigs"'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'vdi_size'
op|'='
name|'one_gig'
op|'*'
name|'req_size'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"ISO vm create: Looking for the SR"'
op|')'
newline|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
nl|'\n'
name|'vdi_ref'
op|'='
name|'cls'
op|'.'
name|'create_vdi'
op|'('
name|'session'
op|','
name|'sr_ref'
op|','
string|"'blank HD'"
op|','
name|'vdi_size'
op|','
name|'False'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_kernel_image
name|'def'
name|'create_kernel_image'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'user_id'
op|','
nl|'\n'
name|'project_id'
op|','
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates kernel/ramdisk file from the image stored in the cache.\n        If the image is not present in the cache, it streams it from glance.\n\n        Returns: A list of dictionaries that describe VDIs\n        """'
newline|'\n'
name|'filename'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'cache_images'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'cached-image'"
op|']'
op|'='
name|'image'
newline|'\n'
name|'args'
op|'['
string|"'new-image-uuid'"
op|']'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
string|'"create_kernel_ramdisk"'
op|','
nl|'\n'
name|'args'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'filename'
op|'=='
string|'""'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'fetch_image'
op|'('
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'user_id'
op|','
name|'project_id'
op|','
name|'image_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
name|'dict'
op|'('
name|'vdi_type'
op|'='
name|'ImageType'
op|'.'
name|'to_string'
op|'('
name|'image_type'
op|')'
op|','
nl|'\n'
name|'vdi_uuid'
op|'='
name|'None'
op|','
nl|'\n'
name|'file'
op|'='
name|'filename'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_image
name|'def'
name|'create_image'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'user_id'
op|','
nl|'\n'
name|'project_id'
op|','
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates VDI from the image stored in the local cache. If the image\n        is not present in the cache, it streams it from glance.\n\n        Returns: A list of dictionaries that describe VDIs\n        """'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'cache_images'
op|'=='
name|'False'
name|'or'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_ISO'
op|':'
newline|'\n'
comment|'# If caching is disabled, we do not have to keep a copy of the'
nl|'\n'
comment|'# image. Fetch the image from glance.'
nl|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'fetch_image'
op|'('
name|'context'
op|','
name|'session'
op|','
nl|'\n'
name|'instance'
op|','
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'user_id'
op|','
name|'instance'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'sr_type'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.get_record'"
op|','
name|'sr_ref'
op|')'
op|'['
string|'"type"'
op|']'
newline|'\n'
name|'vdi_return_list'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
name|'and'
name|'sr_type'
op|'!='
string|'"ext"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Fast cloning is only supported on default local SR "'
nl|'\n'
string|'"of type ext. SR on this system was found to be of "'
nl|'\n'
string|'"type %(sr_type)s. Ignoring the cow flag."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vdi_ref'
op|'='
name|'cls'
op|'.'
name|'find_cached_image'
op|'('
name|'session'
op|','
name|'image'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'if'
name|'vdi_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'vdis'
op|'='
name|'cls'
op|'.'
name|'fetch_image'
op|'('
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'user_id'
op|','
nl|'\n'
name|'project_id'
op|','
name|'image_type'
op|')'
newline|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
nl|'\n'
name|'vdis'
op|'['
number|'0'
op|']'
op|'['
string|"'vdi_uuid'"
op|']'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.add_to_other_config'"
op|','
nl|'\n'
name|'vdi_ref'
op|','
string|'"image-id"'
op|','
name|'str'
op|'('
name|'image'
op|')'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.set_name_label'"
op|','
nl|'\n'
name|'vdi_ref'
op|','
string|'"Cached glance image"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'vdi'
op|'['
string|'"vdi_type"'
op|']'
op|'=='
string|'"swap"'
op|':'
newline|'\n'
indent|'                    '
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.add_to_other_config'"
op|','
nl|'\n'
name|'vdi_ref'
op|','
string|'"swap-disk"'
op|','
nl|'\n'
name|'str'
op|'('
name|'vdi'
op|'['
string|"'vdi_uuid'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'use_cow_images'
name|'and'
name|'sr_type'
op|'=='
string|"'ext'"
op|':'
newline|'\n'
indent|'            '
name|'new_vdi_ref'
op|'='
name|'cls'
op|'.'
name|'clone_vdi'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_vdi_ref'
op|'='
name|'cls'
op|'.'
name|'copy_vdi'
op|'('
name|'session'
op|','
name|'sr_ref'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the name label for the image we just created and remove image id'
nl|'\n'
comment|'# field from other-config.'
nl|'\n'
dedent|''
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.set_name_label'"
op|','
name|'new_vdi_ref'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.remove_from_other_config'"
op|','
nl|'\n'
name|'new_vdi_ref'
op|','
string|'"image-id"'
op|')'
newline|'\n'
nl|'\n'
name|'vdi_return_list'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
nl|'\n'
name|'vdi_type'
op|'='
op|'('
string|'"os"'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_VHD'
nl|'\n'
name|'else'
name|'ImageType'
op|'.'
name|'to_string'
op|'('
name|'image_type'
op|')'
op|')'
op|','
nl|'\n'
name|'vdi_uuid'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_uuid'"
op|','
name|'new_vdi_ref'
op|')'
op|','
nl|'\n'
name|'file'
op|'='
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a swap disk if the glance image had one associated with it.'
nl|'\n'
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_record'"
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
string|"'swap-disk'"
name|'in'
name|'vdi_rec'
op|'['
string|"'other_config'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'swap_disk_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'other_config'"
op|']'
op|'['
string|"'swap-disk'"
op|']'
newline|'\n'
name|'swap_vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_by_uuid'"
op|','
nl|'\n'
name|'swap_disk_uuid'
op|')'
newline|'\n'
name|'new_swap_vdi_ref'
op|'='
name|'cls'
op|'.'
name|'copy_vdi'
op|'('
name|'session'
op|','
name|'sr_ref'
op|','
name|'swap_vdi_ref'
op|')'
newline|'\n'
name|'new_swap_vdi_uuid'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_uuid'"
op|','
nl|'\n'
name|'new_swap_vdi_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.set_name_label'"
op|','
name|'new_swap_vdi_ref'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|'+'
string|'"-swap"'
op|')'
newline|'\n'
name|'vdi_return_list'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'vdi_type'
op|'='
string|'"swap"'
op|','
nl|'\n'
name|'vdi_uuid'
op|'='
name|'new_swap_vdi_uuid'
op|','
nl|'\n'
name|'file'
op|'='
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'vdi_return_list'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|fetch_image
name|'def'
name|'fetch_image'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'user_id'
op|','
nl|'\n'
name|'project_id'
op|','
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetch image from glance based on image type.\n\n        Returns: A single filename if image_type is KERNEL or RAMDISK\n                 A list of dictionaries that describe VDIs, otherwise\n        """'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_VHD'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_fetch_image_glance_vhd'
op|'('
name|'context'
op|','
nl|'\n'
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'image_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_fetch_image_glance_disk'
op|'('
name|'context'
op|','
nl|'\n'
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_fetch_image_glance_vhd
name|'def'
name|'_fetch_image_glance_vhd'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell glance to download an image and put the VHDs into the SR\n\n        Returns: A list of dictionaries that describe VDIs\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Asking xapi to fetch vhd image %(image)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): The Glance plugin runs under Python 2.4'
nl|'\n'
comment|'# which does not have the `uuid` module. To work around this,'
nl|'\n'
comment|'# we generate the uuids here (under Python 2.6+) and'
nl|'\n'
comment|'# pass them as arguments'
nl|'\n'
name|'uuid_stack'
op|'='
op|'['
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'3'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'glance_host'
op|','
name|'glance_port'
op|'='
name|'glance'
op|'.'
name|'pick_glance_api_server'
op|'('
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'image'
op|','
nl|'\n'
string|"'glance_host'"
op|':'
name|'glance_host'
op|','
nl|'\n'
string|"'glance_port'"
op|':'
name|'glance_port'
op|','
nl|'\n'
string|"'uuid_stack'"
op|':'
name|'uuid_stack'
op|','
nl|'\n'
string|"'sr_path'"
op|':'
name|'cls'
op|'.'
name|'get_sr_path'
op|'('
name|'session'
op|')'
op|','
nl|'\n'
string|"'num_retries'"
op|':'
name|'FLAGS'
op|'.'
name|'glance_num_retries'
op|','
nl|'\n'
string|"'auth_token'"
op|':'
name|'getattr'
op|'('
name|'context'
op|','
string|"'auth_token'"
op|','
name|'None'
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'params'"
op|':'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'params'
op|')'
op|'}'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
string|"'download_vhd'"
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|"# 'download_vhd' will return a json encoded string containing"
nl|'\n'
comment|'# a list of dictionaries describing VDIs.  The dictionary will'
nl|'\n'
comment|"# contain 'vdi_type' and 'vdi_uuid' keys.  'vdi_type' can be"
nl|'\n'
comment|"# 'os' or 'swap' right now."
nl|'\n'
name|'vdis'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'result'
op|')'
newline|'\n'
name|'for'
name|'vdi'
name|'in'
name|'vdis'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"xapi \'download_vhd\' returned VDI of "'
nl|'\n'
string|'"type \'%(vdi_type)s\' with UUID \'%(vdi_uuid)s\'"'
op|'%'
name|'vdi'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cls'
op|'.'
name|'scan_sr'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'sr_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pull out the UUID of the first VDI (which is the os VDI)'
nl|'\n'
name|'os_vdi_uuid'
op|'='
name|'vdis'
op|'['
number|'0'
op|']'
op|'['
string|"'vdi_uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Set the name-label to ease debugging'
nl|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_by_uuid"'
op|','
name|'os_vdi_uuid'
op|')'
newline|'\n'
name|'primary_name_label'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.set_name_label"'
op|','
name|'vdi_ref'
op|','
name|'primary_name_label'
op|')'
newline|'\n'
nl|'\n'
name|'cls'
op|'.'
name|'_check_vdi_size'
op|'('
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'os_vdi_uuid'
op|')'
newline|'\n'
name|'return'
name|'vdis'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_get_vdi_chain_size
name|'def'
name|'_get_vdi_chain_size'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'vdi_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compute the total size of a VDI chain, starting with the specified\n        VDI UUID.\n\n        This will walk the VDI chain to the root, add the size of each VDI into\n        the total.\n        """'
newline|'\n'
name|'size_bytes'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'vdi_rec'
name|'in'
name|'walk_vdi_chain'
op|'('
name|'session'
op|','
name|'vdi_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cur_vdi_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'vdi_size_bytes'
op|'='
name|'int'
op|'('
name|'vdi_rec'
op|'['
string|"'physical_utilisation'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'vdi_uuid=%(cur_vdi_uuid)s vdi_size_bytes='"
nl|'\n'
string|"'%(vdi_size_bytes)d'"
op|'%'
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'size_bytes'
op|'+='
name|'vdi_size_bytes'
newline|'\n'
dedent|''
name|'return'
name|'size_bytes'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_check_vdi_size
name|'def'
name|'_check_vdi_size'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vdi_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'size_bytes'
op|'='
name|'cls'
op|'.'
name|'_get_vdi_chain_size'
op|'('
name|'context'
op|','
name|'session'
op|','
name|'vdi_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|"# FIXME(jk0): this was copied directly from compute.manager.py, let's"
nl|'\n'
comment|'# refactor this to a common area'
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
name|'allowed_size_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'allowed_size_bytes'
op|'='
name|'allowed_size_gb'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"image_size_bytes=%(size_bytes)d, allowed_size_bytes="'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'size_bytes'
op|'>'
name|'allowed_size_bytes'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Image size %(size_bytes)d exceeded"'
nl|'\n'
string|'" instance_type allowed size "'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageTooLarge'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_fetch_image_glance_disk
name|'def'
name|'_fetch_image_glance_disk'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetch the image from Glance\n\n        NOTE:\n        Unlike _fetch_image_glance_vhd, this method does not use the Glance\n        plugin; instead, it streams the disks through domU to the VDI\n        directly.\n\n        Returns: A single filename if image_type is KERNEL_RAMDISK\n                 A list of dictionaries that describe VDIs, otherwise\n        """'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
newline|'\n'
comment|'# FIXME(sirp): Since the Glance plugin seems to be required for the'
nl|'\n'
comment|'# VHD disk, it may be worth using the plugin for both VHD and RAW and'
nl|'\n'
comment|'# DISK restores'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Fetching image %(image)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Image Type: %s"'
op|')'
op|','
name|'ImageType'
op|'.'
name|'to_string'
op|'('
name|'image_type'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_ISO'
op|':'
newline|'\n'
indent|'            '
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_iso_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: Found sr possibly containing the ISO image"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'glance_client'
op|','
name|'image_id'
op|'='
name|'glance'
op|'.'
name|'get_glance_client'
op|'('
name|'context'
op|','
name|'image'
op|')'
newline|'\n'
name|'glance_client'
op|'.'
name|'set_auth_token'
op|'('
name|'getattr'
op|'('
name|'context'
op|','
string|"'auth_token'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'meta'
op|','
name|'image_file'
op|'='
name|'glance_client'
op|'.'
name|'get_image'
op|'('
name|'image_id'
op|')'
newline|'\n'
name|'virtual_size'
op|'='
name|'int'
op|'('
name|'meta'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
name|'vdi_size'
op|'='
name|'virtual_size'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Size for image %(image)s:"'
op|'+'
nl|'\n'
string|'"%(virtual_size)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK'
op|':'
newline|'\n'
comment|'# Make room for MBR.'
nl|'\n'
indent|'            '
name|'vdi_size'
op|'+='
name|'MBR_SIZE_BYTES'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'image_type'
name|'in'
op|'('
name|'ImageType'
op|'.'
name|'KERNEL'
op|','
name|'ImageType'
op|'.'
name|'RAMDISK'
op|')'
name|'and'
nl|'\n'
name|'vdi_size'
op|'>'
name|'FLAGS'
op|'.'
name|'max_kernel_ramdisk_size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'max_size'
op|'='
name|'FLAGS'
op|'.'
name|'max_kernel_ramdisk_size'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Kernel/Ramdisk image is too large: %(vdi_size)d bytes, "'
nl|'\n'
string|'"max %(max_size)d bytes"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'name_label'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'vdi_ref'
op|'='
name|'cls'
op|'.'
name|'create_vdi'
op|'('
name|'session'
op|','
name|'sr_ref'
op|','
name|'name_label'
op|','
name|'vdi_size'
op|','
name|'False'
op|')'
newline|'\n'
comment|'# From this point we have a VDI on Xen host;'
nl|'\n'
comment|'# If anything goes wrong, we need to remember its uuid.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'filename'
op|'='
name|'None'
newline|'\n'
name|'vdi_uuid'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_uuid"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
name|'as'
name|'dev'
op|':'
newline|'\n'
indent|'                '
name|'_stream_disk'
op|'('
name|'dev'
op|','
name|'image_type'
op|','
name|'virtual_size'
op|','
name|'image_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_type'
name|'in'
op|'('
name|'ImageType'
op|'.'
name|'KERNEL'
op|','
name|'ImageType'
op|'.'
name|'RAMDISK'
op|')'
op|':'
newline|'\n'
comment|'# We need to invoke a plugin for copying the'
nl|'\n'
comment|'# content of the VDI into the proper path.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Copying VDI %s to /boot/guest on dom0"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'fn'
op|'='
string|'"copy_kernel_vdi"'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'vdi-ref'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
comment|'# Let the plugin copy the correct number of bytes.'
nl|'\n'
name|'args'
op|'['
string|"'image-size'"
op|']'
op|'='
name|'str'
op|'('
name|'vdi_size'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'cache_images'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'['
string|"'cached-image'"
op|']'
op|'='
name|'image'
newline|'\n'
dedent|''
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
name|'fn'
op|','
name|'args'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|'# Remove the VDI as it is not needed anymore.'
nl|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.destroy"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Kernel/Ramdisk VDI %s destroyed"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'return'
op|'['
name|'dict'
op|'('
name|'vdi_type'
op|'='
name|'ImageType'
op|'.'
name|'to_string'
op|'('
name|'image_type'
op|')'
op|','
nl|'\n'
name|'vdi_uuid'
op|'='
name|'None'
op|','
nl|'\n'
name|'file'
op|'='
name|'filename'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
name|'dict'
op|'('
name|'vdi_type'
op|'='
name|'ImageType'
op|'.'
name|'to_string'
op|'('
name|'image_type'
op|')'
op|','
nl|'\n'
name|'vdi_uuid'
op|'='
name|'vdi_uuid'
op|','
nl|'\n'
name|'file'
op|'='
name|'None'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'IOError'
op|','
name|'OSError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# We look for XenAPI and OS failures.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"instance %s: Failed to fetch glance image"'
op|')'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'e'
op|'.'
name|'args'
op|'='
name|'e'
op|'.'
name|'args'
op|'+'
op|'('
op|'['
name|'dict'
op|'('
name|'vdi_type'
op|'='
name|'ImageType'
op|'.'
nl|'\n'
name|'to_string'
op|'('
name|'image_type'
op|')'
op|','
nl|'\n'
name|'vdi_uuid'
op|'='
name|'vdi_uuid'
op|','
nl|'\n'
name|'file'
op|'='
name|'filename'
op|')'
op|']'
op|','
op|')'
newline|'\n'
name|'raise'
name|'e'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|determine_disk_image_type
name|'def'
name|'determine_disk_image_type'
op|'('
name|'cls'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disk Image Types are used to determine where the kernel will reside\n        within an image. To figure out which type we\'re dealing with, we use\n        the following rules:\n\n        1. If we\'re using Glance, we can use the image_type field to\n           determine the image_type\n\n        2. If we\'re not using Glance, then we need to deduce this based on\n           whether a kernel_id is specified.\n        """'
newline|'\n'
name|'disk_format'
op|'='
name|'image_meta'
op|'['
string|"'disk_format'"
op|']'
newline|'\n'
nl|'\n'
name|'disk_format_map'
op|'='
op|'{'
nl|'\n'
string|"'ami'"
op|':'
string|"'DISK'"
op|','
nl|'\n'
string|"'aki'"
op|':'
string|"'KERNEL'"
op|','
nl|'\n'
string|"'ari'"
op|':'
string|"'RAMDISK'"
op|','
nl|'\n'
string|"'raw'"
op|':'
string|"'DISK_RAW'"
op|','
nl|'\n'
string|"'vhd'"
op|':'
string|"'DISK_VHD'"
op|','
nl|'\n'
string|"'iso'"
op|':'
string|"'DISK_ISO'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'image_type_str'
op|'='
name|'disk_format_map'
op|'['
name|'disk_format'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDiskFormat'
op|'('
name|'disk_format'
op|'='
name|'disk_format'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'image_type'
op|'='
name|'getattr'
op|'('
name|'ImageType'
op|','
name|'image_type_str'
op|')'
newline|'\n'
nl|'\n'
name|'image_ref'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Detected %(image_type_str)s format for image %(image_ref)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'image_type'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|determine_is_pv
name|'def'
name|'determine_is_pv'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'vdi_ref'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'os_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Determine whether the VM will use a paravirtualized kernel or if it\n        will use hardware virtualization.\n\n            1. Glance (VHD): then we use `os_type`, raise if not set\n\n            2. Glance (DISK_RAW): use Pygrub to figure out if pv kernel is\n               available\n\n            3. Glance (DISK): pv is assumed\n\n            4. Glance (DISK_ISO): no pv is assumed\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Looking up vdi %s for PV kernel"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_VHD'
op|':'
newline|'\n'
comment|'# 1. VHD'
nl|'\n'
indent|'            '
name|'if'
name|'os_type'
op|'=='
string|"'windows'"
op|':'
newline|'\n'
indent|'                '
name|'is_pv'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'is_pv'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_RAW'
op|':'
newline|'\n'
comment|'# 2. RAW'
nl|'\n'
indent|'            '
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|'='
name|'True'
op|')'
name|'as'
name|'dev'
op|':'
newline|'\n'
indent|'                '
name|'is_pv'
op|'='
name|'_is_vdi_pv'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK'
op|':'
newline|'\n'
comment|'# 3. Disk'
nl|'\n'
indent|'            '
name|'is_pv'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_ISO'
op|':'
newline|'\n'
comment|'# 4. ISO'
nl|'\n'
indent|'            '
name|'is_pv'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Unknown image format %(disk_image_type)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'is_pv'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|set_vm_name_label
name|'def'
name|'set_vm_name_label'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.set_name_label"'
op|','
name|'vm_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|list_vms
name|'def'
name|'list_vms'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'vm_ref'
op|','
name|'vm_rec'
name|'in'
name|'cls'
op|'.'
name|'get_all_refs_and_recs'
op|'('
name|'session'
op|','
string|"'VM'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_rec'
op|'['
string|'"is_a_template"'
op|']'
name|'or'
name|'vm_rec'
op|'['
string|'"is_control_domain"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'vm_ref'
op|','
name|'vm_rec'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup
name|'def'
name|'lookup'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look the instance up and return it if available"""'
newline|'\n'
name|'vm_refs'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_by_name_label"'
op|','
name|'name_label'
op|')'
newline|'\n'
name|'n'
op|'='
name|'len'
op|'('
name|'vm_refs'
op|')'
newline|'\n'
name|'if'
name|'n'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'n'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'name_label'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_refs'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup_vm_vdis
name|'def'
name|'lookup_vm_vdis'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for the VDIs that are attached to the VM"""'
newline|'\n'
comment|'# Firstly we get the VBDs, then the VDIs.'
nl|'\n'
comment|'# TODO(Armando): do we leave the read-only devices?'
nl|'\n'
name|'vbd_refs'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_VBDs"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'vdi_refs'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_VDI"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
comment|'# Test valid VDI'
nl|'\n'
name|'record'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_record"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VDI %s is still available'"
op|')'
op|','
name|'record'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'vdi_refs'
op|'.'
name|'append'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'vdi_refs'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vdi_refs'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|preconfigure_instance
name|'def'
name|'preconfigure_instance'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vdi_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes alterations to the image before launching as part of spawn.\n        """'
newline|'\n'
nl|'\n'
comment|'# As mounting the image VDI is expensive, we only want do do it once,'
nl|'\n'
comment|"# if at all, so determine whether it's required first, and then do"
nl|'\n'
comment|'# everything'
nl|'\n'
name|'mount_required'
op|'='
name|'False'
newline|'\n'
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|'='
name|'_prepare_injectables'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mount_required'
op|'='
name|'key'
name|'or'
name|'net'
name|'or'
name|'metadata'
newline|'\n'
name|'if'
name|'not'
name|'mount_required'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
name|'as'
name|'dev'
op|':'
newline|'\n'
indent|'            '
name|'_mounted_processing'
op|'('
name|'dev'
op|','
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup_kernel_ramdisk
name|'def'
name|'lookup_kernel_ramdisk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm'
op|')'
newline|'\n'
name|'if'
string|"'PV_kernel'"
name|'in'
name|'vm_rec'
name|'and'
string|"'PV_ramdisk'"
name|'in'
name|'vm_rec'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'vm_rec'
op|'['
string|"'PV_kernel'"
op|']'
op|','
name|'vm_rec'
op|'['
string|"'PV_ramdisk'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|is_snapshot
name|'def'
name|'is_snapshot'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_record"'
op|','
name|'vm'
op|')'
newline|'\n'
name|'if'
string|"'is_a_template'"
name|'in'
name|'vm_rec'
name|'and'
string|"'is_a_snapshot'"
name|'in'
name|'vm_rec'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_rec'
op|'['
string|"'is_a_template'"
op|']'
name|'and'
name|'vm_rec'
op|'['
string|"'is_a_snapshot'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|compile_info
name|'def'
name|'compile_info'
op|'('
name|'cls'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fill record with VM status information"""'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"(VM_UTILS) xenserver vm state -> |%s|"'
op|')'
op|','
nl|'\n'
name|'record'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"(VM_UTILS) xenapi power_state -> |%s|"'
op|')'
op|','
nl|'\n'
name|'XENAPI_POWER_STATE'
op|'['
name|'record'
op|'['
string|"'power_state'"
op|']'
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'XENAPI_POWER_STATE'
op|'['
name|'record'
op|'['
string|"'power_state'"
op|']'
op|']'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'long'
op|'('
name|'record'
op|'['
string|"'memory_static_max'"
op|']'
op|')'
op|'>>'
number|'10'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'long'
op|'('
name|'record'
op|'['
string|"'memory_dynamic_max'"
op|']'
op|')'
op|'>>'
number|'10'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'record'
op|'['
string|"'VCPUs_max'"
op|']'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|compile_diagnostics
name|'def'
name|'compile_diagnostics'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compile VM diagnostics data"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'host_ip'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.get_record"'
op|','
name|'host'
op|')'
op|'['
string|'"address"'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'KeyError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|'"Unable to retrieve diagnostics"'
op|':'
name|'e'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'diags'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'xml'
op|'='
name|'get_rrd'
op|'('
name|'host_ip'
op|','
name|'record'
op|'['
string|'"uuid"'
op|']'
op|')'
newline|'\n'
name|'if'
name|'xml'
op|':'
newline|'\n'
indent|'                '
name|'rrd'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'node'
name|'in'
name|'enumerate'
op|'('
name|'rrd'
op|'.'
name|'firstChild'
op|'.'
name|'childNodes'
op|')'
op|':'
newline|'\n'
comment|"# We don't want all of the extra garbage"
nl|'\n'
indent|'                    '
name|'if'
name|'i'
op|'>='
number|'3'
name|'and'
name|'i'
op|'<='
number|'11'
op|':'
newline|'\n'
indent|'                        '
name|'ref'
op|'='
name|'node'
op|'.'
name|'childNodes'
newline|'\n'
comment|'# Name and Value'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'ref'
op|')'
op|'>'
number|'6'
op|':'
newline|'\n'
indent|'                            '
name|'_ref_zero'
op|'='
name|'ref'
op|'['
number|'0'
op|']'
op|'.'
name|'firstChild'
op|'.'
name|'data'
newline|'\n'
name|'diags'
op|'['
name|'_ref_zero'
op|']'
op|'='
name|'ref'
op|'['
number|'6'
op|']'
op|'.'
name|'firstChild'
op|'.'
name|'data'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'diags'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|'"Unable to retrieve diagnostics"'
op|':'
name|'e'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|compile_metrics
name|'def'
name|'compile_metrics'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'start_time'
op|','
name|'stop_time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compile bandwidth usage, cpu, and disk metrics for all VMs on\n           this host"""'
newline|'\n'
name|'start_time'
op|'='
name|'int'
op|'('
name|'start_time'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'host_ip'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"host.get_record"'
op|','
name|'host'
op|')'
op|'['
string|'"address"'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'KeyError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'CouldNotFetchMetrics'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xml'
op|'='
name|'get_rrd_updates'
op|'('
name|'host_ip'
op|','
name|'start_time'
op|')'
newline|'\n'
name|'if'
name|'xml'
op|':'
newline|'\n'
indent|'            '
name|'doc'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'return'
name|'parse_rrd_update'
op|'('
name|'doc'
op|','
name|'start_time'
op|','
name|'stop_time'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'CouldNotFetchMetrics'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|scan_sr
name|'def'
name|'scan_sr'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'sr_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Scans the SR specified by sr_ref"""'
newline|'\n'
name|'if'
name|'sr_ref'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Re-scanning SR %s"'
op|')'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.SR.scan'"
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'if'
name|'instance'
name|'else'
name|'None'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|scan_default_sr
name|'def'
name|'scan_default_sr'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Looks for the system default SR and triggers a re-scan"""'
newline|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.scan'"
op|','
name|'sr_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|safe_find_sr
name|'def'
name|'safe_find_sr'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Same as find_sr except raises a NotFound exception if SR cannot be\n        determined\n        """'
newline|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'sr_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'StorageRepositoryNotFound'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sr_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|find_sr
name|'def'
name|'find_sr'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the storage repository to hold VM images"""'
newline|'\n'
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'tokens'
op|'='
name|'FLAGS'
op|'.'
name|'sr_matching_filter'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'filter_criteria'
op|'='
name|'tokens'
op|'['
number|'0'
op|']'
newline|'\n'
name|'filter_pattern'
op|'='
name|'tokens'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
comment|'# oops, flag is invalid'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Flag sr_matching_filter \'%s\' does not respect "'
nl|'\n'
string|'"formatting convention"'
op|')'
op|','
name|'FLAGS'
op|'.'
name|'sr_matching_filter'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'filter_criteria'
op|'=='
string|"'other-config'"
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'value'
op|'='
name|'filter_pattern'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'sr_ref'
op|','
name|'sr_rec'
name|'in'
name|'cls'
op|'.'
name|'get_all_refs_and_recs'
op|'('
name|'session'
op|','
string|"'SR'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
op|'('
name|'key'
name|'in'
name|'sr_rec'
op|'['
string|"'other_config'"
op|']'
name|'and'
nl|'\n'
name|'sr_rec'
op|'['
string|"'other_config'"
op|']'
op|'['
name|'key'
op|']'
op|'=='
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'pbd_ref'
name|'in'
name|'sr_rec'
op|'['
string|"'PBDs'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'pbd_rec'
op|'='
name|'cls'
op|'.'
name|'get_rec'
op|'('
name|'session'
op|','
string|"'PBD'"
op|','
name|'pbd_ref'
op|')'
newline|'\n'
name|'if'
name|'pbd_rec'
name|'and'
name|'pbd_rec'
op|'['
string|"'host'"
op|']'
op|'=='
name|'host'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'sr_ref'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'elif'
name|'filter_criteria'
op|'=='
string|"'default-sr'"
name|'and'
name|'filter_pattern'
op|'=='
string|"'true'"
op|':'
newline|'\n'
indent|'            '
name|'pool_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'pool.get_all'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'pool.get_default_SR'"
op|','
name|'pool_ref'
op|')'
newline|'\n'
comment|'# No SR found!'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"XenAPI is unable to find a Storage Repository to "'
nl|'\n'
string|'"install guest instances on. Please check your "'
nl|'\n'
string|'"configuration and/or configure the flag "'
nl|'\n'
string|'"\'sr_matching_filter\'"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|safe_find_iso_sr
name|'def'
name|'safe_find_iso_sr'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Same as find_iso_sr except raises a NotFound exception if SR\n        cannot be determined\n        """'
newline|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'find_iso_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'sr_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|"'Cannot find SR of content-type ISO'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sr_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|find_iso_sr
name|'def'
name|'find_iso_sr'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the storage repository to hold ISO images"""'
newline|'\n'
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'for'
name|'sr_ref'
op|','
name|'sr_rec'
name|'in'
name|'cls'
op|'.'
name|'get_all_refs_and_recs'
op|'('
name|'session'
op|','
string|"'SR'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: looking at SR %(sr_rec)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'sr_rec'
op|'['
string|"'content_type'"
op|']'
op|'=='
string|"'iso'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: not iso content"'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'not'
string|"'i18n-key'"
name|'in'
name|'sr_rec'
op|'['
string|"'other_config'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: iso content_type, no \'i18n-key\' key"'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'sr_rec'
op|'['
string|"'other_config'"
op|']'
op|'['
string|"'i18n-key'"
op|']'
op|'=='
string|"'local-storage-iso'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: iso content_type, i18n-key value not "'
nl|'\n'
string|'"\'local-storage-iso\'"'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: SR MATCHing our criteria"'
op|')'
op|')'
newline|'\n'
name|'for'
name|'pbd_ref'
name|'in'
name|'sr_rec'
op|'['
string|"'PBDs'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: ISO, looking to see if it is host local"'
op|')'
op|')'
newline|'\n'
name|'pbd_rec'
op|'='
name|'cls'
op|'.'
name|'get_rec'
op|'('
name|'session'
op|','
string|"'PBD'"
op|','
name|'pbd_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'pbd_rec'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: PBD %(pbd_ref)s disappeared"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'pbd_rec_host'
op|'='
name|'pbd_rec'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: PBD matching, want %(pbd_rec)s, "'
op|'+'
nl|'\n'
string|'"have %(host)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'pbd_rec_host'
op|'=='
name|'host'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ISO: SR with local PBD"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'sr_ref'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_rrd
dedent|''
dedent|''
name|'def'
name|'get_rrd'
op|'('
name|'host'
op|','
name|'vm_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the VM RRD XML as a string"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'urllib'
op|'.'
name|'urlopen'
op|'('
string|'"http://%s:%s@%s/vm_rrd?uuid=%s"'
op|'%'
op|'('
nl|'\n'
name|'FLAGS'
op|'.'
name|'xenapi_connection_username'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'xenapi_connection_password'
op|','
nl|'\n'
name|'host'
op|','
nl|'\n'
name|'vm_uuid'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_rrd_updates
dedent|''
dedent|''
name|'def'
name|'get_rrd_updates'
op|'('
name|'host'
op|','
name|'start_time'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the RRD updates XML as a string"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'urllib'
op|'.'
name|'urlopen'
op|'('
string|'"http://%s:%s@%s/rrd_updates?start=%s"'
op|'%'
op|'('
nl|'\n'
name|'FLAGS'
op|'.'
name|'xenapi_connection_username'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'xenapi_connection_password'
op|','
nl|'\n'
name|'host'
op|','
nl|'\n'
name|'start_time'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_rrd_meta
dedent|''
dedent|''
name|'def'
name|'parse_rrd_meta'
op|'('
name|'doc'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'meta'
op|'='
name|'doc'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'meta'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'tag'
name|'in'
op|'('
string|"'start'"
op|','
string|"'end'"
op|','
string|"'step'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'['
name|'tag'
op|']'
op|'='
name|'int'
op|'('
name|'meta'
op|'.'
name|'getElementsByTagName'
op|'('
name|'tag'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'firstChild'
op|'.'
name|'data'
op|')'
newline|'\n'
dedent|''
name|'legend'
op|'='
name|'meta'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'legend'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'data'
op|'['
string|"'legend'"
op|']'
op|'='
op|'['
name|'child'
op|'.'
name|'firstChild'
op|'.'
name|'data'
name|'for'
name|'child'
name|'in'
name|'legend'
op|'.'
name|'childNodes'
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_rrd_data
dedent|''
name|'def'
name|'parse_rrd_data'
op|'('
name|'doc'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dnode'
op|'='
name|'doc'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'data'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'['
name|'dict'
op|'('
nl|'\n'
name|'time'
op|'='
name|'int'
op|'('
name|'child'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'t'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'firstChild'
op|'.'
name|'data'
op|')'
op|','
nl|'\n'
name|'values'
op|'='
op|'['
name|'Decimal'
op|'('
name|'valnode'
op|'.'
name|'firstChild'
op|'.'
name|'data'
op|')'
nl|'\n'
name|'for'
name|'valnode'
name|'in'
name|'child'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'v'"
op|')'
op|']'
op|')'
nl|'\n'
name|'for'
name|'child'
name|'in'
name|'dnode'
op|'.'
name|'childNodes'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_rrd_update
dedent|''
name|'def'
name|'parse_rrd_update'
op|'('
name|'doc'
op|','
name|'start'
op|','
name|'until'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'sum_data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'meta'
op|'='
name|'parse_rrd_meta'
op|'('
name|'doc'
op|')'
newline|'\n'
name|'data'
op|'='
name|'parse_rrd_data'
op|'('
name|'doc'
op|')'
newline|'\n'
name|'for'
name|'col'
op|','
name|'collabel'
name|'in'
name|'enumerate'
op|'('
name|'meta'
op|'['
string|"'legend'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'datatype'
op|','
name|'objtype'
op|','
name|'uuid'
op|','
name|'name'
op|'='
name|'collabel'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'vm_data'
op|'='
name|'sum_data'
op|'.'
name|'get'
op|'('
name|'uuid'
op|','
name|'dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|"'vif'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_data'
op|'['
name|'name'
op|']'
op|'='
name|'integrate_series'
op|'('
name|'data'
op|','
name|'col'
op|','
name|'start'
op|','
name|'until'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'vm_data'
op|'['
name|'name'
op|']'
op|'='
name|'average_series'
op|'('
name|'data'
op|','
name|'col'
op|','
name|'start'
op|','
name|'until'
op|')'
newline|'\n'
dedent|''
name|'sum_data'
op|'['
name|'uuid'
op|']'
op|'='
name|'vm_data'
newline|'\n'
dedent|''
name|'return'
name|'sum_data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|average_series
dedent|''
name|'def'
name|'average_series'
op|'('
name|'data'
op|','
name|'col'
op|','
name|'start'
op|','
name|'until'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vals'
op|'='
op|'['
name|'row'
op|'['
string|"'values'"
op|']'
op|'['
name|'col'
op|']'
name|'for'
name|'row'
name|'in'
name|'data'
nl|'\n'
name|'if'
op|'('
name|'not'
name|'until'
name|'or'
op|'('
name|'row'
op|'['
string|"'time'"
op|']'
op|'<='
name|'until'
op|')'
op|')'
name|'and'
nl|'\n'
name|'row'
op|'['
string|"'values'"
op|']'
op|'['
name|'col'
op|']'
op|'.'
name|'is_finite'
op|'('
op|')'
op|']'
newline|'\n'
name|'if'
name|'vals'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'sum'
op|'('
name|'vals'
op|')'
op|'/'
name|'len'
op|'('
name|'vals'
op|')'
op|')'
op|'.'
name|'quantize'
op|'('
name|'Decimal'
op|'('
string|"'1.0000'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidOperation'
op|':'
newline|'\n'
comment|'# (mdragon) Xenserver occasionally returns odd values in'
nl|'\n'
comment|'# data that will throw an error on averaging (see bug 918490)'
nl|'\n'
comment|'# These are hard to find, since, whatever those values are,'
nl|'\n'
comment|'# Decimal seems to think they are a valid number, sortof.'
nl|'\n'
comment|"# We *think* we've got the the cases covered, but just in"
nl|'\n'
comment|"# case, log and return NaN, so we don't break reporting of"
nl|'\n'
comment|'# other statistics.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Invalid statistics data from Xenserver: %s"'
op|')'
nl|'\n'
op|'%'
name|'str'
op|'('
name|'vals'
op|')'
op|')'
newline|'\n'
name|'return'
name|'Decimal'
op|'('
string|"'NaN'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Decimal'
op|'('
string|"'0.0000'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|integrate_series
dedent|''
dedent|''
name|'def'
name|'integrate_series'
op|'('
name|'data'
op|','
name|'col'
op|','
name|'start'
op|','
name|'until'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'total'
op|'='
name|'Decimal'
op|'('
string|"'0.0000'"
op|')'
newline|'\n'
name|'prev_time'
op|'='
name|'int'
op|'('
name|'start'
op|')'
newline|'\n'
name|'prev_val'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'reversed'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'until'
name|'or'
op|'('
name|'row'
op|'['
string|"'time'"
op|']'
op|'<='
name|'until'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'='
name|'row'
op|'['
string|"'time'"
op|']'
newline|'\n'
name|'val'
op|'='
name|'row'
op|'['
string|"'values'"
op|']'
op|'['
name|'col'
op|']'
newline|'\n'
name|'if'
name|'val'
op|'.'
name|'is_nan'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'val'
op|'='
name|'Decimal'
op|'('
string|"'0.0000'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'prev_val'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'prev_val'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'if'
name|'prev_val'
op|'>='
name|'val'
op|':'
newline|'\n'
indent|'                '
name|'total'
op|'+='
op|'('
op|'('
name|'val'
op|'*'
op|'('
name|'time'
op|'-'
name|'prev_time'
op|')'
op|')'
op|'+'
nl|'\n'
op|'('
name|'Decimal'
op|'('
string|"'0.5000'"
op|')'
op|'*'
op|'('
name|'prev_val'
op|'-'
name|'val'
op|')'
op|'*'
nl|'\n'
op|'('
name|'time'
op|'-'
name|'prev_time'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'total'
op|'+='
op|'('
op|'('
name|'prev_val'
op|'*'
op|'('
name|'time'
op|'-'
name|'prev_time'
op|')'
op|')'
op|'+'
nl|'\n'
op|'('
name|'Decimal'
op|'('
string|"'0.5000'"
op|')'
op|'*'
op|'('
name|'val'
op|'-'
name|'prev_val'
op|')'
op|'*'
nl|'\n'
op|'('
name|'time'
op|'-'
name|'prev_time'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'prev_time'
op|'='
name|'time'
newline|'\n'
name|'prev_val'
op|'='
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'total'
op|'.'
name|'quantize'
op|'('
name|'Decimal'
op|'('
string|"'1.0000'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_all_vdis_in_sr
dedent|''
name|'def'
name|'_get_all_vdis_in_sr'
op|'('
name|'session'
op|','
name|'sr_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'vdi_ref'
name|'in'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.get_VDIs'"
op|','
name|'sr_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_record'"
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'yield'
name|'vdi_ref'
op|','
name|'vdi_rec'
newline|'\n'
dedent|''
name|'except'
name|'VMHelper'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#TODO(sirp): This code comes from XS5.6 pluginlib.py, we should refactor to'
nl|'\n'
comment|'# use that implmenetation'
nl|'\n'
DECL|function|get_vhd_parent
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vhd_parent'
op|'('
name|'session'
op|','
name|'vdi_rec'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns the VHD parent of the given VDI record, as a (ref, rec) pair.\n    Returns None if we\'re at the root of the tree.\n    """'
newline|'\n'
name|'if'
string|"'vhd-parent'"
name|'in'
name|'vdi_rec'
op|'['
string|"'sm_config'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'parent_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'sm_config'"
op|']'
op|'['
string|"'vhd-parent'"
op|']'
newline|'\n'
name|'parent_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_by_uuid"'
op|','
name|'parent_uuid'
op|')'
newline|'\n'
name|'parent_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_record"'
op|','
name|'parent_ref'
op|')'
newline|'\n'
name|'vdi_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"VHD %(vdi_uuid)s has parent %(parent_ref)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'parent_ref'
op|','
name|'parent_rec'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vhd_parent_uuid
dedent|''
dedent|''
name|'def'
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_record"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'get_vhd_parent'
op|'('
name|'session'
op|','
name|'vdi_rec'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'        '
name|'parent_ref'
op|','
name|'parent_rec'
op|'='
name|'ret'
newline|'\n'
name|'return'
name|'parent_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|walk_vdi_chain
dedent|''
dedent|''
name|'def'
name|'walk_vdi_chain'
op|'('
name|'session'
op|','
name|'vdi_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Yield vdi_recs for each element in a VDI chain"""'
newline|'\n'
comment|'# TODO(jk0): perhaps make get_vhd_parent use this'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_by_uuid"'
op|','
name|'vdi_uuid'
op|')'
newline|'\n'
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_record"'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'yield'
name|'vdi_rec'
newline|'\n'
nl|'\n'
name|'parent_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'sm_config'"
op|']'
op|'.'
name|'get'
op|'('
string|"'vhd-parent'"
op|')'
newline|'\n'
name|'if'
name|'parent_uuid'
op|':'
newline|'\n'
indent|'            '
name|'vdi_uuid'
op|'='
name|'parent_uuid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_wait_for_vhd_coalesce
dedent|''
dedent|''
dedent|''
name|'def'
name|'_wait_for_vhd_coalesce'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'sr_ref'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'original_parent_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Spin until the parent VHD is coalesced into its parent VHD\n\n    Before coalesce:\n        * original_parent_vhd\n            * parent_vhd\n                snapshot\n\n    After coalesce:\n        * parent_vhd\n            snapshot\n    """'
newline|'\n'
DECL|function|_another_child_vhd
name|'def'
name|'_another_child_vhd'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'original_parent_uuid'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Search for any other vdi which parents to original parent and is not'
nl|'\n'
comment|'# in the active vm/instance vdi chain.'
nl|'\n'
dedent|''
name|'vdi_uuid'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VDI.get_record'"
op|','
name|'vdi_ref'
op|')'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'parent_vdi_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'for'
name|'ref'
op|','
name|'rec'
name|'in'
name|'_get_all_vdis_in_sr'
op|'('
name|'session'
op|','
name|'sr_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
op|'('
name|'rec'
op|'['
string|"'uuid'"
op|']'
op|'!='
name|'vdi_uuid'
op|')'
name|'and'
nl|'\n'
op|'('
name|'rec'
op|'['
string|"'uuid'"
op|']'
op|'!='
name|'parent_vdi_uuid'
op|')'
name|'and'
nl|'\n'
op|'('
name|'rec'
op|'['
string|"'sm_config'"
op|']'
op|'.'
name|'get'
op|'('
string|"'vhd-parent'"
op|')'
op|'=='
name|'original_parent_uuid'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# Found another vhd which too parents to original parent.'
nl|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
comment|'# Found no other vdi with the same parent.'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Check if original parent has any other child. If so, coalesce will'
nl|'\n'
comment|'# not take place.'
nl|'\n'
dedent|''
name|'if'
name|'_another_child_vhd'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parent_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'parent_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_by_uuid"'
op|','
name|'parent_uuid'
op|')'
newline|'\n'
name|'base_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'parent_ref'
op|')'
newline|'\n'
name|'return'
name|'parent_uuid'
op|','
name|'base_uuid'
newline|'\n'
nl|'\n'
dedent|''
name|'max_attempts'
op|'='
name|'FLAGS'
op|'.'
name|'xenapi_vhd_coalesce_max_attempts'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'max_attempts'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'VMHelper'
op|'.'
name|'scan_sr'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'parent_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
name|'original_parent_uuid'
name|'and'
op|'('
name|'parent_uuid'
op|'!='
name|'original_parent_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Parent %(parent_uuid)s doesn\'t match original parent"'
nl|'\n'
string|'" %(original_parent_uuid)s, waiting for coalesce..."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'parent_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VDI.get_by_uuid"'
op|','
name|'parent_uuid'
op|')'
newline|'\n'
name|'base_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'parent_ref'
op|')'
newline|'\n'
name|'return'
name|'parent_uuid'
op|','
name|'base_uuid'
newline|'\n'
nl|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'FLAGS'
op|'.'
name|'xenapi_vhd_coalesce_poll_interval'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"VHD coalesce attempts exceeded (%(max_attempts)d)"'
nl|'\n'
string|'", giving up..."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remap_vbd_dev
dedent|''
name|'def'
name|'remap_vbd_dev'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the appropriate location for a plugged-in VBD device\n\n    Ubuntu Maverick moved xvd? -> sd?. This is considered a bug and will be\n    fixed in future versions:\n        https://bugs.launchpad.net/ubuntu/+source/linux/+bug/684875\n\n    For now, we work around it by just doing a string replace.\n    """'
newline|'\n'
comment|'# NOTE(sirp): This hack can go away when we pull support for Maverick'
nl|'\n'
name|'should_remap'
op|'='
name|'FLAGS'
op|'.'
name|'xenapi_remap_vbd_dev'
newline|'\n'
name|'if'
name|'not'
name|'should_remap'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
dedent|''
name|'old_prefix'
op|'='
string|"'xvd'"
newline|'\n'
name|'new_prefix'
op|'='
name|'FLAGS'
op|'.'
name|'xenapi_remap_vbd_dev_prefix'
newline|'\n'
name|'remapped_dev'
op|'='
name|'dev'
op|'.'
name|'replace'
op|'('
name|'old_prefix'
op|','
name|'new_prefix'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'remapped_dev'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_wait_for_device
dedent|''
name|'def'
name|'_wait_for_device'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wait for device node to appear"""'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'FLAGS'
op|'.'
name|'block_device_creation_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dev_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'volume_utils'
op|'.'
name|'StorageError'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Timeout waiting for device %s to be created'"
op|')'
op|'%'
name|'dev'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|vdi_attached_here
name|'def'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'this_vm_ref'
op|'='
name|'get_this_vm_ref'
op|'('
name|'session'
op|')'
newline|'\n'
name|'vbd_rec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VM'"
op|']'
op|'='
name|'this_vm_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VDI'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'='
string|"'autodetect'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'bootable'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'mode'"
op|']'
op|'='
name|'read_only'
name|'and'
string|"'RO'"
name|'or'
string|"'RW'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'type'"
op|']'
op|'='
string|"'disk'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'unpluggable'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'empty'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'other_config'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_type'"
op|']'
op|'='
string|"''"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_params'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_supported_algorithms'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VBD for VDI %s ... '"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'vbd_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.create"'
op|','
name|'vbd_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VBD for VDI %s done.'"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Plugging VBD %s ... '"
op|')'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.plug"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Plugging VBD %s done.'"
op|')'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'orig_dev'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.get_device"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD %(vbd_ref)s plugged as %(orig_dev)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'remap_vbd_dev'
op|'('
name|'orig_dev'
op|')'
newline|'\n'
name|'if'
name|'dev'
op|'!='
name|'orig_dev'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD %(vbd_ref)s plugged into wrong dev, '"
nl|'\n'
string|"'remapping to %(dev)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'dev'
op|'!='
string|"'autodetect'"
op|':'
newline|'\n'
comment|'# NOTE(johannes): Unit tests will end up with a device called'
nl|'\n'
comment|"# 'autodetect' which obviously won't exist. It's not ideal,"
nl|'\n'
comment|'# but the alternatives were much messier'
nl|'\n'
indent|'                '
name|'_wait_for_device'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'yield'
name|'dev'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Destroying VBD for VDI %s ... '"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'vbd_unplug_with_retry'
op|'('
name|'session'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'ignore_failure'
op|'('
name|'session'
op|'.'
name|'call_xenapi'
op|','
string|'"VBD.destroy"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Destroying VBD for VDI %s done.'"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vbd_unplug_with_retry
dedent|''
dedent|''
name|'def'
name|'vbd_unplug_with_retry'
op|'('
name|'session'
op|','
name|'vbd_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Call VBD.unplug on the given VBD, with a retry if we get\n    DEVICE_DETACH_REJECTED.  For reasons which I don\'t understand, we\'re\n    seeing the device still in use, even when all processes using the device\n    should be dead."""'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VBD.unplug"'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD.unplug successful first time.'"
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'VMHelper'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'len'
op|'('
name|'e'
op|'.'
name|'details'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'e'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'DEVICE_DETACH_REJECTED'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD.unplug rejected: retrying...'"
op|')'
op|')'
newline|'\n'
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Not sleeping anymore!'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'len'
op|'('
name|'e'
op|'.'
name|'details'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'e'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'DEVICE_ALREADY_DETACHED'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD.unplug successful eventually.'"
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Ignoring XenAPI.Failure in VBD.unplug: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ignore_failure
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'ignore_failure'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'VMHelper'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Ignoring XenAPI.Failure %s'"
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_this_vm_uuid
dedent|''
dedent|''
name|'def'
name|'get_this_vm_uuid'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'with'
name|'file'
op|'('
string|"'/sys/hypervisor/uuid'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_this_vm_ref
dedent|''
dedent|''
name|'def'
name|'get_this_vm_ref'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|'"VM.get_by_uuid"'
op|','
name|'get_this_vm_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_vdi_pv
dedent|''
name|'def'
name|'_is_vdi_pv'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Running pygrub against %s"'
op|')'
op|','
name|'dev'
op|')'
newline|'\n'
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'output'
op|'='
name|'os'
op|'.'
name|'popen'
op|'('
string|"'pygrub -qn %s'"
op|'%'
name|'dev_path'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'output'
op|'.'
name|'readlines'
op|'('
op|')'
op|':'
newline|'\n'
comment|'#try to find kernel string'
nl|'\n'
indent|'        '
name|'m'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|"'(?<=kernel:)/.*(?:>)'"
op|','
name|'line'
op|')'
newline|'\n'
name|'if'
name|'m'
name|'and'
name|'m'
op|'.'
name|'group'
op|'('
number|'0'
op|')'
op|'.'
name|'find'
op|'('
string|"'xen'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found Xen kernel %s"'
op|')'
op|'%'
name|'m'
op|'.'
name|'group'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"No Xen kernel found.  Booting HVM."'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_partitions
dedent|''
name|'def'
name|'_get_partitions'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return partition information (num, size, type) for a device."""'
newline|'\n'
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
string|"'--machine'"
op|','
nl|'\n'
name|'dev_path'
op|','
string|"'unit s'"
op|','
string|"'print'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'lines'
op|'='
op|'['
name|'line'
name|'for'
name|'line'
name|'in'
name|'out'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
name|'if'
name|'line'
op|']'
newline|'\n'
name|'partitions'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Partitions:"'
op|')'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|'['
number|'2'
op|':'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'num'
op|','
name|'start'
op|','
name|'end'
op|','
name|'size'
op|','
name|'ptype'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
op|':'
number|'5'
op|']'
newline|'\n'
name|'start'
op|'='
name|'int'
op|'('
name|'start'
op|'.'
name|'rstrip'
op|'('
string|"'s'"
op|')'
op|')'
newline|'\n'
name|'end'
op|'='
name|'int'
op|'('
name|'end'
op|'.'
name|'rstrip'
op|'('
string|"'s'"
op|')'
op|')'
newline|'\n'
name|'size'
op|'='
name|'int'
op|'('
name|'size'
op|'.'
name|'rstrip'
op|'('
string|"'s'"
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"  %(num)s: %(ptype)s %(size)d sectors"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'partitions'
op|'.'
name|'append'
op|'('
op|'('
name|'num'
op|','
name|'start'
op|','
name|'size'
op|','
name|'ptype'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'partitions'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_stream_disk
dedent|''
name|'def'
name|'_stream_disk'
op|'('
name|'dev'
op|','
name|'image_type'
op|','
name|'virtual_size'
op|','
name|'image_file'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'offset'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK'
op|':'
newline|'\n'
indent|'        '
name|'offset'
op|'='
name|'MBR_SIZE_BYTES'
newline|'\n'
name|'_write_partition'
op|'('
name|'virtual_size'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'chown'"
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|','
name|'dev_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'dev_path'
op|','
string|"'wb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'seek'
op|'('
name|'offset'
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'image_file'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_write_partition
dedent|''
dedent|''
dedent|''
name|'def'
name|'_write_partition'
op|'('
name|'virtual_size'
op|','
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'primary_first'
op|'='
name|'MBR_SIZE_SECTORS'
newline|'\n'
name|'primary_last'
op|'='
name|'MBR_SIZE_SECTORS'
op|'+'
op|'('
name|'virtual_size'
op|'/'
name|'SECTOR_SIZE'
op|')'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Writing partition table %(primary_first)d %(primary_last)d'"
nl|'\n'
string|"' to %(dev_path)s...'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|execute
name|'def'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dev_path'
op|','
string|"'mklabel'"
op|','
string|"'msdos'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dev_path'
op|','
string|"'mkpart'"
op|','
string|"'primary'"
op|','
nl|'\n'
string|"'%ds'"
op|'%'
name|'primary_first'
op|','
nl|'\n'
string|"'%ds'"
op|'%'
name|'primary_last'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Writing partition table %s done.'"
op|')'
op|','
name|'dev_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_resize_part_and_fs
dedent|''
name|'def'
name|'_resize_part_and_fs'
op|'('
name|'dev'
op|','
name|'start'
op|','
name|'old_sectors'
op|','
name|'new_sectors'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Resize partition and fileystem.\n\n    This assumes we are dealing with a single primary partition and using\n    ext3 or ext4.\n    """'
newline|'\n'
name|'size'
op|'='
name|'new_sectors'
op|'-'
name|'start'
newline|'\n'
name|'end'
op|'='
name|'new_sectors'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'partition_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dev'
op|','
name|'partition'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|"# Replay journal if FS wasn't cleanly unmounted"
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'e2fsck'"
op|','
string|"'-f'"
op|','
name|'partition_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Remove ext3 journal (making it ext2)'
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'tune2fs'"
op|','
string|"'-O ^has_journal'"
op|','
name|'partition_path'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'new_sectors'
op|'<'
name|'old_sectors'
op|':'
newline|'\n'
comment|'# Resizing down, resize filesystem before partition resize'
nl|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'resize2fs'"
op|','
name|'partition_path'
op|','
string|"'%ds'"
op|'%'
name|'size'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dev_path'
op|','
string|"'rm'"
op|','
string|"'1'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dev_path'
op|','
string|"'mkpart'"
op|','
nl|'\n'
string|"'primary'"
op|','
nl|'\n'
string|"'%ds'"
op|'%'
name|'start'
op|','
nl|'\n'
string|"'%ds'"
op|'%'
name|'end'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'new_sectors'
op|'>'
name|'old_sectors'
op|':'
newline|'\n'
comment|'# Resizing up, resize filesystem after partition resize'
nl|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'resize2fs'"
op|','
name|'partition_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add back journal'
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'tune2fs'"
op|','
string|"'-j'"
op|','
name|'partition_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_copy_partition
dedent|''
name|'def'
name|'_copy_partition'
op|'('
name|'session'
op|','
name|'src_ref'
op|','
name|'dst_ref'
op|','
name|'partition'
op|','
name|'virtual_size'
op|')'
op|':'
newline|'\n'
comment|'# Part of disk taken up by MBR'
nl|'\n'
indent|'    '
name|'virtual_size'
op|'-='
name|'MBR_SIZE_BYTES'
newline|'\n'
nl|'\n'
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'src_ref'
op|','
name|'read_only'
op|'='
name|'True'
op|')'
name|'as'
name|'src'
op|':'
newline|'\n'
indent|'        '
name|'src_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'src'
op|','
name|'partition'
op|'='
name|'partition'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'vdi_attached_here'
op|'('
name|'session'
op|','
name|'dst_ref'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
name|'as'
name|'dst'
op|':'
newline|'\n'
indent|'            '
name|'dst_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'dst'
op|','
name|'partition'
op|'='
name|'partition'
op|')'
newline|'\n'
nl|'\n'
name|'_write_partition'
op|'('
name|'virtual_size'
op|','
name|'dst'
op|')'
newline|'\n'
nl|'\n'
name|'num_blocks'
op|'='
name|'virtual_size'
op|'/'
name|'SECTOR_SIZE'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'dd'"
op|','
nl|'\n'
string|"'if=%s'"
op|'%'
name|'src_path'
op|','
nl|'\n'
string|"'of=%s'"
op|'%'
name|'dst_path'
op|','
nl|'\n'
string|"'count=%d'"
op|'%'
name|'num_blocks'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_mount_filesystem
dedent|''
dedent|''
dedent|''
name|'def'
name|'_mount_filesystem'
op|'('
name|'dev_path'
op|','
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""mounts the device specified by dev_path in dir"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mount'"
op|','
nl|'\n'
string|"'-t'"
op|','
string|"'ext2,ext3,ext4,reiserfs'"
op|','
nl|'\n'
name|'dev_path'
op|','
name|'dir'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'err'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_guest_agent
dedent|''
name|'def'
name|'_find_guest_agent'
op|'('
name|'base_dir'
op|','
name|'agent_rel_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    tries to locate a guest agent at the path\n    specificed by agent_rel_path\n    """'
newline|'\n'
name|'agent_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'agent_rel_path'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'agent_path'
op|')'
op|':'
newline|'\n'
comment|'# The presence of the guest agent'
nl|'\n'
comment|'# file indicates that this instance can'
nl|'\n'
comment|'# reconfigure the network from xenstore data,'
nl|'\n'
comment|'# so manipulation of files in /etc is not'
nl|'\n'
comment|'# required'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'XenServer tools installed in this '"
nl|'\n'
string|"'image are capable of network injection.  '"
nl|'\n'
string|"'Networking files will not be'"
nl|'\n'
string|"'manipulated'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'xe_daemon_filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
nl|'\n'
string|"'usr'"
op|','
string|"'sbin'"
op|','
string|"'xe-daemon'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'xe_daemon_filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'XenServer tools are present '"
nl|'\n'
string|"'in this image but are not capable '"
nl|'\n'
string|"'of network injection'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'XenServer tools are not '"
nl|'\n'
string|"'installed in this image'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_mounted_processing
dedent|''
name|'def'
name|'_mounted_processing'
op|'('
name|'device'
op|','
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Callback which runs with the image VDI attached"""'
newline|'\n'
comment|'# NB: Partition 1 hardcoded'
nl|'\n'
name|'dev_path'
op|'='
name|'utils'
op|'.'
name|'make_dev_path'
op|'('
name|'device'
op|','
name|'partition'
op|'='
number|'1'
op|')'
newline|'\n'
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Mount only Linux filesystems, to avoid disturbing NTFS images'
nl|'\n'
indent|'        '
name|'err'
op|'='
name|'_mount_filesystem'
op|'('
name|'dev_path'
op|','
name|'tmpdir'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# This try block ensures that the umount occurs'
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'_find_guest_agent'
op|'('
name|'tmpdir'
op|','
name|'FLAGS'
op|'.'
name|'xenapi_agent_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Manipulating interface files '"
nl|'\n'
string|"'directly'"
op|')'
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'inject_data_into_fs'
op|'('
name|'tmpdir'
op|','
name|'key'
op|','
name|'net'
op|','
name|'metadata'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'umount'"
op|','
name|'dev_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Failed to mount filesystem (expected for '"
nl|'\n'
string|"'non-linux instances): %s'"
op|')'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# remove temporary directory'
nl|'\n'
indent|'        '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_prepare_injectables
dedent|''
dedent|''
name|'def'
name|'_prepare_injectables'
op|'('
name|'inst'
op|','
name|'networks_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    prepares the ssh key and the network configuration file to be\n    injected into the disk image\n    """'
newline|'\n'
comment|'#do the import here - Cheetah.Template will be loaded'
nl|'\n'
comment|'#only if injection is performed'
nl|'\n'
name|'from'
name|'Cheetah'
name|'import'
name|'Template'
name|'as'
name|'t'
newline|'\n'
name|'template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
name|'template_data'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'injected_network_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'inst'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'key'
op|'='
name|'str'
op|'('
name|'inst'
op|'['
string|"'key_data'"
op|']'
op|')'
newline|'\n'
name|'net'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'networks_info'
op|':'
newline|'\n'
indent|'        '
name|'ifc_num'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'interfaces_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'have_injected_networks'
op|'='
name|'False'
newline|'\n'
name|'for'
op|'('
name|'network_ref'
op|','
name|'info'
op|')'
name|'in'
name|'networks_info'
op|':'
newline|'\n'
indent|'            '
name|'ifc_num'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'network_ref'
op|'['
string|"'injected'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'have_injected_networks'
op|'='
name|'True'
newline|'\n'
name|'ip_v4'
op|'='
name|'ip_v6'
op|'='
name|'None'
newline|'\n'
name|'if'
string|"'ips'"
name|'in'
name|'info'
name|'and'
name|'len'
op|'('
name|'info'
op|'['
string|"'ips'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'ip_v4'
op|'='
name|'info'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'ip6s'"
name|'in'
name|'info'
name|'and'
name|'len'
op|'('
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'ip_v6'
op|'='
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'info'
op|'['
string|"'dns'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'dns'
op|'='
name|'info'
op|'['
string|"'dns'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'dns'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'interface_info'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'eth%d'"
op|'%'
name|'ifc_num'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'ip'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'netmask'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'info'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'info'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
name|'dns'
op|','
nl|'\n'
string|"'address_v6'"
op|':'
name|'ip_v6'
name|'and'
name|'ip_v6'
op|'['
string|"'ip'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
name|'ip_v6'
name|'and'
name|'ip_v6'
op|'['
string|"'netmask'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
name|'ip_v6'
name|'and'
name|'info'
op|'['
string|"'gateway_v6'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'use_ipv6'"
op|':'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|'}'
newline|'\n'
name|'interfaces_info'
op|'.'
name|'append'
op|'('
name|'interface_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'have_injected_networks'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'str'
op|'('
name|'template'
op|'('
name|'template_data'
op|','
nl|'\n'
name|'searchList'
op|'='
op|'['
op|'{'
string|"'interfaces'"
op|':'
name|'interfaces_info'
op|','
nl|'\n'
string|"'use_ipv6'"
op|':'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|'}'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'key'
op|','
name|'net'
op|','
name|'metadata'
newline|'\n'
dedent|''
endmarker|''
end_unit

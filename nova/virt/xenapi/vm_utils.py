begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nHelper methods for operations related to the management of VM records and\ntheir attributes like VDIs, VIFs, as well as their lookup functions.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'event'
newline|'\n'
name|'import'
name|'glance'
op|'.'
name|'client'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
op|'.'
name|'manager'
name|'import'
name|'AuthManager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
name|'import'
name|'HelperBase'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'xenapi'
op|'.'
name|'volume_utils'
name|'import'
name|'StorageError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.xenapi.vm_utils"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'default_os_type'"
op|','
string|"'linux'"
op|','
string|"'Default OS type'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|XENAPI_POWER_STATE
name|'XENAPI_POWER_STATE'
op|'='
op|'{'
nl|'\n'
string|"'Halted'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
string|"'Running'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'Paused'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
string|"'Suspended'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
string|"'Crashed'"
op|':'
name|'power_state'
op|'.'
name|'CRASHED'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|SECTOR_SIZE
name|'SECTOR_SIZE'
op|'='
number|'512'
newline|'\n'
DECL|variable|MBR_SIZE_SECTORS
name|'MBR_SIZE_SECTORS'
op|'='
number|'63'
newline|'\n'
DECL|variable|MBR_SIZE_BYTES
name|'MBR_SIZE_BYTES'
op|'='
name|'MBR_SIZE_SECTORS'
op|'*'
name|'SECTOR_SIZE'
newline|'\n'
DECL|variable|KERNEL_DIR
name|'KERNEL_DIR'
op|'='
string|"'/boot/guest'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageType
name|'class'
name|'ImageType'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Enumeration class for distinguishing different image types\n        0 - kernel/ramdisk image (goes on dom0\'s filesystem)\n        1 - disk image (local SR, partitioned by objectstore plugin)\n        2 - raw disk image (local SR, NOT partitioned by plugin)\n        3 - vhd disk image (local SR, NOT inspected by XS, PV assumed for\n            linux, HVM assumed for Windows)\n    """'
newline|'\n'
nl|'\n'
DECL|variable|KERNEL_RAMDISK
name|'KERNEL_RAMDISK'
op|'='
number|'0'
newline|'\n'
DECL|variable|DISK
name|'DISK'
op|'='
number|'1'
newline|'\n'
DECL|variable|DISK_RAW
name|'DISK_RAW'
op|'='
number|'2'
newline|'\n'
DECL|variable|DISK_VHD
name|'DISK_VHD'
op|'='
number|'3'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMHelper
dedent|''
name|'class'
name|'VMHelper'
op|'('
name|'HelperBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The class that wraps the helper methods together.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_vm
name|'def'
name|'create_vm'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'kernel'
op|','
name|'ramdisk'
op|','
nl|'\n'
name|'use_pv_kernel'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VM record.  Returns a Deferred that gives the new\n        VM reference.\n        the use_pv_kernel flag indicates whether the guest is HVM or PV\n\n        There are 3 scenarios:\n\n            1. Using paravirtualization,  kernel passed in\n\n            2. Using paravirtualization, kernel within the image\n\n            3. Using hardware virtualization\n        """'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance'
op|'.'
name|'instance_type'
op|')'
newline|'\n'
name|'mem'
op|'='
name|'str'
op|'('
name|'long'
op|'('
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|')'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|')'
newline|'\n'
name|'vcpus'
op|'='
name|'str'
op|'('
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'rec'
op|'='
op|'{'
nl|'\n'
string|"'actions_after_crash'"
op|':'
string|"'destroy'"
op|','
nl|'\n'
string|"'actions_after_reboot'"
op|':'
string|"'restart'"
op|','
nl|'\n'
string|"'actions_after_shutdown'"
op|':'
string|"'destroy'"
op|','
nl|'\n'
string|"'affinity'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'blocked_operations'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'ha_always_run'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'ha_restart_priority'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'HVM_boot_params'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'HVM_boot_policy'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'is_a_template'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'memory_dynamic_min'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'memory_dynamic_max'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'memory_static_min'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'memory_static_max'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'memory_target'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'name_description'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'name_label'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'other_config'"
op|':'
op|'{'
string|"'allowvssprovider'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
string|"'other_config'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'PCI_bus'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'platform'"
op|':'
op|'{'
string|"'acpi'"
op|':'
string|"'true'"
op|','
string|"'apic'"
op|':'
string|"'true'"
op|','
string|"'pae'"
op|':'
string|"'true'"
op|','
nl|'\n'
string|"'viridian'"
op|':'
string|"'true'"
op|','
string|"'timeoffset'"
op|':'
string|"'0'"
op|'}'
op|','
nl|'\n'
string|"'PV_args'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_bootloader'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_bootloader_args'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_kernel'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_legacy_args'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'PV_ramdisk'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'recommendations'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'tags'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'user_version'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'VCPUs_at_startup'"
op|':'
name|'vcpus'
op|','
nl|'\n'
string|"'VCPUs_max'"
op|':'
name|'vcpus'
op|','
nl|'\n'
string|"'VCPUs_params'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'xenstore_data'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Complete VM configuration record according to the image type'
nl|'\n'
comment|'# non-raw/raw with PV kernel/raw in HVM mode'
nl|'\n'
name|'if'
name|'use_pv_kernel'
op|':'
newline|'\n'
indent|'            '
name|'rec'
op|'['
string|"'platform'"
op|']'
op|'['
string|"'nx'"
op|']'
op|'='
string|"'false'"
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
comment|'# 1. Kernel explicitly passed in, use that'
nl|'\n'
indent|'                '
name|'rec'
op|'['
string|"'PV_args'"
op|']'
op|'='
string|"'root=/dev/xvda1'"
newline|'\n'
name|'rec'
op|'['
string|"'PV_kernel'"
op|']'
op|'='
name|'kernel'
newline|'\n'
name|'rec'
op|'['
string|"'PV_ramdisk'"
op|']'
op|'='
name|'ramdisk'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# 2. Use kernel within the image'
nl|'\n'
indent|'                '
name|'rec'
op|'['
string|"'PV_args'"
op|']'
op|'='
string|"'clocksource=jiffies'"
newline|'\n'
name|'rec'
op|'['
string|"'PV_bootloader'"
op|']'
op|'='
string|"'pygrub'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# 3. Using hardware virtualization'
nl|'\n'
indent|'            '
name|'rec'
op|'['
string|"'platform'"
op|']'
op|'['
string|"'nx'"
op|']'
op|'='
string|"'true'"
newline|'\n'
name|'rec'
op|'['
string|"'HVM_boot_params'"
op|']'
op|'='
op|'{'
string|"'order'"
op|':'
string|"'dc'"
op|'}'
newline|'\n'
name|'rec'
op|'['
string|"'HVM_boot_policy'"
op|']'
op|'='
string|"'BIOS order'"
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VM %s...'"
op|')'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VM.create'"
op|','
name|'rec'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VM %(instance_name)s as %(vm_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|ensure_free_mem
name|'def'
name|'ensure_free_mem'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'instance_type'
op|')'
newline|'\n'
name|'mem'
op|'='
name|'long'
op|'('
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|')'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
comment|'#get free memory from host'
nl|'\n'
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'host_free_mem'
op|'='
name|'long'
op|'('
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'host'
op|'.'
nl|'\n'
name|'compute_free_memory'
op|'('
name|'host'
op|')'
op|')'
newline|'\n'
name|'return'
name|'host_free_mem'
op|'>='
name|'mem'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_vbd
name|'def'
name|'create_vbd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|','
name|'vdi_ref'
op|','
name|'userdevice'
op|','
name|'bootable'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VBD record.  Returns a Deferred that gives the new\n        VBD reference."""'
newline|'\n'
name|'vbd_rec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VM'"
op|']'
op|'='
name|'vm_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VDI'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'='
name|'str'
op|'('
name|'userdevice'
op|')'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'bootable'"
op|']'
op|'='
name|'bootable'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'mode'"
op|']'
op|'='
string|"'RW'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'type'"
op|']'
op|'='
string|"'disk'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'unpluggable'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'empty'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'other_config'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_type'"
op|']'
op|'='
string|"''"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_params'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_supported_algorithms'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VBD for VM %(vm_ref)s,'"
nl|'\n'
string|"' VDI %(vdi_ref)s ... '"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'vbd_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VBD.create'"
op|','
name|'vbd_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VBD %(vbd_ref)s for VM %(vm_ref)s,'"
nl|'\n'
string|"' VDI %(vdi_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vbd_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|find_vbd_by_number
name|'def'
name|'find_vbd_by_number'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the VBD reference from the device number"""'
newline|'\n'
name|'vbd_refs'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_VBDs'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'vbd_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'get_record'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
name|'if'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'=='
name|'str'
op|'('
name|'number'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'vbd_ref'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'raise'
name|'StorageError'
op|'('
name|'_'
op|'('
string|"'VBD not found in instance %s'"
op|')'
op|'%'
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|unplug_vbd
name|'def'
name|'unplug_vbd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vbd_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug VBD from VM"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vbd_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VBD.unplug'"
op|','
name|'vbd_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'if'
name|'exc'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
op|'!='
string|"'DEVICE_ALREADY_DETACHED'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StorageError'
op|'('
name|'_'
op|'('
string|"'Unable to unplug VBD %s'"
op|')'
op|'%'
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|destroy_vbd
name|'def'
name|'destroy_vbd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vbd_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VBD from host database"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VBD.destroy'"
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
name|'raise'
name|'StorageError'
op|'('
name|'_'
op|'('
string|"'Unable to destroy VBD %s'"
op|')'
op|'%'
name|'vbd_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_vif
name|'def'
name|'create_vif'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|','
name|'network_ref'
op|','
name|'mac_address'
op|','
nl|'\n'
name|'dev'
op|','
name|'rxtx_cap'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VIF record.  Returns a Deferred that gives the new\n        VIF reference."""'
newline|'\n'
name|'vif_rec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vif_rec'
op|'['
string|"'device'"
op|']'
op|'='
name|'str'
op|'('
name|'dev'
op|')'
newline|'\n'
name|'vif_rec'
op|'['
string|"'network'"
op|']'
op|'='
name|'network_ref'
newline|'\n'
name|'vif_rec'
op|'['
string|"'VM'"
op|']'
op|'='
name|'vm_ref'
newline|'\n'
name|'vif_rec'
op|'['
string|"'MAC'"
op|']'
op|'='
name|'mac_address'
newline|'\n'
name|'vif_rec'
op|'['
string|"'MTU'"
op|']'
op|'='
string|"'1500'"
newline|'\n'
name|'vif_rec'
op|'['
string|"'other_config'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vif_rec'
op|'['
string|"'qos_algorithm_type'"
op|']'
op|'='
string|'"ratelimit"'
name|'if'
name|'rxtx_cap'
name|'else'
string|"''"
newline|'\n'
name|'vif_rec'
op|'['
string|"'qos_algorithm_params'"
op|']'
op|'='
op|'{'
string|'"kbps"'
op|':'
name|'str'
op|'('
name|'rxtx_cap'
op|'*'
number|'1024'
op|')'
op|'}'
name|'if'
name|'rxtx_cap'
name|'else'
op|'{'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VIF for VM %(vm_ref)s,'"
nl|'\n'
string|"' network %(network_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'vif_ref'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'VIF.create'"
op|','
name|'vif_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VIF %(vif_ref)s for VM %(vm_ref)s,'"
nl|'\n'
string|"' network %(network_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vif_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_vdi
name|'def'
name|'create_vdi'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'sr_ref'
op|','
name|'name_label'
op|','
name|'virtual_size'
op|','
name|'read_only'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a VDI record and returns its reference."""'
newline|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'create'
op|'('
nl|'\n'
op|'{'
string|"'name_label'"
op|':'
name|'name_label'
op|','
nl|'\n'
string|"'name_description'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'SR'"
op|':'
name|'sr_ref'
op|','
nl|'\n'
string|"'virtual_size'"
op|':'
name|'str'
op|'('
name|'virtual_size'
op|')'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'User'"
op|','
nl|'\n'
string|"'sharable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'read_only'"
op|':'
name|'read_only'
op|','
nl|'\n'
string|"'xenstore_data'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'other_config'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'sm_config'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'tags'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created VDI %(vdi_ref)s (%(name_label)s,'"
nl|'\n'
string|"' %(virtual_size)s, %(read_only)s) on %(sr_ref)s.'"
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_vdi_for_vm_safely
name|'def'
name|'get_vdi_for_vm_safely'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vdi_refs'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'vdi_refs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"No VDIs found for VM %s"'
op|')'
op|'%'
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'num_vdis'
op|'='
name|'len'
op|'('
name|'vdi_refs'
op|')'
newline|'\n'
name|'if'
name|'num_vdis'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unexpected number of VDIs (%(num_vdis)s) found"'
nl|'\n'
string|'" for VM %(vm_ref)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'vdi_ref'
op|'='
name|'vdi_refs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_record'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
op|','
name|'vdi_rec'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create_snapshot
name|'def'
name|'create_snapshot'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates Snapshot (Template) VM, Snapshot VBD, Snapshot VDI,\n        Snapshot VHD"""'
newline|'\n'
comment|'#TODO(sirp): Add quiesce and VSS locking support when Windows support'
nl|'\n'
comment|'# is added'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Snapshotting VM %(vm_ref)s with label \'%(label)s\'..."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'vm_vdi_ref'
op|','
name|'vm_vdi_rec'
op|'='
name|'cls'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'vm_vdi_uuid'
op|'='
name|'vm_vdi_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'sr_ref'
op|'='
name|'vm_vdi_rec'
op|'['
string|'"SR"'
op|']'
newline|'\n'
nl|'\n'
name|'original_parent_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vm_vdi_ref'
op|')'
newline|'\n'
nl|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.VM.snapshot'"
op|','
name|'vm_ref'
op|','
name|'label'
op|')'
newline|'\n'
name|'template_vm_ref'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'template_vdi_rec'
op|'='
name|'cls'
op|'.'
name|'get_vdi_for_vm_safely'
op|'('
name|'session'
op|','
nl|'\n'
name|'template_vm_ref'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'template_vdi_uuid'
op|'='
name|'template_vdi_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Created snapshot %(template_vm_ref)s from'"
nl|'\n'
string|"' VM %(vm_ref)s.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'parent_uuid'
op|'='
name|'wait_for_vhd_coalesce'
op|'('
nl|'\n'
name|'session'
op|','
name|'instance_id'
op|','
name|'sr_ref'
op|','
name|'vm_vdi_ref'
op|','
name|'original_parent_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO(sirp): we need to assert only one parent, not parents two deep'
nl|'\n'
name|'template_vdi_uuids'
op|'='
op|'{'
string|"'image'"
op|':'
name|'parent_uuid'
op|','
nl|'\n'
string|"'snap'"
op|':'
name|'template_vdi_uuid'
op|'}'
newline|'\n'
name|'return'
name|'template_vm_ref'
op|','
name|'template_vdi_uuids'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_sr
name|'def'
name|'get_sr'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'sr_label'
op|'='
string|"'slices'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finds the SR named by the given name label and returns\n        the UUID"""'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.get_by_name_label'"
op|','
name|'sr_label'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_sr_path
name|'def'
name|'get_sr_path'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the path to our storage repository\n\n        This is used when we\'re dealing with VHDs directly, either by taking\n        snapshots or by restoring an image in the DISK_VHD format.\n        """'
newline|'\n'
name|'sr_ref'
op|'='
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'sr_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'SR'
op|'.'
name|'get_record'
op|'('
name|'sr_ref'
op|')'
newline|'\n'
name|'sr_uuid'
op|'='
name|'sr_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'xenapi_sr_base_path'
op|','
name|'sr_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|upload_image
name|'def'
name|'upload_image'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vdi_uuids'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Requests that the Glance plugin bundle the specified VDIs and\n        push them into Glance using the specified human-friendly name.\n        """'
newline|'\n'
comment|'# NOTE(sirp): Currently we only support uploading images as VHD, there'
nl|'\n'
comment|'# is no RAW equivalent (yet)'
nl|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Asking xapi to upload %(vdi_uuids)s as"'
nl|'\n'
string|'" ID %(image_id)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os_type'
op|'='
name|'instance'
op|'.'
name|'os_type'
name|'or'
name|'FLAGS'
op|'.'
name|'default_os_type'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vdi_uuids'"
op|':'
name|'vdi_uuids'
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'glance_host'"
op|':'
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
nl|'\n'
string|"'glance_port'"
op|':'
name|'FLAGS'
op|'.'
name|'glance_port'
op|','
nl|'\n'
string|"'sr_path'"
op|':'
name|'cls'
op|'.'
name|'get_sr_path'
op|'('
name|'session'
op|')'
op|','
nl|'\n'
string|"'os_type'"
op|':'
name|'os_type'
op|'}'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'params'"
op|':'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'params'
op|')'
op|'}'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
string|"'upload_vhd'"
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|fetch_image
name|'def'
name|'fetch_image'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'user'
op|','
name|'project'
op|','
nl|'\n'
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        image_type is interpreted as an ImageType instance\n        Related flags:\n            xenapi_image_service = [\'glance\', \'objectstore\']\n            glance_address = \'address for glance services\'\n            glance_port = \'port for glance services\'\n        """'
newline|'\n'
name|'access'
op|'='
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_access_key'
op|'('
name|'user'
op|','
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'xenapi_image_service'
op|'=='
string|"'glance'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_fetch_image_glance'
op|'('
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
nl|'\n'
name|'access'
op|','
name|'image_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_fetch_image_objectstore'
op|'('
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
nl|'\n'
name|'access'
op|','
name|'user'
op|'.'
name|'secret'
op|','
nl|'\n'
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_fetch_image_glance_vhd
name|'def'
name|'_fetch_image_glance_vhd'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'access'
op|','
nl|'\n'
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Asking xapi to fetch vhd image %(image)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'sr_ref'
op|'='
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): The Glance plugin runs under Python 2.4 which does not'
nl|'\n'
comment|'# have the `uuid` module. To work around this, we generate the uuids'
nl|'\n'
comment|'# here (under Python 2.6+) and pass them as arguments'
nl|'\n'
name|'uuid_stack'
op|'='
op|'['
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'image'
op|','
nl|'\n'
string|"'glance_host'"
op|':'
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
nl|'\n'
string|"'glance_port'"
op|':'
name|'FLAGS'
op|'.'
name|'glance_port'
op|','
nl|'\n'
string|"'uuid_stack'"
op|':'
name|'uuid_stack'
op|','
nl|'\n'
string|"'sr_path'"
op|':'
name|'cls'
op|'.'
name|'get_sr_path'
op|'('
name|'session'
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'params'"
op|':'
name|'pickle'
op|'.'
name|'dumps'
op|'('
name|'params'
op|')'
op|'}'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
string|"'download_vhd'"
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'vdi_uuid'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'cls'
op|'.'
name|'scan_sr'
op|'('
name|'session'
op|','
name|'instance_id'
op|','
name|'sr_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the name-label to ease debugging'
nl|'\n'
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_by_uuid'
op|'('
name|'vdi_uuid'
op|')'
newline|'\n'
name|'name_label'
op|'='
name|'get_name_label_for_image'
op|'('
name|'image'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'set_name_label'
op|'('
name|'vdi_ref'
op|','
name|'name_label'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"xapi \'download_vhd\' returned VDI UUID %(vdi_uuid)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'vdi_uuid'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_fetch_image_glance_disk
name|'def'
name|'_fetch_image_glance_disk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'access'
op|','
nl|'\n'
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetch the image from Glance\n\n        NOTE:\n        Unlike _fetch_image_glance_vhd, this method does not use the Glance\n        plugin; instead, it streams the disks through domU to the VDI\n        directly.\n\n        """'
newline|'\n'
comment|'# FIXME(sirp): Since the Glance plugin seems to be required for the'
nl|'\n'
comment|'# VHD disk, it may be worth using the plugin for both VHD and RAW and'
nl|'\n'
comment|'# DISK restores'
nl|'\n'
name|'sr_ref'
op|'='
name|'safe_find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'glance'
op|'.'
name|'client'
op|'.'
name|'Client'
op|'('
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
name|'FLAGS'
op|'.'
name|'glance_port'
op|')'
newline|'\n'
name|'meta'
op|','
name|'image_file'
op|'='
name|'client'
op|'.'
name|'get_image'
op|'('
name|'image'
op|')'
newline|'\n'
name|'virtual_size'
op|'='
name|'int'
op|'('
name|'meta'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
name|'vdi_size'
op|'='
name|'virtual_size'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Size for image %(image)s:%(virtual_size)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK'
op|':'
newline|'\n'
comment|'# Make room for MBR.'
nl|'\n'
indent|'            '
name|'vdi_size'
op|'+='
name|'MBR_SIZE_BYTES'
newline|'\n'
nl|'\n'
dedent|''
name|'name_label'
op|'='
name|'get_name_label_for_image'
op|'('
name|'image'
op|')'
newline|'\n'
name|'vdi_ref'
op|'='
name|'cls'
op|'.'
name|'create_vdi'
op|'('
name|'session'
op|','
name|'sr_ref'
op|','
name|'name_label'
op|','
name|'vdi_size'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'with_vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'False'
op|','
nl|'\n'
name|'lambda'
name|'dev'
op|':'
nl|'\n'
name|'_stream_disk'
op|'('
name|'dev'
op|','
name|'image_type'
op|','
nl|'\n'
name|'virtual_size'
op|','
name|'image_file'
op|')'
op|')'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|':'
newline|'\n'
comment|"#we need to invoke a plugin for copying VDI's"
nl|'\n'
comment|'#content into proper path'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Copying VDI %s to /boot/guest on dom0"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'fn'
op|'='
string|'"copy_kernel_vdi"'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'vdi-ref'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
comment|'#let the plugin copy the correct number of bytes'
nl|'\n'
name|'args'
op|'['
string|"'image-size'"
op|']'
op|'='
name|'str'
op|'('
name|'vdi_size'
op|')'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'glance'"
op|','
name|'fn'
op|','
name|'args'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_id'
op|')'
newline|'\n'
comment|'#remove the VDI as it is not needed anymore'
nl|'\n'
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'destroy'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Kernel/Ramdisk VDI %s destroyed"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'return'
name|'filename'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_uuid'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|determine_disk_image_type
name|'def'
name|'determine_disk_image_type'
op|'('
name|'cls'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Disk Image Types are used to determine where the kernel will reside\n        within an image. To figure out which type we\'re dealing with, we use\n        the following rules:\n\n        1. If we\'re using Glance, we can use the image_type field to\n           determine the image_type\n\n        2. If we\'re not using Glance, then we need to deduce this based on\n           whether a kernel_id is specified.\n        """'
newline|'\n'
DECL|function|log_disk_format
name|'def'
name|'log_disk_format'
op|'('
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pretty_format'
op|'='
op|'{'
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|':'
string|"'KERNEL_RAMDISK'"
op|','
nl|'\n'
name|'ImageType'
op|'.'
name|'DISK'
op|':'
string|"'DISK'"
op|','
nl|'\n'
name|'ImageType'
op|'.'
name|'DISK_RAW'
op|':'
string|"'DISK_RAW'"
op|','
nl|'\n'
name|'ImageType'
op|'.'
name|'DISK_VHD'
op|':'
string|"'DISK_VHD'"
op|'}'
newline|'\n'
name|'disk_format'
op|'='
name|'pretty_format'
op|'['
name|'image_type'
op|']'
newline|'\n'
name|'image_id'
op|'='
name|'instance'
op|'.'
name|'image_id'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Detected %(disk_format)s format for image "'
nl|'\n'
string|'"%(image_id)s, instance %(instance_id)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|determine_from_glance
dedent|''
name|'def'
name|'determine_from_glance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'glance_disk_format2nova_type'
op|'='
op|'{'
nl|'\n'
string|"'ami'"
op|':'
name|'ImageType'
op|'.'
name|'DISK'
op|','
nl|'\n'
string|"'aki'"
op|':'
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|','
nl|'\n'
string|"'ari'"
op|':'
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|','
nl|'\n'
string|"'raw'"
op|':'
name|'ImageType'
op|'.'
name|'DISK_RAW'
op|','
nl|'\n'
string|"'vhd'"
op|':'
name|'ImageType'
op|'.'
name|'DISK_VHD'
op|'}'
newline|'\n'
name|'client'
op|'='
name|'glance'
op|'.'
name|'client'
op|'.'
name|'Client'
op|'('
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
name|'FLAGS'
op|'.'
name|'glance_port'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'client'
op|'.'
name|'get_image_meta'
op|'('
name|'instance'
op|'.'
name|'image_id'
op|')'
newline|'\n'
name|'disk_format'
op|'='
name|'meta'
op|'['
string|"'disk_format'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'glance_disk_format2nova_type'
op|'['
name|'disk_format'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Unrecognized disk_format \'%(disk_format)s\'"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|determine_from_instance
dedent|''
dedent|''
name|'def'
name|'determine_from_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'kernel_id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ImageType'
op|'.'
name|'DISK'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'ImageType'
op|'.'
name|'DISK_RAW'
newline|'\n'
nl|'\n'
comment|'# FIXME(sirp): can we unify the ImageService and xenapi_image_service'
nl|'\n'
comment|'# abstractions?'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'xenapi_image_service'
op|'=='
string|"'glance'"
op|':'
newline|'\n'
indent|'            '
name|'image_type'
op|'='
name|'determine_from_glance'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_type'
op|'='
name|'determine_from_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'log_disk_format'
op|'('
name|'image_type'
op|')'
newline|'\n'
name|'return'
name|'image_type'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_fetch_image_glance
name|'def'
name|'_fetch_image_glance'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'access'
op|','
nl|'\n'
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_VHD'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_fetch_image_glance_vhd'
op|'('
nl|'\n'
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'access'
op|','
name|'image_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_fetch_image_glance_disk'
op|'('
nl|'\n'
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'access'
op|','
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_fetch_image_objectstore
name|'def'
name|'_fetch_image_objectstore'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'image'
op|','
name|'access'
op|','
nl|'\n'
name|'secret'
op|','
name|'image_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'url'
op|'='
name|'images'
op|'.'
name|'image_url'
op|'('
name|'image'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Asking xapi to fetch %(url)s as %(access)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|':'
newline|'\n'
indent|'            '
name|'fn'
op|'='
string|"'get_kernel'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fn'
op|'='
string|"'get_vdi'"
newline|'\n'
dedent|''
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'src_url'"
op|']'
op|'='
name|'url'
newline|'\n'
name|'args'
op|'['
string|"'username'"
op|']'
op|'='
name|'access'
newline|'\n'
name|'args'
op|'['
string|"'password'"
op|']'
op|'='
name|'secret'
newline|'\n'
name|'args'
op|'['
string|"'add_partition'"
op|']'
op|'='
string|"'false'"
newline|'\n'
name|'args'
op|'['
string|"'raw'"
op|']'
op|'='
string|"'false'"
newline|'\n'
name|'if'
name|'image_type'
op|'!='
name|'ImageType'
op|'.'
name|'KERNEL_RAMDISK'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|"'add_partition'"
op|']'
op|'='
string|"'true'"
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_RAW'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'['
string|"'raw'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
dedent|''
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'objectstore'"
op|','
name|'fn'
op|','
name|'args'
op|')'
newline|'\n'
name|'uuid'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'uuid'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|determine_is_pv
name|'def'
name|'determine_is_pv'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'vdi_ref'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'os_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Determine whether the VM will use a paravirtualized kernel or if it\n        will use hardware virtualization.\n\n            1. Objectstore (any image type):\n               We use plugin to figure out whether the VDI uses PV\n\n            2. Glance (VHD): then we use `os_type`, raise if not set\n\n            3. Glance (DISK_RAW): use Pygrub to figure out if pv kernel is\n               available\n\n            4. Glance (DISK): pv is assumed\n        """'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'xenapi_image_service'
op|'=='
string|"'glance'"
op|':'
newline|'\n'
comment|'# 2, 3, 4: Glance'
nl|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_determine_is_pv_glance'
op|'('
nl|'\n'
name|'session'
op|','
name|'vdi_ref'
op|','
name|'disk_image_type'
op|','
name|'os_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# 1. Objecstore'
nl|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_determine_is_pv_objectstore'
op|'('
name|'session'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_determine_is_pv_objectstore
name|'def'
name|'_determine_is_pv_objectstore'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|','
name|'vdi_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Looking up vdi %s for PV kernel"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'fn'
op|'='
string|'"is_vdi_pv"'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'['
string|"'vdi-ref'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'async_call_plugin'
op|'('
string|"'objectstore'"
op|','
name|'fn'
op|','
name|'args'
op|')'
newline|'\n'
name|'pv_str'
op|'='
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'pv'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'pv_str'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'true'"
op|':'
newline|'\n'
indent|'            '
name|'pv'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'pv_str'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'false'"
op|':'
newline|'\n'
indent|'            '
name|'pv'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"PV Kernel in VDI:%s"'
op|')'
op|','
name|'pv'
op|')'
newline|'\n'
name|'return'
name|'pv'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_determine_is_pv_glance
name|'def'
name|'_determine_is_pv_glance'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vdi_ref'
op|','
name|'disk_image_type'
op|','
nl|'\n'
name|'os_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        For a Glance image, determine if we need paravirtualization.\n\n        The relevant scenarios are:\n            2. Glance (VHD): then we use `os_type`, raise if not set\n\n            3. Glance (DISK_RAW): use Pygrub to figure out if pv kernel is\n               available\n\n            4. Glance (DISK): pv is assumed\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Looking up vdi %s for PV kernel"'
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_VHD'
op|':'
newline|'\n'
comment|'# 2. VHD'
nl|'\n'
indent|'            '
name|'if'
name|'os_type'
op|'=='
string|"'windows'"
op|':'
newline|'\n'
indent|'                '
name|'is_pv'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'is_pv'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK_RAW'
op|':'
newline|'\n'
comment|'# 3. RAW'
nl|'\n'
indent|'            '
name|'is_pv'
op|'='
name|'with_vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'True'
op|','
name|'_is_vdi_pv'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'disk_image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK'
op|':'
newline|'\n'
comment|'# 4. Disk'
nl|'\n'
indent|'            '
name|'is_pv'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Unknown image format %(disk_image_type)s"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'is_pv'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup
name|'def'
name|'lookup'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'name_label'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look the instance i up, and returns it if available"""'
newline|'\n'
name|'vm_refs'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_by_name_label'
op|'('
name|'name_label'
op|')'
newline|'\n'
name|'n'
op|'='
name|'len'
op|'('
name|'vm_refs'
op|')'
newline|'\n'
name|'if'
name|'n'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'n'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Duplicate'
op|'('
name|'_'
op|'('
string|"'duplicate name found: %s'"
op|')'
op|'%'
nl|'\n'
name|'name_label'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vm_refs'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup_vm_vdis
name|'def'
name|'lookup_vm_vdis'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look for the VDIs that are attached to the VM"""'
newline|'\n'
comment|'# Firstly we get the VBDs, then the VDIs.'
nl|'\n'
comment|'# TODO(Armando): do we leave the read-only devices?'
nl|'\n'
name|'vbd_refs'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_VBDs'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'vdi_refs'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vbd_ref'
name|'in'
name|'vbd_refs'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'vdi_ref'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'get_VDI'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
comment|'# Test valid VDI'
nl|'\n'
name|'record'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_record'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VDI %s is still available'"
op|')'
op|','
name|'record'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'vdi_refs'
op|'.'
name|'append'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'vdi_refs'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vdi_refs'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|preconfigure_instance
name|'def'
name|'preconfigure_instance'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance'
op|','
name|'vdi_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes alterations to the image before launching as part of spawn.\n        """'
newline|'\n'
nl|'\n'
comment|'# As mounting the image VDI is expensive, we only want do do it once,'
nl|'\n'
comment|"# if at all, so determine whether it's required first, and then do"
nl|'\n'
comment|'# everything'
nl|'\n'
name|'mount_required'
op|'='
name|'False'
newline|'\n'
name|'key'
op|','
name|'net'
op|'='
name|'_prepare_injectables'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mount_required'
op|'='
name|'key'
name|'or'
name|'net'
newline|'\n'
name|'if'
name|'not'
name|'mount_required'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'with_vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'False'
op|','
nl|'\n'
name|'lambda'
name|'dev'
op|':'
name|'_mounted_processing'
op|'('
name|'dev'
op|','
name|'key'
op|','
name|'net'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup_kernel_ramdisk
name|'def'
name|'lookup_kernel_ramdisk'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_record'
op|'('
name|'vm'
op|')'
newline|'\n'
name|'if'
string|"'PV_kernel'"
name|'in'
name|'vm_rec'
name|'and'
string|"'PV_ramdisk'"
name|'in'
name|'vm_rec'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'vm_rec'
op|'['
string|"'PV_kernel'"
op|']'
op|','
name|'vm_rec'
op|'['
string|"'PV_ramdisk'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|compile_info
name|'def'
name|'compile_info'
op|'('
name|'cls'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fill record with VM status information"""'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"(VM_UTILS) xenserver vm state -> |%s|"'
op|')'
op|','
nl|'\n'
name|'record'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"(VM_UTILS) xenapi power_state -> |%s|"'
op|')'
op|','
nl|'\n'
name|'XENAPI_POWER_STATE'
op|'['
name|'record'
op|'['
string|"'power_state'"
op|']'
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'XENAPI_POWER_STATE'
op|'['
name|'record'
op|'['
string|"'power_state'"
op|']'
op|']'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'long'
op|'('
name|'record'
op|'['
string|"'memory_static_max'"
op|']'
op|')'
op|'>>'
number|'10'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'long'
op|'('
name|'record'
op|'['
string|"'memory_dynamic_max'"
op|']'
op|')'
op|'>>'
number|'10'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'record'
op|'['
string|"'VCPUs_max'"
op|']'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|compile_diagnostics
name|'def'
name|'compile_diagnostics'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compile VM diagnostics data"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'host_ip'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'host'
op|'.'
name|'get_record'
op|'('
name|'host'
op|')'
op|'['
string|'"address"'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'KeyError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|'"Unable to retrieve diagnostics"'
op|':'
name|'e'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'diags'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'xml'
op|'='
name|'get_rrd'
op|'('
name|'host_ip'
op|','
name|'record'
op|'['
string|'"uuid"'
op|']'
op|')'
newline|'\n'
name|'if'
name|'xml'
op|':'
newline|'\n'
indent|'                '
name|'rrd'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'node'
name|'in'
name|'enumerate'
op|'('
name|'rrd'
op|'.'
name|'firstChild'
op|'.'
name|'childNodes'
op|')'
op|':'
newline|'\n'
comment|"# We don't want all of the extra garbage"
nl|'\n'
indent|'                    '
name|'if'
name|'i'
op|'>='
number|'3'
name|'and'
name|'i'
op|'<='
number|'11'
op|':'
newline|'\n'
indent|'                        '
name|'ref'
op|'='
name|'node'
op|'.'
name|'childNodes'
newline|'\n'
comment|'# Name and Value'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'ref'
op|')'
op|'>'
number|'6'
op|':'
newline|'\n'
indent|'                            '
name|'diags'
op|'['
name|'ref'
op|'['
number|'0'
op|']'
op|'.'
name|'firstChild'
op|'.'
name|'data'
op|']'
op|'='
name|'ref'
op|'['
number|'6'
op|']'
op|'.'
name|'firstChild'
op|'.'
name|'data'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'diags'
newline|'\n'
dedent|''
name|'except'
name|'cls'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|'"Unable to retrieve diagnostics"'
op|':'
name|'e'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|scan_sr
name|'def'
name|'scan_sr'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'instance_id'
op|'='
name|'None'
op|','
name|'sr_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Scans the SR specified by sr_ref"""'
newline|'\n'
name|'if'
name|'sr_ref'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Re-scanning SR %s"'
op|')'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'task'
op|'='
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'Async.SR.scan'"
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'wait_for_task'
op|'('
name|'task'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|scan_default_sr
name|'def'
name|'scan_default_sr'
op|'('
name|'cls'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Looks for the system default SR and triggers a re-scan"""'
newline|'\n'
comment|'#FIXME(sirp/mdietz): refactor scan_default_sr in there'
nl|'\n'
name|'sr_ref'
op|'='
name|'cls'
op|'.'
name|'get_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'call_xenapi'
op|'('
string|"'SR.scan'"
op|','
name|'sr_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_rrd
dedent|''
dedent|''
name|'def'
name|'get_rrd'
op|'('
name|'host'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the VM RRD XML as a string"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'urllib'
op|'.'
name|'urlopen'
op|'('
string|'"http://%s:%s@%s/vm_rrd?uuid=%s"'
op|'%'
op|'('
nl|'\n'
name|'FLAGS'
op|'.'
name|'xenapi_connection_username'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'xenapi_connection_password'
op|','
nl|'\n'
name|'host'
op|','
nl|'\n'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#TODO(sirp): This code comes from XS5.6 pluginlib.py, we should refactor to'
nl|'\n'
comment|'# use that implmenetation'
nl|'\n'
DECL|function|get_vhd_parent
dedent|''
dedent|''
name|'def'
name|'get_vhd_parent'
op|'('
name|'session'
op|','
name|'vdi_rec'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns the VHD parent of the given VDI record, as a (ref, rec) pair.\n    Returns None if we\'re at the root of the tree.\n    """'
newline|'\n'
name|'if'
string|"'vhd-parent'"
name|'in'
name|'vdi_rec'
op|'['
string|"'sm_config'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'parent_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'sm_config'"
op|']'
op|'['
string|"'vhd-parent'"
op|']'
newline|'\n'
name|'parent_ref'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_by_uuid'
op|'('
name|'parent_uuid'
op|')'
newline|'\n'
name|'parent_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_record'
op|'('
name|'parent_ref'
op|')'
newline|'\n'
name|'vdi_uuid'
op|'='
name|'vdi_rec'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"VHD %(vdi_uuid)s has parent %(parent_ref)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'parent_ref'
op|','
name|'parent_rec'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vhd_parent_uuid
dedent|''
dedent|''
name|'def'
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_record'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'get_vhd_parent'
op|'('
name|'session'
op|','
name|'vdi_rec'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'        '
name|'parent_ref'
op|','
name|'parent_rec'
op|'='
name|'ret'
newline|'\n'
name|'return'
name|'parent_rec'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wait_for_vhd_coalesce
dedent|''
dedent|''
name|'def'
name|'wait_for_vhd_coalesce'
op|'('
name|'session'
op|','
name|'instance_id'
op|','
name|'sr_ref'
op|','
name|'vdi_ref'
op|','
nl|'\n'
name|'original_parent_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Spin until the parent VHD is coalesced into its parent VHD\n\n    Before coalesce:\n        * original_parent_vhd\n            * parent_vhd\n                snapshot\n\n    Atter coalesce:\n        * parent_vhd\n            snapshot\n    """'
newline|'\n'
name|'max_attempts'
op|'='
name|'FLAGS'
op|'.'
name|'xenapi_vhd_coalesce_max_attempts'
newline|'\n'
name|'attempts'
op|'='
op|'{'
string|"'counter'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_poll_vhds
name|'def'
name|'_poll_vhds'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attempts'
op|'['
string|"'counter'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'attempts'
op|'['
string|"'counter'"
op|']'
op|'>'
name|'max_attempts'
op|':'
newline|'\n'
indent|'            '
name|'counter'
op|'='
name|'attempts'
op|'['
string|"'counter'"
op|']'
newline|'\n'
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"VHD coalesce attempts exceeded (%(counter)d >"'
nl|'\n'
string|'" %(max_attempts)d), giving up..."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'VMHelper'
op|'.'
name|'scan_sr'
op|'('
name|'session'
op|','
name|'instance_id'
op|','
name|'sr_ref'
op|')'
newline|'\n'
name|'parent_uuid'
op|'='
name|'get_vhd_parent_uuid'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'if'
name|'original_parent_uuid'
name|'and'
op|'('
name|'parent_uuid'
op|'!='
name|'original_parent_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Parent %(parent_uuid)s doesn\'t match original parent"'
nl|'\n'
string|'" %(original_parent_uuid)s, waiting for coalesce..."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Breakout of the loop (normally) and return the parent_uuid'
nl|'\n'
indent|'            '
name|'raise'
name|'utils'
op|'.'
name|'LoopingCallDone'
op|'('
name|'parent_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'loop'
op|'='
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'_poll_vhds'
op|')'
newline|'\n'
name|'loop'
op|'.'
name|'start'
op|'('
name|'FLAGS'
op|'.'
name|'xenapi_vhd_coalesce_poll_interval'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
name|'parent_uuid'
op|'='
name|'loop'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'return'
name|'parent_uuid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vdi_for_vm_safely
dedent|''
name|'def'
name|'get_vdi_for_vm_safely'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vdi_refs'
op|'='
name|'VMHelper'
op|'.'
name|'lookup_vm_vdis'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'vdi_refs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"No VDIs found for VM %s"'
op|')'
op|'%'
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'num_vdis'
op|'='
name|'len'
op|'('
name|'vdi_refs'
op|')'
newline|'\n'
name|'if'
name|'num_vdis'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Unexpected number of VDIs (%(num_vdis)s) found"'
nl|'\n'
string|'" for VM %(vm_ref)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'vdi_ref'
op|'='
name|'vdi_refs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'vdi_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VDI'
op|'.'
name|'get_record'
op|'('
name|'vdi_ref'
op|')'
newline|'\n'
name|'return'
name|'vdi_ref'
op|','
name|'vdi_rec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_find_sr
dedent|''
name|'def'
name|'safe_find_sr'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Same as find_sr except raises a NotFound exception if SR cannot be\n    determined\n    """'
newline|'\n'
name|'sr_ref'
op|'='
name|'find_sr'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'sr_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|"'Cannot find SR to read/write VDI'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sr_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_sr
dedent|''
name|'def'
name|'find_sr'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the storage repository to hold VM images"""'
newline|'\n'
name|'host'
op|'='
name|'session'
op|'.'
name|'get_xenapi_host'
op|'('
op|')'
newline|'\n'
name|'sr_refs'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'SR'
op|'.'
name|'get_all'
op|'('
op|')'
newline|'\n'
name|'for'
name|'sr_ref'
name|'in'
name|'sr_refs'
op|':'
newline|'\n'
indent|'        '
name|'sr_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'SR'
op|'.'
name|'get_record'
op|'('
name|'sr_ref'
op|')'
newline|'\n'
name|'if'
name|'not'
op|'('
string|"'i18n-key'"
name|'in'
name|'sr_rec'
op|'['
string|"'other_config'"
op|']'
name|'and'
nl|'\n'
name|'sr_rec'
op|'['
string|"'other_config'"
op|']'
op|'['
string|"'i18n-key'"
op|']'
op|'=='
string|"'local-storage'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'pbd_ref'
name|'in'
name|'sr_rec'
op|'['
string|"'PBDs'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'pbd_rec'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'PBD'
op|'.'
name|'get_record'
op|'('
name|'pbd_ref'
op|')'
newline|'\n'
name|'if'
name|'pbd_rec'
op|'['
string|"'host'"
op|']'
op|'=='
name|'host'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'sr_ref'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remap_vbd_dev
dedent|''
name|'def'
name|'remap_vbd_dev'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the appropriate location for a plugged-in VBD device\n\n    Ubuntu Maverick moved xvd? -> sd?. This is considered a bug and will be\n    fixed in future versions:\n        https://bugs.launchpad.net/ubuntu/+source/linux/+bug/684875\n\n    For now, we work around it by just doing a string replace.\n    """'
newline|'\n'
comment|'# NOTE(sirp): This hack can go away when we pull support for Maverick'
nl|'\n'
name|'should_remap'
op|'='
name|'FLAGS'
op|'.'
name|'xenapi_remap_vbd_dev'
newline|'\n'
name|'if'
name|'not'
name|'should_remap'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dev'
newline|'\n'
nl|'\n'
dedent|''
name|'old_prefix'
op|'='
string|"'xvd'"
newline|'\n'
name|'new_prefix'
op|'='
name|'FLAGS'
op|'.'
name|'xenapi_remap_vbd_dev_prefix'
newline|'\n'
name|'remapped_dev'
op|'='
name|'dev'
op|'.'
name|'replace'
op|'('
name|'old_prefix'
op|','
name|'new_prefix'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'remapped_dev'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|with_vdi_attached_here
dedent|''
name|'def'
name|'with_vdi_attached_here'
op|'('
name|'session'
op|','
name|'vdi_ref'
op|','
name|'read_only'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'this_vm_ref'
op|'='
name|'get_this_vm_ref'
op|'('
name|'session'
op|')'
newline|'\n'
name|'vbd_rec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VM'"
op|']'
op|'='
name|'this_vm_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'VDI'"
op|']'
op|'='
name|'vdi_ref'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'userdevice'"
op|']'
op|'='
string|"'autodetect'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'bootable'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'mode'"
op|']'
op|'='
name|'read_only'
name|'and'
string|"'RO'"
name|'or'
string|"'RW'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'type'"
op|']'
op|'='
string|"'disk'"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'unpluggable'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'empty'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'other_config'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_type'"
op|']'
op|'='
string|"''"
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_algorithm_params'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vbd_rec'
op|'['
string|"'qos_supported_algorithms'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VBD for VDI %s ... '"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'vbd_ref'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'create'
op|'('
name|'vbd_rec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Creating VBD for VDI %s done.'"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Plugging VBD %s ... '"
op|')'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'plug'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Plugging VBD %s done.'"
op|')'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'orig_dev'
op|'='
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'get_device'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD %(vbd_ref)s plugged as %(orig_dev)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'dev'
op|'='
name|'remap_vbd_dev'
op|'('
name|'orig_dev'
op|')'
newline|'\n'
name|'if'
name|'dev'
op|'!='
name|'orig_dev'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD %(vbd_ref)s plugged into wrong dev, '"
nl|'\n'
string|"'remapping to %(dev)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
op|'('
name|'dev'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Destroying VBD for VDI %s ... '"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
name|'vbd_unplug_with_retry'
op|'('
name|'session'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'ignore_failure'
op|'('
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'destroy'
op|','
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Destroying VBD for VDI %s done.'"
op|')'
op|','
name|'vdi_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vbd_unplug_with_retry
dedent|''
dedent|''
name|'def'
name|'vbd_unplug_with_retry'
op|'('
name|'session'
op|','
name|'vbd_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Call VBD.unplug on the given VBD, with a retry if we get\n    DEVICE_DETACH_REJECTED.  For reasons which I don\'t understand, we\'re\n    seeing the device still in use, even when all processes using the device\n    should be dead."""'
newline|'\n'
comment|'# FIXME(sirp): We can use LoopingCall here w/o blocking sleep()'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VBD'
op|'.'
name|'unplug'
op|'('
name|'vbd_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD.unplug successful first time.'"
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'VMHelper'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'len'
op|'('
name|'e'
op|'.'
name|'details'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'e'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'DEVICE_DETACH_REJECTED'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD.unplug rejected: retrying...'"
op|')'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Not sleeping anymore!'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'len'
op|'('
name|'e'
op|'.'
name|'details'
op|')'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'e'
op|'.'
name|'details'
op|'['
number|'0'
op|']'
op|'=='
string|"'DEVICE_ALREADY_DETACHED'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'VBD.unplug successful eventually.'"
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Ignoring XenAPI.Failure in VBD.unplug: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ignore_failure
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'ignore_failure'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'VMHelper'
op|'.'
name|'XenAPI'
op|'.'
name|'Failure'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Ignoring XenAPI.Failure %s'"
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_this_vm_uuid
dedent|''
dedent|''
name|'def'
name|'get_this_vm_uuid'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'with'
name|'file'
op|'('
string|"'/sys/hypervisor/uuid'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_this_vm_ref
dedent|''
dedent|''
name|'def'
name|'get_this_vm_ref'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'session'
op|'.'
name|'get_xenapi'
op|'('
op|')'
op|'.'
name|'VM'
op|'.'
name|'get_by_uuid'
op|'('
name|'get_this_vm_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_vdi_pv
dedent|''
name|'def'
name|'_is_vdi_pv'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Running pygrub against %s"'
op|')'
op|','
name|'dev'
op|')'
newline|'\n'
name|'output'
op|'='
name|'os'
op|'.'
name|'popen'
op|'('
string|"'pygrub -qn /dev/%s'"
op|'%'
name|'dev'
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'output'
op|'.'
name|'readlines'
op|'('
op|')'
op|':'
newline|'\n'
comment|'#try to find kernel string'
nl|'\n'
indent|'        '
name|'m'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|"'(?<=kernel:)/.*(?:>)'"
op|','
name|'line'
op|')'
newline|'\n'
name|'if'
name|'m'
name|'and'
name|'m'
op|'.'
name|'group'
op|'('
number|'0'
op|')'
op|'.'
name|'find'
op|'('
string|"'xen'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found Xen kernel %s"'
op|')'
op|'%'
name|'m'
op|'.'
name|'group'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"No Xen kernel found.  Booting HVM."'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_stream_disk
dedent|''
name|'def'
name|'_stream_disk'
op|'('
name|'dev'
op|','
name|'image_type'
op|','
name|'virtual_size'
op|','
name|'image_file'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'offset'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
name|'ImageType'
op|'.'
name|'DISK'
op|':'
newline|'\n'
indent|'        '
name|'offset'
op|'='
name|'MBR_SIZE_BYTES'
newline|'\n'
name|'_write_partition'
op|'('
name|'virtual_size'
op|','
name|'dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'open'
op|'('
string|"'/dev/%s'"
op|'%'
name|'dev'
op|','
string|"'wb'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'seek'
op|'('
name|'offset'
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'image_file'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_write_partition
dedent|''
dedent|''
dedent|''
name|'def'
name|'_write_partition'
op|'('
name|'virtual_size'
op|','
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dest'
op|'='
string|"'/dev/%s'"
op|'%'
name|'dev'
newline|'\n'
name|'mbr_last'
op|'='
name|'MBR_SIZE_SECTORS'
op|'-'
number|'1'
newline|'\n'
name|'primary_first'
op|'='
name|'MBR_SIZE_SECTORS'
newline|'\n'
name|'primary_last'
op|'='
name|'MBR_SIZE_SECTORS'
op|'+'
op|'('
name|'virtual_size'
op|'/'
name|'SECTOR_SIZE'
op|')'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Writing partition table %(primary_first)d %(primary_last)d'"
nl|'\n'
string|"' to %(dest)s...'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|execute
name|'def'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dest'
op|','
string|"'mklabel'"
op|','
string|"'msdos'"
op|')'
newline|'\n'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'parted'"
op|','
string|"'--script'"
op|','
name|'dest'
op|','
string|"'mkpart'"
op|','
string|"'primary'"
op|','
nl|'\n'
string|"'%ds'"
op|'%'
name|'primary_first'
op|','
nl|'\n'
string|"'%ds'"
op|'%'
name|'primary_last'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Writing partition table %s done.'"
op|')'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_name_label_for_image
dedent|''
name|'def'
name|'get_name_label_for_image'
op|'('
name|'image'
op|')'
op|':'
newline|'\n'
comment|'# TODO(sirp): This should eventually be the URI for the Glance image'
nl|'\n'
indent|'    '
name|'return'
name|'_'
op|'('
string|"'Glance image %s'"
op|')'
op|'%'
name|'image'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_mount_filesystem
dedent|''
name|'def'
name|'_mount_filesystem'
op|'('
name|'dev_path'
op|','
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""mounts the device specified by dev_path in dir"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'err'
op|'='
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'mount'"
op|','
nl|'\n'
string|"'-t'"
op|','
string|"'ext2,ext3'"
op|','
nl|'\n'
name|'dev_path'
op|','
name|'dir'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'err'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_guest_agent
dedent|''
name|'def'
name|'_find_guest_agent'
op|'('
name|'base_dir'
op|','
name|'agent_rel_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    tries to locate a guest agent at the path\n    specificed by agent_rel_path\n    """'
newline|'\n'
name|'agent_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
name|'agent_rel_path'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'agent_path'
op|')'
op|':'
newline|'\n'
comment|'# The presence of the guest agent'
nl|'\n'
comment|'# file indicates that this instance can'
nl|'\n'
comment|'# reconfigure the network from xenstore data,'
nl|'\n'
comment|'# so manipulation of files in /etc is not'
nl|'\n'
comment|'# required'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'XenServer tools installed in this '"
nl|'\n'
string|"'image are capable of network injection.  '"
nl|'\n'
string|"'Networking files will not be'"
nl|'\n'
string|"'manipulated'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'xe_daemon_filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base_dir'
op|','
nl|'\n'
string|"'usr'"
op|','
string|"'sbin'"
op|','
string|"'xe-daemon'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'xe_daemon_filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'XenServer tools are present '"
nl|'\n'
string|"'in this image but are not capable '"
nl|'\n'
string|"'of network injection'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'XenServer tools are not '"
nl|'\n'
string|"'installed in this image'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_mounted_processing
dedent|''
name|'def'
name|'_mounted_processing'
op|'('
name|'device'
op|','
name|'key'
op|','
name|'net'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Callback which runs with the image VDI attached"""'
newline|'\n'
nl|'\n'
name|'dev_path'
op|'='
string|"'/dev/'"
op|'+'
name|'device'
op|'+'
string|"'1'"
comment|'# NB: Partition 1 hardcoded'
newline|'\n'
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Mount only Linux filesystems, to avoid disturbing NTFS images'
nl|'\n'
indent|'        '
name|'err'
op|'='
name|'_mount_filesystem'
op|'('
name|'dev_path'
op|','
name|'tmpdir'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# This try block ensures that the umount occurs'
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'_find_guest_agent'
op|'('
name|'tmpdir'
op|','
name|'FLAGS'
op|'.'
name|'xenapi_agent_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Manipulating interface files '"
nl|'\n'
string|"'directly'"
op|')'
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'inject_data_into_fs'
op|'('
name|'tmpdir'
op|','
name|'key'
op|','
name|'net'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'sudo'"
op|','
string|"'umount'"
op|','
name|'dev_path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Failed to mount filesystem (expected for '"
nl|'\n'
string|"'non-linux instances): %s'"
op|')'
op|'%'
name|'err'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# remove temporary directory'
nl|'\n'
indent|'        '
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_prepare_injectables
dedent|''
dedent|''
name|'def'
name|'_prepare_injectables'
op|'('
name|'inst'
op|','
name|'networks_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    prepares the ssh key and the network configuration file to be\n    injected into the disk image\n    """'
newline|'\n'
comment|'#do the import here - Cheetah.Template will be loaded'
nl|'\n'
comment|'#only if injection is performed'
nl|'\n'
name|'from'
name|'Cheetah'
name|'import'
name|'Template'
name|'as'
name|'t'
newline|'\n'
name|'template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
name|'template_data'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'injected_network_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'key'
op|'='
name|'str'
op|'('
name|'inst'
op|'['
string|"'key_data'"
op|']'
op|')'
newline|'\n'
name|'net'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'networks_info'
op|':'
newline|'\n'
indent|'        '
name|'ifc_num'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'interfaces_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'network_ref'
op|','
name|'info'
op|')'
name|'in'
name|'networks_info'
op|':'
newline|'\n'
indent|'            '
name|'ifc_num'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'not'
name|'network_ref'
op|'['
string|"'injected'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'ip_v4'
op|'='
name|'ip_v6'
op|'='
name|'None'
newline|'\n'
name|'if'
string|"'ips'"
name|'in'
name|'info'
name|'and'
name|'len'
op|'('
name|'info'
op|'['
string|"'ips'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'ip_v4'
op|'='
name|'info'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'ip6s'"
name|'in'
name|'info'
name|'and'
name|'len'
op|'('
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'ip_v6'
op|'='
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'info'
op|'['
string|"'dns'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'dns'
op|'='
name|'info'
op|'['
string|"'dns'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'interface_info'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'eth%d'"
op|'%'
name|'ifc_num'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'ip'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'netmask'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'info'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'info'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
name|'dns'
op|','
nl|'\n'
string|"'address_v6'"
op|':'
name|'ip_v6'
name|'and'
name|'ip_v6'
op|'['
string|"'ip'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
name|'ip_v6'
name|'and'
name|'ip_v6'
op|'['
string|"'netmask'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
name|'ip_v6'
name|'and'
name|'ip_v6'
op|'['
string|"'gateway'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'use_ipv6'"
op|':'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|'}'
newline|'\n'
name|'interfaces_info'
op|'.'
name|'append'
op|'('
name|'interface_info'
op|')'
newline|'\n'
dedent|''
name|'net'
op|'='
name|'str'
op|'('
name|'template'
op|'('
name|'template_data'
op|','
nl|'\n'
name|'searchList'
op|'='
op|'['
op|'{'
string|"'interfaces'"
op|':'
name|'interfaces_info'
op|','
nl|'\n'
string|"'use_ipv6'"
op|':'
name|'FLAGS'
op|'.'
name|'use_ipv6'
op|'}'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'key'
op|','
name|'net'
newline|'\n'
dedent|''
endmarker|''
end_unit

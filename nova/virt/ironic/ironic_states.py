begin_unit
comment|'# Copyright (c) 2012 NTT DOCOMO, INC.'
nl|'\n'
comment|'# Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nMapping of bare metal node states.\n\nSetting the node `power_state` is handled by the conductor\'s power\nsynchronization thread. Based on the power state retrieved from the driver\nfor the node, the state is set to POWER_ON or POWER_OFF, accordingly.\nShould this fail, the `power_state` value is left unchanged, and the node\nis placed into maintenance mode.\n\nThe `power_state` can also be set manually via the API. A failure to change\nthe state leaves the current state unchanged. The node is NOT placed into\nmaintenance mode in this case.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#####################'
nl|'\n'
comment|'# Provisioning states'
nl|'\n'
comment|'#####################'
nl|'\n'
nl|'\n'
DECL|variable|NOSTATE
name|'NOSTATE'
op|'='
name|'None'
newline|'\n'
string|'""" No state information.\n\nThis state is used with power_state to represent a lack of knowledge of\npower state, and in target_*_state fields when there is no target.\n\nPrior to the Kilo release, Ironic set node.provision_state to NOSTATE\nwhen the node was available for provisioning. During Kilo cycle, this was\nchanged to the AVAILABLE state.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|MANAGEABLE
name|'MANAGEABLE'
op|'='
string|"'manageable'"
newline|'\n'
string|'""" Node is in a manageable state.\nThis state indicates that Ironic has verified, at least once, that it had\nsufficient information to manage the hardware. While in this state, the node\nis not available for provisioning (it must be in the AVAILABLE state for that).\n"""'
newline|'\n'
nl|'\n'
DECL|variable|AVAILABLE
name|'AVAILABLE'
op|'='
string|"'available'"
newline|'\n'
string|'""" Node is available for use and scheduling.\n\nThis state is replacing the NOSTATE state used prior to Kilo.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|ACTIVE
name|'ACTIVE'
op|'='
string|"'active'"
newline|'\n'
string|'""" Node is successfully deployed and associated with an instance. """'
newline|'\n'
nl|'\n'
DECL|variable|DEPLOYWAIT
name|'DEPLOYWAIT'
op|'='
string|"'wait call-back'"
newline|'\n'
string|'""" Node is waiting to be deployed.\n\nThis will be the node `provision_state` while the node is waiting for\nthe driver to finish deployment.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|DEPLOYING
name|'DEPLOYING'
op|'='
string|"'deploying'"
newline|'\n'
string|'""" Node is ready to receive a deploy request, or is currently being deployed.\n\nA node will have its `provision_state` set to DEPLOYING briefly before it\nreceives its initial deploy request. It will also move to this state from\nDEPLOYWAIT after the callback is triggered and deployment is continued\n(disk partitioning and image copying).\n"""'
newline|'\n'
nl|'\n'
DECL|variable|DEPLOYFAIL
name|'DEPLOYFAIL'
op|'='
string|"'deploy failed'"
newline|'\n'
string|'""" Node deployment failed. """'
newline|'\n'
nl|'\n'
DECL|variable|DEPLOYDONE
name|'DEPLOYDONE'
op|'='
string|"'deploy complete'"
newline|'\n'
string|'""" Node was successfully deployed.\n\nThis is mainly a target provision state used during deployment. A successfully\ndeployed node should go to ACTIVE status.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|DELETING
name|'DELETING'
op|'='
string|"'deleting'"
newline|'\n'
string|'""" Node is actively being torn down. """'
newline|'\n'
nl|'\n'
DECL|variable|DELETED
name|'DELETED'
op|'='
string|"'deleted'"
newline|'\n'
string|'""" Node tear down was successful.\n\nIn Juno, target_provision_state was set to this value during node tear down.\nIn Kilo, this will be a transitory value of provision_state, and never\nrepresented in target_provision_state.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|CLEANING
name|'CLEANING'
op|'='
string|"'cleaning'"
newline|'\n'
string|'""" Node is being automatically cleaned to prepare it for provisioning. """'
newline|'\n'
nl|'\n'
DECL|variable|CLEANFAIL
name|'CLEANFAIL'
op|'='
string|"'clean failed'"
newline|'\n'
string|'""" Node failed cleaning. This requires operator intervention to resolve. """'
newline|'\n'
nl|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
string|"'error'"
newline|'\n'
string|'""" An error occurred during node processing.\n\nThe `last_error` attribute of the node details should contain an error message.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|REBUILD
name|'REBUILD'
op|'='
string|"'rebuild'"
newline|'\n'
string|'""" Node is to be rebuilt.\nThis is not used as a state, but rather as a "verb" when changing the node\'s\nprovision_state via the REST API.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|INSPECTING
name|'INSPECTING'
op|'='
string|"'inspecting'"
newline|'\n'
string|'""" Node is under inspection.\nThis is the provision state used when inspection is started. A successfully\ninspected node shall transition to MANAGEABLE status.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|INSPECTFAIL
name|'INSPECTFAIL'
op|'='
string|"'inspect failed'"
newline|'\n'
string|'""" Node inspection failed. """'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'##############'
nl|'\n'
comment|'# Power states'
nl|'\n'
comment|'##############'
nl|'\n'
nl|'\n'
DECL|variable|POWER_ON
name|'POWER_ON'
op|'='
string|"'power on'"
newline|'\n'
string|'""" Node is powered on. """'
newline|'\n'
nl|'\n'
DECL|variable|POWER_OFF
name|'POWER_OFF'
op|'='
string|"'power off'"
newline|'\n'
string|'""" Node is powered off. """'
newline|'\n'
nl|'\n'
DECL|variable|REBOOT
name|'REBOOT'
op|'='
string|"'rebooting'"
newline|'\n'
string|'""" Node is rebooting. """'
newline|'\n'
endmarker|''
end_unit

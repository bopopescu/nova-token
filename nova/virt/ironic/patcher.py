begin_unit
comment|'# coding=utf-8'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2014 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright 2014 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'#'
nl|'\n'
string|'"""\nHelper classes for Ironic HTTP PATCH creation.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'default_ephemeral_format'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create
name|'def'
name|'create'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create an instance of the appropriate DriverFields class.\n\n    :param node: a node object returned from ironicclient\n    :returns: GenericDriverFields or a subclass thereof, as appropriate\n              for the supplied node.\n    """'
newline|'\n'
name|'if'
string|"'pxe'"
name|'in'
name|'node'
op|'.'
name|'driver'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'PXEDriverFields'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'GenericDriverFields'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenericDriverFields
dedent|''
dedent|''
name|'class'
name|'GenericDriverFields'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'node'
op|'='
name|'node'
newline|'\n'
nl|'\n'
DECL|member|get_deploy_patch
dedent|''
name|'def'
name|'get_deploy_patch'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'flavor'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build a patch to add the required fields to deploy a node.\n\n        :param instance: the instance object.\n        :param image_meta: the metadata associated with the instance\n                           image.\n        :param flavor: the flavor object.\n        :param preserve_ephemeral: preserve_ephemeral status (bool) to be\n                                   specified during rebuild.\n        :returns: a json-patch with the fields that needs to be updated.\n\n        """'
newline|'\n'
name|'patch'
op|'='
op|'['
op|']'
newline|'\n'
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/image_source'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'image_meta'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/root_gb'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'instance'
op|'.'
name|'root_gb'
op|')'
op|'}'
op|')'
newline|'\n'
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/swap_mb'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'flavor'
op|'['
string|"'swap'"
op|']'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'ephemeral_gb'
op|':'
newline|'\n'
indent|'            '
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/ephemeral_gb'"
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'instance'
op|'.'
name|'ephemeral_gb'
op|')'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|':'
newline|'\n'
indent|'                '
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/ephemeral_format'"
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'preserve_ephemeral'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/preserve_ephemeral'"
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|','
string|"'value'"
op|':'
name|'str'
op|'('
name|'preserve_ephemeral'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'patch'
newline|'\n'
nl|'\n'
DECL|member|get_cleanup_patch
dedent|''
name|'def'
name|'get_cleanup_patch'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build a patch to clean up the fields.\n\n        :param instance: the instance object.\n        :param network_info: the instance network information.\n        :param flavor: the flavor object.\n        :returns: a json-patch with the fields that needs to be updated.\n\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PXEDriverFields
dedent|''
dedent|''
name|'class'
name|'PXEDriverFields'
op|'('
name|'GenericDriverFields'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_get_kernel_ramdisk_dict
indent|'    '
name|'def'
name|'_get_kernel_ramdisk_dict'
op|'('
name|'self'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the deploy ramdisk and kernel IDs from the flavor.\n\n        :param flavor: the flavor object.\n        :returns: a dict with the pxe options for the deploy ramdisk and\n            kernel if the IDs were found in the flavor, otherwise an empty\n            dict is returned.\n\n        """'
newline|'\n'
name|'extra_specs'
op|'='
name|'flavor'
op|'['
string|"'extra_specs'"
op|']'
newline|'\n'
name|'deploy_kernel'
op|'='
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'baremetal:deploy_kernel_id'"
op|')'
newline|'\n'
name|'deploy_ramdisk'
op|'='
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'baremetal:deploy_ramdisk_id'"
op|')'
newline|'\n'
name|'deploy_ids'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'deploy_kernel'
name|'and'
name|'deploy_ramdisk'
op|':'
newline|'\n'
indent|'            '
name|'deploy_ids'
op|'['
string|"'pxe_deploy_kernel'"
op|']'
op|'='
name|'deploy_kernel'
newline|'\n'
name|'deploy_ids'
op|'['
string|"'pxe_deploy_ramdisk'"
op|']'
op|'='
name|'deploy_ramdisk'
newline|'\n'
dedent|''
name|'return'
name|'deploy_ids'
newline|'\n'
nl|'\n'
DECL|member|get_deploy_patch
dedent|''
name|'def'
name|'get_deploy_patch'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'flavor'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build a patch to add the required fields to deploy a node.\n\n        Build a json-patch to add the required fields to deploy a node\n        using the PXE driver.\n\n        :param instance: the instance object.\n        :param image_meta: the metadata associated with the instance\n                           image.\n        :param flavor: the flavor object.\n        :param preserve_ephemeral: preserve_ephemeral status (bool) to be\n                                   specified during rebuild.\n        :returns: a json-patch with the fields that needs to be updated.\n\n        """'
newline|'\n'
name|'patch'
op|'='
name|'super'
op|'('
name|'PXEDriverFields'
op|','
name|'self'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'instance'
op|','
name|'image_meta'
op|','
name|'flavor'
op|','
name|'preserve_ephemeral'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(lucasagomes): Remove it in Kilo. This is for backwards'
nl|'\n'
comment|'# compatibility with Icehouse. If flavor contains both ramdisk'
nl|'\n'
comment|'# and kernel ids, use them.'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'_get_kernel_ramdisk_dict'
op|'('
name|'flavor'
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'path'"
op|':'
string|"'/driver_info/%s'"
op|'%'
name|'key'
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|','
string|"'value'"
op|':'
name|'value'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'patch'
newline|'\n'
nl|'\n'
DECL|member|get_cleanup_patch
dedent|''
name|'def'
name|'get_cleanup_patch'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build a patch to clean up the fields.\n\n        Build a json-patch to remove the fields used to deploy a node\n        using the PXE driver. Note that the fields added to the Node\'s\n        instance_info don\'t need to be removed because they are purged\n        during the Node\'s tear down.\n\n        :param instance: the instance object.\n        :param network_info: the instance network information.\n        :param flavor: the flavor object.\n        :returns: a json-patch with the fields that needs to be updated.\n\n        """'
newline|'\n'
name|'patch'
op|'='
name|'super'
op|'('
name|'PXEDriverFields'
op|','
name|'self'
op|')'
op|'.'
name|'get_cleanup_patch'
op|'('
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(lucasagomes): Remove it in Kilo. This is for backwards'
nl|'\n'
comment|'# compatibility with Icehouse. If flavor contains a ramdisk and'
nl|'\n'
comment|'# kernel id remove it from nodes as part of the tear down process'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_get_kernel_ramdisk_dict'
op|'('
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'node'
op|'.'
name|'driver_info'
op|':'
newline|'\n'
indent|'                '
name|'patch'
op|'.'
name|'append'
op|'('
op|'{'
string|"'op'"
op|':'
string|"'remove'"
op|','
nl|'\n'
string|"'path'"
op|':'
string|"'/driver_info/%s'"
op|'%'
name|'key'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'patch'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

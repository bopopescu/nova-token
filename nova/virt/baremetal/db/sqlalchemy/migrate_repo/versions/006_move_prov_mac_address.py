begin_unit
comment|'# Copyright (c) 2013 NTT DOCOMO, INC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'db'
name|'import'
name|'exception'
name|'as'
name|'db_exc'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'MetaData'
op|','
name|'Table'
op|','
name|'exists'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'sql'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade
name|'def'
name|'upgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'nodes'
op|'='
name|'Table'
op|'('
string|"'bm_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'ifs'
op|'='
name|'Table'
op|'('
string|"'bm_interfaces'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'q'
op|'='
name|'sql'
op|'.'
name|'select'
op|'('
op|'['
name|'nodes'
op|'.'
name|'c'
op|'.'
name|'id'
op|','
name|'nodes'
op|'.'
name|'c'
op|'.'
name|'prov_mac_address'
op|']'
op|','
nl|'\n'
name|'from_obj'
op|'='
name|'nodes'
op|')'
newline|'\n'
nl|'\n'
comment|'# Iterate all elements before starting insert since IntegrityError'
nl|'\n'
comment|'# may disturb the iteration.'
nl|'\n'
name|'node_address'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'node_id'
op|','
name|'address'
name|'in'
name|'q'
op|'.'
name|'execute'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_address'
op|'['
name|'node_id'
op|']'
op|'='
name|'address'
newline|'\n'
nl|'\n'
dedent|''
name|'i'
op|'='
name|'ifs'
op|'.'
name|'insert'
op|'('
op|')'
newline|'\n'
name|'for'
name|'node_id'
op|','
name|'address'
name|'in'
name|'node_address'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'.'
name|'execute'
op|'('
op|'{'
string|"'bm_node_id'"
op|':'
name|'node_id'
op|','
string|"'address'"
op|':'
name|'address'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'db_exc'
op|'.'
name|'DBError'
op|':'
newline|'\n'
comment|'# TODO(ekudryashova): replace by DBReferenceError when db layer'
nl|'\n'
comment|'# raise it.'
nl|'\n'
comment|'# The address is registered in both bm_nodes and bm_interfaces.'
nl|'\n'
comment|'# It is expected.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|downgrade
dedent|''
dedent|''
dedent|''
name|'def'
name|'downgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'nodes'
op|'='
name|'Table'
op|'('
string|"'bm_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'ifs'
op|'='
name|'Table'
op|'('
string|"'bm_interfaces'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'subq'
op|'='
name|'exists'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'sql'
op|'.'
name|'and_'
op|'('
nl|'\n'
name|'ifs'
op|'.'
name|'c'
op|'.'
name|'bm_node_id'
op|'=='
name|'nodes'
op|'.'
name|'c'
op|'.'
name|'id'
op|','
nl|'\n'
name|'ifs'
op|'.'
name|'c'
op|'.'
name|'address'
op|'=='
name|'nodes'
op|'.'
name|'c'
op|'.'
name|'prov_mac_address'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'ifs'
op|'.'
name|'delete'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'subq'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(arata):'
nl|'\n'
comment|'# In fact, this downgrade may not return the db to the previous state.'
nl|'\n'
comment|'# It seems to be not so match a problem, so this is just for memo.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Think these two state before upgrading:'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# (A) address 'x' is duplicate"
nl|'\n'
comment|"#     bm_nodes.prov_mac_address='x'"
nl|'\n'
comment|"#     bm_interfaces.address=['x', 'y']"
nl|'\n'
comment|'#'
nl|'\n'
comment|'# (B) no address is duplicate'
nl|'\n'
comment|"#     bm_nodes.prov_mac_address='x'"
nl|'\n'
comment|"#     bm_interfaces.address=['y']"
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Upgrading them results in the same state:'
nl|'\n'
comment|'#'
nl|'\n'
comment|"#     bm_nodes.prov_mac_address='x'"
nl|'\n'
comment|"#     bm_interfaces.address=['x', 'y']"
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Downgrading this results in B, even if the actual initial status was A'
nl|'\n'
comment|'# Of course we can change it to downgrade to B, but then we cannot'
nl|'\n'
comment|'# downgrade to A; it is an exclusive choice since we do not have'
nl|'\n'
comment|'# information about the initial state.'
nl|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2014 Cloudbase Solutions Srl'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'patcher'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|native_threading
name|'native_threading'
op|'='
name|'patcher'
op|'.'
name|'original'
op|'('
string|"'threading'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IOThread
name|'class'
name|'IOThread'
op|'('
name|'native_threading'
op|'.'
name|'Thread'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dest'
op|','
name|'max_bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IOThread'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setDaemon'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_src'
op|'='
name|'src'
newline|'\n'
name|'self'
op|'.'
name|'_dest'
op|'='
name|'dest'
newline|'\n'
name|'self'
op|'.'
name|'_dest_archive'
op|'='
name|'dest'
op|'+'
string|"'.1'"
newline|'\n'
name|'self'
op|'.'
name|'_max_bytes'
op|'='
name|'max_bytes'
newline|'\n'
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'native_threading'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_copy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_stopped'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
comment|'# Invalid argument error means that the vm console pipe was closed,'
nl|'\n'
comment|"# probably the vm was stopped. The worker can stop it's execution."
nl|'\n'
name|'if'
name|'err'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EINVAL'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Error writing vm console log file from "'
nl|'\n'
string|'"serial console pipe. Error: %s"'
op|')'
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_copy
dedent|''
dedent|''
dedent|''
name|'def'
name|'_copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'_src'
op|','
string|"'rb'"
op|')'
name|'as'
name|'src'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'_dest'
op|','
string|"'ab'"
op|','
number|'0'
op|')'
name|'as'
name|'dest'
op|':'
newline|'\n'
indent|'                '
name|'dest'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_END'
op|')'
newline|'\n'
name|'log_size'
op|'='
name|'dest'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'while'
op|'('
name|'not'
name|'self'
op|'.'
name|'_stopped'
op|'.'
name|'isSet'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
comment|'# Read one byte at a time to avoid blocking.'
nl|'\n'
indent|'                    '
name|'data'
op|'='
name|'src'
op|'.'
name|'read'
op|'('
number|'1'
op|')'
newline|'\n'
name|'dest'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
name|'log_size'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
op|'('
name|'log_size'
op|'>='
name|'self'
op|'.'
name|'_max_bytes'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'dest'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'_dest_archive'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'self'
op|'.'
name|'_dest_archive'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'rename'
op|'('
name|'self'
op|'.'
name|'_dest'
op|','
name|'self'
op|'.'
name|'_dest_archive'
op|')'
newline|'\n'
name|'dest'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'_dest'
op|','
string|"'ab'"
op|','
number|'0'
op|')'
newline|'\n'
name|'log_size'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|join
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'join'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_stopped'
op|'.'
name|'set'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'IOThread'
op|','
name|'self'
op|')'
op|'.'
name|'join'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_active
dedent|''
name|'def'
name|'is_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'self'
op|'.'
name|'_stopped'
op|'.'
name|'isSet'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2010 Cloud.com, Inc'
nl|'\n'
comment|'# Copyright 2012 Cloudbase Solutions Srl'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManagement class for basic VM operations.\n"""'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'timeout'
name|'as'
name|'etimeout'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_service'
name|'import'
name|'loopingcall'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'fileutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'uuidutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'metadata'
name|'import'
name|'base'
name|'as'
name|'instance_metadata'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LI'
op|','
name|'_LE'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'imagecache'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'ioutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'utilsfactory'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'vmutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'volumeops'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|hyperv_opts
name|'hyperv_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'limit_cpu_features'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Required for live migration among '"
nl|'\n'
string|"'hosts with different CPU features'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'config_drive_inject_password'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Sets the admin password in the config drive image'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'qemu_img_cmd'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"qemu-img.exe"'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path of qemu-img command which is used to convert '"
nl|'\n'
string|"'between different image types'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'config_drive_cdrom'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Attaches the Config Drive image as a cdrom drive '"
nl|'\n'
string|"'instead of a disk drive'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'enable_instance_metrics_collection'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Enables metrics collections for an instance by using '"
nl|'\n'
string|"'Hyper-V\\'s metric APIs. Collected data can by retrieved '"
nl|'\n'
string|"'by other apps and services, e.g.: Ceilometer. '"
nl|'\n'
string|"'Requires Hyper-V / Windows Server 2012 and above'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'dynamic_memory_ratio'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1.0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Enables dynamic memory allocation (ballooning) when '"
nl|'\n'
string|"'set to a value greater than 1. The value expresses '"
nl|'\n'
string|"'the ratio between the total RAM assigned to an '"
nl|'\n'
string|"'instance and its startup RAM amount. For example a '"
nl|'\n'
string|"'ratio of 2.0 for an instance with 1024MB of RAM '"
nl|'\n'
string|"'implies 512MB of RAM allocated at startup'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'wait_soft_reboot_seconds'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds to wait for instance to shut down after'"
nl|'\n'
string|"' soft reboot request is made. We fall back to hard reboot'"
nl|'\n'
string|"' if instance does not shutdown within this window.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'hyperv_opts'
op|','
string|"'hyperv'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'use_cow_images'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_api_class'"
op|','
string|"'nova.network'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SHUTDOWN_TIME_INCREMENT
name|'SHUTDOWN_TIME_INCREMENT'
op|'='
number|'5'
newline|'\n'
DECL|variable|REBOOT_TYPE_SOFT
name|'REBOOT_TYPE_SOFT'
op|'='
string|"'SOFT'"
newline|'\n'
DECL|variable|REBOOT_TYPE_HARD
name|'REBOOT_TYPE_HARD'
op|'='
string|"'HARD'"
newline|'\n'
nl|'\n'
DECL|variable|VM_GENERATIONS
name|'VM_GENERATIONS'
op|'='
op|'{'
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_1'
op|':'
name|'constants'
op|'.'
name|'VM_GEN_1'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_2'
op|':'
name|'constants'
op|'.'
name|'VM_GEN_2'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|VM_GENERATIONS_CONTROLLER_TYPES
name|'VM_GENERATIONS_CONTROLLER_TYPES'
op|'='
op|'{'
nl|'\n'
name|'constants'
op|'.'
name|'VM_GEN_1'
op|':'
name|'constants'
op|'.'
name|'CTRL_TYPE_IDE'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'VM_GEN_2'
op|':'
name|'constants'
op|'.'
name|'CTRL_TYPE_SCSI'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_admin_permissions
name|'def'
name|'check_admin_permissions'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwds'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Make sure the windows account has the required admin permissions.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'check_admin_permissions'
op|'('
op|')'
newline|'\n'
name|'return'
name|'function'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwds'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOps
dedent|''
name|'class'
name|'VMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|_vif_driver_class_map
indent|'    '
name|'_vif_driver_class_map'
op|'='
op|'{'
nl|'\n'
string|"'nova.network.neutronv2.api.API'"
op|':'
nl|'\n'
string|"'nova.virt.hyperv.vif.HyperVNeutronVIFDriver'"
op|','
nl|'\n'
string|"'nova.network.api.API'"
op|':'
nl|'\n'
string|"'nova.virt.hyperv.vif.HyperVNovaNetworkVIFDriver'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# The console log is stored in two files, each should have at most half of'
nl|'\n'
comment|'# the maximum console log size.'
nl|'\n'
DECL|variable|_MAX_CONSOLE_LOG_FILE_SIZE
name|'_MAX_CONSOLE_LOG_FILE_SIZE'
op|'='
name|'units'
op|'.'
name|'Mi'
op|'/'
number|'2'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmutils'
op|'='
name|'utilsfactory'
op|'.'
name|'get_vmutils'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vhdutils'
op|'='
name|'utilsfactory'
op|'.'
name|'get_vhdutils'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pathutils'
op|'='
name|'utilsfactory'
op|'.'
name|'get_pathutils'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_hostutils'
op|'='
name|'utilsfactory'
op|'.'
name|'get_hostutils'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'volumeops'
op|'.'
name|'VolumeOps'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_imagecache'
op|'='
name|'imagecache'
op|'.'
name|'ImageCache'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vif_driver'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_load_vif_driver_class'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vm_log_writers'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_load_vif_driver_class
dedent|''
name|'def'
name|'_load_vif_driver_class'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'class_name'
op|'='
name|'self'
op|'.'
name|'_vif_driver_class_map'
op|'['
name|'CONF'
op|'.'
name|'network_api_class'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vif_driver'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'class_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
name|'_'
op|'('
string|'"VIF driver not found for "'
nl|'\n'
string|'"network_api_class: %s"'
op|')'
op|'%'
nl|'\n'
name|'CONF'
op|'.'
name|'network_api_class'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instance_uuids
dedent|''
dedent|''
name|'def'
name|'list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'instance_name'
op|','
name|'notes'
op|')'
name|'in'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'list_instance_notes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'notes'
name|'and'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'notes'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuids'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'notes'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Notes not found or not resembling a GUID for "'
nl|'\n'
string|'"instance: %s"'
op|'%'
name|'instance_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'instance_uuids'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get information about the VM."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"get_info called for instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_summary_info'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'state'
op|'='
name|'constants'
op|'.'
name|'HYPERV_POWER_STATE'
op|'['
name|'info'
op|'['
string|"'EnabledState'"
op|']'
op|']'
newline|'\n'
name|'return'
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'state'
op|','
nl|'\n'
name|'max_mem_kb'
op|'='
name|'info'
op|'['
string|"'MemoryUsage'"
op|']'
op|','
nl|'\n'
name|'mem_kb'
op|'='
name|'info'
op|'['
string|"'MemoryUsage'"
op|']'
op|','
nl|'\n'
name|'num_cpu'
op|'='
name|'info'
op|'['
string|"'NumberOfProcessors'"
op|']'
op|','
nl|'\n'
name|'cpu_time_ns'
op|'='
name|'info'
op|'['
string|"'UpTime'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_root_vhd
dedent|''
name|'def'
name|'_create_root_vhd'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_vhd_path'
op|'='
name|'self'
op|'.'
name|'_imagecache'
op|'.'
name|'get_cached_image'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'base_vhd_info'
op|'='
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_info'
op|'('
name|'base_vhd_path'
op|')'
newline|'\n'
name|'base_vhd_size'
op|'='
name|'base_vhd_info'
op|'['
string|"'MaxInternalSize'"
op|']'
newline|'\n'
name|'format_ext'
op|'='
name|'base_vhd_path'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'root_vhd_path'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_root_vhd_path'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'format_ext'
op|')'
newline|'\n'
name|'root_vhd_size'
op|'='
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'CONF'
op|'.'
name|'use_cow_images'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating differencing VHD. Parent: "'
nl|'\n'
string|'"%(base_vhd_path)s, Target: %(root_vhd_path)s"'
op|','
nl|'\n'
op|'{'
string|"'base_vhd_path'"
op|':'
name|'base_vhd_path'
op|','
nl|'\n'
string|"'root_vhd_path'"
op|':'
name|'root_vhd_path'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'create_differencing_vhd'
op|'('
name|'root_vhd_path'
op|','
nl|'\n'
name|'base_vhd_path'
op|')'
newline|'\n'
name|'vhd_type'
op|'='
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_format'
op|'('
name|'base_vhd_path'
op|')'
newline|'\n'
name|'if'
name|'vhd_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|':'
newline|'\n'
comment|'# The base image has already been resized. As differencing'
nl|'\n'
comment|'# vhdx images support it, the root image will be resized'
nl|'\n'
comment|'# instead if needed.'
nl|'\n'
indent|'                    '
name|'return'
name|'root_vhd_path'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copying VHD image %(base_vhd_path)s to target: "'
nl|'\n'
string|'"%(root_vhd_path)s"'
op|','
nl|'\n'
op|'{'
string|"'base_vhd_path'"
op|':'
name|'base_vhd_path'
op|','
nl|'\n'
string|"'root_vhd_path'"
op|':'
name|'root_vhd_path'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'copyfile'
op|'('
name|'base_vhd_path'
op|','
name|'root_vhd_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'root_vhd_internal_size'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_internal_vhd_size_by_file_size'
op|'('
nl|'\n'
name|'base_vhd_path'
op|','
name|'root_vhd_size'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_resize_needed'
op|'('
name|'root_vhd_path'
op|','
name|'base_vhd_size'
op|','
nl|'\n'
name|'root_vhd_internal_size'
op|','
nl|'\n'
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'resize_vhd'
op|'('
name|'root_vhd_path'
op|','
nl|'\n'
name|'root_vhd_internal_size'
op|','
nl|'\n'
name|'is_file_max_size'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'exists'
op|'('
name|'root_vhd_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'remove'
op|'('
name|'root_vhd_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'root_vhd_path'
newline|'\n'
nl|'\n'
DECL|member|_is_resize_needed
dedent|''
name|'def'
name|'_is_resize_needed'
op|'('
name|'self'
op|','
name|'vhd_path'
op|','
name|'old_size'
op|','
name|'new_size'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'new_size'
op|'<'
name|'old_size'
op|':'
newline|'\n'
indent|'            '
name|'error_msg'
op|'='
name|'_'
op|'('
string|'"Cannot resize a VHD to a smaller size, the"'
nl|'\n'
string|'" original size is %(old_size)s, the"'
nl|'\n'
string|'" newer size is %(new_size)s"'
nl|'\n'
op|')'
op|'%'
op|'{'
string|"'old_size'"
op|':'
name|'old_size'
op|','
nl|'\n'
string|"'new_size'"
op|':'
name|'new_size'
op|'}'
newline|'\n'
name|'raise'
name|'vmutils'
op|'.'
name|'VHDResizeException'
op|'('
name|'error_msg'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'new_size'
op|'>'
name|'old_size'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resizing VHD %(vhd_path)s to new "'
nl|'\n'
string|'"size %(new_size)s"'
op|'%'
nl|'\n'
op|'{'
string|"'new_size'"
op|':'
name|'new_size'
op|','
nl|'\n'
string|"'vhd_path'"
op|':'
name|'vhd_path'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|create_ephemeral_vhd
dedent|''
name|'def'
name|'create_ephemeral_vhd'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'eph_vhd_size'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'ephemeral_gb'"
op|','
number|'0'
op|')'
op|'*'
name|'units'
op|'.'
name|'Gi'
newline|'\n'
name|'if'
name|'eph_vhd_size'
op|':'
newline|'\n'
indent|'            '
name|'vhd_format'
op|'='
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_best_supported_vhd_format'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'eph_vhd_path'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_ephemeral_vhd_path'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'vhd_format'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'create_dynamic_vhd'
op|'('
name|'eph_vhd_path'
op|','
name|'eph_vhd_size'
op|','
nl|'\n'
name|'vhd_format'
op|')'
newline|'\n'
name|'return'
name|'eph_vhd_path'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'check_admin_permissions'
newline|'\n'
DECL|member|spawn
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new VM and start it."""'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Spawning new instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure we're starting with a clean slate."
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete_disk_files'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'ebs_root_in_block_devices'
op|'('
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'root_vhd_path'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'root_vhd_path'
op|'='
name|'self'
op|'.'
name|'_create_root_vhd'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'eph_vhd_path'
op|'='
name|'self'
op|'.'
name|'create_ephemeral_vhd'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'vm_gen'
op|'='
name|'self'
op|'.'
name|'get_image_vm_generation'
op|'('
name|'root_vhd_path'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'create_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'root_vhd_path'
op|','
name|'eph_vhd_path'
op|','
name|'vm_gen'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'configdrive_path'
op|'='
name|'self'
op|'.'
name|'_create_config_drive'
op|'('
name|'instance'
op|','
nl|'\n'
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'attach_config_drive'
op|'('
name|'instance'
op|','
name|'configdrive_path'
op|','
name|'vm_gen'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'root_vhd_path'
op|','
name|'eph_vhd_path'
op|','
name|'vm_gen'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'instance_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'create_vm'
op|'('
name|'instance_name'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'vcpus'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'limit_cpu_features'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'dynamic_memory_ratio'
op|','
nl|'\n'
name|'vm_gen'
op|','
nl|'\n'
name|'instance_path'
op|','
nl|'\n'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'create_scsi_controller'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'controller_type'
op|'='
name|'VM_GENERATIONS_CONTROLLER_TYPES'
op|'['
name|'vm_gen'
op|']'
newline|'\n'
nl|'\n'
name|'ctrl_disk_addr'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'root_vhd_path'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_attach_drive'
op|'('
name|'instance_name'
op|','
name|'root_vhd_path'
op|','
number|'0'
op|','
name|'ctrl_disk_addr'
op|','
nl|'\n'
name|'controller_type'
op|')'
newline|'\n'
name|'ctrl_disk_addr'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'eph_vhd_path'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_attach_drive'
op|'('
name|'instance_name'
op|','
name|'eph_vhd_path'
op|','
number|'0'
op|','
name|'ctrl_disk_addr'
op|','
nl|'\n'
name|'controller_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# If ebs_root is False, the first volume will be attached to SCSI'
nl|'\n'
comment|'# controller. Generation 2 VMs only has a SCSI controller.'
nl|'\n'
dedent|''
name|'ebs_root'
op|'='
name|'vm_gen'
name|'is'
name|'not'
name|'constants'
op|'.'
name|'VM_GEN_2'
name|'and'
name|'root_vhd_path'
name|'is'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_volumes'
op|'('
name|'block_device_info'
op|','
nl|'\n'
name|'instance_name'
op|','
nl|'\n'
name|'ebs_root'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Creating nic for instance'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'create_nic'
op|'('
name|'instance_name'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'enable_instance_metrics_collection'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'enable_vm_metrics_collection'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_vm_com_port_pipe'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_drive
dedent|''
name|'def'
name|'_attach_drive'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'path'
op|','
name|'drive_addr'
op|','
name|'ctrl_disk_addr'
op|','
nl|'\n'
name|'controller_type'
op|','
name|'drive_type'
op|'='
name|'constants'
op|'.'
name|'DISK'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'controller_type'
op|'=='
name|'constants'
op|'.'
name|'CTRL_TYPE_SCSI'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'attach_scsi_drive'
op|'('
name|'instance_name'
op|','
name|'path'
op|','
name|'drive_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'attach_ide_drive'
op|'('
name|'instance_name'
op|','
name|'path'
op|','
name|'drive_addr'
op|','
nl|'\n'
name|'ctrl_disk_addr'
op|','
name|'drive_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_image_vm_generation
dedent|''
dedent|''
name|'def'
name|'get_image_vm_generation'
op|'('
name|'self'
op|','
name|'root_vhd_path'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_props'
op|'='
name|'image_meta'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'default_vm_gen'
op|'='
name|'self'
op|'.'
name|'_hostutils'
op|'.'
name|'get_default_vm_generation'
op|'('
op|')'
newline|'\n'
name|'image_prop_vm'
op|'='
name|'image_props'
op|'.'
name|'get'
op|'('
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN'
op|','
nl|'\n'
name|'default_vm_gen'
op|')'
newline|'\n'
name|'if'
name|'image_prop_vm'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_hostutils'
op|'.'
name|'get_supported_vm_types'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Requested VM Generation %s is not supported on '"
nl|'\n'
string|"' this OS.'"
op|')'
op|','
name|'image_prop_vm'
op|')'
newline|'\n'
name|'raise'
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Requested VM Generation %s is not supported on this '"
nl|'\n'
string|"'OS.'"
op|')'
op|'%'
name|'image_prop_vm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_gen'
op|'='
name|'VM_GENERATIONS'
op|'['
name|'image_prop_vm'
op|']'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'vm_gen'
op|'!='
name|'constants'
op|'.'
name|'VM_GEN_1'
name|'and'
name|'root_vhd_path'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_format'
op|'('
nl|'\n'
name|'root_vhd_path'
op|')'
op|'=='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Requested VM Generation %s, but provided VHD '"
nl|'\n'
string|"'instead of VHDX.'"
op|')'
op|','
name|'vm_gen'
op|')'
newline|'\n'
name|'raise'
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Requested VM Generation %s, but provided VHD instead of '"
nl|'\n'
string|"'VHDX.'"
op|')'
op|'%'
name|'vm_gen'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'vm_gen'
newline|'\n'
nl|'\n'
DECL|member|_create_config_drive
dedent|''
name|'def'
name|'_create_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'config_drive_format'
op|'!='
string|"'iso9660'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'vmutils'
op|'.'
name|'UnsupportedConfigDriveFormatException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'\'Invalid config_drive_format "%s"\''
op|')'
op|'%'
nl|'\n'
name|'CONF'
op|'.'
name|'config_drive_format'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Using config drive for instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'extra_md'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'admin_password'
name|'and'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'config_drive_inject_password'
op|':'
newline|'\n'
indent|'            '
name|'extra_md'
op|'['
string|"'admin_pass'"
op|']'
op|'='
name|'admin_password'
newline|'\n'
nl|'\n'
dedent|''
name|'inst_md'
op|'='
name|'instance_metadata'
op|'.'
name|'InstanceMetadata'
op|'('
name|'instance'
op|','
nl|'\n'
name|'content'
op|'='
name|'injected_files'
op|','
nl|'\n'
name|'extra_md'
op|'='
name|'extra_md'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance_path'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'configdrive_path_iso'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_path'
op|','
string|"'configdrive.iso'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Creating config drive at %(path)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
name|'configdrive_path_iso'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'configdrive'
op|'.'
name|'ConfigDriveBuilder'
op|'('
name|'instance_md'
op|'='
name|'inst_md'
op|')'
name|'as'
name|'cdb'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cdb'
op|'.'
name|'make_drive'
op|'('
name|'configdrive_path_iso'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Creating config drive failed with '"
nl|'\n'
string|"'error: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'config_drive_cdrom'
op|':'
newline|'\n'
indent|'            '
name|'configdrive_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'instance_path'
op|','
nl|'\n'
string|"'configdrive.vhd'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'qemu_img_cmd'
op|','
nl|'\n'
string|"'convert'"
op|','
nl|'\n'
string|"'-f'"
op|','
nl|'\n'
string|"'raw'"
op|','
nl|'\n'
string|"'-O'"
op|','
nl|'\n'
string|"'vpc'"
op|','
nl|'\n'
name|'configdrive_path_iso'
op|','
nl|'\n'
name|'configdrive_path'
op|','
nl|'\n'
name|'attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'remove'
op|'('
name|'configdrive_path_iso'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'configdrive_path'
op|'='
name|'configdrive_path_iso'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'configdrive_path'
newline|'\n'
nl|'\n'
DECL|member|attach_config_drive
dedent|''
name|'def'
name|'attach_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'configdrive_path'
op|','
name|'vm_gen'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'configdrive_ext'
op|'='
name|'configdrive_path'
op|'['
op|'('
name|'configdrive_path'
op|'.'
name|'rfind'
op|'('
string|"'.'"
op|')'
op|'+'
number|'1'
op|')'
op|':'
op|']'
newline|'\n'
comment|"# Do the attach here and if there is a certain file format that isn't"
nl|'\n'
comment|'# supported in constants.DISK_FORMAT_MAP then bomb out.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'drive_type'
op|'='
name|'constants'
op|'.'
name|'DISK_FORMAT_MAP'
op|'['
name|'configdrive_ext'
op|']'
newline|'\n'
name|'controller_type'
op|'='
name|'VM_GENERATIONS_CONTROLLER_TYPES'
op|'['
name|'vm_gen'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_attach_drive'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'configdrive_path'
op|','
number|'1'
op|','
number|'0'
op|','
nl|'\n'
name|'controller_type'
op|','
name|'drive_type'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDiskFormat'
op|'('
name|'disk_format'
op|'='
name|'configdrive_ext'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_disk_files
dedent|''
dedent|''
name|'def'
name|'_delete_disk_files'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'('
name|'instance_name'
op|','
nl|'\n'
name|'create_dir'
op|'='
name|'False'
op|','
nl|'\n'
name|'remove_dir'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Got request to destroy instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Stop the VM first.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'destroy_vm'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'disconnect_volumes'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance not found"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'destroy_disks'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_disk_files'
op|'('
name|'instance_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to destroy instance: %s'"
op|')'
op|','
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
dedent|''
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the specified instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooting instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'reboot_type'
op|'=='
name|'REBOOT_TYPE_SOFT'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_soft_shutdown
dedent|''
name|'def'
name|'_soft_shutdown'
op|'('
name|'self'
op|','
name|'instance'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'wait_soft_reboot_seconds'
op|','
nl|'\n'
name|'retry_interval'
op|'='
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Perform a soft shutdown on the VM.\n\n           :return: True if the instance was shutdown within time limit,\n                    False otherwise.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Performing Soft shutdown on instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
comment|'# Perform a soft shutdown on the instance.'
nl|'\n'
comment|'# Wait maximum timeout for the instance to be shutdown.'
nl|'\n'
comment|'# If it was not shutdown, retry until it succeeds or a maximum of'
nl|'\n'
comment|'# time waited is equal to timeout.'
nl|'\n'
indent|'            '
name|'wait_time'
op|'='
name|'min'
op|'('
name|'retry_interval'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Soft shutdown instance, timeout remaining: %d"'
op|','
nl|'\n'
name|'timeout'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'soft_shutdown_vm'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_wait_for_power_off'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'wait_time'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Soft shutdown succeeded."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'vmutils'
op|'.'
name|'HyperVException'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# Exception is raised when trying to shutdown the instance'
nl|'\n'
comment|'# while it is still booting.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Soft shutdown failed: %s"'
op|','
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
name|'wait_time'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'timeout'
op|'-='
name|'retry_interval'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Timed out while waiting for soft shutdown."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Pause instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_PAUSED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause paused VM instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unpause instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspend instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_SUSPENDED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the suspended VM instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resume instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'timeout'
op|'='
number|'0'
op|','
name|'retry_interval'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Power off instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'retry_interval'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'retry_interval'
op|'='
name|'SHUTDOWN_TIME_INCREMENT'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'timeout'
name|'and'
name|'self'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
nl|'\n'
name|'timeout'
op|','
nl|'\n'
name|'retry_interval'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|'# The manager can call the stop API after recieving instance'
nl|'\n'
comment|'# power off events. If this is triggered when the instance'
nl|'\n'
comment|'# is being deleted, it might attempt to power off an unexisting'
nl|'\n'
comment|"# instance. We'll just pass in this case."
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance not found. Skipping power off"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on the specified instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Power on instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'block_device_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'fix_instance_volume_disk_paths'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_vm_state'
op|'('
name|'instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_vm_state
dedent|''
name|'def'
name|'_set_vm_state'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'req_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'set_vm_state'
op|'('
name|'instance_name'
op|','
name|'req_state'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'req_state'
name|'in'
op|'('
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_vm_console_log'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'req_state'
name|'in'
op|'('
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'log_vm_serial_output'
op|'('
name|'instance_name'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Successfully changed state of VM %(instance_name)s"'
nl|'\n'
string|'" to: %(req_state)s"'
op|','
op|'{'
string|"'instance_name'"
op|':'
name|'instance_name'
op|','
nl|'\n'
string|"'req_state'"
op|':'
name|'req_state'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Failed to change vm state of %(instance_name)s"'
nl|'\n'
string|'" to %(req_state)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_name'"
op|':'
name|'instance_name'
op|','
nl|'\n'
string|"'req_state'"
op|':'
name|'req_state'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_state
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_vm_state'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'summary_info'
op|'='
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_summary_info'
op|'('
name|'instance_name'
op|')'
newline|'\n'
name|'return'
name|'summary_info'
op|'['
string|"'EnabledState'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_power_off
dedent|''
name|'def'
name|'_wait_for_power_off'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'time_limit'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Waiting for a VM to be in a disabled state.\n\n           :return: True if the instance is shutdown within time_limit,\n                    False otherwise.\n        """'
newline|'\n'
nl|'\n'
name|'desired_vm_states'
op|'='
op|'['
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|']'
newline|'\n'
nl|'\n'
DECL|function|_check_vm_status
name|'def'
name|'_check_vm_status'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_get_vm_state'
op|'('
name|'instance_name'
op|')'
name|'in'
name|'desired_vm_states'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'loopingcall'
op|'.'
name|'LoopingCallDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'periodic_call'
op|'='
name|'loopingcall'
op|'.'
name|'FixedIntervalLoopingCall'
op|'('
name|'_check_vm_status'
op|','
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# add a timeout to the periodic call.'
nl|'\n'
indent|'            '
name|'periodic_call'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
newline|'\n'
name|'etimeout'
op|'.'
name|'with_timeout'
op|'('
name|'time_limit'
op|','
name|'periodic_call'
op|'.'
name|'wait'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'etimeout'
op|'.'
name|'Timeout'
op|':'
newline|'\n'
comment|'# VM did not shutdown in the expected time_limit.'
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# stop the periodic call, in case of exceptions or Timeout.'
nl|'\n'
indent|'            '
name|'periodic_call'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|resume_state_on_host_boot
dedent|''
name|'def'
name|'resume_state_on_host_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume guest state when a host is booted."""'
newline|'\n'
name|'self'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|log_vm_serial_output
dedent|''
name|'def'
name|'log_vm_serial_output'
op|'('
name|'self'
op|','
name|'instance_name'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
comment|"# Uses a 'thread' that will run in background, reading"
nl|'\n'
comment|'# the console output from the according named pipe and'
nl|'\n'
comment|'# write it to a file.'
nl|'\n'
indent|'        '
name|'console_log_path'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'('
nl|'\n'
name|'instance_name'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'pipe_path'
op|'='
string|"r'\\\\.\\pipe\\%s'"
op|'%'
name|'instance_uuid'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'pipe_path'
op|')'
newline|'\n'
DECL|function|log_serial_output
name|'def'
name|'log_serial_output'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vm_log_writer'
op|'='
name|'self'
op|'.'
name|'_vm_log_writers'
op|'.'
name|'get'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'vm_log_writer'
name|'and'
name|'vm_log_writer'
op|'.'
name|'is_active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance %s log writer is already running."'
op|','
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'vm_log_writer'
op|'='
name|'ioutils'
op|'.'
name|'IOThread'
op|'('
nl|'\n'
name|'pipe_path'
op|','
name|'console_log_path'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_MAX_CONSOLE_LOG_FILE_SIZE'
op|')'
newline|'\n'
name|'vm_log_writer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vm_log_writers'
op|'['
name|'instance_uuid'
op|']'
op|'='
name|'vm_log_writer'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'log_serial_output'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'console_log_paths'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance_log'
op|'='
string|"''"
newline|'\n'
comment|'# Start with the oldest console log file.'
nl|'\n'
name|'for'
name|'console_log_path'
name|'in'
name|'console_log_paths'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'console_log_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'open'
op|'('
name|'console_log_path'
op|','
string|"'rb'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                        '
name|'instance_log'
op|'+='
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'instance_log'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Could not get instance console log. Error: %s"'
op|')'
op|'%'
name|'err'
newline|'\n'
name|'raise'
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_vm_console_log
dedent|''
dedent|''
name|'def'
name|'_delete_vm_console_log'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'console_log_files'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'vm_log_writer'
op|'='
name|'self'
op|'.'
name|'_vm_log_writers'
op|'.'
name|'get'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'if'
name|'vm_log_writer'
op|':'
newline|'\n'
indent|'            '
name|'vm_log_writer'
op|'.'
name|'join'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'log_file'
name|'in'
name|'console_log_files'
op|':'
newline|'\n'
indent|'            '
name|'fileutils'
op|'.'
name|'delete_if_exists'
op|'('
name|'log_file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy_vm_console_logs
dedent|''
dedent|''
name|'def'
name|'copy_vm_console_logs'
op|'('
name|'self'
op|','
name|'vm_name'
op|','
name|'dest_host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'local_log_paths'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'('
nl|'\n'
name|'vm_name'
op|')'
newline|'\n'
name|'remote_log_paths'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'('
nl|'\n'
name|'vm_name'
op|','
name|'remote_server'
op|'='
name|'dest_host'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'local_log_path'
op|','
name|'remote_log_path'
name|'in'
name|'zip'
op|'('
name|'local_log_paths'
op|','
nl|'\n'
name|'remote_log_paths'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'exists'
op|'('
name|'local_log_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'copy'
op|'('
name|'local_log_path'
op|','
nl|'\n'
name|'remote_log_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vm_com_port_pipe
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_vm_com_port_pipe'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'# Creates a pipe to the COM 0 serial port of the specified vm.'
nl|'\n'
indent|'        '
name|'pipe_path'
op|'='
string|"r'\\\\.\\pipe\\%s'"
op|'%'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_serial_port_connection'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'update_connection'
op|'='
name|'pipe_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|restart_vm_log_writers
dedent|''
name|'def'
name|'restart_vm_log_writers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Restart the VM console log writers after nova compute restarts.'
nl|'\n'
indent|'        '
name|'active_instances'
op|'='
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'get_active_instances'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance_name'
name|'in'
name|'active_instances'
op|':'
newline|'\n'
indent|'            '
name|'instance_path'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Skip instances that are not created by Nova'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'instance_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_serial_conn'
op|'='
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_serial_port_connection'
op|'('
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
name|'if'
name|'vm_serial_conn'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'vm_serial_conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'log_vm_serial_output'
op|'('
name|'instance_name'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy_vm_dvd_disks
dedent|''
dedent|''
dedent|''
name|'def'
name|'copy_vm_dvd_disks'
op|'('
name|'self'
op|','
name|'vm_name'
op|','
name|'dest_host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dvd_disk_paths'
op|'='
name|'self'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_dvd_disk_paths'
op|'('
name|'vm_name'
op|')'
newline|'\n'
name|'dest_path'
op|'='
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'('
nl|'\n'
name|'vm_name'
op|','
name|'remote_server'
op|'='
name|'dest_host'
op|')'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'dvd_disk_paths'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pathutils'
op|'.'
name|'copyfile'
op|'('
name|'path'
op|','
name|'dest_path'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|virt_cpu_opts
name|'virt_cpu_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vcpu_pin_set'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Defines which pcpus that instance vcpus can use. '"
nl|'\n'
string|'\'For example, "4-12,^8,15"\''
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'virt_cpu_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cpuset_ids
name|'def'
name|'get_cpuset_ids'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parsing vcpu_pin_set config.\n\n    Returns a list of pcpu ids can be used by instances.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'vcpu_pin_set'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'cpuset_ids'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'cpuset_reject_ids'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'CONF'
op|'.'
name|'vcpu_pin_set'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rule'
op|'='
name|'rule'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
comment|"# Handle multi ','"
nl|'\n'
name|'if'
name|'len'
op|'('
name|'rule'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
comment|'# Note the count limit in the .split() call'
nl|'\n'
dedent|''
name|'range_parts'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"'-'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'range_parts'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
comment|'# So, this was a range; start by converting the parts to ints'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'start'
op|','
name|'end'
op|'='
op|'['
name|'int'
op|'('
name|'p'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
name|'for'
name|'p'
name|'in'
name|'range_parts'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid range expression %r"'
op|')'
nl|'\n'
op|'%'
name|'rule'
op|')'
newline|'\n'
comment|"# Make sure it's a valid range"
nl|'\n'
dedent|''
name|'if'
name|'start'
op|'>'
name|'end'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid range expression %r"'
op|')'
nl|'\n'
op|'%'
name|'rule'
op|')'
newline|'\n'
comment|'# Add available pcpu ids to set'
nl|'\n'
dedent|''
name|'cpuset_ids'
op|'|='
name|'set'
op|'('
name|'range'
op|'('
name|'start'
op|','
name|'end'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'rule'
op|'['
number|'0'
op|']'
op|'=='
string|"'^'"
op|':'
newline|'\n'
comment|'# Not a range, the rule is an exclusion rule; convert to int'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cpuset_reject_ids'
op|'.'
name|'add'
op|'('
name|'int'
op|'('
name|'rule'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid exclusion "'
nl|'\n'
string|'"expression %r"'
op|')'
op|'%'
name|'rule'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# OK, a single PCPU to include; convert to int'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cpuset_ids'
op|'.'
name|'add'
op|'('
name|'int'
op|'('
name|'rule'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"Invalid inclusion "'
nl|'\n'
string|'"expression %r"'
op|')'
op|'%'
name|'rule'
op|')'
newline|'\n'
comment|'# Use sets to handle the exclusion rules for us'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'cpuset_ids'
op|'-='
name|'cpuset_reject_ids'
newline|'\n'
name|'if'
name|'not'
name|'cpuset_ids'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_'
op|'('
string|'"No CPUs available after parsing %r"'
op|')'
op|'%'
nl|'\n'
name|'CONF'
op|'.'
name|'vcpu_pin_set'
op|')'
newline|'\n'
comment|'# This will convert the set to a sorted list for us'
nl|'\n'
dedent|''
name|'return'
name|'sorted'
op|'('
name|'cpuset_ids'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

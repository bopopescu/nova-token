begin_unit
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2012 VMware, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA connection to the VMware vCenter platform.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'event'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'suds'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LC'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'loopingcall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'error_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'host'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vmops'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'volumeops'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|vmwareapi_opts
name|'vmwareapi_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'host_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Hostname or IP address for connection to VMware VC '"
nl|'\n'
string|"'host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'host_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'443'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Port for connection to VMware VC host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'host_username'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Username for connection to VMware VC host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'host_password'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Password for connection to VMware VC host.'"
op|','
nl|'\n'
DECL|variable|secret
name|'secret'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'cluster_name'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of a VMware Cluster ComputeResource.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'datastore_regex'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Regex to match the name of a datastore.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'task_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0.5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The interval used for polling of remote tasks.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'api_retry_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The number of times we retry on failures, e.g., '"
nl|'\n'
string|"'socket error, etc.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vnc_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5900'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'VNC starting port'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vnc_port_total'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10000'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Total number of VNC ports'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_linked_clone'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to use linked clone'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'vmwareapi_opts'
op|','
string|"'vmware'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TIME_BETWEEN_API_CALL_RETRIES
name|'TIME_BETWEEN_API_CALL_RETRIES'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The following class was removed in the transition from Icehouse to'
nl|'\n'
comment|'# Juno, but may still be referenced in configuration files.  The'
nl|'\n'
comment|'# following stub allow those configurations to work while logging a'
nl|'\n'
comment|'# deprecation warning.'
nl|'\n'
DECL|class|VMwareESXDriver
name|'class'
name|'VMwareESXDriver'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The ESX host connection object."""'
newline|'\n'
nl|'\n'
DECL|member|_do_deprecation_warning
name|'def'
name|'_do_deprecation_warning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'The VMware ESX driver is now deprecated and has been '"
nl|'\n'
string|"'removed in the Juno release. The VC driver will remain '"
nl|'\n'
string|"'and continue to be supported.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'virtapi'
op|','
name|'read_only'
op|'='
name|'False'
op|','
name|'scheme'
op|'='
string|'"https"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_do_deprecation_warning'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareVCDriver
dedent|''
dedent|''
name|'class'
name|'VMwareVCDriver'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The VC host connection object."""'
newline|'\n'
nl|'\n'
DECL|variable|capabilities
name|'capabilities'
op|'='
op|'{'
nl|'\n'
string|'"has_imagecache"'
op|':'
name|'True'
op|','
nl|'\n'
string|'"supports_recreate"'
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# The vCenter driver includes API that acts on ESX hosts or groups'
nl|'\n'
comment|'# of ESX hosts in clusters or non-cluster logical-groupings.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# vCenter is not a hypervisor itself, it works with multiple'
nl|'\n'
comment|'# hypervisor host machines and their guests. This fact can'
nl|'\n'
comment|'# subtly alter how vSphere and OpenStack interoperate.'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'virtapi'
op|','
name|'scheme'
op|'='
string|'"https"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMwareVCDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'virtapi'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'re'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
nl|'\n'
name|'_'
op|'('
string|'"Invalid Regular Expression %s"'
op|')'
nl|'\n'
op|'%'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_session'
op|'='
name|'VMwareAPISession'
op|'('
name|'scheme'
op|'='
name|'scheme'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(hartsocks): back-off into a configuration test module.'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'use_linked_clone'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error_util'
op|'.'
name|'UseLinkedCloneConfigurationFault'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the list of clusters to be used'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_cluster_names'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'cluster_name'
newline|'\n'
name|'self'
op|'.'
name|'dict_mors'
op|'='
name|'vm_util'
op|'.'
name|'get_all_cluster_refs_by_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster_names'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'dict_mors'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"All clusters specified %s were not"'
nl|'\n'
string|'" found in the vCenter"'
op|')'
nl|'\n'
op|'%'
name|'self'
op|'.'
name|'_cluster_names'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if there are any clusters that were specified in the nova.conf'
nl|'\n'
comment|'# but are not in the vCenter, for missing clusters log a warning.'
nl|'\n'
dedent|''
name|'clusters_found'
op|'='
op|'['
name|'v'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'missing_clusters'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'_cluster_names'
op|')'
op|'-'
name|'set'
op|'('
name|'clusters_found'
op|')'
newline|'\n'
name|'if'
name|'missing_clusters'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"The following clusters could not be found in the "'
nl|'\n'
string|'"vCenter %s"'
op|')'
op|'%'
name|'list'
op|'('
name|'missing_clusters'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The _resources is used to maintain the vmops, volumeops and vcstate'
nl|'\n'
comment|'# objects per cluster'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_resources'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_resource_keys'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'='
name|'virtapi'
newline|'\n'
name|'self'
op|'.'
name|'_update_resources'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# The following initialization is necessary since the base class does'
nl|'\n'
comment|'# not use VC state.'
nl|'\n'
name|'first_cluster'
op|'='
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'get'
op|'('
name|'first_cluster'
op|')'
op|'.'
name|'get'
op|'('
string|"'vmops'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'get'
op|'('
name|'first_cluster'
op|')'
op|'.'
name|'get'
op|'('
string|"'volumeops'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vc_state'
op|'='
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'get'
op|'('
name|'first_cluster'
op|')'
op|'.'
name|'get'
op|'('
string|"'vcstate'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vim'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
newline|'\n'
name|'if'
name|'vim'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_create_session'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup_host
dedent|''
dedent|''
name|'def'
name|'cleanup_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(hartsocks): we lean on the init_host to force the vim object'
nl|'\n'
comment|'# to not be None.'
nl|'\n'
indent|'        '
name|'vim'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
newline|'\n'
name|'service_content'
op|'='
name|'vim'
op|'.'
name|'get_service_content'
op|'('
op|')'
newline|'\n'
name|'session_manager'
op|'='
name|'service_content'
op|'.'
name|'sessionManager'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vim'
op|'.'
name|'client'
op|'.'
name|'service'
op|'.'
name|'Logout'
op|'('
name|'session_manager'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'suds'
op|'.'
name|'WebFault'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"No vSphere session was open during cleanup_host."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup
dedent|''
dedent|''
name|'def'
name|'cleanup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|','
name|'destroy_vifs'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup after instance being destroyed by Hypervisor."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|resume_state_on_host_boot
dedent|''
name|'def'
name|'resume_state_on_host_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""resume guest state when a host is booted."""'
newline|'\n'
comment|'# Check if the instance is running already and avoid doing'
nl|'\n'
comment|'# anything if it is.'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'not'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'Instance cannot be found in host, or in an unknown'"
nl|'\n'
string|"'state.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_state_from_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'ignored_states'
op|'='
op|'['
string|"'poweredon'"
op|','
string|"'suspended'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'state'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'ignored_states'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
comment|'# Instance is not up and could be in an unknown state.'
nl|'\n'
comment|'# Be as absolute as possible about getting it back into'
nl|'\n'
comment|'# a known and running state.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
string|"'hard'"
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instance_uuids
dedent|''
name|'def'
name|'list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instance UUIDs."""'
newline|'\n'
name|'uuids'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'return'
op|'['
name|'uuid'
name|'for'
name|'uuid'
name|'in'
name|'uuids'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'uuid'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances from all nodes."""'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'nodes'
op|'='
name|'self'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'node'
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'extend'
op|'('
name|'vmops'
op|'.'
name|'list_instances'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transfers the disk of a running instance in multiple phases, turning\n        off the instance before the end.\n        """'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_vmops'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a resize, destroying the source VM."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'confirm_migration'
op|'('
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finish reverting a resize, powering back on the instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'finish_revert_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes a resize, turning on the migrated instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'finish_migration'
op|'('
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Live migration of an instance to another host."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration_at_destination
dedent|''
name|'def'
name|'rollback_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clean up destination node after a failed live migration."""'
newline|'\n'
name|'self'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return link to instance\'s VNC console using vCenter logic."""'
newline|'\n'
comment|'# vCenter does not actually run the VNC service'
nl|'\n'
comment|'# itself. You must talk to the VNC host underneath vCenter.'
nl|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_vmops'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_resources
dedent|''
name|'def'
name|'_update_resources'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This method creates a dictionary of VMOps, VolumeOps and VCState.\n\n        The VMwareVMOps, VMwareVolumeOps and VCState object is for each\n        cluster/rp. The dictionary is of the form\n        {\n            domain-1000 : {\'vmops\': vmops_obj,\n                          \'volumeops\': volumeops_obj,\n                          \'vcstate\': vcstate_obj,\n                          \'name\': MyCluster},\n            resgroup-1000 : {\'vmops\': vmops_obj,\n                              \'volumeops\': volumeops_obj,\n                              \'vcstate\': vcstate_obj,\n                              \'name\': MyRP},\n        }\n        """'
newline|'\n'
name|'added_nodes'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'-'
name|'set'
op|'('
name|'self'
op|'.'
name|'_resource_keys'
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'added_nodes'
op|':'
newline|'\n'
indent|'            '
name|'_volumeops'
op|'='
name|'volumeops'
op|'.'
name|'VMwareVolumeOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dict_mors'
op|'['
name|'node'
op|']'
op|'['
string|"'cluster_mor'"
op|']'
op|','
nl|'\n'
name|'vc_support'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_vmops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVCVMOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_virtapi'
op|','
nl|'\n'
name|'_volumeops'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dict_mors'
op|'['
name|'node'
op|']'
op|'['
string|"'cluster_mor'"
op|']'
op|','
nl|'\n'
name|'datastore_regex'
op|'='
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
newline|'\n'
name|'name'
op|'='
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'get'
op|'('
name|'node'
op|')'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'nodename'
op|'='
name|'self'
op|'.'
name|'_create_nodename'
op|'('
name|'node'
op|','
name|'name'
op|')'
newline|'\n'
name|'_vc_state'
op|'='
name|'host'
op|'.'
name|'VCState'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'nodename'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'get'
op|'('
name|'node'
op|')'
op|'['
string|"'cluster_mor'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_resources'
op|'['
name|'nodename'
op|']'
op|'='
op|'{'
string|"'vmops'"
op|':'
name|'_vmops'
op|','
nl|'\n'
string|"'volumeops'"
op|':'
name|'_volumeops'
op|','
nl|'\n'
string|"'vcstate'"
op|':'
name|'_vc_state'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_resource_keys'
op|'.'
name|'add'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'deleted_nodes'
op|'='
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'_resource_keys'
op|')'
op|'-'
nl|'\n'
name|'set'
op|'('
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'deleted_nodes'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'get'
op|'('
name|'node'
op|')'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'nodename'
op|'='
name|'self'
op|'.'
name|'_create_nodename'
op|'('
name|'node'
op|','
name|'name'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_resources'
op|'['
name|'nodename'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_resource_keys'
op|'.'
name|'discard'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_nodename
dedent|''
dedent|''
name|'def'
name|'_create_nodename'
op|'('
name|'self'
op|','
name|'mo_id'
op|','
name|'display_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates the name that is stored in hypervisor_hostname column.\n\n        The name will be of the form similar to\n        domain-1000(MyCluster)\n        resgroup-1000(MyResourcePool)\n        """'
newline|'\n'
name|'return'
name|'mo_id'
op|'+'
string|"'('"
op|'+'
name|'display_name'
op|'+'
string|"')'"
newline|'\n'
nl|'\n'
DECL|member|_get_resource_for_node
dedent|''
name|'def'
name|'_get_resource_for_node'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets the resource information for the specific node."""'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'get'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'resource'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"The resource %s does not exist"'
op|')'
op|'%'
name|'nodename'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resource'
newline|'\n'
nl|'\n'
DECL|member|_get_vmops_for_compute_node
dedent|''
name|'def'
name|'_get_vmops_for_compute_node'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve vmops object from mo_id stored in the node name.\n\n        Node name is of the form domain-1000(MyCluster)\n        """'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'_get_resource_for_node'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'return'
name|'resource'
op|'['
string|"'vmops'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_volumeops_for_compute_node
dedent|''
name|'def'
name|'_get_volumeops_for_compute_node'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve vmops object from mo_id stored in the node name.\n\n        Node name is of the form domain-1000(MyCluster)\n        """'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'_get_resource_for_node'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'return'
name|'resource'
op|'['
string|"'volumeops'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_vc_state_for_compute_node
dedent|''
name|'def'
name|'_get_vc_state_for_compute_node'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve VCState object from mo_id stored in the node name.\n\n        Node name is of the form domain-1000(MyCluster)\n        """'
newline|'\n'
name|'resource'
op|'='
name|'self'
op|'.'
name|'_get_resource_for_node'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'return'
name|'resource'
op|'['
string|"'vcstate'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_available_resources
dedent|''
name|'def'
name|'_get_available_resources'
op|'('
name|'self'
op|','
name|'host_stats'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'vcpus'"
op|':'
name|'host_stats'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'host_stats'
op|'['
string|"'host_memory_total'"
op|']'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'host_stats'
op|'['
string|"'disk_total'"
op|']'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'host_stats'
op|'['
string|"'host_memory_total'"
op|']'
op|'-'
nl|'\n'
name|'host_stats'
op|'['
string|"'host_memory_free'"
op|']'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'host_stats'
op|'['
string|"'disk_used'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'host_stats'
op|'['
string|"'hypervisor_type'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'host_stats'
op|'['
string|"'hypervisor_version'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_hostname'"
op|':'
name|'host_stats'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'host_stats'
op|'['
string|"'cpu_info'"
op|']'
op|')'
op|','
nl|'\n'
string|"'supported_instances'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
nl|'\n'
name|'host_stats'
op|'['
string|"'supported_instances'"
op|']'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_available_resource
dedent|''
name|'def'
name|'get_available_resource'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve resource info.\n\n        This method is called when nova-compute launches, and\n        as part of a periodic task.\n\n        :returns: dictionary describing resources\n\n        """'
newline|'\n'
name|'stats_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vc_state'
op|'='
name|'self'
op|'.'
name|'_get_vc_state_for_compute_node'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'if'
name|'vc_state'
op|':'
newline|'\n'
indent|'            '
name|'host_stats'
op|'='
name|'vc_state'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Updating host information'
nl|'\n'
name|'stats_dict'
op|'='
name|'self'
op|'.'
name|'_get_available_resources'
op|'('
name|'host_stats'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Invalid cluster or resource pool"'
nl|'\n'
string|'" name : %s"'
op|')'
op|'%'
name|'nodename'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'stats_dict'
newline|'\n'
nl|'\n'
DECL|member|get_available_nodes
dedent|''
name|'def'
name|'get_available_nodes'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns nodenames of all nodes managed by the compute service.\n\n        This method is for multi compute-nodes support. If a driver supports\n        multi compute-nodes, this method returns a list of nodenames managed\n        by the service. Otherwise, this method should return\n        [hypervisor_hostname].\n        """'
newline|'\n'
name|'self'
op|'.'
name|'dict_mors'
op|'='
name|'vm_util'
op|'.'
name|'get_all_cluster_refs_by_name'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'cluster_name'
op|')'
newline|'\n'
name|'node_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_update_resources'
op|'('
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nodename'
op|'='
name|'self'
op|'.'
name|'_create_nodename'
op|'('
name|'node'
op|','
nl|'\n'
name|'self'
op|'.'
name|'dict_mors'
op|'.'
name|'get'
op|'('
name|'node'
op|')'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'node_list'
op|'.'
name|'append'
op|'('
name|'nodename'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"The available nodes are: %s"'
op|','
name|'node_list'
op|')'
newline|'\n'
name|'return'
name|'node_list'
newline|'\n'
nl|'\n'
DECL|member|get_host_stats
dedent|''
name|'def'
name|'get_host_stats'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return currently known host stats."""'
newline|'\n'
name|'stats_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'nodes'
op|'='
name|'self'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'stats_list'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'get_available_resource'
op|'('
name|'node'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'stats_list'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'connection_info'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'disk_bus'
op|'='
name|'None'
op|','
name|'device_type'
op|'='
name|'None'
op|','
name|'encryption'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach volume storage to VM instance."""'
newline|'\n'
name|'_volumeops'
op|'='
name|'self'
op|'.'
name|'_get_volumeops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_volumeops'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'encryption'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach volume storage to VM instance."""'
newline|'\n'
name|'_volumeops'
op|'='
name|'self'
op|'.'
name|'_get_volumeops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_volumeops'
op|'.'
name|'detach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_volume_connector
dedent|''
name|'def'
name|'get_volume_connector'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return volume connector information."""'
newline|'\n'
name|'_volumeops'
op|'='
name|'self'
op|'.'
name|'_get_volumeops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_volumeops'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VM instance."""'
newline|'\n'
nl|'\n'
comment|'# Destroy gets triggered when Resource Claim in resource_tracker'
nl|'\n'
comment|'# is not successful. When resource claim is not successful,'
nl|'\n'
comment|'# node is not set in instance. Perform destroy only if node is set'
nl|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'node'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'destroy_disks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'pause'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause paused VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'unpause'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'suspend'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the suspended VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'resume'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'unrescue'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on the specified instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll for rebooting instances."""'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'poll_rebooting_instances'
op|'('
name|'timeout'
op|','
op|'['
name|'instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return info about the VM instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_vmops'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
name|'_vmops'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
name|'_vmops'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host operations not supported by VC driver.\n\n        This needs to override the ESX driver implementation.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_maintenance_mode
dedent|''
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host operations not supported by VC driver.\n\n        This needs to override the ESX driver implementation.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host operations not supported by VC driver.\n\n        This needs to override the ESX driver implementation.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_host_uptime
dedent|''
name|'def'
name|'get_host_uptime'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host uptime operation not supported by VC driver."""'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Multiple hosts may be managed by the VMWare "'
nl|'\n'
string|'"vCenter driver; therefore we do not return "'
nl|'\n'
string|'"uptime for just one host."'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'nw_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""inject network info for specified instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|manage_image_cache
dedent|''
name|'def'
name|'manage_image_cache'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'all_instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Manage the local cache of images."""'
newline|'\n'
nl|'\n'
comment|'# Running instances per cluster'
nl|'\n'
name|'cluster_instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'all_instances'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'cluster_instances'
op|'.'
name|'get'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'='
op|'['
name|'instance'
op|']'
newline|'\n'
dedent|''
name|'cluster_instances'
op|'['
name|'instance'
op|'['
string|"'node'"
op|']'
op|']'
op|'='
name|'instances'
newline|'\n'
nl|'\n'
comment|'# Invoke the image aging per cluster'
nl|'\n'
dedent|''
name|'for'
name|'resource'
name|'in'
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'cluster_instances'
op|'.'
name|'get'
op|'('
name|'resource'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'resource'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'manage_image_cache'
op|'('
name|'context'
op|','
name|'instances'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Efficient override of base instance_exists method."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'_vmops'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_interface
dedent|''
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an interface to the instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'attach_interface'
op|'('
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_interface
dedent|''
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach an interface from the instance."""'
newline|'\n'
name|'_vmops'
op|'='
name|'self'
op|'.'
name|'_get_vmops_for_compute_node'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
newline|'\n'
name|'_vmops'
op|'.'
name|'detach_interface'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareAPISession
dedent|''
dedent|''
name|'class'
name|'VMwareAPISession'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up a session with the VC host and handles all\n    the calls made to the host.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host_ip'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_ip'
op|','
nl|'\n'
name|'host_port'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_port'
op|','
nl|'\n'
name|'username'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_username'
op|','
nl|'\n'
name|'password'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_password'
op|','
nl|'\n'
name|'retry_count'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'api_retry_count'
op|','
nl|'\n'
name|'scheme'
op|'='
string|'"https"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_host_ip'
op|'='
name|'host_ip'
newline|'\n'
name|'self'
op|'.'
name|'_host_port'
op|'='
name|'host_port'
newline|'\n'
name|'self'
op|'.'
name|'_host_username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'_host_password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'_api_retry_count'
op|'='
name|'retry_count'
newline|'\n'
name|'self'
op|'.'
name|'_scheme'
op|'='
name|'scheme'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'vim'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_create_session'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vim_object
dedent|''
name|'def'
name|'_get_vim_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create the VIM Object instance."""'
newline|'\n'
name|'return'
name|'vim'
op|'.'
name|'Vim'
op|'('
name|'protocol'
op|'='
name|'self'
op|'.'
name|'_scheme'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'_host_ip'
op|','
nl|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'_host_port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_session
dedent|''
name|'def'
name|'_create_session'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a session with the VC host."""'
newline|'\n'
nl|'\n'
name|'delay'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# Login and setup the session with the host for making'
nl|'\n'
comment|'# API calls'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'vim'
op|'='
name|'self'
op|'.'
name|'_get_vim_object'
op|'('
op|')'
newline|'\n'
name|'session'
op|'='
name|'self'
op|'.'
name|'vim'
op|'.'
name|'Login'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'vim'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'sessionManager'
op|','
nl|'\n'
name|'userName'
op|'='
name|'self'
op|'.'
name|'_host_username'
op|','
nl|'\n'
name|'password'
op|'='
name|'self'
op|'.'
name|'_host_password'
op|')'
newline|'\n'
comment|'# Terminate the earlier session, if possible ( For the sake of'
nl|'\n'
comment|'# preserving sessions as there is a limit to the number of'
nl|'\n'
comment|'# sessions we can have )'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_session'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'vim'
op|'.'
name|'TerminateSession'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'vim'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'sessionManager'
op|','
nl|'\n'
name|'sessionId'
op|'='
op|'['
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# This exception is something we can live with. It is'
nl|'\n'
comment|'# just an extra caution on our side. The session may'
nl|'\n'
comment|'# have been cleared. We could have made a call to'
nl|'\n'
comment|'# SessionIsActive, but that is an overhead because we'
nl|'\n'
comment|'# anyway would have to call TerminateSession.'
nl|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"TerminateSession failed"'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'critical'
op|'('
name|'_LC'
op|'('
string|'"Unable to connect to server at %(server)s, "'
nl|'\n'
string|'"sleeping for %(seconds)s seconds"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'server'"
op|':'
name|'self'
op|'.'
name|'_host_ip'
op|','
string|"'seconds'"
op|':'
name|'delay'
op|'}'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# exc_info logs the exception with the message'
nl|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
name|'delay'
op|')'
newline|'\n'
name|'delay'
op|'='
name|'min'
op|'('
number|'2'
op|'*'
name|'delay'
op|','
number|'60'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_vim_object
dedent|''
dedent|''
dedent|''
name|'def'
name|'_is_vim_object'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if the module is a VIM Object instance."""'
newline|'\n'
name|'return'
name|'isinstance'
op|'('
name|'module'
op|','
name|'vim'
op|'.'
name|'Vim'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_session_is_active
dedent|''
name|'def'
name|'_session_is_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'active'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'active'
op|'='
name|'self'
op|'.'
name|'vim'
op|'.'
name|'SessionIsActive'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'vim'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'sessionManager'
op|','
nl|'\n'
name|'sessionID'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|','
nl|'\n'
name|'userName'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'userName'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Unable to validate session %s!"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unable to validate session %s"'
op|','
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'active'
newline|'\n'
nl|'\n'
DECL|member|_call_method
dedent|''
name|'def'
name|'_call_method'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls a method within the module specified with\n        args provided.\n        """'
newline|'\n'
name|'args'
op|'='
name|'list'
op|'('
name|'args'
op|')'
newline|'\n'
name|'retry_count'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_is_vim_object'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
comment|'# If it is not the first try, then get the latest'
nl|'\n'
comment|'# vim object'
nl|'\n'
indent|'                    '
name|'if'
name|'retry_count'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'='
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'args'
op|'='
op|'['
name|'self'
op|'.'
name|'vim'
op|']'
op|'+'
name|'args'
newline|'\n'
dedent|''
name|'retry_count'
op|'+='
number|'1'
newline|'\n'
name|'temp_module'
op|'='
name|'module'
newline|'\n'
nl|'\n'
name|'for'
name|'method_elem'
name|'in'
name|'method'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'temp_module'
op|'='
name|'getattr'
op|'('
name|'temp_module'
op|','
name|'method_elem'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'temp_module'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error_util'
op|'.'
name|'VimFaultException'
name|'as'
name|'excep'
op|':'
newline|'\n'
comment|'# If it is a Session Fault Exception, it may point'
nl|'\n'
comment|'# to a session gone bad. So we try re-creating a session'
nl|'\n'
comment|'# and then proceeding ahead with the call.'
nl|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'error_util'
op|'.'
name|'NOT_AUTHENTICATED'
name|'in'
name|'excep'
op|'.'
name|'fault_list'
op|':'
newline|'\n'
comment|'# Because of the idle session returning an empty'
nl|'\n'
comment|'# RetrievePropertiesResponse and also the same is returned'
nl|'\n'
comment|'# when there is say empty answer to the query for'
nl|'\n'
comment|'# VMs on the host ( as in no VMs on the host), we have no'
nl|'\n'
comment|'# way to differentiate. We thus check if the session is'
nl|'\n'
comment|'# active'
nl|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'_session_is_active'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Session %s is inactive!"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_session'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# No re-trying for errors for API call has gone through'
nl|'\n'
comment|"# and is the caller's fault. Caller should handle these"
nl|'\n'
comment|'# errors. e.g, InvalidArgument fault.'
nl|'\n'
comment|'# Raise specific exceptions here if possible'
nl|'\n'
indent|'                    '
name|'if'
name|'excep'
op|'.'
name|'fault_list'
op|':'
newline|'\n'
indent|'                        '
name|'fault'
op|'='
name|'excep'
op|'.'
name|'fault_list'
op|'['
number|'0'
op|']'
newline|'\n'
name|'raise'
name|'error_util'
op|'.'
name|'get_fault_class'
op|'('
name|'fault'
op|')'
op|'('
name|'str'
op|'('
name|'excep'
op|')'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'error_util'
op|'.'
name|'SessionOverLoadException'
op|':'
newline|'\n'
comment|'# For exceptions which may come because of session overload,'
nl|'\n'
comment|'# we retry'
nl|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error_util'
op|'.'
name|'SessionConnectionException'
op|':'
newline|'\n'
comment|'# For exceptions with connections we create the session'
nl|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_session'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# If it is a proper exception, say not having furnished'
nl|'\n'
comment|'# proper data in the SOAP call or the retry limit having'
nl|'\n'
comment|'# exceeded, we raise the exception'
nl|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"_call_method(session=%(key)s) failed. "'
nl|'\n'
string|'"Module: %(module)s. "'
nl|'\n'
string|'"Method: %(method)s. "'
nl|'\n'
string|'"args: %(args)s. "'
nl|'\n'
string|'"kwargs: %(kwargs)s. "'
nl|'\n'
string|'"Iteration: %(n)s. "'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|','
nl|'\n'
string|"'module'"
op|':'
name|'module'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'method'
op|','
nl|'\n'
string|"'args'"
op|':'
name|'args'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
name|'kwargs'
op|','
nl|'\n'
string|"'n'"
op|':'
name|'retry_count'
op|'}'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# If retry count has been reached then break and'
nl|'\n'
comment|'# raise the exception'
nl|'\n'
name|'if'
name|'retry_count'
op|'>'
name|'self'
op|'.'
name|'_api_retry_count'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
name|'TIME_BETWEEN_API_CALL_RETRIES'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'critical'
op|'('
name|'_LC'
op|'('
string|'"In vmwareapi: _call_method (session=%s)"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'key'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_get_vim
dedent|''
name|'def'
name|'_get_vim'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets the VIM object reference."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'vim'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_session'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'vim'
newline|'\n'
nl|'\n'
DECL|member|_stop_loop
dedent|''
name|'def'
name|'_stop_loop'
op|'('
name|'self'
op|','
name|'loop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'loop'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_task
dedent|''
name|'def'
name|'_wait_for_task'
op|'('
name|'self'
op|','
name|'task_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a Deferred that will give the result of the given task.\n        The task is polled until it completes.\n        """'
newline|'\n'
name|'done'
op|'='
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'loop'
op|'='
name|'loopingcall'
op|'.'
name|'FixedIntervalLoopingCall'
op|'('
name|'self'
op|'.'
name|'_poll_task'
op|','
nl|'\n'
name|'task_ref'
op|','
name|'done'
op|')'
newline|'\n'
name|'loop'
op|'.'
name|'start'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'task_poll_interval'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ret_val'
op|'='
name|'done'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_stop_loop'
op|'('
name|'loop'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ret_val'
newline|'\n'
nl|'\n'
DECL|member|_poll_task
dedent|''
name|'def'
name|'_poll_task'
op|'('
name|'self'
op|','
name|'task_ref'
op|','
name|'done'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll the given task, and fires the given Deferred if we\n        get a result.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'task_info'
op|'='
name|'self'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'task_ref'
op|','
string|'"Task"'
op|','
string|'"info"'
op|')'
newline|'\n'
name|'task_name'
op|'='
name|'task_info'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'task_info'
op|'.'
name|'state'
name|'in'
op|'['
string|"'queued'"
op|','
string|"'running'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'task_info'
op|'.'
name|'state'
op|'=='
string|"'success'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Task [%(task_name)s] %(task_ref)s "'
nl|'\n'
string|'"status: success"'
op|','
nl|'\n'
op|'{'
string|"'task_name'"
op|':'
name|'task_name'
op|','
string|"'task_ref'"
op|':'
name|'task_ref'
op|'}'
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
name|'task_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'error_info'
op|'='
name|'str'
op|'('
name|'task_info'
op|'.'
name|'error'
op|'.'
name|'localizedMessage'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Task [%(task_name)s] %(task_ref)s "'
nl|'\n'
string|'"status: error %(error_info)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'task_name'"
op|':'
name|'task_name'
op|','
string|"'task_ref'"
op|':'
name|'task_ref'
op|','
nl|'\n'
string|"'error_info'"
op|':'
name|'error_info'
op|'}'
op|')'
newline|'\n'
comment|'# Check if we can raise a specific exception'
nl|'\n'
name|'error'
op|'='
name|'task_info'
op|'.'
name|'error'
newline|'\n'
name|'name'
op|'='
name|'error'
op|'.'
name|'fault'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
newline|'\n'
name|'task_ex'
op|'='
name|'error_util'
op|'.'
name|'get_fault_class'
op|'('
name|'name'
op|')'
op|'('
name|'error_info'
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send_exception'
op|'('
name|'task_ex'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"In vmwareapi:_poll_task, Got this error %s"'
op|')'
op|'%'
name|'excep'
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send_exception'
op|'('
name|'excep'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

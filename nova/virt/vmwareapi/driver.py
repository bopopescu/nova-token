begin_unit
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2012 VMware, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA connection to the VMware vCenter platform.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'api'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'exceptions'
name|'as'
name|'vexc'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'pbm'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'vim'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'vim_util'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LI'
op|','
name|'_LE'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'error_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'host'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
name|'as'
name|'nova_vim_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vmops'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'volumeops'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|vmwareapi_opts
name|'vmwareapi_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'host_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Hostname or IP address for connection to VMware '"
nl|'\n'
string|"'vCenter host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'host_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'443'
op|','
nl|'\n'
DECL|variable|min
name|'min'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|max
name|'max'
op|'='
number|'65535'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Port for connection to VMware vCenter host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'host_username'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Username for connection to VMware vCenter host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'host_password'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Password for connection to VMware vCenter host.'"
op|','
nl|'\n'
DECL|variable|secret
name|'secret'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'ca_file'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Specify a CA bundle file to use in verifying the '"
nl|'\n'
string|"'vCenter server certificate.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'insecure'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If true, the vCenter server certificate is not '"
nl|'\n'
string|"'verified. If false, then the default CA truststore is '"
nl|'\n'
string|"'used for verification. This option is ignored if '"
nl|'\n'
string|'\'"ca_file" is set.\''
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'cluster_name'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of a VMware Cluster ComputeResource.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'datastore_regex'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Regex to match the name of a datastore.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'task_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0.5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The interval used for polling of remote tasks.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'api_retry_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The number of times we retry on failures, e.g., '"
nl|'\n'
string|"'socket error, etc.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vnc_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5900'
op|','
nl|'\n'
DECL|variable|min
name|'min'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|max
name|'max'
op|'='
number|'65535'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'VNC starting port'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'vnc_port_total'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10000'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Total number of VNC ports'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_linked_clone'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to use linked clone'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'wsdl_location'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Optional VIM Service WSDL Location '"
nl|'\n'
string|"'e.g http://<server>/vimService.wsdl. '"
nl|'\n'
string|"'Optional over-ride to default location for bug '"
nl|'\n'
string|"'work-arounds'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|spbm_opts
name|'spbm_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'pbm_enabled'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The PBM status.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'pbm_wsdl_location'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'PBM service WSDL file location URL. '"
nl|'\n'
string|"'e.g. file:///opt/SDK/spbm/wsdl/pbmService.wsdl '"
nl|'\n'
string|"'Not setting this will disable storage policy based '"
nl|'\n'
string|"'placement of instances.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'pbm_default_policy'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The PBM default policy. If pbm_wsdl_location is set and '"
nl|'\n'
string|"'there is no defined storage policy for the specific '"
nl|'\n'
string|"'request then this policy will be used.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'vmwareapi_opts'
op|','
string|"'vmware'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'spbm_opts'
op|','
string|"'vmware'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|TIME_BETWEEN_API_CALL_RETRIES
name|'TIME_BETWEEN_API_CALL_RETRIES'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareVCDriver
name|'class'
name|'VMwareVCDriver'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The VC host connection object."""'
newline|'\n'
nl|'\n'
DECL|variable|capabilities
name|'capabilities'
op|'='
op|'{'
nl|'\n'
string|'"has_imagecache"'
op|':'
name|'True'
op|','
nl|'\n'
string|'"supports_recreate"'
op|':'
name|'False'
op|','
nl|'\n'
string|'"supports_migrate_to_same_host"'
op|':'
name|'True'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Legacy nodename is of the form: <mo id>(<cluster name>)'
nl|'\n'
comment|'# e.g. domain-26(TestCluster)'
nl|'\n'
comment|'# We assume <mo id> consists of alphanumeric, _ and -.'
nl|'\n'
comment|'# We assume cluster name is everything between the first ( and the last ).'
nl|'\n'
comment|'# We pull out <mo id> for re-use.'
nl|'\n'
DECL|variable|LEGACY_NODENAME
name|'LEGACY_NODENAME'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'([\\w-]+)\\(.+\\)'"
op|')'
newline|'\n'
nl|'\n'
comment|'# The vCenter driver includes API that acts on ESX hosts or groups'
nl|'\n'
comment|'# of ESX hosts in clusters or non-cluster logical-groupings.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# vCenter is not a hypervisor itself, it works with multiple'
nl|'\n'
comment|'# hypervisor host machines and their guests. This fact can'
nl|'\n'
comment|'# subtly alter how vSphere and OpenStack interoperate.'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'virtapi'
op|','
name|'scheme'
op|'='
string|'"https"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMwareVCDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'virtapi'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_ip'
name|'is'
name|'None'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_username'
name|'is'
name|'None'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_password'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Must specify host_ip, host_username and "'
nl|'\n'
string|'"host_password to use vmwareapi.VMwareVCDriver"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'re'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
nl|'\n'
name|'_'
op|'('
string|'"Invalid Regular Expression %s"'
op|')'
nl|'\n'
op|'%'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_session'
op|'='
name|'VMwareAPISession'
op|'('
name|'scheme'
op|'='
name|'scheme'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_min_version'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Update the PBM location if necessary'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_enabled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_pbm_location'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_validate_configuration'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cluster_name'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'cluster_name'
newline|'\n'
name|'self'
op|'.'
name|'_cluster_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_cluster_ref_by_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster_name'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_cluster_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"The specified cluster \'%s\' was not "'
nl|'\n'
string|'"found in vCenter"'
op|')'
nl|'\n'
op|'%'
name|'self'
op|'.'
name|'_cluster_name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_vcenter_uuid'
op|'='
name|'self'
op|'.'
name|'_get_vcenter_uuid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_nodename'
op|'='
name|'self'
op|'.'
name|'_create_nodename'
op|'('
name|'self'
op|'.'
name|'_cluster_ref'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'volumeops'
op|'.'
name|'VMwareVolumeOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'virtapi'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster_ref'
op|','
nl|'\n'
name|'datastore_regex'
op|'='
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vc_state'
op|'='
name|'host'
op|'.'
name|'VCState'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_nodename'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
newline|'\n'
nl|'\n'
comment|'# Register the OpenStack extension'
nl|'\n'
name|'self'
op|'.'
name|'_register_openstack_extension'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_min_version
dedent|''
name|'def'
name|'_check_min_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'min_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
name|'constants'
op|'.'
name|'MIN_VC_VERSION'
op|')'
newline|'\n'
name|'vc_version'
op|'='
name|'vim_util'
op|'.'
name|'get_vc_version'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"VMware vCenter version: %s"'
op|')'
op|','
name|'vc_version'
op|')'
newline|'\n'
name|'if'
name|'min_version'
op|'>'
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
name|'vc_version'
op|')'
op|':'
newline|'\n'
comment|'# TODO(garyk): enforce this from M'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Running Nova with a VMware vCenter version less '"
nl|'\n'
string|"'than %(version)s is deprecated. The required '"
nl|'\n'
string|"'minimum version of vCenter will be raised to '"
nl|'\n'
string|"'%(version)s in the 13.0.0 release.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'version'"
op|':'
name|'constants'
op|'.'
name|'MIN_VC_VERSION'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|need_legacy_block_device_info
name|'def'
name|'need_legacy_block_device_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_update_pbm_location
dedent|''
name|'def'
name|'_update_pbm_location'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_wsdl_location'
op|':'
newline|'\n'
indent|'            '
name|'pbm_wsdl_loc'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_wsdl_location'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
name|'vim_util'
op|'.'
name|'get_vc_version'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'pbm_wsdl_loc'
op|'='
name|'pbm'
op|'.'
name|'get_pbm_wsdl_location'
op|'('
name|'version'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_session'
op|'.'
name|'pbm_wsdl_loc_set'
op|'('
name|'pbm_wsdl_loc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_configuration
dedent|''
name|'def'
name|'_validate_configuration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_enabled'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_default_policy'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error_util'
op|'.'
name|'PbmDefaultPolicyUnspecified'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'pbm'
op|'.'
name|'get_profile_id_by_name'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_default_policy'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'error_util'
op|'.'
name|'PbmDefaultPolicyDoesNotExist'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'datastore_regex'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
nl|'\n'
string|'"datastore_regex is ignored when PBM is enabled"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vim'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
newline|'\n'
name|'if'
name|'vim'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_create_session'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup_host
dedent|''
dedent|''
name|'def'
name|'cleanup_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'logout'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_register_openstack_extension
dedent|''
name|'def'
name|'_register_openstack_extension'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Register an 'OpenStack' extension in vCenter"
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Registering extension %s with vCenter'"
op|','
nl|'\n'
name|'constants'
op|'.'
name|'EXTENSION_KEY'
op|')'
newline|'\n'
name|'os_extension'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|"'find_extension'"
op|','
nl|'\n'
name|'constants'
op|'.'
name|'EXTENSION_KEY'
op|')'
newline|'\n'
name|'if'
name|'os_extension'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Extension does not exist. Registering type %s.'"
op|','
nl|'\n'
name|'constants'
op|'.'
name|'EXTENSION_TYPE_INSTANCE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|"'register_extension'"
op|','
nl|'\n'
name|'constants'
op|'.'
name|'EXTENSION_KEY'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'EXTENSION_TYPE_INSTANCE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup
dedent|''
dedent|''
name|'def'
name|'cleanup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|','
name|'destroy_vifs'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup after instance being destroyed by Hypervisor."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|resume_state_on_host_boot
dedent|''
name|'def'
name|'resume_state_on_host_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""resume guest state when a host is booted."""'
newline|'\n'
comment|'# Check if the instance is running already and avoid doing'
nl|'\n'
comment|'# anything if it is.'
nl|'\n'
name|'state'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_state'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'ignored_states'
op|'='
op|'['
string|"'poweredon'"
op|','
string|"'suspended'"
op|']'
newline|'\n'
name|'if'
name|'state'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'ignored_states'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
comment|'# Instance is not up and could be in an unknown state.'
nl|'\n'
comment|'# Be as absolute as possible about getting it back into'
nl|'\n'
comment|'# a known and running state.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
string|"'hard'"
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instance_uuids
dedent|''
name|'def'
name|'list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instance UUIDs."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List VM instances from the single compute node."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'timeout'
op|'='
number|'0'
op|','
name|'retry_interval'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transfers the disk of a running instance in multiple phases, turning\n        off the instance before the end.\n        """'
newline|'\n'
comment|'# TODO(PhilDay): Add support for timeout (clean shutdown)'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a resize, destroying the source VM."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'confirm_migration'
op|'('
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finish reverting a resize, powering back on the instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'finish_revert_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes a resize, turning on the migrated instance."""'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'finish_migration'
op|'('
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Live migration of an instance to another host."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration_at_destination
dedent|''
name|'def'
name|'rollback_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clean up destination node after a failed live migration."""'
newline|'\n'
name|'self'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_disk_info
dedent|''
name|'def'
name|'get_instance_disk_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return link to instance\'s VNC console using vCenter logic."""'
newline|'\n'
comment|'# vCenter does not actually run the VNC service'
nl|'\n'
comment|'# itself. You must talk to the VNC host underneath vCenter.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_mks_console
dedent|''
name|'def'
name|'get_mks_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_mks_console'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vcenter_uuid
dedent|''
name|'def'
name|'_get_vcenter_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the vCenter UUID."""'
newline|'\n'
nl|'\n'
name|'about'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'nova_vim_util'
op|','
string|"'get_about_info'"
op|')'
newline|'\n'
name|'return'
name|'about'
op|'.'
name|'instanceUuid'
newline|'\n'
nl|'\n'
DECL|member|_create_nodename
dedent|''
name|'def'
name|'_create_nodename'
op|'('
name|'self'
op|','
name|'mo_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a nodename which uniquely describes a cluster.\n\n        The name will be of the form:\n          <mo id>.<vcenter uuid>\n        e.g.\n          domain-26.9d51f082-58a4-4449-beed-6fd205a5726b\n        """'
newline|'\n'
nl|'\n'
name|'return'
string|"'%s.%s'"
op|'%'
op|'('
name|'mo_id'
op|','
name|'self'
op|'.'
name|'_vcenter_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_available_resources
dedent|''
name|'def'
name|'_get_available_resources'
op|'('
name|'self'
op|','
name|'host_stats'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'vcpus'"
op|':'
name|'host_stats'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'host_stats'
op|'['
string|"'host_memory_total'"
op|']'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'host_stats'
op|'['
string|"'disk_total'"
op|']'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'host_stats'
op|'['
string|"'host_memory_total'"
op|']'
op|'-'
nl|'\n'
name|'host_stats'
op|'['
string|"'host_memory_free'"
op|']'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'host_stats'
op|'['
string|"'disk_used'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
name|'host_stats'
op|'['
string|"'hypervisor_type'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'host_stats'
op|'['
string|"'hypervisor_version'"
op|']'
op|','
nl|'\n'
string|"'hypervisor_hostname'"
op|':'
name|'host_stats'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|','
nl|'\n'
comment|'# The VMWare driver manages multiple hosts, so there are'
nl|'\n'
comment|'# likely many different CPU models in use. As such it is'
nl|'\n'
comment|'# impossible to provide any meaningful info on the CPU'
nl|'\n'
comment|'# model of the "host"'
nl|'\n'
string|"'cpu_info'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'supported_instances'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
nl|'\n'
name|'host_stats'
op|'['
string|"'supported_instances'"
op|']'
op|')'
op|','
nl|'\n'
string|"'numa_topology'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_available_resource
dedent|''
name|'def'
name|'get_available_resource'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve resource info.\n\n        This method is called when nova-compute launches, and\n        as part of a periodic task.\n\n        :returns: dictionary describing resources\n\n        """'
newline|'\n'
name|'host_stats'
op|'='
name|'self'
op|'.'
name|'_vc_state'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
name|'stats_dict'
op|'='
name|'self'
op|'.'
name|'_get_available_resources'
op|'('
name|'host_stats'
op|')'
newline|'\n'
name|'return'
name|'stats_dict'
newline|'\n'
nl|'\n'
DECL|member|get_available_nodes
dedent|''
name|'def'
name|'get_available_nodes'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns nodenames of all nodes managed by the compute service.\n\n        This driver supports only one compute node.\n        """'
newline|'\n'
name|'return'
op|'['
name|'self'
op|'.'
name|'_nodename'
op|']'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create VM instance."""'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'connection_info'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'disk_bus'
op|'='
name|'None'
op|','
name|'device_type'
op|'='
name|'None'
op|','
name|'encryption'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach volume storage to VM instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'encryption'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach volume storage to VM instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_volume'
op|'('
name|'connection_info'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_volume_connector
dedent|''
name|'def'
name|'get_volume_connector'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return volume connector information."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_host_ip_addr
dedent|''
name|'def'
name|'get_host_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the IP address of the vCenter host."""'
newline|'\n'
name|'return'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_ip'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot VM instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_detach_instance_volumes
dedent|''
name|'def'
name|'_detach_instance_volumes'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
comment|'# We need to detach attached volumes'
nl|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'block_device_mapping'
op|':'
newline|'\n'
comment|"# Certain disk types, for example 'IDE' do not support hot"
nl|'\n'
comment|'# plugging. Hence we need to power off the instance and update'
nl|'\n'
comment|'# the instance state.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
comment|'# TODO(garyk): update the volumeops to read the state from the'
nl|'\n'
comment|'# VM instead of relying on an instance flag'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
name|'for'
name|'disk'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'                '
name|'connection_info'
op|'='
name|'disk'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'detach_volume'
op|'('
name|'connection_info'
op|','
name|'instance'
op|','
nl|'\n'
name|'disk'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'StorageError'
op|':'
newline|'\n'
comment|'# The volume does not exist'
nl|'\n'
comment|'# NOTE(garyk): change to warning after string freeze'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'%s does not exist!'"
op|','
name|'disk'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Failed to detach %(device_name)s. "'
nl|'\n'
string|'"Exception: %(exc)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
name|'disk'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|','
nl|'\n'
string|"'exc'"
op|':'
name|'e'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy VM instance."""'
newline|'\n'
nl|'\n'
comment|'# Destroy gets triggered when Resource Claim in resource_tracker'
nl|'\n'
comment|'# is not successful. When resource claim is not successful,'
nl|'\n'
comment|'# node is not set in instance. Perform destroy only if node is set'
nl|'\n'
name|'if'
name|'not'
name|'instance'
op|'.'
name|'node'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# A resize uses the same instance on the VC. We do not delete that'
nl|'\n'
comment|'# VM in the event of a revert'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# We need to detach attached volumes'
nl|'\n'
dedent|''
name|'if'
name|'block_device_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_detach_instance_volumes'
op|'('
name|'instance'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'ManagedObjectNotFoundException'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Instance does not exists. Proceeding to '"
nl|'\n'
string|"'delete instance properties on datastore'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'destroy_disks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause VM instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'pause'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause paused VM instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'unpause'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'suspend'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the suspended VM instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'resume'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance."""'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'unrescue'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'timeout'
op|'='
number|'0'
op|','
name|'retry_interval'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance."""'
newline|'\n'
comment|'# TODO(PhilDay): Add support for timeout (clean shutdown)'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on the specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll for rebooting instances."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'poll_rebooting_instances'
op|'('
name|'timeout'
op|','
name|'instances'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return info about the VM instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host operations not supported by VC driver.\n\n        This needs to override the ESX driver implementation.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_maintenance_mode
dedent|''
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host operations not supported by VC driver.\n\n        This needs to override the ESX driver implementation.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host operations not supported by VC driver.\n\n        This needs to override the ESX driver implementation.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_host_uptime
dedent|''
name|'def'
name|'get_host_uptime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Host uptime operation not supported by VC driver."""'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Multiple hosts may be managed by the VMWare "'
nl|'\n'
string|'"vCenter driver; therefore we do not return "'
nl|'\n'
string|'"uptime for just one host."'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'nw_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""inject network info for specified instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|manage_image_cache
dedent|''
name|'def'
name|'manage_image_cache'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'all_instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Manage the local cache of images."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'manage_image_cache'
op|'('
name|'context'
op|','
name|'all_instances'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Efficient override of base instance_exists method."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_interface
dedent|''
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an interface to the instance."""'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'attach_interface'
op|'('
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_interface
dedent|''
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach an interface from the instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'detach_interface'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareAPISession
dedent|''
dedent|''
name|'class'
name|'VMwareAPISession'
op|'('
name|'api'
op|'.'
name|'VMwareAPISession'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets up a session with the VC/ESX host and handles all\n    the calls made to the host.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host_ip'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_ip'
op|','
nl|'\n'
name|'host_port'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_port'
op|','
nl|'\n'
name|'username'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_username'
op|','
nl|'\n'
name|'password'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'host_password'
op|','
nl|'\n'
name|'retry_count'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'api_retry_count'
op|','
nl|'\n'
name|'scheme'
op|'='
string|'"https"'
op|','
nl|'\n'
name|'cacert'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'ca_file'
op|','
nl|'\n'
name|'insecure'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'insecure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMwareAPISession'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'host'
op|'='
name|'host_ip'
op|','
nl|'\n'
name|'port'
op|'='
name|'host_port'
op|','
nl|'\n'
name|'server_username'
op|'='
name|'username'
op|','
nl|'\n'
name|'server_password'
op|'='
name|'password'
op|','
nl|'\n'
name|'api_retry_count'
op|'='
name|'retry_count'
op|','
nl|'\n'
name|'task_poll_interval'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'task_poll_interval'
op|','
nl|'\n'
name|'scheme'
op|'='
name|'scheme'
op|','
nl|'\n'
name|'create_session'
op|'='
name|'True'
op|','
nl|'\n'
name|'wsdl_loc'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'wsdl_location'
op|','
nl|'\n'
name|'cacert'
op|'='
name|'cacert'
op|','
nl|'\n'
name|'insecure'
op|'='
name|'insecure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_vim_object
dedent|''
name|'def'
name|'_is_vim_object'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if the module is a VIM Object instance."""'
newline|'\n'
name|'return'
name|'isinstance'
op|'('
name|'module'
op|','
name|'vim'
op|'.'
name|'Vim'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_method
dedent|''
name|'def'
name|'_call_method'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls a method within the module specified with\n        args provided.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_is_vim_object'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'invoke_api'
op|'('
name|'module'
op|','
name|'method'
op|','
name|'self'
op|'.'
name|'vim'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'invoke_api'
op|'('
name|'module'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_task
dedent|''
dedent|''
name|'def'
name|'_wait_for_task'
op|'('
name|'self'
op|','
name|'task_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a Deferred that will give the result of the given task.\n        The task is polled until it completes.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'wait_for_task'
op|'('
name|'task_ref'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

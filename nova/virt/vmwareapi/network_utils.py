begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\r\n'
nl|'\r\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\r\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\r\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\r\n'
comment|'#    a copy of the License at'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\r\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\r\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\r\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\r\n'
comment|'#    under the License.'
nl|'\r\n'
nl|'\r\n'
string|'"""\r\nUtility functions for ESX Networking\r\n"""'
newline|'\r\n'
nl|'\r\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
op|'.'
name|'vim'
name|'import'
name|'VimException'
newline|'\r\n'
nl|'\r\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.vmwareapi.network_utils"'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'PORT_GROUP_EXISTS_EXCEPTION'
op|'='
DECL|variable|PORT_GROUP_EXISTS_EXCEPTION
string|"'The specified key, name, or identifier already exists.'"
newline|'\r\n'
nl|'\r\n'
nl|'\r\n'
DECL|class|NetworkHelper
name|'class'
name|'NetworkHelper'
op|':'
newline|'\r\n'
nl|'\r\n'
indent|'    '
op|'@'
name|'classmethod'
newline|'\r\n'
DECL|member|get_network_with_the_name
name|'def'
name|'get_network_with_the_name'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'network_name'
op|'='
string|'"vmnet0"'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'""" Gets reference to the network whose name is passed as the\r\n        argument. """'
newline|'\r\n'
name|'datacenters'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datacenter"'
op|','
op|'['
string|'"network"'
op|']'
op|')'
newline|'\r\n'
name|'vm_networks'
op|'='
name|'datacenters'
op|'['
number|'0'
op|']'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'.'
name|'ManagedObjectReference'
newline|'\r\n'
name|'networks'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_properites_for_a_collection_of_objects"'
op|','
nl|'\r\n'
string|'"Network"'
op|','
name|'vm_networks'
op|','
op|'['
string|'"summary.name"'
op|']'
op|')'
newline|'\r\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\r\n'
indent|'            '
name|'if'
name|'network'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'network_name'
op|':'
newline|'\r\n'
indent|'                '
name|'return'
name|'network'
op|'.'
name|'obj'
newline|'\r\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\r\n'
nl|'\r\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\r\n'
DECL|member|get_vswitch_for_vlan_interface
name|'def'
name|'get_vswitch_for_vlan_interface'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vlan_interface'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'""" Gets the vswitch associated with the physical\r\n        network adapter with the name supplied"""'
newline|'\r\n'
comment|'#Get the list of vSwicthes on the Host System'
nl|'\r\n'
name|'host_mor'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\r\n'
name|'vswitches'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'host_mor'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|','
string|'"config.network.vswitch"'
op|')'
op|'.'
name|'HostVirtualSwitch'
newline|'\r\n'
comment|'#Get the vSwitch associated with the network adapter'
nl|'\r\n'
name|'for'
name|'elem'
name|'in'
name|'vswitches'
op|':'
newline|'\r\n'
indent|'            '
name|'try'
op|':'
newline|'\r\n'
indent|'                '
name|'for'
name|'nic_elem'
name|'in'
name|'elem'
op|'.'
name|'pnic'
op|':'
newline|'\r\n'
indent|'                    '
name|'if'
name|'str'
op|'('
name|'nic_elem'
op|')'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'find'
op|'('
name|'vlan_interface'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\r\n'
indent|'                        '
name|'return'
name|'elem'
op|'.'
name|'name'
newline|'\r\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\r\n'
indent|'                '
name|'pass'
newline|'\r\n'
nl|'\r\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\r\n'
DECL|member|check_if_vlan_interface_exists
name|'def'
name|'check_if_vlan_interface_exists'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'vlan_interface'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'""" Checks if the vlan_inteface exists on the esx host """'
newline|'\r\n'
name|'host_net_system_mor'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|','
op|'['
string|'"configManager.networkSystem"'
op|']'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
newline|'\r\n'
name|'physical_nics'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'host_net_system_mor'
op|','
nl|'\r\n'
string|'"HostNetworkSystem"'
op|','
string|'"networkInfo.pnic"'
op|')'
op|'.'
name|'PhysicalNic'
newline|'\r\n'
name|'for'
name|'pnic'
name|'in'
name|'physical_nics'
op|':'
newline|'\r\n'
indent|'            '
name|'if'
name|'vlan_interface'
op|'=='
name|'pnic'
op|'.'
name|'device'
op|':'
newline|'\r\n'
indent|'                '
name|'return'
name|'True'
newline|'\r\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\r\n'
nl|'\r\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\r\n'
DECL|member|get_vlanid_and_vswicth_for_portgroup
name|'def'
name|'get_vlanid_and_vswicth_for_portgroup'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'pg_name'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'""" Get the vlan id and vswicth associated with the port group """'
newline|'\r\n'
name|'host_mor'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\r\n'
name|'port_grps_on_host'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'host_mor'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|','
string|'"config.network.portgroup"'
op|')'
op|'.'
name|'HostPortGroup'
newline|'\r\n'
name|'for'
name|'p_gp'
name|'in'
name|'port_grps_on_host'
op|':'
newline|'\r\n'
indent|'            '
name|'if'
name|'p_gp'
op|'.'
name|'spec'
op|'.'
name|'name'
op|'=='
name|'pg_name'
op|':'
newline|'\r\n'
indent|'                '
name|'p_grp_vswitch_name'
op|'='
name|'p_gp'
op|'.'
name|'vswitch'
op|'.'
name|'split'
op|'('
string|'"-"'
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\r\n'
name|'return'
name|'p_gp'
op|'.'
name|'spec'
op|'.'
name|'vlanId'
op|','
name|'p_grp_vswitch_name'
newline|'\r\n'
nl|'\r\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\r\n'
DECL|member|create_port_group
name|'def'
name|'create_port_group'
op|'('
name|'cls'
op|','
name|'session'
op|','
name|'pg_name'
op|','
name|'vswitch_name'
op|','
name|'vlan_id'
op|'='
number|'0'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'""" Creates a port group on the host system with the vlan tags\r\n        supplied. VLAN id 0 means no vlan id association """'
newline|'\r\n'
name|'client_factory'
op|'='
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\r\n'
name|'add_prt_grp_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_add_vswitch_port_group_spec'
op|'('
nl|'\r\n'
name|'client_factory'
op|','
nl|'\r\n'
name|'vswitch_name'
op|','
nl|'\r\n'
name|'pg_name'
op|','
nl|'\r\n'
name|'vlan_id'
op|')'
newline|'\r\n'
name|'host_mor'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\r\n'
name|'network_system_mor'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'host_mor'
op|','
nl|'\r\n'
string|'"HostSystem"'
op|','
string|'"configManager.networkSystem"'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating Port Group with name %s on "'
nl|'\r\n'
string|'"the ESX host"'
op|')'
op|'%'
name|'pg_name'
op|')'
newline|'\r\n'
name|'try'
op|':'
newline|'\r\n'
indent|'            '
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"AddPortGroup"'
op|','
name|'network_system_mor'
op|','
nl|'\r\n'
name|'portgrp'
op|'='
name|'add_prt_grp_spec'
op|')'
newline|'\r\n'
dedent|''
name|'except'
name|'VimException'
op|','
name|'exc'
op|':'
newline|'\r\n'
comment|'#There can be a race condition when two instances try'
nl|'\r\n'
comment|'#adding port groups at the same time. One succeeds, then'
nl|'\r\n'
comment|'#the other one will get an exception. Since we are'
nl|'\r\n'
comment|'#concerned with the port group being created, which is done'
nl|'\r\n'
comment|'#by the other call, we can ignore the exception.'
nl|'\r\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'exc'
op|')'
op|'.'
name|'find'
op|'('
name|'PORT_GROUP_EXISTS_EXCEPTION'
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\r\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
name|'exc'
op|')'
newline|'\r\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Created Port Group with name %s on "'
nl|'\r\n'
string|'"the ESX host"'
op|')'
op|'%'
name|'pg_name'
op|')'
newline|'\r\n'
dedent|''
dedent|''
endmarker|''
end_unit

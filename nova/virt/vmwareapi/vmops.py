begin_unit
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2012 VMware, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nClass for VM tasks like spawn, snapshot, suspend, resume etc.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'decorator'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'concurrency'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'vmware'
name|'import'
name|'exceptions'
name|'as'
name|'vexc'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'metadata'
name|'import'
name|'base'
name|'as'
name|'instance_metadata'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'console'
name|'import'
name|'type'
name|'as'
name|'ctype'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'diagnostics'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'ds_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'error_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'imagecache'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vif'
name|'as'
name|'vmwarevif'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'image_cache_subdirectory_name'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'remove_unused_base_images'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'vnc_enabled'"
op|','
string|"'nova.vnc'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|VMWARE_POWER_STATES
name|'VMWARE_POWER_STATES'
op|'='
op|'{'
nl|'\n'
string|"'poweredOff'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
string|"'poweredOn'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'suspended'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|RESIZE_TOTAL_STEPS
name|'RESIZE_TOTAL_STEPS'
op|'='
number|'4'
newline|'\n'
nl|'\n'
DECL|variable|DcInfo
name|'DcInfo'
op|'='
name|'collections'
op|'.'
name|'namedtuple'
op|'('
string|"'DcInfo'"
op|','
nl|'\n'
op|'['
string|"'ref'"
op|','
string|"'name'"
op|','
string|"'vmFolder'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VirtualMachineInstanceConfigInfo
name|'class'
name|'VirtualMachineInstanceConfigInfo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parameters needed to create and configure a new instance."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'instance_name'
op|','
name|'image_info'
op|','
nl|'\n'
name|'datastore'
op|','
name|'dc_info'
op|','
name|'image_cache'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Some methods called during spawn take the instance parameter purely'
nl|'\n'
comment|'# for logging purposes.'
nl|'\n'
comment|'# TODO(vui) Clean them up, so we no longer need to keep this variable'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance'
op|'='
name|'instance'
newline|'\n'
nl|'\n'
comment|"# Get the instance name. In some cases this may differ from the 'uuid',"
nl|'\n'
comment|'# for example when the spawn of a rescue instance takes place.'
nl|'\n'
name|'self'
op|'.'
name|'instance_name'
op|'='
name|'instance_name'
name|'or'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ii'
op|'='
name|'image_info'
newline|'\n'
name|'self'
op|'.'
name|'root_gb'
op|'='
name|'instance'
op|'.'
name|'root_gb'
newline|'\n'
name|'self'
op|'.'
name|'datastore'
op|'='
name|'datastore'
newline|'\n'
name|'self'
op|'.'
name|'dc_info'
op|'='
name|'dc_info'
newline|'\n'
name|'self'
op|'.'
name|'_image_cache'
op|'='
name|'image_cache'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|cache_image_folder
name|'def'
name|'cache_image_folder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_image_cache'
op|'.'
name|'get_image_cache_folder'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'datastore'
op|','
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|cache_image_path
name|'def'
name|'cache_image_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'cached_image_file_name'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ii'
op|'.'
name|'file_type'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cache_image_folder'
op|'.'
name|'join'
op|'('
name|'cached_image_file_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Note(vui): See https://bugs.launchpad.net/nova/+bug/1363349'
nl|'\n'
comment|'# for cases where mocking time.sleep() can have unintended effects on code'
nl|'\n'
comment|'# not under test. For now, unblock the affected test cases by providing'
nl|'\n'
comment|'# a wrapper function to work around needing to mock time.sleep()'
nl|'\n'
DECL|function|_time_sleep_wrapper
dedent|''
dedent|''
name|'def'
name|'_time_sleep_wrapper'
op|'('
name|'delay'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'time'
op|'.'
name|'sleep'
op|'('
name|'delay'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'decorator'
op|'.'
name|'decorator'
newline|'\n'
DECL|function|retry_if_task_in_progress
name|'def'
name|'retry_if_task_in_progress'
op|'('
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'retries'
op|'='
name|'max'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'api_retry_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'delay'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'attempt'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'retries'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attempt'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'_time_sleep_wrapper'
op|'('
name|'delay'
op|')'
newline|'\n'
name|'delay'
op|'='
name|'min'
op|'('
number|'2'
op|'*'
name|'delay'
op|','
number|'60'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'error_util'
op|'.'
name|'TaskInProgress'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareVMOps
dedent|''
dedent|''
dedent|''
name|'class'
name|'VMwareVMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Management class for VM-related tasks."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|','
name|'virtapi'
op|','
name|'volumeops'
op|','
name|'cluster'
op|'='
name|'None'
op|','
nl|'\n'
name|'datastore_regex'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializer."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'='
name|'virtapi'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'volumeops'
newline|'\n'
name|'self'
op|'.'
name|'_cluster'
op|'='
name|'cluster'
newline|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'datastore_regex'
newline|'\n'
comment|'# Ensure that the base folder is unique per compute node'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'remove_unused_base_images'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_base_folder'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'my_ip'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Aging disable ensures backward compatibility'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_base_folder'
op|'='
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_tmp_folder'
op|'='
string|"'vmware_temp'"
newline|'\n'
name|'self'
op|'.'
name|'_default_root_device'
op|'='
string|"'vda'"
newline|'\n'
name|'self'
op|'.'
name|'_rescue_suffix'
op|'='
string|"'-rescue'"
newline|'\n'
name|'self'
op|'.'
name|'_migrate_suffix'
op|'='
string|"'-orig'"
newline|'\n'
name|'self'
op|'.'
name|'_datastore_dc_mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_datastore_browser_mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_imagecache'
op|'='
name|'imagecache'
op|'.'
name|'ImageCacheManager'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_base_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_extend_virtual_disk
dedent|''
name|'def'
name|'_extend_virtual_disk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'requested_size'
op|','
name|'name'
op|','
name|'dc_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service_content'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'service_content'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Extending root virtual disk to %s"'
op|','
name|'requested_size'
op|')'
newline|'\n'
name|'vmdk_extend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"ExtendVirtualDisk_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|','
nl|'\n'
name|'datacenter'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'newCapacityKb'
op|'='
name|'requested_size'
op|','
nl|'\n'
name|'eagerZero'
op|'='
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vmdk_extend_task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Extending virtual disk failed with error: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Clean up files created during the extend operation'
nl|'\n'
name|'files'
op|'='
op|'['
name|'name'
op|'.'
name|'replace'
op|'('
string|'".vmdk"'
op|','
string|'"-flat.vmdk"'
op|')'
op|','
name|'name'
op|']'
newline|'\n'
name|'for'
name|'file'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                    '
name|'ds_path'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'ds_path'
op|','
name|'dc_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Extended root virtual disk"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_datastore_file
dedent|''
name|'def'
name|'_delete_datastore_file'
op|'('
name|'self'
op|','
name|'datastore_path'
op|','
name|'dc_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'file_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'datastore_path'
op|','
name|'dc_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'vexc'
op|'.'
name|'CannotDeleteFileException'
op|','
nl|'\n'
name|'vexc'
op|'.'
name|'FileFaultException'
op|','
nl|'\n'
name|'vexc'
op|'.'
name|'FileLockedException'
op|','
nl|'\n'
name|'vexc'
op|'.'
name|'FileNotFoundException'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unable to delete %(ds)s. There may be more than "'
nl|'\n'
string|'"one process or thread trying to delete the file"'
op|','
nl|'\n'
op|'{'
string|"'ds'"
op|':'
name|'datastore_path'
op|'}'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_extend_if_required
dedent|''
dedent|''
name|'def'
name|'_extend_if_required'
op|'('
name|'self'
op|','
name|'dc_info'
op|','
name|'image_info'
op|','
name|'instance'
op|','
nl|'\n'
name|'root_vmdk_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Increase the size of the root vmdk if necessary."""'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|'>'
name|'image_info'
op|'.'
name|'file_size'
op|':'
newline|'\n'
indent|'            '
name|'size_in_kb'
op|'='
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'self'
op|'.'
name|'_extend_virtual_disk'
op|'('
name|'instance'
op|','
name|'size_in_kb'
op|','
nl|'\n'
name|'root_vmdk_path'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_configure_config_drive
dedent|''
dedent|''
name|'def'
name|'_configure_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
name|'datastore'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'session_vim'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
newline|'\n'
name|'cookies'
op|'='
name|'session_vim'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
nl|'\n'
name|'uploaded_iso_path'
op|'='
name|'self'
op|'.'
name|'_create_config_drive'
op|'('
name|'instance'
op|','
nl|'\n'
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'dc_info'
op|'.'
name|'name'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'cookies'
op|')'
newline|'\n'
name|'uploaded_iso_path'
op|'='
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'uploaded_iso_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_attach_cdrom_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'uploaded_iso_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|build_virtual_machine
dedent|''
name|'def'
name|'build_virtual_machine'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'instance_name'
op|','
name|'image_info'
op|','
nl|'\n'
name|'dc_info'
op|','
name|'datastore'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_mo_id'
op|'='
name|'vm_util'
op|'.'
name|'get_mo_id_from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'res_pool_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_res_pool_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
name|'node_mo_id'
op|')'
newline|'\n'
name|'vif_infos'
op|'='
name|'vmwarevif'
op|'.'
name|'get_vif_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|','
nl|'\n'
name|'image_info'
op|'.'
name|'vif_model'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'allocations'
op|'='
name|'self'
op|'.'
name|'_get_cpu_allocations'
op|'('
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the create vm config spec'
nl|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_create_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'instance_name'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'vif_infos'
op|','
nl|'\n'
name|'image_info'
op|'.'
name|'os_type'
op|','
nl|'\n'
name|'allocations'
op|'='
name|'allocations'
op|')'
newline|'\n'
comment|'# Create the VM'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'create_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'dc_info'
op|'.'
name|'vmFolder'
op|','
nl|'\n'
name|'config_spec'
op|','
name|'res_pool_ref'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_get_cpu_allocations
dedent|''
name|'def'
name|'_get_cpu_allocations'
op|'('
name|'self'
op|','
name|'instance_type_id'
op|')'
op|':'
newline|'\n'
comment|'# Read flavors for allocations'
nl|'\n'
indent|'        '
name|'flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
nl|'\n'
name|'instance_type_id'
op|')'
newline|'\n'
name|'allocations'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'type'
op|')'
name|'in'
op|'('
op|'('
string|"'cpu_limit'"
op|','
name|'int'
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu_reservation'"
op|','
name|'int'
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu_shares_level'"
op|','
name|'str'
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu_shares_share'"
op|','
name|'int'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'flavor'
op|'.'
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'quota:'"
op|'+'
name|'key'
op|')'
newline|'\n'
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'allocations'
op|'['
name|'key'
op|']'
op|'='
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'allocations'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image_as_file
dedent|''
name|'def'
name|'_fetch_image_as_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vi'
op|','
name|'image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Download image as an individual file to host via HTTP PUT."""'
newline|'\n'
name|'session'
op|'='
name|'self'
op|'.'
name|'_session'
newline|'\n'
name|'session_vim'
op|'='
name|'session'
op|'.'
name|'vim'
newline|'\n'
name|'cookies'
op|'='
name|'session_vim'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Downloading image file data %(image_id)s to "'
nl|'\n'
string|'"%(file_path)s on the data store "'
nl|'\n'
string|'"%(datastore_name)s"'
op|','
nl|'\n'
op|'{'
string|"'image_id'"
op|':'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
nl|'\n'
string|"'file_path'"
op|':'
name|'image_ds_loc'
op|','
nl|'\n'
string|"'datastore_name'"
op|':'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'images'
op|'.'
name|'fetch_image'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'session'
op|'.'
name|'_host'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'name'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'image_ds_loc'
op|'.'
name|'rel_path'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prepare_sparse_image
dedent|''
name|'def'
name|'_prepare_sparse_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
string|'"tmp-sparse.vmdk"'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_prepare_flat_image
dedent|''
name|'def'
name|'_prepare_flat_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'create_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'tmp_image_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'file_size_in_kb'
op|')'
newline|'\n'
name|'flat_vmdk_name'
op|'='
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|'.'
name|'replace'
op|'('
string|"'.vmdk'"
op|','
nl|'\n'
string|"'-flat.vmdk'"
op|')'
newline|'\n'
name|'flat_vmdk_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'flat_vmdk_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'str'
op|'('
name|'flat_vmdk_ds_loc'
op|')'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'flat_vmdk_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_prepare_iso_image
dedent|''
name|'def'
name|'_prepare_iso_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_move_to_cache
dedent|''
name|'def'
name|'_move_to_cache'
op|'('
name|'self'
op|','
name|'dc_ref'
op|','
name|'src_folder_ds_path'
op|','
name|'dst_folder_ds_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'file_move'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_ref'
op|','
nl|'\n'
name|'src_folder_ds_path'
op|','
name|'dst_folder_ds_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileAlreadyExistsException'
op|':'
newline|'\n'
comment|'# Folder move has failed. This may be due to the fact that a'
nl|'\n'
comment|'# process or thread has already completed the operation.'
nl|'\n'
comment|'# Since image caching is synchronized, this can only happen'
nl|'\n'
comment|'# due to action external to the process.'
nl|'\n'
comment|'# In the event of a FileAlreadyExists we continue,'
nl|'\n'
comment|'# all other exceptions will be raised.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Destination %s already exists! Concurrent moves "'
nl|'\n'
string|'"can lead to unexpected results."'
op|')'
op|','
nl|'\n'
name|'dst_folder_ds_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cache_sparse_image
dedent|''
dedent|''
name|'def'
name|'_cache_sparse_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|'.'
name|'parent'
newline|'\n'
name|'converted_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
newline|'\n'
comment|'# converts fetched image to preallocated disk'
nl|'\n'
name|'vm_util'
op|'.'
name|'copy_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'tmp_image_ds_loc'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'converted_image_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'str'
op|'('
name|'tmp_image_ds_loc'
op|')'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_move_to_cache'
op|'('
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cache_flat_image
dedent|''
name|'def'
name|'_cache_flat_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_move_to_cache'
op|'('
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cache_iso_image
dedent|''
name|'def'
name|'_cache_iso_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_move_to_cache'
op|'('
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_config_info
dedent|''
name|'def'
name|'_get_vm_config_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_info'
op|','
name|'instance_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Captures all relevant information from the spawn parameters."""'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'instance'
op|'.'
name|'root_gb'
op|'!='
number|'0'
name|'and'
nl|'\n'
name|'image_info'
op|'.'
name|'file_size'
op|'>'
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Image disk size greater than requested disk size"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnacceptable'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'datastore'
op|'='
name|'ds_util'
op|'.'
name|'get_datastore'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_cluster'
op|','
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'VirtualMachineInstanceConfigInfo'
op|'('
name|'instance'
op|','
nl|'\n'
name|'instance_name'
op|','
nl|'\n'
name|'image_info'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'dc_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_imagecache'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_image_callbacks
dedent|''
name|'def'
name|'_get_image_callbacks'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_type'
op|'='
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
newline|'\n'
nl|'\n'
name|'image_fetch'
op|'='
name|'self'
op|'.'
name|'_fetch_image_as_file'
newline|'\n'
nl|'\n'
name|'if'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'is_iso'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_iso_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_iso_image'
newline|'\n'
dedent|''
name|'elif'
name|'disk_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_TYPE_SPARSE'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_sparse_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_sparse_image'
newline|'\n'
dedent|''
name|'elif'
name|'disk_type'
name|'in'
name|'constants'
op|'.'
name|'SUPPORTED_FLAT_VARIANTS'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_flat_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_flat_image'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"disk type \'%s\' not supported"'
op|')'
op|'%'
name|'disk_type'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidDiskInfo'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'image_prepare'
op|','
name|'image_fetch'
op|','
name|'image_cache'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image_if_missing
dedent|''
name|'def'
name|'_fetch_image_if_missing'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_prepare'
op|','
name|'image_fetch'
op|','
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_get_image_callbacks'
op|'('
name|'vi'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Processing image %s"'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-fetch_image'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'check_cache_folder'
op|'('
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|','
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Preparing fetch location"'
op|')'
newline|'\n'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
op|'='
name|'image_prepare'
op|'('
name|'vi'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Fetch image to %s"'
op|','
name|'tmp_image_ds_loc'
op|')'
newline|'\n'
name|'image_fetch'
op|'('
name|'context'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Caching image"'
op|')'
newline|'\n'
name|'image_cache'
op|'('
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Cleaning up location %s"'
op|','
name|'str'
op|'('
name|'tmp_dir_loc'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'str'
op|'('
name|'tmp_dir_loc'
op|')'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
dedent|''
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'image_info'
op|'='
name|'images'
op|'.'
name|'VMwareImage'
op|'.'
name|'from_image'
op|'('
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
name|'vi'
op|'='
name|'self'
op|'.'
name|'_get_vm_config_info'
op|'('
name|'instance'
op|','
name|'image_info'
op|','
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creates the virtual machine. The virtual machine reference returned'
nl|'\n'
comment|'# is unique within Virtual Center.'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'build_virtual_machine'
op|'('
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'instance_name'
op|','
nl|'\n'
name|'image_info'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cache the vm_ref. This saves a remote call to the VC. This uses the'
nl|'\n'
comment|'# instance_name. This covers all use cases including rescue and resize.'
nl|'\n'
name|'vm_util'
op|'.'
name|'vm_ref_cache_update'
op|'('
name|'vi'
op|'.'
name|'instance_name'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the machine.id parameter of the instance to inject'
nl|'\n'
comment|'# the NIC configuration inside the VM'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'flat_injected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_machine_id'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the vnc configuration of the instance, vnc port starts from 5900'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'vnc_enabled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_and_set_vnc_config'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'block_device_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mdbooth): the logic here is that we ignore the image if there'
nl|'\n'
comment|'# are block device mappings. This behaviour is incorrect, and a bug in'
nl|'\n'
comment|'# the driver.  We should be able to accept an image and block device'
nl|'\n'
comment|'# mappings.'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'block_device_mapping'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"Block device information present: %s"'
op|'%'
name|'block_device_info'
newline|'\n'
comment|'# NOTE(mriedem): block_device_info can contain an auth_password'
nl|'\n'
comment|'# so we have to scrub the message before logging it.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'strutils'
op|'.'
name|'mask_password'
op|'('
name|'msg'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'root_disk'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'                '
name|'connection_info'
op|'='
name|'root_disk'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
comment|'# TODO(hartsocks): instance is unnecessary, remove it'
nl|'\n'
comment|'# we still use instance in many locations for no other purpose'
nl|'\n'
comment|'# than logging, can we simplify this?'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_root_volume'
op|'('
name|'connection_info'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_default_root_device'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_imagecache'
op|'.'
name|'enlist_image'
op|'('
nl|'\n'
name|'image_info'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'datastore'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fetch_image_if_missing'
op|'('
name|'context'
op|','
name|'vi'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_info'
op|'.'
name|'is_iso'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_use_iso_image'
op|'('
name|'vm_ref'
op|','
name|'vi'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'image_info'
op|'.'
name|'linked_clone'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_use_disk_image_as_linked_clone'
op|'('
name|'vm_ref'
op|','
name|'vi'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_use_disk_image_as_full_clone'
op|'('
name|'vm_ref'
op|','
name|'vi'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_configure_config_drive'
op|'('
nl|'\n'
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'datastore'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_config_drive
dedent|''
dedent|''
name|'def'
name|'_create_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'data_store_name'
op|','
name|'dc_name'
op|','
name|'upload_folder'
op|','
name|'cookies'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'config_drive_format'
op|'!='
string|"'iso9660'"
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
op|'('
name|'_'
op|'('
string|'\'Invalid config_drive_format "%s"\''
op|')'
op|'%'
nl|'\n'
name|'CONF'
op|'.'
name|'config_drive_format'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstancePowerOnFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Using config drive for instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'extra_md'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'admin_password'
op|':'
newline|'\n'
indent|'            '
name|'extra_md'
op|'['
string|"'admin_pass'"
op|']'
op|'='
name|'admin_password'
newline|'\n'
nl|'\n'
dedent|''
name|'inst_md'
op|'='
name|'instance_metadata'
op|'.'
name|'InstanceMetadata'
op|'('
name|'instance'
op|','
nl|'\n'
name|'content'
op|'='
name|'injected_files'
op|','
nl|'\n'
name|'extra_md'
op|'='
name|'extra_md'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'configdrive'
op|'.'
name|'ConfigDriveBuilder'
op|'('
name|'instance_md'
op|'='
name|'inst_md'
op|')'
name|'as'
name|'cdb'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'utils'
op|'.'
name|'tempdir'
op|'('
op|')'
name|'as'
name|'tmp_path'
op|':'
newline|'\n'
indent|'                    '
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp_path'
op|','
string|"'configdrive.iso'"
op|')'
newline|'\n'
name|'cdb'
op|'.'
name|'make_drive'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
name|'upload_iso_path'
op|'='
string|'"%s/configdrive.iso"'
op|'%'
op|'('
nl|'\n'
name|'upload_folder'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'upload_iso_to_datastore'
op|'('
nl|'\n'
name|'tmp_file'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host'
op|','
nl|'\n'
name|'data_center_name'
op|'='
name|'dc_name'
op|','
nl|'\n'
name|'datastore_name'
op|'='
name|'data_store_name'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'upload_iso_path'
op|')'
newline|'\n'
name|'return'
name|'upload_iso_path'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Creating config drive failed with error: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_cdrom_to_vm
dedent|''
dedent|''
dedent|''
name|'def'
name|'_attach_cdrom_to_vm'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'datastore'
op|','
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach cdrom to VM by reconfiguration."""'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
op|'('
name|'controller_key'
op|','
name|'unit_number'
op|','
nl|'\n'
name|'controller_spec'
op|')'
op|'='
name|'vm_util'
op|'.'
name|'allocate_controller_key_and_unit_number'
op|'('
nl|'\n'
name|'client_factory'
op|','
nl|'\n'
name|'devices'
op|','
nl|'\n'
string|"'ide'"
op|')'
newline|'\n'
name|'cdrom_attach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_cdrom_attach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'datastore'
op|','
name|'file_path'
op|','
nl|'\n'
name|'controller_key'
op|','
name|'unit_number'
op|')'
newline|'\n'
name|'if'
name|'controller_spec'
op|':'
newline|'\n'
indent|'            '
name|'cdrom_attach_config_spec'
op|'.'
name|'deviceChange'
op|'.'
name|'append'
op|'('
name|'controller_spec'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance to attach cdrom %s"'
op|','
nl|'\n'
name|'file_path'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'cdrom_attach_config_spec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance to attach cdrom %s"'
op|','
nl|'\n'
name|'file_path'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vm_snapshot
dedent|''
name|'def'
name|'_create_vm_snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'snapshot_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"CreateSnapshot_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'name'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'description'
op|'='
string|'"Taking Snapshot of the VM"'
op|','
nl|'\n'
name|'memory'
op|'='
name|'False'
op|','
nl|'\n'
name|'quiesce'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'snapshot_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'task_info'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'snapshot_task'
op|','
string|'"Task"'
op|','
string|'"info"'
op|')'
newline|'\n'
name|'snapshot'
op|'='
name|'task_info'
op|'.'
name|'result'
newline|'\n'
name|'return'
name|'snapshot'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'retry_if_task_in_progress'
newline|'\n'
DECL|member|_delete_vm_snapshot
name|'def'
name|'_delete_vm_snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'delete_snapshot_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"RemoveSnapshot_Task"'
op|','
name|'snapshot'
op|','
nl|'\n'
name|'removeChildren'
op|'='
name|'False'
op|','
name|'consolidate'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'delete_snapshot_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        Steps followed are:\n\n        1. Get the name of the vmdk file which the VM points to right now.\n           Can be a chain of snapshots, so we need to know the last in the\n           chain.\n        2. Create the snapshot. A new vmdk is created which the VM points to\n           now. The earlier vmdk becomes read-only.\n        3. Call CopyVirtualDisk which coalesces the disk chain to form a single\n           vmdk, rather a .vmdk metadata file and a -flat.vmdk disk data file.\n        4. Now upload the -flat.vmdk file to the image store.\n        5. Delete the coalesced .vmdk and -flat.vmdk created.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'service_content'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'service_content'
newline|'\n'
nl|'\n'
DECL|function|_get_vm_and_vmdk_attribs
name|'def'
name|'_get_vm_and_vmdk_attribs'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Get the vmdk file name that the VM is pointing to'
nl|'\n'
indent|'            '
name|'hw_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
op|'('
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|','
nl|'\n'
name|'disk_type'
op|')'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_path_and_adapter_type'
op|'('
nl|'\n'
name|'hw_devices'
op|','
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vmdk_file_path_before_snapshot'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"No root disk defined. Unable to snapshot."'
op|')'
newline|'\n'
name|'raise'
name|'error_util'
op|'.'
name|'NoRootDiskDefined'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'datastore_name'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
nl|'\n'
name|'vmdk_file_path_before_snapshot'
op|')'
op|'.'
name|'datastore'
newline|'\n'
name|'os_type'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"summary.config.guestId"'
op|')'
newline|'\n'
name|'return'
op|'('
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|','
name|'disk_type'
op|','
nl|'\n'
name|'datastore_name'
op|','
name|'os_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|','
name|'disk_type'
op|','
nl|'\n'
name|'datastore_name'
op|','
name|'os_type'
op|')'
op|'='
name|'_get_vm_and_vmdk_attribs'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'_create_vm_snapshot'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check_if_tmp_folder_exists
name|'def'
name|'_check_if_tmp_folder_exists'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Copy the contents of the VM that were there just before the'
nl|'\n'
comment|'# snapshot was taken'
nl|'\n'
indent|'            '
name|'ds_ref_ret'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
string|'"datastore"'
op|')'
newline|'\n'
name|'if'
name|'ds_ref_ret'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'DatastoreNotFound'
op|'('
op|')'
newline|'\n'
dedent|''
name|'ds_ref'
op|'='
name|'ds_ref_ret'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'check_temp_folder'
op|'('
name|'datastore_name'
op|','
name|'ds_ref'
op|')'
newline|'\n'
name|'return'
name|'ds_ref'
newline|'\n'
nl|'\n'
dedent|''
name|'ds_ref'
op|'='
name|'_check_if_tmp_folder_exists'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Generate a random vmdk file name to which the coalesced vmdk content'
nl|'\n'
comment|"# will be copied to. A random name is chosen so that we don't have"
nl|'\n'
comment|'# name clashes.'
nl|'\n'
name|'random_name'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'dest_vmdk_file_path'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'('
nl|'\n'
name|'datastore_name'
op|','
name|'self'
op|'.'
name|'_tmp_folder'
op|','
string|'"%s.vmdk"'
op|'%'
name|'random_name'
op|')'
newline|'\n'
name|'dest_vmdk_data_file_path'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'('
nl|'\n'
name|'datastore_name'
op|','
name|'self'
op|'.'
name|'_tmp_folder'
op|','
string|'"%s-flat.vmdk"'
op|'%'
name|'random_name'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_copy_vmdk_content
name|'def'
name|'_copy_vmdk_content'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Consolidate the snapshotted disk to a temporary vmdk.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Copying snapshotted disk %s.'"
op|','
nl|'\n'
name|'vmdk_file_path_before_snapshot'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'copy_disk_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"CopyVirtualDisk_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'sourceName'
op|'='
name|'vmdk_file_path_before_snapshot'
op|','
nl|'\n'
name|'sourceDatacenter'
op|'='
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'destName'
op|'='
name|'str'
op|'('
name|'dest_vmdk_file_path'
op|')'
op|','
nl|'\n'
name|'destDatacenter'
op|'='
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'force'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'copy_disk_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Copied snapshotted disk %s.'"
op|','
nl|'\n'
name|'vmdk_file_path_before_snapshot'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_copy_vmdk_content'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_vm_snapshot'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'snapshot'
op|')'
newline|'\n'
nl|'\n'
name|'cookies'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
nl|'\n'
DECL|function|_upload_vmdk_to_image_repository
name|'def'
name|'_upload_vmdk_to_image_repository'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Upload the contents of -flat.vmdk file which has the disk data.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Uploading image %s"'
op|','
name|'image_id'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'upload_image'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'image_id'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'os_type'
op|'='
name|'os_type'
op|','
nl|'\n'
name|'disk_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_DISK_TYPE'
op|','
nl|'\n'
name|'adapter_type'
op|'='
name|'adapter_type'
op|','
nl|'\n'
name|'image_version'
op|'='
number|'1'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host'
op|','
nl|'\n'
name|'data_center_name'
op|'='
name|'dc_info'
op|'.'
name|'name'
op|','
nl|'\n'
name|'datastore_name'
op|'='
name|'datastore_name'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|','
nl|'\n'
name|'file_path'
op|'='
string|'"%s/%s-flat.vmdk"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'random_name'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Uploaded image %s"'
op|','
name|'image_id'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|','
nl|'\n'
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|')'
newline|'\n'
name|'_upload_vmdk_to_image_repository'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_clean_temp_data
name|'def'
name|'_clean_temp_data'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Delete temporary vmdk files generated in image handling\n            operations.\n            """'
newline|'\n'
comment|'# The data file is the one occupying space, and likelier to see'
nl|'\n'
comment|'# deletion problems, so prioritize its deletion first. In the'
nl|'\n'
comment|'# unlikely event that its deletion fails, the small descriptor file'
nl|'\n'
comment|'# is retained too by design since it makes little sense to remove'
nl|'\n'
comment|'# it when the data disk it refers to still lingers.'
nl|'\n'
name|'for'
name|'f'
name|'in'
name|'dest_vmdk_data_file_path'
op|','
name|'dest_vmdk_file_path'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'f'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'_clean_temp_data'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot a VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.guest.toolsStatus"'
op|','
string|'"runtime.powerState"'
op|','
nl|'\n'
string|'"summary.guest.toolsRunningStatus"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_object_properties"'
op|','
nl|'\n'
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'query'
op|'='
name|'vm_util'
op|'.'
name|'get_values_from_object_properties'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'props'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'query'
op|'['
string|"'runtime.powerState'"
op|']'
newline|'\n'
name|'tools_status'
op|'='
name|'query'
op|'['
string|"'summary.guest.toolsStatus'"
op|']'
newline|'\n'
name|'tools_running_status'
op|'='
name|'query'
op|'['
string|"'summary.guest.toolsRunningStatus'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Raise an exception if the VM is not powered On.'
nl|'\n'
name|'if'
name|'pwr_state'
name|'not'
name|'in'
op|'['
string|'"poweredOn"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is not powered on"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceRebootFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'# If latest vmware tools are installed in the VM, and that the tools'
nl|'\n'
comment|'# are running, then only do a guest reboot. Otherwise do a hard reset.'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'tools_status'
op|'=='
string|'"toolsOk"'
name|'and'
nl|'\n'
name|'tools_running_status'
op|'=='
string|'"guestToolsRunning"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooting guest OS of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
string|'"RebootGuest"'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooted guest OS of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Doing hard reboot of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'reset_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"ResetVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'reset_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Did hard reboot of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_instance
dedent|''
dedent|''
name|'def'
name|'_destroy_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# Destroy a VM instance'
nl|'\n'
comment|"# Get the instance name. In some cases this may differ from the 'uuid',"
nl|'\n'
comment|'# for example when the spawn of a rescue instance takes place.'
nl|'\n'
indent|'        '
name|'if'
name|'instance_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref_from_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance_name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Instance does not exist on backend'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"config.files.vmPathName"'
op|','
string|'"runtime.powerState"'
op|','
nl|'\n'
string|'"datastore"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_object_properties"'
op|','
nl|'\n'
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
name|'lst_properties'
op|')'
newline|'\n'
name|'query'
op|'='
name|'vm_util'
op|'.'
name|'get_values_from_object_properties'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'props'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'query'
op|'['
string|"'runtime.powerState'"
op|']'
newline|'\n'
nl|'\n'
name|'vm_config_pathname'
op|'='
name|'query'
op|'.'
name|'get'
op|'('
string|"'config.files.vmPathName'"
op|')'
newline|'\n'
name|'vm_ds_path'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'vm_config_pathname'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'vm_ds_path'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
nl|'\n'
name|'vm_config_pathname'
op|')'
newline|'\n'
nl|'\n'
comment|'# Power off the VM if it is in PoweredOn state.'
nl|'\n'
dedent|''
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Un-register the VM'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unregistering the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"UnregisterVM"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unregistered the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"In vmwareapi:vmops:_destroy_instance, got this "'
nl|'\n'
string|'"exception while un-registering the VM: %s"'
op|')'
op|','
nl|'\n'
name|'excep'
op|')'
newline|'\n'
comment|'# Delete the folder holding the VM related content on'
nl|'\n'
comment|'# the datastore.'
nl|'\n'
dedent|''
name|'if'
name|'destroy_disks'
name|'and'
name|'vm_ds_path'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'dir_ds_compliant_path'
op|'='
name|'vm_ds_path'
op|'.'
name|'parent'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting contents of the VM from "'
nl|'\n'
string|'"datastore %(datastore_name)s"'
op|','
nl|'\n'
op|'{'
string|"'datastore_name'"
op|':'
name|'vm_ds_path'
op|'.'
name|'datastore'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'ds_ref_ret'
op|'='
name|'query'
op|'['
string|"'datastore'"
op|']'
newline|'\n'
name|'ds_ref'
op|'='
name|'ds_ref_ret'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'file_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'dir_ds_compliant_path'
op|','
nl|'\n'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted contents of the VM from "'
nl|'\n'
string|'"datastore %(datastore_name)s"'
op|','
nl|'\n'
op|'{'
string|"'datastore_name'"
op|':'
name|'vm_ds_path'
op|'.'
name|'datastore'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"In vmwareapi:vmops:_destroy_instance, "'
nl|'\n'
string|'"exception while deleting the VM contents from "'
nl|'\n'
string|'"the disk"'
op|')'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'vm_ref_cache_delete'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy a VM instance.\n\n        Steps followed for each VM are:\n        1. Power off, if it is in poweredOn state.\n        2. Un-register.\n        3. Delete the contents of the folder holding the VM related data.\n        """'
newline|'\n'
comment|'# If there is a rescue VM then we need to destroy that one too.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Destroying instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'RESCUED'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rescue VM configured"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'unrescue'
op|'('
name|'instance'
op|','
name|'power_on'
op|'='
name|'False'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rescue VM destroyed"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'rescue_name'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|'+'
name|'self'
op|'.'
name|'_rescue_suffix'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'rescue_name'
op|')'
newline|'\n'
comment|'# NOTE(arnaud): Destroy uuid-orig and uuid VMs iff it is not'
nl|'\n'
comment|'# triggered by the revert resize api call. This prevents'
nl|'\n'
comment|'# the uuid-orig VM to be deleted to be able to associate it later.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'!='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|':'
newline|'\n'
comment|'# When a VM deletion is triggered in the middle of VM resize and'
nl|'\n'
comment|'# before the state is set to RESIZED, the uuid-orig VM needs'
nl|'\n'
comment|'# to be deleted. This will avoid VM leaks.'
nl|'\n'
comment|'# The method _destroy_instance will check that the vmref'
nl|'\n'
comment|'# exists before attempting the deletion.'
nl|'\n'
indent|'            '
name|'resize_orig_vmname'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|'+'
name|'self'
op|'.'
name|'_migrate_suffix'
newline|'\n'
name|'vm_orig_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref_from_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'resize_orig_vmname'
op|')'
newline|'\n'
name|'if'
name|'vm_orig_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_destroy_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'resize_orig_vmname'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_destroy_instance'
op|'('
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance destroyed"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"pause not supported for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"unpause not supported for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\n'
comment|'# Only PoweredOn VMs can be suspended.'
nl|'\n'
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspending the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"SuspendVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'suspend_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspended the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Raise Exception if VM is poweredOff'
nl|'\n'
dedent|''
name|'elif'
name|'pwr_state'
op|'=='
string|'"poweredOff"'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is powered off and cannot be suspended."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceSuspendFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM was already in suspended state. So returning "'
nl|'\n'
string|'"without doing anything"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\n'
name|'if'
name|'pwr_state'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"suspended"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resuming the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'suspend_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resumed the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is not in a suspended state"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceResumeFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance.\n\n            - shutdown the instance VM.\n            - spawn a rescue VM (the vm name-label will be instance-N-rescue).\n\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|'+'
name|'self'
op|'.'
name|'_rescue_suffix'
newline|'\n'
name|'self'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance_name'
op|'='
name|'instance_name'
op|','
nl|'\n'
name|'power_on'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach vmdk to the rescue VM'
nl|'\n'
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
op|'('
name|'vmdk_path'
op|','
name|'adapter_type'
op|','
nl|'\n'
name|'disk_type'
op|')'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_path_and_adapter_type'
op|'('
nl|'\n'
name|'hardware_devices'
op|','
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'rescue_vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref_from_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'rescue_vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'adapter_type'
op|','
name|'disk_type'
op|','
name|'vmdk_path'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'rescue_vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance."""'
newline|'\n'
comment|'# Get the original vmdk_path'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
op|'('
name|'vmdk_path'
op|','
name|'adapter_type'
op|','
nl|'\n'
name|'disk_type'
op|')'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_path_and_adapter_type'
op|'('
nl|'\n'
name|'hardware_devices'
op|','
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|'+'
name|'self'
op|'.'
name|'_rescue_suffix'
newline|'\n'
comment|'# detach the original instance disk from the rescue disk'
nl|'\n'
name|'vm_rescue_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref_from_name'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance_name'
op|')'
newline|'\n'
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_rescue_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
name|'device'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_volume_disk'
op|'('
name|'hardware_devices'
op|','
name|'path'
op|'='
name|'vmdk_path'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_rescue_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_disk_from_vm'
op|'('
name|'vm_rescue_ref'
op|','
name|'instance'
op|','
name|'device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_instance'
op|'('
name|'instance'
op|','
name|'instance_name'
op|'='
name|'instance_name'
op|')'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance.\n\n        :param instance: nova.objects.instance.Instance\n        """'
newline|'\n'
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_orig_vm_name_label
dedent|''
name|'def'
name|'_get_orig_vm_name_label'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'.'
name|'uuid'
op|'+'
string|"'-orig'"
newline|'\n'
nl|'\n'
DECL|member|_update_instance_progress
dedent|''
name|'def'
name|'_update_instance_progress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'step'
op|','
name|'total_steps'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update instance progress percent to reflect current step number\n        """'
newline|'\n'
comment|'# Divide the action\'s workflow into discrete steps and "bump" the'
nl|'\n'
comment|"# instance's progress field as each step is completed."
nl|'\n'
comment|'#'
nl|'\n'
comment|'# For a first cut this should be fine, however, for large VM images,'
nl|'\n'
comment|'# the clone disk step begins to dominate the equation. A'
nl|'\n'
comment|'# better approximation would use the percentage of the VM image that'
nl|'\n'
comment|'# has been streamed to the destination host.'
nl|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step'
op|')'
op|'/'
name|'total_steps'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Updating instance \'%(instance_uuid)s\' progress to"'
nl|'\n'
string|'" %(progress)d"'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
string|"'progress'"
op|':'
name|'progress'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'progress'
op|'='
name|'progress'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transfers the disk of a running instance in multiple phases, turning\n        off the instance before the end.\n        """'
newline|'\n'
comment|'# Checks if the migration needs a disk resize down.'
nl|'\n'
name|'if'
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
op|'<'
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Unable to shrink disk."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceFaultRollback'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ResizeError'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# 0. Zero out the progress to begin'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'0'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Read the host_ref for the destination. If this is None then the'
nl|'\n'
comment|'# VC will decide on placement'
nl|'\n'
name|'host_ref'
op|'='
name|'self'
op|'.'
name|'_get_host_ref_from_name'
op|'('
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# 1. Power off the instance'
nl|'\n'
name|'self'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'1'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2. Disassociate the linked vsphere VM from the instance'
nl|'\n'
name|'vm_util'
op|'.'
name|'disassociate_vmref_from_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'suffix'
op|'='
name|'self'
op|'.'
name|'_migrate_suffix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'2'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
name|'ds_ref'
op|'='
name|'ds_util'
op|'.'
name|'get_datastore'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'datastore_regex'
op|'='
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
op|'.'
name|'ref'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
comment|'# 3. Clone the VM for instance'
nl|'\n'
name|'vm_util'
op|'.'
name|'clone_vmref_for_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'host_ref'
op|','
name|'ds_ref'
op|','
name|'dc_info'
op|'.'
name|'vmFolder'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'3'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a resize, destroying the source VM."""'
newline|'\n'
comment|'# Destroy the original VM. The vm_ref needs to be searched using the'
nl|'\n'
comment|'# instance.uuid + self._migrate_suffix as the identifier. We will'
nl|'\n'
comment|'# not get the vm when searched using the instanceUuid but rather will'
nl|'\n'
comment|'# be found using the uuid buried in the extraConfig'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'search_vm_ref_by_identifier'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|'+'
name|'self'
op|'.'
name|'_migrate_suffix'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"instance not present"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Destroying the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'destroy_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"Destroy_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'destroy_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Destroyed the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"In vmwareapi:vmops:confirm_migration, got this "'
nl|'\n'
string|'"exception while destroying the VM: %s"'
op|')'
op|','
name|'excep'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finish reverting a resize."""'
newline|'\n'
name|'vm_util'
op|'.'
name|'associate_vmref_for_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
nl|'\n'
name|'suffix'
op|'='
name|'self'
op|'.'
name|'_migrate_suffix'
op|')'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|'='
name|'False'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes a resize, turning on the migrated instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resize_instance'
op|':'
newline|'\n'
indent|'            '
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'vm_resize_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_resize_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vm_resize_spec'
op|')'
newline|'\n'
nl|'\n'
comment|'# Resize the disk (if larger)'
nl|'\n'
name|'old_root_gb'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'old_instance_type_root_gb'"
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'>'
name|'int'
op|'('
name|'old_root_gb'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'root_disk_in_kb'
op|'='
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'vmdk_path'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_path'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'data_store_ref'
op|'='
name|'ds_util'
op|'.'
name|'get_datastore'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
name|'datastore_regex'
op|'='
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
op|'.'
name|'ref'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'data_store_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_extend_virtual_disk'
op|'('
name|'instance'
op|','
name|'root_disk_in_kb'
op|','
name|'vmdk_path'
op|','
nl|'\n'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(ericwb): add extend for ephemeral disk'
nl|'\n'
nl|'\n'
comment|'# 4. Start VM'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'4'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawning live_migration operation for distributing high-load."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'host_ref'
op|'='
name|'self'
op|'.'
name|'_get_host_ref_from_name'
op|'('
name|'dest'
op|')'
newline|'\n'
name|'if'
name|'host_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'HostNotFound'
op|'('
name|'host'
op|'='
name|'dest'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Migrating VM to host %s"'
op|','
name|'dest'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_migrate_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"MigrateVM_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'host_ref'
op|','
nl|'\n'
name|'priority'
op|'='
string|'"defaultPriority"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vm_migrate_task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'recover_method'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
name|'block_migration'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'post_method'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
name|'block_migration'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Migrated VM to host %s"'
op|','
name|'dest'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll for rebooting instances."""'
newline|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instances_info'
op|'='
name|'dict'
op|'('
name|'instance_count'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instances_info'
op|'['
string|'"instance_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(instance_count)d hung reboots "'
nl|'\n'
string|'"older than %(timeout)d seconds"'
op|')'
op|'%'
name|'instances_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically hard rebooting"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
string|'"HARD"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.config.numCpu"'
op|','
nl|'\n'
string|'"summary.config.memorySizeMB"'
op|','
nl|'\n'
string|'"runtime.powerState"'
op|']'
newline|'\n'
name|'vm_props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_object_properties"'
op|','
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'query'
op|'='
name|'vm_util'
op|'.'
name|'get_values_from_object_properties'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_props'
op|')'
newline|'\n'
name|'max_mem'
op|'='
name|'int'
op|'('
name|'query'
op|'.'
name|'get'
op|'('
string|"'summary.config.memorySizeMB'"
op|','
number|'0'
op|')'
op|')'
op|'*'
number|'1024'
newline|'\n'
name|'num_cpu'
op|'='
name|'int'
op|'('
name|'query'
op|'.'
name|'get'
op|'('
string|"'summary.config.numCpu'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'VMWARE_POWER_STATES'
op|'['
name|'query'
op|'['
string|"'runtime.powerState'"
op|']'
op|']'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_diagnostics
dedent|''
name|'def'
name|'_get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.config"'
op|','
nl|'\n'
string|'"summary.quickStats"'
op|','
nl|'\n'
string|'"summary.runtime"'
op|']'
newline|'\n'
name|'vm_props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_object_properties"'
op|','
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'query'
op|'='
name|'vm_util'
op|'.'
name|'get_values_from_object_properties'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_props'
op|')'
newline|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# All of values received are objects. Convert them to dictionaries'
nl|'\n'
name|'for'
name|'value'
name|'in'
name|'query'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prop_dict'
op|'='
name|'vim_util'
op|'.'
name|'object_to_dict'
op|'('
name|'value'
op|','
name|'list_depth'
op|'='
number|'1'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'update'
op|'('
name|'prop_dict'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
comment|'# Add a namespace to all of the diagnostsics'
nl|'\n'
name|'return'
name|'dict'
op|'('
op|'['
op|'('
string|"'vmware:'"
op|'+'
name|'k'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'data'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'state'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'powerState'"
op|')'
newline|'\n'
name|'if'
name|'state'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'power_state'
op|'.'
name|'STATE_MAP'
op|'['
name|'VMWARE_POWER_STATES'
op|'['
name|'state'
op|']'
op|']'
newline|'\n'
dedent|''
name|'uptime'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'uptimeSeconds'"
op|','
number|'0'
op|')'
newline|'\n'
name|'config_drive'
op|'='
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'diags'
op|'='
name|'diagnostics'
op|'.'
name|'Diagnostics'
op|'('
name|'state'
op|'='
name|'state'
op|','
nl|'\n'
name|'driver'
op|'='
string|"'vmwareapi'"
op|','
nl|'\n'
name|'config_drive'
op|'='
name|'config_drive'
op|','
nl|'\n'
name|'hypervisor_os'
op|'='
string|"'esxi'"
op|','
nl|'\n'
name|'uptime'
op|'='
name|'uptime'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'memory_details'
op|'.'
name|'maximum'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'memorySizeMB'"
op|','
number|'0'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'memory_details'
op|'.'
name|'used'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'guestMemoryUsage'"
op|','
number|'0'
op|')'
newline|'\n'
comment|'# TODO(garyk): add in cpu, nic and disk stats'
nl|'\n'
name|'return'
name|'diags'
newline|'\n'
nl|'\n'
DECL|member|_get_vnc_console_connection
dedent|''
name|'def'
name|'_get_vnc_console_connection'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'opt_value'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|"'get_dynamic_property'"
op|','
nl|'\n'
name|'vm_ref'
op|','
string|"'VirtualMachine'"
op|','
nl|'\n'
name|'vm_util'
op|'.'
name|'VNC_CONFIG_KEY'
op|')'
newline|'\n'
name|'if'
name|'opt_value'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'opt_value'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_get_machine_id_str
name|'def'
name|'_get_machine_id_str'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'machine_id_str'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
comment|'# TODO(vish): add support for dns2'
nl|'\n'
comment|'# TODO(sateesh): add support for injection of ipv6 configuration'
nl|'\n'
indent|'            '
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'ip_v4'
op|'='
name|'netmask_v4'
op|'='
name|'gateway_v4'
op|'='
name|'broadcast_v4'
op|'='
name|'dns'
op|'='
name|'None'
newline|'\n'
name|'subnets_v4'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
name|'if'
name|'s'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'subnets_v4'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'ip_v4'
op|'='
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'dns'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'dns'
op|'='
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'dns'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'netmask_v4'
op|'='
name|'str'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'netmask'
op|')'
newline|'\n'
name|'gateway_v4'
op|'='
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'broadcast_v4'
op|'='
name|'str'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'interface_str'
op|'='
string|'";"'
op|'.'
name|'join'
op|'('
op|'['
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'address'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
name|'netmask_v4'
name|'or'
string|"''"
op|','
nl|'\n'
name|'gateway_v4'
name|'or'
string|"''"
op|','
nl|'\n'
name|'broadcast_v4'
name|'or'
string|"''"
op|','
nl|'\n'
name|'dns'
name|'or'
string|"''"
op|']'
op|')'
newline|'\n'
name|'machine_id_str'
op|'='
name|'machine_id_str'
op|'+'
name|'interface_str'
op|'+'
string|"'#'"
newline|'\n'
dedent|''
name|'return'
name|'machine_id_str'
newline|'\n'
nl|'\n'
DECL|member|_set_machine_id
dedent|''
name|'def'
name|'_set_machine_id'
op|'('
name|'self'
op|','
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the machine id of the VM for guest tools to pick up\n        and reconfigure the network interfaces.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'machine_id_change_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_machine_id_change_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_machine_id_str'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance to set the machine id"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'machine_id_change_spec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance to set the machine id"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'vmware.get_and_set_vnc_port'"
op|')'
newline|'\n'
DECL|member|_get_and_set_vnc_config
name|'def'
name|'_get_and_set_vnc_config'
op|'('
name|'self'
op|','
name|'client_factory'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the vnc configuration of the VM."""'
newline|'\n'
name|'port'
op|'='
name|'vm_util'
op|'.'
name|'get_vnc_port'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'vnc_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vnc_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance to enable vnc on "'
nl|'\n'
string|'"port - %(port)s"'
op|','
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vnc_config_spec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance to enable vnc on "'
nl|'\n'
string|'"port - %(port)s"'
op|','
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ds_browser
dedent|''
name|'def'
name|'_get_ds_browser'
op|'('
name|'self'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_datastore_browser_mapping'
op|'.'
name|'get'
op|'('
name|'ds_ref'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds_browser'
op|':'
newline|'\n'
indent|'            '
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
name|'ds_ref'
op|','
string|'"Datastore"'
op|','
nl|'\n'
string|'"browser"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_datastore_browser_mapping'
op|'['
name|'ds_ref'
op|'.'
name|'value'
op|']'
op|'='
name|'ds_browser'
newline|'\n'
dedent|''
name|'return'
name|'ds_browser'
newline|'\n'
nl|'\n'
DECL|member|_get_host_ref_from_name
dedent|''
name|'def'
name|'_get_host_ref_from_name'
op|'('
name|'self'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get reference to the host with the name specified."""'
newline|'\n'
name|'host_objs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'host_objs'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'host_objs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'host'
op|','
string|"'propSet'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'host'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'host_name'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'host'
op|'.'
name|'obj'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_vmfolder_ref
dedent|''
name|'def'
name|'_get_vmfolder_ref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the Vm folder ref from the datacenter."""'
newline|'\n'
name|'dc_objs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datacenter"'
op|','
op|'['
string|'"vmFolder"'
op|']'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_objs'
op|')'
newline|'\n'
comment|'# There is only one default datacenter in a standalone ESX host'
nl|'\n'
name|'vm_folder_ref'
op|'='
name|'dc_objs'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
newline|'\n'
name|'return'
name|'vm_folder_ref'
newline|'\n'
nl|'\n'
DECL|member|_create_folder_if_missing
dedent|''
name|'def'
name|'_create_folder_if_missing'
op|'('
name|'self'
op|','
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'folder'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a folder if it does not exist.\n\n        Currently there are two folder that are required on the datastore\n         - base folder - the folder to store cached images\n         - temp folder - the folder used for snapshot management and\n                         image uploading\n        This method is aimed to be used for the management of those\n        folders to ensure that they are created if they are missing.\n        The ds_util method mkdir will be used to check if the folder\n        exists. If this throws and exception \'FileAlreadyExistsException\'\n        then the folder already exists on the datastore.\n        """'
newline|'\n'
name|'path'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'('
name|'ds_name'
op|','
name|'folder'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'path'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Folder %s created."'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileAlreadyExistsException'
op|':'
newline|'\n'
comment|'# NOTE(hartsocks): if the folder already exists, that'
nl|'\n'
comment|'# just means the folder was prepped by another process.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|check_cache_folder
dedent|''
dedent|''
name|'def'
name|'check_cache_folder'
op|'('
name|'self'
op|','
name|'ds_name'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the cache folder exists."""'
newline|'\n'
name|'self'
op|'.'
name|'_create_folder_if_missing'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'self'
op|'.'
name|'_base_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_temp_folder
dedent|''
name|'def'
name|'check_temp_folder'
op|'('
name|'self'
op|','
name|'ds_name'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the temp folder exists."""'
newline|'\n'
name|'self'
op|'.'
name|'_create_folder_if_missing'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'self'
op|'.'
name|'_tmp_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_if_folder_file_exists
dedent|''
name|'def'
name|'_check_if_folder_file_exists'
op|'('
name|'self'
op|','
name|'ds_browser'
op|','
name|'ds_ref'
op|','
name|'ds_name'
op|','
nl|'\n'
name|'folder_name'
op|','
name|'file_name'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that the cache folder exists'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'check_cache_folder'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|')'
newline|'\n'
comment|'# Check if the file exists or not.'
nl|'\n'
name|'folder_ds_path'
op|'='
name|'ds_util'
op|'.'
name|'DatastorePath'
op|'('
name|'ds_name'
op|','
name|'folder_name'
op|')'
newline|'\n'
name|'return'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
name|'folder_ds_path'
op|','
name|'file_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""inject network info for specified instance."""'
newline|'\n'
comment|'# Set the machine.id parameter of the instance to inject'
nl|'\n'
comment|'# the NIC configuration inside the VM'
nl|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'self'
op|'.'
name|'_set_machine_id'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|manage_image_cache
dedent|''
name|'def'
name|'manage_image_cache'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'remove_unused_base_images'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Image aging disabled. Aging will not be done."'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'datastores'
op|'='
name|'ds_util'
op|'.'
name|'get_available_datastores'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
newline|'\n'
name|'datastores_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ds'
name|'in'
name|'datastores'
op|':'
newline|'\n'
indent|'            '
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'datastores_info'
op|'.'
name|'append'
op|'('
op|'('
name|'ds'
op|','
name|'dc_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_imagecache'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instances'
op|','
name|'datastores_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_valid_vms_from_retrieve_result
dedent|''
name|'def'
name|'_get_valid_vms_from_retrieve_result'
op|'('
name|'self'
op|','
name|'retrieve_result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of valid vms from RetrieveResult object."""'
newline|'\n'
name|'lst_vm_names'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'while'
name|'retrieve_result'
op|':'
newline|'\n'
indent|'            '
name|'token'
op|'='
name|'vm_util'
op|'.'
name|'_get_token'
op|'('
name|'retrieve_result'
op|')'
newline|'\n'
name|'for'
name|'vm'
name|'in'
name|'retrieve_result'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'                '
name|'vm_name'
op|'='
name|'None'
newline|'\n'
name|'conn_state'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'prop'
name|'in'
name|'vm'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"name"'
op|':'
newline|'\n'
indent|'                        '
name|'vm_name'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"runtime.connectionState"'
op|':'
newline|'\n'
indent|'                        '
name|'conn_state'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
comment|'# Ignoring the orphaned or inaccessible VMs'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'conn_state'
name|'not'
name|'in'
op|'['
string|'"orphaned"'
op|','
string|'"inaccessible"'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'lst_vm_names'
op|'.'
name|'append'
op|'('
name|'vm_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'                '
name|'retrieve_result'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"continue_to_get_objects"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'lst_vm_names'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|attach_interface
dedent|''
dedent|''
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an interface to the instance."""'
newline|'\n'
name|'vif_model'
op|'='
name|'image_meta'
op|'.'
name|'get'
op|'('
string|'"hw_vif_model"'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'DEFAULT_VIF_MODEL'
op|')'
newline|'\n'
name|'vif_model'
op|'='
name|'vm_util'
op|'.'
name|'convert_vif_model'
op|'('
name|'vif_model'
op|')'
newline|'\n'
name|'vif_info'
op|'='
name|'vmwarevif'
op|'.'
name|'get_vif_dict'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'vif_model'
op|','
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|','
name|'vif'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Ensure that there is not a race with the port index management'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-hot-plug'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port_index'
op|'='
name|'vm_util'
op|'.'
name|'get_attach_port_index'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'attach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_network_attach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'vif_info'
op|','
name|'port_index'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM to attach interface"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'attach_config_spec'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Attaching network adapter failed. Exception: '"
nl|'\n'
string|"' %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM to attach interface"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_interface
dedent|''
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach an interface from the instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Ensure that there is not a race with the port index management'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-hot-plug'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port_index'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_detach_port_index'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'port_index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"No device with interface-id %s exists on "'
nl|'\n'
string|'"VM"'
op|')'
op|'%'
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
name|'device'
op|'='
name|'vmwarevif'
op|'.'
name|'get_network_device'
op|'('
name|'hardware_devices'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'device'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"No device with MAC address %s exists on the "'
nl|'\n'
string|'"VM"'
op|')'
op|'%'
name|'vif'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'detach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_network_detach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'device'
op|','
name|'port_index'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM to detach interface"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'detach_config_spec'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Detaching network adapter failed. Exception: '"
nl|'\n'
string|"'%s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceDetachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM to detach interface"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_use_disk_image_as_full_clone
dedent|''
name|'def'
name|'_use_disk_image_as_full_clone'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses cached image disk by copying it into the VM directory."""'
newline|'\n'
nl|'\n'
name|'instance_folder'
op|'='
name|'vi'
op|'.'
name|'instance_name'
newline|'\n'
name|'root_disk_name'
op|'='
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'instance_name'
newline|'\n'
name|'root_disk_ds_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'instance_folder'
op|','
nl|'\n'
name|'root_disk_name'
op|')'
newline|'\n'
nl|'\n'
name|'vm_util'
op|'.'
name|'copy_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_extend_if_required'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'ii'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sized_image_exists
dedent|''
name|'def'
name|'_sized_image_exists'
op|'('
name|'self'
op|','
name|'sized_disk_ds_loc'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'return'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
name|'sized_disk_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'sized_disk_ds_loc'
op|'.'
name|'basename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_use_disk_image_as_linked_clone
dedent|''
name|'def'
name|'_use_disk_image_as_linked_clone'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses cached image as parent of a COW child in the VM directory."""'
newline|'\n'
nl|'\n'
name|'sized_image_disk_name'
op|'='
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
newline|'\n'
name|'if'
name|'vi'
op|'.'
name|'root_gb'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'sized_image_disk_name'
op|'='
string|'"%s.%s.vmdk"'
op|'%'
op|'('
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
dedent|''
name|'sized_disk_ds_loc'
op|'='
name|'vi'
op|'.'
name|'cache_image_folder'
op|'.'
name|'join'
op|'('
name|'sized_image_disk_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure only a single thread extends the image at once.'
nl|'\n'
comment|'# We do this by taking a lock on the name of the extended'
nl|'\n'
comment|'# image. This allows multiple threads to create resized'
nl|'\n'
comment|'# copies simultaneously, as long as they are different'
nl|'\n'
comment|'# sizes. Threads attempting to create the same resized copy'
nl|'\n'
comment|'# will be serialized, with only the first actually creating'
nl|'\n'
comment|'# the copy.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that the object is in a per-nova cache directory,'
nl|'\n'
comment|'# so inter-nova locking is not a concern. Consequently we'
nl|'\n'
comment|'# can safely use simple thread locks.'
nl|'\n'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-image'"
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_sized_image_exists'
op|'('
name|'sized_disk_ds_loc'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copying root disk of size %sGb"'
op|','
name|'vi'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'vm_util'
op|'.'
name|'copy_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Root disk file creation "'
nl|'\n'
string|'"failed - %s"'
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Failed to copy cached '"
nl|'\n'
string|"'image %(source)s to '"
nl|'\n'
string|"'%(dest)s for resize: '"
nl|'\n'
string|"'%(error)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'source'"
op|':'
name|'vi'
op|'.'
name|'cache_image_path'
op|','
nl|'\n'
string|"'dest'"
op|':'
name|'sized_disk_ds_loc'
op|','
nl|'\n'
string|"'error'"
op|':'
name|'e'
op|'.'
name|'message'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'ds_util'
op|'.'
name|'file_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'sized_disk_ds_loc'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileNotFoundException'
op|':'
newline|'\n'
comment|'# File was never created: cleanup not'
nl|'\n'
comment|'# required'
nl|'\n'
indent|'                            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Resize the copy to the appropriate size. No need'
nl|'\n'
comment|'# for cleanup up here, as _extend_virtual_disk'
nl|'\n'
comment|'# already does it'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_extend_if_required'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'ii'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Associate the sized image disk to the VM by attaching to the VM a'
nl|'\n'
comment|'# COW child of said disk.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'linked_clone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_use_iso_image
dedent|''
name|'def'
name|'_use_iso_image'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses cached image as a bootable virtual cdrom."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_attach_cdrom_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Optionally create and attach blank disk'
nl|'\n'
name|'if'
name|'vi'
op|'.'
name|'root_gb'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'instance_folder'
op|'='
name|'vi'
op|'.'
name|'instance_name'
newline|'\n'
name|'root_disk_name'
op|'='
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'instance_name'
newline|'\n'
name|'root_disk_ds_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'instance_folder'
op|','
nl|'\n'
name|'root_disk_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# It is pointless to COW a blank disk'
nl|'\n'
name|'linked_clone'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'vm_util'
op|'.'
name|'create_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|','
name|'linked_clone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_datacenter_cache_from_objects
dedent|''
dedent|''
name|'def'
name|'_update_datacenter_cache_from_objects'
op|'('
name|'self'
op|','
name|'dcs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the datastore/datacenter cache."""'
newline|'\n'
nl|'\n'
name|'while'
name|'dcs'
op|':'
newline|'\n'
indent|'            '
name|'token'
op|'='
name|'vm_util'
op|'.'
name|'_get_token'
op|'('
name|'dcs'
op|')'
newline|'\n'
name|'for'
name|'dco'
name|'in'
name|'dcs'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'                '
name|'dc_ref'
op|'='
name|'dco'
op|'.'
name|'obj'
newline|'\n'
name|'ds_refs'
op|'='
op|'['
op|']'
newline|'\n'
name|'prop_dict'
op|'='
name|'vm_util'
op|'.'
name|'propset_dict'
op|'('
name|'dco'
op|'.'
name|'propSet'
op|')'
newline|'\n'
name|'name'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'vmFolder'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'vmFolder'"
op|')'
newline|'\n'
name|'datastore_refs'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'datastore'"
op|')'
newline|'\n'
name|'if'
name|'datastore_refs'
op|':'
newline|'\n'
indent|'                    '
name|'datastore_refs'
op|'='
name|'datastore_refs'
op|'.'
name|'ManagedObjectReference'
newline|'\n'
name|'for'
name|'ds'
name|'in'
name|'datastore_refs'
op|':'
newline|'\n'
indent|'                        '
name|'ds_refs'
op|'.'
name|'append'
op|'('
name|'ds'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Datacenter %s doesn\'t have any datastore "'
nl|'\n'
string|'"associated with it, ignoring it"'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'ds_ref'
name|'in'
name|'ds_refs'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_datastore_dc_mapping'
op|'['
name|'ds_ref'
op|']'
op|'='
name|'DcInfo'
op|'('
name|'ref'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|','
name|'vmFolder'
op|'='
name|'vmFolder'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'                '
name|'dcs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"continue_to_get_objects"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
DECL|member|get_datacenter_ref_and_name
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_datacenter_ref_and_name'
op|'('
name|'self'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the datacenter name and the reference."""'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'_datastore_dc_mapping'
op|'.'
name|'get'
op|'('
name|'ds_ref'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'dc_info'
op|':'
newline|'\n'
indent|'            '
name|'dcs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datacenter"'
op|','
op|'['
string|'"name"'
op|','
string|'"datastore"'
op|','
string|'"vmFolder"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_datacenter_cache_from_objects'
op|'('
name|'dcs'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'_datastore_dc_mapping'
op|'.'
name|'get'
op|'('
name|'ds_ref'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'dc_info'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lists the VM instances that are registered with vCenter cluster."""'
newline|'\n'
name|'properties'
op|'='
op|'['
string|"'name'"
op|','
string|"'runtime.connectionState'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting list of instances from cluster %s"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|')'
newline|'\n'
name|'vms'
op|'='
op|'['
op|']'
newline|'\n'
name|'root_res_pool'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
string|"'ClusterComputeResource'"
op|','
string|"'resourcePool'"
op|')'
newline|'\n'
name|'if'
name|'root_res_pool'
op|':'
newline|'\n'
indent|'            '
name|'vms'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|"'get_inner_objects'"
op|','
name|'root_res_pool'
op|','
string|"'vm'"
op|','
nl|'\n'
string|"'VirtualMachine'"
op|','
name|'properties'
op|')'
newline|'\n'
dedent|''
name|'lst_vm_names'
op|'='
name|'self'
op|'.'
name|'_get_valid_vms_from_retrieve_result'
op|'('
name|'vms'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Got total of %s instances"'
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'lst_vm_names'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'lst_vm_names'
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console using vCenter logic."""'
newline|'\n'
nl|'\n'
comment|'# vCenter does not run virtual machines and does not run'
nl|'\n'
comment|'# a VNC proxy. Instead, you need to tell OpenStack to talk'
nl|'\n'
comment|'# directly to the ESX host running the VM you are attempting'
nl|'\n'
comment|'# to connect to via VNC.'
nl|'\n'
nl|'\n'
name|'vnc_console'
op|'='
name|'self'
op|'.'
name|'_get_vnc_console_connection'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'host_name'
op|'='
name|'vm_util'
op|'.'
name|'get_host_name_for_vm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'vnc_console'
op|'['
string|"'host'"
op|']'
op|'='
name|'host_name'
newline|'\n'
nl|'\n'
comment|'# NOTE: VM can move hosts in some situations. Debug for admins.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM %(uuid)s is currently on host %(host_name)s"'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
string|"'host_name'"
op|':'
name|'host_name'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'ctype'
op|'.'
name|'ConsoleVNC'
op|'('
op|'**'
name|'vnc_console'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nClass for VM tasks like spawn, snapshot, suspend, resume etc.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'urllib2'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vmware_images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'network_utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|vmware_vif_driver_opt
name|'vmware_vif_driver_opt'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'vmware_vif_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.vmwareapi.vif.VMWareVlanBridgeDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The VMWare VIF driver to configure the VIFs.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'vmware_vif_driver_opt'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|VMWARE_POWER_STATES
name|'VMWARE_POWER_STATES'
op|'='
op|'{'
nl|'\n'
string|"'poweredOff'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
string|"'poweredOn'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'suspended'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMWareVMOps
name|'class'
name|'VMWareVMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Management class for VM-related tasks."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializer."""'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'self'
op|'.'
name|'_vif_driver'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'vmware_vif_driver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lists the VM instances that are registered with the ESX host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Getting list of instances"'
op|')'
op|')'
newline|'\n'
name|'vms'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
nl|'\n'
op|'['
string|'"name"'
op|','
string|'"runtime.connectionState"'
op|']'
op|')'
newline|'\n'
name|'lst_vm_names'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vm'
name|'in'
name|'vms'
op|':'
newline|'\n'
indent|'            '
name|'vm_name'
op|'='
name|'None'
newline|'\n'
name|'conn_state'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'prop'
name|'in'
name|'vm'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"name"'
op|':'
newline|'\n'
indent|'                    '
name|'vm_name'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"runtime.connectionState"'
op|':'
newline|'\n'
indent|'                    '
name|'conn_state'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
comment|'# Ignoring the oprhaned or inaccessible VMs'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'conn_state'
name|'not'
name|'in'
op|'['
string|'"orphaned"'
op|','
string|'"inaccessible"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'lst_vm_names'
op|'.'
name|'append'
op|'('
name|'vm_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Got total of %s instances"'
op|')'
op|'%'
name|'str'
op|'('
name|'len'
op|'('
name|'lst_vm_names'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'lst_vm_names'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a VM instance.\n\n        Steps followed are:\n        1. Create a VM with no disk and the specifics in the instance object\n            like RAM size.\n        2. Create a dummy vmdk of the size of the disk file that is to be\n            uploaded. This is required just to create the metadata file.\n        3. Delete the -flat.vmdk file created in the above step and retain\n            the metadata .vmdk file.\n        4. Upload the disk file.\n        5. Attach the disk to the VM by reconfiguring the same.\n        6. Power on the VM.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'service_content'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_get_datastore_ref
name|'def'
name|'_get_datastore_ref'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Get the datastore list and choose the first local storage."""'
newline|'\n'
name|'data_stores'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datastore"'
op|','
op|'['
string|'"summary.type"'
op|','
string|'"summary.name"'
op|']'
op|')'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'data_stores'
op|':'
newline|'\n'
indent|'                '
name|'ds_name'
op|'='
name|'None'
newline|'\n'
name|'ds_type'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"summary.type"'
op|':'
newline|'\n'
indent|'                        '
name|'ds_type'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"summary.name"'
op|':'
newline|'\n'
indent|'                        '
name|'ds_name'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
comment|'# Local storage identifier'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ds_type'
op|'=='
string|'"VMFS"'
op|':'
newline|'\n'
indent|'                    '
name|'data_store_name'
op|'='
name|'ds_name'
newline|'\n'
name|'return'
name|'data_store_name'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'data_store_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Couldn\'t get a local Datastore reference"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'data_store_name'
op|'='
name|'_get_datastore_ref'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_get_image_properties
name|'def'
name|'_get_image_properties'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Get the Size of the flat vmdk file that is there on the storage\n            repository.\n            """'
newline|'\n'
name|'_image_info'
op|'='
name|'vmware_images'
op|'.'
name|'get_vmdk_size_and_properties'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'image_size'
op|','
name|'image_properties'
op|'='
name|'_image_info'
newline|'\n'
name|'vmdk_file_size_in_kb'
op|'='
name|'int'
op|'('
name|'image_size'
op|')'
op|'/'
number|'1024'
newline|'\n'
name|'os_type'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|'"vmware_ostype"'
op|','
string|'"otherGuest"'
op|')'
newline|'\n'
name|'adapter_type'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|'"vmware_adaptertype"'
op|','
nl|'\n'
string|'"lsiLogic"'
op|')'
newline|'\n'
name|'return'
name|'vmdk_file_size_in_kb'
op|','
name|'os_type'
op|','
name|'adapter_type'
newline|'\n'
nl|'\n'
dedent|''
name|'vmdk_file_size_in_kb'
op|','
name|'os_type'
op|','
name|'adapter_type'
op|'='
name|'_get_image_properties'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_get_vmfolder_and_res_pool_mors
name|'def'
name|'_get_vmfolder_and_res_pool_mors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Get the Vm folder ref from the datacenter."""'
newline|'\n'
name|'dc_objs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datacenter"'
op|','
op|'['
string|'"vmFolder"'
op|']'
op|')'
newline|'\n'
comment|'# There is only one default datacenter in a standalone ESX host'
nl|'\n'
name|'vm_folder_mor'
op|'='
name|'dc_objs'
op|'['
number|'0'
op|']'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
newline|'\n'
nl|'\n'
comment|'# Get the resource pool. Taking the first resource pool coming our'
nl|'\n'
comment|'# way. Assuming that is the default resource pool.'
nl|'\n'
name|'res_pool_mor'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ResourcePool"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\n'
name|'return'
name|'vm_folder_mor'
op|','
name|'res_pool_mor'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_folder_mor'
op|','
name|'res_pool_mor'
op|'='
name|'_get_vmfolder_and_res_pool_mors'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check_if_network_bridge_exists
name|'def'
name|'_check_if_network_bridge_exists'
op|'('
name|'network_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_ref'
op|'='
name|'network_utils'
op|'.'
name|'get_network_with_the_name'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'network_name'
op|')'
newline|'\n'
name|'if'
name|'network_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NetworkNotFoundForBridge'
op|'('
name|'bridge'
op|'='
name|'network_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'network_ref'
newline|'\n'
nl|'\n'
DECL|function|_get_vif_infos
dedent|''
name|'def'
name|'_get_vif_infos'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif_infos'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'mac_address'
op|'='
name|'mapping'
op|'['
string|"'mac'"
op|']'
newline|'\n'
name|'network_name'
op|'='
name|'network'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
name|'if'
name|'mapping'
op|'.'
name|'get'
op|'('
string|"'should_create_vlan'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'_vif_driver'
op|'.'
name|'ensure_vlan_bridge'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'network'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'network_ref'
op|'='
name|'_check_if_network_bridge_exists'
op|'('
name|'network_name'
op|')'
newline|'\n'
dedent|''
name|'vif_infos'
op|'.'
name|'append'
op|'('
op|'{'
string|"'network_name'"
op|':'
name|'network_name'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
name|'mac_address'
op|','
nl|'\n'
string|"'network_ref'"
op|':'
name|'network_ref'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vif_infos'
newline|'\n'
nl|'\n'
dedent|''
name|'vif_infos'
op|'='
name|'_get_vif_infos'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the create vm config spec'
nl|'\n'
name|'config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_create_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'instance'
op|','
nl|'\n'
name|'data_store_name'
op|','
name|'vif_infos'
op|','
name|'os_type'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_execute_create_vm
name|'def'
name|'_execute_create_vm'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Create VM on ESX host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating VM with the name %s on the ESX  host"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|'# Create the VM on the ESX host'
nl|'\n'
name|'vm_create_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"CreateVM_Task"'
op|','
name|'vm_folder_mor'
op|','
nl|'\n'
name|'config'
op|'='
name|'config_spec'
op|','
name|'pool'
op|'='
name|'res_pool_mor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'vm_create_task'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Created VM with the name %s on the ESX  host"'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_execute_create_vm'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the machine.id parameter of the instance to inject'
nl|'\n'
comment|'# the NIC configuration inside the VM'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'flat_injected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_machine_id'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Naming the VM files in correspondence with the VM instance name'
nl|'\n'
comment|'# The flat vmdk file name'
nl|'\n'
dedent|''
name|'flat_uploaded_vmdk_name'
op|'='
string|'"%s/%s-flat.vmdk"'
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|'# The vmdk meta-data file'
nl|'\n'
name|'uploaded_vmdk_name'
op|'='
string|'"%s/%s.vmdk"'
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'flat_uploaded_vmdk_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'data_store_name'
op|','
nl|'\n'
name|'flat_uploaded_vmdk_name'
op|')'
newline|'\n'
name|'uploaded_vmdk_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'data_store_name'
op|','
nl|'\n'
name|'uploaded_vmdk_name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_create_virtual_disk
name|'def'
name|'_create_virtual_disk'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Create a virtual disk of the size of flat vmdk file."""'
newline|'\n'
comment|'# Create a Virtual Disk of the size of the flat vmdk file. This is'
nl|'\n'
comment|'# done just to generate the meta-data file whose specifics'
nl|'\n'
comment|'# depend on the size of the disk, thin/thick provisioning and the'
nl|'\n'
comment|'# storage adapter type.'
nl|'\n'
comment|'# Here we assume thick provisioning and lsiLogic for the adapter'
nl|'\n'
comment|'# type'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating Virtual Disk of size  "'
nl|'\n'
string|'"%(vmdk_file_size_in_kb)s KB and adapter type  "'
nl|'\n'
string|'"%(adapter_type)s on the ESX host local store"'
nl|'\n'
string|'" %(data_store_name)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|'"vmdk_file_size_in_kb"'
op|':'
name|'vmdk_file_size_in_kb'
op|','
nl|'\n'
string|'"adapter_type"'
op|':'
name|'adapter_type'
op|','
nl|'\n'
string|'"data_store_name"'
op|':'
name|'data_store_name'
op|'}'
op|')'
newline|'\n'
name|'vmdk_create_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_create_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'vmdk_file_size_in_kb'
op|','
name|'adapter_type'
op|')'
newline|'\n'
name|'vmdk_create_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"CreateVirtualDisk_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'uploaded_vmdk_path'
op|','
nl|'\n'
name|'datacenter'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'spec'
op|'='
name|'vmdk_create_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'vmdk_create_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Created Virtual Disk of size %(vmdk_file_size_in_kb)s"'
nl|'\n'
string|'" KB on the ESX host local store "'
nl|'\n'
string|'"%(data_store_name)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|'"vmdk_file_size_in_kb"'
op|':'
name|'vmdk_file_size_in_kb'
op|','
nl|'\n'
string|'"data_store_name"'
op|':'
name|'data_store_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_create_virtual_disk'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_delete_disk_file
name|'def'
name|'_delete_disk_file'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting the file %(flat_uploaded_vmdk_path)s "'
nl|'\n'
string|'"on the ESX host local"'
nl|'\n'
string|'"store %(data_store_name)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|'"flat_uploaded_vmdk_path"'
op|':'
name|'flat_uploaded_vmdk_path'
op|','
nl|'\n'
string|'"data_store_name"'
op|':'
name|'data_store_name'
op|'}'
op|')'
newline|'\n'
comment|'# Delete the -flat.vmdk file created. .vmdk file is retained.'
nl|'\n'
name|'vmdk_delete_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"DeleteDatastoreFile_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'fileManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'flat_uploaded_vmdk_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'vmdk_delete_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleted the file %(flat_uploaded_vmdk_path)s on the "'
nl|'\n'
string|'"ESX host local store %(data_store_name)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|'"flat_uploaded_vmdk_path"'
op|':'
name|'flat_uploaded_vmdk_path'
op|','
nl|'\n'
string|'"data_store_name"'
op|':'
name|'data_store_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_delete_disk_file'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'cookies'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
nl|'\n'
DECL|function|_fetch_image_on_esx_datastore
name|'def'
name|'_fetch_image_on_esx_datastore'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Fetch image from Glance to ESX datastore."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Downloading image file data %(image_ref)s to the ESX "'
nl|'\n'
string|'"data store %(data_store_name)s"'
op|')'
op|'%'
nl|'\n'
op|'('
op|'{'
string|"'image_ref'"
op|':'
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
string|"'data_store_name'"
op|':'
name|'data_store_name'
op|'}'
op|')'
op|')'
newline|'\n'
comment|'# Upload the -flat.vmdk file whose meta-data file we just created'
nl|'\n'
comment|'# above'
nl|'\n'
name|'vmware_images'
op|'.'
name|'fetch_image'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_ip'
op|','
nl|'\n'
name|'data_center_name'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'datastore_name'
op|'='
name|'data_store_name'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'flat_uploaded_vmdk_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Downloaded image file data %(image_ref)s to the ESX "'
nl|'\n'
string|'"data store %(data_store_name)s"'
op|')'
op|'%'
nl|'\n'
op|'('
op|'{'
string|"'image_ref'"
op|':'
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
string|"'data_store_name'"
op|':'
name|'data_store_name'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
name|'_fetch_image_on_esx_datastore'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_attach_vmdk_to_the_vm
name|'def'
name|'_attach_vmdk_to_the_vm'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Attach the vmdk uploaded to the VM. VM reconfigure is done\n            to do so.\n            """'
newline|'\n'
name|'vmdk_attach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_attach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
nl|'\n'
name|'vmdk_file_size_in_kb'
op|','
name|'uploaded_vmdk_path'
op|','
nl|'\n'
name|'adapter_type'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Reconfiguring VM instance %s to attach the image "'
nl|'\n'
string|'"disk"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'reconfig_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"ReconfigVM_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'spec'
op|'='
name|'vmdk_attach_config_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'reconfig_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Reconfigured VM instance %s to attach the image "'
nl|'\n'
string|'"disk"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_attach_vmdk_to_the_vm'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_power_on_vm
name|'def'
name|'_power_on_vm'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Power on the VM."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Powering on the VM instance %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|'# Power On the VM'
nl|'\n'
name|'power_on_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'power_on_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Powered on the VM instance %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'_power_on_vm'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'snapshot_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create snapshot from a running VM instance.\n        Steps followed are:\n        1. Get the name of the vmdk file which the VM points to right now.\n            Can be a chain of snapshots, so we need to know the last in the\n            chain.\n        2. Create the snapshot. A new vmdk is created which the VM points to\n            now. The earlier vmdk becomes read-only.\n        3. Call CopyVirtualDisk which coalesces the disk chain to form a single\n            vmdk, rather a .vmdk metadata file and a -flat.vmdk disk data file.\n        4. Now upload the -flat.vmdk file to the image store.\n        5. Delete the coalesced .vmdk and -flat.vmdk created.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'service_content'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_get_vm_and_vmdk_attribs
name|'def'
name|'_get_vm_and_vmdk_attribs'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Get the vmdk file name that the VM is pointing to'
nl|'\n'
indent|'            '
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\n'
name|'_vmdk_info'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_file_path_and_adapter_type'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'hardware_devices'
op|')'
newline|'\n'
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|'='
name|'_vmdk_info'
newline|'\n'
name|'datastore_name'
op|'='
name|'vm_util'
op|'.'
name|'split_datastore_path'
op|'('
nl|'\n'
name|'vmdk_file_path_before_snapshot'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'os_type'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"summary.config.guestId"'
op|')'
newline|'\n'
name|'return'
op|'('
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|','
nl|'\n'
name|'datastore_name'
op|','
name|'os_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|','
name|'datastore_name'
op|','
nl|'\n'
name|'os_type'
op|')'
op|'='
name|'_get_vm_and_vmdk_attribs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_create_vm_snapshot
name|'def'
name|'_create_vm_snapshot'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Create a snapshot of the VM'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating Snapshot of the VM instance %s "'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'snapshot_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"CreateSnapshot_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'name'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'description'
op|'='
string|'"Taking Snapshot of the VM"'
op|','
nl|'\n'
name|'memory'
op|'='
name|'True'
op|','
nl|'\n'
name|'quiesce'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'snapshot_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Created Snapshot of the VM instance %s "'
op|')'
op|'%'
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_create_vm_snapshot'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check_if_tmp_folder_exists
name|'def'
name|'_check_if_tmp_folder_exists'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Copy the contents of the VM that were there just before the'
nl|'\n'
comment|'# snapshot was taken'
nl|'\n'
indent|'            '
name|'ds_ref_ret'
op|'='
name|'vim_util'
op|'.'
name|'get_dynamic_property'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
nl|'\n'
string|'"datastore"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds_ref_ret'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'DatastoreNotFound'
op|'('
op|')'
newline|'\n'
dedent|''
name|'ds_ref'
op|'='
name|'ds_ref_ret'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
name|'ds_browser'
op|'='
name|'vim_util'
op|'.'
name|'get_dynamic_property'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
name|'ds_ref'
op|','
nl|'\n'
string|'"Datastore"'
op|','
nl|'\n'
string|'"browser"'
op|')'
newline|'\n'
comment|'# Check if the vmware-tmp folder exists or not. If not, create one'
nl|'\n'
name|'tmp_folder_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'datastore_name'
op|','
nl|'\n'
string|'"vmware-tmp"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_path_exists'
op|'('
name|'ds_browser'
op|','
name|'tmp_folder_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_mkdir'
op|'('
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'datastore_name'
op|','
nl|'\n'
string|'"vmware-tmp"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'_check_if_tmp_folder_exists'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Generate a random vmdk file name to which the coalesced vmdk content'
nl|'\n'
comment|"# will be copied to. A random name is chosen so that we don't have"
nl|'\n'
comment|'# name clashes.'
nl|'\n'
name|'random_name'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'dest_vmdk_file_location'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'datastore_name'
op|','
nl|'\n'
string|'"vmware-tmp/%s.vmdk"'
op|'%'
name|'random_name'
op|')'
newline|'\n'
name|'dc_ref'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|function|_copy_vmdk_content
name|'def'
name|'_copy_vmdk_content'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Copy the contents of the disk ( or disks, if there were snapshots'
nl|'\n'
comment|'# done earlier) to a temporary vmdk file.'
nl|'\n'
indent|'            '
name|'copy_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_copy_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'adapter_type'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Copying disk data before snapshot of the VM "'
nl|'\n'
string|'" instance %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'copy_disk_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"CopyVirtualDisk_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'sourceName'
op|'='
name|'vmdk_file_path_before_snapshot'
op|','
nl|'\n'
name|'sourceDatacenter'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'destName'
op|'='
name|'dest_vmdk_file_location'
op|','
nl|'\n'
name|'destDatacenter'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'destSpec'
op|'='
name|'copy_spec'
op|','
nl|'\n'
name|'force'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'copy_disk_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Copied disk data before snapshot of the VM "'
nl|'\n'
string|'"instance %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_copy_vmdk_content'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'cookies'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
nl|'\n'
DECL|function|_upload_vmdk_to_image_repository
name|'def'
name|'_upload_vmdk_to_image_repository'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Upload the contents of -flat.vmdk file which has the disk data.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Uploading image %s"'
op|')'
op|'%'
name|'snapshot_name'
op|')'
newline|'\n'
name|'vmware_images'
op|'.'
name|'upload_image'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'snapshot_name'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'os_type'
op|'='
name|'os_type'
op|','
nl|'\n'
name|'adapter_type'
op|'='
name|'adapter_type'
op|','
nl|'\n'
name|'image_version'
op|'='
number|'1'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_ip'
op|','
nl|'\n'
name|'data_center_name'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'datastore_name'
op|'='
name|'datastore_name'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|','
nl|'\n'
name|'file_path'
op|'='
string|'"vmware-tmp/%s-flat.vmdk"'
op|'%'
name|'random_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Uploaded image %s"'
op|')'
op|'%'
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_upload_vmdk_to_image_repository'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_clean_temp_data
name|'def'
name|'_clean_temp_data'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Delete temporary vmdk files generated in image handling\n            operations.\n            """'
newline|'\n'
comment|'# Delete the temporary vmdk created above.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting temporary vmdk file %s"'
op|')'
nl|'\n'
op|'%'
name|'dest_vmdk_file_location'
op|')'
newline|'\n'
name|'remove_disk_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"DeleteVirtualDisk_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'dest_vmdk_file_location'
op|','
nl|'\n'
name|'datacenter'
op|'='
name|'dc_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'remove_disk_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleted temporary vmdk file %s"'
op|')'
nl|'\n'
op|'%'
name|'dest_vmdk_file_location'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_clean_temp_data'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot a VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.guest.toolsStatus"'
op|','
string|'"runtime.powerState"'
op|','
nl|'\n'
string|'"summary.guest.toolsRunningStatus"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_object_properties"'
op|','
nl|'\n'
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'None'
newline|'\n'
name|'tools_status'
op|'='
name|'None'
newline|'\n'
name|'tools_running_status'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'props'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"runtime.powerState"'
op|':'
newline|'\n'
indent|'                    '
name|'pwr_state'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"summary.guest.toolsStatus"'
op|':'
newline|'\n'
indent|'                    '
name|'tools_status'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"summary.guest.toolsRunningStatus"'
op|':'
newline|'\n'
indent|'                    '
name|'tools_running_status'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
nl|'\n'
comment|'# Raise an exception if the VM is not powered On.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'pwr_state'
name|'not'
name|'in'
op|'['
string|'"poweredOn"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is not powered on"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceRebootFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'# If latest vmware tools are installed in the VM, and that the tools'
nl|'\n'
comment|'# are running, then only do a guest reboot. Otherwise do a hard reset.'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'tools_status'
op|'=='
string|'"toolsOk"'
name|'and'
nl|'\n'
name|'tools_running_status'
op|'=='
string|'"guestToolsRunning"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Rebooting guest OS of VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"RebootGuest"'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Rebooted guest OS of VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Doing hard reboot of VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'reset_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"ResetVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'reset_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Did hard reboot of VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Destroy a VM instance. Steps followed are:\n        1. Power off the VM, if it is in poweredOn state.\n        2. Un-register a VM.\n        3. Delete the contents of the folder holding the VM related data.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance - %s not present"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"config.files.vmPathName"'
op|','
string|'"runtime.powerState"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_object_properties"'
op|','
nl|'\n'
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
name|'lst_properties'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'props'
op|':'
newline|'\n'
indent|'                '
name|'vm_config_pathname'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"runtime.powerState"'
op|':'
newline|'\n'
indent|'                        '
name|'pwr_state'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"config.files.vmPathName"'
op|':'
newline|'\n'
indent|'                        '
name|'vm_config_pathname'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'vm_config_pathname'
op|':'
newline|'\n'
indent|'                '
name|'_ds_path'
op|'='
name|'vm_util'
op|'.'
name|'split_datastore_path'
op|'('
name|'vm_config_pathname'
op|')'
newline|'\n'
name|'datastore_name'
op|','
name|'vmx_file_path'
op|'='
name|'_ds_path'
newline|'\n'
comment|'# Power off the VM if it is in PoweredOn state.'
nl|'\n'
dedent|''
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Powering off the VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'poweroff_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"PowerOffVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'poweroff_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Powered off the VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Un-register the VM'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Unregistering the VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"UnregisterVM"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Unregistered the VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'excep'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"In vmwareapi:vmops:destroy, got this exception"'
nl|'\n'
string|'" while un-registering the VM: %s"'
op|')'
op|'%'
name|'str'
op|'('
name|'excep'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_unplug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Delete the folder holding the VM related content on'
nl|'\n'
comment|'# the datastore.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'dir_ds_compliant_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
nl|'\n'
name|'datastore_name'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'vmx_file_path'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting contents of the VM %(name)s from "'
nl|'\n'
string|'"datastore %(datastore_name)s"'
op|')'
op|'%'
nl|'\n'
op|'('
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'datastore_name'"
op|':'
name|'datastore_name'
op|'}'
op|')'
op|')'
newline|'\n'
name|'delete_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"DeleteDatastoreFile_Task"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'fileManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'dir_ds_compliant_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'delete_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleted contents of the VM %(name)s from "'
nl|'\n'
string|'"datastore %(datastore_name)s"'
op|')'
op|'%'
nl|'\n'
op|'('
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'datastore_name'"
op|':'
name|'datastore_name'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'excep'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"In vmwareapi:vmops:destroy, "'
nl|'\n'
string|'"got this exception while deleting"'
nl|'\n'
string|'" the VM contents from the disk: %s"'
op|')'
nl|'\n'
op|'%'
name|'str'
op|'('
name|'excep'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"pause not supported for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"unpause not supported for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\n'
comment|'# Only PoweredOn VMs can be suspended.'
nl|'\n'
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Suspending the VM %s "'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"SuspendVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'suspend_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Suspended the VM %s "'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|'# Raise Exception if VM is poweredOff'
nl|'\n'
dedent|''
name|'elif'
name|'pwr_state'
op|'=='
string|'"poweredOff"'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is powered off and can not be suspended."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceSuspendFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"VM %s was already in suspended state. So returning "'
nl|'\n'
string|'"without doing anything"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\n'
name|'if'
name|'pwr_state'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"suspended"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resuming the VM %s"'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'suspend_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Resumed the VM %s "'
op|')'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is not in a suspended state"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceResumeFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"summary.config.numCpu"'
op|','
nl|'\n'
string|'"summary.config.memorySizeMB"'
op|','
nl|'\n'
string|'"runtime.powerState"'
op|']'
newline|'\n'
name|'vm_props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_object_properties"'
op|','
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'max_mem'
op|'='
name|'None'
newline|'\n'
name|'pwr_state'
op|'='
name|'None'
newline|'\n'
name|'num_cpu'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'vm_props'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"summary.config.numCpu"'
op|':'
newline|'\n'
indent|'                    '
name|'num_cpu'
op|'='
name|'int'
op|'('
name|'prop'
op|'.'
name|'val'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"summary.config.memorySizeMB"'
op|':'
newline|'\n'
comment|'# In MB, but we want in KB'
nl|'\n'
indent|'                    '
name|'max_mem'
op|'='
name|'int'
op|'('
name|'prop'
op|'.'
name|'val'
op|')'
op|'*'
number|'1024'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"runtime.powerState"'
op|':'
newline|'\n'
indent|'                    '
name|'pwr_state'
op|'='
name|'VMWARE_POWER_STATES'
op|'['
name|'prop'
op|'.'
name|'val'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
op|'{'
string|"'state'"
op|':'
name|'pwr_state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"get_diagnostics not implemented for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return snapshot of console."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
dedent|''
name|'param_list'
op|'='
op|'{'
string|'"id"'
op|':'
name|'str'
op|'('
name|'vm_ref'
op|')'
op|'}'
newline|'\n'
name|'base_url'
op|'='
string|'"%s://%s/screen?%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_scheme'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_ip'
op|','
nl|'\n'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'param_list'
op|')'
op|')'
newline|'\n'
name|'request'
op|'='
name|'urllib2'
op|'.'
name|'Request'
op|'('
name|'base_url'
op|')'
newline|'\n'
name|'base64string'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
nl|'\n'
string|"'%s:%s'"
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_username'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_password'
op|')'
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"''"
op|')'
newline|'\n'
name|'request'
op|'.'
name|'add_header'
op|'('
string|'"Authorization"'
op|','
string|'"Basic %s"'
op|'%'
name|'base64string'
op|')'
newline|'\n'
name|'result'
op|'='
name|'urllib2'
op|'.'
name|'urlopen'
op|'('
name|'request'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'.'
name|'code'
op|'=='
number|'200'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|member|_set_machine_id
dedent|''
dedent|''
name|'def'
name|'_set_machine_id'
op|'('
name|'self'
op|','
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the machine id of the VM for guest tools to pick up and reconfigure\n        the network interfaces.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'machine_id_str'
op|'='
string|"''"
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'info'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
comment|'# TODO(vish): add support for dns2'
nl|'\n'
comment|'# TODO(sateesh): add support for injection of ipv6 configuration'
nl|'\n'
indent|'            '
name|'ip_v4'
op|'='
name|'ip_v6'
op|'='
name|'None'
newline|'\n'
name|'if'
string|"'ips'"
name|'in'
name|'info'
name|'and'
name|'len'
op|'('
name|'info'
op|'['
string|"'ips'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'ip_v4'
op|'='
name|'info'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'ip6s'"
name|'in'
name|'info'
name|'and'
name|'len'
op|'('
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'ip_v6'
op|'='
name|'info'
op|'['
string|"'ip6s'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'info'
op|'['
string|"'dns'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'dns'
op|'='
name|'info'
op|'['
string|"'dns'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'dns'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'interface_str'
op|'='
string|'";"'
op|'.'
name|'join'
op|'('
op|'['
name|'info'
op|'['
string|"'mac'"
op|']'
op|','
nl|'\n'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'ip'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'netmask'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
name|'info'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'info'
op|'['
string|"'broadcast'"
op|']'
op|','
nl|'\n'
name|'dns'
op|']'
op|')'
newline|'\n'
name|'machine_id_str'
op|'='
name|'machine_id_str'
op|'+'
name|'interface_str'
op|'+'
string|"'#'"
newline|'\n'
nl|'\n'
dedent|''
name|'machine_id_change_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_machine_id_change_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'machine_id_str'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Reconfiguring VM instance %(name)s to set the machine id "'
nl|'\n'
string|'"with ip - %(ip_addr)s"'
op|')'
op|'%'
nl|'\n'
op|'('
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'ip_addr'"
op|':'
name|'ip_v4'
op|'['
string|"'ip'"
op|']'
op|'}'
op|')'
op|')'
newline|'\n'
name|'reconfig_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"ReconfigVM_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'spec'
op|'='
name|'machine_id_change_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'reconfig_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Reconfigured VM instance %(name)s to set the machine id "'
nl|'\n'
string|'"with ip - %(ip_addr)s"'
op|')'
op|'%'
nl|'\n'
op|'('
op|'{'
string|"'name'"
op|':'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'ip_addr'"
op|':'
name|'ip_v4'
op|'['
string|"'ip'"
op|']'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_datacenter_name_and_ref
dedent|''
name|'def'
name|'_get_datacenter_name_and_ref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the datacenter name and the reference."""'
newline|'\n'
name|'dc_obj'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datacenter"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'dc_obj'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
op|','
name|'dc_obj'
op|'['
number|'0'
op|']'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
newline|'\n'
nl|'\n'
DECL|member|_path_exists
dedent|''
name|'def'
name|'_path_exists'
op|'('
name|'self'
op|','
name|'ds_browser'
op|','
name|'ds_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if the path exists on the datastore."""'
newline|'\n'
name|'search_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"SearchDatastore_Task"'
op|','
nl|'\n'
name|'ds_browser'
op|','
nl|'\n'
name|'datastorePath'
op|'='
name|'ds_path'
op|')'
newline|'\n'
comment|'# Wait till the state changes from queued or running.'
nl|'\n'
comment|"# If an error state is returned, it means that the path doesn't exist."
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'task_info'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'search_task'
op|','
string|'"Task"'
op|','
string|'"info"'
op|')'
newline|'\n'
name|'if'
name|'task_info'
op|'.'
name|'state'
name|'in'
op|'['
string|"'queued'"
op|','
string|"'running'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'2'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'task_info'
op|'.'
name|'state'
op|'=='
string|'"error"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_mkdir
dedent|''
name|'def'
name|'_mkdir'
op|'('
name|'self'
op|','
name|'ds_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a directory at the path specified. If it is just "NAME",\n        then a directory with this name is created at the topmost level of the\n        DataStore.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating directory with path %s"'
op|')'
op|'%'
name|'ds_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"MakeDirectory"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'fileManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'ds_path'
op|','
name|'createParentDirectories'
op|'='
name|'False'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Created directory with path %s"'
op|')'
op|'%'
name|'ds_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_ref_from_the_name
dedent|''
name|'def'
name|'_get_vm_ref_from_the_name'
op|'('
name|'self'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get reference to the VM with the name specified."""'
newline|'\n'
name|'vms'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'for'
name|'vm'
name|'in'
name|'vms'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'vm_name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vm'
op|'.'
name|'obj'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|plug_vifs
dedent|''
name|'def'
name|'plug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug VIFs into networks."""'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vif_driver'
op|'.'
name|'plug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unplug_vifs
dedent|''
dedent|''
name|'def'
name|'_unplug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug VIFs from networks."""'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vif_driver'
op|'.'
name|'unplug'
op|'('
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

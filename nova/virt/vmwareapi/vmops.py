begin_unit
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2012 VMware, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nClass for VM tasks like spawn, snapshot, suspend, resume etc.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'decorator'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'exceptions'
name|'as'
name|'vexc'
newline|'\n'
name|'from'
name|'oslo_vmware'
op|'.'
name|'objects'
name|'import'
name|'datastore'
name|'as'
name|'ds_obj'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'vim_util'
name|'as'
name|'vutil'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'metadata'
name|'import'
name|'base'
name|'as'
name|'instance_metadata'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'console'
name|'import'
name|'type'
name|'as'
name|'ctype'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
op|','
name|'_LI'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'version'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'diagnostics'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'ds_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'error_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'imagecache'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vif'
name|'as'
name|'vmwarevif'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\n'
nl|'\n'
DECL|variable|vmops_opts
name|'vmops_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'cache_prefix'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The prefix for where cached images are stored. This is '"
nl|'\n'
string|"'NOT the full path - just a folder prefix. '"
nl|'\n'
string|"'This should only be used when a datastore cache should '"
nl|'\n'
string|"'be shared between compute nodes. Note: this should only '"
nl|'\n'
string|"'be used when the compute nodes have a shared file '"
nl|'\n'
string|"'system.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'vmops_opts'
op|','
string|"'vmware'"
op|')'
newline|'\n'
nl|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'image_cache_subdirectory_name'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'remove_unused_base_images'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enabled'"
op|','
string|"'nova.vnc'"
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|VMWARE_POWER_STATES
name|'VMWARE_POWER_STATES'
op|'='
op|'{'
string|"'poweredOff'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
string|"'poweredOn'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'suspended'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|RESIZE_TOTAL_STEPS
name|'RESIZE_TOTAL_STEPS'
op|'='
number|'6'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VirtualMachineInstanceConfigInfo
name|'class'
name|'VirtualMachineInstanceConfigInfo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parameters needed to create and configure a new instance."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_info'
op|','
name|'datastore'
op|','
name|'dc_info'
op|','
name|'image_cache'
op|','
nl|'\n'
name|'extra_specs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Some methods called during spawn take the instance parameter purely'
nl|'\n'
comment|'# for logging purposes.'
nl|'\n'
comment|'# TODO(vui) Clean them up, so we no longer need to keep this variable'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance'
op|'='
name|'instance'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ii'
op|'='
name|'image_info'
newline|'\n'
name|'self'
op|'.'
name|'root_gb'
op|'='
name|'instance'
op|'.'
name|'root_gb'
newline|'\n'
name|'self'
op|'.'
name|'datastore'
op|'='
name|'datastore'
newline|'\n'
name|'self'
op|'.'
name|'dc_info'
op|'='
name|'dc_info'
newline|'\n'
name|'self'
op|'.'
name|'_image_cache'
op|'='
name|'image_cache'
newline|'\n'
name|'self'
op|'.'
name|'_extra_specs'
op|'='
name|'extra_specs'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|cache_image_folder
name|'def'
name|'cache_image_folder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_image_cache'
op|'.'
name|'get_image_cache_folder'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'datastore'
op|','
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|cache_image_path
name|'def'
name|'cache_image_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'cached_image_file_name'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ii'
op|'.'
name|'file_type'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cache_image_folder'
op|'.'
name|'join'
op|'('
name|'cached_image_file_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Note(vui): See https://bugs.launchpad.net/nova/+bug/1363349'
nl|'\n'
comment|'# for cases where mocking time.sleep() can have unintended effects on code'
nl|'\n'
comment|'# not under test. For now, unblock the affected test cases by providing'
nl|'\n'
comment|'# a wrapper function to work around needing to mock time.sleep()'
nl|'\n'
DECL|function|_time_sleep_wrapper
dedent|''
dedent|''
name|'def'
name|'_time_sleep_wrapper'
op|'('
name|'delay'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'time'
op|'.'
name|'sleep'
op|'('
name|'delay'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'decorator'
op|'.'
name|'decorator'
newline|'\n'
DECL|function|retry_if_task_in_progress
name|'def'
name|'retry_if_task_in_progress'
op|'('
name|'f'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'retries'
op|'='
name|'max'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'api_retry_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'delay'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'attempt'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'retries'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attempt'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'_time_sleep_wrapper'
op|'('
name|'delay'
op|')'
newline|'\n'
name|'delay'
op|'='
name|'min'
op|'('
number|'2'
op|'*'
name|'delay'
op|','
number|'60'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'TaskInProgress'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareVMOps
dedent|''
dedent|''
dedent|''
name|'class'
name|'VMwareVMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Management class for VM-related tasks."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|','
name|'virtapi'
op|','
name|'volumeops'
op|','
name|'cluster'
op|'='
name|'None'
op|','
nl|'\n'
name|'datastore_regex'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializer."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\n'
name|'self'
op|'.'
name|'_virtapi'
op|'='
name|'virtapi'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'='
name|'volumeops'
newline|'\n'
name|'self'
op|'.'
name|'_cluster'
op|'='
name|'cluster'
newline|'\n'
name|'self'
op|'.'
name|'_root_resource_pool'
op|'='
name|'vm_util'
op|'.'
name|'get_res_pool_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|'='
name|'datastore_regex'
newline|'\n'
name|'self'
op|'.'
name|'_base_folder'
op|'='
name|'self'
op|'.'
name|'_get_base_folder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|'='
string|"'vmware_temp'"
newline|'\n'
name|'self'
op|'.'
name|'_datastore_browser_mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_imagecache'
op|'='
name|'imagecache'
op|'.'
name|'ImageCacheManager'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_base_folder'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_base_folder
dedent|''
name|'def'
name|'_get_base_folder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Enable more than one compute node to run on the same host'
nl|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'cache_prefix'
op|':'
newline|'\n'
indent|'            '
name|'base_folder'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'cache_prefix'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
op|')'
newline|'\n'
comment|'# Ensure that the base folder is unique per compute node'
nl|'\n'
dedent|''
name|'elif'
name|'CONF'
op|'.'
name|'remove_unused_base_images'
op|':'
newline|'\n'
indent|'            '
name|'base_folder'
op|'='
string|"'%s%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'my_ip'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Aging disable ensures backward compatibility'
nl|'\n'
indent|'            '
name|'base_folder'
op|'='
name|'CONF'
op|'.'
name|'image_cache_subdirectory_name'
newline|'\n'
dedent|''
name|'return'
name|'base_folder'
newline|'\n'
nl|'\n'
DECL|member|_extend_virtual_disk
dedent|''
name|'def'
name|'_extend_virtual_disk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'requested_size'
op|','
name|'name'
op|','
name|'dc_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service_content'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'service_content'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Extending root virtual disk to %s"'
op|','
name|'requested_size'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vmdk_extend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"ExtendVirtualDisk_Task"'
op|','
nl|'\n'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|','
nl|'\n'
name|'datacenter'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'newCapacityKb'
op|'='
name|'requested_size'
op|','
nl|'\n'
name|'eagerZero'
op|'='
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vmdk_extend_task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Extending virtual disk failed with error: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Clean up files created during the extend operation'
nl|'\n'
name|'files'
op|'='
op|'['
name|'name'
op|'.'
name|'replace'
op|'('
string|'".vmdk"'
op|','
string|'"-flat.vmdk"'
op|')'
op|','
name|'name'
op|']'
newline|'\n'
name|'for'
name|'file'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                    '
name|'ds_path'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'ds_path'
op|','
name|'dc_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Extended root virtual disk"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_datastore_file
dedent|''
name|'def'
name|'_delete_datastore_file'
op|'('
name|'self'
op|','
name|'datastore_path'
op|','
name|'dc_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'file_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'datastore_path'
op|','
name|'dc_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'vexc'
op|'.'
name|'CannotDeleteFileException'
op|','
nl|'\n'
name|'vexc'
op|'.'
name|'FileFaultException'
op|','
nl|'\n'
name|'vexc'
op|'.'
name|'FileLockedException'
op|','
nl|'\n'
name|'vexc'
op|'.'
name|'FileNotFoundException'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unable to delete %(ds)s. There may be more than "'
nl|'\n'
string|'"one process or thread trying to delete the file"'
op|','
nl|'\n'
op|'{'
string|"'ds'"
op|':'
name|'datastore_path'
op|'}'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_extend_if_required
dedent|''
dedent|''
name|'def'
name|'_extend_if_required'
op|'('
name|'self'
op|','
name|'dc_info'
op|','
name|'image_info'
op|','
name|'instance'
op|','
nl|'\n'
name|'root_vmdk_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Increase the size of the root vmdk if necessary."""'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|'>'
name|'image_info'
op|'.'
name|'file_size'
op|':'
newline|'\n'
indent|'            '
name|'size_in_kb'
op|'='
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'self'
op|'.'
name|'_extend_virtual_disk'
op|'('
name|'instance'
op|','
name|'size_in_kb'
op|','
nl|'\n'
name|'root_vmdk_path'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_configure_config_drive
dedent|''
dedent|''
name|'def'
name|'_configure_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
name|'datastore'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'session_vim'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
newline|'\n'
name|'cookies'
op|'='
name|'session_vim'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
name|'dc_path'
op|'='
name|'vutil'
op|'.'
name|'get_inventory_path'
op|'('
name|'session_vim'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'uploaded_iso_path'
op|'='
name|'self'
op|'.'
name|'_create_config_drive'
op|'('
name|'instance'
op|','
nl|'\n'
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'dc_path'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'cookies'
op|')'
newline|'\n'
name|'uploaded_iso_path'
op|'='
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'uploaded_iso_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_attach_cdrom_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'uploaded_iso_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_metadata
dedent|''
name|'def'
name|'_get_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'instance'
op|'.'
name|'flavor'
newline|'\n'
name|'return'
op|'('
string|"'name:%s\\n'"
nl|'\n'
string|"'userid:%s\\n'"
nl|'\n'
string|"'username:%s\\n'"
nl|'\n'
string|"'projectid:%s\\n'"
nl|'\n'
string|"'projectname:%s\\n'"
nl|'\n'
string|"'flavor:name:%s\\n'"
nl|'\n'
string|"'flavor:memory_mb:%s\\n'"
nl|'\n'
string|"'flavor:vcpus:%s\\n'"
nl|'\n'
string|"'flavor:ephemeral_gb:%s\\n'"
nl|'\n'
string|"'flavor:root_gb:%s\\n'"
nl|'\n'
string|"'flavor:swap:%s\\n'"
nl|'\n'
string|"'imageid:%s\\n'"
nl|'\n'
string|"'package:%s\\n'"
op|')'
op|'%'
op|'('
name|'instance'
op|'.'
name|'display_name'
op|','
nl|'\n'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'context'
op|'.'
name|'user_name'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_name'
op|','
nl|'\n'
name|'flavor'
op|'.'
name|'name'
op|','
nl|'\n'
name|'flavor'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
name|'flavor'
op|'.'
name|'vcpus'
op|','
nl|'\n'
name|'flavor'
op|'.'
name|'ephemeral_gb'
op|','
nl|'\n'
name|'flavor'
op|'.'
name|'root_gb'
op|','
nl|'\n'
name|'flavor'
op|'.'
name|'swap'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'version'
op|'.'
name|'version_string_with_package'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|build_virtual_machine
dedent|''
name|'def'
name|'build_virtual_machine'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_info'
op|','
nl|'\n'
name|'dc_info'
op|','
name|'datastore'
op|','
name|'network_info'
op|','
name|'extra_specs'
op|','
nl|'\n'
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vif_infos'
op|'='
name|'vmwarevif'
op|'.'
name|'get_vif_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|','
nl|'\n'
name|'image_info'
op|'.'
name|'vif_model'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'extra_specs'
op|'.'
name|'storage_policy'
op|':'
newline|'\n'
indent|'            '
name|'profile_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_storage_profile_spec'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'extra_specs'
op|'.'
name|'storage_policy'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'profile_spec'
op|'='
name|'None'
newline|'\n'
comment|'# Get the create vm config spec'
nl|'\n'
dedent|''
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_create_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'vif_infos'
op|','
nl|'\n'
name|'extra_specs'
op|','
nl|'\n'
name|'image_info'
op|'.'
name|'os_type'
op|','
nl|'\n'
name|'profile_spec'
op|'='
name|'profile_spec'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'metadata'
op|')'
newline|'\n'
comment|'# Create the VM'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'create_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'dc_info'
op|'.'
name|'vmFolder'
op|','
nl|'\n'
name|'config_spec'
op|','
name|'self'
op|'.'
name|'_root_resource_pool'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
DECL|member|_get_extra_specs
dedent|''
name|'def'
name|'_get_extra_specs'
op|'('
name|'self'
op|','
name|'flavor'
op|','
name|'image_meta'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
name|'image_meta'
name|'or'
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'extra_specs'
op|'='
name|'vm_util'
op|'.'
name|'ExtraSpecs'
op|'('
op|')'
newline|'\n'
name|'for'
name|'resource'
name|'in'
op|'['
string|"'cpu'"
op|','
string|"'memory'"
op|','
string|"'disk_io'"
op|','
string|"'vif'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
op|'('
name|'key'
op|','
name|'type'
op|')'
name|'in'
op|'('
op|'('
string|"'limit'"
op|','
name|'int'
op|')'
op|','
nl|'\n'
op|'('
string|"'reservation'"
op|','
name|'int'
op|')'
op|','
nl|'\n'
op|'('
string|"'shares_level'"
op|','
name|'str'
op|')'
op|','
nl|'\n'
op|'('
string|"'shares_share'"
op|','
name|'int'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'flavor'
op|'.'
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'quota:'"
op|'+'
name|'resource'
op|'+'
string|"'_'"
op|'+'
name|'key'
op|')'
newline|'\n'
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'getattr'
op|'('
name|'extra_specs'
op|','
name|'resource'
op|'+'
string|"'_limits'"
op|')'
op|','
nl|'\n'
name|'key'
op|','
name|'type'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'extra_specs'
op|'.'
name|'cpu_limits'
op|'.'
name|'validate'
op|'('
op|')'
newline|'\n'
name|'extra_specs'
op|'.'
name|'memory_limits'
op|'.'
name|'validate'
op|'('
op|')'
newline|'\n'
name|'extra_specs'
op|'.'
name|'disk_io_limits'
op|'.'
name|'validate'
op|'('
op|')'
newline|'\n'
name|'extra_specs'
op|'.'
name|'vif_limits'
op|'.'
name|'validate'
op|'('
op|')'
newline|'\n'
name|'hw_version'
op|'='
name|'flavor'
op|'.'
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'vmware:hw_version'"
op|')'
newline|'\n'
name|'extra_specs'
op|'.'
name|'hw_version'
op|'='
name|'hw_version'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_enabled'
op|':'
newline|'\n'
indent|'            '
name|'storage_policy'
op|'='
name|'flavor'
op|'.'
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'vmware:storage_policy'"
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'pbm_default_policy'
op|')'
newline|'\n'
name|'extra_specs'
op|'.'
name|'storage_policy'
op|'='
name|'storage_policy'
newline|'\n'
dedent|''
name|'topology'
op|'='
name|'hardware'
op|'.'
name|'get_best_cpu_topology'
op|'('
name|'flavor'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'allow_threads'
op|'='
name|'False'
op|')'
newline|'\n'
name|'extra_specs'
op|'.'
name|'cores_per_socket'
op|'='
name|'topology'
op|'.'
name|'cores'
newline|'\n'
name|'return'
name|'extra_specs'
newline|'\n'
nl|'\n'
DECL|member|_get_esx_host_and_cookies
dedent|''
name|'def'
name|'_get_esx_host_and_cookies'
op|'('
name|'self'
op|','
name|'datastore'
op|','
name|'dc_name'
op|','
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hosts'
op|'='
name|'datastore'
op|'.'
name|'get_connected_hosts'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'host'
op|'='
name|'ds_obj'
op|'.'
name|'Datastore'
op|'.'
name|'choose_host'
op|'('
name|'hosts'
op|')'
newline|'\n'
name|'host_name'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'get_object_property'"
op|','
nl|'\n'
name|'host'
op|','
string|"'name'"
op|')'
newline|'\n'
name|'url'
op|'='
name|'ds_obj'
op|'.'
name|'DatastoreURL'
op|'('
string|"'https'"
op|','
name|'host_name'
op|','
name|'file_path'
op|','
name|'dc_name'
op|','
nl|'\n'
name|'datastore'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'cookie_header'
op|'='
name|'url'
op|'.'
name|'get_transfer_ticket'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
string|"'PUT'"
op|')'
newline|'\n'
name|'name'
op|','
name|'value'
op|'='
name|'cookie_header'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
newline|'\n'
comment|'# TODO(rgerganov): this is a hack to emulate cookiejar until we fix'
nl|'\n'
comment|'# oslo.vmware to accept plain http headers'
nl|'\n'
name|'Cookie'
op|'='
name|'collections'
op|'.'
name|'namedtuple'
op|'('
string|"'Cookie'"
op|','
op|'['
string|"'name'"
op|','
string|"'value'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'host_name'
op|','
op|'['
name|'Cookie'
op|'('
name|'name'
op|','
name|'value'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image_as_file
dedent|''
name|'def'
name|'_fetch_image_as_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vi'
op|','
name|'image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Download image as an individual file to host via HTTP PUT."""'
newline|'\n'
name|'session'
op|'='
name|'self'
op|'.'
name|'_session'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Downloading image file data %(image_id)s to "'
nl|'\n'
string|'"%(file_path)s on the data store "'
nl|'\n'
string|'"%(datastore_name)s"'
op|','
nl|'\n'
op|'{'
string|"'image_id'"
op|':'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
nl|'\n'
string|"'file_path'"
op|':'
name|'image_ds_loc'
op|','
nl|'\n'
string|"'datastore_name'"
op|':'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# try to get esx cookie to upload'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'dc_name'
op|'='
string|"'ha-datacenter'"
newline|'\n'
name|'host'
op|','
name|'cookies'
op|'='
name|'self'
op|'.'
name|'_get_esx_host_and_cookies'
op|'('
name|'vi'
op|'.'
name|'datastore'
op|','
nl|'\n'
name|'dc_name'
op|','
nl|'\n'
name|'image_ds_loc'
op|'.'
name|'rel_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Get esx cookies failed: %s"'
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'dc_name'
op|'='
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'name'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host'
newline|'\n'
name|'cookies'
op|'='
name|'session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'options'
op|'.'
name|'transport'
op|'.'
name|'cookiejar'
newline|'\n'
nl|'\n'
dedent|''
name|'images'
op|'.'
name|'fetch_image'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'host'
op|','
nl|'\n'
name|'session'
op|'.'
name|'_port'
op|','
nl|'\n'
name|'dc_name'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'image_ds_loc'
op|'.'
name|'rel_path'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image_as_vapp
dedent|''
name|'def'
name|'_fetch_image_as_vapp'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vi'
op|','
name|'image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Download stream optimized image to host as a vApp."""'
newline|'\n'
nl|'\n'
comment|'# The directory of the imported disk is the unique name'
nl|'\n'
comment|'# of the VM use to import it with.'
nl|'\n'
name|'vm_name'
op|'='
name|'image_ds_loc'
op|'.'
name|'parent'
op|'.'
name|'basename'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Downloading stream optimized image %(image_id)s to "'
nl|'\n'
string|'"%(file_path)s on the data store "'
nl|'\n'
string|'"%(datastore_name)s as vApp"'
op|','
nl|'\n'
op|'{'
string|"'image_id'"
op|':'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
nl|'\n'
string|"'file_path'"
op|':'
name|'image_ds_loc'
op|','
nl|'\n'
string|"'datastore_name'"
op|':'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'images'
op|'.'
name|'fetch_image_stream_optimized'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_name'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'vmFolder'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_root_resource_pool'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image_as_ova
dedent|''
name|'def'
name|'_fetch_image_as_ova'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vi'
op|','
name|'image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Download root disk of an OVA image as streamOptimized."""'
newline|'\n'
nl|'\n'
comment|'# The directory of the imported disk is the unique name'
nl|'\n'
comment|'# of the VM use to import it with.'
nl|'\n'
name|'vm_name'
op|'='
name|'image_ds_loc'
op|'.'
name|'parent'
op|'.'
name|'basename'
newline|'\n'
nl|'\n'
name|'images'
op|'.'
name|'fetch_image_ova'
op|'('
name|'context'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_name'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'vmFolder'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_root_resource_pool'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prepare_sparse_image
dedent|''
name|'def'
name|'_prepare_sparse_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
string|'"tmp-sparse.vmdk"'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_prepare_flat_image
dedent|''
name|'def'
name|'_prepare_flat_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'create_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'tmp_image_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'file_size_in_kb'
op|')'
newline|'\n'
name|'flat_vmdk_name'
op|'='
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|'.'
name|'replace'
op|'('
string|"'.vmdk'"
op|','
nl|'\n'
string|"'-flat.vmdk'"
op|')'
newline|'\n'
name|'flat_vmdk_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'flat_vmdk_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'str'
op|'('
name|'flat_vmdk_ds_loc'
op|')'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'flat_vmdk_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_prepare_stream_optimized_image
dedent|''
name|'def'
name|'_prepare_stream_optimized_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_name'
op|'='
string|'"%s_%s"'
op|'%'
op|'('
name|'constants'
op|'.'
name|'IMAGE_VM_PREFIX'
op|','
nl|'\n'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'vm_name'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
string|'"%s.vmdk"'
op|'%'
name|'tmp_dir_loc'
op|'.'
name|'basename'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_prepare_iso_image
dedent|''
name|'def'
name|'_prepare_iso_image'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_tmp_folder'
op|','
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'tmp_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
newline|'\n'
name|'return'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
newline|'\n'
nl|'\n'
DECL|member|_move_to_cache
dedent|''
name|'def'
name|'_move_to_cache'
op|'('
name|'self'
op|','
name|'dc_ref'
op|','
name|'src_folder_ds_path'
op|','
name|'dst_folder_ds_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'file_move'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_ref'
op|','
nl|'\n'
name|'src_folder_ds_path'
op|','
name|'dst_folder_ds_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileAlreadyExistsException'
op|':'
newline|'\n'
comment|'# Folder move has failed. This may be due to the fact that a'
nl|'\n'
comment|'# process or thread has already completed the operation.'
nl|'\n'
comment|'# Since image caching is synchronized, this can only happen'
nl|'\n'
comment|'# due to action external to the process.'
nl|'\n'
comment|'# In the event of a FileAlreadyExists we continue,'
nl|'\n'
comment|'# all other exceptions will be raised.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Destination %s already exists! Concurrent moves "'
nl|'\n'
string|'"can lead to unexpected results."'
op|')'
op|','
nl|'\n'
name|'dst_folder_ds_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cache_sparse_image
dedent|''
dedent|''
name|'def'
name|'_cache_sparse_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmp_dir_loc'
op|'='
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|'.'
name|'parent'
newline|'\n'
name|'converted_image_ds_loc'
op|'='
name|'tmp_dir_loc'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
newline|'\n'
comment|'# converts fetched image to preallocated disk'
nl|'\n'
name|'vm_util'
op|'.'
name|'copy_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'tmp_image_ds_loc'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'converted_image_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'str'
op|'('
name|'tmp_image_ds_loc'
op|')'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_move_to_cache'
op|'('
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|')'
newline|'\n'
comment|'# The size of the image is different from the size of the virtual'
nl|'\n'
comment|'# disk. We want to use the latter.'
nl|'\n'
name|'self'
op|'.'
name|'_update_image_size'
op|'('
name|'vi'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cache_flat_image
dedent|''
name|'def'
name|'_cache_flat_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_move_to_cache'
op|'('
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cache_stream_optimized_image
dedent|''
name|'def'
name|'_cache_stream_optimized_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst_path'
op|'='
name|'vi'
op|'.'
name|'cache_image_folder'
op|'.'
name|'join'
op|'('
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vi'
op|'.'
name|'cache_image_folder'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'disk_move'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|','
name|'dst_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileAlreadyExistsException'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_cache_iso_image
dedent|''
dedent|''
name|'def'
name|'_cache_iso_image'
op|'('
name|'self'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_move_to_cache'
op|'('
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'tmp_image_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_vm_config_info
dedent|''
name|'def'
name|'_get_vm_config_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_info'
op|','
nl|'\n'
name|'extra_specs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Captures all relevant information from the spawn parameters."""'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'instance'
op|'.'
name|'root_gb'
op|'!='
number|'0'
name|'and'
nl|'\n'
name|'image_info'
op|'.'
name|'file_size'
op|'>'
name|'instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Image disk size greater than requested disk size"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnacceptable'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'allowed_ds_types'
op|'='
name|'ds_util'
op|'.'
name|'get_allowed_datastore_types'
op|'('
nl|'\n'
name|'image_info'
op|'.'
name|'disk_type'
op|')'
newline|'\n'
name|'datastore'
op|'='
name|'ds_util'
op|'.'
name|'get_datastore'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|','
nl|'\n'
name|'extra_specs'
op|'.'
name|'storage_policy'
op|','
nl|'\n'
name|'allowed_ds_types'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'VirtualMachineInstanceConfigInfo'
op|'('
name|'instance'
op|','
nl|'\n'
name|'image_info'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'dc_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_imagecache'
op|','
nl|'\n'
name|'extra_specs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_image_callbacks
dedent|''
name|'def'
name|'_get_image_callbacks'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_type'
op|'='
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
newline|'\n'
nl|'\n'
name|'if'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'is_ova'
op|':'
newline|'\n'
indent|'            '
name|'image_fetch'
op|'='
name|'self'
op|'.'
name|'_fetch_image_as_ova'
newline|'\n'
dedent|''
name|'elif'
name|'disk_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_TYPE_STREAM_OPTIMIZED'
op|':'
newline|'\n'
indent|'            '
name|'image_fetch'
op|'='
name|'self'
op|'.'
name|'_fetch_image_as_vapp'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_fetch'
op|'='
name|'self'
op|'.'
name|'_fetch_image_as_file'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'is_iso'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_iso_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_iso_image'
newline|'\n'
dedent|''
name|'elif'
name|'disk_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_TYPE_SPARSE'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_sparse_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_sparse_image'
newline|'\n'
dedent|''
name|'elif'
name|'disk_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_TYPE_STREAM_OPTIMIZED'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_stream_optimized_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_stream_optimized_image'
newline|'\n'
dedent|''
name|'elif'
name|'disk_type'
name|'in'
name|'constants'
op|'.'
name|'SUPPORTED_FLAT_VARIANTS'
op|':'
newline|'\n'
indent|'            '
name|'image_prepare'
op|'='
name|'self'
op|'.'
name|'_prepare_flat_image'
newline|'\n'
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_cache_flat_image'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"disk type \'%s\' not supported"'
op|')'
op|'%'
name|'disk_type'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidDiskInfo'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'image_prepare'
op|','
name|'image_fetch'
op|','
name|'image_cache'
newline|'\n'
nl|'\n'
DECL|member|_fetch_image_if_missing
dedent|''
name|'def'
name|'_fetch_image_if_missing'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_prepare'
op|','
name|'image_fetch'
op|','
name|'image_cache'
op|'='
name|'self'
op|'.'
name|'_get_image_callbacks'
op|'('
name|'vi'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Processing image %s"'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-fetch_image'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'check_cache_folder'
op|'('
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'name'
op|','
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_path'
op|'.'
name|'basename'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Preparing fetch location"'
op|','
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'tmp_dir_loc'
op|','
name|'tmp_image_ds_loc'
op|'='
name|'image_prepare'
op|'('
name|'vi'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Fetch image to %s"'
op|','
name|'tmp_image_ds_loc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'image_fetch'
op|'('
name|'context'
op|','
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Caching image"'
op|','
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'image_cache'
op|'('
name|'vi'
op|','
name|'tmp_image_ds_loc'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Cleaning up location %s"'
op|','
name|'str'
op|'('
name|'tmp_dir_loc'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_datastore_file'
op|'('
name|'str'
op|'('
name|'tmp_dir_loc'
op|')'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_and_attach_thin_disk
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_and_attach_thin_disk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
name|'size'
op|','
nl|'\n'
name|'adapter_type'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'disk_type'
op|'='
name|'constants'
op|'.'
name|'DISK_TYPE_THIN'
newline|'\n'
name|'vm_util'
op|'.'
name|'create_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'adapter_type'
op|','
nl|'\n'
name|'disk_type'
op|','
nl|'\n'
name|'path'
op|','
nl|'\n'
name|'size'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'adapter_type'
op|','
name|'disk_type'
op|','
nl|'\n'
name|'path'
op|','
name|'size'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_ephemeral
dedent|''
name|'def'
name|'_create_ephemeral'
op|'('
name|'self'
op|','
name|'bdi'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
nl|'\n'
name|'datastore'
op|','
name|'folder'
op|','
name|'adapter_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ephemerals'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'bdi'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ephemerals'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
name|'bdi'
op|')'
newline|'\n'
name|'for'
name|'idx'
op|','
name|'eph'
name|'in'
name|'enumerate'
op|'('
name|'ephemerals'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'eph'
op|'['
string|"'size'"
op|']'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'at'
op|'='
name|'eph'
op|'.'
name|'get'
op|'('
string|"'disk_bus'"
op|')'
name|'or'
name|'adapter_type'
newline|'\n'
name|'filename'
op|'='
name|'vm_util'
op|'.'
name|'get_ephemeral_name'
op|'('
name|'idx'
op|')'
newline|'\n'
name|'path'
op|'='
name|'str'
op|'('
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|'.'
name|'name'
op|','
name|'folder'
op|','
nl|'\n'
name|'filename'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_and_attach_thin_disk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
nl|'\n'
name|'size'
op|','
name|'at'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
comment|'# There may be block devices defined but no ephemerals. In this case'
nl|'\n'
comment|'# we need to allocate an ephemeral disk if required'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'ephemerals'
name|'and'
name|'instance'
op|'.'
name|'ephemeral_gb'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'instance'
op|'.'
name|'ephemeral_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'filename'
op|'='
name|'vm_util'
op|'.'
name|'get_ephemeral_name'
op|'('
number|'0'
op|')'
newline|'\n'
name|'path'
op|'='
name|'str'
op|'('
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|'.'
name|'name'
op|','
name|'folder'
op|','
nl|'\n'
name|'filename'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_and_attach_thin_disk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
name|'size'
op|','
nl|'\n'
name|'adapter_type'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_swap
dedent|''
dedent|''
name|'def'
name|'_create_swap'
op|'('
name|'self'
op|','
name|'bdi'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
name|'datastore'
op|','
nl|'\n'
name|'folder'
op|','
name|'adapter_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'swap'
op|'='
name|'None'
newline|'\n'
name|'filename'
op|'='
string|'"swap.vmdk"'
newline|'\n'
name|'path'
op|'='
name|'str'
op|'('
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|'.'
name|'name'
op|','
name|'folder'
op|','
name|'filename'
op|')'
op|')'
newline|'\n'
name|'if'
name|'bdi'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'swap'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_swap'
op|'('
name|'bdi'
op|')'
newline|'\n'
name|'if'
name|'driver'
op|'.'
name|'swap_is_usable'
op|'('
name|'swap'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'swap'
op|'['
string|"'swap_size'"
op|']'
op|'*'
name|'units'
op|'.'
name|'Ki'
newline|'\n'
name|'self'
op|'.'
name|'_create_and_attach_thin_disk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
nl|'\n'
name|'size'
op|','
name|'adapter_type'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# driver.block_device_info_get_swap returns'
nl|'\n'
comment|"# {'device_name': None, 'swap_size': 0} if swap is None"
nl|'\n'
comment|'# in block_device_info.  If block_device_info does not contain'
nl|'\n'
comment|'# a swap device, we need to reset swap to None, so we can'
nl|'\n'
comment|"# extract the swap_size from the instance's flavor."
nl|'\n'
indent|'                '
name|'swap'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'size'
op|'='
name|'instance'
op|'.'
name|'flavor'
op|'.'
name|'swap'
op|'*'
name|'units'
op|'.'
name|'Ki'
newline|'\n'
name|'if'
name|'not'
name|'swap'
name|'and'
name|'size'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_and_attach_thin_disk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
name|'size'
op|','
nl|'\n'
name|'adapter_type'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_vnic_index
dedent|''
dedent|''
name|'def'
name|'_update_vnic_index'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'index'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_network_api'
op|'.'
name|'update_instance_vnic_index'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_image_size
dedent|''
dedent|''
dedent|''
name|'def'
name|'_update_image_size'
op|'('
name|'self'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the file size of the specified image."""'
newline|'\n'
comment|'# The size of the Glance image is different from the deployed VMDK'
nl|'\n'
comment|'# size for sparse, streamOptimized and OVA images. We need to retrieve'
nl|'\n'
comment|'# the size of the flat VMDK and update the file_size property of the'
nl|'\n'
comment|'# image. This ensures that further operations involving size checks'
nl|'\n'
comment|'# and disk resizing will work as expected.'
nl|'\n'
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'flat_file'
op|'='
string|'"%s-flat.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
newline|'\n'
name|'new_size'
op|'='
name|'ds_util'
op|'.'
name|'file_size'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_folder'
op|','
name|'flat_file'
op|')'
newline|'\n'
name|'if'
name|'new_size'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'file_size'
op|'='
name|'new_size'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'image_info'
op|'='
name|'images'
op|'.'
name|'VMwareImage'
op|'.'
name|'from_image'
op|'('
name|'instance'
op|'.'
name|'image_ref'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
name|'extra_specs'
op|'='
name|'self'
op|'.'
name|'_get_extra_specs'
op|'('
name|'instance'
op|'.'
name|'flavor'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'vi'
op|'='
name|'self'
op|'.'
name|'_get_vm_config_info'
op|'('
name|'instance'
op|','
name|'image_info'
op|','
nl|'\n'
name|'extra_specs'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'_get_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Creates the virtual machine. The virtual machine reference returned'
nl|'\n'
comment|'# is unique within Virtual Center.'
nl|'\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'build_virtual_machine'
op|'('
name|'instance'
op|','
nl|'\n'
name|'image_info'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'extra_specs'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cache the vm_ref. This saves a remote call to the VC. This uses the'
nl|'\n'
comment|'# instance uuid.'
nl|'\n'
name|'vm_util'
op|'.'
name|'vm_ref_cache_update'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Update the Neutron VNIC index'
nl|'\n'
name|'self'
op|'.'
name|'_update_vnic_index'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the machine.id parameter of the instance to inject'
nl|'\n'
comment|'# the NIC configuration inside the VM'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'flat_injected'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_machine_id'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the vnc configuration of the instance, vnc port starts from 5900'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'vnc'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_and_set_vnc_config'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'block_device_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'block_device_mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'image_ref'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_imagecache'
op|'.'
name|'enlist_image'
op|'('
nl|'\n'
name|'image_info'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'datastore'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_fetch_image_if_missing'
op|'('
name|'context'
op|','
name|'vi'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_info'
op|'.'
name|'is_iso'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_use_iso_image'
op|'('
name|'vm_ref'
op|','
name|'vi'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'image_info'
op|'.'
name|'linked_clone'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_use_disk_image_as_linked_clone'
op|'('
name|'vm_ref'
op|','
name|'vi'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_use_disk_image_as_full_clone'
op|'('
name|'vm_ref'
op|','
name|'vi'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"Block device information present: %s"'
op|'%'
name|'block_device_info'
newline|'\n'
comment|'# NOTE(mriedem): block_device_info can contain an auth_password'
nl|'\n'
comment|'# so we have to scrub the message before logging it.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'strutils'
op|'.'
name|'mask_password'
op|'('
name|'msg'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Before attempting to attach any volume, make sure the'
nl|'\n'
comment|'# block_device_mapping (i.e. disk_bus) is valid'
nl|'\n'
name|'self'
op|'.'
name|'_is_bdm_valid'
op|'('
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'disk'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'                '
name|'connection_info'
op|'='
name|'disk'
op|'['
string|"'connection_info'"
op|']'
newline|'\n'
name|'adapter_type'
op|'='
name|'disk'
op|'.'
name|'get'
op|'('
string|"'disk_bus'"
op|')'
name|'or'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
newline|'\n'
nl|'\n'
comment|'# TODO(hartsocks): instance is unnecessary, remove it'
nl|'\n'
comment|'# we still use instance in many locations for no other purpose'
nl|'\n'
comment|'# than logging, can we simplify this?'
nl|'\n'
name|'if'
name|'disk'
op|'.'
name|'get'
op|'('
string|"'boot_index'"
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_root_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|','
name|'adapter_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
name|'adapter_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create ephemeral disks'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_create_ephemeral'
op|'('
name|'block_device_info'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'datastore'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_swap'
op|'('
name|'block_device_info'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_configure_config_drive'
op|'('
nl|'\n'
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'datastore'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_bdm_valid
dedent|''
name|'def'
name|'_is_bdm_valid'
op|'('
name|'self'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks if the block device mapping is valid."""'
newline|'\n'
name|'valid_bus'
op|'='
op|'('
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_BUSLOGIC'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_IDE'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_LSILOGICSAS'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'disk'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type'
op|'='
name|'disk'
op|'.'
name|'get'
op|'('
string|"'disk_bus'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'adapter_type'
name|'is'
name|'not'
name|'None'
name|'and'
name|'adapter_type'
name|'not'
name|'in'
name|'valid_bus'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'UnsupportedHardware'
op|'('
name|'model'
op|'='
name|'adapter_type'
op|','
nl|'\n'
name|'virt'
op|'='
string|'"vmware"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_config_drive
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_config_drive'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'network_info'
op|','
name|'data_store_name'
op|','
name|'dc_name'
op|','
nl|'\n'
name|'upload_folder'
op|','
name|'cookies'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'config_drive_format'
op|'!='
string|"'iso9660'"
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
op|'('
name|'_'
op|'('
string|'\'Invalid config_drive_format "%s"\''
op|')'
op|'%'
nl|'\n'
name|'CONF'
op|'.'
name|'config_drive_format'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstancePowerOnFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Using config drive for instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'extra_md'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'admin_password'
op|':'
newline|'\n'
indent|'            '
name|'extra_md'
op|'['
string|"'admin_pass'"
op|']'
op|'='
name|'admin_password'
newline|'\n'
nl|'\n'
dedent|''
name|'inst_md'
op|'='
name|'instance_metadata'
op|'.'
name|'InstanceMetadata'
op|'('
name|'instance'
op|','
nl|'\n'
name|'content'
op|'='
name|'injected_files'
op|','
nl|'\n'
name|'extra_md'
op|'='
name|'extra_md'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'configdrive'
op|'.'
name|'ConfigDriveBuilder'
op|'('
name|'instance_md'
op|'='
name|'inst_md'
op|')'
name|'as'
name|'cdb'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'utils'
op|'.'
name|'tempdir'
op|'('
op|')'
name|'as'
name|'tmp_path'
op|':'
newline|'\n'
indent|'                    '
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmp_path'
op|','
string|"'configdrive.iso'"
op|')'
newline|'\n'
name|'cdb'
op|'.'
name|'make_drive'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
name|'upload_iso_path'
op|'='
string|'"%s/configdrive.iso"'
op|'%'
op|'('
nl|'\n'
name|'upload_folder'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'upload_iso_to_datastore'
op|'('
nl|'\n'
name|'tmp_file'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host'
op|','
nl|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_port'
op|','
nl|'\n'
name|'data_center_name'
op|'='
name|'dc_name'
op|','
nl|'\n'
name|'datastore_name'
op|'='
name|'data_store_name'
op|','
nl|'\n'
name|'cookies'
op|'='
name|'cookies'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'upload_iso_path'
op|')'
newline|'\n'
name|'return'
name|'upload_iso_path'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Creating config drive failed with error: %s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_cdrom_to_vm
dedent|''
dedent|''
dedent|''
name|'def'
name|'_attach_cdrom_to_vm'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'datastore'
op|','
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach cdrom to VM by reconfiguration."""'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
string|'"config.hardware.device"'
op|')'
newline|'\n'
op|'('
name|'controller_key'
op|','
name|'unit_number'
op|','
nl|'\n'
name|'controller_spec'
op|')'
op|'='
name|'vm_util'
op|'.'
name|'allocate_controller_key_and_unit_number'
op|'('
nl|'\n'
name|'client_factory'
op|','
nl|'\n'
name|'devices'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_IDE'
op|')'
newline|'\n'
name|'cdrom_attach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_cdrom_attach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'datastore'
op|','
name|'file_path'
op|','
nl|'\n'
name|'controller_key'
op|','
name|'unit_number'
op|')'
newline|'\n'
name|'if'
name|'controller_spec'
op|':'
newline|'\n'
indent|'            '
name|'cdrom_attach_config_spec'
op|'.'
name|'deviceChange'
op|'.'
name|'append'
op|'('
name|'controller_spec'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance to attach cdrom %s"'
op|','
nl|'\n'
name|'file_path'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'cdrom_attach_config_spec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance to attach cdrom %s"'
op|','
nl|'\n'
name|'file_path'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_vm_snapshot
dedent|''
name|'def'
name|'_create_vm_snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'snapshot_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"CreateSnapshot_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'name'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'description'
op|'='
string|'"Taking Snapshot of the VM"'
op|','
nl|'\n'
name|'memory'
op|'='
name|'False'
op|','
nl|'\n'
name|'quiesce'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'snapshot_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'task_info'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'snapshot_task'
op|','
nl|'\n'
string|'"info"'
op|')'
newline|'\n'
name|'snapshot'
op|'='
name|'task_info'
op|'.'
name|'result'
newline|'\n'
name|'return'
name|'snapshot'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'retry_if_task_in_progress'
newline|'\n'
DECL|member|_delete_vm_snapshot
name|'def'
name|'_delete_vm_snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'delete_snapshot_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"RemoveSnapshot_Task"'
op|','
name|'snapshot'
op|','
nl|'\n'
name|'removeChildren'
op|'='
name|'False'
op|','
name|'consolidate'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'delete_snapshot_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted Snapshot of the VM instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_linked_clone_from_snapshot
dedent|''
name|'def'
name|'_create_linked_clone_from_snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'snapshot_ref'
op|','
name|'dc_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create linked clone VM to be deployed to same ds as source VM\n        """'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'rel_spec'
op|'='
name|'vm_util'
op|'.'
name|'relocate_vm_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|'='
name|'None'
op|','
nl|'\n'
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_move_type'
op|'='
string|'"createNewChildDiskBacking"'
op|')'
newline|'\n'
name|'clone_spec'
op|'='
name|'vm_util'
op|'.'
name|'clone_vm_spec'
op|'('
name|'client_factory'
op|','
name|'rel_spec'
op|','
nl|'\n'
name|'power_on'
op|'='
name|'False'
op|','
name|'snapshot'
op|'='
name|'snapshot_ref'
op|','
name|'template'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vm_name'
op|'='
string|'"%s_%s"'
op|'%'
op|'('
name|'constants'
op|'.'
name|'SNAPSHOT_VM_PREFIX'
op|','
nl|'\n'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating linked-clone VM from snapshot"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_clone_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"CloneVM_Task"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'folder'
op|'='
name|'dc_info'
op|'.'
name|'vmFolder'
op|','
nl|'\n'
name|'name'
op|'='
name|'vm_name'
op|','
nl|'\n'
name|'spec'
op|'='
name|'clone_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vm_clone_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Created linked-clone VM from snapshot"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'task_info'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'vm_clone_task'
op|','
nl|'\n'
string|'"info"'
op|')'
newline|'\n'
name|'return'
name|'task_info'
op|'.'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot from a running VM instance.\n\n        Steps followed are:\n\n        1. Get the name of the vmdk file which the VM points to right now.\n           Can be a chain of snapshots, so we need to know the last in the\n           chain.\n        2. Create the snapshot. A new vmdk is created which the VM points to\n           now. The earlier vmdk becomes read-only.\n        3. Creates a linked clone VM from the snapshot\n        4. Exports the disk in the link clone VM as a streamOptimized disk.\n        5. Delete the linked clone VM\n        6. Deletes the snapshot in original instance.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_get_vm_and_vmdk_attribs
name|'def'
name|'_get_vm_and_vmdk_attribs'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Get the vmdk info that the VM is pointing to'
nl|'\n'
indent|'            '
name|'vmdk'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vmdk'
op|'.'
name|'path'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"No root disk defined. Unable to snapshot."'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'error_util'
op|'.'
name|'NoRootDiskDefined'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"datastore"'
op|','
string|'"summary.config.guestId"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_properties_dict"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'os_type'
op|'='
name|'props'
op|'['
string|"'summary.config.guestId'"
op|']'
newline|'\n'
name|'datastores'
op|'='
name|'props'
op|'['
string|"'datastore'"
op|']'
newline|'\n'
name|'return'
op|'('
name|'vmdk'
op|','
name|'datastores'
op|','
name|'os_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vmdk'
op|','
name|'datastores'
op|','
name|'os_type'
op|'='
name|'_get_vm_and_vmdk_attribs'
op|'('
op|')'
newline|'\n'
name|'ds_ref'
op|'='
name|'datastores'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
nl|'\n'
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(vui): convert to creating plain vm clone and uploading from it'
nl|'\n'
comment|'# instead of using live vm snapshot.'
nl|'\n'
name|'snapshot_ref'
op|'='
name|'self'
op|'.'
name|'_create_vm_snapshot'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|','
nl|'\n'
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|')'
newline|'\n'
name|'snapshot_vm_ref'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Create a temporary VM (linked clone from snapshot), then export'
nl|'\n'
comment|"# the VM's root disk to glance via HttpNfc API"
nl|'\n'
indent|'            '
name|'snapshot_vm_ref'
op|'='
name|'self'
op|'.'
name|'_create_linked_clone_from_snapshot'
op|'('
nl|'\n'
name|'instance'
op|','
name|'vm_ref'
op|','
name|'snapshot_ref'
op|','
name|'dc_info'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'upload_image_stream_optimized'
op|'('
nl|'\n'
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'_session'
op|','
name|'vm'
op|'='
name|'snapshot_vm_ref'
op|','
nl|'\n'
name|'vmdk_size'
op|'='
name|'vmdk'
op|'.'
name|'capacity_in_bytes'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'snapshot_vm_ref'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'destroy_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'snapshot_vm_ref'
op|')'
newline|'\n'
comment|'# Deleting the snapshot after destroying the temporary VM created'
nl|'\n'
comment|"# based on it allows the instance vm's disks to be consolidated."
nl|'\n'
comment|'# TODO(vui) Add handling for when vmdk volume is attached.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete_vm_snapshot'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'snapshot_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|'='
string|'"SOFT"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot a VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.guest.toolsStatus"'
op|','
string|'"runtime.powerState"'
op|','
nl|'\n'
string|'"summary.guest.toolsRunningStatus"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_properties_dict"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'props'
op|'['
string|"'runtime.powerState'"
op|']'
newline|'\n'
name|'tools_status'
op|'='
name|'props'
op|'['
string|"'summary.guest.toolsStatus'"
op|']'
newline|'\n'
name|'tools_running_status'
op|'='
name|'props'
op|'['
string|"'summary.guest.toolsRunningStatus'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Raise an exception if the VM is not powered On.'
nl|'\n'
name|'if'
name|'pwr_state'
name|'not'
name|'in'
op|'['
string|'"poweredOn"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is not powered on"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceRebootFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'# If latest vmware tools are installed in the VM, and that the tools'
nl|'\n'
comment|'# are running, then only do a guest reboot. Otherwise do a hard reset.'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'tools_status'
op|'=='
string|'"toolsOk"'
name|'and'
nl|'\n'
name|'tools_running_status'
op|'=='
string|'"guestToolsRunning"'
name|'and'
nl|'\n'
name|'reboot_type'
op|'=='
string|'"SOFT"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooting guest OS of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
string|'"RebootGuest"'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooted guest OS of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Doing hard reboot of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'reset_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"ResetVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'reset_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Did hard reboot of VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_destroy_instance
dedent|''
dedent|''
name|'def'
name|'_destroy_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|'# Destroy a VM instance'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"config.files.vmPathName"'
op|','
string|'"runtime.powerState"'
op|','
nl|'\n'
string|'"datastore"'
op|']'
newline|'\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_properties_dict"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'props'
op|'['
string|"'runtime.powerState'"
op|']'
newline|'\n'
nl|'\n'
name|'vm_config_pathname'
op|'='
name|'props'
op|'.'
name|'get'
op|'('
string|"'config.files.vmPathName'"
op|')'
newline|'\n'
name|'vm_ds_path'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'vm_config_pathname'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'vm_ds_path'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
nl|'\n'
name|'vm_config_pathname'
op|')'
newline|'\n'
nl|'\n'
comment|'# Power off the VM if it is in PoweredOn state.'
nl|'\n'
dedent|''
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Un-register the VM'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unregistering the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"UnregisterVM"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unregistered the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"In vmwareapi:vmops:_destroy_instance, got "'
nl|'\n'
string|'"this exception while un-registering the VM: "'
nl|'\n'
string|'"%s"'
op|')'
op|','
name|'excep'
op|')'
newline|'\n'
comment|'# Delete the folder holding the VM related content on'
nl|'\n'
comment|'# the datastore.'
nl|'\n'
dedent|''
name|'if'
name|'destroy_disks'
name|'and'
name|'vm_ds_path'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'dir_ds_compliant_path'
op|'='
name|'vm_ds_path'
op|'.'
name|'parent'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting contents of the VM from "'
nl|'\n'
string|'"datastore %(datastore_name)s"'
op|','
nl|'\n'
op|'{'
string|"'datastore_name'"
op|':'
name|'vm_ds_path'
op|'.'
name|'datastore'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'ds_ref_ret'
op|'='
name|'props'
op|'['
string|"'datastore'"
op|']'
newline|'\n'
name|'ds_ref'
op|'='
name|'ds_ref_ret'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'file_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'dir_ds_compliant_path'
op|','
nl|'\n'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted contents of the VM from "'
nl|'\n'
string|'"datastore %(datastore_name)s"'
op|','
nl|'\n'
op|'{'
string|"'datastore_name'"
op|':'
name|'vm_ds_path'
op|'.'
name|'datastore'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"In vmwareapi:vmops:_destroy_instance, "'
nl|'\n'
string|'"exception while deleting the VM contents "'
nl|'\n'
string|'"from the disk"'
op|')'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Instance does not exist on backend'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Destroy instance failed'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'vm_ref_cache_delete'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy a VM instance.\n\n        Steps followed for each VM are:\n        1. Power off, if it is in poweredOn state.\n        2. Un-register.\n        3. Delete the contents of the folder holding the VM related data.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Destroying instance"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_destroy_instance'
op|'('
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance destroyed"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"pause not supported for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"unpause not supported for vmwareapi"'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
string|'"runtime.powerState"'
op|')'
newline|'\n'
comment|'# Only PoweredOn VMs can be suspended.'
nl|'\n'
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspending the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"SuspendVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'suspend_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspended the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Raise Exception if VM is poweredOff'
nl|'\n'
dedent|''
name|'elif'
name|'pwr_state'
op|'=='
string|'"poweredOff"'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is powered off and cannot be suspended."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceSuspendFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM was already in suspended state. So returning "'
nl|'\n'
string|'"without doing anything"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the specified instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
string|'"runtime.powerState"'
op|')'
newline|'\n'
name|'if'
name|'pwr_state'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"suspended"'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resuming the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'suspend_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resumed the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"instance is not in a suspended state"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceResumeFailure'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_rescue_device
dedent|''
dedent|''
name|'def'
name|'_get_rescue_device'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
string|'"config.hardware.device"'
op|')'
newline|'\n'
name|'return'
name|'vm_util'
op|'.'
name|'find_rescue_device'
op|'('
name|'hardware_devices'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the specified instance.\n\n        Attach the image that the instance was created from and boot from it.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the root disk vmdk object'
nl|'\n'
name|'vmdk'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'ds_ref'
op|'='
name|'vmdk'
op|'.'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'datastore'
newline|'\n'
name|'datastore'
op|'='
name|'ds_obj'
op|'.'
name|'get_datastore_by_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_ref'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'datastore'
op|'.'
name|'ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the image details of the instance'
nl|'\n'
name|'image_info'
op|'='
name|'images'
op|'.'
name|'VMwareImage'
op|'.'
name|'from_image'
op|'('
name|'image_meta'
op|'.'
name|'id'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
name|'vi'
op|'='
name|'VirtualMachineInstanceConfigInfo'
op|'('
name|'instance'
op|','
nl|'\n'
name|'image_info'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'dc_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_imagecache'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Fetch the image if it does not exist in the cache'
nl|'\n'
name|'self'
op|'.'
name|'_fetch_image_if_missing'
op|'('
name|'context'
op|','
name|'vi'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the rescue disk path'
nl|'\n'
name|'rescue_disk_path'
op|'='
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|'"%s-rescue.%s"'
op|'%'
op|'('
name|'image_info'
op|'.'
name|'image_id'
op|','
name|'image_info'
op|'.'
name|'file_type'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Copy the cached image to the be the rescue disk. This will be used'
nl|'\n'
comment|'# as the rescue disk for the instance.'
nl|'\n'
name|'ds_util'
op|'.'
name|'disk_copy'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'cache_image_path'
op|','
name|'rescue_disk_path'
op|')'
newline|'\n'
comment|'# Attach the rescue disk to the instance'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
name|'vmdk'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vmdk'
op|'.'
name|'disk_type'
op|','
name|'rescue_disk_path'
op|')'
newline|'\n'
comment|'# Get the rescue device and configure the boot order to'
nl|'\n'
comment|'# boot from this device'
nl|'\n'
name|'rescue_device'
op|'='
name|'self'
op|'.'
name|'_get_rescue_device'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'boot_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_boot_spec'
op|'('
name|'factory'
op|','
name|'rescue_device'
op|')'
newline|'\n'
comment|'# Update the VM with the new boot order and power on'
nl|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'boot_spec'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the specified instance."""'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Get the rescue device and detach it from the instance.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'rescue_device'
op|'='
name|'self'
op|'.'
name|'_get_rescue_device'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Unable to access the rescue disk'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_disk_from_vm'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
name|'rescue_device'
op|','
nl|'\n'
name|'destroy_disk'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off the specified instance.\n\n        :param instance: nova.objects.instance.Instance\n        """'
newline|'\n'
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_instance_progress
dedent|''
name|'def'
name|'_update_instance_progress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'step'
op|','
name|'total_steps'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update instance progress percent to reflect current step number\n        """'
newline|'\n'
comment|'# Divide the action\'s workflow into discrete steps and "bump" the'
nl|'\n'
comment|"# instance's progress field as each step is completed."
nl|'\n'
comment|'#'
nl|'\n'
comment|'# For a first cut this should be fine, however, for large VM images,'
nl|'\n'
comment|'# the clone disk step begins to dominate the equation. A'
nl|'\n'
comment|'# better approximation would use the percentage of the VM image that'
nl|'\n'
comment|'# has been streamed to the destination host.'
nl|'\n'
name|'progress'
op|'='
name|'round'
op|'('
name|'float'
op|'('
name|'step'
op|')'
op|'/'
name|'total_steps'
op|'*'
number|'100'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Updating instance \'%(instance_uuid)s\' progress to"'
nl|'\n'
string|'" %(progress)d"'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
string|"'progress'"
op|':'
name|'progress'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'progress'
op|'='
name|'progress'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resize_vm
dedent|''
name|'def'
name|'_resize_vm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'flavor'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resizes the VM according to the flavor."""'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'extra_specs'
op|'='
name|'self'
op|'.'
name|'_get_extra_specs'
op|'('
name|'flavor'
op|','
name|'image_meta'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'_get_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'vm_resize_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_resize_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'int'
op|'('
name|'flavor'
op|'.'
name|'vcpus'
op|')'
op|','
nl|'\n'
name|'int'
op|'('
name|'flavor'
op|'.'
name|'memory_mb'
op|')'
op|','
nl|'\n'
name|'extra_specs'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'metadata'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vm_resize_spec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resize_disk
dedent|''
name|'def'
name|'_resize_disk'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vmdk'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'flavor'
op|'.'
name|'root_gb'
op|'>'
name|'instance'
op|'.'
name|'root_gb'
name|'and'
nl|'\n'
name|'flavor'
op|'.'
name|'root_gb'
op|'>'
name|'vmdk'
op|'.'
name|'capacity_in_bytes'
op|'/'
name|'units'
op|'.'
name|'Gi'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'root_disk_in_kb'
op|'='
name|'flavor'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
newline|'\n'
name|'ds_ref'
op|'='
name|'vmdk'
op|'.'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'datastore'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'folder'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'dirname'
newline|'\n'
name|'datastore'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'datastore'
newline|'\n'
name|'resized_disk'
op|'='
name|'str'
op|'('
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|','
name|'folder'
op|','
nl|'\n'
string|"'resized.vmdk'"
op|')'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'disk_copy'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
name|'vmdk'
op|'.'
name|'path'
op|','
nl|'\n'
name|'str'
op|'('
name|'resized_disk'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_extend_virtual_disk'
op|'('
name|'instance'
op|','
name|'root_disk_in_kb'
op|','
name|'resized_disk'
op|','
nl|'\n'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_disk_from_vm'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
name|'vmdk'
op|'.'
name|'device'
op|')'
newline|'\n'
name|'original_disk'
op|'='
name|'str'
op|'('
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|','
name|'folder'
op|','
nl|'\n'
string|"'original.vmdk'"
op|')'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'disk_move'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
name|'vmdk'
op|'.'
name|'path'
op|','
nl|'\n'
name|'original_disk'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'disk_move'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
name|'resized_disk'
op|','
nl|'\n'
name|'vmdk'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'vmdk'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vmdk'
op|'.'
name|'disk_type'
op|','
name|'vmdk'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_ephemerals_and_swap
dedent|''
dedent|''
name|'def'
name|'_remove_ephemerals_and_swap'
op|'('
name|'self'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'devices'
op|'='
name|'vm_util'
op|'.'
name|'get_ephemerals'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'swap'
op|'='
name|'vm_util'
op|'.'
name|'get_swap'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'if'
name|'swap'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'devices'
op|'.'
name|'append'
op|'('
name|'swap'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'devices'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'detach_devices_from_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'devices'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resize_create_ephemerals_and_swap
dedent|''
dedent|''
name|'def'
name|'_resize_create_ephemerals_and_swap'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vmdk'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'ds_ref'
op|'='
name|'vmdk'
op|'.'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'datastore'
newline|'\n'
name|'datastore'
op|'='
name|'ds_obj'
op|'.'
name|'get_datastore_by_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_ref'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'folder'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'dirname'
newline|'\n'
name|'self'
op|'.'
name|'_create_ephemeral'
op|'('
name|'block_device_info'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'dc_info'
op|','
name|'datastore'
op|','
name|'folder'
op|','
name|'vmdk'
op|'.'
name|'adapter_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_swap'
op|'('
name|'block_device_info'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'dc_info'
op|','
nl|'\n'
name|'datastore'
op|','
name|'folder'
op|','
name|'vmdk'
op|'.'
name|'adapter_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transfers the disk of a running instance in multiple phases, turning\n        off the instance before the end.\n        """'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'vmdk'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# Checks if the migration needs a disk resize down.'
nl|'\n'
name|'if'
op|'('
name|'flavor'
op|'.'
name|'root_gb'
op|'<'
name|'instance'
op|'.'
name|'root_gb'
name|'or'
nl|'\n'
op|'('
name|'flavor'
op|'.'
name|'root_gb'
op|'!='
number|'0'
name|'and'
nl|'\n'
name|'flavor'
op|'.'
name|'root_gb'
op|'<'
name|'vmdk'
op|'.'
name|'capacity_in_bytes'
op|'/'
name|'units'
op|'.'
name|'Gi'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Unable to shrink disk."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceFaultRollback'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ResizeError'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(garyk): treat dest parameter. Migration needs to be treated.'
nl|'\n'
nl|'\n'
comment|'# 0. Zero out the progress to begin'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'0'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 1. Power off the instance'
nl|'\n'
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'1'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2. Reconfigure the VM properties'
nl|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_resize_vm'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'flavor'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'2'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3.Reconfigure the disk properties'
nl|'\n'
name|'self'
op|'.'
name|'_resize_disk'
op|'('
name|'instance'
op|','
name|'vm_ref'
op|','
name|'vmdk'
op|','
name|'flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'3'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
comment|'# 4. Purge ephemeral and swap disks'
nl|'\n'
name|'self'
op|'.'
name|'_remove_ephemerals_and_swap'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'4'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a resize, destroying the source VM."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'vmdk'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'ds_ref'
op|'='
name|'vmdk'
op|'.'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'datastore'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'folder'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'dirname'
newline|'\n'
name|'datastore'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'datastore'
newline|'\n'
name|'original_disk'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|','
name|'folder'
op|','
nl|'\n'
string|"'original.vmdk'"
op|')'
newline|'\n'
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'if'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
nl|'\n'
name|'original_disk'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'original_disk'
op|'.'
name|'basename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'disk_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'original_disk'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finish reverting a resize."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Ensure that the VM is off'
nl|'\n'
name|'vm_util'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
comment|'# Reconfigure the VM properties'
nl|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'extra_specs'
op|'='
name|'self'
op|'.'
name|'_get_extra_specs'
op|'('
name|'instance'
op|'.'
name|'flavor'
op|','
name|'image_meta'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'_get_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'vm_resize_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_resize_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'int'
op|'('
name|'instance'
op|'.'
name|'vcpus'
op|')'
op|','
nl|'\n'
name|'int'
op|'('
name|'instance'
op|'.'
name|'memory_mb'
op|')'
op|','
nl|'\n'
name|'extra_specs'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'metadata'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vm_resize_spec'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reconfigure the disks if necessary'
nl|'\n'
name|'vmdk'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'ds_ref'
op|'='
name|'vmdk'
op|'.'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'datastore'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'folder'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'dirname'
newline|'\n'
name|'datastore'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'vmdk'
op|'.'
name|'path'
op|')'
op|'.'
name|'datastore'
newline|'\n'
name|'original_disk'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'datastore'
op|','
name|'folder'
op|','
nl|'\n'
string|"'original.vmdk'"
op|')'
newline|'\n'
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'if'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
nl|'\n'
name|'original_disk'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'original_disk'
op|'.'
name|'basename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'detach_disk_from_vm'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
name|'vmdk'
op|'.'
name|'device'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'disk_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
name|'vmdk'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'disk_move'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'original_disk'
op|')'
op|','
name|'vmdk'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'vmdk'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vmdk'
op|'.'
name|'disk_type'
op|','
name|'vmdk'
op|'.'
name|'path'
op|')'
newline|'\n'
comment|'# Reconfigure ephemerals'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_remove_ephemerals_and_swap'
op|'('
name|'vm_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_resize_create_ephemerals_and_swap'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|'='
name|'False'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes a resize, turning on the migrated instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# 5. Update ephemerals if necessary'
nl|'\n'
name|'self'
op|'.'
name|'_resize_create_ephemerals_and_swap'
op|'('
name|'vm_ref'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'5'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
comment|'# 6. Start VM'
nl|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'vm_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_progress'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'step'
op|'='
number|'6'
op|','
nl|'\n'
name|'total_steps'
op|'='
name|'RESIZE_TOTAL_STEPS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll for rebooting instances."""'
newline|'\n'
name|'ctxt'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instances_info'
op|'='
name|'dict'
op|'('
name|'instance_count'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instances_info'
op|'['
string|'"instance_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Found %(instance_count)d hung reboots "'
nl|'\n'
string|'"older than %(timeout)d seconds"'
op|')'
op|','
name|'instances_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Automatically hard rebooting"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
string|'"HARD"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the VM instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.config.numCpu"'
op|','
nl|'\n'
string|'"summary.config.memorySizeMB"'
op|','
nl|'\n'
string|'"runtime.powerState"'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_properties_dict"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'ManagedObjectNotFoundException'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'max_mem'
op|'='
name|'int'
op|'('
name|'vm_props'
op|'.'
name|'get'
op|'('
string|"'summary.config.memorySizeMB'"
op|','
number|'0'
op|')'
op|')'
op|'*'
number|'1024'
newline|'\n'
name|'num_cpu'
op|'='
name|'int'
op|'('
name|'vm_props'
op|'.'
name|'get'
op|'('
string|"'summary.config.numCpu'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'return'
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
nl|'\n'
name|'state'
op|'='
name|'VMWARE_POWER_STATES'
op|'['
name|'vm_props'
op|'['
string|"'runtime.powerState'"
op|']'
op|']'
op|','
nl|'\n'
name|'max_mem_kb'
op|'='
name|'max_mem'
op|','
nl|'\n'
name|'mem_kb'
op|'='
name|'max_mem'
op|','
nl|'\n'
name|'num_cpu'
op|'='
name|'num_cpu'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_diagnostics
dedent|''
name|'def'
name|'_get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'lst_properties'
op|'='
op|'['
string|'"summary.config"'
op|','
nl|'\n'
string|'"summary.quickStats"'
op|','
nl|'\n'
string|'"summary.runtime"'
op|']'
newline|'\n'
name|'vm_props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_properties_dict"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'lst_properties'
op|')'
newline|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# All of values received are objects. Convert them to dictionaries'
nl|'\n'
name|'for'
name|'value'
name|'in'
name|'vm_props'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'prop_dict'
op|'='
name|'vim_util'
op|'.'
name|'object_to_dict'
op|'('
name|'value'
op|','
name|'list_depth'
op|'='
number|'1'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'update'
op|'('
name|'prop_dict'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
comment|'# Add a namespace to all of the diagnostsics'
nl|'\n'
name|'return'
op|'{'
string|"'vmware:'"
op|'+'
name|'k'
op|':'
name|'v'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'data'
op|'.'
name|'items'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about VM diagnostics."""'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'_get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'state'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'powerState'"
op|')'
newline|'\n'
name|'if'
name|'state'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'power_state'
op|'.'
name|'STATE_MAP'
op|'['
name|'VMWARE_POWER_STATES'
op|'['
name|'state'
op|']'
op|']'
newline|'\n'
dedent|''
name|'uptime'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'uptimeSeconds'"
op|','
number|'0'
op|')'
newline|'\n'
name|'config_drive'
op|'='
name|'configdrive'
op|'.'
name|'required_by'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'diags'
op|'='
name|'diagnostics'
op|'.'
name|'Diagnostics'
op|'('
name|'state'
op|'='
name|'state'
op|','
nl|'\n'
name|'driver'
op|'='
string|"'vmwareapi'"
op|','
nl|'\n'
name|'config_drive'
op|'='
name|'config_drive'
op|','
nl|'\n'
name|'hypervisor_os'
op|'='
string|"'esxi'"
op|','
nl|'\n'
name|'uptime'
op|'='
name|'uptime'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'memory_details'
op|'.'
name|'maximum'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'memorySizeMB'"
op|','
number|'0'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'memory_details'
op|'.'
name|'used'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'guestMemoryUsage'"
op|','
number|'0'
op|')'
newline|'\n'
comment|'# TODO(garyk): add in cpu, nic and disk stats'
nl|'\n'
name|'return'
name|'diags'
newline|'\n'
nl|'\n'
DECL|member|_get_vnc_console_connection
dedent|''
name|'def'
name|'_get_vnc_console_connection'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'opt_value'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|"'get_object_property'"
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'vm_util'
op|'.'
name|'VNC_CONFIG_KEY'
op|')'
newline|'\n'
name|'if'
name|'opt_value'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
name|'int'
op|'('
name|'opt_value'
op|'.'
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_get_machine_id_str
name|'def'
name|'_get_machine_id_str'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'machine_id_str'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
comment|'# TODO(vish): add support for dns2'
nl|'\n'
comment|'# TODO(sateesh): add support for injection of ipv6 configuration'
nl|'\n'
indent|'            '
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'ip_v4'
op|'='
name|'netmask_v4'
op|'='
name|'gateway_v4'
op|'='
name|'broadcast_v4'
op|'='
name|'dns'
op|'='
name|'None'
newline|'\n'
name|'subnets_v4'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'network'
op|'['
string|"'subnets'"
op|']'
name|'if'
name|'s'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'subnets_v4'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'ip_v4'
op|'='
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'dns'"
op|']'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'dns'
op|'='
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'dns'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'netmask_v4'
op|'='
name|'str'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'netmask'
op|')'
newline|'\n'
name|'gateway_v4'
op|'='
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'broadcast_v4'
op|'='
name|'str'
op|'('
name|'subnets_v4'
op|'['
number|'0'
op|']'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'broadcast'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'interface_str'
op|'='
string|'";"'
op|'.'
name|'join'
op|'('
op|'['
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'ip_v4'
name|'and'
name|'ip_v4'
op|'['
string|"'address'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
name|'netmask_v4'
name|'or'
string|"''"
op|','
nl|'\n'
name|'gateway_v4'
name|'or'
string|"''"
op|','
nl|'\n'
name|'broadcast_v4'
name|'or'
string|"''"
op|','
nl|'\n'
name|'dns'
name|'or'
string|"''"
op|']'
op|')'
newline|'\n'
name|'machine_id_str'
op|'='
name|'machine_id_str'
op|'+'
name|'interface_str'
op|'+'
string|"'#'"
newline|'\n'
dedent|''
name|'return'
name|'machine_id_str'
newline|'\n'
nl|'\n'
DECL|member|_set_machine_id
dedent|''
name|'def'
name|'_set_machine_id'
op|'('
name|'self'
op|','
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the machine id of the VM for guest tools to pick up\n        and reconfigure the network interfaces.\n        """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'machine_id_change_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_machine_id_change_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_machine_id_str'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance to set the machine id"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'machine_id_change_spec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance to set the machine id"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'vmware.get_and_set_vnc_port'"
op|')'
newline|'\n'
DECL|member|_get_and_set_vnc_config
name|'def'
name|'_get_and_set_vnc_config'
op|'('
name|'self'
op|','
name|'client_factory'
op|','
name|'instance'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the vnc configuration of the VM."""'
newline|'\n'
name|'port'
op|'='
name|'vm_util'
op|'.'
name|'get_vnc_port'
op|'('
name|'self'
op|'.'
name|'_session'
op|')'
newline|'\n'
name|'vnc_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vnc_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance to enable vnc on "'
nl|'\n'
string|'"port - %(port)s"'
op|','
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
name|'vnc_config_spec'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance to enable vnc on "'
nl|'\n'
string|'"port - %(port)s"'
op|','
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ds_browser
dedent|''
name|'def'
name|'_get_ds_browser'
op|'('
name|'self'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_datastore_browser_mapping'
op|'.'
name|'get'
op|'('
name|'ds_ref'
op|'.'
name|'value'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds_browser'
op|':'
newline|'\n'
indent|'            '
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'ds_ref'
op|','
nl|'\n'
string|'"browser"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_datastore_browser_mapping'
op|'['
name|'ds_ref'
op|'.'
name|'value'
op|']'
op|'='
name|'ds_browser'
newline|'\n'
dedent|''
name|'return'
name|'ds_browser'
newline|'\n'
nl|'\n'
DECL|member|_get_host_ref_from_name
dedent|''
name|'def'
name|'_get_host_ref_from_name'
op|'('
name|'self'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get reference to the host with the name specified."""'
newline|'\n'
name|'host_objs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'vm_util'
op|'.'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'host_objs'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'host_objs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'host'
op|','
string|"'propSet'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'host'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'host_name'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'host'
op|'.'
name|'obj'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_create_folder_if_missing
dedent|''
name|'def'
name|'_create_folder_if_missing'
op|'('
name|'self'
op|','
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'folder'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a folder if it does not exist.\n\n        Currently there are two folder that are required on the datastore\n         - base folder - the folder to store cached images\n         - temp folder - the folder used for snapshot management and\n                         image uploading\n        This method is aimed to be used for the management of those\n        folders to ensure that they are created if they are missing.\n        The ds_util method mkdir will be used to check if the folder\n        exists. If this throws and exception \'FileAlreadyExistsException\'\n        then the folder already exists on the datastore.\n        """'
newline|'\n'
name|'path'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'('
name|'ds_name'
op|','
name|'folder'
op|')'
newline|'\n'
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'ds_util'
op|'.'
name|'mkdir'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'path'
op|','
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Folder %s created."'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileAlreadyExistsException'
op|':'
newline|'\n'
comment|'# NOTE(hartsocks): if the folder already exists, that'
nl|'\n'
comment|'# just means the folder was prepped by another process.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|check_cache_folder
dedent|''
dedent|''
name|'def'
name|'check_cache_folder'
op|'('
name|'self'
op|','
name|'ds_name'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the cache folder exists."""'
newline|'\n'
name|'self'
op|'.'
name|'_create_folder_if_missing'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'self'
op|'.'
name|'_base_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_temp_folder
dedent|''
name|'def'
name|'check_temp_folder'
op|'('
name|'self'
op|','
name|'ds_name'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the temp folder exists."""'
newline|'\n'
name|'self'
op|'.'
name|'_create_folder_if_missing'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'self'
op|'.'
name|'_tmp_folder'
op|')'
newline|'\n'
nl|'\n'
DECL|member|inject_network_info
dedent|''
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""inject network info for specified instance."""'
newline|'\n'
comment|'# Set the machine.id parameter of the instance to inject'
nl|'\n'
comment|'# the NIC configuration inside the VM'
nl|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'self'
op|'.'
name|'_set_machine_id'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|manage_image_cache
dedent|''
name|'def'
name|'manage_image_cache'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'remove_unused_base_images'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Image aging disabled. Aging will not be done."'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'datastores'
op|'='
name|'ds_util'
op|'.'
name|'get_available_datastores'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_datastore_regex'
op|')'
newline|'\n'
name|'datastores_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ds'
name|'in'
name|'datastores'
op|':'
newline|'\n'
indent|'            '
name|'dc_info'
op|'='
name|'self'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'ds'
op|'.'
name|'ref'
op|')'
newline|'\n'
name|'datastores_info'
op|'.'
name|'append'
op|'('
op|'('
name|'ds'
op|','
name|'dc_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_imagecache'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instances'
op|','
name|'datastores_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_valid_vms_from_retrieve_result
dedent|''
name|'def'
name|'_get_valid_vms_from_retrieve_result'
op|'('
name|'self'
op|','
name|'retrieve_result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns list of valid vms from RetrieveResult object."""'
newline|'\n'
name|'lst_vm_names'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'while'
name|'retrieve_result'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vm'
name|'in'
name|'retrieve_result'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'                '
name|'vm_name'
op|'='
name|'None'
newline|'\n'
name|'conn_state'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'prop'
name|'in'
name|'vm'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"name"'
op|':'
newline|'\n'
indent|'                        '
name|'vm_name'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'name'
op|'=='
string|'"runtime.connectionState"'
op|':'
newline|'\n'
indent|'                        '
name|'conn_state'
op|'='
name|'prop'
op|'.'
name|'val'
newline|'\n'
comment|'# Ignoring the orphaned or inaccessible VMs'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'conn_state'
name|'not'
name|'in'
op|'['
string|'"orphaned"'
op|','
string|'"inaccessible"'
op|']'
name|'and'
nl|'\n'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'vm_name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'lst_vm_names'
op|'.'
name|'append'
op|'('
name|'vm_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'retrieve_result'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
nl|'\n'
string|"'continue_retrieval'"
op|','
nl|'\n'
name|'retrieve_result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lst_vm_names'
newline|'\n'
nl|'\n'
DECL|member|instance_exists
dedent|''
name|'def'
name|'instance_exists'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|attach_interface
dedent|''
dedent|''
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an interface to the instance."""'
newline|'\n'
name|'vif_model'
op|'='
name|'image_meta'
op|'.'
name|'properties'
op|'.'
name|'get'
op|'('
string|"'hw_vif_model'"
op|','
nl|'\n'
name|'constants'
op|'.'
name|'DEFAULT_VIF_MODEL'
op|')'
newline|'\n'
name|'vif_model'
op|'='
name|'vm_util'
op|'.'
name|'convert_vif_model'
op|'('
name|'vif_model'
op|')'
newline|'\n'
name|'vif_info'
op|'='
name|'vmwarevif'
op|'.'
name|'get_vif_dict'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'self'
op|'.'
name|'_cluster'
op|','
nl|'\n'
name|'vif_model'
op|','
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|','
name|'vif'
op|')'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Ensure that there is not a race with the port index management'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-hot-plug'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port_index'
op|'='
name|'vm_util'
op|'.'
name|'get_attach_port_index'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'attach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_network_attach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'vif_info'
op|','
name|'port_index'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM to attach interface"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'attach_config_spec'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Attaching network adapter failed. Exception: '"
nl|'\n'
string|"'%s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_network_api'
op|'.'
name|'update_instance_vnic_index'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'port_index'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM to attach interface"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_interface
dedent|''
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach an interface from the instance."""'
newline|'\n'
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Ensure that there is not a race with the port index management'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-hot-plug'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port_index'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_detach_port_index'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'port_index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"No device with interface-id %s exists on "'
nl|'\n'
string|'"VM"'
op|')'
op|'%'
name|'vif'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vutil'
op|','
nl|'\n'
string|'"get_object_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
string|'"config.hardware.device"'
op|')'
newline|'\n'
name|'device'
op|'='
name|'vmwarevif'
op|'.'
name|'get_network_device'
op|'('
name|'hardware_devices'
op|','
nl|'\n'
name|'vif'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'device'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"No device with MAC address %s exists on the "'
nl|'\n'
string|'"VM"'
op|')'
op|'%'
name|'vif'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_network_api'
op|'.'
name|'update_instance_vnic_index'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vif'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'client_factory'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'detach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_network_detach_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'device'
op|','
name|'port_index'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM to detach interface"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_util'
op|'.'
name|'reconfigure_vm'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'detach_config_spec'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Detaching network adapter failed. Exception: '"
nl|'\n'
string|"'%s'"
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceDetachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM to detach interface"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_use_disk_image_as_full_clone
dedent|''
name|'def'
name|'_use_disk_image_as_full_clone'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses cached image disk by copying it into the VM directory."""'
newline|'\n'
nl|'\n'
name|'instance_folder'
op|'='
name|'vi'
op|'.'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'root_disk_name'
op|'='
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'root_disk_ds_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'instance_folder'
op|','
nl|'\n'
name|'root_disk_name'
op|')'
newline|'\n'
nl|'\n'
name|'vm_util'
op|'.'
name|'copy_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_extend_if_required'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'ii'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|','
name|'False'
op|','
nl|'\n'
name|'disk_io_limits'
op|'='
name|'vi'
op|'.'
name|'_extra_specs'
op|'.'
name|'disk_io_limits'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sized_image_exists
dedent|''
name|'def'
name|'_sized_image_exists'
op|'('
name|'self'
op|','
name|'sized_disk_ds_loc'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds_browser'
op|'='
name|'self'
op|'.'
name|'_get_ds_browser'
op|'('
name|'ds_ref'
op|')'
newline|'\n'
name|'return'
name|'ds_util'
op|'.'
name|'file_exists'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_browser'
op|','
name|'sized_disk_ds_loc'
op|'.'
name|'parent'
op|','
nl|'\n'
name|'sized_disk_ds_loc'
op|'.'
name|'basename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_use_disk_image_as_linked_clone
dedent|''
name|'def'
name|'_use_disk_image_as_linked_clone'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses cached image as parent of a COW child in the VM directory."""'
newline|'\n'
nl|'\n'
name|'sized_image_disk_name'
op|'='
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
newline|'\n'
name|'if'
name|'vi'
op|'.'
name|'root_gb'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'sized_image_disk_name'
op|'='
string|'"%s.%s.vmdk"'
op|'%'
op|'('
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'image_id'
op|','
name|'vi'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
dedent|''
name|'sized_disk_ds_loc'
op|'='
name|'vi'
op|'.'
name|'cache_image_folder'
op|'.'
name|'join'
op|'('
name|'sized_image_disk_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure only a single thread extends the image at once.'
nl|'\n'
comment|'# We do this by taking a lock on the name of the extended'
nl|'\n'
comment|'# image. This allows multiple threads to create resized'
nl|'\n'
comment|'# copies simultaneously, as long as they are different'
nl|'\n'
comment|'# sizes. Threads attempting to create the same resized copy'
nl|'\n'
comment|'# will be serialized, with only the first actually creating'
nl|'\n'
comment|'# the copy.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Note that the object is in a per-nova cache directory,'
nl|'\n'
comment|'# so inter-nova locking is not a concern. Consequently we'
nl|'\n'
comment|'# can safely use simple thread locks.'
nl|'\n'
nl|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-vmware-image'"
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_sized_image_exists'
op|'('
name|'sized_disk_ds_loc'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copying root disk of size %sGb"'
op|','
name|'vi'
op|'.'
name|'root_gb'
op|','
nl|'\n'
name|'instance'
op|'='
name|'vi'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'vm_util'
op|'.'
name|'copy_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Root disk file creation "'
nl|'\n'
string|'"failed - %s"'
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Failed to copy cached '"
nl|'\n'
string|"'image %(source)s to '"
nl|'\n'
string|"'%(dest)s for resize: '"
nl|'\n'
string|"'%(error)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'source'"
op|':'
name|'vi'
op|'.'
name|'cache_image_path'
op|','
nl|'\n'
string|"'dest'"
op|':'
name|'sized_disk_ds_loc'
op|','
nl|'\n'
string|"'error'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'ds_util'
op|'.'
name|'file_delete'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'sized_disk_ds_loc'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'FileNotFoundException'
op|':'
newline|'\n'
comment|'# File was never created: cleanup not'
nl|'\n'
comment|'# required'
nl|'\n'
indent|'                            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Resize the copy to the appropriate size. No need'
nl|'\n'
comment|'# for cleanup up here, as _extend_virtual_disk'
nl|'\n'
comment|'# already does it'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_extend_if_required'
op|'('
nl|'\n'
name|'vi'
op|'.'
name|'dc_info'
op|','
name|'vi'
op|'.'
name|'ii'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Associate the sized image disk to the VM by attaching to the VM a'
nl|'\n'
comment|'# COW child of said disk.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'sized_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'linked_clone'
op|','
nl|'\n'
name|'disk_io_limits'
op|'='
name|'vi'
op|'.'
name|'_extra_specs'
op|'.'
name|'disk_io_limits'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_use_iso_image
dedent|''
name|'def'
name|'_use_iso_image'
op|'('
name|'self'
op|','
name|'vm_ref'
op|','
name|'vi'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses cached image as a bootable virtual cdrom."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_attach_cdrom_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'str'
op|'('
name|'vi'
op|'.'
name|'cache_image_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Optionally create and attach blank disk'
nl|'\n'
name|'if'
name|'vi'
op|'.'
name|'root_gb'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'instance_folder'
op|'='
name|'vi'
op|'.'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'root_disk_name'
op|'='
string|'"%s.vmdk"'
op|'%'
name|'vi'
op|'.'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'root_disk_ds_loc'
op|'='
name|'vi'
op|'.'
name|'datastore'
op|'.'
name|'build_path'
op|'('
name|'instance_folder'
op|','
nl|'\n'
name|'root_disk_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# It is pointless to COW a blank disk'
nl|'\n'
name|'linked_clone'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'vm_util'
op|'.'
name|'create_virtual_disk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
name|'vi'
op|'.'
name|'dc_info'
op|'.'
name|'ref'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_volumeops'
op|'.'
name|'attach_disk_to_vm'
op|'('
nl|'\n'
name|'vm_ref'
op|','
name|'vi'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'adapter_type'
op|','
name|'vi'
op|'.'
name|'ii'
op|'.'
name|'disk_type'
op|','
nl|'\n'
name|'str'
op|'('
name|'root_disk_ds_loc'
op|')'
op|','
nl|'\n'
name|'vi'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Mi'
op|','
name|'linked_clone'
op|','
nl|'\n'
name|'disk_io_limits'
op|'='
name|'vi'
op|'.'
name|'_extra_specs'
op|'.'
name|'disk_io_limits'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_datacenter_ref_and_name
dedent|''
dedent|''
name|'def'
name|'get_datacenter_ref_and_name'
op|'('
name|'self'
op|','
name|'ds_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the datacenter name and the reference."""'
newline|'\n'
name|'return'
name|'ds_util'
op|'.'
name|'get_dc_info'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'ds_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lists the VM instances that are registered with vCenter cluster."""'
newline|'\n'
name|'properties'
op|'='
op|'['
string|"'name'"
op|','
string|"'runtime.connectionState'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting list of instances from cluster %s"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_cluster'
op|')'
newline|'\n'
name|'vms'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_root_resource_pool'
op|':'
newline|'\n'
indent|'            '
name|'vms'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|"'get_inner_objects'"
op|','
name|'self'
op|'.'
name|'_root_resource_pool'
op|','
string|"'vm'"
op|','
nl|'\n'
string|"'VirtualMachine'"
op|','
name|'properties'
op|')'
newline|'\n'
dedent|''
name|'lst_vm_names'
op|'='
name|'self'
op|'.'
name|'_get_valid_vms_from_retrieve_result'
op|'('
name|'vms'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Got total of %s instances"'
op|','
name|'str'
op|'('
name|'len'
op|'('
name|'lst_vm_names'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'lst_vm_names'
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection info for a vnc console using vCenter logic."""'
newline|'\n'
nl|'\n'
comment|'# vCenter does not run virtual machines and does not run'
nl|'\n'
comment|'# a VNC proxy. Instead, you need to tell OpenStack to talk'
nl|'\n'
comment|'# directly to the ESX host running the VM you are attempting'
nl|'\n'
comment|'# to connect to via VNC.'
nl|'\n'
nl|'\n'
name|'vnc_console'
op|'='
name|'self'
op|'.'
name|'_get_vnc_console_connection'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'host_name'
op|'='
name|'vm_util'
op|'.'
name|'get_host_name_for_vm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_session'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'vnc_console'
op|'['
string|"'host'"
op|']'
op|'='
name|'host_name'
newline|'\n'
nl|'\n'
comment|'# NOTE: VM can move hosts in some situations. Debug for admins.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM %(uuid)s is currently on host %(host_name)s"'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'host_name'"
op|':'
name|'host_name'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'ctype'
op|'.'
name|'ConsoleVNC'
op|'('
op|'**'
name|'vnc_console'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_mks_console
dedent|''
name|'def'
name|'get_mks_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_ref'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'ticket'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|"'AcquireTicket'"
op|','
nl|'\n'
name|'vm_ref'
op|','
nl|'\n'
name|'ticketType'
op|'='
string|"'mks'"
op|')'
newline|'\n'
name|'thumbprint'
op|'='
name|'ticket'
op|'.'
name|'sslThumbprint'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'mks_auth'
op|'='
op|'{'
string|"'ticket'"
op|':'
name|'ticket'
op|'.'
name|'ticket'
op|','
nl|'\n'
string|"'cfgFile'"
op|':'
name|'ticket'
op|'.'
name|'cfgFile'
op|','
nl|'\n'
string|"'thumbprint'"
op|':'
name|'thumbprint'
op|'}'
newline|'\n'
name|'internal_access_path'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'mks_auth'
op|')'
newline|'\n'
name|'return'
name|'ctype'
op|'.'
name|'ConsoleMKS'
op|'('
name|'ticket'
op|'.'
name|'host'
op|','
name|'ticket'
op|'.'
name|'port'
op|','
name|'internal_access_path'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

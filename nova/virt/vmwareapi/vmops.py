begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\r\n'
nl|'\r\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\r\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\r\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\r\n'
comment|'#    a copy of the License at'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\r\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\r\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\r\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\r\n'
comment|'#    under the License.'
nl|'\r\n'
nl|'\r\n'
string|'"""\r\nClass for VM tasks like spawn, snapshot, suspend, resume etc.\r\n\r\n"""'
newline|'\r\n'
name|'import'
name|'logging'
newline|'\r\n'
name|'import'
name|'os'
newline|'\r\n'
name|'import'
name|'time'
newline|'\r\n'
name|'import'
name|'uuid'
newline|'\r\n'
nl|'\r\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\r\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vm_util'
newline|'\r\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vmware_images'
newline|'\r\n'
nl|'\r\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.vmwareapi.vmops"'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|variable|VMWARE_POWER_STATES
name|'VMWARE_POWER_STATES'
op|'='
op|'{'
nl|'\r\n'
string|"'poweredOff'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\r\n'
string|"'poweredOn'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\r\n'
string|"'suspended'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
newline|'\r\n'
nl|'\r\n'
nl|'\r\n'
DECL|class|VMWareVMOps
name|'class'
name|'VMWareVMOps'
op|'('
name|'object'
op|')'
op|':'
newline|'\r\n'
indent|'    '
string|'"""\r\n    Management class for VM-related tasks\r\n    """'
newline|'\r\n'
nl|'\r\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'session'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Initializer\r\n        """'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'session'
newline|'\r\n'
nl|'\r\n'
DECL|member|_wait_with_callback
dedent|''
name|'def'
name|'_wait_with_callback'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'task'
op|','
name|'callback'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Waits for the task to finish and does a callback after\r\n        """'
newline|'\r\n'
name|'ret'
op|'='
name|'None'
newline|'\r\n'
name|'try'
op|':'
newline|'\r\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance_id'
op|','
name|'task'
op|')'
newline|'\r\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'excep'
op|':'
newline|'\r\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'excep'
op|')'
newline|'\r\n'
dedent|''
name|'callback'
op|'('
name|'ret'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Lists the VM instances that are registered with the ESX host\r\n        """'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting list of instances"'
op|')'
newline|'\r\n'
name|'vms'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
nl|'\r\n'
op|'['
string|'"name"'
op|','
string|'"runtime.connectionState"'
op|']'
op|')'
newline|'\r\n'
name|'lst_vm_names'
op|'='
op|'['
op|']'
newline|'\r\n'
name|'for'
name|'vm'
name|'in'
name|'vms'
op|':'
newline|'\r\n'
indent|'            '
name|'vm_name'
op|'='
name|'None'
newline|'\r\n'
name|'conn_state'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'prop'
name|'in'
name|'vm'
op|'.'
name|'PropSet'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"name"'
op|':'
newline|'\r\n'
indent|'                    '
name|'vm_name'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"runtime.connectionState"'
op|':'
newline|'\r\n'
indent|'                    '
name|'conn_state'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
comment|'# Ignoring the oprhaned or inaccessible VMs'
nl|'\r\n'
dedent|''
dedent|''
name|'if'
name|'conn_state'
name|'not'
name|'in'
op|'['
string|'"orphaned"'
op|','
string|'"inaccessible"'
op|']'
op|':'
newline|'\r\n'
indent|'                '
name|'lst_vm_names'
op|'.'
name|'append'
op|'('
name|'vm_name'
op|')'
newline|'\r\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Got total of %s instances"'
op|'%'
name|'str'
op|'('
name|'len'
op|'('
name|'lst_vm_names'
op|')'
op|')'
op|')'
newline|'\r\n'
name|'return'
name|'lst_vm_names'
newline|'\r\n'
nl|'\r\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Creates a VM instance.\r\n\r\n        Steps followed are:\r\n        1. Create a VM with no disk and the specifics in the instance object\r\n            like RAM size.\r\n        2. Create a dummy vmdk of the size of the disk file that is to be\r\n            uploaded. This is required just to create the metadata file.\r\n        3. Delete the -flat.vmdk file created in the above step and retain\r\n            the metadata .vmdk file.\r\n        4. Upload the disk file.\r\n        5. Attach the disk to the VM by reconfiguring the same.\r\n        6. Power on the VM\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Attempted to create a VM with a name %s, '"
nl|'\r\n'
string|"'but that already exists on the host'"
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'bridge'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\r\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|'['
string|"'bridge'"
op|']'
newline|'\r\n'
comment|"#TODO(sateesh): Shouldn't we consider any public network in case"
nl|'\r\n'
comment|"#the network name supplied isn't there"
nl|'\r\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'_get_network_with_the_name'
op|'('
name|'bridge'
op|')'
newline|'\r\n'
name|'if'
name|'network_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Network with the name \'%s\' doesn\'t exist on "'
nl|'\r\n'
string|'"the ESX host"'
op|'%'
name|'bridge'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Get the Size of the flat vmdk file that is there on the storage'
nl|'\r\n'
comment|'#repository.'
nl|'\r\n'
dedent|''
name|'image_size'
op|','
name|'image_properties'
op|'='
name|'vmware_images'
op|'.'
name|'get_vmdk_size_and_properties'
op|'('
name|'instance'
op|'.'
name|'image_id'
op|','
nl|'\r\n'
name|'instance'
op|')'
newline|'\r\n'
name|'vmdk_file_size_in_kb'
op|'='
name|'int'
op|'('
name|'image_size'
op|')'
op|'/'
number|'1024'
newline|'\r\n'
name|'os_type'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|'"vmware_ostype"'
op|','
string|'"otherGuest"'
op|')'
newline|'\r\n'
name|'adapter_type'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|'"vmware_adaptertype"'
op|','
string|'"lsiLogic"'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'# Get the datastore list and choose the first local storage'
nl|'\r\n'
name|'data_stores'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datastore"'
op|','
op|'['
string|'"summary.type"'
op|','
string|'"summary.name"'
op|']'
op|')'
newline|'\r\n'
name|'data_store_name'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'elem'
name|'in'
name|'data_stores'
op|':'
newline|'\r\n'
indent|'            '
name|'ds_name'
op|'='
name|'None'
newline|'\r\n'
name|'ds_type'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'PropSet'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.type"'
op|':'
newline|'\r\n'
indent|'                    '
name|'ds_type'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.name"'
op|':'
newline|'\r\n'
indent|'                    '
name|'ds_name'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
comment|'#Local storage identifier'
nl|'\r\n'
dedent|''
dedent|''
name|'if'
name|'ds_type'
op|'=='
string|'"VMFS"'
op|':'
newline|'\r\n'
indent|'                '
name|'data_store_name'
op|'='
name|'ds_name'
newline|'\r\n'
name|'break'
newline|'\r\n'
nl|'\r\n'
dedent|''
dedent|''
name|'if'
name|'data_store_name'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'msg'
op|'='
string|'"Couldn\'t get a local Datastore reference"'
newline|'\r\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|')'
newline|'\r\n'
name|'raise'
name|'Exception'
op|'('
name|'msg'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vm_create_spec'
op|'('
name|'instance'
op|','
name|'data_store_name'
op|','
nl|'\r\n'
name|'bridge'
op|','
name|'os_type'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Get the Vm folder ref from the datacenter'
nl|'\r\n'
name|'dc_objs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datacenter"'
op|','
op|'['
string|'"vmFolder"'
op|']'
op|')'
newline|'\r\n'
comment|'#There is only one default datacenter in a standalone ESX host'
nl|'\r\n'
name|'vm_folder_ref'
op|'='
name|'dc_objs'
op|'['
number|'0'
op|']'
op|'.'
name|'PropSet'
op|'['
number|'0'
op|']'
op|'.'
name|'Val'
newline|'\r\n'
nl|'\r\n'
comment|'#Get the resource pool. Taking the first resource pool coming our way.'
nl|'\r\n'
comment|'#Assuming that is the default resource pool.'
nl|'\r\n'
name|'res_pool_mor'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"ResourcePool"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'Obj'
newline|'\r\n'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating VM with the name %s on the ESX  host"'
op|'%'
nl|'\r\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
comment|'#Create the VM on the ESX host'
nl|'\r\n'
name|'vm_create_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"CreateVM_Task"'
op|','
name|'vm_folder_ref'
op|','
nl|'\r\n'
name|'config'
op|'='
name|'config_spec'
op|','
name|'pool'
op|'='
name|'res_pool_mor'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'vm_create_task'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created VM with the name %s on the ESX  host"'
op|'%'
nl|'\r\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'# Set the machine id for the VM for setting the IP'
nl|'\r\n'
name|'self'
op|'.'
name|'_set_machine_id'
op|'('
name|'instance'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Naming the VM files in correspondence with the VM instance name'
nl|'\r\n'
nl|'\r\n'
comment|'# The flat vmdk file name'
nl|'\r\n'
name|'flat_uploaded_vmdk_name'
op|'='
string|'"%s/%s-flat.vmdk"'
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
nl|'\r\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
comment|'#The vmdk meta-data file'
nl|'\r\n'
name|'uploaded_vmdk_name'
op|'='
string|'"%s/%s.vmdk"'
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'flat_uploaded_vmdk_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'data_store_name'
op|','
nl|'\r\n'
name|'flat_uploaded_vmdk_name'
op|')'
newline|'\r\n'
name|'uploaded_vmdk_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'data_store_name'
op|','
nl|'\r\n'
name|'uploaded_vmdk_name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Create a Virtual Disk of the size of the flat vmdk file. This is done'
nl|'\r\n'
comment|'#just created to generate the meta-data file whose specifics'
nl|'\r\n'
comment|'#depend on the size of the disk, thin/thick provisioning and the'
nl|'\r\n'
comment|'#storage adapter type.'
nl|'\r\n'
comment|'#Here we assume thick provisioning and lsiLogic for the adapter type'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating Virtual Disk of size %s KB and adapter type %s on "'
nl|'\r\n'
string|'"the ESX host local store %s "'
op|'%'
nl|'\r\n'
op|'('
name|'vmdk_file_size_in_kb'
op|','
name|'adapter_type'
op|','
name|'data_store_name'
op|')'
op|')'
newline|'\r\n'
name|'vmdk_create_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_create_spec'
op|'('
name|'vmdk_file_size_in_kb'
op|','
nl|'\r\n'
name|'adapter_type'
op|')'
newline|'\r\n'
name|'vmdk_create_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"CreateVirtualDisk_Task"'
op|','
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'VirtualDiskManager'
op|','
nl|'\r\n'
name|'name'
op|'='
name|'uploaded_vmdk_path'
op|','
nl|'\r\n'
name|'datacenter'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\r\n'
name|'spec'
op|'='
name|'vmdk_create_spec'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'vmdk_create_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created Virtual Disk of size %s KB on the ESX host local"'
nl|'\r\n'
string|'"store %s "'
op|'%'
op|'('
name|'vmdk_file_size_in_kb'
op|','
name|'data_store_name'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting the file %s on the ESX host local"'
nl|'\r\n'
string|'"store %s "'
op|'%'
op|'('
name|'flat_uploaded_vmdk_path'
op|','
name|'data_store_name'
op|')'
op|')'
newline|'\r\n'
comment|'#Delete the -flat.vmdk file created. .vmdk file is retained.'
nl|'\r\n'
name|'vmdk_delete_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"DeleteDatastoreFile_Task"'
op|','
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'FileManager'
op|','
nl|'\r\n'
name|'name'
op|'='
name|'flat_uploaded_vmdk_path'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'vmdk_delete_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted the file %s on the ESX host local"'
nl|'\r\n'
string|'"store %s "'
op|'%'
op|'('
name|'flat_uploaded_vmdk_path'
op|','
name|'data_store_name'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Downloading image file data %s to the ESX data store %s "'
op|'%'
nl|'\r\n'
op|'('
name|'instance'
op|'.'
name|'image_id'
op|','
name|'data_store_name'
op|')'
op|')'
newline|'\r\n'
comment|'# Upload the -flat.vmdk file whose meta-data file we just created above'
nl|'\r\n'
name|'vmware_images'
op|'.'
name|'fetch_image'
op|'('
nl|'\r\n'
name|'instance'
op|'.'
name|'image_id'
op|','
nl|'\r\n'
name|'instance'
op|','
nl|'\r\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_ip'
op|','
nl|'\r\n'
name|'data_center_name'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\r\n'
name|'datastore_name'
op|'='
name|'data_store_name'
op|','
nl|'\r\n'
name|'cookies'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'proxy'
op|'.'
name|'binding'
op|'.'
name|'cookies'
op|','
nl|'\r\n'
name|'file_path'
op|'='
name|'flat_uploaded_vmdk_name'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Downloaded image file data %s to the ESX data store %s "'
op|'%'
nl|'\r\n'
op|'('
name|'instance'
op|'.'
name|'image_id'
op|','
name|'data_store_name'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Attach the vmdk uploaded to the VM. VM reconfigure is done to do so.'
nl|'\r\n'
name|'vmdk_attach_config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_attach_config_sepc'
op|'('
nl|'\r\n'
name|'vmdk_file_size_in_kb'
op|','
name|'uploaded_vmdk_path'
op|','
nl|'\r\n'
name|'adapter_type'
op|')'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance %s to attach the image "'
nl|'\r\n'
string|'"disk"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'reconfig_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"ReconfigVM_Task"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
name|'spec'
op|'='
name|'vmdk_attach_config_spec'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'reconfig_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance %s to attach the image "'
nl|'\r\n'
string|'"disk"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powering on the VM instance %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
comment|'#Power On the VM'
nl|'\r\n'
name|'power_on_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'power_on_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powered on the VM instance %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'snapshot_name'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Create snapshot from a running VM instance.\r\n        Steps followed are:\r\n        1. Get the name of the vmdk file which the VM points to right now.\r\n            Can be a chain of snapshots, so we need to know the last in the\r\n            chain.\r\n        2. Create the snapshot. A new vmdk is created which the VM points to\r\n            now. The earlier vmdk becomes read-only.\r\n        3. Call CopyVirtualDisk which coalesces the disk chain to form a single\r\n            vmdk, rather a .vmdk metadata file and a -flat.vmdk disk data file.\r\n        4. Now upload the -flat.vmdk file to the image store.\r\n        5. Delete the coalesced .vmdk and -flat.vmdk created\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Get the vmdk file name that the VM is pointing to'
nl|'\r\n'
dedent|''
name|'hardware_devices'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
string|'"config.hardware.device"'
op|')'
newline|'\r\n'
name|'vmdk_file_path_before_snapshot'
op|','
name|'adapter_type'
op|'='
name|'vm_util'
op|'.'
name|'get_vmdk_file_path_and_adapter_type'
op|'('
name|'hardware_devices'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'os_type'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
string|'"summary.config.guestId"'
op|')'
newline|'\r\n'
comment|'#Create a snapshot of the VM'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating Snapshot of the VM instance %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'snapshot_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"CreateSnapshot_Task"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
name|'name'
op|'='
string|'"%s-snapshot"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|','
nl|'\r\n'
name|'description'
op|'='
string|'"Taking Snapshot of the VM"'
op|','
nl|'\r\n'
name|'memory'
op|'='
name|'True'
op|','
nl|'\r\n'
name|'quiesce'
op|'='
name|'True'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'snapshot_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created Snapshot of the VM instance %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'datastore_name'
op|'='
name|'vm_util'
op|'.'
name|'split_datastore_path'
op|'('
nl|'\r\n'
name|'vmdk_file_path_before_snapshot'
op|')'
op|'['
number|'0'
op|']'
newline|'\r\n'
comment|'#Copy the contents of the VM that were there just before the snapshot'
nl|'\r\n'
comment|'#was taken'
nl|'\r\n'
name|'ds_ref'
op|'='
name|'vim_util'
op|'.'
name|'get_dynamic_property'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
name|'vm_ref'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
nl|'\r\n'
string|'"datastore"'
op|')'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\r\n'
name|'ds_browser'
op|'='
name|'vim_util'
op|'.'
name|'get_dynamic_property'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
name|'ds_ref'
op|','
nl|'\r\n'
string|'"Datastore"'
op|','
nl|'\r\n'
string|'"browser"'
op|')'
newline|'\r\n'
comment|'#Check if the vmware-tmp folder exists or not. If not, create one'
nl|'\r\n'
name|'tmp_folder_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'datastore_name'
op|','
nl|'\r\n'
string|'"vmware-tmp"'
op|')'
newline|'\r\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_path_exists'
op|'('
name|'ds_browser'
op|','
name|'tmp_folder_path'
op|')'
op|':'
newline|'\r\n'
indent|'            '
name|'self'
op|'.'
name|'_mkdir'
op|'('
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'datastore_name'
op|','
nl|'\r\n'
string|'"vmware-tmp"'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'copy_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_copy_virtual_disk_spec'
op|'('
name|'adapter_type'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Generate a random vmdk file name to which the coalesced vmdk content'
nl|'\r\n'
comment|"#will be copied to. A random name is chosen so that we don't have"
nl|'\r\n'
comment|'#name clashes.'
nl|'\r\n'
name|'random_name'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\r\n'
name|'dest_vmdk_file_location'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'datastore_name'
op|','
nl|'\r\n'
string|'"vmware-tmp/%s.vmdk"'
op|'%'
name|'random_name'
op|')'
newline|'\r\n'
name|'dc_ref'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\r\n'
nl|'\r\n'
comment|'#Copy the contents of the disk ( or disks, if there were snapshots'
nl|'\r\n'
comment|'#done earlier) to a temporary vmdk file.'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copying disk data before snapshot of the VM instance %s "'
op|'%'
nl|'\r\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'copy_disk_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"CopyVirtualDisk_Task"'
op|','
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'VirtualDiskManager'
op|','
nl|'\r\n'
name|'sourceName'
op|'='
name|'vmdk_file_path_before_snapshot'
op|','
nl|'\r\n'
name|'sourceDatacenter'
op|'='
name|'dc_ref'
op|','
nl|'\r\n'
name|'destName'
op|'='
name|'dest_vmdk_file_location'
op|','
nl|'\r\n'
name|'destDatacenter'
op|'='
name|'dc_ref'
op|','
nl|'\r\n'
name|'destSpec'
op|'='
name|'copy_spec'
op|','
nl|'\r\n'
name|'force'
op|'='
name|'False'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'copy_disk_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copied disk data before snapshot of the VM instance %s "'
op|'%'
nl|'\r\n'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Upload the contents of -flat.vmdk file which has the disk data.'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Uploading image %s"'
op|'%'
name|'snapshot_name'
op|')'
newline|'\r\n'
name|'vmware_images'
op|'.'
name|'upload_image'
op|'('
nl|'\r\n'
name|'snapshot_name'
op|','
nl|'\r\n'
name|'instance'
op|','
nl|'\r\n'
name|'os_type'
op|'='
name|'os_type'
op|','
nl|'\r\n'
name|'adapter_type'
op|'='
name|'adapter_type'
op|','
nl|'\r\n'
name|'image_version'
op|'='
number|'1'
op|','
nl|'\r\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_host_ip'
op|','
nl|'\r\n'
name|'data_center_name'
op|'='
name|'self'
op|'.'
name|'_get_datacenter_name_and_ref'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\r\n'
name|'datastore_name'
op|'='
name|'datastore_name'
op|','
nl|'\r\n'
name|'cookies'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'proxy'
op|'.'
name|'binding'
op|'.'
name|'cookies'
op|','
nl|'\r\n'
name|'file_path'
op|'='
string|'"vmware-tmp/%s-flat.vmdk"'
op|'%'
name|'random_name'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Uploaded image %s"'
op|'%'
name|'snapshot_name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Delete the temporary vmdk created above.'
nl|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting temporary vmdk file %s"'
op|'%'
name|'dest_vmdk_file_location'
op|')'
newline|'\r\n'
name|'remove_disk_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"DeleteVirtualDisk_Task"'
op|','
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'VirtualDiskManager'
op|','
nl|'\r\n'
name|'name'
op|'='
name|'dest_vmdk_file_location'
op|','
nl|'\r\n'
name|'datacenter'
op|'='
name|'dc_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'remove_disk_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted temporary vmdk file %s"'
op|'%'
name|'dest_vmdk_file_location'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Reboot a VM instance\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"summary.guest.toolsStatus"'
op|','
string|'"runtime.powerState"'
op|']'
newline|'\r\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_object_properties"'
op|','
nl|'\r\n'
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\r\n'
name|'lst_properties'
op|')'
newline|'\r\n'
name|'for'
name|'elem'
name|'in'
name|'props'
op|':'
newline|'\r\n'
indent|'            '
name|'pwr_state'
op|'='
name|'None'
newline|'\r\n'
name|'tools_status'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'PropSet'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"runtime.powerState"'
op|':'
newline|'\r\n'
indent|'                    '
name|'pwr_state'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.guest.toolsStatus"'
op|':'
newline|'\r\n'
indent|'                    '
name|'tools_status'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
nl|'\r\n'
comment|'#Raise an exception if the VM is not powered On.'
nl|'\r\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'pwr_state'
name|'not'
name|'in'
op|'['
string|'"poweredOn"'
op|']'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not poweredOn. So can\'t be "'
nl|'\r\n'
string|'"rebooted."'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#If vmware tools are installed in the VM, then do a guest reboot.'
nl|'\r\n'
comment|'#Otherwise do a hard reset.'
nl|'\r\n'
dedent|''
name|'if'
name|'tools_status'
name|'not'
name|'in'
op|'['
string|"'toolsNotInstalled'"
op|','
string|"'toolsNotRunning'"
op|']'
op|':'
newline|'\r\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooting guest OS of VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"RebootGuest"'
op|','
nl|'\r\n'
name|'vm_ref'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rebooted guest OS of VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'else'
op|':'
newline|'\r\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Doing hard reboot of VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'reset_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"ResetVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'reset_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Did hard reboot of VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Destroy a VM instance. Steps followed are:\r\n        1. Power off the VM, if it is in poweredOn state.\r\n        2. Un-register a VM.\r\n        3. Delete the contents of the folder holding the VM related data\r\n        """'
newline|'\r\n'
name|'try'
op|':'
newline|'\r\n'
indent|'            '
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'return'
newline|'\r\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"config.files.vmPathName"'
op|','
string|'"runtime.powerState"'
op|']'
newline|'\r\n'
name|'props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_object_properties"'
op|','
nl|'\r\n'
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
name|'lst_properties'
op|')'
newline|'\r\n'
name|'pwr_state'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'elem'
name|'in'
name|'props'
op|':'
newline|'\r\n'
indent|'                '
name|'vm_config_pathname'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'PropSet'
op|':'
newline|'\r\n'
indent|'                    '
name|'if'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"runtime.powerState"'
op|':'
newline|'\r\n'
indent|'                        '
name|'pwr_state'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"config.files.vmPathName"'
op|':'
newline|'\r\n'
indent|'                        '
name|'vm_config_pathname'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'vm_config_pathname'
op|':'
newline|'\r\n'
indent|'                '
name|'datastore_name'
op|','
name|'vmx_file_path'
op|'='
name|'vm_util'
op|'.'
name|'split_datastore_path'
op|'('
name|'vm_config_pathname'
op|')'
newline|'\r\n'
comment|'#Power off the VM if it is in PoweredOn state.'
nl|'\r\n'
dedent|''
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\r\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powering off the VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'poweroff_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"PowerOffVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'poweroff_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powered off the VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Un-register the VM'
nl|'\r\n'
dedent|''
name|'try'
op|':'
newline|'\r\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unregistering the VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"UnregisterVM"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unregistered the VM %s"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'excep'
op|':'
newline|'\r\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
string|'"In vmwareapi:vmops:destroy, got this exception while"'
nl|'\r\n'
string|'" un-registering the VM: "'
op|'+'
name|'str'
op|'('
name|'excep'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Delete the folder holding the VM related content on the datastore.'
nl|'\r\n'
dedent|''
name|'try'
op|':'
newline|'\r\n'
indent|'                '
name|'dir_ds_compliant_path'
op|'='
name|'vm_util'
op|'.'
name|'build_datastore_path'
op|'('
nl|'\r\n'
name|'datastore_name'
op|','
nl|'\r\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'vmx_file_path'
op|')'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting contents of the VM %s from datastore %s "'
op|'%'
nl|'\r\n'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'datastore_name'
op|')'
op|')'
newline|'\r\n'
name|'delete_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"DeleteDatastoreFile_Task"'
op|','
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'FileManager'
op|','
nl|'\r\n'
name|'name'
op|'='
name|'dir_ds_compliant_path'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'delete_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleted contents of the VM %s from datastore %s "'
op|'%'
nl|'\r\n'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'datastore_name'
op|')'
op|')'
newline|'\r\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'excep'
op|':'
newline|'\r\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
string|'"In vmwareapi:vmops:destroy, "'
nl|'\r\n'
string|'"got this exception while deleting"'
nl|'\r\n'
string|'" the VM contents from the disk: "'
op|'+'
name|'str'
op|'('
name|'excep'
op|')'
op|')'
newline|'\r\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\r\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'e'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|pause
dedent|''
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Pause a VM instance\r\n        """'
newline|'\r\n'
name|'return'
string|'"Not Implemented"'
newline|'\r\n'
nl|'\r\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Un-Pause a VM instance\r\n        """'
newline|'\r\n'
name|'return'
string|'"Not Implemented"'
newline|'\r\n'
nl|'\r\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Suspend the specified instance\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\r\n'
comment|'#Only PoweredOn VMs can be suspended.'
nl|'\r\n'
name|'if'
name|'pwr_state'
op|'=='
string|'"poweredOn"'
op|':'
newline|'\r\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspending the VM %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"SuspendVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_wait_with_callback'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'suspend_task'
op|','
name|'callback'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Suspended the VM %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
comment|'#Raise Exception if VM is poweredOff'
nl|'\r\n'
dedent|''
name|'elif'
name|'pwr_state'
op|'=='
string|'"poweredOff"'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s is poweredOff and hence can\'t "'
nl|'\r\n'
string|'"be suspended."'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM %s was already in suspended state. So returning without "'
nl|'\r\n'
string|'"doing anything"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'callback'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Resume the specified instance\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'pwr_state'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\r\n'
name|'if'
name|'pwr_state'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"suspended"'
op|':'
newline|'\r\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resuming the VM %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'suspend_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_wait_with_callback'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'suspend_task'
op|','
name|'callback'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resumed the VM %s "'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'else'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not in Suspended state and hence "'
nl|'\r\n'
string|'"can\'t be Resumed."'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Return data about the VM instance\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance_name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance_name'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'lst_properties'
op|'='
op|'['
string|'"summary.config.numCpu"'
op|','
nl|'\r\n'
string|'"summary.config.memorySizeMB"'
op|','
nl|'\r\n'
string|'"runtime.powerState"'
op|']'
newline|'\r\n'
name|'vm_props'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_object_properties"'
op|','
name|'None'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\r\n'
name|'lst_properties'
op|')'
newline|'\r\n'
name|'max_mem'
op|'='
name|'None'
newline|'\r\n'
name|'pwr_state'
op|'='
name|'None'
newline|'\r\n'
name|'num_cpu'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'elem'
name|'in'
name|'vm_props'
op|':'
newline|'\r\n'
indent|'            '
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'PropSet'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.config.numCpu"'
op|':'
newline|'\r\n'
indent|'                    '
name|'num_cpu'
op|'='
name|'int'
op|'('
name|'prop'
op|'.'
name|'Val'
op|')'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.config..memorySizeMB"'
op|':'
newline|'\r\n'
comment|'# In MB, but we want in KB'
nl|'\r\n'
indent|'                    '
name|'max_mem'
op|'='
name|'int'
op|'('
name|'prop'
op|'.'
name|'Val'
op|')'
op|'*'
number|'1024'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"runtime.powerState"'
op|':'
newline|'\r\n'
indent|'                    '
name|'pwr_state'
op|'='
name|'VMWARE_POWER_STATES'
op|'['
name|'prop'
op|'.'
name|'Val'
op|']'
newline|'\r\n'
nl|'\r\n'
dedent|''
dedent|''
dedent|''
name|'return'
op|'{'
string|"'state'"
op|':'
name|'pwr_state'
op|','
nl|'\r\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\r\n'
string|"'mem'"
op|':'
name|'max_mem'
op|','
nl|'\r\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\r\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\r\n'
nl|'\r\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Return data about VM diagnostics\r\n        """'
newline|'\r\n'
name|'return'
string|'"Not Implemented"'
newline|'\r\n'
nl|'\r\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Return snapshot of console\r\n        """'
newline|'\r\n'
name|'return'
string|"'FAKE CONSOLE OUTPUT of instance'"
newline|'\r\n'
nl|'\r\n'
DECL|member|get_ajax_console
dedent|''
name|'def'
name|'get_ajax_console'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Return link to instance\'s ajax console\r\n        """'
newline|'\r\n'
name|'return'
string|"'http://fakeajaxconsole/fake_url'"
newline|'\r\n'
nl|'\r\n'
DECL|member|_set_machine_id
dedent|''
name|'def'
name|'_set_machine_id'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Set the machine id of the VM for guest tools to pick up and change the\r\n        IP\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"instance - %s not present"'
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
dedent|''
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get_by_instance'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\r\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\r\n'
name|'mac_addr'
op|'='
name|'instance'
op|'.'
name|'mac_address'
newline|'\r\n'
name|'net_mask'
op|'='
name|'network'
op|'['
string|'"netmask"'
op|']'
newline|'\r\n'
name|'gateway'
op|'='
name|'network'
op|'['
string|'"gateway"'
op|']'
newline|'\r\n'
name|'ip_addr'
op|'='
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\r\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\r\n'
name|'machine_id_chanfge_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_machine_id_change_spec'
op|'('
name|'mac_addr'
op|','
nl|'\r\n'
name|'ip_addr'
op|','
name|'net_mask'
op|','
name|'gateway'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfiguring VM instance %s to set the machine id "'
nl|'\r\n'
string|'"with ip - %s"'
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'ip_addr'
op|')'
op|')'
newline|'\r\n'
name|'reconfig_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"ReconfigVM_Task"'
op|','
name|'vm_ref'
op|','
nl|'\r\n'
name|'spec'
op|'='
name|'machine_id_chanfge_spec'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'reconfig_task'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reconfigured VM instance %s to set the machine id "'
nl|'\r\n'
string|'"with ip - %s"'
op|'%'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'ip_addr'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|_create_dummy_vm_for_test
dedent|''
name|'def'
name|'_create_dummy_vm_for_test'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Create a dummy VM for testing purpose\r\n        """'
newline|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'if'
name|'vm_ref'
op|':'
newline|'\r\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Attempted to create a VM with a name %s, '"
nl|'\r\n'
string|"'but that already exists on the host'"
op|'%'
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'data_stores'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datastore"'
op|','
op|'['
string|'"summary.type"'
op|','
string|'"summary.name"'
op|']'
op|')'
newline|'\r\n'
name|'data_store_name'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'elem'
name|'in'
name|'data_stores'
op|':'
newline|'\r\n'
indent|'            '
name|'ds_name'
op|'='
name|'None'
newline|'\r\n'
name|'ds_type'
op|'='
name|'None'
newline|'\r\n'
name|'for'
name|'prop'
name|'in'
name|'elem'
op|'.'
name|'PropSet'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.type"'
op|':'
newline|'\r\n'
indent|'                    '
name|'ds_type'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
dedent|''
name|'elif'
name|'prop'
op|'.'
name|'Name'
op|'=='
string|'"summary.name"'
op|':'
newline|'\r\n'
indent|'                    '
name|'ds_name'
op|'='
name|'prop'
op|'.'
name|'Val'
newline|'\r\n'
comment|'#Local storage identifier'
nl|'\r\n'
dedent|''
dedent|''
name|'if'
name|'ds_type'
op|'=='
string|'"VMFS"'
op|':'
newline|'\r\n'
indent|'                '
name|'data_store_name'
op|'='
name|'ds_name'
newline|'\r\n'
name|'break'
newline|'\r\n'
nl|'\r\n'
dedent|''
dedent|''
name|'if'
name|'data_store_name'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'            '
name|'msg'
op|'='
string|'"Couldn\'t get a local Datastore reference"'
newline|'\r\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|')'
newline|'\r\n'
name|'raise'
name|'Exception'
op|'('
name|'msg'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'config_spec'
op|'='
name|'vm_util'
op|'.'
name|'get_dummy_vm_create_spec'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
nl|'\r\n'
name|'data_store_name'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'#Get the Vm folder ref from the datacenter'
nl|'\r\n'
name|'dc_objs'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datacenter"'
op|','
op|'['
string|'"vmFolder"'
op|']'
op|')'
newline|'\r\n'
comment|'#There is only one default datacenter in a standalone ESX host'
nl|'\r\n'
name|'vm_folder_ref'
op|'='
name|'dc_objs'
op|'['
number|'0'
op|']'
op|'.'
name|'PropSet'
op|'['
number|'0'
op|']'
op|'.'
name|'Val'
newline|'\r\n'
nl|'\r\n'
comment|'#Get the resource pool. Taking the first resource pool coming our way.'
nl|'\r\n'
comment|'#Assuming that is the default resource pool.'
nl|'\r\n'
name|'res_pool_mor'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"ResourcePool"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'Obj'
newline|'\r\n'
nl|'\r\n'
comment|'#Create the VM on the ESX host'
nl|'\r\n'
name|'vm_create_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"CreateVM_Task"'
op|','
name|'vm_folder_ref'
op|','
nl|'\r\n'
name|'config'
op|'='
name|'config_spec'
op|','
name|'pool'
op|'='
name|'res_pool_mor'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'vm_create_task'
op|')'
newline|'\r\n'
nl|'\r\n'
name|'vm_ref'
op|'='
name|'self'
op|'.'
name|'_get_vm_ref_from_the_name'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\r\n'
name|'power_on_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_wait_for_task'
op|'('
name|'instance'
op|'.'
name|'id'
op|','
name|'power_on_task'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|_get_network_with_the_name
dedent|''
name|'def'
name|'_get_network_with_the_name'
op|'('
name|'self'
op|','
name|'network_name'
op|'='
string|'"vmnet0"'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|"'''\r\n        Gets reference to the network whose name is passed as the argument.\r\n        '''"
newline|'\r\n'
name|'datacenters'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datacenter"'
op|','
op|'['
string|'"network"'
op|']'
op|')'
newline|'\r\n'
name|'vm_networks'
op|'='
name|'datacenters'
op|'['
number|'0'
op|']'
op|'.'
name|'PropSet'
op|'['
number|'0'
op|']'
op|'.'
name|'Val'
op|'.'
name|'ManagedObjectReference'
newline|'\r\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_properites_for_a_collection_of_objects"'
op|','
nl|'\r\n'
string|'"Network"'
op|','
name|'vm_networks'
op|','
op|'['
string|'"summary.name"'
op|']'
op|')'
newline|'\r\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\r\n'
indent|'            '
name|'if'
name|'network'
op|'.'
name|'PropSet'
op|'['
number|'0'
op|']'
op|'.'
name|'Val'
op|'=='
name|'network_name'
op|':'
newline|'\r\n'
indent|'                '
name|'return'
name|'network'
op|'.'
name|'Obj'
newline|'\r\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\r\n'
nl|'\r\n'
DECL|member|_get_datacenter_name_and_ref
dedent|''
name|'def'
name|'_get_datacenter_name_and_ref'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Get the datacenter name and the reference.\r\n        """'
newline|'\r\n'
name|'dc_obj'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"Datacenter"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\r\n'
name|'return'
name|'dc_obj'
op|'['
number|'0'
op|']'
op|'.'
name|'Obj'
op|','
name|'dc_obj'
op|'['
number|'0'
op|']'
op|'.'
name|'PropSet'
op|'['
number|'0'
op|']'
op|'.'
name|'Val'
newline|'\r\n'
nl|'\r\n'
DECL|member|_path_exists
dedent|''
name|'def'
name|'_path_exists'
op|'('
name|'self'
op|','
name|'ds_browser'
op|','
name|'ds_path'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Check if the path exists on the datastore\r\n        """'
newline|'\r\n'
name|'search_task'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\r\n'
string|'"SearchDatastore_Task"'
op|','
nl|'\r\n'
name|'ds_browser'
op|','
nl|'\r\n'
name|'datastorePath'
op|'='
name|'ds_path'
op|')'
newline|'\r\n'
comment|'#Wait till the state changes from queued or running.'
nl|'\r\n'
comment|"#If an error state is returned, it means that the path doesn't exist."
nl|'\r\n'
name|'while'
name|'True'
op|':'
newline|'\r\n'
indent|'            '
name|'task_info'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\r\n'
string|'"get_dynamic_property"'
op|','
nl|'\r\n'
name|'search_task'
op|','
string|'"Task"'
op|','
string|'"info"'
op|')'
newline|'\r\n'
name|'if'
name|'task_info'
op|'.'
name|'State'
name|'in'
op|'['
string|"'queued'"
op|','
string|"'running'"
op|']'
op|':'
newline|'\r\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'2'
op|')'
newline|'\r\n'
name|'continue'
newline|'\r\n'
dedent|''
name|'break'
newline|'\r\n'
dedent|''
name|'if'
name|'task_info'
op|'.'
name|'State'
op|'=='
string|'"error"'
op|':'
newline|'\r\n'
indent|'            '
name|'return'
name|'False'
newline|'\r\n'
dedent|''
name|'return'
name|'True'
newline|'\r\n'
nl|'\r\n'
DECL|member|_mkdir
dedent|''
name|'def'
name|'_mkdir'
op|'('
name|'self'
op|','
name|'ds_path'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Creates a directory at the path specified. If it is just "NAME", then a\r\n        directory with this name is formed at the topmost level of the\r\n        DataStore.\r\n        """'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating directory with path %s"'
op|'%'
name|'ds_path'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"MakeDirectory"'
op|','
nl|'\r\n'
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'FileManager'
op|','
nl|'\r\n'
name|'name'
op|'='
name|'ds_path'
op|','
name|'createParentDirectories'
op|'='
name|'False'
op|')'
newline|'\r\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created directory with path %s"'
op|'%'
name|'ds_path'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|_get_vm_ref_from_the_name
dedent|''
name|'def'
name|'_get_vm_ref_from_the_name'
op|'('
name|'self'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Get reference to the VM with the name specified.\r\n        """'
newline|'\r\n'
name|'vms'
op|'='
name|'self'
op|'.'
name|'_session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\r\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\r\n'
name|'for'
name|'vm'
name|'in'
name|'vms'
op|':'
newline|'\r\n'
indent|'            '
name|'if'
name|'vm'
op|'.'
name|'PropSet'
op|'['
number|'0'
op|']'
op|'.'
name|'Val'
op|'=='
name|'vm_name'
op|':'
newline|'\r\n'
indent|'                '
name|'return'
name|'vm'
op|'.'
name|'Obj'
newline|'\r\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\r\n'
dedent|''
dedent|''
endmarker|''
end_unit

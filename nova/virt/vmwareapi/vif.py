begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""VIF drivers for VMWare."""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vif'
name|'import'
name|'VIFDriver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'network_utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.virt.vmwareapi.vif"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'['
string|"'vmwareapi_vlan_interface'"
op|']'
op|'.'
name|'SetDefault'
op|'('
string|"'vmnic0'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMWareVlanBridgeDriver
name|'class'
name|'VMWareVlanBridgeDriver'
op|'('
name|'VIFDriver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""VIF Driver to setup bridge/VLAN networking using VMWare API."""'
newline|'\n'
nl|'\n'
DECL|member|plug
name|'def'
name|'plug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug the VIF to specified instance using information passed.\n        Currently we are plugging the VIF(s) during instance creation itself.\n        We can use this method when we add support to add additional NIC to\n        an existing instance."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|ensure_vlan_bridge
dedent|''
name|'def'
name|'ensure_vlan_bridge'
op|'('
name|'self'
op|','
name|'session'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a vlan and bridge unless they already exist."""'
newline|'\n'
name|'vlan_num'
op|'='
name|'network'
op|'['
string|"'vlan'"
op|']'
newline|'\n'
name|'bridge'
op|'='
name|'network'
op|'['
string|"'bridge'"
op|']'
newline|'\n'
name|'vlan_interface'
op|'='
name|'FLAGS'
op|'.'
name|'vmwareapi_vlan_interface'
newline|'\n'
nl|'\n'
comment|'# Check if the vlan_interface physical network adapter exists on the'
nl|'\n'
comment|'# host.'
nl|'\n'
name|'if'
name|'not'
name|'network_utils'
op|'.'
name|'check_if_vlan_interface_exists'
op|'('
name|'session'
op|','
nl|'\n'
name|'vlan_interface'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NetworkAdapterNotFound'
op|'('
name|'adapter'
op|'='
name|'vlan_interface'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the vSwitch associated with the Physical Adapter'
nl|'\n'
dedent|''
name|'vswitch_associated'
op|'='
name|'network_utils'
op|'.'
name|'get_vswitch_for_vlan_interface'
op|'('
nl|'\n'
name|'session'
op|','
name|'vlan_interface'
op|')'
newline|'\n'
name|'if'
name|'vswitch_associated'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'SwitchNotFoundForNetworkAdapter'
op|'('
nl|'\n'
name|'adapter'
op|'='
name|'vlan_interface'
op|')'
newline|'\n'
comment|'# Check whether bridge already exists and retrieve the the ref of the'
nl|'\n'
comment|'# network whose name_label is "bridge"'
nl|'\n'
dedent|''
name|'network_ref'
op|'='
name|'network_utils'
op|'.'
name|'get_network_with_the_name'
op|'('
name|'session'
op|','
name|'bridge'
op|')'
newline|'\n'
name|'if'
name|'network_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Create a port group on the vSwitch associated with the'
nl|'\n'
comment|'# vlan_interface corresponding physical network adapter on the ESX'
nl|'\n'
comment|'# host.'
nl|'\n'
indent|'            '
name|'network_utils'
op|'.'
name|'create_port_group'
op|'('
name|'session'
op|','
name|'bridge'
op|','
nl|'\n'
name|'vswitch_associated'
op|','
name|'vlan_num'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Get the vlan id and vswitch corresponding to the port group'
nl|'\n'
indent|'            '
name|'pg_vlanid'
op|','
name|'pg_vswitch'
op|'='
name|'network_utils'
op|'.'
name|'get_vlanid_and_vswitch_for_portgroup'
op|'('
name|'session'
op|','
nl|'\n'
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if the vswitch associated is proper'
nl|'\n'
name|'if'
name|'pg_vswitch'
op|'!='
name|'vswitch_associated'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidVLANPortGroup'
op|'('
nl|'\n'
name|'bridge'
op|'='
name|'bridge'
op|','
name|'expected'
op|'='
name|'vswitch_associated'
op|','
nl|'\n'
name|'actual'
op|'='
name|'pg_vswitch'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if the vlan id is proper for the port group'
nl|'\n'
dedent|''
name|'if'
name|'pg_vlanid'
op|'!='
name|'vlan_num'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidVLANTag'
op|'('
name|'bridge'
op|'='
name|'bridge'
op|','
name|'tag'
op|'='
name|'vlan_num'
op|','
nl|'\n'
name|'pgroup'
op|'='
name|'pg_vlanid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unplug
dedent|''
dedent|''
dedent|''
name|'def'
name|'unplug'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup operations like deleting port group if no instance\n        is associated with it."""'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

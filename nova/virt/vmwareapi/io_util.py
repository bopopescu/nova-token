begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\r\n'
nl|'\r\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\r\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\r\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\r\n'
comment|'#    a copy of the License at'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\r\n'
comment|'#'
nl|'\r\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\r\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\r\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\r\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\r\n'
comment|'#    under the License.'
nl|'\r\n'
nl|'\r\n'
string|'"""\r\nHelper classes for multi-threaded I/O (read/write) in the basis of chunks.\r\n\r\nThe class ThreadSafePipe queues the chunk data.\r\n\r\nThe class IOThread reads chunks from input file and pipes it to output file\r\ntill it reaches the transferable size\r\n\r\n"""'
newline|'\r\n'
nl|'\r\n'
name|'from'
name|'Queue'
name|'import'
name|'Empty'
newline|'\r\n'
name|'from'
name|'Queue'
name|'import'
name|'Full'
newline|'\r\n'
name|'from'
name|'Queue'
name|'import'
name|'Queue'
newline|'\r\n'
name|'from'
name|'threading'
name|'import'
name|'Thread'
newline|'\r\n'
name|'import'
name|'time'
newline|'\r\n'
name|'import'
name|'traceback'
newline|'\r\n'
nl|'\r\n'
DECL|variable|THREAD_SLEEP_TIME
name|'THREAD_SLEEP_TIME'
op|'='
number|'.01'
newline|'\r\n'
nl|'\r\n'
nl|'\r\n'
DECL|class|ThreadSafePipe
name|'class'
name|'ThreadSafePipe'
op|'('
name|'Queue'
op|')'
op|':'
newline|'\r\n'
indent|'    '
string|'"""\r\n        ThreadSafePipe class queue\'s the chunk data.\r\n    """'
newline|'\r\n'
nl|'\r\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'max_size'
op|'='
name|'None'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Initializes the queue\r\n        """'
newline|'\r\n'
name|'Queue'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'max_size'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'eof'
op|'='
name|'False'
newline|'\r\n'
nl|'\r\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Writes the chunk data to the queue.\r\n        """'
newline|'\r\n'
name|'self'
op|'.'
name|'put'
op|'('
name|'data'
op|','
name|'block'
op|'='
name|'False'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Retrieves the chunk data from the queue.\r\n        """'
newline|'\r\n'
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'block'
op|'='
name|'False'
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|set_eof
dedent|''
name|'def'
name|'set_eof'
op|'('
name|'self'
op|','
name|'eof'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Sets EOF to mark reading of input file finishes.\r\n        """'
newline|'\r\n'
name|'self'
op|'.'
name|'eof'
op|'='
name|'eof'
newline|'\r\n'
nl|'\r\n'
DECL|member|get_eof
dedent|''
name|'def'
name|'get_eof'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Returns whether EOF reached.\r\n        """'
newline|'\r\n'
name|'return'
name|'self'
op|'.'
name|'eof'
newline|'\r\n'
nl|'\r\n'
nl|'\r\n'
DECL|class|IOThread
dedent|''
dedent|''
name|'class'
name|'IOThread'
op|'('
name|'Thread'
op|')'
op|':'
newline|'\r\n'
indent|'    '
string|'"""\r\n    IOThread reads chunks from input file and pipes it to output file till it\r\n    reaches the transferable size\r\n    """'
newline|'\r\n'
nl|'\r\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'input_file'
op|','
name|'output_file'
op|','
name|'chunk_size'
op|','
name|'transfer_size'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Initialize the thread.\r\n        inputFile and outputFile should be file like objects.\r\n        """'
newline|'\r\n'
name|'Thread'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'input_file'
op|'='
name|'input_file'
newline|'\r\n'
name|'self'
op|'.'
name|'output_file'
op|'='
name|'output_file'
newline|'\r\n'
name|'self'
op|'.'
name|'chunk_size'
op|'='
name|'chunk_size'
newline|'\r\n'
name|'self'
op|'.'
name|'transfer_size'
op|'='
name|'transfer_size'
newline|'\r\n'
name|'self'
op|'.'
name|'read_size'
op|'='
number|'0'
newline|'\r\n'
name|'self'
op|'.'
name|'_done'
op|'='
name|'False'
newline|'\r\n'
name|'self'
op|'.'
name|'_stop_transfer'
op|'='
name|'False'
newline|'\r\n'
name|'self'
op|'.'
name|'_error'
op|'='
name|'False'
newline|'\r\n'
name|'self'
op|'.'
name|'_exception'
op|'='
name|'None'
newline|'\r\n'
nl|'\r\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Pipes the input chunk read to the output file till it reaches\r\n        transferable size\r\n        """'
newline|'\r\n'
name|'try'
op|':'
newline|'\r\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'transfer_size'
name|'and'
name|'self'
op|'.'
name|'transfer_size'
op|'<='
name|'self'
op|'.'
name|'chunk_size'
op|':'
newline|'\r\n'
indent|'                '
name|'self'
op|'.'
name|'chunk_size'
op|'='
name|'self'
op|'.'
name|'transfer_size'
newline|'\r\n'
dedent|''
name|'data'
op|'='
name|'None'
newline|'\r\n'
name|'while'
name|'True'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'transfer_size'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'read_size'
op|'>='
name|'self'
op|'.'
name|'transfer_size'
op|':'
newline|'\r\n'
indent|'                        '
name|'break'
newline|'\r\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_stop_transfer'
op|':'
newline|'\r\n'
indent|'                    '
name|'break'
newline|'\r\n'
dedent|''
name|'try'
op|':'
newline|'\r\n'
comment|'#read chunk only if no previous chunk'
nl|'\r\n'
indent|'                    '
name|'if'
name|'data'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'                        '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'input_file'
op|','
name|'ThreadSafePipe'
op|')'
op|':'
newline|'\r\n'
indent|'                            '
name|'data'
op|'='
name|'self'
op|'.'
name|'input_file'
op|'.'
name|'read'
op|'('
op|')'
newline|'\r\n'
dedent|''
name|'else'
op|':'
newline|'\r\n'
indent|'                            '
name|'data'
op|'='
name|'self'
op|'.'
name|'input_file'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'chunk_size'
op|')'
newline|'\r\n'
name|'if'
name|'not'
name|'data'
op|':'
newline|'\r\n'
comment|'# no more data to read'
nl|'\r\n'
indent|'                                '
name|'break'
newline|'\r\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'data'
op|':'
newline|'\r\n'
comment|'# write chunk'
nl|'\r\n'
indent|'                        '
name|'self'
op|'.'
name|'output_file'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'read_size'
op|'='
name|'self'
op|'.'
name|'read_size'
op|'+'
name|'len'
op|'('
name|'data'
op|')'
newline|'\r\n'
comment|'# clear chunk since write is a success'
nl|'\r\n'
name|'data'
op|'='
name|'None'
newline|'\r\n'
dedent|''
dedent|''
name|'except'
name|'Empty'
op|':'
newline|'\r\n'
comment|'# Pipe side is empty - safe to check for eof signal'
nl|'\r\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'input_file'
op|'.'
name|'get_eof'
op|'('
op|')'
op|':'
newline|'\r\n'
comment|'# no more data in read'
nl|'\r\n'
indent|'                        '
name|'break'
newline|'\r\n'
comment|'#Restrict tight loop'
nl|'\r\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
name|'THREAD_SLEEP_TIME'
op|')'
newline|'\r\n'
dedent|''
name|'except'
name|'Full'
op|':'
newline|'\r\n'
comment|'# Pipe full while writing to pipe - safe to retry since'
nl|'\r\n'
comment|'#chunk is preserved'
nl|'\r\n'
comment|'#Restrict tight loop'
nl|'\r\n'
indent|'                    '
name|'time'
op|'.'
name|'sleep'
op|'('
name|'THREAD_SLEEP_TIME'
op|')'
newline|'\r\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'output_file'
op|','
name|'ThreadSafePipe'
op|')'
op|':'
newline|'\r\n'
comment|'# If this is the reader thread, send eof signal'
nl|'\r\n'
indent|'                '
name|'self'
op|'.'
name|'output_file'
op|'.'
name|'set_eof'
op|'('
name|'True'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'transfer_size'
name|'is'
name|'None'
op|':'
newline|'\r\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'read_size'
op|'<'
name|'self'
op|'.'
name|'transfer_size'
op|':'
newline|'\r\n'
indent|'                    '
name|'raise'
name|'IOError'
op|'('
string|'"Not enough data (%d of %d bytes)"'
op|'%'
op|'('
name|'self'
op|'.'
name|'read_size'
op|','
name|'self'
op|'.'
name|'transfer_size'
op|')'
op|')'
newline|'\r\n'
nl|'\r\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\r\n'
indent|'            '
name|'self'
op|'.'
name|'_error'
op|'='
name|'True'
newline|'\r\n'
name|'self'
op|'.'
name|'_exception'
op|'='
name|'str'
op|'('
name|'traceback'
op|'.'
name|'format_exc'
op|'('
op|')'
op|')'
newline|'\r\n'
dedent|''
name|'self'
op|'.'
name|'_done'
op|'='
name|'True'
newline|'\r\n'
nl|'\r\n'
DECL|member|stop_io_transfer
dedent|''
name|'def'
name|'stop_io_transfer'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Set the stop flag to true, which causes the thread to stop safely.\r\n        """'
newline|'\r\n'
name|'self'
op|'.'
name|'_stop_transfer'
op|'='
name|'True'
newline|'\r\n'
name|'self'
op|'.'
name|'join'
op|'('
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|get_error
dedent|''
name|'def'
name|'get_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Returns the error string.\r\n        """'
newline|'\r\n'
name|'return'
name|'self'
op|'.'
name|'_error'
newline|'\r\n'
nl|'\r\n'
DECL|member|get_exception
dedent|''
name|'def'
name|'get_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Returns the traceback exception string.\r\n        """'
newline|'\r\n'
name|'return'
name|'self'
op|'.'
name|'_exception'
newline|'\r\n'
nl|'\r\n'
DECL|member|is_done
dedent|''
name|'def'
name|'is_done'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
string|'"""\r\n        Checks whether transfer is complete.\r\n        """'
newline|'\r\n'
name|'return'
name|'self'
op|'.'
name|'_done'
newline|'\r\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2012 VMware, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nThe VMware API VM utility module to build SOAP object specs.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'error_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|ALL_SUPPORTED_NETWORK_DEVICES
name|'ALL_SUPPORTED_NETWORK_DEVICES'
op|'='
op|'['
string|"'VirtualE1000'"
op|','
string|"'VirtualE1000e'"
op|','
nl|'\n'
string|"'VirtualPCNet32'"
op|','
string|"'VirtualSriovEthernetCard'"
op|','
nl|'\n'
string|"'VirtualVmxnet'"
op|']'
newline|'\n'
DECL|variable|DSRecord
name|'DSRecord'
op|'='
name|'collections'
op|'.'
name|'namedtuple'
op|'('
nl|'\n'
string|"'DSRecord'"
op|','
op|'['
string|"'datastore'"
op|','
string|"'name'"
op|','
string|"'capacity'"
op|','
string|"'freespace'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# A cache for VM references. The key will be the VM name'
nl|'\n'
comment|'# and the value is the VM reference. The VM name is unique. This'
nl|'\n'
comment|'# is either the UUID of the instance or UUID-rescue in the case'
nl|'\n'
comment|'# that this is a rescue VM. This is in order to prevent'
nl|'\n'
comment|'# unnecessary communication with the backend.'
nl|'\n'
DECL|variable|_VM_REFS_CACHE
name|'_VM_REFS_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_refs_cache_reset
name|'def'
name|'vm_refs_cache_reset'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_VM_REFS_CACHE'
newline|'\n'
name|'_VM_REFS_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_delete
dedent|''
name|'def'
name|'vm_ref_cache_delete'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_VM_REFS_CACHE'
op|'.'
name|'pop'
op|'('
name|'id'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_update
dedent|''
name|'def'
name|'vm_ref_cache_update'
op|'('
name|'id'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_VM_REFS_CACHE'
op|'['
name|'id'
op|']'
op|'='
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_get
dedent|''
name|'def'
name|'vm_ref_cache_get'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_VM_REFS_CACHE'
op|'.'
name|'get'
op|'('
name|'id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_vm_ref_cache
dedent|''
name|'def'
name|'_vm_ref_cache'
op|'('
name|'id'
op|','
name|'func'
op|','
name|'session'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vm_ref'
op|'='
name|'vm_ref_cache_get'
op|'('
name|'id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vm_ref'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'func'
op|'('
name|'session'
op|','
name|'data'
op|')'
newline|'\n'
name|'vm_ref_cache_update'
op|'('
name|'id'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_from_instance
dedent|''
name|'def'
name|'vm_ref_cache_from_instance'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'return'
name|'_vm_ref_cache'
op|'('
name|'id'
op|','
name|'func'
op|','
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_from_name
dedent|''
name|'def'
name|'vm_ref_cache_from_name'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'session'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'name'
newline|'\n'
name|'return'
name|'_vm_ref_cache'
op|'('
name|'id'
op|','
name|'func'
op|','
name|'session'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
comment|'# the config key which stores the VNC port'
nl|'\n'
DECL|variable|VNC_CONFIG_KEY
dedent|''
name|'VNC_CONFIG_KEY'
op|'='
string|'\'config.extraConfig["RemoteDisplay.vnc.port"]\''
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_create_spec
name|'def'
name|'get_vm_create_spec'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'data_store_name'
op|','
nl|'\n'
name|'vif_infos'
op|','
name|'os_type'
op|'='
string|'"otherGuest"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the VM Create spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'config_spec'
op|'.'
name|'guestId'
op|'='
name|'os_type'
newline|'\n'
comment|'# The name is the unique identifier for the VM. This will either be the'
nl|'\n'
comment|"# instance UUID or the instance UUID with suffix '-rescue' for VM's that"
nl|'\n'
comment|'# are in rescue mode'
nl|'\n'
name|'config_spec'
op|'.'
name|'instanceUuid'
op|'='
name|'name'
newline|'\n'
nl|'\n'
comment|'# Allow nested ESX instances to host 64 bit VMs.'
nl|'\n'
name|'if'
name|'os_type'
op|'=='
string|'"vmkernel5Guest"'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'nestedHVEnabled'
op|'='
string|'"True"'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_file_info'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineFileInfo'"
op|')'
newline|'\n'
name|'vm_file_info'
op|'.'
name|'vmPathName'
op|'='
string|'"["'
op|'+'
name|'data_store_name'
op|'+'
string|'"]"'
newline|'\n'
name|'config_spec'
op|'.'
name|'files'
op|'='
name|'vm_file_info'
newline|'\n'
nl|'\n'
name|'tools_info'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:ToolsConfigInfo'"
op|')'
newline|'\n'
name|'tools_info'
op|'.'
name|'afterPowerOn'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'afterResume'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestStandby'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestShutdown'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestReboot'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'tools'
op|'='
name|'tools_info'
newline|'\n'
name|'config_spec'
op|'.'
name|'numCPUs'
op|'='
name|'int'
op|'('
name|'instance'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'memoryMB'
op|'='
name|'int'
op|'('
name|'instance'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'vif_spec_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vif_info'
name|'in'
name|'vif_infos'
op|':'
newline|'\n'
indent|'        '
name|'vif_spec'
op|'='
name|'create_network_spec'
op|'('
name|'client_factory'
op|','
name|'vif_info'
op|')'
newline|'\n'
name|'vif_spec_list'
op|'.'
name|'append'
op|'('
name|'vif_spec'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'device_config_spec'
op|'='
name|'vif_spec_list'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
nl|'\n'
comment|'# add vm-uuid and iface-id.x values for Neutron'
nl|'\n'
name|'extra_config'
op|'='
op|'['
op|']'
newline|'\n'
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|'"nvp.vm-uuid"'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'vif_info'
name|'in'
name|'vif_infos'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vif_info'
op|'['
string|"'iface_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|'"nvp.iface-id.%d"'
op|'%'
name|'i'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'vif_info'
op|'['
string|"'iface_id'"
op|']'
newline|'\n'
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'opt'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'config_spec'
op|'.'
name|'extraConfig'
op|'='
name|'extra_config'
newline|'\n'
nl|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_resize_spec
dedent|''
name|'def'
name|'get_vm_resize_spec'
op|'('
name|'client_factory'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides updates for a VM spec."""'
newline|'\n'
name|'resize_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'resize_spec'
op|'.'
name|'numCPUs'
op|'='
name|'int'
op|'('
name|'instance'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'resize_spec'
op|'.'
name|'memoryMB'
op|'='
name|'int'
op|'('
name|'instance'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'resize_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_controller_spec
dedent|''
name|'def'
name|'create_controller_spec'
op|'('
name|'client_factory'
op|','
name|'key'
op|','
name|'adapter_type'
op|'='
string|'"lsiLogic"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds a Config Spec for the LSI or Bus Logic Controller\'s addition\n    which acts as the controller for the virtual hard disk to be attached\n    to the VM.\n    """'
newline|'\n'
comment|'# Create a controller for the Virtual Hard Disk'
nl|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
name|'if'
name|'adapter_type'
op|'=='
string|'"busLogic"'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualBusLogicController'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'adapter_type'
op|'=='
string|'"lsiLogicsas"'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualLsiLogicSASController'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualLsiLogicController'"
op|')'
newline|'\n'
dedent|''
name|'virtual_controller'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'virtual_controller'
op|'.'
name|'busNumber'
op|'='
number|'0'
newline|'\n'
name|'virtual_controller'
op|'.'
name|'sharedBus'
op|'='
string|'"noSharing"'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'virtual_controller'
newline|'\n'
name|'return'
name|'virtual_device_config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_convert_vif_model
dedent|''
name|'def'
name|'_convert_vif_model'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Converts standard VIF_MODEL types to the internal VMware ones."""'
newline|'\n'
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualE1000'"
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000E'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualE1000e'"
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'ALL_SUPPORTED_NETWORK_DEVICES'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s is not supported.'"
op|')'
op|'%'
name|'name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_network_spec
dedent|''
name|'def'
name|'create_network_spec'
op|'('
name|'client_factory'
op|','
name|'vif_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds a config spec for the addition of a new network\n    adapter to the VM.\n    """'
newline|'\n'
name|'network_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'network_spec'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
nl|'\n'
comment|'# Keep compatible with other Hyper vif model parameter.'
nl|'\n'
name|'vif_info'
op|'['
string|"'vif_model'"
op|']'
op|'='
name|'_convert_vif_model'
op|'('
name|'vif_info'
op|'['
string|"'vif_model'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'vif'
op|'='
string|"'ns0:'"
op|'+'
name|'vif_info'
op|'['
string|"'vif_model'"
op|']'
newline|'\n'
name|'net_device'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
name|'vif'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(asomya): Only works on ESXi if the portgroup binding is set to'
nl|'\n'
comment|'# ephemeral. Invalid configuration if set to static and the NIC does'
nl|'\n'
comment|'# not come up on boot if set to dynamic.'
nl|'\n'
name|'network_ref'
op|'='
name|'vif_info'
op|'['
string|"'network_ref'"
op|']'
newline|'\n'
name|'network_name'
op|'='
name|'vif_info'
op|'['
string|"'network_name'"
op|']'
newline|'\n'
name|'mac_address'
op|'='
name|'vif_info'
op|'['
string|"'mac_address'"
op|']'
newline|'\n'
name|'backing'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network_ref'
name|'and'
name|'network_ref'
op|'['
string|"'type'"
op|']'
op|'=='
string|"'OpaqueNetwork'"
op|':'
newline|'\n'
indent|'        '
name|'backing_name'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'ns0:VirtualEthernetCard'"
op|','
nl|'\n'
string|"'OpaqueNetworkBackingInfo'"
op|']'
op|')'
newline|'\n'
name|'backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
name|'backing_name'
op|')'
newline|'\n'
name|'backing'
op|'.'
name|'opaqueNetworkId'
op|'='
name|'network_ref'
op|'['
string|"'network-id'"
op|']'
newline|'\n'
name|'backing'
op|'.'
name|'opaqueNetworkType'
op|'='
name|'network_ref'
op|'['
string|"'network-type'"
op|']'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'network_ref'
name|'and'
nl|'\n'
name|'network_ref'
op|'['
string|"'type'"
op|']'
op|'=='
string|'"DistributedVirtualPortgroup"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'backing_name'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
string|"'ns0:VirtualEthernetCardDistributed'"
op|','
nl|'\n'
string|"'VirtualPortBackingInfo'"
op|']'
op|')'
newline|'\n'
name|'backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
name|'backing_name'
op|')'
newline|'\n'
name|'portgroup'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:DistributedVirtualSwitchPortConnection'"
op|')'
newline|'\n'
name|'portgroup'
op|'.'
name|'switchUuid'
op|'='
name|'network_ref'
op|'['
string|"'dvsw'"
op|']'
newline|'\n'
name|'portgroup'
op|'.'
name|'portgroupKey'
op|'='
name|'network_ref'
op|'['
string|"'dvpg'"
op|']'
newline|'\n'
name|'backing'
op|'.'
name|'port'
op|'='
name|'portgroup'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualEthernetCardNetworkBackingInfo'"
op|')'
newline|'\n'
name|'backing'
op|'.'
name|'deviceName'
op|'='
name|'network_name'
newline|'\n'
nl|'\n'
dedent|''
name|'connectable_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConnectInfo'"
op|')'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'startConnected'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'allowGuestControl'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'net_device'
op|'.'
name|'connectable'
op|'='
name|'connectable_spec'
newline|'\n'
name|'net_device'
op|'.'
name|'backing'
op|'='
name|'backing'
newline|'\n'
nl|'\n'
comment|'# The Server assigns a Key to the device. Here we pass a -ve temporary key.'
nl|'\n'
comment|"# -ve because actual keys are +ve numbers and we don't"
nl|'\n'
comment|'# want a clash with the key that server might associate with the device'
nl|'\n'
name|'net_device'
op|'.'
name|'key'
op|'='
op|'-'
number|'47'
newline|'\n'
name|'net_device'
op|'.'
name|'addressType'
op|'='
string|'"manual"'
newline|'\n'
name|'net_device'
op|'.'
name|'macAddress'
op|'='
name|'mac_address'
newline|'\n'
name|'net_device'
op|'.'
name|'wakeOnLanEnabled'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'network_spec'
op|'.'
name|'device'
op|'='
name|'net_device'
newline|'\n'
name|'return'
name|'network_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_attach_config_spec
dedent|''
name|'def'
name|'get_vmdk_attach_config_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'disk_type'
op|'='
string|'"preallocated"'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_size'
op|'='
name|'None'
op|','
nl|'\n'
name|'linked_clone'
op|'='
name|'False'
op|','
nl|'\n'
name|'controller_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'unit_number'
op|'='
name|'None'
op|','
nl|'\n'
name|'device_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vmdk attach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'virtual_device_config_spec'
op|'='
name|'create_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'controller_key'
op|','
name|'disk_type'
op|','
name|'file_path'
op|','
nl|'\n'
name|'disk_size'
op|','
name|'linked_clone'
op|','
nl|'\n'
name|'unit_number'
op|','
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config_spec'
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cdrom_attach_config_spec
dedent|''
name|'def'
name|'get_cdrom_attach_config_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'file_path'
op|','
nl|'\n'
name|'controller_key'
op|','
nl|'\n'
name|'cdrom_unit_number'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds and returns the cdrom attach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'virtual_device_config_spec'
op|'='
name|'create_virtual_cdrom_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'controller_key'
op|','
nl|'\n'
name|'file_path'
op|','
nl|'\n'
name|'cdrom_unit_number'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config_spec'
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_detach_config_spec
dedent|''
name|'def'
name|'get_vmdk_detach_config_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|','
nl|'\n'
name|'destroy_disk'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vmdk detach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'virtual_device_config_spec'
op|'='
name|'detach_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'device'
op|','
nl|'\n'
name|'destroy_disk'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config_spec'
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_extra_config_spec
dedent|''
name|'def'
name|'get_vm_extra_config_spec'
op|'('
name|'client_factory'
op|','
name|'extra_opts'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds extra spec fields from a dictionary."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
comment|'# add the key value pairs'
nl|'\n'
name|'extra_config'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'extra_opts'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'opt'
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'extraConfig'
op|'='
name|'extra_config'
newline|'\n'
dedent|''
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_path_and_adapter_type
dedent|''
name|'def'
name|'get_vmdk_path_and_adapter_type'
op|'('
name|'hardware_devices'
op|','
name|'uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the vmdk file path and the storage adapter type."""'
newline|'\n'
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
dedent|''
name|'vmdk_file_path'
op|'='
name|'None'
newline|'\n'
name|'vmdk_controller_key'
op|'='
name|'None'
newline|'\n'
name|'disk_type'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'adapter_type_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDiskFlatVer2BackingInfo"'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'uuid'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'uuid'
name|'in'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|':'
newline|'\n'
indent|'                        '
name|'vmdk_file_path'
op|'='
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'vmdk_file_path'
op|'='
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
newline|'\n'
dedent|''
name|'vmdk_controller_key'
op|'='
name|'device'
op|'.'
name|'controllerKey'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'device'
op|'.'
name|'backing'
op|','
string|"'thinProvisioned'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'disk_type'
op|'='
string|'"thin"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'getattr'
op|'('
name|'device'
op|'.'
name|'backing'
op|','
string|"'eagerlyScrub'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'disk_type'
op|'='
string|'"eagerZeroedThick"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'disk_type'
op|'='
string|'"preallocated"'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualLsiLogicController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
string|'"lsiLogic"'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualBusLogicController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
string|'"busLogic"'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualIDEController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
string|'"ide"'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualLsiLogicSASController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
string|'"lsiLogicsas"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'adapter_type'
op|'='
name|'adapter_type_dict'
op|'.'
name|'get'
op|'('
name|'vmdk_controller_key'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'vmdk_file_path'
op|','
name|'adapter_type'
op|','
name|'disk_type'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_controller_slot
dedent|''
name|'def'
name|'_find_controller_slot'
op|'('
name|'controller_keys'
op|','
name|'taken'
op|','
name|'max_unit_number'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'controller_key'
name|'in'
name|'controller_keys'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'unit_number'
name|'in'
name|'range'
op|'('
name|'max_unit_number'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'unit_number'
name|'in'
name|'taken'
op|'.'
name|'get'
op|'('
name|'controller_key'
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'controller_key'
op|','
name|'unit_number'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_ide_controller
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_is_ide_controller'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|"'VirtualIDEController'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_scsi_controller
dedent|''
name|'def'
name|'_is_scsi_controller'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
name|'in'
op|'['
string|"'VirtualLsiLogicController'"
op|','
nl|'\n'
string|"'VirtualLsiLogicSASController'"
op|','
nl|'\n'
string|"'VirtualBusLogicController'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_allocated_slots
dedent|''
name|'def'
name|'_find_allocated_slots'
op|'('
name|'devices'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return dictionary which maps controller_key to list of allocated unit\n    numbers for that controller_key.\n    """'
newline|'\n'
name|'taken'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'device'
op|','
string|"'controllerKey'"
op|')'
name|'and'
name|'hasattr'
op|'('
name|'device'
op|','
string|"'unitNumber'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unit_numbers'
op|'='
name|'taken'
op|'.'
name|'setdefault'
op|'('
name|'device'
op|'.'
name|'controllerKey'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'unit_numbers'
op|'.'
name|'append'
op|'('
name|'device'
op|'.'
name|'unitNumber'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'_is_scsi_controller'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
comment|'# the SCSI controller sits on its own bus'
nl|'\n'
indent|'            '
name|'unit_numbers'
op|'='
name|'taken'
op|'.'
name|'setdefault'
op|'('
name|'device'
op|'.'
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'unit_numbers'
op|'.'
name|'append'
op|'('
name|'device'
op|'.'
name|'scsiCtlrUnitNumber'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'taken'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|allocate_controller_key_and_unit_number
dedent|''
name|'def'
name|'allocate_controller_key_and_unit_number'
op|'('
name|'client_factory'
op|','
name|'devices'
op|','
nl|'\n'
name|'adapter_type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This function inspects the current set of hardware devices and returns\n    controller_key and unit_number that can be used for attaching a new virtual\n    disk to adapter with the given adapter_type.\n    """'
newline|'\n'
name|'if'
name|'devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'devices'
op|'='
name|'devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'taken'
op|'='
name|'_find_allocated_slots'
op|'('
name|'devices'
op|')'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'adapter_type'
op|'=='
string|"'ide'"
op|':'
newline|'\n'
indent|'        '
name|'ide_keys'
op|'='
op|'['
name|'dev'
op|'.'
name|'key'
name|'for'
name|'dev'
name|'in'
name|'devices'
name|'if'
name|'_is_ide_controller'
op|'('
name|'dev'
op|')'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'_find_controller_slot'
op|'('
name|'ide_keys'
op|','
name|'taken'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'adapter_type'
name|'in'
op|'['
string|"'lsiLogic'"
op|','
string|"'lsiLogicsas'"
op|','
string|"'busLogic'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'scsi_keys'
op|'='
op|'['
name|'dev'
op|'.'
name|'key'
name|'for'
name|'dev'
name|'in'
name|'devices'
name|'if'
name|'_is_scsi_controller'
op|'('
name|'dev'
op|')'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'_find_controller_slot'
op|'('
name|'scsi_keys'
op|','
name|'taken'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ret'
op|'['
number|'0'
op|']'
op|','
name|'ret'
op|'['
number|'1'
op|']'
op|','
name|'None'
newline|'\n'
nl|'\n'
comment|'# create new controller with the specified type and return its spec'
nl|'\n'
dedent|''
name|'controller_key'
op|'='
op|'-'
number|'101'
newline|'\n'
name|'controller_spec'
op|'='
name|'create_controller_spec'
op|'('
name|'client_factory'
op|','
name|'controller_key'
op|','
nl|'\n'
name|'adapter_type'
op|')'
newline|'\n'
name|'return'
name|'controller_key'
op|','
number|'0'
op|','
name|'controller_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_rdm_disk
dedent|''
name|'def'
name|'get_rdm_disk'
op|'('
name|'hardware_devices'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the RDM disk key."""'
newline|'\n'
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|'"VirtualDiskRawDiskMappingVer1BackingInfo"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'lunUuid'
op|'=='
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_copy_virtual_disk_spec
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_copy_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
name|'adapter_type'
op|'='
string|'"lsiLogic"'
op|','
nl|'\n'
name|'disk_type'
op|'='
string|'"preallocated"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the Virtual Disk copy spec."""'
newline|'\n'
name|'dest_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDiskSpec'"
op|')'
newline|'\n'
name|'dest_spec'
op|'.'
name|'adapterType'
op|'='
name|'get_vmdk_adapter_type'
op|'('
name|'adapter_type'
op|')'
newline|'\n'
name|'dest_spec'
op|'.'
name|'diskType'
op|'='
name|'disk_type'
newline|'\n'
name|'return'
name|'dest_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_create_spec
dedent|''
name|'def'
name|'get_vmdk_create_spec'
op|'('
name|'client_factory'
op|','
name|'size_in_kb'
op|','
name|'adapter_type'
op|'='
string|'"lsiLogic"'
op|','
nl|'\n'
name|'disk_type'
op|'='
string|'"preallocated"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the virtual disk create spec."""'
newline|'\n'
name|'create_vmdk_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:FileBackedVirtualDiskSpec'"
op|')'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'adapterType'
op|'='
name|'get_vmdk_adapter_type'
op|'('
name|'adapter_type'
op|')'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'diskType'
op|'='
name|'disk_type'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'capacityKb'
op|'='
name|'size_in_kb'
newline|'\n'
name|'return'
name|'create_vmdk_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_rdm_create_spec
dedent|''
name|'def'
name|'get_rdm_create_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|','
name|'adapter_type'
op|'='
string|'"lsiLogic"'
op|','
nl|'\n'
name|'disk_type'
op|'='
string|'"rdmp"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the RDM virtual disk create spec."""'
newline|'\n'
name|'create_vmdk_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:DeviceBackedVirtualDiskSpec'"
op|')'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'adapterType'
op|'='
name|'get_vmdk_adapter_type'
op|'('
name|'adapter_type'
op|')'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'diskType'
op|'='
name|'disk_type'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'device'
op|'='
name|'device'
newline|'\n'
name|'return'
name|'create_vmdk_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_virtual_cdrom_spec
dedent|''
name|'def'
name|'create_virtual_cdrom_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'controller_key'
op|','
nl|'\n'
name|'file_path'
op|','
nl|'\n'
name|'cdrom_unit_number'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds spec for the creation of a new Virtual CDROM to the VM."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
nl|'\n'
name|'cdrom'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualCdrom'"
op|')'
newline|'\n'
nl|'\n'
name|'cdrom_device_backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualCdromIsoBackingInfo'"
op|')'
newline|'\n'
name|'cdrom_device_backing'
op|'.'
name|'datastore'
op|'='
name|'datastore'
newline|'\n'
name|'cdrom_device_backing'
op|'.'
name|'fileName'
op|'='
name|'file_path'
newline|'\n'
nl|'\n'
name|'cdrom'
op|'.'
name|'backing'
op|'='
name|'cdrom_device_backing'
newline|'\n'
name|'cdrom'
op|'.'
name|'controllerKey'
op|'='
name|'controller_key'
newline|'\n'
name|'cdrom'
op|'.'
name|'unitNumber'
op|'='
name|'cdrom_unit_number'
newline|'\n'
name|'cdrom'
op|'.'
name|'key'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'connectable_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConnectInfo'"
op|')'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'startConnected'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'allowGuestControl'
op|'='
name|'False'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'cdrom'
op|'.'
name|'connectable'
op|'='
name|'connectable_spec'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'device'
op|'='
name|'cdrom'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_virtual_disk_spec
dedent|''
name|'def'
name|'create_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
name|'controller_key'
op|','
nl|'\n'
name|'disk_type'
op|'='
string|'"preallocated"'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_size'
op|'='
name|'None'
op|','
nl|'\n'
name|'linked_clone'
op|'='
name|'False'
op|','
nl|'\n'
name|'unit_number'
op|'='
name|'None'
op|','
nl|'\n'
name|'device_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds spec for the creation of a new/ attaching of an already existing\n    Virtual Disk to the VM.\n    """'
newline|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
name|'if'
op|'('
name|'file_path'
name|'is'
name|'None'
op|')'
name|'or'
name|'linked_clone'
op|':'
newline|'\n'
indent|'        '
name|'virtual_device_config'
op|'.'
name|'fileOperation'
op|'='
string|'"create"'
newline|'\n'
nl|'\n'
dedent|''
name|'virtual_disk'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDisk'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_type'
op|'=='
string|'"rdm"'
name|'or'
name|'disk_type'
op|'=='
string|'"rdmp"'
op|':'
newline|'\n'
indent|'        '
name|'disk_file_backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDiskRawDiskMappingVer1BackingInfo'"
op|')'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'compatibilityMode'
op|'='
string|'"virtualMode"'
name|'if'
name|'disk_type'
op|'=='
string|'"rdm"'
name|'else'
string|'"physicalMode"'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'diskMode'
op|'='
string|'"independent_persistent"'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'deviceName'
op|'='
name|'device_name'
name|'or'
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'disk_file_backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDiskFlatVer2BackingInfo'"
op|')'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'diskMode'
op|'='
string|'"persistent"'
newline|'\n'
name|'if'
name|'disk_type'
op|'=='
string|'"thin"'
op|':'
newline|'\n'
indent|'            '
name|'disk_file_backing'
op|'.'
name|'thinProvisioned'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'disk_type'
op|'=='
string|'"eagerZeroedThick"'
op|':'
newline|'\n'
indent|'                '
name|'disk_file_backing'
op|'.'
name|'eagerlyScrub'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'disk_file_backing'
op|'.'
name|'fileName'
op|'='
name|'file_path'
name|'or'
string|'""'
newline|'\n'
nl|'\n'
name|'connectable_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConnectInfo'"
op|')'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'startConnected'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'allowGuestControl'
op|'='
name|'False'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'linked_clone'
op|':'
newline|'\n'
indent|'        '
name|'virtual_disk'
op|'.'
name|'backing'
op|'='
name|'disk_file_backing'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'virtual_disk'
op|'.'
name|'backing'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'disk_file_backing'
op|')'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|'='
string|'""'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'backing'
op|'.'
name|'parent'
op|'='
name|'disk_file_backing'
newline|'\n'
dedent|''
name|'virtual_disk'
op|'.'
name|'connectable'
op|'='
name|'connectable_spec'
newline|'\n'
nl|'\n'
comment|'# The Server assigns a Key to the device. Here we pass a -ve random key.'
nl|'\n'
comment|"# -ve because actual keys are +ve numbers and we don't"
nl|'\n'
comment|'# want a clash with the key that server might associate with the device'
nl|'\n'
name|'virtual_disk'
op|'.'
name|'key'
op|'='
op|'-'
number|'100'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'controllerKey'
op|'='
name|'controller_key'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'unitNumber'
op|'='
name|'unit_number'
name|'or'
number|'0'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'capacityInKB'
op|'='
name|'disk_size'
name|'or'
number|'0'
newline|'\n'
nl|'\n'
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'virtual_disk'
newline|'\n'
nl|'\n'
name|'return'
name|'virtual_device_config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|detach_virtual_disk_spec
dedent|''
name|'def'
name|'detach_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|','
name|'destroy_disk'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds spec for the detach of an already existing Virtual Disk from VM.\n    """'
newline|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"remove"'
newline|'\n'
name|'if'
name|'destroy_disk'
op|':'
newline|'\n'
indent|'        '
name|'virtual_device_config'
op|'.'
name|'fileOperation'
op|'='
string|'"destroy"'
newline|'\n'
dedent|''
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'device'
newline|'\n'
nl|'\n'
name|'return'
name|'virtual_device_config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clone_vm_spec
dedent|''
name|'def'
name|'clone_vm_spec'
op|'('
name|'client_factory'
op|','
name|'location'
op|','
nl|'\n'
name|'power_on'
op|'='
name|'False'
op|','
name|'snapshot'
op|'='
name|'None'
op|','
name|'template'
op|'='
name|'False'
op|','
name|'config'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the VM clone spec."""'
newline|'\n'
name|'clone_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineCloneSpec'"
op|')'
newline|'\n'
name|'clone_spec'
op|'.'
name|'location'
op|'='
name|'location'
newline|'\n'
name|'clone_spec'
op|'.'
name|'powerOn'
op|'='
name|'power_on'
newline|'\n'
name|'if'
name|'snapshot'
op|':'
newline|'\n'
indent|'        '
name|'clone_spec'
op|'.'
name|'snapshot'
op|'='
name|'snapshot'
newline|'\n'
dedent|''
name|'if'
name|'config'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'clone_spec'
op|'.'
name|'config'
op|'='
name|'config'
newline|'\n'
dedent|''
name|'clone_spec'
op|'.'
name|'template'
op|'='
name|'template'
newline|'\n'
name|'return'
name|'clone_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|relocate_vm_spec
dedent|''
name|'def'
name|'relocate_vm_spec'
op|'('
name|'client_factory'
op|','
name|'datastore'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_move_type'
op|'='
string|'"moveAllDiskBackingsAndAllowSharing"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the VM relocation spec."""'
newline|'\n'
name|'rel_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineRelocateSpec'"
op|')'
newline|'\n'
name|'rel_spec'
op|'.'
name|'datastore'
op|'='
name|'datastore'
newline|'\n'
name|'rel_spec'
op|'.'
name|'diskMoveType'
op|'='
name|'disk_move_type'
newline|'\n'
name|'if'
name|'host'
op|':'
newline|'\n'
indent|'        '
name|'rel_spec'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
dedent|''
name|'return'
name|'rel_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dummy_vm_create_spec
dedent|''
name|'def'
name|'get_dummy_vm_create_spec'
op|'('
name|'client_factory'
op|','
name|'name'
op|','
name|'data_store_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the dummy VM create spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'config_spec'
op|'.'
name|'guestId'
op|'='
string|'"otherGuest"'
newline|'\n'
nl|'\n'
name|'vm_file_info'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineFileInfo'"
op|')'
newline|'\n'
name|'vm_file_info'
op|'.'
name|'vmPathName'
op|'='
string|'"["'
op|'+'
name|'data_store_name'
op|'+'
string|'"]"'
newline|'\n'
name|'config_spec'
op|'.'
name|'files'
op|'='
name|'vm_file_info'
newline|'\n'
nl|'\n'
name|'tools_info'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:ToolsConfigInfo'"
op|')'
newline|'\n'
name|'tools_info'
op|'.'
name|'afterPowerOn'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'afterResume'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestStandby'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestShutdown'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestReboot'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'tools'
op|'='
name|'tools_info'
newline|'\n'
name|'config_spec'
op|'.'
name|'numCPUs'
op|'='
number|'1'
newline|'\n'
name|'config_spec'
op|'.'
name|'memoryMB'
op|'='
number|'4'
newline|'\n'
nl|'\n'
name|'controller_key'
op|'='
op|'-'
number|'101'
newline|'\n'
name|'controller_spec'
op|'='
name|'create_controller_spec'
op|'('
name|'client_factory'
op|','
name|'controller_key'
op|')'
newline|'\n'
name|'disk_spec'
op|'='
name|'create_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
number|'1024'
op|','
name|'controller_key'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
name|'controller_spec'
op|','
name|'disk_spec'
op|']'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_machine_id_change_spec
dedent|''
name|'def'
name|'get_machine_id_change_spec'
op|'('
name|'client_factory'
op|','
name|'machine_id_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the machine id change config spec."""'
newline|'\n'
name|'virtual_machine_config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|'"machine.id"'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'machine_id_str'
newline|'\n'
name|'virtual_machine_config_spec'
op|'.'
name|'extraConfig'
op|'='
op|'['
name|'opt'
op|']'
newline|'\n'
name|'return'
name|'virtual_machine_config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_add_vswitch_port_group_spec
dedent|''
name|'def'
name|'get_add_vswitch_port_group_spec'
op|'('
name|'client_factory'
op|','
name|'vswitch_name'
op|','
nl|'\n'
name|'port_group_name'
op|','
name|'vlan_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the virtual switch port group add spec."""'
newline|'\n'
name|'vswitch_port_group_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostPortGroupSpec'"
op|')'
newline|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'name'
op|'='
name|'port_group_name'
newline|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'vswitchName'
op|'='
name|'vswitch_name'
newline|'\n'
nl|'\n'
comment|'# VLAN ID of 0 means that VLAN tagging is not to be done for the network.'
nl|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'vlanId'
op|'='
name|'int'
op|'('
name|'vlan_id'
op|')'
newline|'\n'
nl|'\n'
name|'policy'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostNetworkPolicy'"
op|')'
newline|'\n'
name|'nicteaming'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostNicTeamingPolicy'"
op|')'
newline|'\n'
name|'nicteaming'
op|'.'
name|'notifySwitches'
op|'='
name|'True'
newline|'\n'
name|'policy'
op|'.'
name|'nicTeaming'
op|'='
name|'nicteaming'
newline|'\n'
nl|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'policy'
op|'='
name|'policy'
newline|'\n'
name|'return'
name|'vswitch_port_group_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vnc_config_spec
dedent|''
name|'def'
name|'get_vnc_config_spec'
op|'('
name|'client_factory'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vnc config spec."""'
newline|'\n'
name|'virtual_machine_config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'opt_enabled'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt_enabled'
op|'.'
name|'key'
op|'='
string|'"RemoteDisplay.vnc.enabled"'
newline|'\n'
name|'opt_enabled'
op|'.'
name|'value'
op|'='
string|'"true"'
newline|'\n'
name|'opt_port'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt_port'
op|'.'
name|'key'
op|'='
string|'"RemoteDisplay.vnc.port"'
newline|'\n'
name|'opt_port'
op|'.'
name|'value'
op|'='
name|'port'
newline|'\n'
name|'extras'
op|'='
op|'['
name|'opt_enabled'
op|','
name|'opt_port'
op|']'
newline|'\n'
name|'virtual_machine_config_spec'
op|'.'
name|'extraConfig'
op|'='
name|'extras'
newline|'\n'
name|'return'
name|'virtual_machine_config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'vmware.get_vnc_port'"
op|')'
newline|'\n'
DECL|function|get_vnc_port
name|'def'
name|'get_vnc_port'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return VNC port for an VM or None if there is no available port."""'
newline|'\n'
name|'min_port'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'vnc_port'
newline|'\n'
name|'port_total'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'vnc_port_total'
newline|'\n'
name|'allocated_ports'
op|'='
name|'_get_allocated_vnc_ports'
op|'('
name|'session'
op|')'
newline|'\n'
name|'max_port'
op|'='
name|'min_port'
op|'+'
name|'port_total'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'range'
op|'('
name|'min_port'
op|','
name|'max_port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'port'
name|'not'
name|'in'
name|'allocated_ports'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'port'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'ConsolePortRangeExhausted'
op|'('
name|'min_port'
op|'='
name|'min_port'
op|','
nl|'\n'
name|'max_port'
op|'='
name|'max_port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_allocated_vnc_ports
dedent|''
name|'def'
name|'_get_allocated_vnc_ports'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return an integer set of all allocated VNC ports."""'
newline|'\n'
comment|'# TODO(rgerganov): bug #1256944'
nl|'\n'
comment|'# The VNC port should be unique per host, not per vCenter'
nl|'\n'
name|'vnc_ports'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
name|'VNC_CONFIG_KEY'
op|']'
op|')'
newline|'\n'
name|'while'
name|'result'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'obj'
name|'in'
name|'result'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'obj'
op|','
string|"'propSet'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'dynamic_prop'
op|'='
name|'obj'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
newline|'\n'
name|'option_value'
op|'='
name|'dynamic_prop'
op|'.'
name|'val'
newline|'\n'
name|'vnc_port'
op|'='
name|'option_value'
op|'.'
name|'value'
newline|'\n'
name|'vnc_ports'
op|'.'
name|'add'
op|'('
name|'int'
op|'('
name|'vnc_port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'token'
op|'='
name|'_get_token'
op|'('
name|'result'
op|')'
newline|'\n'
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"continue_to_get_objects"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'vnc_ports'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|search_datastore_spec
dedent|''
name|'def'
name|'search_datastore_spec'
op|'('
name|'client_factory'
op|','
name|'file_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the datastore search spec."""'
newline|'\n'
name|'search_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostDatastoreBrowserSearchSpec'"
op|')'
newline|'\n'
name|'search_spec'
op|'.'
name|'matchPattern'
op|'='
op|'['
name|'file_name'
op|']'
newline|'\n'
name|'return'
name|'search_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_token
dedent|''
name|'def'
name|'_get_token'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the token from the property results."""'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'results'
op|','
string|"'token'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_reference_for_value
dedent|''
name|'def'
name|'_get_reference_for_value'
op|'('
name|'results'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'object'
name|'in'
name|'results'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'object'
op|'.'
name|'obj'
op|'.'
name|'value'
op|'=='
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'object'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_for_value
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_object_for_value'
op|'('
name|'results'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'object'
name|'in'
name|'results'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'object'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'object'
op|'.'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_for_optionvalue
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_object_for_optionvalue'
op|'('
name|'results'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'object'
name|'in'
name|'results'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'object'
op|','
string|'"propSet"'
op|')'
name|'and'
name|'object'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'object'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'.'
name|'value'
op|'=='
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'object'
op|'.'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_from_results
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'results'
op|','
name|'value'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'while'
name|'results'
op|':'
newline|'\n'
indent|'        '
name|'token'
op|'='
name|'_get_token'
op|'('
name|'results'
op|')'
newline|'\n'
name|'object'
op|'='
name|'func'
op|'('
name|'results'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'object'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'                '
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"cancel_retrieve"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'object'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"continue_to_get_objects"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_cancel_retrieve_if_necessary
dedent|''
dedent|''
dedent|''
name|'def'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'session'
op|','
name|'results'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'token'
op|'='
name|'_get_token'
op|'('
name|'results'
op|')'
newline|'\n'
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"cancel_retrieve"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_name
dedent|''
dedent|''
name|'def'
name|'_get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM with the name specified."""'
newline|'\n'
name|'vms'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'vms'
op|','
name|'vm_name'
op|','
nl|'\n'
name|'_get_object_for_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'vm_ref_cache_from_name'
newline|'\n'
DECL|function|get_vm_ref_from_name
name|'def'
name|'get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
name|'_get_vm_ref_from_vm_uuid'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_uuid
dedent|''
name|'def'
name|'_get_vm_ref_from_uuid'
op|'('
name|'session'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM with the uuid specified.\n\n    This method reads all of the names of the VM\'s that are running\n    on the backend, then it filters locally the matching\n    instance_uuid. It is far more optimal to use\n    _get_vm_ref_from_vm_uuid.\n    """'
newline|'\n'
name|'vms'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'vms'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'_get_object_for_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_vm_uuid
dedent|''
name|'def'
name|'_get_vm_ref_from_vm_uuid'
op|'('
name|'session'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM.\n\n    The method will make use of FindAllByUuid to get the VM reference.\n    This method finds all VM\'s on the backend that match the\n    instance_uuid, more specifically all VM\'s on the backend that have\n    \'config_spec.instanceUuid\' set to \'instance_uuid\'.\n    """'
newline|'\n'
name|'vm_refs'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"FindAllByUuid"'
op|','
nl|'\n'
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'get_service_content'
op|'('
op|')'
op|'.'
name|'searchIndex'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'vmSearch'
op|'='
name|'True'
op|','
nl|'\n'
name|'instanceUuid'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'vm_refs'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vm_refs'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_extraconfig
dedent|''
dedent|''
name|'def'
name|'_get_vm_ref_from_extraconfig'
op|'('
name|'session'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM with the uuid specified."""'
newline|'\n'
name|'vms'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'\'config.extraConfig["nvp.vm-uuid"]\''
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'vms'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'_get_object_for_optionvalue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'vm_ref_cache_from_instance'
newline|'\n'
DECL|function|get_vm_ref
name|'def'
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM through uuid or vm name."""'
newline|'\n'
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'vm_ref'
op|'='
op|'('
name|'search_vm_ref_by_identifier'
op|'('
name|'session'
op|','
name|'uuid'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|search_vm_ref_by_identifier
dedent|''
name|'def'
name|'search_vm_ref_by_identifier'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Searches VM reference using the identifier.\n\n    This method is primarily meant to separate out part of the logic for\n    vm_ref search that could be use directly in the special case of\n    migrating the instance. For querying VM linked to an instance always\n    use get_vm_ref instead.\n    """'
newline|'\n'
name|'vm_ref'
op|'='
op|'('
name|'_get_vm_ref_from_vm_uuid'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_extraconfig'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_uuid'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_ref_from_id
dedent|''
name|'def'
name|'get_host_ref_from_id'
op|'('
name|'session'
op|','
name|'host_id'
op|','
name|'property_list'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a host reference object for a host_id string."""'
newline|'\n'
nl|'\n'
name|'if'
name|'property_list'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'property_list'
op|'='
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'host_refs'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|','
name|'property_list'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'host_refs'
op|','
name|'host_id'
op|','
nl|'\n'
name|'_get_reference_for_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_id_from_vm_ref
dedent|''
name|'def'
name|'get_host_id_from_vm_ref'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This method allows you to find the managed object\n    ID of the host running a VM. Since vMotion can\n    change the value, you should not presume that this\n    is a value that you can cache for very long and\n    should be prepared to allow for it to change.\n\n    :param session: a vSphere API connection\n    :param vm_ref: a reference object to the running VM\n    :return: the host_id running the virtual machine\n    """'
newline|'\n'
nl|'\n'
comment|'# to prevent typographical errors below'
nl|'\n'
name|'property_name'
op|'='
string|"'runtime.host'"
newline|'\n'
nl|'\n'
comment|'# a property collector in VMware vSphere Management API'
nl|'\n'
comment|'# is a set of local representations of remote values.'
nl|'\n'
comment|'# property_set here, is a local representation of the'
nl|'\n'
comment|'# properties we are querying for.'
nl|'\n'
name|'property_set'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
string|'"get_object_properties"'
op|','
nl|'\n'
name|'None'
op|','
name|'vm_ref'
op|','
name|'vm_ref'
op|'.'
name|'_type'
op|','
op|'['
name|'property_name'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'prop'
op|'='
name|'property_from_property_set'
op|'('
nl|'\n'
name|'property_name'
op|','
name|'property_set'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'prop'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'prop'
op|'='
name|'prop'
op|'.'
name|'val'
op|'.'
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# reaching here represents an impossible state'
nl|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
nl|'\n'
string|'"Virtual Machine %s exists without a runtime.host!"'
nl|'\n'
op|'%'
op|'('
name|'vm_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'prop'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|property_from_property_set
dedent|''
name|'def'
name|'property_from_property_set'
op|'('
name|'property_name'
op|','
name|'property_set'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Use this method to filter property collector results.\n\n    Because network traffic is expensive, multiple\n    VMwareAPI calls will sometimes pile-up properties\n    to be collected. That means results may contain\n    many different values for multiple purposes.\n\n    This helper will filter a list for a single result\n    and filter the properties of that result to find\n    the single value of whatever type resides in that\n    result. This could be a ManagedObjectReference ID\n    or a complex value.\n\n    :param property_name: name of property you want\n    :param property_set: all results from query\n    :return: the value of the property.\n    '''"
newline|'\n'
nl|'\n'
name|'for'
name|'prop'
name|'in'
name|'property_set'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'_property_from_propSet'
op|'('
name|'prop'
op|'.'
name|'propSet'
op|','
name|'property_name'
op|')'
newline|'\n'
name|'if'
name|'p'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_property_from_propSet
dedent|''
dedent|''
dedent|''
name|'def'
name|'_property_from_propSet'
op|'('
name|'propSet'
op|','
name|'name'
op|'='
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'p'
name|'in'
name|'propSet'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'p'
op|'.'
name|'name'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_ref_for_vm
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_host_ref_for_vm'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'props'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the ESXi host running a VM by its name."""'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'host_id'
op|'='
name|'get_host_id_from_vm_ref'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'return'
name|'get_host_ref_from_id'
op|'('
name|'session'
op|','
name|'host_id'
op|','
name|'props'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_name_for_vm
dedent|''
name|'def'
name|'get_host_name_for_vm'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the ESXi host running a VM by its name."""'
newline|'\n'
name|'host_ref'
op|'='
name|'get_host_ref_for_vm'
op|'('
name|'session'
op|','
name|'instance'
op|','
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'get_host_name_from_host_ref'
op|'('
name|'host_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_name_from_host_ref
dedent|''
name|'def'
name|'get_host_name_from_host_ref'
op|'('
name|'host_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'p'
op|'='
name|'_property_from_propSet'
op|'('
name|'host_ref'
op|'.'
name|'propSet'
op|')'
newline|'\n'
name|'if'
name|'p'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'p'
op|'.'
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_state_from_name
dedent|''
dedent|''
name|'def'
name|'get_vm_state_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vm_ref'
op|'='
name|'get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
newline|'\n'
name|'vm_state'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\n'
name|'return'
name|'vm_state'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_stats_from_cluster
dedent|''
name|'def'
name|'get_stats_from_cluster'
op|'('
name|'session'
op|','
name|'cluster'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the aggregate resource stats of a cluster."""'
newline|'\n'
name|'cpu_info'
op|'='
op|'{'
string|"'vcpus'"
op|':'
number|'0'
op|','
string|"'cores'"
op|':'
number|'0'
op|','
string|"'vendor'"
op|':'
op|'['
op|']'
op|','
string|"'model'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'mem_info'
op|'='
op|'{'
string|"'total'"
op|':'
number|'0'
op|','
string|"'free'"
op|':'
number|'0'
op|'}'
newline|'\n'
comment|'# Get the Host and Resource Pool Managed Object Refs'
nl|'\n'
name|'prop_dict'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_properties"'
op|','
nl|'\n'
name|'cluster'
op|','
string|'"ClusterComputeResource"'
op|','
nl|'\n'
op|'['
string|'"host"'
op|','
string|'"resourcePool"'
op|']'
op|')'
newline|'\n'
name|'if'
name|'prop_dict'
op|':'
newline|'\n'
indent|'        '
name|'host_ret'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
newline|'\n'
name|'if'
name|'host_ret'
op|':'
newline|'\n'
indent|'            '
name|'host_mors'
op|'='
name|'host_ret'
op|'.'
name|'ManagedObjectReference'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_properties_for_a_collection_of_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|','
name|'host_mors'
op|','
nl|'\n'
op|'['
string|'"summary.hardware"'
op|','
string|'"summary.runtime"'
op|']'
op|')'
newline|'\n'
name|'for'
name|'obj'
name|'in'
name|'result'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'                '
name|'hardware_summary'
op|'='
name|'obj'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
newline|'\n'
name|'runtime_summary'
op|'='
name|'obj'
op|'.'
name|'propSet'
op|'['
number|'1'
op|']'
op|'.'
name|'val'
newline|'\n'
name|'if'
name|'runtime_summary'
op|'.'
name|'connectionState'
op|'=='
string|'"connected"'
op|':'
newline|'\n'
comment|'# Total vcpus is the sum of all pCPUs of individual hosts'
nl|'\n'
comment|'# The overcommitment ratio is factored in by the scheduler'
nl|'\n'
indent|'                    '
name|'cpu_info'
op|'['
string|"'vcpus'"
op|']'
op|'+='
name|'hardware_summary'
op|'.'
name|'numCpuThreads'
newline|'\n'
name|'cpu_info'
op|'['
string|"'cores'"
op|']'
op|'+='
name|'hardware_summary'
op|'.'
name|'numCpuCores'
newline|'\n'
name|'cpu_info'
op|'['
string|"'vendor'"
op|']'
op|'.'
name|'append'
op|'('
name|'hardware_summary'
op|'.'
name|'vendor'
op|')'
newline|'\n'
name|'cpu_info'
op|'['
string|"'model'"
op|']'
op|'.'
name|'append'
op|'('
name|'hardware_summary'
op|'.'
name|'cpuModel'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'res_mor'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'resourcePool'"
op|')'
newline|'\n'
name|'if'
name|'res_mor'
op|':'
newline|'\n'
indent|'            '
name|'res_usage'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'res_mor'
op|','
string|'"ResourcePool"'
op|','
string|'"summary.runtime.memory"'
op|')'
newline|'\n'
name|'if'
name|'res_usage'
op|':'
newline|'\n'
comment|"# maxUsage is the memory limit of the cluster available to VM's"
nl|'\n'
indent|'                '
name|'mem_info'
op|'['
string|"'total'"
op|']'
op|'='
name|'int'
op|'('
name|'res_usage'
op|'.'
name|'maxUsage'
op|'/'
name|'units'
op|'.'
name|'Mi'
op|')'
newline|'\n'
comment|"# overallUsage is the hypervisor's view of memory usage by VM's"
nl|'\n'
name|'consumed'
op|'='
name|'int'
op|'('
name|'res_usage'
op|'.'
name|'overallUsage'
op|'/'
name|'units'
op|'.'
name|'Mi'
op|')'
newline|'\n'
name|'mem_info'
op|'['
string|"'free'"
op|']'
op|'='
name|'mem_info'
op|'['
string|"'total'"
op|']'
op|'-'
name|'consumed'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'stats'
op|'='
op|'{'
string|"'cpu'"
op|':'
name|'cpu_info'
op|','
string|"'mem'"
op|':'
name|'mem_info'
op|'}'
newline|'\n'
name|'return'
name|'stats'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cluster_ref_from_name
dedent|''
name|'def'
name|'get_cluster_ref_from_name'
op|'('
name|'session'
op|','
name|'cluster_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the cluster with the name specified."""'
newline|'\n'
name|'cls'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ClusterComputeResource"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'cls'
op|','
name|'cluster_name'
op|','
nl|'\n'
name|'_get_object_for_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_ref
dedent|''
name|'def'
name|'get_host_ref'
op|'('
name|'session'
op|','
name|'cluster'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to a host within the cluster specified."""'
newline|'\n'
name|'if'
name|'cluster'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|')'
newline|'\n'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'session'
op|','
name|'results'
op|')'
newline|'\n'
name|'host_mor'
op|'='
name|'results'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'host_ret'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'cluster'
op|','
string|'"ClusterComputeResource"'
op|','
nl|'\n'
string|'"host"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'host_ret'
name|'or'
name|'not'
name|'host_ret'
op|'.'
name|'ManagedObjectReference'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'No host available on cluster'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'host_mor'
op|'='
name|'host_ret'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'host_mor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|propset_dict
dedent|''
name|'def'
name|'propset_dict'
op|'('
name|'propset'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turn a propset list into a dictionary\n\n    PropSet is an optional attribute on ObjectContent objects\n    that are returned by the VMware API.\n\n    You can read more about these at:\n    http://pubs.vmware.com/vsphere-51/index.jsp\n        #com.vmware.wssdk.apiref.doc/\n            vmodl.query.PropertyCollector.ObjectContent.html\n\n    :param propset: a property "set" from ObjectContent\n    :return: dictionary representing property set\n    """'
newline|'\n'
name|'if'
name|'propset'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'#TODO(hartsocks): once support for Python 2.6 is dropped'
nl|'\n'
comment|'# change to {[(prop.name, prop.val) for prop in propset]}'
nl|'\n'
dedent|''
name|'return'
name|'dict'
op|'('
op|'['
op|'('
name|'prop'
op|'.'
name|'name'
op|','
name|'prop'
op|'.'
name|'val'
op|')'
name|'for'
name|'prop'
name|'in'
name|'propset'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_select_datastore
dedent|''
name|'def'
name|'_select_datastore'
op|'('
name|'data_stores'
op|','
name|'best_match'
op|','
name|'datastore_regex'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Find the most preferable datastore in a given RetrieveResult object.\n\n    :param data_stores: a RetrieveResult object from vSphere API call\n    :param best_match: the current best match for datastore\n    :param datastore_regex: an optional regular expression to match names\n    :return: datastore_ref, datastore_name, capacity, freespace\n    """'
newline|'\n'
nl|'\n'
comment|'# data_stores is actually a RetrieveResult object from vSphere API call'
nl|'\n'
name|'for'
name|'obj_content'
name|'in'
name|'data_stores'
op|'.'
name|'objects'
op|':'
newline|'\n'
comment|'# the propset attribute "need not be set" by returning API'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'obj_content'
op|','
string|"'propSet'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'propdict'
op|'='
name|'propset_dict'
op|'('
name|'obj_content'
op|'.'
name|'propSet'
op|')'
newline|'\n'
comment|"# Local storage identifier vSphere doesn't support CIFS or"
nl|'\n'
comment|'# vfat for datastores, therefore filtered'
nl|'\n'
name|'ds_type'
op|'='
name|'propdict'
op|'['
string|"'summary.type'"
op|']'
newline|'\n'
name|'ds_name'
op|'='
name|'propdict'
op|'['
string|"'summary.name'"
op|']'
newline|'\n'
name|'if'
op|'('
op|'('
name|'ds_type'
op|'=='
string|"'VMFS'"
name|'or'
name|'ds_type'
op|'=='
string|"'NFS'"
op|')'
name|'and'
nl|'\n'
name|'propdict'
op|'.'
name|'get'
op|'('
string|"'summary.accessible'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'datastore_regex'
name|'is'
name|'None'
name|'or'
name|'datastore_regex'
op|'.'
name|'match'
op|'('
name|'ds_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'new_ds'
op|'='
name|'DSRecord'
op|'('
nl|'\n'
name|'datastore'
op|'='
name|'obj_content'
op|'.'
name|'obj'
op|','
nl|'\n'
name|'name'
op|'='
name|'ds_name'
op|','
nl|'\n'
name|'capacity'
op|'='
name|'propdict'
op|'['
string|"'summary.capacity'"
op|']'
op|','
nl|'\n'
name|'freespace'
op|'='
name|'propdict'
op|'['
string|"'summary.freeSpace'"
op|']'
op|')'
newline|'\n'
comment|'# favor datastores with more free space'
nl|'\n'
name|'if'
name|'new_ds'
op|'.'
name|'freespace'
op|'>'
name|'best_match'
op|'.'
name|'freespace'
op|':'
newline|'\n'
indent|'                    '
name|'best_match'
op|'='
name|'new_ds'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'best_match'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_datastore_ref_and_name
dedent|''
name|'def'
name|'get_datastore_ref_and_name'
op|'('
name|'session'
op|','
name|'cluster'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'datastore_regex'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the datastore list and choose the most preferable one."""'
newline|'\n'
name|'if'
name|'cluster'
name|'is'
name|'None'
name|'and'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'data_stores'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datastore"'
op|','
op|'['
string|'"summary.type"'
op|','
string|'"summary.name"'
op|','
nl|'\n'
string|'"summary.capacity"'
op|','
string|'"summary.freeSpace"'
op|','
nl|'\n'
string|'"summary.accessible"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cluster'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'datastore_ret'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'cluster'
op|','
nl|'\n'
string|'"ClusterComputeResource"'
op|','
string|'"datastore"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'datastore_ret'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'host'
op|','
nl|'\n'
string|'"HostSystem"'
op|','
string|'"datastore"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'datastore_ret'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'DatastoreNotFound'
op|'('
op|')'
newline|'\n'
dedent|''
name|'data_store_mors'
op|'='
name|'datastore_ret'
op|'.'
name|'ManagedObjectReference'
newline|'\n'
name|'data_stores'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_properties_for_a_collection_of_objects"'
op|','
nl|'\n'
string|'"Datastore"'
op|','
name|'data_store_mors'
op|','
nl|'\n'
op|'['
string|'"summary.type"'
op|','
string|'"summary.name"'
op|','
nl|'\n'
string|'"summary.capacity"'
op|','
string|'"summary.freeSpace"'
op|','
nl|'\n'
string|'"summary.accessible"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'best_match'
op|'='
name|'DSRecord'
op|'('
name|'datastore'
op|'='
name|'None'
op|','
name|'name'
op|'='
name|'None'
op|','
nl|'\n'
name|'capacity'
op|'='
name|'None'
op|','
name|'freespace'
op|'='
number|'0'
op|')'
newline|'\n'
name|'while'
name|'data_stores'
op|':'
newline|'\n'
indent|'        '
name|'best_match'
op|'='
name|'_select_datastore'
op|'('
name|'data_stores'
op|','
name|'best_match'
op|','
nl|'\n'
name|'datastore_regex'
op|')'
newline|'\n'
name|'token'
op|'='
name|'_get_token'
op|'('
name|'data_stores'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
name|'data_stores'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"continue_to_get_objects"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'best_match'
op|'.'
name|'datastore'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'best_match'
newline|'\n'
dedent|''
name|'if'
name|'datastore_regex'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'DatastoreNotFound'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Datastore regex %s did not match any datastores"'
op|')'
nl|'\n'
op|'%'
name|'datastore_regex'
op|'.'
name|'pattern'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'DatastoreNotFound'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_allowed_datastores
dedent|''
dedent|''
name|'def'
name|'_get_allowed_datastores'
op|'('
name|'data_stores'
op|','
name|'datastore_regex'
op|','
name|'allowed_types'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'allowed'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'obj_content'
name|'in'
name|'data_stores'
op|'.'
name|'objects'
op|':'
newline|'\n'
comment|'# the propset attribute "need not be set" by returning API'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'obj_content'
op|','
string|"'propSet'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'propdict'
op|'='
name|'propset_dict'
op|'('
name|'obj_content'
op|'.'
name|'propSet'
op|')'
newline|'\n'
comment|"# Local storage identifier vSphere doesn't support CIFS or"
nl|'\n'
comment|'# vfat for datastores, therefore filtered'
nl|'\n'
name|'ds_type'
op|'='
name|'propdict'
op|'['
string|"'summary.type'"
op|']'
newline|'\n'
name|'ds_name'
op|'='
name|'propdict'
op|'['
string|"'summary.name'"
op|']'
newline|'\n'
name|'if'
op|'('
name|'propdict'
op|'['
string|"'summary.accessible'"
op|']'
name|'and'
name|'ds_type'
name|'in'
name|'allowed_types'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'datastore_regex'
name|'is'
name|'None'
name|'or'
name|'datastore_regex'
op|'.'
name|'match'
op|'('
name|'ds_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'allowed'
op|'.'
name|'append'
op|'('
op|'{'
string|"'ref'"
op|':'
name|'obj_content'
op|'.'
name|'obj'
op|','
string|"'name'"
op|':'
name|'ds_name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'allowed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_available_datastores
dedent|''
name|'def'
name|'get_available_datastores'
op|'('
name|'session'
op|','
name|'cluster'
op|'='
name|'None'
op|','
name|'datastore_regex'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the datastore list and choose the first local storage."""'
newline|'\n'
name|'if'
name|'cluster'
op|':'
newline|'\n'
indent|'        '
name|'mobj'
op|'='
name|'cluster'
newline|'\n'
name|'type'
op|'='
string|'"ClusterComputeResource"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'mobj'
op|'='
name|'get_host_ref'
op|'('
name|'session'
op|')'
newline|'\n'
name|'type'
op|'='
string|'"HostSystem"'
newline|'\n'
dedent|''
name|'ds'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
name|'mobj'
op|','
nl|'\n'
name|'type'
op|','
string|'"datastore"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'data_store_mors'
op|'='
name|'ds'
op|'.'
name|'ManagedObjectReference'
newline|'\n'
comment|'# NOTE(garyk): use utility method to retrieve remote objects'
nl|'\n'
name|'data_stores'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_properties_for_a_collection_of_objects"'
op|','
nl|'\n'
string|'"Datastore"'
op|','
name|'data_store_mors'
op|','
nl|'\n'
op|'['
string|'"summary.type"'
op|','
string|'"summary.name"'
op|','
string|'"summary.accessible"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'allowed'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'data_stores'
op|':'
newline|'\n'
indent|'        '
name|'allowed'
op|'.'
name|'extend'
op|'('
name|'_get_allowed_datastores'
op|'('
name|'data_stores'
op|','
name|'datastore_regex'
op|','
nl|'\n'
op|'['
string|"'VMFS'"
op|','
string|"'NFS'"
op|']'
op|')'
op|')'
newline|'\n'
name|'token'
op|'='
name|'_get_token'
op|'('
name|'data_stores'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'data_stores'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"continue_to_get_objects"'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'allowed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_backed_disk_uuid
dedent|''
name|'def'
name|'get_vmdk_backed_disk_uuid'
op|'('
name|'hardware_devices'
op|','
name|'volume_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|'"VirtualDiskFlatVer2BackingInfo"'
name|'and'
nl|'\n'
name|'volume_uuid'
name|'in'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_backed_disk_device
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vmdk_backed_disk_device'
op|'('
name|'hardware_devices'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|'"VirtualDiskFlatVer2BackingInfo"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'uuid'
op|'=='
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_volume_disk
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vmdk_volume_disk'
op|'('
name|'hardware_devices'
op|','
name|'path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'path'
name|'or'
name|'path'
op|'=='
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_res_pool_ref
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_res_pool_ref'
op|'('
name|'session'
op|','
name|'cluster'
op|','
name|'node_mo_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the resource pool."""'
newline|'\n'
name|'if'
name|'cluster'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# With no cluster named, use the root resource pool.'
nl|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ResourcePool"'
op|')'
newline|'\n'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'session'
op|','
name|'results'
op|')'
newline|'\n'
comment|'# The 0th resource pool is always the root resource pool on both ESX'
nl|'\n'
comment|'# and vCenter.'
nl|'\n'
name|'res_pool_ref'
op|'='
name|'results'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cluster'
op|'.'
name|'value'
op|'=='
name|'node_mo_id'
op|':'
newline|'\n'
comment|'# Get the root resource pool of the cluster'
nl|'\n'
indent|'            '
name|'res_pool_ref'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'cluster'
op|','
nl|'\n'
string|'"ClusterComputeResource"'
op|','
nl|'\n'
string|'"resourcePool"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'res_pool_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_cluster_mors
dedent|''
name|'def'
name|'get_all_cluster_mors'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all the clusters in the vCenter."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ClusterComputeResource"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'session'
op|','
name|'results'
op|')'
newline|'\n'
name|'return'
name|'results'
op|'.'
name|'objects'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Failed to get cluster references %s"'
op|')'
op|'%'
name|'excep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_res_pool_mors
dedent|''
dedent|''
name|'def'
name|'get_all_res_pool_mors'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all the resource pools in the vCenter."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ResourcePool"'
op|')'
newline|'\n'
nl|'\n'
name|'_cancel_retrieve_if_necessary'
op|'('
name|'session'
op|','
name|'results'
op|')'
newline|'\n'
name|'return'
name|'results'
op|'.'
name|'objects'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Failed to get resource pool references "'
string|'"%s"'
op|')'
op|'%'
name|'excep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dynamic_property_mor
dedent|''
dedent|''
name|'def'
name|'get_dynamic_property_mor'
op|'('
name|'session'
op|','
name|'mor_ref'
op|','
name|'attribute'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the value of an attribute for a given managed object."""'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'mor_ref'
op|','
name|'mor_ref'
op|'.'
name|'_type'
op|','
name|'attribute'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_entity_mor
dedent|''
name|'def'
name|'find_entity_mor'
op|'('
name|'entity_list'
op|','
name|'entity_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns managed object ref for given cluster or resource pool name."""'
newline|'\n'
name|'return'
op|'['
name|'mor'
name|'for'
name|'mor'
name|'in'
name|'entity_list'
name|'if'
op|'('
name|'hasattr'
op|'('
name|'mor'
op|','
string|"'propSet'"
op|')'
name|'and'
nl|'\n'
name|'mor'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'entity_name'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_cluster_refs_by_name
dedent|''
name|'def'
name|'get_all_cluster_refs_by_name'
op|'('
name|'session'
op|','
name|'path_list'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the Cluster, ResourcePool with the path specified.\n\n    The path is the display name. This can be the full path as well.\n    The input will have the list of clusters and resource pool names\n    """'
newline|'\n'
name|'cls'
op|'='
name|'get_all_cluster_mors'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cls'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'res'
op|'='
name|'get_all_res_pool_mors'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'res'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'path_list'
op|'='
op|'['
name|'path'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'path'
name|'in'
name|'path_list'
op|']'
newline|'\n'
name|'list_obj'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'entity_path'
name|'in'
name|'path_list'
op|':'
newline|'\n'
comment|'# entity_path could be unique cluster and/or resource-pool name'
nl|'\n'
indent|'        '
name|'res_mor'
op|'='
name|'find_entity_mor'
op|'('
name|'res'
op|','
name|'entity_path'
op|')'
newline|'\n'
name|'cls_mor'
op|'='
name|'find_entity_mor'
op|'('
name|'cls'
op|','
name|'entity_path'
op|')'
newline|'\n'
name|'cls_mor'
op|'.'
name|'extend'
op|'('
name|'res_mor'
op|')'
newline|'\n'
name|'for'
name|'mor'
name|'in'
name|'cls_mor'
op|':'
newline|'\n'
indent|'            '
name|'list_obj'
op|'.'
name|'append'
op|'('
op|'('
name|'mor'
op|'.'
name|'obj'
op|','
name|'mor'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'get_dict_mor'
op|'('
name|'session'
op|','
name|'list_obj'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dict_mor
dedent|''
name|'def'
name|'get_dict_mor'
op|'('
name|'session'
op|','
name|'list_obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The input is a list of objects in the form\n    (manage_object,display_name)\n    The managed object will be in the form\n    { value = "domain-1002", _type = "ClusterComputeResource" }\n\n    Output data format:\n    dict_mors = {\n                  \'respool-1001\': { \'cluster_mor\': clusterMor,\n                                    \'res_pool_mor\': resourcePoolMor,\n                                    \'name\': display_name },\n                  \'domain-1002\': { \'cluster_mor\': clusterMor,\n                                    \'res_pool_mor\': resourcePoolMor,\n                                    \'name\': display_name },\n                }\n    """'
newline|'\n'
name|'dict_mors'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'obj_ref'
op|','
name|'path'
name|'in'
name|'list_obj'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'obj_ref'
op|'.'
name|'_type'
op|'=='
string|'"ResourcePool"'
op|':'
newline|'\n'
comment|'# Get owner cluster-ref mor'
nl|'\n'
indent|'            '
name|'cluster_ref'
op|'='
name|'get_dynamic_property_mor'
op|'('
name|'session'
op|','
name|'obj_ref'
op|','
string|'"owner"'
op|')'
newline|'\n'
name|'dict_mors'
op|'['
name|'obj_ref'
op|'.'
name|'value'
op|']'
op|'='
op|'{'
string|"'cluster_mor'"
op|':'
name|'cluster_ref'
op|','
nl|'\n'
string|"'res_pool_mor'"
op|':'
name|'obj_ref'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'path'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Get default resource pool of the cluster'
nl|'\n'
indent|'            '
name|'res_pool_ref'
op|'='
name|'get_dynamic_property_mor'
op|'('
name|'session'
op|','
nl|'\n'
name|'obj_ref'
op|','
string|'"resourcePool"'
op|')'
newline|'\n'
name|'dict_mors'
op|'['
name|'obj_ref'
op|'.'
name|'value'
op|']'
op|'='
op|'{'
string|"'cluster_mor'"
op|':'
name|'obj_ref'
op|','
nl|'\n'
string|"'res_pool_mor'"
op|':'
name|'res_pool_ref'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'path'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dict_mors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_mo_id_from_instance
dedent|''
name|'def'
name|'get_mo_id_from_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the managed object ID from the instance.\n\n    The instance[\'node\'] will have the hypervisor_hostname field of the\n    compute node on which the instance exists or will be provisioned.\n    This will be of the form\n    \'respool-1001(MyResPoolName)\'\n    \'domain-1001(MyClusterName)\'\n    """'
newline|'\n'
name|'return'
name|'instance'
op|'['
string|"'node'"
op|']'
op|'.'
name|'partition'
op|'('
string|"'('"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_adapter_type
dedent|''
name|'def'
name|'get_vmdk_adapter_type'
op|'('
name|'adapter_type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the adapter type to be used in vmdk descriptor.\n\n    Adapter type in vmdk descriptor is same for LSI-SAS & LSILogic\n    because Virtual Disk Manager API does not recognize the newer controller\n    types.\n    """'
newline|'\n'
name|'if'
name|'adapter_type'
op|'=='
string|'"lsiLogicsas"'
op|':'
newline|'\n'
indent|'        '
name|'vmdk_adapter_type'
op|'='
string|'"lsiLogic"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'vmdk_adapter_type'
op|'='
name|'adapter_type'
newline|'\n'
dedent|''
name|'return'
name|'vmdk_adapter_type'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_vm
dedent|''
name|'def'
name|'create_vm'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_folder'
op|','
name|'config_spec'
op|','
name|'res_pool_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create VM on ESX host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating VM on the ESX host"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_create_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"CreateVM_Task"'
op|','
name|'vm_folder'
op|','
nl|'\n'
name|'config'
op|'='
name|'config_spec'
op|','
name|'pool'
op|'='
name|'res_pool_ref'
op|')'
newline|'\n'
name|'task_info'
op|'='
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vm_create_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Created VM on the ESX host"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'task_info'
op|'.'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clone_vmref_for_instance
dedent|''
name|'def'
name|'clone_vmref_for_instance'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|','
name|'host_ref'
op|','
name|'ds_ref'
op|','
nl|'\n'
name|'vmfolder_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Clone VM and link the cloned VM to the instance.\n\n    Clones the passed vm_ref into a new VM and links the cloned vm to\n    the passed instance.\n    """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"vmwareapi:vm_util:clone_vmref_for_instance, called "'
nl|'\n'
string|'"with vm_ref=None"'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'error_util'
op|'.'
name|'MissingParameter'
op|'('
name|'param'
op|'='
string|'"vm_ref"'
op|')'
newline|'\n'
comment|'# Get the clone vm spec'
nl|'\n'
dedent|''
name|'client_factory'
op|'='
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'rel_spec'
op|'='
name|'relocate_vm_spec'
op|'('
name|'client_factory'
op|','
name|'ds_ref'
op|','
name|'host_ref'
op|')'
newline|'\n'
name|'extra_opts'
op|'='
op|'{'
string|"'nvp.vm-uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
name|'config_spec'
op|'='
name|'get_vm_extra_config_spec'
op|'('
name|'client_factory'
op|','
name|'extra_opts'
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'instanceUuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'clone_spec'
op|'='
name|'clone_vm_spec'
op|'('
name|'client_factory'
op|','
name|'rel_spec'
op|','
name|'config'
op|'='
name|'config_spec'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clone VM on ESX host'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Cloning VM for instance %s"'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_clone_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"CloneVM_Task"'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'folder'
op|'='
name|'vmfolder_ref'
op|','
nl|'\n'
name|'name'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'spec'
op|'='
name|'clone_spec'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vm_clone_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Cloned VM for instance %s"'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Invalidate the cache, so that it is refetched the next time'
nl|'\n'
name|'vm_ref_cache_delete'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|disassociate_vmref_from_instance
dedent|''
name|'def'
name|'disassociate_vmref_from_instance'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'suffix'
op|'='
string|"'-orig'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Disassociates the VM linked to the instance.\n\n    Disassociates the VM linked to the instance by performing the following\n    1. Update the extraConfig property for nvp.vm-uuid to be replaced with\n    instance[uuid]+suffix\n    2. Rename the VM to be instance[uuid]+suffix instead\n    3. Reset the instanceUUID of the VM to a new generated value\n    """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'extra_opts'
op|'='
op|'{'
string|"'nvp.vm-uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'+'
name|'suffix'
op|'}'
newline|'\n'
name|'client_factory'
op|'='
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'reconfig_spec'
op|'='
name|'get_vm_extra_config_spec'
op|'('
name|'client_factory'
op|','
name|'extra_opts'
op|')'
newline|'\n'
name|'reconfig_spec'
op|'.'
name|'name'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'+'
name|'suffix'
newline|'\n'
name|'reconfig_spec'
op|'.'
name|'instanceUuid'
op|'='
string|"''"
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Disassociating VM from instance %s"'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'reconfig_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"ReconfigVM_Task"'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'spec'
op|'='
name|'reconfig_spec'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'reconfig_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Disassociated VM from instance %s"'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Invalidate the cache, so that it is refetched the next time'
nl|'\n'
name|'vm_ref_cache_delete'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|associate_vmref_for_instance
dedent|''
name|'def'
name|'associate_vmref_for_instance'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'suffix'
op|'='
string|"'-orig'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Associates the VM to the instance.\n\n    Associates the VM to the instance by performing the following\n    1. Update the extraConfig property for nvp.vm-uuid to be replaced with\n    instance[uuid]\n    2. Rename the VM to be instance[uuid]\n    3. Reset the instanceUUID of the VM to be instance[uuid]\n    """'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'search_vm_ref_by_identifier'
op|'('
name|'session'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'+'
name|'suffix'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
nl|'\n'
op|'+'
name|'suffix'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'extra_opts'
op|'='
op|'{'
string|"'nvp.vm-uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
name|'client_factory'
op|'='
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'reconfig_spec'
op|'='
name|'get_vm_extra_config_spec'
op|'('
name|'client_factory'
op|','
name|'extra_opts'
op|')'
newline|'\n'
name|'reconfig_spec'
op|'.'
name|'name'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'reconfig_spec'
op|'.'
name|'instanceUuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Associating VM to instance %s"'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'reconfig_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
string|'"ReconfigVM_Task"'
op|','
nl|'\n'
name|'vm_ref'
op|','
name|'spec'
op|'='
name|'reconfig_spec'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'reconfig_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Associated VM to instance %s"'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Invalidate the cache, so that it is refetched the next time'
nl|'\n'
name|'vm_ref_cache_delete'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|power_on_instance
dedent|''
name|'def'
name|'power_on_instance'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Power on the specified instance."""'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powering on the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'poweron_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'_get_vim'
op|'('
op|')'
op|','
nl|'\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'poweron_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powered on the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'error_util'
op|'.'
name|'InvalidPowerStateException'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM already powered on"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright (c) 2012 VMware, Inc.'
nl|'\n'
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nThe VMware API VM utility module to build SOAP object specs.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'exceptions'
name|'as'
name|'vexc'
newline|'\n'
name|'from'
name|'oslo_vmware'
op|'.'
name|'objects'
name|'import'
name|'datastore'
name|'as'
name|'ds_obj'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'pbm'
newline|'\n'
name|'from'
name|'oslo_vmware'
name|'import'
name|'vim_util'
name|'as'
name|'vutil'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
op|','
name|'_LI'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|vmware_utils_opts
name|'vmware_utils_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'console_delay_seconds'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Set this value if affected by an increased network '"
nl|'\n'
string|"'latency causing repeated characters when typing in '"
nl|'\n'
string|"'a remote console.'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'vmware_utils_opts'
op|','
string|"'vmware'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|ALL_SUPPORTED_NETWORK_DEVICES
name|'ALL_SUPPORTED_NETWORK_DEVICES'
op|'='
op|'['
string|"'VirtualE1000'"
op|','
string|"'VirtualE1000e'"
op|','
nl|'\n'
string|"'VirtualPCNet32'"
op|','
string|"'VirtualSriovEthernetCard'"
op|','
nl|'\n'
string|"'VirtualVmxnet'"
op|','
string|"'VirtualVmxnet3'"
op|']'
newline|'\n'
nl|'\n'
comment|'# A cache for VM references. The key will be the VM name'
nl|'\n'
comment|'# and the value is the VM reference. The VM name is unique. This'
nl|'\n'
comment|'# is either the UUID of the instance or UUID-rescue in the case'
nl|'\n'
comment|'# that this is a rescue VM. This is in order to prevent'
nl|'\n'
comment|'# unnecessary communication with the backend.'
nl|'\n'
DECL|variable|_VM_REFS_CACHE
name|'_VM_REFS_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Limits
name|'class'
name|'Limits'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'reservation'
op|'='
name|'None'
op|','
nl|'\n'
name|'shares_level'
op|'='
name|'None'
op|','
name|'shares_share'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""imits object holds instance limits for convenience."""'
newline|'\n'
name|'self'
op|'.'
name|'limit'
op|'='
name|'limit'
newline|'\n'
name|'self'
op|'.'
name|'reservation'
op|'='
name|'reservation'
newline|'\n'
name|'self'
op|'.'
name|'shares_level'
op|'='
name|'shares_level'
newline|'\n'
name|'self'
op|'.'
name|'shares_share'
op|'='
name|'shares_share'
newline|'\n'
nl|'\n'
DECL|member|validate
dedent|''
name|'def'
name|'validate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'shares_level'
name|'in'
op|'('
string|"'high'"
op|','
string|"'normal'"
op|','
string|"'low'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'shares_share'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Share level \'%s\' cannot have share "'
nl|'\n'
string|'"configured"'
op|')'
op|'%'
name|'self'
op|'.'
name|'shares_level'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'shares_level'
op|'=='
string|"'custom'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'shares_level'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Share \'%s\' is not supported"'
op|')'
op|'%'
name|'self'
op|'.'
name|'shares_level'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|has_limits
dedent|''
dedent|''
name|'def'
name|'has_limits'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'limit'
name|'or'
nl|'\n'
name|'self'
op|'.'
name|'reservation'
name|'or'
nl|'\n'
name|'self'
op|'.'
name|'shares_level'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExtraSpecs
dedent|''
dedent|''
name|'class'
name|'ExtraSpecs'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cpu_limits'
op|'='
name|'None'
op|','
name|'hw_version'
op|'='
name|'None'
op|','
nl|'\n'
name|'storage_policy'
op|'='
name|'None'
op|','
name|'cores_per_socket'
op|'='
name|'None'
op|','
nl|'\n'
name|'memory_limits'
op|'='
name|'None'
op|','
name|'disk_io_limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ExtraSpecs object holds extra_specs for the instance."""'
newline|'\n'
name|'if'
name|'cpu_limits'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'cpu_limits'
op|'='
name|'Limits'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cpu_limits'
op|'='
name|'cpu_limits'
newline|'\n'
name|'if'
name|'memory_limits'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'memory_limits'
op|'='
name|'Limits'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'memory_limits'
op|'='
name|'memory_limits'
newline|'\n'
name|'if'
name|'disk_io_limits'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'disk_io_limits'
op|'='
name|'Limits'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'disk_io_limits'
op|'='
name|'disk_io_limits'
newline|'\n'
name|'self'
op|'.'
name|'hw_version'
op|'='
name|'hw_version'
newline|'\n'
name|'self'
op|'.'
name|'storage_policy'
op|'='
name|'storage_policy'
newline|'\n'
name|'self'
op|'.'
name|'cores_per_socket'
op|'='
name|'cores_per_socket'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_refs_cache_reset
dedent|''
dedent|''
name|'def'
name|'vm_refs_cache_reset'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_VM_REFS_CACHE'
newline|'\n'
name|'_VM_REFS_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_delete
dedent|''
name|'def'
name|'vm_ref_cache_delete'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_VM_REFS_CACHE'
op|'.'
name|'pop'
op|'('
name|'id'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_update
dedent|''
name|'def'
name|'vm_ref_cache_update'
op|'('
name|'id'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_VM_REFS_CACHE'
op|'['
name|'id'
op|']'
op|'='
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_get
dedent|''
name|'def'
name|'vm_ref_cache_get'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_VM_REFS_CACHE'
op|'.'
name|'get'
op|'('
name|'id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_vm_ref_cache
dedent|''
name|'def'
name|'_vm_ref_cache'
op|'('
name|'id'
op|','
name|'func'
op|','
name|'session'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vm_ref'
op|'='
name|'vm_ref_cache_get'
op|'('
name|'id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'vm_ref'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'func'
op|'('
name|'session'
op|','
name|'data'
op|')'
newline|'\n'
name|'vm_ref_cache_update'
op|'('
name|'id'
op|','
name|'vm_ref'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_from_instance
dedent|''
name|'def'
name|'vm_ref_cache_from_instance'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'return'
name|'_vm_ref_cache'
op|'('
name|'id'
op|','
name|'func'
op|','
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vm_ref_cache_from_name
dedent|''
name|'def'
name|'vm_ref_cache_from_name'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'session'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|'='
name|'name'
newline|'\n'
name|'return'
name|'_vm_ref_cache'
op|'('
name|'id'
op|','
name|'func'
op|','
name|'session'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
comment|'# the config key which stores the VNC port'
nl|'\n'
DECL|variable|VNC_CONFIG_KEY
dedent|''
name|'VNC_CONFIG_KEY'
op|'='
string|'\'config.extraConfig["RemoteDisplay.vnc.port"]\''
newline|'\n'
nl|'\n'
DECL|variable|VmdkInfo
name|'VmdkInfo'
op|'='
name|'collections'
op|'.'
name|'namedtuple'
op|'('
string|"'VmdkInfo'"
op|','
op|'['
string|"'path'"
op|','
string|"'adapter_type'"
op|','
nl|'\n'
string|"'disk_type'"
op|','
nl|'\n'
string|"'capacity_in_bytes'"
op|','
nl|'\n'
string|"'device'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_iface_id_option_value
name|'def'
name|'_iface_id_option_value'
op|'('
name|'client_factory'
op|','
name|'iface_id'
op|','
name|'port_index'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|'"nvp.iface-id.%d"'
op|'%'
name|'port_index'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'iface_id'
newline|'\n'
name|'return'
name|'opt'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_allocation_info
dedent|''
name|'def'
name|'_get_allocation_info'
op|'('
name|'client_factory'
op|','
name|'limits'
op|','
name|'allocation_type'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'allocation'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
name|'allocation_type'
op|')'
newline|'\n'
name|'if'
name|'limits'
op|'.'
name|'limit'
op|':'
newline|'\n'
indent|'        '
name|'allocation'
op|'.'
name|'limit'
op|'='
name|'limits'
op|'.'
name|'limit'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# Set as 'umlimited'"
nl|'\n'
indent|'        '
name|'allocation'
op|'.'
name|'limit'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'limits'
op|'.'
name|'reservation'
op|':'
newline|'\n'
indent|'        '
name|'allocation'
op|'.'
name|'reservation'
op|'='
name|'limits'
op|'.'
name|'reservation'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'allocation'
op|'.'
name|'reservation'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'shares'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:SharesInfo'"
op|')'
newline|'\n'
name|'if'
name|'limits'
op|'.'
name|'shares_level'
op|':'
newline|'\n'
indent|'        '
name|'shares'
op|'.'
name|'level'
op|'='
name|'limits'
op|'.'
name|'shares_level'
newline|'\n'
name|'if'
op|'('
name|'shares'
op|'.'
name|'level'
op|'=='
string|"'custom'"
name|'and'
nl|'\n'
name|'limits'
op|'.'
name|'shares_share'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shares'
op|'.'
name|'shares'
op|'='
name|'limits'
op|'.'
name|'shares_share'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'shares'
op|'.'
name|'shares'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'shares'
op|'.'
name|'level'
op|'='
string|"'normal'"
newline|'\n'
name|'shares'
op|'.'
name|'shares'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'allocation'
op|'.'
name|'shares'
op|'='
name|'shares'
newline|'\n'
name|'return'
name|'allocation'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_create_spec
dedent|''
name|'def'
name|'get_vm_create_spec'
op|'('
name|'client_factory'
op|','
name|'instance'
op|','
name|'data_store_name'
op|','
nl|'\n'
name|'vif_infos'
op|','
name|'extra_specs'
op|','
nl|'\n'
name|'os_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_OS_TYPE'
op|','
nl|'\n'
name|'profile_spec'
op|'='
name|'None'
op|','
name|'metadata'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the VM Create spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'name'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'config_spec'
op|'.'
name|'guestId'
op|'='
name|'os_type'
newline|'\n'
comment|'# The name is the unique identifier for the VM.'
nl|'\n'
name|'config_spec'
op|'.'
name|'instanceUuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'annotation'
op|'='
name|'metadata'
newline|'\n'
comment|'# set the Hardware version'
nl|'\n'
dedent|''
name|'config_spec'
op|'.'
name|'version'
op|'='
name|'extra_specs'
op|'.'
name|'hw_version'
newline|'\n'
nl|'\n'
comment|'# Allow nested hypervisor instances to host 64 bit VMs.'
nl|'\n'
name|'if'
name|'os_type'
name|'in'
op|'('
string|'"vmkernel5Guest"'
op|','
string|'"windowsHyperVGuest"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'nestedHVEnabled'
op|'='
string|'"True"'
newline|'\n'
nl|'\n'
comment|'# Append the profile spec'
nl|'\n'
dedent|''
name|'if'
name|'profile_spec'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'vmProfile'
op|'='
op|'['
name|'profile_spec'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_file_info'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineFileInfo'"
op|')'
newline|'\n'
name|'vm_file_info'
op|'.'
name|'vmPathName'
op|'='
string|'"["'
op|'+'
name|'data_store_name'
op|'+'
string|'"]"'
newline|'\n'
name|'config_spec'
op|'.'
name|'files'
op|'='
name|'vm_file_info'
newline|'\n'
nl|'\n'
name|'tools_info'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:ToolsConfigInfo'"
op|')'
newline|'\n'
name|'tools_info'
op|'.'
name|'afterPowerOn'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'afterResume'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestStandby'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestShutdown'
op|'='
name|'True'
newline|'\n'
name|'tools_info'
op|'.'
name|'beforeGuestReboot'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'tools'
op|'='
name|'tools_info'
newline|'\n'
name|'config_spec'
op|'.'
name|'numCPUs'
op|'='
name|'int'
op|'('
name|'instance'
op|'.'
name|'vcpus'
op|')'
newline|'\n'
name|'if'
name|'extra_specs'
op|'.'
name|'cores_per_socket'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'numCoresPerSocket'
op|'='
name|'int'
op|'('
name|'extra_specs'
op|'.'
name|'cores_per_socket'
op|')'
newline|'\n'
dedent|''
name|'config_spec'
op|'.'
name|'memoryMB'
op|'='
name|'int'
op|'('
name|'instance'
op|'.'
name|'memory_mb'
op|')'
newline|'\n'
nl|'\n'
comment|'# Configure cpu information'
nl|'\n'
name|'if'
name|'extra_specs'
op|'.'
name|'cpu_limits'
op|'.'
name|'has_limits'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'cpuAllocation'
op|'='
name|'_get_allocation_info'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'extra_specs'
op|'.'
name|'cpu_limits'
op|','
nl|'\n'
string|"'ns0:ResourceAllocationInfo'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Configure memory information'
nl|'\n'
dedent|''
name|'if'
name|'extra_specs'
op|'.'
name|'memory_limits'
op|'.'
name|'has_limits'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'memoryAllocation'
op|'='
name|'_get_allocation_info'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'extra_specs'
op|'.'
name|'memory_limits'
op|','
nl|'\n'
string|"'ns0:ResourceAllocationInfo'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vif_spec_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vif_info'
name|'in'
name|'vif_infos'
op|':'
newline|'\n'
indent|'        '
name|'vif_spec'
op|'='
name|'_create_vif_spec'
op|'('
name|'client_factory'
op|','
name|'vif_info'
op|')'
newline|'\n'
name|'vif_spec_list'
op|'.'
name|'append'
op|'('
name|'vif_spec'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'device_config_spec'
op|'='
name|'vif_spec_list'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
nl|'\n'
comment|'# add vm-uuid and iface-id.x values for Neutron'
nl|'\n'
name|'extra_config'
op|'='
op|'['
op|']'
newline|'\n'
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|'"nvp.vm-uuid"'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
name|'port_index'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'vif_info'
name|'in'
name|'vif_infos'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vif_info'
op|'['
string|"'iface_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'_iface_id_option_value'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'vif_info'
op|'['
string|"'iface_id'"
op|']'
op|','
nl|'\n'
name|'port_index'
op|')'
op|')'
newline|'\n'
name|'port_index'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'console_delay_seconds'
name|'and'
nl|'\n'
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'console_delay_seconds'
op|'>'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|"'keyboard.typematicMinDelay'"
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'console_delay_seconds'
op|'*'
number|'1000000'
newline|'\n'
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'config_spec'
op|'.'
name|'extraConfig'
op|'='
name|'extra_config'
newline|'\n'
nl|'\n'
comment|"# Set the VM to be 'managed' by 'OpenStack'"
nl|'\n'
name|'managed_by'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:ManagedByInfo'"
op|')'
newline|'\n'
name|'managed_by'
op|'.'
name|'extensionKey'
op|'='
name|'constants'
op|'.'
name|'EXTENSION_KEY'
newline|'\n'
name|'managed_by'
op|'.'
name|'type'
op|'='
name|'constants'
op|'.'
name|'EXTENSION_TYPE_INSTANCE'
newline|'\n'
name|'config_spec'
op|'.'
name|'managedBy'
op|'='
name|'managed_by'
newline|'\n'
nl|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_boot_spec
dedent|''
name|'def'
name|'get_vm_boot_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns updated boot settings for the instance.\n\n    The boot order for the instance will be changed to have the\n    input device as the boot disk.\n    """'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'boot_disk'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualMachineBootOptionsBootableDiskDevice'"
op|')'
newline|'\n'
name|'boot_disk'
op|'.'
name|'deviceKey'
op|'='
name|'device'
op|'.'
name|'key'
newline|'\n'
name|'boot_options'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineBootOptions'"
op|')'
newline|'\n'
name|'boot_options'
op|'.'
name|'bootOrder'
op|'='
op|'['
name|'boot_disk'
op|']'
newline|'\n'
name|'config_spec'
op|'.'
name|'bootOptions'
op|'='
name|'boot_options'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_resize_spec
dedent|''
name|'def'
name|'get_vm_resize_spec'
op|'('
name|'client_factory'
op|','
name|'vcpus'
op|','
name|'memory_mb'
op|','
name|'extra_specs'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides updates for a VM spec."""'
newline|'\n'
name|'resize_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'resize_spec'
op|'.'
name|'numCPUs'
op|'='
name|'vcpus'
newline|'\n'
name|'resize_spec'
op|'.'
name|'memoryMB'
op|'='
name|'memory_mb'
newline|'\n'
name|'resize_spec'
op|'.'
name|'cpuAllocation'
op|'='
name|'_get_allocation_info'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'extra_specs'
op|'.'
name|'cpu_limits'
op|','
nl|'\n'
string|"'ns0:ResourceAllocationInfo'"
op|')'
newline|'\n'
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'        '
name|'resize_spec'
op|'.'
name|'annotation'
op|'='
name|'metadata'
newline|'\n'
dedent|''
name|'return'
name|'resize_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_controller_spec
dedent|''
name|'def'
name|'create_controller_spec'
op|'('
name|'client_factory'
op|','
name|'key'
op|','
nl|'\n'
name|'adapter_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds a Config Spec for the LSI or Bus Logic Controller\'s addition\n    which acts as the controller for the virtual hard disk to be attached\n    to the VM.\n    """'
newline|'\n'
comment|'# Create a controller for the Virtual Hard Disk'
nl|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
name|'if'
name|'adapter_type'
op|'=='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_BUSLOGIC'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualBusLogicController'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'adapter_type'
op|'=='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_LSILOGICSAS'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualLsiLogicSASController'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'adapter_type'
op|'=='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:ParaVirtualSCSIController'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'virtual_controller'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualLsiLogicController'"
op|')'
newline|'\n'
dedent|''
name|'virtual_controller'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'virtual_controller'
op|'.'
name|'busNumber'
op|'='
number|'0'
newline|'\n'
name|'virtual_controller'
op|'.'
name|'sharedBus'
op|'='
string|'"noSharing"'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'virtual_controller'
newline|'\n'
name|'return'
name|'virtual_device_config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|convert_vif_model
dedent|''
name|'def'
name|'convert_vif_model'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Converts standard VIF_MODEL types to the internal VMware ones."""'
newline|'\n'
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualE1000'"
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_E1000E'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualE1000e'"
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_PCNET'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualPCNet32'"
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_SRIOV'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualSriovEthernetCard'"
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_VMXNET'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualVmxnet'"
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'network_model'
op|'.'
name|'VIF_MODEL_VMXNET3'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'VirtualVmxnet3'"
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'ALL_SUPPORTED_NETWORK_DEVICES'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s is not supported.'"
op|')'
op|'%'
name|'name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_vif_spec
dedent|''
name|'def'
name|'_create_vif_spec'
op|'('
name|'client_factory'
op|','
name|'vif_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds a config spec for the addition of a new network\n    adapter to the VM.\n    """'
newline|'\n'
name|'network_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'network_spec'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
nl|'\n'
comment|'# Keep compatible with other Hyper vif model parameter.'
nl|'\n'
name|'vif_info'
op|'['
string|"'vif_model'"
op|']'
op|'='
name|'convert_vif_model'
op|'('
name|'vif_info'
op|'['
string|"'vif_model'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'vif'
op|'='
string|"'ns0:'"
op|'+'
name|'vif_info'
op|'['
string|"'vif_model'"
op|']'
newline|'\n'
name|'net_device'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
name|'vif'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(asomya): Only works on ESXi if the portgroup binding is set to'
nl|'\n'
comment|'# ephemeral. Invalid configuration if set to static and the NIC does'
nl|'\n'
comment|'# not come up on boot if set to dynamic.'
nl|'\n'
name|'network_ref'
op|'='
name|'vif_info'
op|'['
string|"'network_ref'"
op|']'
newline|'\n'
name|'network_name'
op|'='
name|'vif_info'
op|'['
string|"'network_name'"
op|']'
newline|'\n'
name|'mac_address'
op|'='
name|'vif_info'
op|'['
string|"'mac_address'"
op|']'
newline|'\n'
name|'backing'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'network_ref'
name|'and'
name|'network_ref'
op|'['
string|"'type'"
op|']'
op|'=='
string|"'OpaqueNetwork'"
op|':'
newline|'\n'
indent|'        '
name|'backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualEthernetCardOpaqueNetworkBackingInfo'"
op|')'
newline|'\n'
name|'backing'
op|'.'
name|'opaqueNetworkId'
op|'='
name|'network_ref'
op|'['
string|"'network-id'"
op|']'
newline|'\n'
name|'backing'
op|'.'
name|'opaqueNetworkType'
op|'='
name|'network_ref'
op|'['
string|"'network-type'"
op|']'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'network_ref'
name|'and'
nl|'\n'
name|'network_ref'
op|'['
string|"'type'"
op|']'
op|'=='
string|'"DistributedVirtualPortgroup"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualEthernetCardDistributedVirtualPortBackingInfo'"
op|')'
newline|'\n'
name|'portgroup'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:DistributedVirtualSwitchPortConnection'"
op|')'
newline|'\n'
name|'portgroup'
op|'.'
name|'switchUuid'
op|'='
name|'network_ref'
op|'['
string|"'dvsw'"
op|']'
newline|'\n'
name|'portgroup'
op|'.'
name|'portgroupKey'
op|'='
name|'network_ref'
op|'['
string|"'dvpg'"
op|']'
newline|'\n'
name|'backing'
op|'.'
name|'port'
op|'='
name|'portgroup'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualEthernetCardNetworkBackingInfo'"
op|')'
newline|'\n'
name|'backing'
op|'.'
name|'deviceName'
op|'='
name|'network_name'
newline|'\n'
nl|'\n'
dedent|''
name|'connectable_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConnectInfo'"
op|')'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'startConnected'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'allowGuestControl'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'net_device'
op|'.'
name|'connectable'
op|'='
name|'connectable_spec'
newline|'\n'
name|'net_device'
op|'.'
name|'backing'
op|'='
name|'backing'
newline|'\n'
nl|'\n'
comment|'# The Server assigns a Key to the device. Here we pass a -ve temporary key.'
nl|'\n'
comment|"# -ve because actual keys are +ve numbers and we don't"
nl|'\n'
comment|'# want a clash with the key that server might associate with the device'
nl|'\n'
name|'net_device'
op|'.'
name|'key'
op|'='
op|'-'
number|'47'
newline|'\n'
name|'net_device'
op|'.'
name|'addressType'
op|'='
string|'"manual"'
newline|'\n'
name|'net_device'
op|'.'
name|'macAddress'
op|'='
name|'mac_address'
newline|'\n'
name|'net_device'
op|'.'
name|'wakeOnLanEnabled'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'network_spec'
op|'.'
name|'device'
op|'='
name|'net_device'
newline|'\n'
name|'return'
name|'network_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_network_attach_config_spec
dedent|''
name|'def'
name|'get_network_attach_config_spec'
op|'('
name|'client_factory'
op|','
name|'vif_info'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vif attach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'vif_spec'
op|'='
name|'_create_vif_spec'
op|'('
name|'client_factory'
op|','
name|'vif_info'
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
op|'['
name|'vif_spec'
op|']'
newline|'\n'
name|'if'
name|'vif_info'
op|'['
string|"'iface_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'config_spec'
op|'.'
name|'extraConfig'
op|'='
op|'['
name|'_iface_id_option_value'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'vif_info'
op|'['
string|"'iface_id'"
op|']'
op|','
nl|'\n'
name|'index'
op|')'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_network_detach_config_spec
dedent|''
name|'def'
name|'get_network_detach_config_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|','
name|'port_index'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vif detach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"remove"'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'device'
newline|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
op|'['
name|'virtual_device_config'
op|']'
newline|'\n'
comment|'# If a key is already present then it cannot be deleted, only updated.'
nl|'\n'
comment|'# This enables us to reuse this key if there is an additional'
nl|'\n'
comment|'# attachment. The keys need to be preserved. This is due to the fact'
nl|'\n'
comment|'# that there is logic on the ESX that does the network wiring'
nl|'\n'
comment|'# according to these values. If they are changed then this will'
nl|'\n'
comment|'# break networking to and from the interface.'
nl|'\n'
name|'config_spec'
op|'.'
name|'extraConfig'
op|'='
op|'['
name|'_iface_id_option_value'
op|'('
name|'client_factory'
op|','
nl|'\n'
string|"'free'"
op|','
nl|'\n'
name|'port_index'
op|')'
op|']'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_storage_profile_spec
dedent|''
name|'def'
name|'get_storage_profile_spec'
op|'('
name|'session'
op|','
name|'storage_policy'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the vm profile spec configured for storage policy."""'
newline|'\n'
name|'profile_id'
op|'='
name|'pbm'
op|'.'
name|'get_profile_id_by_name'
op|'('
name|'session'
op|','
name|'storage_policy'
op|')'
newline|'\n'
name|'if'
name|'profile_id'
op|':'
newline|'\n'
indent|'        '
name|'client_factory'
op|'='
name|'session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'storage_profile_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualMachineDefinedProfileSpec'"
op|')'
newline|'\n'
name|'storage_profile_spec'
op|'.'
name|'profileId'
op|'='
name|'profile_id'
op|'.'
name|'uniqueId'
newline|'\n'
name|'return'
name|'storage_profile_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_attach_config_spec
dedent|''
dedent|''
name|'def'
name|'get_vmdk_attach_config_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'disk_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_DISK_TYPE'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_size'
op|'='
name|'None'
op|','
nl|'\n'
name|'linked_clone'
op|'='
name|'False'
op|','
nl|'\n'
name|'controller_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'unit_number'
op|'='
name|'None'
op|','
nl|'\n'
name|'device_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_io_limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vmdk attach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'virtual_device_config_spec'
op|'='
name|'_create_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'controller_key'
op|','
name|'disk_type'
op|','
name|'file_path'
op|','
nl|'\n'
name|'disk_size'
op|','
name|'linked_clone'
op|','
nl|'\n'
name|'unit_number'
op|','
name|'device_name'
op|','
name|'disk_io_limits'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config_spec'
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cdrom_attach_config_spec
dedent|''
name|'def'
name|'get_cdrom_attach_config_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'file_path'
op|','
nl|'\n'
name|'controller_key'
op|','
nl|'\n'
name|'cdrom_unit_number'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds and returns the cdrom attach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'virtual_device_config_spec'
op|'='
name|'create_virtual_cdrom_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'controller_key'
op|','
nl|'\n'
name|'file_path'
op|','
nl|'\n'
name|'cdrom_unit_number'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config_spec'
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_detach_config_spec
dedent|''
name|'def'
name|'get_vmdk_detach_config_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|','
nl|'\n'
name|'destroy_disk'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vmdk detach config spec."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'virtual_device_config_spec'
op|'='
name|'detach_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'device'
op|','
nl|'\n'
name|'destroy_disk'
op|')'
newline|'\n'
nl|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config_spec'
op|')'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_extra_config_spec
dedent|''
name|'def'
name|'get_vm_extra_config_spec'
op|'('
name|'client_factory'
op|','
name|'extra_opts'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds extra spec fields from a dictionary."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
comment|'# add the key value pairs'
nl|'\n'
name|'extra_config'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'extra_opts'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
name|'extra_config'
op|'.'
name|'append'
op|'('
name|'opt'
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'extraConfig'
op|'='
name|'extra_config'
newline|'\n'
dedent|''
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_device_capacity
dedent|''
name|'def'
name|'_get_device_capacity'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
comment|'# Devices pre-vSphere-5.5 only reports capacityInKB, which has'
nl|'\n'
comment|'# rounding inaccuracies. Use that only if the more accurate'
nl|'\n'
comment|'# attribute is absent.'
nl|'\n'
indent|'    '
name|'if'
name|'hasattr'
op|'('
name|'device'
op|','
string|"'capacityInBytes'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'device'
op|'.'
name|'capacityInBytes'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'device'
op|'.'
name|'capacityInKB'
op|'*'
name|'units'
op|'.'
name|'Ki'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_device_disk_type
dedent|''
dedent|''
name|'def'
name|'_get_device_disk_type'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'getattr'
op|'('
name|'device'
op|'.'
name|'backing'
op|','
string|"'thinProvisioned'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'constants'
op|'.'
name|'DISK_TYPE_THIN'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'getattr'
op|'('
name|'device'
op|'.'
name|'backing'
op|','
string|"'eagerlyScrub'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'constants'
op|'.'
name|'DISK_TYPE_EAGER_ZEROED_THICK'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'constants'
op|'.'
name|'DEFAULT_DISK_TYPE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vmdk_info'
op|'('
name|'session'
op|','
name|'vm_ref'
op|','
name|'uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns information for the primary VMDK attached to the given VM."""'
newline|'\n'
name|'hardware_devices'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
string|'"config.hardware.device"'
op|')'
newline|'\n'
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
dedent|''
name|'vmdk_file_path'
op|'='
name|'None'
newline|'\n'
name|'vmdk_controller_key'
op|'='
name|'None'
newline|'\n'
name|'disk_type'
op|'='
name|'None'
newline|'\n'
name|'capacity_in_bytes'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Determine if we need to get the details of the root disk'
nl|'\n'
name|'root_disk'
op|'='
name|'None'
newline|'\n'
name|'root_device'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'uuid'
op|':'
newline|'\n'
indent|'        '
name|'root_disk'
op|'='
string|"'%s.vmdk'"
op|'%'
name|'uuid'
newline|'\n'
dedent|''
name|'vmdk_device'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'adapter_type_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDiskFlatVer2BackingInfo"'
op|':'
newline|'\n'
indent|'                '
name|'path'
op|'='
name|'ds_obj'
op|'.'
name|'DatastorePath'
op|'.'
name|'parse'
op|'('
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|')'
newline|'\n'
name|'if'
name|'root_disk'
name|'and'
name|'path'
op|'.'
name|'basename'
op|'=='
name|'root_disk'
op|':'
newline|'\n'
indent|'                    '
name|'root_device'
op|'='
name|'device'
newline|'\n'
dedent|''
name|'vmdk_device'
op|'='
name|'device'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualLsiLogicController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualBusLogicController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_BUSLOGIC'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualIDEController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_IDE'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualLsiLogicSASController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_LSILOGICSAS'
newline|'\n'
dedent|''
name|'elif'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ParaVirtualSCSIController"'
op|':'
newline|'\n'
indent|'            '
name|'adapter_type_dict'
op|'['
name|'device'
op|'.'
name|'key'
op|']'
op|'='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'root_disk'
op|':'
newline|'\n'
indent|'        '
name|'vmdk_device'
op|'='
name|'root_device'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vmdk_device'
op|':'
newline|'\n'
indent|'        '
name|'vmdk_file_path'
op|'='
name|'vmdk_device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
newline|'\n'
name|'capacity_in_bytes'
op|'='
name|'_get_device_capacity'
op|'('
name|'vmdk_device'
op|')'
newline|'\n'
name|'vmdk_controller_key'
op|'='
name|'vmdk_device'
op|'.'
name|'controllerKey'
newline|'\n'
name|'disk_type'
op|'='
name|'_get_device_disk_type'
op|'('
name|'vmdk_device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'adapter_type'
op|'='
name|'adapter_type_dict'
op|'.'
name|'get'
op|'('
name|'vmdk_controller_key'
op|')'
newline|'\n'
name|'return'
name|'VmdkInfo'
op|'('
name|'vmdk_file_path'
op|','
name|'adapter_type'
op|','
name|'disk_type'
op|','
nl|'\n'
name|'capacity_in_bytes'
op|','
name|'vmdk_device'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|scsi_controller_classes
dedent|''
name|'scsi_controller_classes'
op|'='
op|'{'
nl|'\n'
string|"'ParaVirtualSCSIController'"
op|':'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
op|','
nl|'\n'
string|"'VirtualLsiLogicController'"
op|':'
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
op|','
nl|'\n'
string|"'VirtualLsiLogicSASController'"
op|':'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_LSILOGICSAS'
op|','
nl|'\n'
string|"'VirtualBusLogicController'"
op|':'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_scsi_adapter_type
name|'def'
name|'get_scsi_adapter_type'
op|'('
name|'hardware_devices'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Selects a proper iscsi adapter type from the existing\n       hardware devices\n    """'
newline|'\n'
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
name|'in'
name|'scsi_controller_classes'
op|':'
newline|'\n'
comment|'# find the controllers which still have available slots'
nl|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'device'
op|'.'
name|'device'
op|')'
op|'<'
name|'constants'
op|'.'
name|'SCSI_MAX_CONNECT_NUMBER'
op|':'
newline|'\n'
comment|'# return the first match one'
nl|'\n'
indent|'                '
name|'return'
name|'scsi_controller_classes'
op|'['
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'StorageError'
op|'('
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"Unable to find iSCSI Target"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_controller_slot
dedent|''
name|'def'
name|'_find_controller_slot'
op|'('
name|'controller_keys'
op|','
name|'taken'
op|','
name|'max_unit_number'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'controller_key'
name|'in'
name|'controller_keys'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'unit_number'
name|'in'
name|'range'
op|'('
name|'max_unit_number'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'unit_number'
name|'not'
name|'in'
name|'taken'
op|'.'
name|'get'
op|'('
name|'controller_key'
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'controller_key'
op|','
name|'unit_number'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_ide_controller
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_is_ide_controller'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|"'VirtualIDEController'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_scsi_controller
dedent|''
name|'def'
name|'_is_scsi_controller'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
name|'in'
op|'['
string|"'VirtualLsiLogicController'"
op|','
nl|'\n'
string|"'VirtualLsiLogicSASController'"
op|','
nl|'\n'
string|"'VirtualBusLogicController'"
op|','
nl|'\n'
string|"'ParaVirtualSCSIController'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_allocated_slots
dedent|''
name|'def'
name|'_find_allocated_slots'
op|'('
name|'devices'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return dictionary which maps controller_key to list of allocated unit\n    numbers for that controller_key.\n    """'
newline|'\n'
name|'taken'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'device'
op|','
string|"'controllerKey'"
op|')'
name|'and'
name|'hasattr'
op|'('
name|'device'
op|','
string|"'unitNumber'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unit_numbers'
op|'='
name|'taken'
op|'.'
name|'setdefault'
op|'('
name|'device'
op|'.'
name|'controllerKey'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'unit_numbers'
op|'.'
name|'append'
op|'('
name|'device'
op|'.'
name|'unitNumber'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'_is_scsi_controller'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
comment|'# the SCSI controller sits on its own bus'
nl|'\n'
indent|'            '
name|'unit_numbers'
op|'='
name|'taken'
op|'.'
name|'setdefault'
op|'('
name|'device'
op|'.'
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'unit_numbers'
op|'.'
name|'append'
op|'('
name|'device'
op|'.'
name|'scsiCtlrUnitNumber'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'taken'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|allocate_controller_key_and_unit_number
dedent|''
name|'def'
name|'allocate_controller_key_and_unit_number'
op|'('
name|'client_factory'
op|','
name|'devices'
op|','
nl|'\n'
name|'adapter_type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This function inspects the current set of hardware devices and returns\n    controller_key and unit_number that can be used for attaching a new virtual\n    disk to adapter with the given adapter_type.\n    """'
newline|'\n'
name|'if'
name|'devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'devices'
op|'='
name|'devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'taken'
op|'='
name|'_find_allocated_slots'
op|'('
name|'devices'
op|')'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'adapter_type'
op|'=='
name|'constants'
op|'.'
name|'ADAPTER_TYPE_IDE'
op|':'
newline|'\n'
indent|'        '
name|'ide_keys'
op|'='
op|'['
name|'dev'
op|'.'
name|'key'
name|'for'
name|'dev'
name|'in'
name|'devices'
name|'if'
name|'_is_ide_controller'
op|'('
name|'dev'
op|')'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'_find_controller_slot'
op|'('
name|'ide_keys'
op|','
name|'taken'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'adapter_type'
name|'in'
op|'['
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_LSILOGICSAS'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_BUSLOGIC'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'scsi_keys'
op|'='
op|'['
name|'dev'
op|'.'
name|'key'
name|'for'
name|'dev'
name|'in'
name|'devices'
name|'if'
name|'_is_scsi_controller'
op|'('
name|'dev'
op|')'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'_find_controller_slot'
op|'('
name|'scsi_keys'
op|','
name|'taken'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ret'
op|'['
number|'0'
op|']'
op|','
name|'ret'
op|'['
number|'1'
op|']'
op|','
name|'None'
newline|'\n'
nl|'\n'
comment|'# create new controller with the specified type and return its spec'
nl|'\n'
dedent|''
name|'controller_key'
op|'='
op|'-'
number|'101'
newline|'\n'
name|'controller_spec'
op|'='
name|'create_controller_spec'
op|'('
name|'client_factory'
op|','
name|'controller_key'
op|','
nl|'\n'
name|'adapter_type'
op|')'
newline|'\n'
name|'return'
name|'controller_key'
op|','
number|'0'
op|','
name|'controller_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_rdm_disk
dedent|''
name|'def'
name|'get_rdm_disk'
op|'('
name|'hardware_devices'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets the RDM disk key."""'
newline|'\n'
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|'"VirtualDiskRawDiskMappingVer1BackingInfo"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'lunUuid'
op|'=='
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_create_spec
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vmdk_create_spec'
op|'('
name|'client_factory'
op|','
name|'size_in_kb'
op|','
nl|'\n'
name|'adapter_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
op|','
nl|'\n'
name|'disk_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_DISK_TYPE'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the virtual disk create spec."""'
newline|'\n'
name|'create_vmdk_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:FileBackedVirtualDiskSpec'"
op|')'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'adapterType'
op|'='
name|'get_vmdk_adapter_type'
op|'('
name|'adapter_type'
op|')'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'diskType'
op|'='
name|'disk_type'
newline|'\n'
name|'create_vmdk_spec'
op|'.'
name|'capacityKb'
op|'='
name|'size_in_kb'
newline|'\n'
name|'return'
name|'create_vmdk_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_virtual_cdrom_spec
dedent|''
name|'def'
name|'create_virtual_cdrom_spec'
op|'('
name|'client_factory'
op|','
nl|'\n'
name|'datastore'
op|','
nl|'\n'
name|'controller_key'
op|','
nl|'\n'
name|'file_path'
op|','
nl|'\n'
name|'cdrom_unit_number'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds spec for the creation of a new Virtual CDROM to the VM."""'
newline|'\n'
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'config_spec'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
nl|'\n'
name|'cdrom'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualCdrom'"
op|')'
newline|'\n'
nl|'\n'
name|'cdrom_device_backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualCdromIsoBackingInfo'"
op|')'
newline|'\n'
name|'cdrom_device_backing'
op|'.'
name|'datastore'
op|'='
name|'datastore'
newline|'\n'
name|'cdrom_device_backing'
op|'.'
name|'fileName'
op|'='
name|'file_path'
newline|'\n'
nl|'\n'
name|'cdrom'
op|'.'
name|'backing'
op|'='
name|'cdrom_device_backing'
newline|'\n'
name|'cdrom'
op|'.'
name|'controllerKey'
op|'='
name|'controller_key'
newline|'\n'
name|'cdrom'
op|'.'
name|'unitNumber'
op|'='
name|'cdrom_unit_number'
newline|'\n'
name|'cdrom'
op|'.'
name|'key'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
name|'connectable_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConnectInfo'"
op|')'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'startConnected'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'allowGuestControl'
op|'='
name|'False'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'cdrom'
op|'.'
name|'connectable'
op|'='
name|'connectable_spec'
newline|'\n'
nl|'\n'
name|'config_spec'
op|'.'
name|'device'
op|'='
name|'cdrom'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_virtual_disk_spec
dedent|''
name|'def'
name|'_create_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
name|'controller_key'
op|','
nl|'\n'
name|'disk_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_DISK_TYPE'
op|','
nl|'\n'
name|'file_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_size'
op|'='
name|'None'
op|','
nl|'\n'
name|'linked_clone'
op|'='
name|'False'
op|','
nl|'\n'
name|'unit_number'
op|'='
name|'None'
op|','
nl|'\n'
name|'device_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_io_limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds spec for the creation of a new/ attaching of an already existing\n    Virtual Disk to the VM.\n    """'
newline|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"add"'
newline|'\n'
name|'if'
op|'('
name|'file_path'
name|'is'
name|'None'
op|')'
name|'or'
name|'linked_clone'
op|':'
newline|'\n'
indent|'        '
name|'virtual_device_config'
op|'.'
name|'fileOperation'
op|'='
string|'"create"'
newline|'\n'
nl|'\n'
dedent|''
name|'virtual_disk'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDisk'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_type'
op|'=='
string|'"rdm"'
name|'or'
name|'disk_type'
op|'=='
string|'"rdmp"'
op|':'
newline|'\n'
indent|'        '
name|'disk_file_backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDiskRawDiskMappingVer1BackingInfo'"
op|')'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'compatibilityMode'
op|'='
string|'"virtualMode"'
name|'if'
name|'disk_type'
op|'=='
string|'"rdm"'
name|'else'
string|'"physicalMode"'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'diskMode'
op|'='
string|'"independent_persistent"'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'deviceName'
op|'='
name|'device_name'
name|'or'
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'disk_file_backing'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDiskFlatVer2BackingInfo'"
op|')'
newline|'\n'
name|'disk_file_backing'
op|'.'
name|'diskMode'
op|'='
string|'"persistent"'
newline|'\n'
name|'if'
name|'disk_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_TYPE_THIN'
op|':'
newline|'\n'
indent|'            '
name|'disk_file_backing'
op|'.'
name|'thinProvisioned'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'disk_type'
op|'=='
name|'constants'
op|'.'
name|'DISK_TYPE_EAGER_ZEROED_THICK'
op|':'
newline|'\n'
indent|'                '
name|'disk_file_backing'
op|'.'
name|'eagerlyScrub'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'disk_file_backing'
op|'.'
name|'fileName'
op|'='
name|'file_path'
name|'or'
string|'""'
newline|'\n'
nl|'\n'
name|'connectable_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualDeviceConnectInfo'"
op|')'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'startConnected'
op|'='
name|'True'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'allowGuestControl'
op|'='
name|'False'
newline|'\n'
name|'connectable_spec'
op|'.'
name|'connected'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'linked_clone'
op|':'
newline|'\n'
indent|'        '
name|'virtual_disk'
op|'.'
name|'backing'
op|'='
name|'disk_file_backing'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'virtual_disk'
op|'.'
name|'backing'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'disk_file_backing'
op|')'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|'='
string|'""'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'backing'
op|'.'
name|'parent'
op|'='
name|'disk_file_backing'
newline|'\n'
dedent|''
name|'virtual_disk'
op|'.'
name|'connectable'
op|'='
name|'connectable_spec'
newline|'\n'
nl|'\n'
comment|'# The Server assigns a Key to the device. Here we pass a -ve random key.'
nl|'\n'
comment|"# -ve because actual keys are +ve numbers and we don't"
nl|'\n'
comment|'# want a clash with the key that server might associate with the device'
nl|'\n'
name|'virtual_disk'
op|'.'
name|'key'
op|'='
op|'-'
number|'100'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'controllerKey'
op|'='
name|'controller_key'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'unitNumber'
op|'='
name|'unit_number'
name|'or'
number|'0'
newline|'\n'
name|'virtual_disk'
op|'.'
name|'capacityInKB'
op|'='
name|'disk_size'
name|'or'
number|'0'
newline|'\n'
nl|'\n'
name|'if'
name|'disk_io_limits'
name|'and'
name|'disk_io_limits'
op|'.'
name|'has_limits'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'virtual_disk'
op|'.'
name|'storageIOAllocation'
op|'='
name|'_get_allocation_info'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'disk_io_limits'
op|','
nl|'\n'
string|"'ns0:StorageIOAllocationInfo'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'virtual_disk'
newline|'\n'
nl|'\n'
name|'return'
name|'virtual_device_config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|detach_virtual_disk_spec
dedent|''
name|'def'
name|'detach_virtual_disk_spec'
op|'('
name|'client_factory'
op|','
name|'device'
op|','
name|'destroy_disk'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds spec for the detach of an already existing Virtual Disk from VM.\n    """'
newline|'\n'
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"remove"'
newline|'\n'
name|'if'
name|'destroy_disk'
op|':'
newline|'\n'
indent|'        '
name|'virtual_device_config'
op|'.'
name|'fileOperation'
op|'='
string|'"destroy"'
newline|'\n'
dedent|''
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'device'
newline|'\n'
nl|'\n'
name|'return'
name|'virtual_device_config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clone_vm_spec
dedent|''
name|'def'
name|'clone_vm_spec'
op|'('
name|'client_factory'
op|','
name|'location'
op|','
nl|'\n'
name|'power_on'
op|'='
name|'False'
op|','
name|'snapshot'
op|'='
name|'None'
op|','
name|'template'
op|'='
name|'False'
op|','
name|'config'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the VM clone spec."""'
newline|'\n'
name|'clone_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineCloneSpec'"
op|')'
newline|'\n'
name|'clone_spec'
op|'.'
name|'location'
op|'='
name|'location'
newline|'\n'
name|'clone_spec'
op|'.'
name|'powerOn'
op|'='
name|'power_on'
newline|'\n'
name|'if'
name|'snapshot'
op|':'
newline|'\n'
indent|'        '
name|'clone_spec'
op|'.'
name|'snapshot'
op|'='
name|'snapshot'
newline|'\n'
dedent|''
name|'if'
name|'config'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'clone_spec'
op|'.'
name|'config'
op|'='
name|'config'
newline|'\n'
dedent|''
name|'clone_spec'
op|'.'
name|'template'
op|'='
name|'template'
newline|'\n'
name|'return'
name|'clone_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|relocate_vm_spec
dedent|''
name|'def'
name|'relocate_vm_spec'
op|'('
name|'client_factory'
op|','
name|'datastore'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_move_type'
op|'='
string|'"moveAllDiskBackingsAndAllowSharing"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the VM relocation spec."""'
newline|'\n'
name|'rel_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineRelocateSpec'"
op|')'
newline|'\n'
name|'rel_spec'
op|'.'
name|'datastore'
op|'='
name|'datastore'
newline|'\n'
name|'rel_spec'
op|'.'
name|'diskMoveType'
op|'='
name|'disk_move_type'
newline|'\n'
name|'if'
name|'host'
op|':'
newline|'\n'
indent|'        '
name|'rel_spec'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
dedent|''
name|'return'
name|'rel_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_machine_id_change_spec
dedent|''
name|'def'
name|'get_machine_id_change_spec'
op|'('
name|'client_factory'
op|','
name|'machine_id_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the machine id change config spec."""'
newline|'\n'
name|'virtual_machine_config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'opt'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt'
op|'.'
name|'key'
op|'='
string|'"machine.id"'
newline|'\n'
name|'opt'
op|'.'
name|'value'
op|'='
name|'machine_id_str'
newline|'\n'
name|'virtual_machine_config_spec'
op|'.'
name|'extraConfig'
op|'='
op|'['
name|'opt'
op|']'
newline|'\n'
name|'return'
name|'virtual_machine_config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_add_vswitch_port_group_spec
dedent|''
name|'def'
name|'get_add_vswitch_port_group_spec'
op|'('
name|'client_factory'
op|','
name|'vswitch_name'
op|','
nl|'\n'
name|'port_group_name'
op|','
name|'vlan_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the virtual switch port group add spec."""'
newline|'\n'
name|'vswitch_port_group_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostPortGroupSpec'"
op|')'
newline|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'name'
op|'='
name|'port_group_name'
newline|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'vswitchName'
op|'='
name|'vswitch_name'
newline|'\n'
nl|'\n'
comment|'# VLAN ID of 0 means that VLAN tagging is not to be done for the network.'
nl|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'vlanId'
op|'='
name|'int'
op|'('
name|'vlan_id'
op|')'
newline|'\n'
nl|'\n'
name|'policy'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostNetworkPolicy'"
op|')'
newline|'\n'
name|'nicteaming'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:HostNicTeamingPolicy'"
op|')'
newline|'\n'
name|'nicteaming'
op|'.'
name|'notifySwitches'
op|'='
name|'True'
newline|'\n'
name|'policy'
op|'.'
name|'nicTeaming'
op|'='
name|'nicteaming'
newline|'\n'
nl|'\n'
name|'vswitch_port_group_spec'
op|'.'
name|'policy'
op|'='
name|'policy'
newline|'\n'
name|'return'
name|'vswitch_port_group_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vnc_config_spec
dedent|''
name|'def'
name|'get_vnc_config_spec'
op|'('
name|'client_factory'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Builds the vnc config spec."""'
newline|'\n'
name|'virtual_machine_config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
nl|'\n'
name|'opt_enabled'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt_enabled'
op|'.'
name|'key'
op|'='
string|'"RemoteDisplay.vnc.enabled"'
newline|'\n'
name|'opt_enabled'
op|'.'
name|'value'
op|'='
string|'"true"'
newline|'\n'
name|'opt_port'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt_port'
op|'.'
name|'key'
op|'='
string|'"RemoteDisplay.vnc.port"'
newline|'\n'
name|'opt_port'
op|'.'
name|'value'
op|'='
name|'port'
newline|'\n'
name|'opt_keymap'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:OptionValue'"
op|')'
newline|'\n'
name|'opt_keymap'
op|'.'
name|'key'
op|'='
string|'"RemoteDisplay.vnc.keyMap"'
newline|'\n'
name|'opt_keymap'
op|'.'
name|'value'
op|'='
name|'CONF'
op|'.'
name|'vnc'
op|'.'
name|'keymap'
newline|'\n'
nl|'\n'
name|'extras'
op|'='
op|'['
name|'opt_enabled'
op|','
name|'opt_port'
op|','
name|'opt_keymap'
op|']'
newline|'\n'
nl|'\n'
name|'virtual_machine_config_spec'
op|'.'
name|'extraConfig'
op|'='
name|'extras'
newline|'\n'
name|'return'
name|'virtual_machine_config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vnc_port
dedent|''
name|'def'
name|'get_vnc_port'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return VNC port for an VM or None if there is no available port."""'
newline|'\n'
name|'min_port'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'vnc_port'
newline|'\n'
name|'port_total'
op|'='
name|'CONF'
op|'.'
name|'vmware'
op|'.'
name|'vnc_port_total'
newline|'\n'
name|'allocated_ports'
op|'='
name|'_get_allocated_vnc_ports'
op|'('
name|'session'
op|')'
newline|'\n'
name|'max_port'
op|'='
name|'min_port'
op|'+'
name|'port_total'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'range'
op|'('
name|'min_port'
op|','
name|'max_port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'port'
name|'not'
name|'in'
name|'allocated_ports'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'port'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'ConsolePortRangeExhausted'
op|'('
name|'min_port'
op|'='
name|'min_port'
op|','
nl|'\n'
name|'max_port'
op|'='
name|'max_port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_allocated_vnc_ports
dedent|''
name|'def'
name|'_get_allocated_vnc_ports'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return an integer set of all allocated VNC ports."""'
newline|'\n'
comment|'# TODO(rgerganov): bug #1256944'
nl|'\n'
comment|'# The VNC port should be unique per host, not per vCenter'
nl|'\n'
name|'vnc_ports'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
name|'VNC_CONFIG_KEY'
op|']'
op|')'
newline|'\n'
name|'while'
name|'result'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'obj'
name|'in'
name|'result'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'obj'
op|','
string|"'propSet'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'dynamic_prop'
op|'='
name|'obj'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
newline|'\n'
name|'option_value'
op|'='
name|'dynamic_prop'
op|'.'
name|'val'
newline|'\n'
name|'vnc_port'
op|'='
name|'option_value'
op|'.'
name|'value'
newline|'\n'
name|'vnc_ports'
op|'.'
name|'add'
op|'('
name|'int'
op|'('
name|'vnc_port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'continue_retrieval'"
op|','
nl|'\n'
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vnc_ports'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_for_value
dedent|''
name|'def'
name|'_get_object_for_value'
op|'('
name|'results'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'object'
name|'in'
name|'results'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'object'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'object'
op|'.'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_for_optionvalue
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_object_for_optionvalue'
op|'('
name|'results'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'object'
name|'in'
name|'results'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'object'
op|','
string|'"propSet"'
op|')'
name|'and'
name|'object'
op|'.'
name|'propSet'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'object'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'.'
name|'value'
op|'=='
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'object'
op|'.'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_object_from_results
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'results'
op|','
name|'value'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'while'
name|'results'
op|':'
newline|'\n'
indent|'        '
name|'object'
op|'='
name|'func'
op|'('
name|'results'
op|','
name|'value'
op|')'
newline|'\n'
name|'if'
name|'object'
op|':'
newline|'\n'
indent|'            '
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'cancel_retrieval'"
op|','
nl|'\n'
name|'results'
op|')'
newline|'\n'
name|'return'
name|'object'
newline|'\n'
dedent|''
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'continue_retrieval'"
op|','
nl|'\n'
name|'results'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_name
dedent|''
dedent|''
name|'def'
name|'_get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM with the name specified."""'
newline|'\n'
name|'vms'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'vms'
op|','
name|'vm_name'
op|','
nl|'\n'
name|'_get_object_for_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'vm_ref_cache_from_name'
newline|'\n'
DECL|function|get_vm_ref_from_name
name|'def'
name|'get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
name|'_get_vm_ref_from_vm_uuid'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'vm_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_uuid
dedent|''
name|'def'
name|'_get_vm_ref_from_uuid'
op|'('
name|'session'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM with the uuid specified.\n\n    This method reads all of the names of the VM\'s that are running\n    on the backend, then it filters locally the matching\n    instance_uuid. It is far more optimal to use\n    _get_vm_ref_from_vm_uuid.\n    """'
newline|'\n'
name|'vms'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'vms'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'_get_object_for_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_vm_uuid
dedent|''
name|'def'
name|'_get_vm_ref_from_vm_uuid'
op|'('
name|'session'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM.\n\n    The method will make use of FindAllByUuid to get the VM reference.\n    This method finds all VM\'s on the backend that match the\n    instance_uuid, more specifically all VM\'s on the backend that have\n    \'config_spec.instanceUuid\' set to \'instance_uuid\'.\n    """'
newline|'\n'
name|'vm_refs'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"FindAllByUuid"'
op|','
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|'.'
name|'service_content'
op|'.'
name|'searchIndex'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'vmSearch'
op|'='
name|'True'
op|','
nl|'\n'
name|'instanceUuid'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'vm_refs'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vm_refs'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_ref_from_extraconfig
dedent|''
dedent|''
name|'def'
name|'_get_vm_ref_from_extraconfig'
op|'('
name|'session'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM with the uuid specified."""'
newline|'\n'
name|'vms'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"VirtualMachine"'
op|','
op|'['
string|'\'config.extraConfig["nvp.vm-uuid"]\''
op|']'
op|')'
newline|'\n'
name|'return'
name|'_get_object_from_results'
op|'('
name|'session'
op|','
name|'vms'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'_get_object_for_optionvalue'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'vm_ref_cache_from_instance'
newline|'\n'
DECL|function|get_vm_ref
name|'def'
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the VM through uuid or vm name."""'
newline|'\n'
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'vm_ref'
op|'='
op|'('
name|'search_vm_ref_by_identifier'
op|'('
name|'session'
op|','
name|'uuid'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_name'
op|'('
name|'session'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|search_vm_ref_by_identifier
dedent|''
name|'def'
name|'search_vm_ref_by_identifier'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Searches VM reference using the identifier.\n\n    This method is primarily meant to separate out part of the logic for\n    vm_ref search that could be use directly in the special case of\n    migrating the instance. For querying VM linked to an instance always\n    use get_vm_ref instead.\n    """'
newline|'\n'
name|'vm_ref'
op|'='
op|'('
name|'_get_vm_ref_from_vm_uuid'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_extraconfig'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
name|'or'
nl|'\n'
name|'_get_vm_ref_from_uuid'
op|'('
name|'session'
op|','
name|'identifier'
op|')'
op|')'
newline|'\n'
name|'return'
name|'vm_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_ref_for_vm
dedent|''
name|'def'
name|'get_host_ref_for_vm'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a MoRef to the ESXi host currently running an instance."""'
newline|'\n'
nl|'\n'
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
string|'"runtime.host"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_name_for_vm
dedent|''
name|'def'
name|'get_host_name_for_vm'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the hostname of the ESXi host currently running an instance."""'
newline|'\n'
nl|'\n'
name|'host_ref'
op|'='
name|'get_host_ref_for_vm'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'host_ref'
op|','
string|'"HostSystem"'
op|','
string|'"name"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_state
dedent|''
name|'def'
name|'get_vm_state'
op|'('
name|'session'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
name|'vm_state'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
string|'"runtime.powerState"'
op|')'
newline|'\n'
name|'return'
name|'vm_state'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_stats_from_cluster
dedent|''
name|'def'
name|'get_stats_from_cluster'
op|'('
name|'session'
op|','
name|'cluster'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the aggregate resource stats of a cluster."""'
newline|'\n'
name|'vcpus'
op|'='
number|'0'
newline|'\n'
name|'mem_info'
op|'='
op|'{'
string|"'total'"
op|':'
number|'0'
op|','
string|"'free'"
op|':'
number|'0'
op|'}'
newline|'\n'
comment|'# Get the Host and Resource Pool Managed Object Refs'
nl|'\n'
name|'prop_dict'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_properties"'
op|','
nl|'\n'
name|'cluster'
op|','
string|'"ClusterComputeResource"'
op|','
nl|'\n'
op|'['
string|'"host"'
op|','
string|'"resourcePool"'
op|']'
op|')'
newline|'\n'
name|'if'
name|'prop_dict'
op|':'
newline|'\n'
indent|'        '
name|'host_ret'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
newline|'\n'
name|'if'
name|'host_ret'
op|':'
newline|'\n'
indent|'            '
name|'host_mors'
op|'='
name|'host_ret'
op|'.'
name|'ManagedObjectReference'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_properties_for_a_collection_of_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|','
name|'host_mors'
op|','
nl|'\n'
op|'['
string|'"summary.hardware"'
op|','
string|'"summary.runtime"'
op|']'
op|')'
newline|'\n'
name|'for'
name|'obj'
name|'in'
name|'result'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'                '
name|'hardware_summary'
op|'='
name|'obj'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
newline|'\n'
name|'runtime_summary'
op|'='
name|'obj'
op|'.'
name|'propSet'
op|'['
number|'1'
op|']'
op|'.'
name|'val'
newline|'\n'
name|'if'
op|'('
name|'runtime_summary'
op|'.'
name|'inMaintenanceMode'
name|'is'
name|'False'
name|'and'
nl|'\n'
name|'runtime_summary'
op|'.'
name|'connectionState'
op|'=='
string|'"connected"'
op|')'
op|':'
newline|'\n'
comment|'# Total vcpus is the sum of all pCPUs of individual hosts'
nl|'\n'
comment|'# The overcommitment ratio is factored in by the scheduler'
nl|'\n'
indent|'                    '
name|'vcpus'
op|'+='
name|'hardware_summary'
op|'.'
name|'numCpuThreads'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'res_mor'
op|'='
name|'prop_dict'
op|'.'
name|'get'
op|'('
string|"'resourcePool'"
op|')'
newline|'\n'
name|'if'
name|'res_mor'
op|':'
newline|'\n'
indent|'            '
name|'res_usage'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'res_mor'
op|','
string|'"ResourcePool"'
op|','
string|'"summary.runtime.memory"'
op|')'
newline|'\n'
name|'if'
name|'res_usage'
op|':'
newline|'\n'
comment|"# maxUsage is the memory limit of the cluster available to VM's"
nl|'\n'
indent|'                '
name|'mem_info'
op|'['
string|"'total'"
op|']'
op|'='
name|'int'
op|'('
name|'res_usage'
op|'.'
name|'maxUsage'
op|'/'
name|'units'
op|'.'
name|'Mi'
op|')'
newline|'\n'
comment|"# overallUsage is the hypervisor's view of memory usage by VM's"
nl|'\n'
name|'consumed'
op|'='
name|'int'
op|'('
name|'res_usage'
op|'.'
name|'overallUsage'
op|'/'
name|'units'
op|'.'
name|'Mi'
op|')'
newline|'\n'
name|'mem_info'
op|'['
string|"'free'"
op|']'
op|'='
name|'mem_info'
op|'['
string|"'total'"
op|']'
op|'-'
name|'consumed'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'stats'
op|'='
op|'{'
string|"'vcpus'"
op|':'
name|'vcpus'
op|','
string|"'mem'"
op|':'
name|'mem_info'
op|'}'
newline|'\n'
name|'return'
name|'stats'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_host_ref
dedent|''
name|'def'
name|'get_host_ref'
op|'('
name|'session'
op|','
name|'cluster'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to a host within the cluster specified."""'
newline|'\n'
name|'if'
name|'cluster'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"HostSystem"'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'cancel_retrieval'"
op|','
nl|'\n'
name|'results'
op|')'
newline|'\n'
name|'host_mor'
op|'='
name|'results'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|'.'
name|'obj'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'host_ret'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'cluster'
op|','
string|'"ClusterComputeResource"'
op|','
nl|'\n'
string|'"host"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'host_ret'
name|'or'
name|'not'
name|'host_ret'
op|'.'
name|'ManagedObjectReference'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'No host available on cluster'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'host_mor'
op|'='
name|'host_ret'
op|'.'
name|'ManagedObjectReference'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'host_mor'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|propset_dict
dedent|''
name|'def'
name|'propset_dict'
op|'('
name|'propset'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turn a propset list into a dictionary\n\n    PropSet is an optional attribute on ObjectContent objects\n    that are returned by the VMware API.\n\n    You can read more about these at:\n    | http://pubs.vmware.com/vsphere-51/index.jsp\n    |    #com.vmware.wssdk.apiref.doc/\n    |        vmodl.query.PropertyCollector.ObjectContent.html\n\n    :param propset: a property "set" from ObjectContent\n    :return: dictionary representing property set\n    """'
newline|'\n'
name|'if'
name|'propset'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
name|'prop'
op|'.'
name|'name'
op|':'
name|'prop'
op|'.'
name|'val'
name|'for'
name|'prop'
name|'in'
name|'propset'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_backed_disk_device
dedent|''
name|'def'
name|'get_vmdk_backed_disk_device'
op|'('
name|'hardware_devices'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|'"VirtualDiskFlatVer2BackingInfo"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'uuid'
op|'=='
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_volume_disk
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_vmdk_volume_disk'
op|'('
name|'hardware_devices'
op|','
name|'path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'path'
name|'or'
name|'path'
op|'=='
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_res_pool_ref
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_res_pool_ref'
op|'('
name|'session'
op|','
name|'cluster'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the resource pool."""'
newline|'\n'
comment|'# Get the root resource pool of the cluster'
nl|'\n'
name|'res_pool_ref'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'cluster'
op|','
nl|'\n'
string|'"ClusterComputeResource"'
op|','
nl|'\n'
string|'"resourcePool"'
op|')'
newline|'\n'
name|'return'
name|'res_pool_ref'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_cluster_mors
dedent|''
name|'def'
name|'get_all_cluster_mors'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all the clusters in the vCenter."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ClusterComputeResource"'
op|','
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'cancel_retrieval'"
op|','
nl|'\n'
name|'results'
op|')'
newline|'\n'
name|'return'
name|'results'
op|'.'
name|'objects'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Failed to get cluster references %s"'
op|')'
op|','
name|'excep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_res_pool_mors
dedent|''
dedent|''
name|'def'
name|'get_all_res_pool_mors'
op|'('
name|'session'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all the resource pools in the vCenter."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"ResourcePool"'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'cancel_retrieval'"
op|','
nl|'\n'
name|'results'
op|')'
newline|'\n'
name|'return'
name|'results'
op|'.'
name|'objects'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'excep'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Failed to get resource pool references %s"'
op|')'
op|','
name|'excep'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dynamic_property_mor
dedent|''
dedent|''
name|'def'
name|'get_dynamic_property_mor'
op|'('
name|'session'
op|','
name|'mor_ref'
op|','
name|'attribute'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the value of an attribute for a given managed object."""'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
string|'"get_dynamic_property"'
op|','
nl|'\n'
name|'mor_ref'
op|','
name|'mor_ref'
op|'.'
name|'_type'
op|','
name|'attribute'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_entity_mor
dedent|''
name|'def'
name|'find_entity_mor'
op|'('
name|'entity_list'
op|','
name|'entity_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns managed object ref for given cluster or resource pool name."""'
newline|'\n'
name|'return'
op|'['
name|'mor'
name|'for'
name|'mor'
name|'in'
name|'entity_list'
name|'if'
op|'('
name|'hasattr'
op|'('
name|'mor'
op|','
string|"'propSet'"
op|')'
name|'and'
nl|'\n'
name|'mor'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|'=='
name|'entity_name'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_cluster_refs_by_name
dedent|''
name|'def'
name|'get_all_cluster_refs_by_name'
op|'('
name|'session'
op|','
name|'path_list'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get reference to the Cluster, ResourcePool with the path specified.\n\n    The path is the display name. This can be the full path as well.\n    The input will have the list of clusters and resource pool names\n    """'
newline|'\n'
name|'cls'
op|'='
name|'get_all_cluster_mors'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cls'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'res'
op|'='
name|'get_all_res_pool_mors'
op|'('
name|'session'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'res'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'path_list'
op|'='
op|'['
name|'path'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'path'
name|'in'
name|'path_list'
op|']'
newline|'\n'
name|'list_obj'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'entity_path'
name|'in'
name|'path_list'
op|':'
newline|'\n'
comment|'# entity_path could be unique cluster and/or resource-pool name'
nl|'\n'
indent|'        '
name|'res_mor'
op|'='
name|'find_entity_mor'
op|'('
name|'res'
op|','
name|'entity_path'
op|')'
newline|'\n'
name|'cls_mor'
op|'='
name|'find_entity_mor'
op|'('
name|'cls'
op|','
name|'entity_path'
op|')'
newline|'\n'
name|'cls_mor'
op|'.'
name|'extend'
op|'('
name|'res_mor'
op|')'
newline|'\n'
name|'for'
name|'mor'
name|'in'
name|'cls_mor'
op|':'
newline|'\n'
indent|'            '
name|'list_obj'
op|'.'
name|'append'
op|'('
op|'('
name|'mor'
op|'.'
name|'obj'
op|','
name|'mor'
op|'.'
name|'propSet'
op|'['
number|'0'
op|']'
op|'.'
name|'val'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'get_dict_mor'
op|'('
name|'session'
op|','
name|'list_obj'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_dict_mor
dedent|''
name|'def'
name|'get_dict_mor'
op|'('
name|'session'
op|','
name|'list_obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The input is a list of objects in the form\n    (manage_object,display_name)\n    The managed object will be in the form\n    { value = "domain-1002", _type = "ClusterComputeResource" }\n\n    Output data format:\n    | dict_mors = {\n    |              \'respool-1001\': { \'cluster_mor\': clusterMor,\n    |                                \'res_pool_mor\': resourcePoolMor,\n    |                                \'name\': display_name },\n    |              \'domain-1002\': { \'cluster_mor\': clusterMor,\n    |                                \'res_pool_mor\': resourcePoolMor,\n    |                                \'name\': display_name },\n    |            }\n\n    """'
newline|'\n'
name|'dict_mors'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'obj_ref'
op|','
name|'path'
name|'in'
name|'list_obj'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'obj_ref'
op|'.'
name|'_type'
op|'=='
string|'"ResourcePool"'
op|':'
newline|'\n'
comment|'# Get owner cluster-ref mor'
nl|'\n'
indent|'            '
name|'cluster_ref'
op|'='
name|'get_dynamic_property_mor'
op|'('
name|'session'
op|','
name|'obj_ref'
op|','
string|'"owner"'
op|')'
newline|'\n'
name|'dict_mors'
op|'['
name|'obj_ref'
op|'.'
name|'value'
op|']'
op|'='
op|'{'
string|"'cluster_mor'"
op|':'
name|'cluster_ref'
op|','
nl|'\n'
string|"'res_pool_mor'"
op|':'
name|'obj_ref'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'path'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Get default resource pool of the cluster'
nl|'\n'
indent|'            '
name|'res_pool_ref'
op|'='
name|'get_dynamic_property_mor'
op|'('
name|'session'
op|','
nl|'\n'
name|'obj_ref'
op|','
string|'"resourcePool"'
op|')'
newline|'\n'
name|'dict_mors'
op|'['
name|'obj_ref'
op|'.'
name|'value'
op|']'
op|'='
op|'{'
string|"'cluster_mor'"
op|':'
name|'obj_ref'
op|','
nl|'\n'
string|"'res_pool_mor'"
op|':'
name|'res_pool_ref'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'path'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dict_mors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vmdk_adapter_type
dedent|''
name|'def'
name|'get_vmdk_adapter_type'
op|'('
name|'adapter_type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the adapter type to be used in vmdk descriptor.\n\n    Adapter type in vmdk descriptor is same for LSI-SAS, LSILogic & ParaVirtual\n    because Virtual Disk Manager API does not recognize the newer controller\n    types.\n    """'
newline|'\n'
name|'if'
name|'adapter_type'
name|'in'
op|'['
name|'constants'
op|'.'
name|'ADAPTER_TYPE_LSILOGICSAS'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'ADAPTER_TYPE_PARAVIRTUAL'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'vmdk_adapter_type'
op|'='
name|'constants'
op|'.'
name|'DEFAULT_ADAPTER_TYPE'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'vmdk_adapter_type'
op|'='
name|'adapter_type'
newline|'\n'
dedent|''
name|'return'
name|'vmdk_adapter_type'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_vm
dedent|''
name|'def'
name|'create_vm'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_folder'
op|','
name|'config_spec'
op|','
name|'res_pool_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create VM on ESX host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating VM on the ESX host"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'vm_create_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"CreateVM_Task"'
op|','
name|'vm_folder'
op|','
nl|'\n'
name|'config'
op|'='
name|'config_spec'
op|','
name|'pool'
op|'='
name|'res_pool_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'task_info'
op|'='
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vm_create_task'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'VMwareDriverException'
op|':'
newline|'\n'
comment|'# An invalid guestId will result in an error with no specific fault'
nl|'\n'
comment|"# type and the generic error 'A specified parameter was not correct'."
nl|'\n'
comment|'# As guestId is user-editable, we try to help the user out with some'
nl|'\n'
comment|"# additional information if we notice that guestId isn't in our list of"
nl|'\n'
comment|'# known-good values.'
nl|'\n'
comment|"# We don't check this in advance or do anything more than warn because"
nl|'\n'
comment|"# we can't guarantee that our list of known-good guestIds is complete."
nl|'\n'
comment|"# Consequently, a value which we don't recognise may in fact be valid."
nl|'\n'
indent|'        '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'config_spec'
op|'.'
name|'guestId'
name|'not'
name|'in'
name|'constants'
op|'.'
name|'VALID_OS_TYPES'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'vmware_ostype from image is not recognised: '"
nl|'\n'
string|"'\\'%(ostype)s\\'. An invalid os type may be '"
nl|'\n'
string|"'one cause of this instance creation failure'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'ostype'"
op|':'
name|'config_spec'
op|'.'
name|'guestId'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created VM on the ESX host"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'task_info'
op|'.'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|destroy_vm
dedent|''
name|'def'
name|'destroy_vm'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Destroy a VM instance. Assumes VM is powered off."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'vm_ref'
op|':'
newline|'\n'
indent|'            '
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Destroying the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'destroy_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'vim'
op|','
string|'"Destroy_Task"'
op|','
nl|'\n'
name|'vm_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'destroy_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Destroyed the VM"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Destroy VM failed'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_virtual_disk
dedent|''
dedent|''
name|'def'
name|'create_virtual_disk'
op|'('
name|'session'
op|','
name|'dc_ref'
op|','
name|'adapter_type'
op|','
name|'disk_type'
op|','
nl|'\n'
name|'virtual_disk_path'
op|','
name|'size_in_kb'
op|')'
op|':'
newline|'\n'
comment|'# Create a Virtual Disk of the size of the flat vmdk file. This is'
nl|'\n'
comment|'# done just to generate the meta-data file whose specifics'
nl|'\n'
comment|'# depend on the size of the disk, thin/thick provisioning and the'
nl|'\n'
comment|'# storage adapter type.'
nl|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Creating Virtual Disk of size  "'
nl|'\n'
string|'"%(vmdk_file_size_in_kb)s KB and adapter type "'
nl|'\n'
string|'"%(adapter_type)s on the data store"'
op|','
nl|'\n'
op|'{'
string|'"vmdk_file_size_in_kb"'
op|':'
name|'size_in_kb'
op|','
nl|'\n'
string|'"adapter_type"'
op|':'
name|'adapter_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'vmdk_create_spec'
op|'='
name|'get_vmdk_create_spec'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
op|','
nl|'\n'
name|'size_in_kb'
op|','
nl|'\n'
name|'adapter_type'
op|','
nl|'\n'
name|'disk_type'
op|')'
newline|'\n'
nl|'\n'
name|'vmdk_create_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"CreateVirtualDisk_Task"'
op|','
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|'.'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'name'
op|'='
name|'virtual_disk_path'
op|','
nl|'\n'
name|'datacenter'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'spec'
op|'='
name|'vmdk_create_spec'
op|')'
newline|'\n'
nl|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vmdk_create_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created Virtual Disk of size %(vmdk_file_size_in_kb)s"'
nl|'\n'
string|'" KB and type %(disk_type)s"'
op|','
nl|'\n'
op|'{'
string|'"vmdk_file_size_in_kb"'
op|':'
name|'size_in_kb'
op|','
nl|'\n'
string|'"disk_type"'
op|':'
name|'disk_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|copy_virtual_disk
dedent|''
name|'def'
name|'copy_virtual_disk'
op|'('
name|'session'
op|','
name|'dc_ref'
op|','
name|'source'
op|','
name|'dest'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Copy a sparse virtual disk to a thin virtual disk.\n\n    This is also done to generate the meta-data file whose specifics\n    depend on the size of the disk, thin/thick provisioning and the\n    storage adapter type.\n\n    :param session: - session for connection\n    :param dc_ref: - data center reference object\n    :param source: - source datastore path\n    :param dest: - destination datastore path\n    :returns: None\n    """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copying Virtual Disk %(source)s to %(dest)s"'
op|','
nl|'\n'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
string|"'dest'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'vim'
op|'='
name|'session'
op|'.'
name|'vim'
newline|'\n'
name|'vmdk_copy_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'vim'
op|','
nl|'\n'
string|'"CopyVirtualDisk_Task"'
op|','
nl|'\n'
name|'vim'
op|'.'
name|'service_content'
op|'.'
name|'virtualDiskManager'
op|','
nl|'\n'
name|'sourceName'
op|'='
name|'source'
op|','
nl|'\n'
name|'sourceDatacenter'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'destName'
op|'='
name|'dest'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'vmdk_copy_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Copied Virtual Disk %(source)s to %(dest)s"'
op|','
nl|'\n'
op|'{'
string|"'source'"
op|':'
name|'source'
op|','
string|"'dest'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reconfigure_vm
dedent|''
name|'def'
name|'reconfigure_vm'
op|'('
name|'session'
op|','
name|'vm_ref'
op|','
name|'config_spec'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Reconfigure a VM according to the config spec."""'
newline|'\n'
name|'reconfig_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"ReconfigVM_Task"'
op|','
name|'vm_ref'
op|','
nl|'\n'
name|'spec'
op|'='
name|'config_spec'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'reconfig_task'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|power_on_instance
dedent|''
name|'def'
name|'power_on_instance'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Power on the specified instance."""'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powering on the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'poweron_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
nl|'\n'
name|'session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"PowerOnVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'poweron_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powered on the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'InvalidPowerStateException'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM already powered on"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_values_from_object_properties
dedent|''
dedent|''
name|'def'
name|'get_values_from_object_properties'
op|'('
name|'session'
op|','
name|'props'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the specific values from a object list.\n\n    The object values will be returned as a dictionary.\n    """'
newline|'\n'
name|'dictionary'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'while'
name|'props'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'elem'
name|'in'
name|'props'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'propdict'
op|'='
name|'propset_dict'
op|'('
name|'elem'
op|'.'
name|'propSet'
op|')'
newline|'\n'
name|'dictionary'
op|'.'
name|'update'
op|'('
name|'propdict'
op|')'
newline|'\n'
dedent|''
name|'props'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vutil'
op|','
string|"'continue_retrieval'"
op|','
nl|'\n'
name|'props'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'dictionary'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_vm_port_indices
dedent|''
name|'def'
name|'_get_vm_port_indices'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'extra_config'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|"'get_dynamic_property'"
op|','
nl|'\n'
name|'vm_ref'
op|','
string|"'VirtualMachine'"
op|','
nl|'\n'
string|"'config.extraConfig'"
op|')'
newline|'\n'
name|'ports'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'extra_config'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'='
name|'extra_config'
op|'.'
name|'OptionValue'
newline|'\n'
name|'for'
name|'option'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'option'
op|'.'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'nvp.iface-id.'"
op|')'
name|'and'
nl|'\n'
name|'option'
op|'.'
name|'value'
op|'!='
string|"'free'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ports'
op|'.'
name|'append'
op|'('
name|'int'
op|'('
name|'option'
op|'.'
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'ports'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_attach_port_index
dedent|''
name|'def'
name|'get_attach_port_index'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the first free port index."""'
newline|'\n'
name|'ports'
op|'='
name|'_get_vm_port_indices'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
newline|'\n'
comment|'# No ports are configured on the VM'
nl|'\n'
name|'if'
name|'not'
name|'ports'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'ports'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'configured_ports_len'
op|'='
name|'len'
op|'('
name|'ports'
op|')'
newline|'\n'
comment|'# Find the first free port index'
nl|'\n'
name|'for'
name|'port_index'
name|'in'
name|'range'
op|'('
name|'configured_ports_len'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'port_index'
op|'!='
name|'ports'
op|'['
name|'port_index'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'port_index'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'configured_ports_len'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_vm_detach_port_index
dedent|''
name|'def'
name|'get_vm_detach_port_index'
op|'('
name|'session'
op|','
name|'vm_ref'
op|','
name|'iface_id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'extra_config'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|"'get_dynamic_property'"
op|','
nl|'\n'
name|'vm_ref'
op|','
string|"'VirtualMachine'"
op|','
nl|'\n'
string|"'config.extraConfig'"
op|')'
newline|'\n'
name|'if'
name|'extra_config'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|'='
name|'extra_config'
op|'.'
name|'OptionValue'
newline|'\n'
name|'for'
name|'option'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'option'
op|'.'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'nvp.iface-id.'"
op|')'
name|'and'
nl|'\n'
name|'option'
op|'.'
name|'value'
op|'=='
name|'iface_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'int'
op|'('
name|'option'
op|'.'
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|power_off_instance
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'power_off_instance'
op|'('
name|'session'
op|','
name|'instance'
op|','
name|'vm_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Power off the specified instance."""'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'vm_ref'
op|'='
name|'get_vm_ref'
op|'('
name|'session'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powering off the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'poweroff_task'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'session'
op|'.'
name|'vim'
op|','
nl|'\n'
string|'"PowerOffVM_Task"'
op|','
name|'vm_ref'
op|')'
newline|'\n'
name|'session'
op|'.'
name|'_wait_for_task'
op|'('
name|'poweroff_task'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Powered off the VM"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'vexc'
op|'.'
name|'InvalidPowerStateException'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"VM already powered off"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_rescue_device
dedent|''
dedent|''
name|'def'
name|'find_rescue_device'
op|'('
name|'hardware_devices'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the rescue device.\n\n    The method will raise an exception if the rescue device does not\n    exist. The resuce device has suffix \'-rescue.vmdk\'.\n    :param hardware_devices: the hardware devices for the instance\n    :param instance: nova.objects.instance.Instance object\n    :return: the rescue disk device object\n    """'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|"'VirtualDiskFlatVer2BackingInfo'"
name|'and'
nl|'\n'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|'.'
name|'endswith'
op|'('
string|"'-rescue.vmdk'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'device'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|"'Rescue device does not exist for instance %s'"
op|')'
op|'%'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_ephemeral_name
dedent|''
name|'def'
name|'get_ephemeral_name'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'ephemeral_%d.vmdk'"
op|'%'
name|'id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_detach_and_delete_devices_config_spec
dedent|''
name|'def'
name|'_detach_and_delete_devices_config_spec'
op|'('
name|'client_factory'
op|','
name|'devices'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'config_spec'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
string|"'ns0:VirtualMachineConfigSpec'"
op|')'
newline|'\n'
name|'device_config_spec'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'device'
name|'in'
name|'devices'
op|':'
newline|'\n'
indent|'        '
name|'virtual_device_config'
op|'='
name|'client_factory'
op|'.'
name|'create'
op|'('
nl|'\n'
string|"'ns0:VirtualDeviceConfigSpec'"
op|')'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'operation'
op|'='
string|'"remove"'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'device'
op|'='
name|'device'
newline|'\n'
name|'virtual_device_config'
op|'.'
name|'fileOperation'
op|'='
string|'"destroy"'
newline|'\n'
name|'device_config_spec'
op|'.'
name|'append'
op|'('
name|'virtual_device_config'
op|')'
newline|'\n'
dedent|''
name|'config_spec'
op|'.'
name|'deviceChange'
op|'='
name|'device_config_spec'
newline|'\n'
name|'return'
name|'config_spec'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|detach_devices_from_vm
dedent|''
name|'def'
name|'detach_devices_from_vm'
op|'('
name|'session'
op|','
name|'vm_ref'
op|','
name|'devices'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Detach specified devices from VM."""'
newline|'\n'
name|'client_factory'
op|'='
name|'session'
op|'.'
name|'vim'
op|'.'
name|'client'
op|'.'
name|'factory'
newline|'\n'
name|'config_spec'
op|'='
name|'_detach_and_delete_devices_config_spec'
op|'('
nl|'\n'
name|'client_factory'
op|','
name|'devices'
op|')'
newline|'\n'
name|'reconfigure_vm'
op|'('
name|'session'
op|','
name|'vm_ref'
op|','
name|'config_spec'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_ephemerals
dedent|''
name|'def'
name|'get_ephemerals'
op|'('
name|'session'
op|','
name|'vm_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'devices'
op|'='
op|'['
op|']'
newline|'\n'
name|'hardware_devices'
op|'='
name|'session'
op|'.'
name|'_call_method'
op|'('
name|'vim_util'
op|','
nl|'\n'
string|'"get_dynamic_property"'
op|','
name|'vm_ref'
op|','
string|'"VirtualMachine"'
op|','
nl|'\n'
string|'"config.hardware.device"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'hardware_devices'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"ArrayOfVirtualDevice"'
op|':'
newline|'\n'
indent|'        '
name|'hardware_devices'
op|'='
name|'hardware_devices'
op|'.'
name|'VirtualDevice'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'device'
name|'in'
name|'hardware_devices'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'device'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"VirtualDisk"'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'device'
op|'.'
name|'backing'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
nl|'\n'
string|'"VirtualDiskFlatVer2BackingInfo"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'ephemeral'"
name|'in'
name|'device'
op|'.'
name|'backing'
op|'.'
name|'fileName'
op|':'
newline|'\n'
indent|'                    '
name|'devices'
op|'.'
name|'append'
op|'('
name|'device'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'devices'
newline|'\n'
dedent|''
endmarker|''
end_unit

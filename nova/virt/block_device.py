begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NotTransformable
name|'class'
name|'_NotTransformable'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_InvalidType
dedent|''
name|'class'
name|'_InvalidType'
op|'('
name|'_NotTransformable'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NoLegacy
dedent|''
name|'class'
name|'_NoLegacy'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DriverBlockDevice
dedent|''
name|'class'
name|'DriverBlockDevice'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_NotTransformable'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE (ndipanov): Always save the id of the bdm'
nl|'\n'
comment|'#                  so we can use it for db updates.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'id'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
op|'('
name|'field'
op|','
name|'None'
op|')'
nl|'\n'
name|'for'
name|'field'
name|'in'
name|'self'
op|'.'
name|'_fields'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_transform'
op|'('
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_transform
dedent|''
name|'def'
name|'_transform'
op|'('
name|'self'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transform bdm to the format that is passed to drivers."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|legacy
dedent|''
name|'def'
name|'legacy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Basic legacy transformation.\n\n        Basic method will just drop the fields that are not in\n        _legacy_fields set. Override this in subclass if needed.\n        """'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|')'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_legacy_fields'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach
dedent|''
name|'def'
name|'attach'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make the device available to be used by VMs.\n\n        To be overriden in subclasses with the connecting logic for\n        the type of device the subclass represents.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DriverSwapBlockDevice
dedent|''
dedent|''
name|'class'
name|'DriverSwapBlockDevice'
op|'('
name|'DriverBlockDevice'
op|')'
op|':'
newline|'\n'
DECL|variable|_fields
indent|'    '
name|'_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'device_name'"
op|','
string|"'swap_size'"
op|','
string|"'disk_bus'"
op|']'
op|')'
newline|'\n'
DECL|variable|_legacy_fields
name|'_legacy_fields'
op|'='
name|'_fields'
op|'-'
name|'set'
op|'('
op|'['
string|"'disk_bus'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_transform
name|'def'
name|'_transform'
op|'('
name|'self'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'block_device'
op|'.'
name|'new_format_is_swap'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_InvalidType'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|','
nl|'\n'
string|"'swap_size'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_size'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'disk_bus'"
op|')'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DriverEphemeralBlockDevice
dedent|''
dedent|''
name|'class'
name|'DriverEphemeralBlockDevice'
op|'('
name|'DriverBlockDevice'
op|')'
op|':'
newline|'\n'
DECL|variable|_new_only_fields
indent|'    '
name|'_new_only_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'disk_bus'"
op|','
string|"'device_type'"
op|','
string|"'guest_format'"
op|']'
op|')'
newline|'\n'
DECL|variable|_fields
name|'_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'device_name'"
op|','
string|"'size'"
op|']'
op|')'
op|'|'
name|'_new_only_fields'
newline|'\n'
DECL|variable|_legacy_fields
name|'_legacy_fields'
op|'='
op|'('
name|'_fields'
op|'-'
name|'_new_only_fields'
op|'|'
nl|'\n'
name|'set'
op|'('
op|'['
string|"'num'"
op|','
string|"'virtual_name'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_transform
name|'def'
name|'_transform'
op|'('
name|'self'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'block_device'
op|'.'
name|'new_format_is_ephemeral'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_InvalidType'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_size'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'disk_bus'"
op|')'
op|','
nl|'\n'
string|"'device_type'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_type'"
op|')'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'guest_format'"
op|')'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|legacy
dedent|''
name|'def'
name|'legacy'
op|'('
name|'self'
op|','
name|'num'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'legacy_bdm'
op|'='
name|'super'
op|'('
name|'DriverEphemeralBlockDevice'
op|','
name|'self'
op|')'
op|'.'
name|'legacy'
op|'('
op|')'
newline|'\n'
name|'legacy_bdm'
op|'['
string|"'num'"
op|']'
op|'='
name|'num'
newline|'\n'
name|'legacy_bdm'
op|'['
string|"'virtual_name'"
op|']'
op|'='
string|"'ephemeral'"
op|'+'
name|'str'
op|'('
name|'num'
op|')'
newline|'\n'
name|'return'
name|'legacy_bdm'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DriverVolumeBlockDevice
dedent|''
dedent|''
name|'class'
name|'DriverVolumeBlockDevice'
op|'('
name|'DriverBlockDevice'
op|')'
op|':'
newline|'\n'
DECL|variable|_legacy_fields
indent|'    '
name|'_legacy_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'connection_info'"
op|','
string|"'mount_device'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|']'
op|')'
newline|'\n'
DECL|variable|_new_fields
name|'_new_fields'
op|'='
name|'set'
op|'('
op|'['
string|"'guest_format'"
op|','
string|"'device_type'"
op|','
nl|'\n'
string|"'disk_bus'"
op|','
string|"'boot_index'"
op|']'
op|')'
newline|'\n'
DECL|variable|_fields
name|'_fields'
op|'='
name|'_legacy_fields'
op|'|'
name|'_new_fields'
newline|'\n'
nl|'\n'
DECL|member|_transform
name|'def'
name|'_transform'
op|'('
name|'self'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
op|'=='
string|"'volume'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_InvalidType'
newline|'\n'
nl|'\n'
comment|'# NOTE (ndipanov): Save it as an attribute as we will'
nl|'\n'
comment|'#                  need it for attach()'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'volume_size'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_size'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_id'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_id'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'bdm'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'k'
name|'in'
name|'self'
op|'.'
name|'_new_fields'
op|'|'
name|'set'
op|'('
op|'['
string|"'delete_on_termination'"
op|']'
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'mount_device'"
op|']'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
nl|'\n'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'connection_info'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|attach
dedent|''
dedent|''
name|'def'
name|'attach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_api'
op|','
name|'virt_driver'
op|','
name|'db_api'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'volume'
op|'='
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach a volume to an instance at boot time. So actual attach'
nl|'\n'
comment|'# is done by instance creation.'
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Booting with volume %(volume_id)s at %(mountpoint)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'mountpoint'"
op|':'
name|'self'
op|'['
string|"'mount_device'"
op|']'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'virt_driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume_id'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'self'
op|'['
string|"'mount_device'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'serial'"
name|'not'
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'serial'"
op|']'
op|'='
name|'self'
op|'.'
name|'volume_id'
newline|'\n'
dedent|''
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|'='
name|'connection_info'
newline|'\n'
name|'if'
name|'db_api'
op|':'
newline|'\n'
indent|'            '
name|'db_api'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'id'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|refresh_connection_info
dedent|''
dedent|''
name|'def'
name|'refresh_connection_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_api'
op|','
nl|'\n'
name|'virt_driver'
op|','
name|'db_api'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# NOTE (ndipanov): A no-op if there is no connection info already'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'connector'
op|'='
name|'virt_driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'volume_id'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'if'
string|"'serial'"
name|'not'
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'serial'"
op|']'
op|'='
name|'self'
op|'.'
name|'volume_id'
newline|'\n'
dedent|''
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|'='
name|'connection_info'
newline|'\n'
nl|'\n'
name|'if'
name|'db_api'
op|':'
newline|'\n'
indent|'            '
name|'db_api'
op|'.'
name|'block_device_mapping_update'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'id'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DriverSnapshotBlockDevice
dedent|''
dedent|''
dedent|''
name|'class'
name|'DriverSnapshotBlockDevice'
op|'('
name|'DriverVolumeBlockDevice'
op|')'
op|':'
newline|'\n'
DECL|member|_transform
indent|'    '
name|'def'
name|'_transform'
op|'('
name|'self'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'_InvalidType'
newline|'\n'
nl|'\n'
comment|'# NOTE (ndipanov): Save these as attributes as we will'
nl|'\n'
comment|'#                  need them for attach()'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'volume_size'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_size'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'snapshot_id'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'snapshot_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_id'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'volume_id'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'bdm'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'k'
name|'in'
name|'self'
op|'.'
name|'_new_fields'
op|'|'
name|'set'
op|'('
op|'['
string|"'delete_on_termination'"
op|']'
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'mount_device'"
op|']'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
nl|'\n'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'connection_info'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'connection_info'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|attach
dedent|''
dedent|''
name|'def'
name|'attach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_api'
op|','
name|'virt_driver'
op|','
nl|'\n'
name|'db_api'
op|'='
name|'None'
op|','
name|'wait_func'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'volume_id'
op|':'
newline|'\n'
indent|'            '
name|'snapshot'
op|'='
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'snapshot_id'
op|')'
newline|'\n'
name|'vol'
op|'='
name|'volume_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'volume_size'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'snapshot'
op|')'
newline|'\n'
name|'if'
name|'wait_func'
op|':'
newline|'\n'
indent|'                '
name|'wait_func'
op|'('
name|'context'
op|','
name|'vol'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'db_api'
op|':'
newline|'\n'
indent|'                '
name|'db_api'
op|'.'
name|'block_device_mapping_update'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'id'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'vol'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'volume_id'
op|'='
name|'vol'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Call the volume attach now'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'DriverSnapshotBlockDevice'
op|','
name|'self'
op|')'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'volume_api'
op|','
name|'virt_driver'
op|','
nl|'\n'
name|'db_api'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_convert_block_devices
dedent|''
dedent|''
name|'def'
name|'_convert_block_devices'
op|'('
name|'device_type'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
DECL|function|_is_transformable
indent|'    '
name|'def'
name|'_is_transformable'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'device_type'
op|'('
name|'bdm'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'_NotTransformable'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'device_type'
op|'('
name|'bdm'
op|')'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
nl|'\n'
name|'if'
name|'_is_transformable'
op|'('
name|'bdm'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|convert_swap
dedent|''
name|'convert_swap'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'_convert_block_devices'
op|','
nl|'\n'
name|'DriverSwapBlockDevice'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|convert_ephemerals
name|'convert_ephemerals'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'_convert_block_devices'
op|','
nl|'\n'
name|'DriverEphemeralBlockDevice'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|convert_volumes
name|'convert_volumes'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'_convert_block_devices'
op|','
nl|'\n'
name|'DriverVolumeBlockDevice'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|convert_snapshots
name|'convert_snapshots'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'_convert_block_devices'
op|','
nl|'\n'
name|'DriverSnapshotBlockDevice'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|attach_block_devices
name|'def'
name|'attach_block_devices'
op|'('
name|'block_device_mapping'
op|','
op|'*'
name|'attach_args'
op|','
op|'**'
name|'attach_kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'map'
op|'('
name|'operator'
op|'.'
name|'methodcaller'
op|'('
string|"'attach'"
op|','
op|'*'
name|'attach_args'
op|','
op|'**'
name|'attach_kwargs'
op|')'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'return'
name|'block_device_mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|refresh_conn_infos
dedent|''
name|'def'
name|'refresh_conn_infos'
op|'('
name|'block_device_mapping'
op|','
op|'*'
name|'refresh_args'
op|','
op|'**'
name|'refresh_kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'map'
op|'('
name|'operator'
op|'.'
name|'methodcaller'
op|'('
string|"'refresh_connection_info'"
op|','
nl|'\n'
op|'*'
name|'refresh_args'
op|','
op|'**'
name|'refresh_kwargs'
op|')'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'return'
name|'block_device_mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|legacy_block_devices
dedent|''
name|'def'
name|'legacy_block_devices'
op|'('
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
DECL|function|_has_legacy
indent|'    '
name|'def'
name|'_has_legacy'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'.'
name|'legacy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'_NoLegacy'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'bdms'
op|'='
op|'['
name|'bdm'
op|'.'
name|'legacy'
op|'('
op|')'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
nl|'\n'
name|'if'
name|'_has_legacy'
op|'('
name|'bdm'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# Re-enumerate ephemeral devices'
nl|'\n'
name|'if'
name|'all'
op|'('
name|'isinstance'
op|'('
name|'bdm'
op|','
name|'DriverEphemeralBlockDevice'
op|')'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
op|','
name|'dev'
name|'in'
name|'enumerate'
op|'('
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dev'
op|'['
string|"'virtual_name'"
op|']'
op|'='
name|'dev'
op|'['
string|"'virtual_name'"
op|']'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'+'
name|'str'
op|'('
name|'i'
op|')'
newline|'\n'
name|'dev'
op|'['
string|"'num'"
op|']'
op|'='
name|'i'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'bdms'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_swap
dedent|''
name|'def'
name|'get_swap'
op|'('
name|'transformed_list'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the swap device out of the list context.\n\n    The block_device_info needs swap to be a single device,\n    not a list - otherwise this is a no-op.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'all'
op|'('
name|'isinstance'
op|'('
name|'device'
op|','
name|'DriverSwapBlockDevice'
op|')'
name|'or'
nl|'\n'
string|"'swap_size'"
name|'in'
name|'device'
nl|'\n'
name|'for'
name|'device'
name|'in'
name|'transformed_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'transformed_list'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'transformed_list'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

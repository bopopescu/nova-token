begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA fake (in-memory) hypervisor+api.\n\nAllows nova testing w/o a hypervisor.  This module also documents the\nsemantics of real hypervisor connections.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'contextlib'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'versionutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'arch'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'hv_type'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_mode'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'console'
name|'import'
name|'type'
name|'as'
name|'ctype'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'diagnostics'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'virtapi'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_FAKE_NODES
name|'_FAKE_NODES'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|set_nodes
name|'def'
name|'set_nodes'
op|'('
name|'nodes'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets FakeDriver\'s node.list.\n\n    It has effect on the following methods:\n        get_available_nodes()\n        get_available_resource\n\n    To restore the change, call restore_nodes()\n    """'
newline|'\n'
name|'global'
name|'_FAKE_NODES'
newline|'\n'
name|'_FAKE_NODES'
op|'='
name|'nodes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|restore_nodes
dedent|''
name|'def'
name|'restore_nodes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Resets FakeDriver\'s node list modified by set_nodes().\n\n    Usually called from tearDown().\n    """'
newline|'\n'
name|'global'
name|'_FAKE_NODES'
newline|'\n'
name|'_FAKE_NODES'
op|'='
op|'['
name|'CONF'
op|'.'
name|'host'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeInstance
dedent|''
name|'class'
name|'FakeInstance'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'state'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'uuid'
op|'='
name|'uuid'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Resources
dedent|''
dedent|''
name|'class'
name|'Resources'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|vcpus
indent|'    '
name|'vcpus'
op|'='
number|'0'
newline|'\n'
DECL|variable|memory_mb
name|'memory_mb'
op|'='
number|'0'
newline|'\n'
DECL|variable|local_gb
name|'local_gb'
op|'='
number|'0'
newline|'\n'
DECL|variable|vcpus_used
name|'vcpus_used'
op|'='
number|'0'
newline|'\n'
DECL|variable|memory_mb_used
name|'memory_mb_used'
op|'='
number|'0'
newline|'\n'
DECL|variable|local_gb_used
name|'local_gb_used'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'vcpus'
op|'='
number|'8'
op|','
name|'memory_mb'
op|'='
number|'8000'
op|','
name|'local_gb'
op|'='
number|'500'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'vcpus'
op|'='
name|'vcpus'
newline|'\n'
name|'self'
op|'.'
name|'memory_mb'
op|'='
name|'memory_mb'
newline|'\n'
name|'self'
op|'.'
name|'local_gb'
op|'='
name|'local_gb'
newline|'\n'
nl|'\n'
DECL|member|claim
dedent|''
name|'def'
name|'claim'
op|'('
name|'self'
op|','
name|'vcpus'
op|'='
number|'0'
op|','
name|'mem'
op|'='
number|'0'
op|','
name|'disk'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'vcpus_used'
op|'+='
name|'vcpus'
newline|'\n'
name|'self'
op|'.'
name|'memory_mb_used'
op|'+='
name|'mem'
newline|'\n'
name|'self'
op|'.'
name|'local_gb_used'
op|'+='
name|'disk'
newline|'\n'
nl|'\n'
DECL|member|release
dedent|''
name|'def'
name|'release'
op|'('
name|'self'
op|','
name|'vcpus'
op|'='
number|'0'
op|','
name|'mem'
op|'='
number|'0'
op|','
name|'disk'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'vcpus_used'
op|'-='
name|'vcpus'
newline|'\n'
name|'self'
op|'.'
name|'memory_mb_used'
op|'-='
name|'mem'
newline|'\n'
name|'self'
op|'.'
name|'local_gb_used'
op|'-='
name|'disk'
newline|'\n'
nl|'\n'
DECL|member|dump
dedent|''
name|'def'
name|'dump'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
nl|'\n'
string|"'vcpus'"
op|':'
name|'self'
op|'.'
name|'vcpus'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'self'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'self'
op|'.'
name|'local_gb'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
name|'self'
op|'.'
name|'vcpus_used'
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
name|'self'
op|'.'
name|'memory_mb_used'
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
name|'self'
op|'.'
name|'local_gb_used'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeDriver
dedent|''
dedent|''
name|'class'
name|'FakeDriver'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
op|':'
newline|'\n'
DECL|variable|capabilities
indent|'    '
name|'capabilities'
op|'='
op|'{'
nl|'\n'
string|'"has_imagecache"'
op|':'
name|'True'
op|','
nl|'\n'
string|'"supports_recreate"'
op|':'
name|'True'
op|','
nl|'\n'
string|'"supports_migrate_to_same_host"'
op|':'
name|'True'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|"# Since we don't have a real hypervisor, pretend we have lots of"
nl|'\n'
comment|'# disk and ram so this driver can be used to test large instances.'
nl|'\n'
DECL|variable|vcpus
name|'vcpus'
op|'='
number|'1000'
newline|'\n'
DECL|variable|memory_mb
name|'memory_mb'
op|'='
number|'800000'
newline|'\n'
DECL|variable|local_gb
name|'local_gb'
op|'='
number|'600000'
newline|'\n'
nl|'\n'
string|'"""Fake hypervisor driver."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'virtapi'
op|','
name|'read_only'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FakeDriver'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'virtapi'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'resources'
op|'='
name|'Resources'
op|'('
nl|'\n'
name|'vcpus'
op|'='
name|'self'
op|'.'
name|'vcpus'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'self'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'self'
op|'.'
name|'local_gb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host_status_base'
op|'='
op|'{'
nl|'\n'
string|"'hypervisor_type'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
name|'versionutils'
op|'.'
name|'convert_version_to_int'
op|'('
string|"'1.0'"
op|')'
op|','
nl|'\n'
string|"'hypervisor_hostname'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'disk_available_least'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'supported_instances'"
op|':'
op|'['
op|'('
name|'arch'
op|'.'
name|'X86_64'
op|','
name|'hv_type'
op|'.'
name|'FAKE'
op|','
name|'vm_mode'
op|'.'
name|'HVM'
op|')'
op|']'
op|','
nl|'\n'
string|"'numa_topology'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_mounts'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_interfaces'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'not'
name|'_FAKE_NODES'
op|':'
newline|'\n'
indent|'            '
name|'set_nodes'
op|'('
op|'['
name|'CONF'
op|'.'
name|'host'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|list_instances
dedent|''
name|'def'
name|'list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'instances'
op|'['
name|'uuid'
op|']'
op|'.'
name|'name'
name|'for'
name|'uuid'
name|'in'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'keys'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|list_instance_uuids
dedent|''
name|'def'
name|'list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|plug_vifs
dedent|''
name|'def'
name|'plug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plug VIFs into networks."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unplug_vifs
dedent|''
name|'def'
name|'unplug_vifs'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unplug VIFs from networks."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'None'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'flavor'
op|'='
name|'instance'
op|'.'
name|'flavor'
newline|'\n'
name|'self'
op|'.'
name|'resources'
op|'.'
name|'claim'
op|'('
nl|'\n'
name|'vcpus'
op|'='
name|'flavor'
op|'.'
name|'vcpus'
op|','
nl|'\n'
name|'mem'
op|'='
name|'flavor'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
name|'disk'
op|'='
name|'flavor'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
name|'fake_instance'
op|'='
name|'FakeInstance'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'state'
op|','
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'['
name|'uuid'
op|']'
op|'='
name|'fake_instance'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'.'
name|'uuid'
name|'not'
name|'in'
name|'self'
op|'.'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'update_task_state'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot
dedent|''
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'bad_volumes_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_host_ip_addr
dedent|''
name|'def'
name|'get_host_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'192.168.0.1'"
newline|'\n'
nl|'\n'
DECL|member|set_admin_password
dedent|''
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'new_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|inject_file
dedent|''
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'b64_path'
op|','
name|'b64_contents'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|resume_state_on_host_boot
dedent|''
name|'def'
name|'resume_state_on_host_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|rescue
dedent|''
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unrescue
dedent|''
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|poll_rebooting_instances
dedent|''
name|'def'
name|'poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|migrate_disk_and_power_off
dedent|''
name|'def'
name|'migrate_disk_and_power_off'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'flavor'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'timeout'
op|'='
number|'0'
op|','
name|'retry_interval'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|finish_revert_migration
dedent|''
name|'def'
name|'finish_revert_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration_at_destination
dedent|''
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|power_off
dedent|''
name|'def'
name|'power_off'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'timeout'
op|'='
number|'0'
op|','
name|'retry_interval'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|power_on
dedent|''
name|'def'
name|'power_on'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|trigger_crash_dump
dedent|''
name|'def'
name|'trigger_crash_dump'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|soft_delete
dedent|''
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|restore
dedent|''
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|pause
dedent|''
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unpause
dedent|''
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|suspend
dedent|''
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|resume
dedent|''
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'flavor'
op|'='
name|'instance'
op|'.'
name|'flavor'
newline|'\n'
name|'self'
op|'.'
name|'resources'
op|'.'
name|'release'
op|'('
nl|'\n'
name|'vcpus'
op|'='
name|'flavor'
op|'.'
name|'vcpus'
op|','
nl|'\n'
name|'mem'
op|'='
name|'flavor'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
name|'disk'
op|'='
name|'flavor'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'instances'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Key \'%(key)s\' not in instances \'%(inst)s\'"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
name|'key'
op|','
nl|'\n'
string|"'inst'"
op|':'
name|'self'
op|'.'
name|'instances'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup
dedent|''
dedent|''
name|'def'
name|'cleanup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|','
name|'destroy_vifs'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'connection_info'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'disk_bus'
op|'='
name|'None'
op|','
name|'device_type'
op|'='
name|'None'
op|','
name|'encryption'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach the disk to the instance at mountpoint using info."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'instance_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_mounts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mounts'
op|'['
name|'instance_name'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_mounts'
op|'['
name|'instance_name'
op|']'
op|'['
name|'mountpoint'
op|']'
op|'='
name|'connection_info'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'connection_info'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'encryption'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach the disk attached to the instance."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_mounts'
op|'['
name|'instance'
op|'.'
name|'name'
op|']'
op|'['
name|'mountpoint'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|swap_volume
dedent|''
dedent|''
name|'def'
name|'swap_volume'
op|'('
name|'self'
op|','
name|'old_connection_info'
op|','
name|'new_connection_info'
op|','
nl|'\n'
name|'instance'
op|','
name|'mountpoint'
op|','
name|'resize_to'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Replace the disk attached to the instance."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'instance_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_mounts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_mounts'
op|'['
name|'instance_name'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_mounts'
op|'['
name|'instance_name'
op|']'
op|'['
name|'mountpoint'
op|']'
op|'='
name|'new_connection_info'
newline|'\n'
nl|'\n'
DECL|member|attach_interface
dedent|''
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vif'
op|'['
string|"'id'"
op|']'
name|'in'
name|'self'
op|'.'
name|'_interfaces'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_interfaces'
op|'['
name|'vif'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'vif'
newline|'\n'
nl|'\n'
DECL|member|detach_interface
dedent|''
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_interfaces'
op|'['
name|'vif'
op|'['
string|"'id'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InterfaceDetachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_info
dedent|''
dedent|''
name|'def'
name|'get_info'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'.'
name|'uuid'
name|'not'
name|'in'
name|'self'
op|'.'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'i'
op|'='
name|'self'
op|'.'
name|'instances'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
newline|'\n'
name|'return'
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'i'
op|'.'
name|'state'
op|','
nl|'\n'
name|'max_mem_kb'
op|'='
number|'0'
op|','
nl|'\n'
name|'mem_kb'
op|'='
number|'0'
op|','
nl|'\n'
name|'num_cpu'
op|'='
number|'2'
op|','
nl|'\n'
name|'cpu_time_ns'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'cpu0_time'"
op|':'
number|'17300000000'
op|','
nl|'\n'
string|"'memory'"
op|':'
number|'524288'
op|','
nl|'\n'
string|"'vda_errors'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'vda_read'"
op|':'
number|'262144'
op|','
nl|'\n'
string|"'vda_read_req'"
op|':'
number|'112'
op|','
nl|'\n'
string|"'vda_write'"
op|':'
number|'5778432'
op|','
nl|'\n'
string|"'vda_write_req'"
op|':'
number|'488'
op|','
nl|'\n'
string|"'vnet1_rx'"
op|':'
number|'2070139'
op|','
nl|'\n'
string|"'vnet1_rx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_rx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_rx_packets'"
op|':'
number|'26701'
op|','
nl|'\n'
string|"'vnet1_tx'"
op|':'
number|'140208'
op|','
nl|'\n'
string|"'vnet1_tx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_tx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_tx_packets'"
op|':'
number|'662'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'diags'
op|'='
name|'diagnostics'
op|'.'
name|'Diagnostics'
op|'('
name|'state'
op|'='
string|"'running'"
op|','
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'hypervisor_os'
op|'='
string|"'fake-os'"
op|','
name|'uptime'
op|'='
number|'46664'
op|','
name|'config_drive'
op|'='
name|'True'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'add_cpu'
op|'('
name|'time'
op|'='
number|'17300000000'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'add_nic'
op|'('
name|'mac_address'
op|'='
string|"'01:23:45:67:89:ab'"
op|','
nl|'\n'
name|'rx_packets'
op|'='
number|'26701'
op|','
nl|'\n'
name|'rx_octets'
op|'='
number|'2070139'
op|','
nl|'\n'
name|'tx_octets'
op|'='
number|'140208'
op|','
nl|'\n'
name|'tx_packets'
op|'='
number|'662'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'add_disk'
op|'('
name|'id'
op|'='
string|"'fake-disk-id'"
op|','
nl|'\n'
name|'read_bytes'
op|'='
number|'262144'
op|','
nl|'\n'
name|'read_requests'
op|'='
number|'112'
op|','
nl|'\n'
name|'write_bytes'
op|'='
number|'5778432'
op|','
nl|'\n'
name|'write_requests'
op|'='
number|'488'
op|')'
newline|'\n'
name|'diags'
op|'.'
name|'memory_details'
op|'.'
name|'maximum'
op|'='
number|'524288'
newline|'\n'
name|'return'
name|'diags'
newline|'\n'
nl|'\n'
DECL|member|get_all_bw_counters
dedent|''
name|'def'
name|'get_all_bw_counters'
op|'('
name|'self'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return bandwidth usage counters for each interface on each\n           running VM.\n        """'
newline|'\n'
name|'bw'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'bw'
newline|'\n'
nl|'\n'
DECL|member|get_all_volume_usage
dedent|''
name|'def'
name|'get_all_volume_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'compute_host_bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return usage info for volumes attached to vms on\n           a given host.\n        """'
newline|'\n'
name|'volusage'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'volusage'
newline|'\n'
nl|'\n'
DECL|member|get_host_cpu_stats
dedent|''
name|'def'
name|'get_host_cpu_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stats'
op|'='
op|'{'
string|"'kernel'"
op|':'
number|'5664160000000'
op|','
nl|'\n'
string|"'idle'"
op|':'
number|'1592705190000000'
op|','
nl|'\n'
string|"'user'"
op|':'
number|'26728850000000'
op|','
nl|'\n'
string|"'iowait'"
op|':'
number|'6121490000000'
op|'}'
newline|'\n'
name|'stats'
op|'['
string|"'frequency'"
op|']'
op|'='
number|'800'
newline|'\n'
name|'return'
name|'stats'
newline|'\n'
nl|'\n'
DECL|member|block_stats
dedent|''
name|'def'
name|'block_stats'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'disk_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
number|'0'
op|','
name|'None'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'FAKE CONSOLE OUTPUT\\nANOTHER\\nLAST LINE'"
newline|'\n'
nl|'\n'
DECL|member|get_vnc_console
dedent|''
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleVNC'
op|'('
name|'internal_access_path'
op|'='
string|"'FAKE'"
op|','
nl|'\n'
name|'host'
op|'='
string|"'fakevncconsole.com'"
op|','
nl|'\n'
name|'port'
op|'='
number|'6969'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_spice_console
dedent|''
name|'def'
name|'get_spice_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleSpice'
op|'('
name|'internal_access_path'
op|'='
string|"'FAKE'"
op|','
nl|'\n'
name|'host'
op|'='
string|"'fakespiceconsole.com'"
op|','
nl|'\n'
name|'port'
op|'='
number|'6969'
op|','
nl|'\n'
name|'tlsPort'
op|'='
number|'6970'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_rdp_console
dedent|''
name|'def'
name|'get_rdp_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleRDP'
op|'('
name|'internal_access_path'
op|'='
string|"'FAKE'"
op|','
nl|'\n'
name|'host'
op|'='
string|"'fakerdpconsole.com'"
op|','
nl|'\n'
name|'port'
op|'='
number|'6969'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_serial_console
dedent|''
name|'def'
name|'get_serial_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleSerial'
op|'('
name|'internal_access_path'
op|'='
string|"'FAKE'"
op|','
nl|'\n'
name|'host'
op|'='
string|"'fakerdpconsole.com'"
op|','
nl|'\n'
name|'port'
op|'='
number|'6969'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_mks_console
dedent|''
name|'def'
name|'get_mks_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleMKS'
op|'('
name|'internal_access_path'
op|'='
string|"'FAKE'"
op|','
nl|'\n'
name|'host'
op|'='
string|"'fakemksconsole.com'"
op|','
nl|'\n'
name|'port'
op|'='
number|'6969'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'username'"
op|':'
string|"'fakeuser'"
op|','
nl|'\n'
string|"'password'"
op|':'
string|"'fakepassword'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|refresh_instance_security_rules
dedent|''
name|'def'
name|'refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|get_available_resource
dedent|''
name|'def'
name|'get_available_resource'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates compute manager resource info on ComputeNode table.\n\n           Since we don\'t have a real hypervisor, pretend we have lots of\n           disk and ram.\n        """'
newline|'\n'
name|'cpu_info'
op|'='
name|'collections'
op|'.'
name|'OrderedDict'
op|'('
op|'['
nl|'\n'
op|'('
string|"'arch'"
op|','
string|"'x86_64'"
op|')'
op|','
nl|'\n'
op|'('
string|"'model'"
op|','
string|"'Nehalem'"
op|')'
op|','
nl|'\n'
op|'('
string|"'vendor'"
op|','
string|"'Intel'"
op|')'
op|','
nl|'\n'
op|'('
string|"'features'"
op|','
op|'['
string|"'pge'"
op|','
string|"'clflush'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'topology'"
op|','
op|'{'
nl|'\n'
string|"'cores'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'threads'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'sockets'"
op|':'
number|'4'
op|','
nl|'\n'
op|'}'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'if'
name|'nodename'
name|'not'
name|'in'
name|'_FAKE_NODES'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'host_status'
op|'='
name|'self'
op|'.'
name|'host_status_base'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'host_status'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'resources'
op|'.'
name|'dump'
op|'('
op|')'
op|')'
newline|'\n'
name|'host_status'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|'='
name|'nodename'
newline|'\n'
name|'host_status'
op|'['
string|"'host_hostname'"
op|']'
op|'='
name|'nodename'
newline|'\n'
name|'host_status'
op|'['
string|"'host_name_label'"
op|']'
op|'='
name|'nodename'
newline|'\n'
name|'host_status'
op|'['
string|"'cpu_info'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
name|'return'
name|'host_status'
newline|'\n'
nl|'\n'
DECL|member|ensure_filtering_rules_for_instance
dedent|''
name|'def'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|get_instance_disk_info
dedent|''
name|'def'
name|'get_instance_disk_info'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'post_method'
op|','
name|'recover_method'
op|','
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'post_method'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'migrate_data'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|live_migration_force_complete
dedent|''
name|'def'
name|'live_migration_force_complete'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_destination_cleanup
dedent|''
name|'def'
name|'check_can_live_migrate_destination_cleanup'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_destination
dedent|''
name|'def'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'src_compute_info'
op|','
name|'dst_compute_info'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|check_can_live_migrate_source
dedent|''
name|'def'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest_check_data'
op|','
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|finish_migration
dedent|''
name|'def'
name|'finish_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
name|'power_on'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|confirm_migration
dedent|''
name|'def'
name|'confirm_migration'
op|'('
name|'self'
op|','
name|'migration'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|pre_live_migration
dedent|''
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'network_info'
op|','
name|'disk_info'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|_test_remove_vm
dedent|''
name|'def'
name|'_test_remove_vm'
op|'('
name|'self'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes the named VM, as if it crashed. For testing."""'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'pop'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'return'
name|'action'
newline|'\n'
nl|'\n'
DECL|member|host_maintenance_mode
dedent|''
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'mode'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'off_maintenance'"
newline|'\n'
dedent|''
name|'return'
string|"'on_maintenance'"
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'if'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'enabled'"
newline|'\n'
dedent|''
name|'return'
string|"'disabled'"
newline|'\n'
nl|'\n'
DECL|member|get_volume_connector
dedent|''
name|'def'
name|'get_volume_connector'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'ip'"
op|':'
name|'CONF'
op|'.'
name|'my_block_storage_ip'
op|','
nl|'\n'
string|"'initiator'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fakehost'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_available_nodes
dedent|''
name|'def'
name|'get_available_nodes'
op|'('
name|'self'
op|','
name|'refresh'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_FAKE_NODES'
newline|'\n'
nl|'\n'
DECL|member|instance_on_disk
dedent|''
name|'def'
name|'instance_on_disk'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|quiesce
dedent|''
name|'def'
name|'quiesce'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unquiesce
dedent|''
name|'def'
name|'unquiesce'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVirtAPI
dedent|''
dedent|''
name|'class'
name|'FakeVirtAPI'
op|'('
name|'virtapi'
op|'.'
name|'VirtAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|wait_for_instance_event
name|'def'
name|'wait_for_instance_event'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'event_names'
op|','
name|'deadline'
op|'='
number|'300'
op|','
nl|'\n'
name|'error_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(danms): Don't actually wait for any events, just"
nl|'\n'
comment|'# fall through'
nl|'\n'
indent|'        '
name|'yield'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SmallFakeDriver
dedent|''
dedent|''
name|'class'
name|'SmallFakeDriver'
op|'('
name|'FakeDriver'
op|')'
op|':'
newline|'\n'
comment|'# The api samples expect specific cpu memory and disk sizes. In order to'
nl|'\n'
comment|'# allow the FakeVirt driver to be used outside of the unit tests, provide'
nl|'\n'
comment|'# a separate class that has the values expected by the api samples. So'
nl|'\n'
comment|'# instead of requiring new samples every time those'
nl|'\n'
comment|'# values are adjusted allow them to be overwritten here.'
nl|'\n'
nl|'\n'
DECL|variable|vcpus
indent|'    '
name|'vcpus'
op|'='
number|'1'
newline|'\n'
DECL|variable|memory_mb
name|'memory_mb'
op|'='
number|'8192'
newline|'\n'
DECL|variable|local_gb
name|'local_gb'
op|'='
number|'1028'
newline|'\n'
dedent|''
endmarker|''
end_unit

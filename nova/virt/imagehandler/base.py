begin_unit
comment|'# Copyright 2014 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nBase image handler implementation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
DECL|class|ImageHandler
name|'class'
name|'ImageHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Image handler base class.\n\n    Currently the behavior of this image handler class just\n    only like a image fetcher. On next step, we could implement\n    particular sub-class in relevant hypervisor layer with more\n    advanced functions base on this structure, such as\n    CoW creating and snapshot capturing, etc..\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'driver'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct a image handler instance.\n\n        :param driver: a valid compute driver instance,\n                such as nova.virt.libvirt.driver.LibvirtDriver object\n        :param associate_fn: An optional hook function, will be called when\n                an image be handled by this handler.\n        :param disassociate_fn: An optional hook function, will be called when\n                the associated relationship be removed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_last_ops_handled'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
newline|'\n'
name|'noop'
op|'='
name|'lambda'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'associate_fn'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'associate_fn'"
op|','
name|'noop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'disassociate_fn'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'disassociate_fn'"
op|','
name|'noop'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fetch_image
dedent|''
name|'def'
name|'fetch_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetch an image from a location to local.\n\n        :param context: Request context\n        :param image_id: The opaque image identifier\n        :param image_meta: The opaque image metadata\n        :param path: The image data to write, as a file-like object\n        :param user_id: Request user id\n        :param project_id: Request project id\n        :param location: Image location to handling\n        :param kwargs: Other handler-specified arguments\n\n        :retval a boolean value to inform handling success or not\n        """'
newline|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
string|'"nova-imagehandler-%s"'
op|'%'
name|'image_id'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-'"
op|','
name|'external'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_fetch_image'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|','
name|'project_id'
op|','
name|'location'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_associate'
op|'('
name|'path'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_handled'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|remove_image
dedent|''
dedent|''
name|'def'
name|'remove_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove an image from local.\n\n        :param context: Request context\n        :param image_id: The opaque image identifier\n        :param image_meta: The opaque image metadata\n        :param path: The image object local storage path\n        :param user_id: Request user id\n        :param project_id: Request project id\n        :param location: Image location to handling\n        :param kwargs: Other handler-specified arguments\n\n        :retval a boolean value to inform handling success or not\n        """'
newline|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
string|'"nova-imagehandler-%s"'
op|'%'
name|'image_id'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-'"
op|','
name|'external'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_remove_image'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|','
name|'project_id'
op|','
name|'location'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_disassociate'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_handled'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|move_image
dedent|''
dedent|''
name|'def'
name|'move_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'src_path'
op|','
name|'dst_path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move an image on local.\n\n        :param context: Request context\n        :param image_id: The opaque image identifier\n        :param image_meta: The opaque image metadata\n        :param src_path: The image object source path\n        :param dst_path: The image object destination path\n        :param user_id: Request user id\n        :param project_id: Request project id\n        :param location: Image location to handling\n        :param kwargs: Other handler-specified arguments\n\n        :retval a boolean value to inform handling success or not\n        """'
newline|'\n'
name|'with'
name|'lockutils'
op|'.'
name|'lock'
op|'('
string|'"nova-imagehandler-%s"'
op|'%'
name|'image_id'
op|','
nl|'\n'
name|'lock_file_prefix'
op|'='
string|"'nova-'"
op|','
name|'external'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_move_image'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'src_path'
op|','
name|'dst_path'
op|','
nl|'\n'
name|'user_id'
op|','
name|'project_id'
op|','
name|'location'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_disassociate'
op|'('
name|'src_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_associate'
op|'('
name|'dst_path'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_handled'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|last_ops_handled
dedent|''
dedent|''
name|'def'
name|'last_ops_handled'
op|'('
name|'self'
op|','
name|'flush'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_last_ops_handled'
newline|'\n'
name|'if'
name|'flush'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_ops_handled'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|_set_handled
dedent|''
name|'def'
name|'_set_handled'
op|'('
name|'self'
op|','
name|'handled'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_last_ops_handled'
op|'='
name|'handled'
newline|'\n'
nl|'\n'
DECL|member|_associate
dedent|''
name|'def'
name|'_associate'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'>='
op|'('
number|'3'
op|','
number|'0'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_basestring'
op|'='
name|'str'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_basestring'
op|'='
name|'basestring'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'path'
op|','
name|'_basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'path'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'associate_fn'
op|'('
name|'self'
op|','
name|'path'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Failed to call image handler association hook."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_disassociate
dedent|''
dedent|''
name|'def'
name|'_disassociate'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disassociate_fn'
op|'('
name|'self'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Failed to call image handler disassociation hook."'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|get_schemes
name|'def'
name|'get_schemes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a tuple of schemes which this handler can handle."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|is_local
name|'def'
name|'is_local'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns whether the images fetched by this handler are local.\n        This lets callers distinguish between images being downloaded to\n        local disk or fetched to remotely accessible storage.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|_fetch_image
name|'def'
name|'_fetch_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetch an image from a location to local.\n        Specific handler can using full-copy or zero-copy approach to\n        implement this method.\n\n        :param context: Request context\n        :param image_id: The opaque image identifier\n        :param image_meta: The opaque image metadata\n        :param path: The image data to write, as a file-like object\n        :param user_id: Request user id\n        :param project_id: Request project id\n        :param location: Image location to handling\n        :param kwargs: Other handler-specified arguments\n\n        :retval a boolean value to inform handling success or not\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|_remove_image
name|'def'
name|'_remove_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove an image from local.\n        Specific handler can using particular approach to\n        implement this method which base on \'_fetch_image()\' implementation.\n\n        :param context: Request context\n        :param image_id: The opaque image identifier\n        :param image_meta: The opaque image metadata\n        :param path: The image object local storage path\n        :param user_id: Request user id\n        :param project_id: Request project id\n        :param location: Image location to handling\n        :param kwargs: Other handler-specified arguments\n\n        :retval a boolean value to inform handling success or not\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|_move_image
name|'def'
name|'_move_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'image_meta'
op|','
name|'src_path'
op|','
name|'dst_path'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'location'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move an image on local.\n        Specific handler can using particular approach to\n        implement this method which base on \'_fetch_image()\' implementation.\n\n        :param context: Request context\n        :param image_id: The opaque image identifier\n        :param image_meta: The opaque image metadata\n        :param src_path: The image object source path\n        :param dst_path: The image object destination path\n        :param user_id: Request user id\n        :param project_id: Request project id\n        :param location: Image location to handling\n        :param kwargs: Other handler-specified arguments\n\n        :retval a boolean value to inform handling success or not\n        """'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

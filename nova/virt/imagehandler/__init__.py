begin_unit
comment|'# Copyright 2014 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nHandling of VM disk images by handler.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'stevedore'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|image_opts
name|'image_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'image_handlers'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'download'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Specifies which image handler extension names to use '"
nl|'\n'
string|"'for handling images. The first extension in the list '"
nl|'\n'
string|"'which can handle the image with a suitable location '"
nl|'\n'
string|"'will be used.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'image_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_IMAGE_HANDLERS
name|'_IMAGE_HANDLERS'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|_IMAGE_HANDLERS_ASSO
name|'_IMAGE_HANDLERS_ASSO'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_image_handler_asso
name|'def'
name|'_image_handler_asso'
op|'('
name|'handler'
op|','
name|'path'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_IMAGE_HANDLERS_ASSO'
op|'['
name|'path'
op|']'
op|'='
op|'('
name|'handler'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_image_handler_disasso
dedent|''
name|'def'
name|'_image_handler_disasso'
op|'('
name|'handler'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_IMAGE_HANDLERS_ASSO'
op|'.'
name|'pop'
op|'('
name|'path'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_match_locations
dedent|''
name|'def'
name|'_match_locations'
op|'('
name|'locations'
op|','
name|'schemes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'matched'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'locations'
name|'and'
op|'('
name|'schemes'
name|'is'
name|'not'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'loc'
name|'in'
name|'locations'
op|':'
newline|'\n'
comment|"# Note(zhiyan): location = {'url': 'string',"
nl|'\n'
comment|"#                           'metadata': {...}}"
nl|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'schemes'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# Note(zhiyan): handler has not scheme limitation.'
nl|'\n'
indent|'                '
name|'matched'
op|'.'
name|'append'
op|'('
name|'loc'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'loc'
op|'['
string|"'url'"
op|']'
op|')'
op|'.'
name|'scheme'
name|'in'
name|'schemes'
op|':'
newline|'\n'
indent|'                '
name|'matched'
op|'.'
name|'append'
op|'('
name|'loc'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'matched'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|load_image_handlers
dedent|''
name|'def'
name|'load_image_handlers'
op|'('
name|'driver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Loading construct user configured image handlers.\n\n    Handler objects will be cached to keep handler instance as singleton\n    since this structure need support follow sub-class development,\n    developer could implement particular sub-class in relevant hypervisor\n    layer with more advanced functions.\n    The handler\'s __init__() need do some re-preparing work if it needed,\n    for example when nova-compute service restart or host reboot,\n    CinderImageHandler will need to re-preapre iscsi/fc link for volumes\n    those already be cached on compute host as template image previously.\n    """'
newline|'\n'
name|'global'
name|'_IMAGE_HANDLERS'
op|','
name|'_IMAGE_HANDLERS_ASSO'
newline|'\n'
name|'if'
name|'_IMAGE_HANDLERS'
op|':'
newline|'\n'
indent|'        '
name|'_IMAGE_HANDLERS'
op|'='
op|'['
op|']'
newline|'\n'
name|'_IMAGE_HANDLERS_ASSO'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# for de-duplicate. using ordereddict lib to support both py26 and py27?'
nl|'\n'
dedent|''
name|'processed_handler_names'
op|'='
op|'['
op|']'
newline|'\n'
name|'ex'
op|'='
name|'stevedore'
op|'.'
name|'extension'
op|'.'
name|'ExtensionManager'
op|'('
string|"'nova.virt.image.handlers'"
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'CONF'
op|'.'
name|'image_handlers'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'name'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'processed_handler_names'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Duplicated handler extension name in \'image_handlers\' "'
nl|'\n'
string|'"option: %s, skip."'
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'name'
name|'not'
name|'in'
name|'ex'
op|'.'
name|'names'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Invalid handler extension name in \'image_handlers\' "'
nl|'\n'
string|'"option: %s, skip."'
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'processed_handler_names'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'mgr'
op|'='
name|'stevedore'
op|'.'
name|'driver'
op|'.'
name|'DriverManager'
op|'('
nl|'\n'
name|'namespace'
op|'='
string|"'nova.virt.image.handlers'"
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|','
nl|'\n'
name|'invoke_on_load'
op|'='
name|'True'
op|','
nl|'\n'
name|'invoke_kwds'
op|'='
op|'{'
string|'"driver"'
op|':'
name|'driver'
op|','
nl|'\n'
string|'"associate_fn"'
op|':'
name|'_image_handler_asso'
op|','
nl|'\n'
string|'"disassociate_fn"'
op|':'
name|'_image_handler_disasso'
op|'}'
op|')'
newline|'\n'
name|'_IMAGE_HANDLERS'
op|'.'
name|'append'
op|'('
name|'mgr'
op|'.'
name|'driver'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Failed to import image handler extension "'
nl|'\n'
string|'"%(name)s: %(err)s"'
op|')'
op|','
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'err'"
op|':'
name|'err'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|handle_image
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_image'
op|'('
name|'context'
op|'='
name|'None'
op|','
name|'image_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'target_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handle image using available handles.\n\n    This generator will return each available handler on each time.\n    :param context: Request context\n    :param image_id: The opaque image identifier\n    :param user_id: Request user id\n    :param project_id: Request project id\n    :param target_path: Where the image data to write\n    :raises NoImageHandlerAvailable: if no any image handler specified in\n        the configuration is available for this request.\n    """'
newline|'\n'
nl|'\n'
name|'handled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'if'
name|'target_path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'target_path'
op|'='
name|'target_path'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if target image has been handled before,'
nl|'\n'
comment|'# we can using previous handler process it again directly.'
nl|'\n'
dedent|''
name|'if'
name|'target_path'
name|'and'
name|'_IMAGE_HANDLERS_ASSO'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'_IMAGE_HANDLERS_ASSO'
op|'.'
name|'get'
op|'('
name|'target_path'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'image_handler'
op|','
name|'location'
op|','
name|'image_meta'
op|')'
op|'='
name|'ret'
newline|'\n'
name|'yield'
name|'image_handler'
op|','
name|'location'
op|','
name|'image_meta'
newline|'\n'
name|'handled'
op|'='
name|'image_handler'
op|'.'
name|'last_ops_handled'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'image_meta'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'handled'
name|'and'
name|'_IMAGE_HANDLERS'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'context'
name|'and'
name|'image_id'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'image_service'
op|','
name|'_image_id'
op|')'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
nl|'\n'
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
comment|'# Note(zhiyan): Glance maybe can not receive image'
nl|'\n'
comment|'# location property since Glance disabled it by default.'
nl|'\n'
name|'img_locs'
op|'='
name|'image_service'
op|'.'
name|'get_locations'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'for'
name|'image_handler'
name|'in'
name|'_IMAGE_HANDLERS'
op|':'
newline|'\n'
indent|'                '
name|'matched_locs'
op|'='
name|'_match_locations'
op|'('
name|'img_locs'
op|','
nl|'\n'
name|'image_handler'
op|'.'
name|'get_schemes'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'loc'
name|'in'
name|'matched_locs'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'image_handler'
op|','
name|'loc'
op|','
name|'image_meta'
newline|'\n'
name|'handled'
op|'='
name|'image_handler'
op|'.'
name|'last_ops_handled'
op|'('
op|')'
newline|'\n'
name|'if'
name|'handled'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'handled'
op|':'
newline|'\n'
comment|'# Note(zhiyan): using location-independent handler do it.'
nl|'\n'
indent|'            '
name|'for'
name|'image_handler'
name|'in'
name|'_IMAGE_HANDLERS'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'len'
op|'('
name|'image_handler'
op|'.'
name|'get_schemes'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'image_handler'
op|','
name|'None'
op|','
name|'image_meta'
newline|'\n'
name|'handled'
op|'='
name|'image_handler'
op|'.'
name|'last_ops_handled'
op|'('
op|')'
newline|'\n'
name|'if'
name|'handled'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'handled'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Can\'t handle image: %(image_id)s %(target_path)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'image_id'"
op|':'
name|'image_id'
op|','
string|"'target_path'"
op|':'
name|'target_path'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoImageHandlerAvailable'
op|'('
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

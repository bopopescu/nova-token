begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nUtility methods for working with WSGI servers\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'wsgi'
newline|'\n'
name|'eventlet'
op|'.'
name|'patcher'
op|'.'
name|'monkey_patch'
op|'('
name|'all'
op|'='
name|'False'
op|','
name|'socket'
op|'='
name|'True'
op|')'
newline|'\n'
name|'import'
name|'routes'
newline|'\n'
name|'import'
name|'routes'
op|'.'
name|'middleware'
newline|'\n'
nl|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"routes.middleware"'
op|')'
op|'.'
name|'addHandler'
op|'('
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_server
name|'def'
name|'run_server'
op|'('
name|'application'
op|','
name|'port'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run a WSGI server with the given application."""'
newline|'\n'
name|'sock'
op|'='
name|'eventlet'
op|'.'
name|'listen'
op|'('
op|'('
string|"'0.0.0.0'"
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'wsgi'
op|'.'
name|'server'
op|'('
name|'sock'
op|','
name|'application'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(gundlach): I think we should toss this class, now that it has no purpose.'
nl|'\n'
DECL|class|Application
dedent|''
name|'class'
name|'Application'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base WSGI application wrapper. Subclasses need to implement __call__."""'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'environ'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'r"""Subclasses will probably want to implement __call__ like this:\n\n        @webob.dec.wsgify\n        def __call__(self, req):\n          # Any of the following objects work as responses:\n\n          # Option 1: simple string\n          res = \'message\\n\'\n\n          # Option 2: a nicely formatted HTTP exception page\n          res = exc.HTTPForbidden(detail=\'Nice try\')\n\n          # Option 3: a webob Response object (in case you need to play with\n          # headers, or you want to be treated like an iterable, or or or)\n          res = Response();\n          res.app_iter = open(\'somefile\')\n\n          # Option 4: any wsgi app to be run next\n          res = self.application\n\n          # Option 5: you can get a Response object for a wsgi app, too, to\n          # play with headers etc\n          res = req.get_response(self.application)\n\n          # You can then just return your response...\n          return res\n          # ... or set req.response and return None.\n          req.response = res\n\n        See the end of http://pythonpaste.org/webob/modules/dec.html\n        for more info.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"You must implement __call__"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Middleware
dedent|''
dedent|''
name|'class'
name|'Middleware'
op|'('
name|'Application'
op|')'
op|':'
comment|'# pylint: disable-msg=W0223'
newline|'\n'
indent|'    '
string|'"""Base WSGI middleware wrapper. These classes require an\n    application to be initialized that will be called next."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
comment|'# pylint: disable-msg=W0231'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'application'
op|'='
name|'application'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Debug
dedent|''
dedent|''
name|'class'
name|'Debug'
op|'('
name|'Middleware'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper class that can be insertd into any WSGI application chain\n    to get information about the request and response."""'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'environ'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'environ'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'key'
op|','
string|'"="'
op|','
name|'value'
newline|'\n'
dedent|''
name|'print'
newline|'\n'
name|'wrapper'
op|'='
name|'debug_start_response'
op|'('
name|'start_response'
op|')'
newline|'\n'
name|'return'
name|'debug_print_body'
op|'('
name|'self'
op|'.'
name|'application'
op|'('
name|'environ'
op|','
name|'wrapper'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|debug_start_response
dedent|''
dedent|''
name|'def'
name|'debug_start_response'
op|'('
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrap the start_response to capture when called."""'
newline|'\n'
nl|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'status'
op|','
name|'headers'
op|','
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Print out all headers when start_response is called."""'
newline|'\n'
name|'print'
name|'status'
newline|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'value'
op|')'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'key'
op|','
string|'"="'
op|','
name|'value'
newline|'\n'
dedent|''
name|'print'
newline|'\n'
name|'start_response'
op|'('
name|'status'
op|','
name|'headers'
op|','
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|debug_print_body
dedent|''
name|'def'
name|'debug_print_body'
op|'('
name|'body'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print the body of the response as it is sent back."""'
newline|'\n'
nl|'\n'
DECL|class|Wrapper
name|'class'
name|'Wrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Iterate through all the body parts and print before returning."""'
newline|'\n'
nl|'\n'
DECL|member|__iter__
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'part'
name|'in'
name|'body'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
name|'part'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'part'
newline|'\n'
dedent|''
name|'print'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'Wrapper'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParsedRoutes
dedent|''
name|'class'
name|'ParsedRoutes'
op|'('
name|'Middleware'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Processed parsed routes from routes.middleware.RoutesMiddleware\n    and call either the controller if found or the default application\n    otherwise."""'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'environ'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'environ'
op|'['
string|"'routes.route'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'application'
op|'('
name|'environ'
op|','
name|'start_response'
op|')'
newline|'\n'
dedent|''
name|'app'
op|'='
name|'environ'
op|'['
string|"'wsgiorg.routing_args'"
op|']'
op|'['
number|'1'
op|']'
op|'['
string|"'controller'"
op|']'
newline|'\n'
name|'return'
name|'app'
op|'('
name|'environ'
op|','
name|'start_response'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MichaelRouterMiddleware
dedent|''
dedent|''
name|'class'
name|'MichaelRouterMiddleware'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Router that maps incoming requests to WSGI apps or to standard\n    controllers+actions.  The response will be a WSGI response; standard\n    controllers+actions will by default have their results serialized\n    to the requested Content Type, or you can subclass and override\n    _to_webob_response to customize this.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'map'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a router for the given routes.Mapper.  It may contain standard\n        routes (i.e. specifying controllers and actions), or may route to a\n        WSGI app by instead specifying a wsgi_app=SomeApp() parameter in\n        map.connect().\n        """'
newline|'\n'
name|'self'
op|'.'
name|'map'
op|'='
name|'map'
newline|'\n'
name|'self'
op|'.'
name|'_router'
op|'='
name|'routes'
op|'.'
name|'middleware'
op|'.'
name|'RoutesMiddleware'
op|'('
name|'self'
op|'.'
name|'__proceed'
op|','
name|'self'
op|'.'
name|'map'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'webob'
op|'.'
name|'dec'
op|'.'
name|'wsgify'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Route the incoming request to a controller based on self.map.\n        If no match, return a 404.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_router'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'webob'
op|'.'
name|'dec'
op|'.'
name|'wsgify'
newline|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|__proceed
name|'def'
name|'__proceed'
op|'('
name|'req'
op|')'
op|':'
newline|'\n'
comment|'# Called by self._router after matching the incoming request to a route'
nl|'\n'
comment|'# and putting the information into req.environ.  Either returns 404, the'
nl|'\n'
comment|'# routed WSGI app, or _to_webob_response(the action result).'
nl|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'req'
op|'.'
name|'environ'
op|'['
string|"'routes.route'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
newline|'\n'
dedent|''
name|'match'
op|'='
name|'environ'
op|'['
string|"'wsgiorg.routing_args'"
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
string|"'wsgi_app'"
name|'in'
name|'match'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'match'
op|'['
string|"'wsgi_app'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'='
name|'match'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'controller'
op|','
name|'action'
op|'='
name|'match'
op|'['
string|"'controller'"
op|']'
op|','
name|'match'
op|'['
string|"'action'"
op|']'
newline|'\n'
name|'delete'
name|'kwargs'
op|'['
string|"'controller'"
op|']'
newline|'\n'
name|'delete'
name|'kwargs'
op|'['
string|"'action'"
op|']'
newline|'\n'
name|'return'
name|'_to_webob_response'
op|'('
name|'req'
op|','
name|'getattr'
op|'('
name|'controller'
op|','
name|'action'
op|')'
op|'('
op|'**'
name|'kwargs'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_to_webob_response
dedent|''
dedent|''
name|'def'
name|'_to_webob_response'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When routing to a non-WSGI controller+action, the webob.Request and the\n        action\'s result will be passed here to be converted into a\n        webob.Response before returning up the WSGI chain.  By default it\n        serializes to the requested Content Type.\n        """'
newline|'\n'
name|'return'
name|'Serializer'
op|'('
name|'req'
op|')'
op|'.'
name|'serialize'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Serializer
dedent|''
dedent|''
name|'class'
name|'Serializer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Serializes a dictionary to a Content Type specified by a WSGI environment.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'environ'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a serializer based on the given WSGI environment."""'
newline|'\n'
name|'self'
op|'.'
name|'environ'
op|'='
name|'environ'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'('
name|'environ'
op|')'
newline|'\n'
comment|'# TODO(gundlach): temp'
nl|'\n'
name|'if'
string|"'applicatio/json'"
name|'in'
name|'req'
op|'.'
name|'accept'
op|')'
op|':'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'result'
op|')'
newline|'\n'
name|'else'
op|':'
newline|'\n'
name|'return'
string|"'<xmlified_yeah_baby>'"
op|'+'
name|'repr'
op|'('
name|'data'
op|')'
op|'+'
string|"'</xmlified_yeah_baby>'"
newline|'\n'
newline|'\n'
newline|'\n'
DECL|class|ApiVersionRouter
name|'class'
name|'ApiVersionRouter'
op|'('
name|'MichaelRouterMiddleware'
op|')'
op|':'
newline|'\n'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
name|'map'
op|'='
name|'routes'
op|'.'
name|'Mapper'
op|'('
op|')'
newline|'\n'
newline|'\n'
name|'map'
op|'.'
name|'connect'
op|'('
name|'None'
op|','
string|'"/v1.0/{path_info:.*}"'
op|','
name|'wsgi_app'
op|'='
name|'RsApiRouter'
op|'('
op|')'
op|')'
newline|'\n'
name|'map'
op|'.'
name|'connect'
op|'('
name|'None'
op|','
string|'"/ec2/{path_info:.*}"'
op|','
name|'wsgi_app'
op|'='
name|'Ec2ApiRouter'
op|'('
op|')'
op|')'
newline|'\n'
newline|'\n'
name|'super'
op|'('
name|'ApiVersionRouter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'map'
op|')'
newline|'\n'
newline|'\n'
DECL|class|RsApiRouter
name|'class'
name|'RsApiRouter'
op|'('
name|'MichaelRouterMiddleware'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
name|'map'
op|'='
name|'routes'
op|'.'
name|'Mapper'
op|'('
op|')'
newline|'\n'
newline|'\n'
name|'map'
op|'.'
name|'resource'
op|'('
string|'"server"'
op|','
string|'"servers"'
op|','
name|'controller'
op|'='
name|'ServerController'
op|'('
op|')'
op|')'
newline|'\n'
name|'map'
op|'.'
name|'resource'
op|'('
string|'"image"'
op|','
string|'"images"'
op|','
name|'controller'
op|'='
name|'ImageController'
op|'('
op|')'
op|')'
newline|'\n'
name|'map'
op|'.'
name|'resource'
op|'('
string|'"flavor"'
op|','
string|'"flavors"'
op|','
name|'controller'
op|'='
name|'FlavorController'
op|'('
op|')'
op|')'
newline|'\n'
name|'map'
op|'.'
name|'resource'
op|'('
string|'"sharedipgroup"'
op|','
string|'"sharedipgroups"'
op|','
newline|'\n'
indent|'                          '
name|'controller'
op|'='
name|'SharedIpGroupController'
op|'('
op|')'
op|')'
newline|'\n'
newline|'\n'
name|'super'
op|'('
name|'RsApiRouter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'map'
op|')'
newline|'\n'
newline|'\n'
DECL|class|Ec2ApiRouter
name|'class'
name|'Ec2ApiRouter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
op|'@'
name|'webob'
op|'.'
name|'dec'
op|'.'
name|'wsgify'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
name|'return'
string|"'dummy response'"
newline|'\n'
newline|'\n'
DECL|class|ServerController
name|'class'
name|'ServerController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__getattr__
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
name|'return'
op|'{'
string|"'dummy'"
op|':'
string|"'dummy response'"
op|'}'
newline|'\n'
name|'ImageController'
op|'='
name|'FlavorController'
op|'='
name|'SharedIpGroupController'
op|'='
name|'ServerController'
newline|'\n'
newline|'\n'
newline|'\n'
DECL|class|Router
name|'class'
name|'Router'
op|'('
name|'Middleware'
op|')'
op|':'
comment|'# pylint: disable-msg=R0921'
newline|'\n'
string|'"""Wrapper to help setup routes.middleware.RoutesMiddleware."""'
newline|'\n'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
name|'self'
op|'.'
name|'map'
op|'='
name|'routes'
op|'.'
name|'Mapper'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_build_map'
op|'('
op|')'
newline|'\n'
name|'application'
op|'='
name|'ParsedRoutes'
op|'('
name|'application'
op|')'
newline|'\n'
name|'application'
op|'='
name|'routes'
op|'.'
name|'middleware'
op|'.'
name|'RoutesMiddleware'
op|'('
name|'application'
op|','
name|'self'
op|'.'
name|'map'
op|')'
newline|'\n'
name|'super'
op|'('
name|'Router'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'application'
op|')'
newline|'\n'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'environ'
op|','
name|'start_response'
op|')'
op|':'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'application'
op|'('
name|'environ'
op|','
name|'start_response'
op|')'
newline|'\n'
newline|'\n'
DECL|member|_build_map
name|'def'
name|'_build_map'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
string|'"""Method to create new connections for the routing map."""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"You must implement _build_map"'
op|')'
newline|'\n'
newline|'\n'
DECL|member|_connect
name|'def'
name|'_connect'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
string|'"""Wrapper for the map.connect method."""'
newline|'\n'
name|'self'
op|'.'
name|'map'
op|'.'
name|'connect'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
newline|'\n'
newline|'\n'
DECL|function|route_args
name|'def'
name|'route_args'
op|'('
name|'application'
op|')'
op|':'
newline|'\n'
string|'"""Decorator to make grabbing routing args more convenient."""'
newline|'\n'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
string|'"""Call application with req and parsed routing args from."""'
newline|'\n'
name|'return'
name|'application'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'req'
op|'.'
name|'environ'
op|'['
string|"'wsgiorg.routing_args'"
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
newline|'\n'
name|'return'
name|'wrapper'
newline|'\n'
end_unit

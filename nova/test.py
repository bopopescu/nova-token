begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Base classes for our unit tests.\n\nAllows overriding of flags for use of fakes, and some black magic for\ninline callbacks.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'fixtures'
name|'import'
name|'EnvironmentVariable'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
name|'import'
name|'stubout'
newline|'\n'
name|'import'
name|'testtools'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'config'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
name|'import'
name|'migration'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'session'
name|'import'
name|'get_engine'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'manager'
name|'as'
name|'network_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'tests'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'policy_fixture'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|test_opts
name|'test_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'sqlite_clean_db'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'clean.sqlite'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'File name of clean sqlite db'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'fake_tests'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'should we use everything for testing'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'test_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'sql_connection'"
op|','
string|"'nova.db.sqlalchemy.session'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'sqlite_db'"
op|','
string|"'nova.db.sqlalchemy.session'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'state_path'"
op|','
string|"'nova.config'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'set_override'
op|'('
string|"'use_stderr'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'setup'
op|'('
string|"'nova'"
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
name|'eventlet'
op|'.'
name|'monkey_patch'
op|'('
name|'os'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_DB
name|'_DB'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reset_db
name|'def'
name|'reset_db'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'CONF'
op|'.'
name|'sql_connection'
op|'=='
string|'"sqlite://"'
op|':'
newline|'\n'
indent|'        '
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'dispose'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'if'
name|'_DB'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'connection'
op|'.'
name|'executescript'
op|'('
name|'_DB'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setup'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'state_path'
op|','
name|'CONF'
op|'.'
name|'sqlite_clean_db'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'state_path'
op|','
name|'CONF'
op|'.'
name|'sqlite_db'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|setup
dedent|''
dedent|''
name|'def'
name|'setup'
op|'('
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'fake_flags'
op|'.'
name|'set_defaults'
op|'('
name|'CONF'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'sql_connection'
op|'=='
string|'"sqlite://"'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'migration'
op|'.'
name|'db_version'
op|'('
op|')'
op|'>'
name|'migration'
op|'.'
name|'INIT_VERSION'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'testdb'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'state_path'
op|','
name|'CONF'
op|'.'
name|'sqlite_db'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'testdb'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'migration'
op|'.'
name|'db_sync'
op|'('
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'network'
op|'='
name|'network_manager'
op|'.'
name|'VlanManager'
op|'('
op|')'
newline|'\n'
name|'bridge_interface'
op|'='
name|'CONF'
op|'.'
name|'flat_interface'
name|'or'
name|'CONF'
op|'.'
name|'vlan_interface'
newline|'\n'
name|'network'
op|'.'
name|'create_networks'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'label'
op|'='
string|"'test'"
op|','
nl|'\n'
name|'cidr'
op|'='
name|'CONF'
op|'.'
name|'fixed_range'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'CONF'
op|'.'
name|'multi_host'
op|','
nl|'\n'
name|'num_networks'
op|'='
name|'CONF'
op|'.'
name|'num_networks'
op|','
nl|'\n'
name|'network_size'
op|'='
name|'CONF'
op|'.'
name|'network_size'
op|','
nl|'\n'
name|'cidr_v6'
op|'='
name|'CONF'
op|'.'
name|'fixed_range_v6'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'CONF'
op|'.'
name|'gateway'
op|','
nl|'\n'
name|'gateway_v6'
op|'='
name|'CONF'
op|'.'
name|'gateway_v6'
op|','
nl|'\n'
name|'bridge'
op|'='
name|'CONF'
op|'.'
name|'flat_network_bridge'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'bridge_interface'
op|','
nl|'\n'
name|'vpn_start'
op|'='
name|'CONF'
op|'.'
name|'vpn_start'
op|','
nl|'\n'
name|'vlan_start'
op|'='
name|'CONF'
op|'.'
name|'vlan_start'
op|','
nl|'\n'
name|'dns1'
op|'='
name|'CONF'
op|'.'
name|'flat_network_dns'
op|')'
newline|'\n'
name|'for'
name|'net'
name|'in'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'.'
name|'set_network_host'
op|'('
name|'ctxt'
op|','
name|'net'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'sql_connection'
op|'=='
string|'"sqlite://"'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'_DB'
newline|'\n'
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'_DB'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'line'
name|'for'
name|'line'
name|'in'
name|'conn'
op|'.'
name|'connection'
op|'.'
name|'iterdump'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cleandb'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'state_path'
op|','
name|'CONF'
op|'.'
name|'sqlite_clean_db'
op|')'
newline|'\n'
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'testdb'
op|','
name|'cleandb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestingException
dedent|''
dedent|''
name|'class'
name|'TestingException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCase
dedent|''
name|'class'
name|'TestCase'
op|'('
name|'testtools'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test case base class for all unit tests."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run before each test method to initialize test environment."""'
newline|'\n'
name|'super'
op|'('
name|'TestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_flags'
op|'.'
name|'set_defaults'
op|'('
name|'CONF'
op|')'
newline|'\n'
name|'config'
op|'.'
name|'parse_args'
op|'('
op|'['
op|']'
op|','
name|'default_config_files'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): We need a better method for creating fixtures for tests'
nl|'\n'
comment|'#             now that we have some required db setup for the system'
nl|'\n'
comment|'#             to work properly.'
nl|'\n'
name|'self'
op|'.'
name|'start'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'reset_db'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# emulate some of the mox stuff, we can't use the metaclass"
nl|'\n'
comment|'# because it screws with our generators'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'='
name|'mox'
op|'.'
name|'Mox'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'='
name|'stubout'
op|'.'
name|'StubOutForTesting'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'injected'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_services'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_modules'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'EnvironmentVariable'
op|'('
string|"'http_proxy'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'policy_fixture'
op|'.'
name|'PolicyFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Runs after each test method to tear down test environment."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'cleanup_dns_managers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'TestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# Reset any overridden flags'
nl|'\n'
indent|'            '
name|'CONF'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Unstub modules'
nl|'\n'
name|'for'
name|'name'
op|','
name|'mod'
name|'in'
name|'self'
op|'.'
name|'_modules'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'mod'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'sys'
op|'.'
name|'modules'
op|'['
name|'name'
op|']'
op|'='
name|'mod'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'pop'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_modules'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Stop any timers'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'injected'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'x'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Kill any services'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_services'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'x'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
comment|"# Delete attributes that don't start with _ so they don't pin"
nl|'\n'
comment|'# memory around unnecessarily for the duration of the test'
nl|'\n'
comment|'# suite'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'key'
name|'in'
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'keys'
op|'('
op|')'
name|'if'
name|'k'
op|'['
number|'0'
op|']'
op|'!='
string|"'_'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|stub_module
dedent|''
dedent|''
dedent|''
name|'def'
name|'stub_module'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'mod'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_modules'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_modules'
op|'['
name|'name'
op|']'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'modules'
op|'['
name|'name'
op|']'
op|'='
name|'mod'
newline|'\n'
nl|'\n'
DECL|member|flags
dedent|''
name|'def'
name|'flags'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override flag variables for a test."""'
newline|'\n'
name|'group'
op|'='
name|'kw'
op|'.'
name|'pop'
op|'('
string|"'group'"
op|','
name|'None'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kw'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'CONF'
op|'.'
name|'set_override'
op|'('
name|'k'
op|','
name|'v'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start_service
dedent|''
dedent|''
name|'def'
name|'start_service'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'host'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'host'
name|'and'
name|'host'
name|'or'
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'kwargs'
op|'.'
name|'setdefault'
op|'('
string|"'host'"
op|','
name|'host'
op|')'
newline|'\n'
name|'kwargs'
op|'.'
name|'setdefault'
op|'('
string|"'binary'"
op|','
string|"'nova-%s'"
op|'%'
name|'name'
op|')'
newline|'\n'
name|'svc'
op|'='
name|'service'
op|'.'
name|'Service'
op|'.'
name|'create'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'svc'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_services'
op|'.'
name|'append'
op|'('
name|'svc'
op|')'
newline|'\n'
name|'return'
name|'svc'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

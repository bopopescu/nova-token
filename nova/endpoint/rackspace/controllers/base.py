begin_unit
name|'from'
name|'nova'
name|'import'
name|'wsgi'
newline|'\n'
nl|'\n'
DECL|class|BaseController
name|'class'
name|'BaseController'
op|'('
name|'wsgi'
op|'.'
name|'Controller'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|render
name|'def'
name|'render'
op|'('
name|'cls'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
name|'cls'
op|'.'
name|'entity_name'
op|':'
name|'cls'
op|'.'
name|'render'
op|'('
name|'instance'
op|')'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|'"TODO"'
op|':'
string|'"TODO"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize the given dict to the response type requested in request.\n        Uses self._serialization_metadata if it exists, which is a dict mapping\n        MIME types to information needed to serialize to that type.\n        """'
newline|'\n'
name|'_metadata'
op|'='
name|'getattr'
op|'('
name|'type'
op|'('
name|'self'
op|')'
op|','
string|'"_serialization_metadata"'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'Serializer'
op|'('
name|'request'
op|'.'
name|'environ'
op|','
name|'_metadata'
op|')'
op|'.'
name|'to_content_type'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

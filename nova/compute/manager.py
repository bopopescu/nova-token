begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all processes relating to instances (guest vms).\n\nThe :py:class:`ComputeManager` class is a :py:class:`nova.manager.Manager` that\nhandles RPC calls relating to creating instances.  It is responsible for\nbuilding a disk image, launching it via the underlying virtualization driver,\nresponding to calls to check its state, attaching persistent storage, and\nterminating it.\n\n**Related Flags**\n\n:instances_path:  Where instances are kept on disk\n:compute_driver:  Name of class that is used to handle virtualization, loaded\n                  by :func:`nova.utils.import_object`\n:volume_manager:  Name of class that handles persistent storage, loaded by\n                  :func:`nova.utils.import_object`\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'api'
name|'as'
name|'notifier_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'utils'
name|'import'
name|'terminate_volumes'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'instances_path'"
op|','
string|"'$state_path/instances'"
op|','
nl|'\n'
string|"'where instances are stored on disk'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'compute_driver'"
op|','
string|"'nova.virt.connection.get_connection'"
op|','
nl|'\n'
string|"'Driver to use for controlling virtualization'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'stub_network'"
op|','
name|'False'
op|','
nl|'\n'
string|"'Stub network related code'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'password_length'"
op|','
number|'12'
op|','
nl|'\n'
string|"'Length of generated admin passwords'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'console_host'"
op|','
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'Console proxy host to use to connect to instances on'"
nl|'\n'
string|"'this host.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'live_migration_retry_count'"
op|','
number|'30'
op|','
nl|'\n'
string|'"Retry count needed in live_migration."'
nl|'\n'
string|'" sleep 1 sec for each count"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"rescue_timeout"'
op|','
number|'0'
op|','
nl|'\n'
string|'"Automatically unrescue an instance after N seconds."'
nl|'\n'
string|'" Set to 0 to disable."'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'auto_assign_floating_ip'"
op|','
name|'False'
op|','
nl|'\n'
string|"'Autoassigning floating ip to VM'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'host_state_interval'"
op|','
number|'120'
op|','
nl|'\n'
string|"'Interval in seconds for querying the host status'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|checks_instance_lock
name|'def'
name|'checks_instance_lock'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to prevent action against locked instances for non-admins."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: decorating: |%s|"'
op|')'
op|','
name|'function'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: arguments: |%(self)s| |%(context)s|"'
nl|'\n'
string|'" |%(instance_id)s|"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'locked'
op|'='
name|'self'
op|'.'
name|'get_lock'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'admin'
op|'='
name|'context'
op|'.'
name|'is_admin'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: locked: |%s|"'
op|')'
op|','
name|'locked'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: admin: |%s|"'
op|')'
op|','
name|'admin'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
comment|'# if admin or unlocked call function otherwise log error'
nl|'\n'
name|'if'
name|'admin'
name|'or'
name|'not'
name|'locked'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: executing: |%s|"'
op|')'
op|','
name|'function'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: not executing |%s|"'
op|')'
op|','
nl|'\n'
name|'function'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeManager
dedent|''
name|'class'
name|'ComputeManager'
op|'('
name|'manager'
op|'.'
name|'SchedulerDependentManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages the running instances from creation to destruction."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load configuration options and connect to the hypervisor."""'
newline|'\n'
comment|'# TODO(vish): sync driver creation logic with the rest of the system'
nl|'\n'
comment|'#             and redocument the module docstring'
nl|'\n'
name|'if'
name|'not'
name|'compute_driver'
op|':'
newline|'\n'
indent|'            '
name|'compute_driver'
op|'='
name|'FLAGS'
op|'.'
name|'compute_driver'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'='
name|'utils'
op|'.'
name|'check_isinstance'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'compute_driver'
op|')'
op|','
nl|'\n'
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to load the virtualization driver: %s"'
op|')'
op|'%'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'volume_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_last_host_check'
op|'='
number|'0'
newline|'\n'
name|'super'
op|'('
name|'ComputeManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|'"compute"'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialization for a standalone compute service."""'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_state
dedent|''
name|'def'
name|'_update_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the state of an instance from the driver info."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'state'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'info'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'power_state'
op|'.'
name|'FAILED'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_launched_at
dedent|''
name|'def'
name|'_update_launched_at'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'launched_at'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the launched_at parameter of the given instance."""'
newline|'\n'
name|'data'
op|'='
op|'{'
string|"'launched_at'"
op|':'
name|'launched_at'
name|'or'
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_image_ref
dedent|''
name|'def'
name|'_update_image_ref'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'image_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the image_id for the given instance."""'
newline|'\n'
name|'data'
op|'='
op|'{'
string|"'image_ref'"
op|':'
name|'image_ref'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_topic
dedent|''
name|'def'
name|'get_console_topic'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the console host for a project on this host.\n\n        Currently this is just set in the flags for each compute host.\n\n        """'
newline|'\n'
comment|'#TODO(mdragon): perhaps make this variable by console_type?'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'console_topic'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'console_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_pool_info'
op|'('
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|refresh_security_group_rules
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group rules.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|refresh_security_group_members
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'security_group_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group members.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|refresh_provider_fw_rules
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This call passes straight through to the virtualization driver."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_block_device_mapping
dedent|''
name|'def'
name|'_setup_block_device_mapping'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""setup volumes for block device mapping"""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|')'
newline|'\n'
nl|'\n'
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"setting up bdm %s"'
op|')'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'if'
op|'('
op|'('
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
nl|'\n'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# TODO(yamahata): default name and description'
nl|'\n'
indent|'                '
name|'vol'
op|'='
name|'volume_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
comment|'# TODO(yamahata): creating volume simultaneously'
nl|'\n'
comment|'#                 reduces creation time?'
nl|'\n'
name|'volume_api'
op|'.'
name|'wait_creation'
op|'('
name|'context'
op|','
name|'vol'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'volume_id'"
op|':'
name|'vol'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'vol'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
op|'('
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
name|'is'
name|'None'
op|')'
name|'or'
nl|'\n'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'corrupted state of block device mapping '"
nl|'\n'
string|"'id: %(id)s '"
nl|'\n'
string|"'snapshot: %(snapshot_id) volume: %(vollume_id)'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'bdm'
op|'['
string|"'snapshot'"
op|']'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
name|'_'
op|'('
string|"'broken block device mapping %d'"
op|')'
op|'%'
nl|'\n'
name|'bdm'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'dev_path'
op|'='
name|'self'
op|'.'
name|'_attach_volume_boot'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
op|'{'
string|"'device_path'"
op|':'
name|'dev_path'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# TODO(yamahata): ephemeral/swap device support'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'block_device_mapping: '"
nl|'\n'
string|"'ephemeral device is not supported yet'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# TODO(yamahata): NoDevice support'
nl|'\n'
indent|'                '
name|'assert'
name|'bdm'
op|'['
string|"'no_device'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'block_device_mapping: '"
nl|'\n'
string|"'no device is not supported yet'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'block_device_mapping'
newline|'\n'
nl|'\n'
DECL|member|_run_instance
dedent|''
name|'def'
name|'_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Launch a new instance with specified options."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'injected_files'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'injected_files'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'admin_pass'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'admin_password'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'name'"
op|']'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Instance has already been created"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"instance %s: starting..."'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'launched_on'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'networking'"
op|')'
newline|'\n'
nl|'\n'
name|'is_vpn'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|"# NOTE(vish): This could be a cast because we don't do anything"
nl|'\n'
comment|"#             with the address currently, but I'm leaving it as"
nl|'\n'
comment|'#             a call to ensure that network setup completes.  We'
nl|'\n'
comment|'#             will eventually also need to save the address here.'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'                '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'vpn'
op|'='
name|'is_vpn'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance network_info: |%s|"'
op|')'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'setup_compute_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# TODO(tr3buchet) not really sure how this should be handled.'
nl|'\n'
comment|'# virt requires network_info to be passed in but stub_network'
nl|'\n'
comment|'# is enabled. Setting to [] for now will cause virt to skip'
nl|'\n'
comment|'# all vif creation and network injection, maybe this is correct'
nl|'\n'
indent|'                '
name|'network_info'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'bd_mapping'
op|'='
name|'self'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(vish) check to make sure the availability zone matches'
nl|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'power_state'
op|'.'
name|'BUILDING'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'bd_mapping'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance \'%(instance_id)s\' failed to spawn. Is "'
nl|'\n'
string|'"virtualization enabled in the BIOS? Details: "'
nl|'\n'
string|'"%(ex)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_launched_at'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.create'"
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# FIXME(wwolf): We are just ignoring InstanceNotFound'
nl|'\n'
comment|'# exceptions here in case the instance was immediately'
nl|'\n'
comment|'# deleted before it actually got created.  This should'
nl|'\n'
comment|'# be fixed once we have no-db-messaging'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|start_instance
name|'def'
name|'start_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starting an instance on this host."""'
newline|'\n'
comment|"# TODO(yamahata): injected_files isn't supported."
nl|'\n'
comment|"#                 Anyway OSAPI doesn't support stop/start yet"
nl|'\n'
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_shutdown_instance
dedent|''
name|'def'
name|'_shutdown_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'action_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"%(action_str)s instance %(instance_id)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'action_str'"
op|':'
name|'action_str'
op|','
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'volumes'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'volumes'"
op|')'
name|'or'
op|'['
op|']'
newline|'\n'
name|'for'
name|'volume'
name|'in'
name|'volumes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'volume'
op|'['
string|"'id'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance'
op|'['
string|"'state'"
op|']'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
name|'and'
nl|'\n'
name|'instance'
op|'['
string|"'state_description'"
op|']'
op|'!='
string|"'stopped'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'trying to destroy already destroyed'"
nl|'\n'
string|"' instance: %s'"
op|')'
op|'%'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'action_str'
op|'=='
string|"'Terminating'"
op|':'
newline|'\n'
indent|'            '
name|'terminate_volumes'
op|'('
name|'self'
op|'.'
name|'db'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|terminate_instance
name|'def'
name|'terminate_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
string|"'Terminating'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(ja): should we keep it in a terminated state for a bit?'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.delete'"
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|stop_instance
name|'def'
name|'stop_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stopping an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
string|"'Stopping'"
op|')'
newline|'\n'
comment|'# instance state will be updated to stopped by _poll_instance_states()'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|rebuild_instance
name|'def'
name|'rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy and re-make this instance.\n\n        A \'rebuild\' effectively purges all existing data from the system and\n        remakes the VM with given \'metadata\' and \'personalities\'.\n\n        :param context: `nova.RequestContext` object\n        :param instance_id: Instance identifier (integer)\n        :param image_ref: Image identifier (href or integer)\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebuilding instance %s"'
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'power_state'
op|'.'
name|'BUILDING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'image_ref'"
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'image_ref'
op|'='
name|'image_ref'
newline|'\n'
name|'instance_ref'
op|'.'
name|'injected_files'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'injected_files'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_image_ref'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'image_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_launched_at'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'image_ref'
op|'='
name|'image_ref'
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.rebuild'"
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|reboot_instance
name|'def'
name|'reboot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebooting instance %s"'
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance_ref'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to reboot a non-running '"
nl|'\n'
string|"'instance: %(instance_id)s (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'rebooting'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'setup_compute_network'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|snapshot_instance
name|'def'
name|'snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'image_id'
op|','
nl|'\n'
name|'image_type'
op|'='
string|"'snapshot'"
op|','
name|'backup_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'rotation'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot an instance on this host.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param image_id: glance.db.sqlalchemy.models.Image.Id\n        :param image_type: snapshot | backup\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE(sirp): update_state currently only refreshes the state field'
nl|'\n'
comment|'# if we add is_snapshotting, we will need this refreshed too,'
nl|'\n'
comment|'# potentially?'
nl|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: snapshotting'"
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance_ref'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to snapshot a non-running '"
nl|'\n'
string|"'instance: %(instance_id)s (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'snapshot'
op|'('
name|'instance_ref'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'rotation'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ImageRotationNotAllowed'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'rotation'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'rotate_backups'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'backup_type'
op|','
nl|'\n'
name|'rotation'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'RotationRequiredForBackup'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Image type not recognized %s'"
op|')'
op|'%'
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rotate_backups
dedent|''
dedent|''
name|'def'
name|'rotate_backups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete excess backups associated to an instance.\n\n        Instances are allowed a fixed number of backups (the rotation number);\n        this method deletes the oldest backups that exceed the rotation\n        threshold.\n\n        :param context: security context\n        :param instance_uuid: string representing uuid of instance\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
comment|'# NOTE(jk0): Eventually extract this out to the ImageService?'
nl|'\n'
DECL|function|fetch_images
name|'def'
name|'fetch_images'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'images'
op|'='
op|'['
op|']'
newline|'\n'
name|'marker'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'batch'
op|'='
name|'image_service'
op|'.'
name|'detail'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|','
nl|'\n'
name|'marker'
op|'='
name|'marker'
op|','
name|'sort_key'
op|'='
string|"'created_at'"
op|','
name|'sort_dir'
op|'='
string|"'desc'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'batch'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'images'
op|'+='
name|'batch'
newline|'\n'
name|'marker'
op|'='
name|'batch'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'images'
newline|'\n'
nl|'\n'
dedent|''
name|'image_service'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'property-image_type'"
op|':'
string|"'backup'"
op|','
nl|'\n'
string|"'property-backup_type'"
op|':'
name|'backup_type'
op|','
nl|'\n'
string|"'property-instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
nl|'\n'
name|'images'
op|'='
name|'fetch_images'
op|'('
op|')'
newline|'\n'
name|'num_images'
op|'='
name|'len'
op|'('
name|'images'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found %(num_images)d images (rotation: %(rotation)d)"'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'num_images'
op|'>'
name|'rotation'
op|':'
newline|'\n'
comment|'# NOTE(sirp): this deletes all backups that exceed the rotation'
nl|'\n'
comment|'# limit'
nl|'\n'
indent|'            '
name|'excess'
op|'='
name|'len'
op|'('
name|'images'
op|')'
op|'-'
name|'rotation'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Rotating out %d backups"'
op|'%'
name|'excess'
op|')'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'excess'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'='
name|'images'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting image %d"'
op|'%'
name|'image_id'
op|')'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'new_pass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for an instance on this host.\n\n        This is generally only called by API password resets after an\n        image has been built.\n        """'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'new_pass'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Generate a random password'
nl|'\n'
indent|'            '
name|'new_pass'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'max_tries'
op|'='
number|'10'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'max_tries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'instance_state'
op|'='
name|'instance_ref'
op|'['
string|'"state"'
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Instance is not running'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_admin_password'
op|'('
name|'instance_ref'
op|','
name|'new_pass'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Instance %s: Root password set"'
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|"# NOTE(dprince): if the driver doesn't implement"
nl|'\n'
comment|'# set_admin_password we break to avoid a loop'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'set_admin_password is not implemented '"
nl|'\n'
string|"'by this driver.'"
op|')'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Catch all here because this could be anything.'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'e'
op|')'
newline|'\n'
name|'if'
name|'i'
op|'=='
name|'max_tries'
op|'-'
number|'1'
op|':'
newline|'\n'
comment|'# At some point this exception may make it back'
nl|'\n'
comment|"# to the API caller, and we don't want to reveal"
nl|'\n'
comment|'# too much.  The real exception is logged above'
nl|'\n'
indent|'                        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Internal error'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the specified path in an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_state'
op|'='
name|'instance_ref'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'instance_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to inject a file into a non-running '"
nl|'\n'
string|"'instance: %(instance_id)s (state: %(instance_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'nm'
op|'='
name|'instance_ref'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'instance %(nm)s: injecting file to %(path)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_file'
op|'('
name|'instance_ref'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|agent_update
name|'def'
name|'agent_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update agent running on an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_state'
op|'='
name|'instance_ref'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'instance_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to update agent on a non-running '"
nl|'\n'
string|"'instance: %(instance_id)s (state: %(instance_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'nm'
op|'='
name|'instance_ref'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'instance %(nm)s: updating agent to %(url)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'agent_update'
op|'('
name|'instance_ref'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|rescue_instance
name|'def'
name|'rescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: rescuing'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'rescuing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'setup_compute_network'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'_update_state'
op|'='
name|'lambda'
name|'result'
op|':'
name|'self'
op|'.'
name|'_update_state_callback'
op|'('
nl|'\n'
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rescue'
op|'('
name|'instance_ref'
op|','
name|'_update_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|unrescue_instance
name|'def'
name|'unrescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: unrescuing'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'unrescuing'"
op|')'
newline|'\n'
name|'_update_state'
op|'='
name|'lambda'
name|'result'
op|':'
name|'self'
op|'.'
name|'_update_state_callback'
op|'('
nl|'\n'
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unrescue'
op|'('
name|'instance_ref'
op|','
name|'_update_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_update_state_callback
name|'def'
name|'_update_state_callback'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update instance state when async task completes."""'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the source instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.resize.confirm'"
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the new instance on the destination machine.\n\n        Reverts the model changes, and powers on the old instance on the\n        source machine.\n\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'finish_revert_resize'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
nl|'\n'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
op|'}'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|finish_revert_resize
name|'def'
name|'finish_revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes the second half of reverting a resize.\n\n        Power back on the source instance and revert the resized attributes\n        in the database.\n\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_type_get_by_flavor_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'old_flavor_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# Just roll back the record. There's no need to resize down since"
nl|'\n'
comment|"# the 'old' VM already has the preferred attributes"
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'dict'
op|'('
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'revert_resize'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'reverted'"
op|'}'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.resize.revert'"
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|prep_resize
name|'def'
name|'prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'flavor_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiates the process of moving a running instance to another host.\n\n        Possibly changes the RAM and disk size in the process.\n\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|'=='
name|'FLAGS'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
nl|'\n'
string|"'Migration error: destination same as source!'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_type'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_type_get_by_flavor_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'flavor_id'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'source_compute'"
op|':'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'FLAGS'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dest_host'"
op|':'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
op|','
nl|'\n'
string|"'old_flavor_id'"
op|':'
name|'instance_type'
op|'['
string|"'flavorid'"
op|']'
op|','
nl|'\n'
string|"'new_flavor_id'"
op|':'
name|'flavor_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'pre-migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: migrating to '"
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'resize_instance'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
nl|'\n'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
op|'}'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'new_instance_type'
op|'='
name|'instance_type'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'new_instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.resize.prep'"
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|resize_instance
name|'def'
name|'resize_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts the migration of a running instance to another host."""'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'instance_ref'
op|','
name|'migration_ref'
op|'['
string|"'dest_host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'post-migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_host_and_topic'
op|'('
nl|'\n'
name|'context'
op|','
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
op|'{'
string|"'method'"
op|':'
string|"'finish_resize'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'migration_id'"
op|':'
name|'migration_id'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'disk_info'"
op|':'
name|'disk_info'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|finish_resize
name|'def'
name|'finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'migration_id'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes the migration process.\n\n        Sets up the newly transferred disk and turns on the instance at its\n        new host machine.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'instance_id'"
op|']'
op|')'
newline|'\n'
comment|'# TODO(mdietz): apply the rest of the instance_type attributes going'
nl|'\n'
comment|"# after they're supported"
nl|'\n'
name|'instance_type'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_type_get_by_flavor_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'new_flavor_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# reload the updated instance ref'
nl|'\n'
comment|'# FIXME(mdietz): is there reload functionality?'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_resize'
op|'('
name|'instance'
op|','
name|'disk_info'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'finished'"
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|add_fixed_ip_to_instance
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to add new fixed_ip to instance\n        then injects the new network info and resets instance networking.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|pause_instance
name|'def'
name|'pause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: pausing'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'pausing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pause'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'lambda'
name|'result'
op|':'
name|'self'
op|'.'
name|'_update_state_callback'
op|'('
name|'self'
op|','
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|unpause_instance
name|'def'
name|'unpause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause a paused instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: unpausing'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'unpausing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unpause'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'lambda'
name|'result'
op|':'
name|'self'
op|'.'
name|'_update_state_callback'
op|'('
name|'self'
op|','
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|set_host_enabled
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'enabled'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_host_enabled'
op|'('
name|'host'
op|','
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for an instance on this host."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|'"state"'
op|']'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"instance %s: retrieving diagnostics"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|suspend_instance
name|'def'
name|'suspend_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: suspending'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'suspending'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'suspend'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'lambda'
name|'result'
op|':'
name|'self'
op|'.'
name|'_update_state_callback'
op|'('
name|'self'
op|','
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|resume_instance
name|'def'
name|'resume_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given suspended instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: resuming'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'resuming'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'lambda'
name|'result'
op|':'
name|'self'
op|'.'
name|'_update_state_callback'
op|'('
name|'self'
op|','
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'result'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|lock_instance
name|'def'
name|'lock_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: locking'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
op|'{'
string|"'locked'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|unlock_instance
name|'def'
name|'unlock_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: unlocking'"
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
op|'{'
string|"'locked'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_lock
name|'def'
name|'get_lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the boolean state of the given instance\'s lock."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: getting locked state'"
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'instance_ref'
op|'['
string|"'locked'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the given instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: reset network'"
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reset_network'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: inject network info'"
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"network_info to inject: |%s|"'
op|')'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the console output for the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Get console output for instance %s"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_output'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'return'
name|'output'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|','
string|"'replace'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_ajax_console
name|'def'
name|'get_ajax_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for an ajax console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: getting ajax console"'
op|')'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_ajax_console'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a vnc console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: getting vnc console"'
op|')'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_volume_boot
dedent|''
name|'def'
name|'_attach_volume_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance at boot time. So actual attach\n        is done by instance creation"""'
newline|'\n'
nl|'\n'
comment|'# TODO(yamahata):'
nl|'\n'
comment|'# should move check_attach to volume manager?'
nl|'\n'
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"instance %(instance_id)s: booting with "'
nl|'\n'
string|'"volume %(volume_id)s at %(mountpoint)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'dev_path'
op|'='
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'setup_compute_volume'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_attached'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
newline|'\n'
name|'return'
name|'dev_path'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"instance %(instance_id)s: attaching volume %(volume_id)s"'
nl|'\n'
string|'" to %(mountpoint)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'dev_path'
op|'='
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'setup_compute_volume'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'attach_volume'
op|'('
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'dev_path'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_attached'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume_id'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'mountpoint'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
comment|'# NOTE(vish): The inline callback eats the exception info so we'
nl|'\n'
comment|'#             log the traceback here and reraise the same'
nl|'\n'
comment|'#             ecxception below.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"instance %(instance_id)s: attach failed"'
nl|'\n'
string|'" %(mountpoint)s, removing"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'remove_compute_volume'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume_id'
op|')'
newline|'\n'
name|'raise'
name|'exc'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
DECL|member|_detach_volume
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|','
name|'destroy_bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'volume_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'mp'
op|'='
name|'volume_ref'
op|'['
string|"'mountpoint'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Detach volume %(volume_id)s from mountpoint %(mp)s"'
nl|'\n'
string|'" on instance %(instance_id)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'name'"
op|']'
name|'not'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Detaching volume from unknown instance %s"'
op|')'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_volume'
op|'('
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'volume_ref'
op|'['
string|"'mountpoint'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'remove_compute_volume'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_detached'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'if'
name|'destroy_bdm'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_volume'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_volume
dedent|''
name|'def'
name|'remove_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove volume on compute host.\n\n        :param context: security context\n        :param volume_id: volume ID\n        """'
newline|'\n'
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'remove_compute_volume'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|compare_cpu
name|'def'
name|'compare_cpu'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'cpu_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks that the host cpu is compatible with a cpu given by xml.\n\n        :param context: security context\n        :param cpu_info: json string obtained from virConnect.getCapabilities\n        :returns: See driver.compare_cpu\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'compare_cpu'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|create_shared_storage_test_file
name|'def'
name|'create_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes tmpfile under FLAGS.instance_path.\n\n        This method enables compute nodes to recognize that they mounts\n        same shared storage. (create|check|creanup)_shared_storage_test_file()\n        is a pair.\n\n        :param context: security context\n        :returns: tmpfile name(basename)\n\n        """'
newline|'\n'
name|'dirpath'
op|'='
name|'FLAGS'
op|'.'
name|'instances_path'
newline|'\n'
name|'fd'
op|','
name|'tmp_file'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'dir'
op|'='
name|'dirpath'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating tmpfile %s to notify to other "'
nl|'\n'
string|'"compute nodes that they should mount "'
nl|'\n'
string|'"the same storage."'
op|')'
op|'%'
name|'tmp_file'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|check_shared_storage_test_file
name|'def'
name|'check_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms existence of the tmpfile under FLAGS.instances_path.\n\n        :param context: security context\n        :param filename: confirm existence of FLAGS.instances_path/thisfile\n\n        """'
newline|'\n'
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tmp_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FileNotFound'
op|'('
name|'file_path'
op|'='
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|cleanup_shared_storage_test_file
name|'def'
name|'cleanup_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes existence of the tmpfile under FLAGS.instances_path.\n\n        :param context: security context\n        :param filename: remove existence of FLAGS.instances_path/thisfile\n\n        """'
newline|'\n'
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'filename'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'remove'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|update_available_resource
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See comments update_resource_info.\n\n        :param context: security context\n        :returns: See driver.update_available_resource()\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_live_migration
dedent|''
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparations for live migration at dest host.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'time'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'='
name|'greenthread'
newline|'\n'
nl|'\n'
comment|'# Getting instance info'
nl|'\n'
dedent|''
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Getting fixed ips'
nl|'\n'
name|'fixed_ips'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_fixed_addresses'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
name|'instance_id'
op|'='
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# If any volume is mounted, prepare here.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"%s has no volume."'
op|')'
op|','
name|'hostname'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'v'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'setup_compute_volume'
op|'('
name|'context'
op|','
name|'v'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Bridge settings.'
nl|'\n'
comment|'# Call this method prior to ensure_filtering_rules_for_instance,'
nl|'\n'
comment|'# since bridge is not set up, ensure_filtering_rules_for instance'
nl|'\n'
comment|'# fails.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Retry operation is necessary because continuously request comes,'
nl|'\n'
comment|'# concorrent request occurs to iptables, then it complains.'
nl|'\n'
dedent|''
dedent|''
name|'max_retry'
op|'='
name|'FLAGS'
op|'.'
name|'live_migration_retry_count'
newline|'\n'
name|'for'
name|'cnt'
name|'in'
name|'range'
op|'('
name|'max_retry'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'setup_compute_network'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cnt'
op|'=='
name|'max_retry'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"setup_compute_network() failed %(cnt)d."'
nl|'\n'
string|'"Retry up to %(max_retry)d for %(hostname)s."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating filters to hypervisors and firewalls.'
nl|'\n'
comment|'# An example is that nova-instance-instance-xxx,'
nl|'\n'
comment|'# which is written to libvirt.xml(Check "virsh nwfilter-list")'
nl|'\n'
comment|'# This nwfilter is necessary on the destination host.'
nl|'\n'
comment|'# In addition, this method is creating filtering rule'
nl|'\n'
comment|'# onto destination host.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'dest'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Executing live migration.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest: destination host\n\n        """'
newline|'\n'
comment|'# Get instance for error handling.'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'i_name'
op|'='
name|'instance_ref'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Checking volume node is working correctly when any volumes'
nl|'\n'
comment|'# are attached to instances.'
nl|'\n'
indent|'            '
name|'if'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'volume_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"check_for_export"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Asking dest host to preparing live migration.'
nl|'\n'
dedent|''
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"pre_live_migration"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Pre live migration for %(i_name)s failed at %(dest)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recover_live_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
comment|'# Executing live migration'
nl|'\n'
comment|'# live_migration might raises exceptions, but'
nl|'\n'
comment|'# nothing must be recovered in this version.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'recover_live_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration
dedent|''
name|'def'
name|'post_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration.\n\n        This method is called from live_migration\n        and mainly updating database record.\n\n        :param ctxt: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest: destination host\n\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'post_live_migration() is started..'"
op|')'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Detaching volumes.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'vol'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_get_all_by_instance'
op|'('
name|'ctxt'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'volume_manager'
op|'.'
name|'remove_compute_volume'
op|'('
name|'ctxt'
op|','
name|'vol'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Releasing vlan.'
nl|'\n'
comment|'# (not necessary in current implementation?)'
nl|'\n'
nl|'\n'
comment|'# Releasing security group ingress rule.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Database updating.'
nl|'\n'
name|'i_name'
op|'='
name|'instance_ref'
op|'.'
name|'name'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Not return if floating_ip is not found, otherwise,'
nl|'\n'
comment|'# instance never be accessible..'
nl|'\n'
indent|'            '
name|'floating_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'floating_ip'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No floating_ip is found for %s.'"
op|')'
op|','
name|'i_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'floating_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_update'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No floating_ip is found for %s.'"
op|')'
op|','
name|'i_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Live migration: Unexpected error: "'
nl|'\n'
string|'"%(i_name)s cannot inherit floating "'
nl|'\n'
string|'"ip.\\n%(e)s"'
op|')'
op|'%'
op|'('
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restore instance/volume state'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'recover_live_migration'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Migrating %(i_name)s to %(dest)s finished successfully.'"
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"You may see the error \\"libvirt: QEMU error: "'
nl|'\n'
string|'"Domain not found: no domain with matching name.\\" "'
nl|'\n'
string|'"This error can be safely ignored."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|recover_live_migration
dedent|''
name|'def'
name|'recover_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'dest'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recovers Instance/volume state from migrating -> running.\n\n        :param ctxt: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param host: DB column value is updated by this hostname.\n                     If none, the host instance currently running is selected.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'state_description'"
op|':'
string|"'running'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'dest'
op|':'
newline|'\n'
indent|'            '
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'volume_ref'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'volume_id'
op|'='
name|'volume_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'ctxt'
op|','
name|'volume_id'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
name|'if'
name|'dest'
op|':'
newline|'\n'
indent|'                '
name|'volume_api'
op|'.'
name|'remove_from_compute'
op|'('
name|'ctxt'
op|','
name|'volume_id'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|periodic_tasks
dedent|''
dedent|''
dedent|''
name|'def'
name|'periodic_tasks'
op|'('
name|'self'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tasks to be run at a periodic interval."""'
newline|'\n'
name|'error_list'
op|'='
name|'super'
op|'('
name|'ComputeManager'
op|','
name|'self'
op|')'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'error_list'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'error_list'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'rescue_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rescued_instances'
op|'('
name|'FLAGS'
op|'.'
name|'rescue_timeout'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error during poll_rescued_instances: %s"'
op|')'
op|','
nl|'\n'
name|'unicode'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
name|'error_list'
op|'.'
name|'append'
op|'('
name|'ex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_report_driver_status'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error during report_driver_status(): %s"'
op|')'
op|','
nl|'\n'
name|'unicode'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
name|'error_list'
op|'.'
name|'append'
op|'('
name|'ex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_poll_instance_states'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Error during instance poll: %s"'
op|')'
op|','
nl|'\n'
name|'unicode'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
name|'error_list'
op|'.'
name|'append'
op|'('
name|'ex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'error_list'
newline|'\n'
nl|'\n'
DECL|member|_report_driver_status
dedent|''
name|'def'
name|'_report_driver_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_host_check'
op|'>'
name|'FLAGS'
op|'.'
name|'host_state_interval'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_host_check'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating host status"'
op|')'
op|')'
newline|'\n'
comment|'# This will grab info about the host and queue it'
nl|'\n'
comment|'# to be sent to the Schedulers.'
nl|'\n'
name|'self'
op|'.'
name|'update_service_capabilities'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_poll_instance_states
dedent|''
dedent|''
name|'def'
name|'_poll_instance_states'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances_detail'
op|'('
op|')'
newline|'\n'
name|'vm_instances'
op|'='
name|'dict'
op|'('
op|'('
name|'vm'
op|'.'
name|'name'
op|','
name|'vm'
op|')'
name|'for'
name|'vm'
name|'in'
name|'vm_instances'
op|')'
newline|'\n'
nl|'\n'
comment|'# Keep a list of VMs not in the DB, cross them off as we find them'
nl|'\n'
name|'vms_not_found_in_db'
op|'='
name|'list'
op|'('
name|'vm_instances'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'db_instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'db_instance'
name|'in'
name|'db_instances'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'db_instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'db_state'
op|'='
name|'db_instance'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'vm_instance'
op|'='
name|'vm_instances'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_instance'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# NOTE(justinsb): We have to be very careful here, because a'
nl|'\n'
comment|'# concurrent operation could be in progress (e.g. a spawn)'
nl|'\n'
indent|'                '
name|'if'
name|'db_state'
op|'=='
name|'power_state'
op|'.'
name|'BUILDING'
op|':'
newline|'\n'
comment|'# TODO(justinsb): This does mean that if we crash during a'
nl|'\n'
comment|'# spawn, the machine will never leave the spawning state,'
nl|'\n'
comment|"# but this is just the way nova is; this function isn't"
nl|'\n'
comment|'# trying to correct that problem.'
nl|'\n'
comment|'# We could have a separate task to correct this error.'
nl|'\n'
comment|'# TODO(justinsb): What happens during a live migration?'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found instance \'%(name)s\' in DB but no VM. "'
nl|'\n'
string|'"State=%(db_state)s, so assuming spawn is in "'
nl|'\n'
string|'"progress."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'vm_state'
op|'='
name|'db_state'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found instance \'%(name)s\' in DB but no VM. "'
nl|'\n'
string|'"State=%(db_state)s, so setting state to "'
nl|'\n'
string|'"shutoff."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'vm_state'
op|'='
name|'power_state'
op|'.'
name|'SHUTOFF'
newline|'\n'
name|'if'
name|'db_instance'
op|'['
string|"'state_description'"
op|']'
op|'=='
string|"'stopping'"
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'vm_state'
op|'='
name|'vm_instance'
op|'.'
name|'state'
newline|'\n'
name|'vms_not_found_in_db'
op|'.'
name|'remove'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'db_instance'
op|'['
string|"'state_description'"
op|']'
name|'in'
op|'['
string|"'migrating'"
op|','
string|"'stopping'"
op|']'
op|')'
op|':'
newline|'\n'
comment|'# A situation which db record exists, but no instance"'
nl|'\n'
comment|'# sometimes occurs while live-migration at src compute,'
nl|'\n'
comment|'# this case should be ignored.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Ignoring %(name)s, as it\'s currently being "'
nl|'\n'
string|'"migrated."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vm_state'
op|'!='
name|'db_state'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"DB/VM state mismatch. Changing state from "'
nl|'\n'
string|'"\'%(db_state)s\' to \'%(vm_state)s\'"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_state'
op|'('
name|'context'
op|','
name|'db_instance'
op|'['
string|"'id'"
op|']'
op|','
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(justinsb): We no longer auto-remove SHUTOFF instances'
nl|'\n'
comment|"# It's quite hard to get them back when we do."
nl|'\n'
nl|'\n'
comment|'# Are there VMs not in the DB?'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'vm_not_found_in_db'
name|'in'
name|'vms_not_found_in_db'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'vm_not_found_in_db'
newline|'\n'
nl|'\n'
comment|'# We only care about instances that compute *should* know about'
nl|'\n'
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|'"instance-"'
op|')'
op|':'
newline|'\n'
comment|'# TODO(justinsb): What to do here?  Adopt it?  Shut it down?'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Found VM not in DB: \'%(name)s\'.  Ignoring"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all processes relating to instances (guest vms).\n\nThe :py:class:`ComputeManager` class is a :py:class:`nova.manager.Manager` that\nhandles RPC calls relating to creating instances.  It is responsible for\nbuilding a disk image, launching it via the underlying virtualization driver,\nresponding to calls to check its state, attaching persistent storage, and\nterminating it.\n\n**Related Flags**\n\n:instances_path:  Where instances are kept on disk\n:base_dir_name:  Where cached images are stored under instances_path\n:compute_driver:  Name of class that is used to handle virtualization, loaded\n                  by :func:`nova.openstack.common.importutils.import_object`\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'aggregate_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'api'
name|'as'
name|'notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'vnc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|compute_opts
name|'compute_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instances_path'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$state_path/instances'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'where instances are stored on disk'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'base_dir_name'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'_base'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"where cached images are stored under $instances_path"'
nl|'\n'
string|'"This is NOT full path - just a folder name"'
nl|'\n'
string|'"For per-compute-host cached images, Set to _base_$my_ip"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'compute_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.virt.connection.get_connection'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Driver to use for controlling virtualization'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'console_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Console proxy host to use to connect '"
nl|'\n'
string|"'to instances on this host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'live_migration_retry_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'30'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of 1 second retries needed in live_migration"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"reboot_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically hard reboot an instance if it has been "'
nl|'\n'
string|'"stuck in a rebooting state longer than N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"rescue_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically unrescue an instance after N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"resize_confirm_window"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically confirm resizes after N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'host_state_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'120'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for querying the host status'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"running_deleted_instance_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds after being deleted when a running "'
nl|'\n'
string|'"instance should be considered eligible for cleanup."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"running_deleted_instance_poll_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'30'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of periodic scheduler ticks to wait between "'
nl|'\n'
string|'"runs of the cleanup task."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|'"running_deleted_instance_action"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"log"'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Action to take if a running deleted instance is detected."'
nl|'\n'
string|'"Valid options are \'noop\', \'log\' and \'reap\'. "'
nl|'\n'
string|'"Set to \'noop\' to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"image_cache_manager_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'40'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of periodic scheduler ticks to wait between "'
nl|'\n'
string|'"runs of the image cache manager."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"heal_instance_info_cache_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds between instance info_cache self "'
nl|'\n'
string|'"healing updates"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'additional_compute_capabilities'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'a list of additional capabilities for this compute '"
nl|'\n'
string|"'host to advertise. Valid entries are name=value pairs '"
nl|'\n'
string|"'this functionality will be replaced when HostAggregates '"
nl|'\n'
string|"'become more funtional for general grouping in Folsom. (see: '"
nl|'\n'
string|"'http://etherpad.openstack.org/FolsomNovaHostAggregates-v2)'"
op|')'
op|','
nl|'\n'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'compute_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|publisher_id
name|'def'
name|'publisher_id'
op|'('
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'notifier'
op|'.'
name|'publisher_id'
op|'('
string|'"compute"'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|checks_instance_lock
dedent|''
name|'def'
name|'checks_instance_lock'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to prevent action against locked instances for non-admins."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: decorating: |%s|"'
op|')'
op|','
name|'function'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: arguments: |%(self)s| |%(context)s|"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'locked'
op|'='
name|'self'
op|'.'
name|'get_lock'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'admin'
op|'='
name|'context'
op|'.'
name|'is_admin'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: locked: |%s|"'
op|')'
op|','
name|'locked'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: admin: |%s|"'
op|')'
op|','
name|'admin'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# if admin or unlocked call function otherwise log error'
nl|'\n'
name|'if'
name|'admin'
name|'or'
name|'not'
name|'locked'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: executing: |%s|"'
op|')'
op|','
name|'function'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: not executing |%s|"'
op|')'
op|','
nl|'\n'
name|'function'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_instance_fault
dedent|''
name|'def'
name|'wrap_instance_fault'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method to catch exceptions related to instances.\n\n    This decorator wraps a method to catch any exceptions having to do with\n    an instance that may get thrown. It then logs an instance fault in the db.\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'e'
op|','
nl|'\n'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_image_meta
dedent|''
name|'def'
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'image_service'
op|','
name|'image_id'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
newline|'\n'
name|'return'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_additional_capabilities
dedent|''
name|'def'
name|'_get_additional_capabilities'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return additional capabilities to advertise for this compute host\n    This will be replaced once HostAggrgates are able to handle more general\n    host grouping for custom schedulers."""'
newline|'\n'
name|'capabilities'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'cap'
name|'in'
name|'FLAGS'
op|'.'
name|'additional_compute_capabilities'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'='"
name|'in'
name|'cap'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|','
name|'value'
op|'='
name|'cap'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'cap'
newline|'\n'
name|'value'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'capabilities'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'capabilities'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeManager
dedent|''
name|'class'
name|'ComputeManager'
op|'('
name|'manager'
op|'.'
name|'SchedulerDependentManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages the running instances from creation to destruction."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load configuration options and connect to the hypervisor."""'
newline|'\n'
comment|'# TODO(vish): sync driver creation logic with the rest of the system'
nl|'\n'
comment|'#             and re-document the module docstring'
nl|'\n'
name|'if'
name|'not'
name|'compute_driver'
op|':'
newline|'\n'
indent|'            '
name|'compute_driver'
op|'='
name|'FLAGS'
op|'.'
name|'compute_driver'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'='
name|'utils'
op|'.'
name|'check_isinstance'
op|'('
nl|'\n'
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'compute_driver'
op|')'
op|','
nl|'\n'
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to load the virtualization driver: %s"'
op|')'
op|'%'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_last_host_check'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_info_cache_heal'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'ComputeManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|'"compute"'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_update
dedent|''
name|'def'
name|'_instance_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance in the database using kwargs as value."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_instance_error_state
dedent|''
name|'def'
name|'_set_instance_error_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Instance has been destroyed from under us while '"
nl|'\n'
string|"'trying to set it to ERROR'"
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialization for a standalone compute service."""'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'db_state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'drv_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'expect_running'
op|'='
op|'('
name|'db_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
name|'and'
nl|'\n'
name|'drv_state'
op|'!='
name|'db_state'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Current state is %(drv_state)s, state in DB is '"
nl|'\n'
string|"'%(db_state)s.'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
op|'('
name|'expect_running'
name|'and'
name|'FLAGS'
op|'.'
name|'resume_guests_state_on_host_boot'
op|')'
name|'or'
nl|'\n'
name|'FLAGS'
op|'.'
name|'start_guests_on_host_boot'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Rebooting instance after nova-compute restart.'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reboot_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'drv_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
comment|'# VMWareAPI drivers will raise an exception'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'net_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'net_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'firewall rules'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_power_state
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_power_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the power state for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Checking state'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|'"state"'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'power_state'
op|'.'
name|'FAILED'
newline|'\n'
nl|'\n'
DECL|member|get_console_topic
dedent|''
dedent|''
name|'def'
name|'get_console_topic'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the console host for a project on this host.\n\n        Currently this is just set in the flags for each compute host.\n\n        """'
newline|'\n'
comment|'#TODO(mdragon): perhaps make this variable by console_type?'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'console_topic'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'console_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_pool_info'
op|'('
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_security_group_rules
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group rules.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_security_group_members
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'security_group_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group members.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_provider_fw_rules
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This call passes straight through to the virtualization driver."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_nw_info
dedent|''
name|'def'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a list of dictionaries of network data of an instance.\n        Returns an empty list if stub_network flag is set."""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# get the network info from network'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_legacy_nw_info
dedent|''
name|'def'
name|'_legacy_nw_info'
op|'('
name|'self'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Converts the model nw_info object to legacy style"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'legacy_nwinfo'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'compute_utils'
op|'.'
name|'legacy_network_info'
op|'('
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_setup_block_device_mapping
dedent|''
name|'def'
name|'_setup_block_device_mapping'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""setup volumes for block device mapping"""'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'swap'
op|'='
name|'None'
newline|'\n'
name|'ephemerals'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Setting up bdm %s'"
op|')'
op|','
name|'bdm'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'bdm'
op|'['
string|"'no_device'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'virtual_name'
op|'='
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
newline|'\n'
name|'device_name'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'assert'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'                    '
name|'swap'
op|'='
op|'{'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'swap_size'"
op|':'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'eph'
op|'='
op|'{'
string|"'num'"
op|':'
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
name|'virtual_name'
op|')'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'virtual_name'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'}'
newline|'\n'
name|'ephemerals'
op|'.'
name|'append'
op|'('
name|'eph'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
op|'('
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
nl|'\n'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# TODO(yamahata): default name and description'
nl|'\n'
indent|'                '
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
name|'context'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
op|')'
newline|'\n'
name|'vol'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'snapshot'
op|')'
newline|'\n'
comment|'# TODO(yamahata): creating volume simultaneously'
nl|'\n'
comment|'#                 reduces creation time?'
nl|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'wait_creation'
op|'('
name|'context'
op|','
name|'vol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'volume_id'"
op|':'
name|'vol'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'vol'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'cinfo'
op|'='
name|'self'
op|'.'
name|'_attach_volume_boot'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'cinfo'
op|')'
op|'}'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'swap'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
name|'ephemerals'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_run_instance
dedent|''
name|'def'
name|'_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_first_time'
op|'='
name|'False'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Launch a new instance with specified options."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_instance_not_already_created'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'_check_image_size'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start_building'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create.start"'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_allocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'is_first_time'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'access_ip_v4'"
op|']'
nl|'\n'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'access_ip_v6'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_update_access_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance not found."'
op|')'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_access_ip
dedent|''
dedent|''
dedent|''
name|'def'
name|'_update_access_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'nw_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the access ip values for a given instance.\n\n        If FLAGS.default_access_ip_network_name is set, this method will\n        grab the corresponding network and set the access ip values\n        accordingly. Note that when there are multiple ips to choose from,\n        an arbitrary one will be chosen.\n        """'
newline|'\n'
nl|'\n'
name|'network_name'
op|'='
name|'FLAGS'
op|'.'
name|'default_access_ip_network_name'
newline|'\n'
name|'if'
name|'not'
name|'network_name'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'update_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'nw_info'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|'=='
name|'network_name'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'ip'
name|'in'
name|'vif'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                        '
name|'update_info'
op|'['
string|"'access_ip_v4'"
op|']'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                        '
name|'update_info'
op|'['
string|"'access_ip_v6'"
op|']'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'update_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
name|'update_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_instance_not_already_created
dedent|''
dedent|''
name|'def'
name|'_check_instance_not_already_created'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure an instance with the same name is not already present."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_msg'
op|'='
name|'_'
op|'('
string|'"Instance has already been created"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_image_size
dedent|''
dedent|''
name|'def'
name|'_check_image_size'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure image is smaller than the maximum size allowed by the\n        instance_type.\n\n        The image stored in Glance is potentially compressed, so we use two\n        checks to ensure that the size isn\'t exceeded:\n\n            1) This one - checks compressed size, this a quick check to\n               eliminate any images which are obviously too large\n\n            2) Check uncompressed size in nova.virt.xenapi.vm_utils. This\n               is a slower check since it requires uncompressing the entire\n               image, but is accurate because it reflects the image\'s\n               actual size.\n        """'
newline|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'size_bytes'
op|'='
name|'image_meta'
op|'['
string|"'size'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# Size is not a required field in the image service (yet), so'
nl|'\n'
comment|"# we are unable to rely on it being there even though it's in"
nl|'\n'
comment|'# glance.'
nl|'\n'
nl|'\n'
comment|'# TODO(jk0): Should size be required in the image service?'
nl|'\n'
indent|'            '
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
name|'allowed_size_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): root_gb is allowed to be 0 for legacy reasons'
nl|'\n'
comment|'# since libvirt interpreted the value differently than other'
nl|'\n'
comment|"# drivers. A value of 0 means don't check size."
nl|'\n'
name|'if'
name|'not'
name|'allowed_size_gb'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'allowed_size_bytes'
op|'='
name|'allowed_size_gb'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"image_id=%(image_id)s, image_size_bytes="'
nl|'\n'
string|'"%(size_bytes)d, allowed_size_bytes="'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'size_bytes'
op|'>'
name|'allowed_size_bytes'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Image \'%(image_id)s\' size %(size_bytes)d exceeded"'
nl|'\n'
string|'" instance_type allowed size "'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageTooLarge'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|_start_building
dedent|''
name|'def'
name|'_start_building'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save the host and launched_on fields and log appropriately."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Starting instance...'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
name|'launched_on'
op|'='
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_network
dedent|''
name|'def'
name|'_allocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocate networks for an instance and return the network info"""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Skipping network allocation for instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'NETWORKING'
op|')'
newline|'\n'
name|'is_vpn'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# allocate and get network info'
nl|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vpn'
op|'='
name|'is_vpn'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance failed network setup'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Instance network_info: |%s|'"
op|')'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_prep_block_device
dedent|''
name|'def'
name|'_prep_block_device'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up the block device for an instance with error logging"""'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance failed block device setup'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_spawn
dedent|''
dedent|''
name|'def'
name|'_spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'injected_files'
op|','
name|'admin_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawn an instance with error logging and update its power state"""'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'injected_files'"
op|']'
op|'='
name|'injected_files'
newline|'\n'
name|'instance'
op|'['
string|"'admin_pass'"
op|']'
op|'='
name|'admin_pass'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance failed to spawn'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_notify_about_instance_usage
dedent|''
name|'def'
name|'_notify_about_instance_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(sirp): The only thing this wrapper function does extra is handle'
nl|'\n'
comment|'# the passing in of `self.host`. Ordinarily this will just be'
nl|'\n'
comment|"# `FLAGS.host`, but `Manager`'s gets a chance to override this in its"
nl|'\n'
comment|'# `__init__`.'
nl|'\n'
indent|'        '
name|'compute_utils'
op|'.'
name|'notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deallocate_network
dedent|''
name|'def'
name|'_deallocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Deallocating network for instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_bdms
dedent|''
dedent|''
name|'def'
name|'_get_instance_volume_bdms'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_bdm
dedent|''
name|'def'
name|'_get_instance_volume_bdm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
comment|"# NOTE(vish): Comparing as strings because the os_api doesn't"
nl|'\n'
comment|'#             convert to integer and we may wish to support uuids'
nl|'\n'
comment|'#             in the future.'
nl|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
op|'=='
name|'str'
op|'('
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_block_device_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_instance_volume_block_device_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'cinfo'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'}'
op|')'
newline|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
DECL|function|do_run_instance
name|'def'
name|'do_run_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'do_run_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|start_instance
name|'def'
name|'start_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
DECL|function|do_start_instance
name|'def'
name|'do_start_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Starting an instance on this host."""'
newline|'\n'
comment|"# TODO(yamahata): injected_files isn't supported."
nl|'\n'
comment|"#                 Anyway OSAPI doesn't support stop/start yet"
nl|'\n'
comment|"# FIXME(vish): I've kept the files during stop instance, but"
nl|'\n'
comment|'#              I think start will fail due to the files still'
nl|'\n'
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'do_start_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_shutdown_instance
dedent|''
name|'def'
name|'_shutdown_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'action_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'%(action_str)s instance'"
op|')'
op|'%'
op|'{'
string|"'action_str'"
op|':'
name|'action_str'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"shutdown.start"'
op|')'
newline|'\n'
nl|'\n'
comment|'# get network info before tearing down'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# tear down allocated network structure'
nl|'\n'
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) get bdms before destroying the instance'
nl|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(vish): actual driver detach done in driver.destroy, so'
nl|'\n'
comment|'#             just tell nova-volume that we are done with it.'
nl|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'DiskNotFound'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Ignoring DiskNotFound: %s'"
op|')'
op|'%'
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"shutdown.end"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_volumes
dedent|''
name|'def'
name|'_cleanup_volumes'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"terminating bdm %s"'
op|')'
op|'%'
name|'bdm'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'and'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
comment|'# NOTE(vish): bdms will be deleted on instance destroy'
nl|'\n'
nl|'\n'
DECL|member|_delete_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete an instance on this host."""'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"delete.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'Terminating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"delete.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|terminate_instance
name|'def'
name|'terminate_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance on this host."""'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
DECL|function|do_terminate_instance
name|'def'
name|'do_terminate_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'elevated'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'e'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'do_terminate_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|stop_instance
name|'def'
name|'stop_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stopping an instance on this host."""'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
DECL|function|do_stop_instance
name|'def'
name|'do_stop_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'Stopping'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'do_stop_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|power_off_instance
name|'def'
name|'power_off_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off an instance on this host."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_off.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_off.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|power_on_instance
name|'def'
name|'power_on_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on an instance on this host."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_on.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_on.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rebuild_instance
name|'def'
name|'rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy and re-make this instance.\n\n        A \'rebuild\' effectively purges all existing data from the system and\n        remakes the VM with given \'metadata\' and \'personalities\'.\n\n        :param context: `nova.RequestContext` object\n        :param instance_uuid: Instance Identifier (UUID)\n        :param injected_files: Files to inject\n        :param new_pass: password to set on rebuilt instance\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rebuild_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ImageNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Cannot rebuild instance because the given image does '"
nl|'\n'
string|"'not exist.'"
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Cannot rebuild instance: %(exc)s'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rebuild_instance
dedent|''
dedent|''
name|'def'
name|'_rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebuilding instance"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"rebuild.start"'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'injected_files'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'injected_files'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'device_info'
op|'='
name|'self'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|')'
newline|'\n'
comment|"# pull in new password here since the original password isn't in the db"
nl|'\n'
name|'instance'
op|'.'
name|'admin_pass'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'new_pass'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
name|'device_info'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"rebuild.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reboot_instance
name|'def'
name|'reboot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'reboot_type'
op|'='
string|'"SOFT"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot an instance on this host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebooting instance"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"reboot.start"'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to reboot a non-running '"
nl|'\n'
string|"'instance: (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"reboot.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|snapshot_instance
name|'def'
name|'snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'image_id'
op|','
nl|'\n'
name|'image_type'
op|'='
string|"'snapshot'"
op|','
name|'backup_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'rotation'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot an instance on this host.\n\n        :param context: security context\n        :param instance_uuid: nova.db.sqlalchemy.models.Instance.Uuid\n        :param image_id: glance.db.sqlalchemy.models.Image.Id\n        :param image_type: snapshot | backup\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: snapshotting'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to snapshot a non-running '"
nl|'\n'
string|"'instance: (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"snapshot.start"'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_type'
op|'=='
string|"'snapshot'"
name|'and'
name|'rotation'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageRotationNotAllowed'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
name|'and'
name|'rotation'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rotate_backups'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'RotationRequiredForBackup'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"snapshot.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rotate_backups
name|'def'
name|'rotate_backups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete excess backups associated to an instance.\n\n        Instances are allowed a fixed number of backups (the rotation number);\n        this method deletes the oldest backups that exceed the rotation\n        threshold.\n\n        :param context: security context\n        :param instance_uuid: string representing uuid of instance\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
comment|'# NOTE(jk0): Eventually extract this out to the ImageService?'
nl|'\n'
DECL|function|fetch_images
name|'def'
name|'fetch_images'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'images'
op|'='
op|'['
op|']'
newline|'\n'
name|'marker'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'batch'
op|'='
name|'image_service'
op|'.'
name|'detail'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|','
nl|'\n'
name|'marker'
op|'='
name|'marker'
op|','
name|'sort_key'
op|'='
string|"'created_at'"
op|','
name|'sort_dir'
op|'='
string|"'desc'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'batch'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'images'
op|'+='
name|'batch'
newline|'\n'
name|'marker'
op|'='
name|'batch'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'images'
newline|'\n'
nl|'\n'
dedent|''
name|'image_service'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'property-image_type'"
op|':'
string|"'backup'"
op|','
nl|'\n'
string|"'property-backup_type'"
op|':'
name|'backup_type'
op|','
nl|'\n'
string|"'property-instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
nl|'\n'
name|'images'
op|'='
name|'fetch_images'
op|'('
op|')'
newline|'\n'
name|'num_images'
op|'='
name|'len'
op|'('
name|'images'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found %(num_images)d images (rotation: %(rotation)d)"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'num_images'
op|'>'
name|'rotation'
op|':'
newline|'\n'
comment|'# NOTE(sirp): this deletes all backups that exceed the rotation'
nl|'\n'
comment|'# limit'
nl|'\n'
indent|'            '
name|'excess'
op|'='
name|'len'
op|'('
name|'images'
op|')'
op|'-'
name|'rotation'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Rotating out %d backups"'
op|')'
op|'%'
name|'excess'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'excess'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'='
name|'images'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting image %s"'
op|')'
op|'%'
name|'image_id'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'new_pass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for an instance on this host.\n\n        This is generally only called by API password resets after an\n        image has been built.\n        """'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'new_pass'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Generate a random password'
nl|'\n'
indent|'            '
name|'new_pass'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'max_tries'
op|'='
number|'10'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'max_tries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|'"id"'
op|']'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
nl|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'Failed to set admin password. Instance %s is not'"
nl|'\n'
string|"' running'"
op|')'
op|'%'
name|'instance_ref'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Invalid'
op|'('
name|'_msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_admin_password'
op|'('
name|'instance_ref'
op|','
name|'new_pass'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Root password set"'
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|"# NOTE(dprince): if the driver doesn't implement"
nl|'\n'
comment|'# set_admin_password we break to avoid a loop'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'set_admin_password is not implemented '"
nl|'\n'
string|"'by this driver.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Catch all here because this could be anything.'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'e'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'if'
name|'i'
op|'=='
name|'max_tries'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
comment|"# We create a new exception here so that we won't"
nl|'\n'
comment|'# potentially reveal password information to the'
nl|'\n'
comment|'# API caller.  The real exception is logged above'
nl|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'Error setting admin password'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_msg'
op|')'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the specified path in an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to inject a file into a non-running '"
nl|'\n'
string|"'(state: %(current_power_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'injecting file to %(path)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_file'
op|'('
name|'instance_ref'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|agent_update
name|'def'
name|'agent_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update agent running on an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to update agent on a non-running '"
nl|'\n'
string|"'(state: %(current_power_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'updating agent to %(url)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'agent_update'
op|'('
name|'instance_ref'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rescue_instance
name|'def'
name|'rescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rescue an instance on this host.\n        :param rescue_password: password to set on rescue instance\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Rescuing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'admin_pass'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'rescue_password'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unrescue_instance
name|'def'
name|'unrescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue an instance on this host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Unrescuing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unrescue'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the source instance."""'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
string|'"resize.confirm.start"'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on source host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'confirm_migration'
op|'('
name|'migration_ref'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.confirm.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the new instance on the destination machine.\n\n        Reverts the model changes, and powers on the old instance on the\n        source machine.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on destination host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'finish_revert_resize'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_revert_resize
name|'def'
name|'finish_revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes the second half of reverting a resize.\n\n        Power back on the source instance and revert the resized attributes\n        in the database.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.revert.start"'
op|')'
newline|'\n'
nl|'\n'
name|'old_instance_type'
op|'='
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'old_instance_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_revert_migration'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Just roll back the record. There's no need to resize down since"
nl|'\n'
comment|"# the 'old' VM already has the preferred attributes"
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'root_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'reverted'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.revert.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|prep_resize
name|'def'
name|'prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'instance_type_id'
op|','
name|'image'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiates the process of moving a running instance to another host.\n\n        Possibly changes the RAM and disk size in the process.\n\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.prep.start"'
op|')'
newline|'\n'
nl|'\n'
name|'same_host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|'=='
name|'FLAGS'
op|'.'
name|'host'
newline|'\n'
name|'if'
name|'same_host'
name|'and'
name|'not'
name|'FLAGS'
op|'.'
name|'allow_resize_to_same_host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'destination same as source!'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'old_instance_type_id'
op|'='
name|'instance_ref'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'old_instance_type_id'
op|')'
newline|'\n'
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'source_compute'"
op|':'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'FLAGS'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dest_host'"
op|':'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
op|','
nl|'\n'
string|"'old_instance_type_id'"
op|':'
name|'old_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'new_instance_type_id'"
op|':'
name|'instance_type_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'pre-migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Migrating'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'resize_instance'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'extra_usage_info'
op|'='
name|'dict'
op|'('
name|'new_instance_type'
op|'='
name|'new_instance_type'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'new_instance_type_id'
op|'='
name|'new_instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.prep.end"'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resize_instance
name|'def'
name|'resize_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|','
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts the migration of a running instance to another host."""'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'new_instance_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.start"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
name|'migration_ref'
op|'['
string|"'dest_host'"
op|']'
op|','
nl|'\n'
name|'instance_type_ref'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
op|'%'
name|'error'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'post-migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_host_and_topic'
op|'('
nl|'\n'
name|'context'
op|','
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'migration_id'"
op|':'
name|'migration_id'
op|','
nl|'\n'
string|"'disk_info'"
op|':'
name|'disk_info'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|'}'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
op|'{'
string|"'method'"
op|':'
string|"'finish_resize'"
op|','
nl|'\n'
string|"'args'"
op|':'
name|'params'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
string|'"resize.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_finish_resize
dedent|''
name|'def'
name|'_finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'migration_ref'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resize_instance'
op|'='
name|'False'
newline|'\n'
name|'old_instance_type_id'
op|'='
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'new_instance_type_id'
op|'='
name|'migration_ref'
op|'['
string|"'new_instance_type_id'"
op|']'
newline|'\n'
name|'if'
name|'old_instance_type_id'
op|'!='
name|'new_instance_type_id'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'new_instance_type_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'root_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|')'
newline|'\n'
name|'resize_instance'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"finish_resize.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_migration'
op|'('
name|'context'
op|','
name|'migration_ref'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'disk_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'image'
op|','
name|'resize_instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_ref'
op|'.'
name|'id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"finish_resize.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_resize
name|'def'
name|'finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes the migration process.\n\n        Sets up the newly transferred disk and turns on the instance at its\n        new host machine.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_finish_resize'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'migration_ref'
op|','
nl|'\n'
name|'disk_info'
op|','
name|'image'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
op|'%'
name|'error'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|add_fixed_ip_to_instance
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to add new fixed_ip to instance\n        then injects the new network info and resets instance networking.\n\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"create_ip.start"'
op|')'
newline|'\n'
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"create_ip.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|remove_fixed_ip_from_instance
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to remove existing fixed_ip from instance\n        by injecting the altered network info and resetting\n        instance networking.\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"delete_ip.start"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
string|'"delete_ip.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|pause_instance
name|'def'
name|'pause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Pausing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pause'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unpause_instance
name|'def'
name|'unpause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause a paused instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Unpausing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unpause'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|host_power_action
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'action'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_power_action'
op|'('
name|'host'
op|','
name|'action'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|host_maintenance_mode
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_maintenance_mode'
op|'('
name|'host'
op|','
name|'mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|set_host_enabled
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'enabled'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_host_enabled'
op|'('
name|'host'
op|','
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for an instance on this host."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'if'
name|'current_power_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Retrieving diagnostics"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|suspend_instance
name|'def'
name|'suspend_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Suspending'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'suspend'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
string|"'suspend'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resume_instance
name|'def'
name|'resume_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given suspended instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Resuming'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
string|"'resume'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|lock_instance
name|'def'
name|'lock_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Locking'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'locked'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unlock_instance
name|'def'
name|'unlock_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Unlocking'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'locked'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_lock
name|'def'
name|'get_lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the boolean state of the given instance\'s lock."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Getting locked state'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'return'
name|'instance_ref'
op|'['
string|"'locked'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the given instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Reset network'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reset_network'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the given instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Inject network info'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'network_info to inject: |%s|'"
op|')'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the console output for the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Get console output"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_output'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'tail_length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
name|'self'
op|'.'
name|'_tail_log'
op|'('
name|'output'
op|','
name|'tail_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'output'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|','
string|"'replace'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tail_log
dedent|''
name|'def'
name|'_tail_log'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'int'
op|'('
name|'length'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'log'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
op|'-'
name|'int'
op|'('
name|'length'
op|')'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a vnc console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Getting vnc console"'
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'console_type'
op|'=='
string|"'novnc'"
op|':'
newline|'\n'
comment|'# For essex, novncproxy_base_url must include the full path'
nl|'\n'
comment|'# including the html file (like http://myhost/vnc_auto.html)'
nl|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'novncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|"'xvpvnc'"
op|':'
newline|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'xvpvncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|'='
name|'token'
newline|'\n'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'='
name|'access_url'
newline|'\n'
nl|'\n'
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
DECL|member|_attach_volume_boot
dedent|''
name|'def'
name|'_attach_volume_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance at boot time. So actual attach\n        is done by instance creation"""'
newline|'\n'
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Booting with volume %(volume_id)s at %(mountpoint)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
newline|'\n'
name|'return'
name|'connection_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance."""'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Attaching volume %(volume_id)s to %(mountpoint)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to connect to volume %(volume_id)s "'
nl|'\n'
string|'"while attaching at %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'unreserve_volume'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to attach volume %(volume_id)s "'
nl|'\n'
string|'"at %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'mountpoint'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'mountpoint'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_detach_volume
dedent|''
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do the actual driver detach using block device mapping."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'mp'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Detach volume %(volume_id)s from mountpoint %(mp)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Detaching volume from unknown instance'"
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_volume'
op|'('
name|'utils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
op|','
nl|'\n'
name|'instance_name'
op|','
nl|'\n'
name|'mp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdm'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_volume'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|remove_volume_connection
name|'def'
name|'remove_volume_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a volume connection using the volume api"""'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdm'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|compare_cpu
name|'def'
name|'compare_cpu'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'cpu_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks that the host cpu is compatible with a cpu given by xml.\n\n        :param context: security context\n        :param cpu_info: json string obtained from virConnect.getCapabilities\n        :returns: See driver.compare_cpu\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'compare_cpu'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|create_shared_storage_test_file
name|'def'
name|'create_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes tmpfile under FLAGS.instance_path.\n\n        This method enables compute nodes to recognize that they mounts\n        same shared storage. (create|check|creanup)_shared_storage_test_file()\n        is a pair.\n\n        :param context: security context\n        :returns: tmpfile name(basename)\n\n        """'
newline|'\n'
name|'dirpath'
op|'='
name|'FLAGS'
op|'.'
name|'instances_path'
newline|'\n'
name|'fd'
op|','
name|'tmp_file'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'dir'
op|'='
name|'dirpath'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating tmpfile %s to notify to other "'
nl|'\n'
string|'"compute nodes that they should mount "'
nl|'\n'
string|'"the same storage."'
op|')'
op|'%'
name|'tmp_file'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|check_shared_storage_test_file
name|'def'
name|'check_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms existence of the tmpfile under FLAGS.instances_path.\n           Cannot confirm tmpfile return False.\n\n        :param context: security context\n        :param filename: confirm existence of FLAGS.instances_path/thisfile\n\n        """'
newline|'\n'
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tmp_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|cleanup_shared_storage_test_file
name|'def'
name|'cleanup_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes existence of the tmpfile under FLAGS.instances_path.\n\n        :param context: security context\n        :param filename: remove existence of FLAGS.instances_path/thisfile\n\n        """'
newline|'\n'
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'filename'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'remove'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_disk_info
dedent|''
name|'def'
name|'get_instance_disk_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Getting infomation of instance\'s current disk.\n\n        Implementation nova.virt.libvirt.connection.\n\n        :param context: security context\n        :param instance_name: instance name\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_live_migration
dedent|''
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
name|'disk'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparations for live migration at dest host.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
comment|'# Getting instance info'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# If any volume is mounted, prepare here.'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance has no volume.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# Bridge settings.'
nl|'\n'
comment|'# Call this method prior to ensure_filtering_rules_for_instance,'
nl|'\n'
comment|'# since bridge is not set up, ensure_filtering_rules_for instance'
nl|'\n'
comment|'# fails.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Retry operation is necessary because continuously request comes,'
nl|'\n'
comment|'# concorrent request occurs to iptables, then it complains.'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(tr3buchet): figure out how on the earth this is necessary'
nl|'\n'
name|'fixed_ips'
op|'='
name|'network_info'
op|'.'
name|'fixed_ips'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
name|'instance_id'
op|'='
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'max_retry'
op|'='
name|'FLAGS'
op|'.'
name|'live_migration_retry_count'
newline|'\n'
name|'for'
name|'cnt'
name|'in'
name|'range'
op|'('
name|'max_retry'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cnt'
op|'=='
name|'max_retry'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"plug_vifs() failed %(cnt)d."'
nl|'\n'
string|'"Retry up to %(max_retry)d for %(hostname)s."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating filters to hypervisors and firewalls.'
nl|'\n'
comment|'# An example is that nova-instance-instance-xxx,'
nl|'\n'
comment|'# which is written to libvirt.xml(Check "virsh nwfilter-list")'
nl|'\n'
comment|'# This nwfilter is necessary on the destination host.'
nl|'\n'
comment|'# In addition, this method is creating filtering rule'
nl|'\n'
comment|'# onto destination host.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparation for block migration'
nl|'\n'
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_block_migration'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'disk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Executing live migration.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
comment|'# Get instance for error handling.'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Checking volume node is working correctly when any volumes'
nl|'\n'
comment|'# are attached to instances.'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'volume_topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'check_for_export'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'pre_live_migration'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'block_migration'"
op|':'
name|'block_migration'
op|','
nl|'\n'
string|"'disk'"
op|':'
name|'disk'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Pre live migration failed at  %(dest)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rollback_live_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
comment|'# Executing live migration'
nl|'\n'
comment|'# live_migration might raises exceptions, but'
nl|'\n'
comment|'# nothing must be recovered in this version.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'rollback_live_migration'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration
dedent|''
name|'def'
name|'post_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration.\n\n        This method is called from live_migration\n        and mainly updating database record.\n\n        :param ctxt: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'post_live_migration() is started..'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Detaching volumes.'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_volume_connection'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Releasing vlan.'
nl|'\n'
comment|'# (not necessary in current implementation?)'
nl|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
newline|'\n'
comment|'# Releasing security group ingress rule.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Database updating.'
nl|'\n'
comment|'# NOTE(jkoelker) This needs to be converted to network api calls'
nl|'\n'
comment|'#                if nova wants to support floating_ips in'
nl|'\n'
comment|'#                quantum/melange'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Not return if floating_ip is not found, otherwise,'
nl|'\n'
comment|'# instance never be accessible..'
nl|'\n'
indent|'            '
name|'floating_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'floating_ip'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No floating_ip found'"
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'floating_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_update'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No floating_ip found.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Live migration: Unexpected error: cannot inherit '"
nl|'\n'
string|"'floating ip.\\n%(e)s'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Define domain at destination host, without doing it,'
nl|'\n'
comment|'# pause/suspend/terminate do not work.'
nl|'\n'
dedent|''
name|'rpc'
op|'.'
name|'call'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'ctxt'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"post_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'block_migration'"
op|':'
name|'block_migration'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restore volume state'
nl|'\n'
name|'for'
name|'volume_ref'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'update'
op|'('
name|'ctxt'
op|','
name|'volume_ref'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# No instance booting at source host, but instance dir'
nl|'\n'
comment|'# must be deleted for preparing next block migration'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# self.driver.destroy() usually performs  vif unplugging'
nl|'\n'
comment|'# but we must do it explicitly here when block_migration'
nl|'\n'
comment|'# is false, as the network devices at the source must be'
nl|'\n'
comment|'# torn down'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on source host'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Migrating instance to %(dest)s finished successfully.'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"You may see the error \\"libvirt: QEMU error: "'
nl|'\n'
string|'"Domain not found: no domain with matching name.\\" "'
nl|'\n'
string|'"This error can be safely ignored."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration_at_destination
dedent|''
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration .\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Post operation of migraton started'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
comment|'#                  this is called a second time because'
nl|'\n'
comment|'#                  multi_host does not create the bridge in'
nl|'\n'
comment|'#                  plug_vifs'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
comment|'# Restore instance state'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): this is necessary to update dhcp'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration
dedent|''
name|'def'
name|'rollback_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recovers Instance/volume state from migrating -> running.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest:\n            This method is called from live migration src host.\n            This param specifies destination host.\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(tr3buchet): setup networks on source host (really it's re-setup)"
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'volume'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'remove_from_compute'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# Block migration needs empty image at destination host'
nl|'\n'
comment|'# before migration starts, so if any failure occurs,'
nl|'\n'
comment|'# any empty images has to be deleted.'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"rollback_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration_at_destination
dedent|''
dedent|''
name|'def'
name|'rollback_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Cleaning up image directory that is created pre_live_migration.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on destination host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_heal_instance_info_cache
name|'def'
name|'_heal_instance_info_cache'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called periodically.  On every call, try to update the\n        info_cache\'s network information for another instance by\n        calling to the network manager.\n\n        This is implemented by keeping a cache of uuids of instances\n        that live on this host.  On each call, we pop one off of a\n        list, pull the DB record, and try the call to the network API.\n        If anything errors, we don\'t care.  It\'s possible the instance\n        has been deleted, etc.\n        """'
newline|'\n'
name|'heal_interval'
op|'='
name|'FLAGS'
op|'.'
name|'heal_instance_info_cache_interval'
newline|'\n'
name|'if'
name|'not'
name|'heal_interval'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_last_info_cache_heal'
op|'+'
name|'heal_interval'
op|'>'
name|'curr_time'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_last_info_cache_heal'
op|'='
name|'curr_time'
newline|'\n'
nl|'\n'
name|'instance_uuids'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'_instance_uuids_to_heal'"
op|','
name|'None'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'while'
name|'not'
name|'instance'
name|'or'
name|'instance'
op|'['
string|"'host'"
op|']'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_uuids'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuids'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# Instance is gone.  Try to grab another.'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# No more in our copy of uuids.  Pull from the DB.'
nl|'\n'
indent|'                '
name|'db_instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'db_instances'
op|':'
newline|'\n'
comment|'# None.. just return.'
nl|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'db_instances'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'inst'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'inst'
name|'in'
name|'db_instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_instance_uuids_to_heal'
op|'='
name|'instance_uuids'
newline|'\n'
nl|'\n'
comment|"# We have an instance now and it's ours"
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Call to network API to get instance info.. this will'
nl|'\n'
comment|"# force an update to the instance's info_cache"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Updated the info_cache for instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# We don't care about any failures"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rebooting_instances
name|'def'
name|'_poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'reboot_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rebooting_instances'
op|'('
name|'FLAGS'
op|'.'
name|'reboot_timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rescued_instances
name|'def'
name|'_poll_rescued_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'rescue_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rescued_instances'
op|'('
name|'FLAGS'
op|'.'
name|'rescue_timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_unconfirmed_resizes
name|'def'
name|'_poll_unconfirmed_resizes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'resize_confirm_window'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_unconfirmed_resizes'
op|'('
name|'FLAGS'
op|'.'
name|'resize_confirm_window'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_bandwidth_usage
name|'def'
name|'_poll_bandwidth_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'start_time'
op|'='
name|'None'
op|','
name|'stop_time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'start_time'
op|':'
newline|'\n'
indent|'            '
name|'start_time'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'>'
name|'FLAGS'
op|'.'
name|'bandwith_poll_interval'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating bandwidth usage cache"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'bw_usage'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_all_bw_usage'
op|'('
name|'instances'
op|','
name|'start_time'
op|','
nl|'\n'
name|'stop_time'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(mdragon): Not all hypervisors have bandwidth polling'
nl|'\n'
comment|"# implemented yet.  If they don't it doesn't break anything,"
nl|'\n'
comment|"# they just don't get the info in the usage events."
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'usage'
name|'in'
name|'bw_usage'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'bw_usage_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
name|'start_time'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'bw_in'"
op|']'
op|','
name|'usage'
op|'['
string|"'bw_out'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_report_driver_status
name|'def'
name|'_report_driver_status'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_host_check'
op|'>'
name|'FLAGS'
op|'.'
name|'host_state_interval'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_host_check'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating host status"'
op|')'
op|')'
newline|'\n'
comment|'# This will grab info about the host and queue it'
nl|'\n'
comment|'# to be sent to the Schedulers.'
nl|'\n'
name|'capabilities'
op|'='
name|'_get_additional_capabilities'
op|'('
op|')'
newline|'\n'
name|'capabilities'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'update_service_capabilities'
op|'('
name|'capabilities'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'ticks_between_runs'
op|'='
number|'10'
op|')'
newline|'\n'
DECL|member|_sync_power_states
name|'def'
name|'_sync_power_states'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Align power states between the database and the hypervisor.\n\n        The hypervisor is authoritative for the power_state data, but we don\'t\n        want to do an expensive call to the virt driver\'s list_instances_detail\n        method. Instead, we do a less-expensive call to get the number of\n        virtual machines known by the hypervisor and if the number matches the\n        number of virtual machines known by the database, we proceed in a lazy\n        loop, one database record at a time, checking if the hypervisor has the\n        same power state as is in the database. We call eventlet.sleep(0) after\n        each loop to allow the periodic task eventlet to do other work.\n\n        If the instance is not found on the hypervisor, but is in the database,\n        then it will be set to power_state.NOSTATE.\n        """'
newline|'\n'
name|'db_instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'num_vm_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_num_instances'
op|'('
op|')'
newline|'\n'
name|'num_db_instances'
op|'='
name|'len'
op|'('
name|'db_instances'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_vm_instances'
op|'!='
name|'num_db_instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Found %(num_db_instances)s in the database and "'
nl|'\n'
string|'"%(num_vm_instances)s on the hypervisor."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'db_instance'
name|'in'
name|'db_instances'
op|':'
newline|'\n'
comment|'# Allow other periodic tasks to do some work...'
nl|'\n'
indent|'            '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'db_power_state'
op|'='
name|'db_instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_instance'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'db_instance'
op|')'
newline|'\n'
name|'vm_power_state'
op|'='
name|'vm_instance'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# This exception might have been caused by a race condition'
nl|'\n'
comment|'# between _sync_power_states and live migrations. Two cases'
nl|'\n'
comment|'# are possible as documented below. To this aim, refresh the'
nl|'\n'
comment|'# DB instance state.'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'u'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'host'
op|'!='
name|'u'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
comment|'# on the sending end of nova-compute _sync_power_state'
nl|'\n'
comment|'# may have yielded to the greenthread performing a live'
nl|'\n'
comment|'# migration; this in turn has changed the resident-host'
nl|'\n'
comment|'# for the VM; However, the instance is still active, it'
nl|'\n'
comment|'# is just in the process of migrating to another host.'
nl|'\n'
comment|'# This implies that the compute source must relinquish'
nl|'\n'
comment|'# control to the compute destination.'
nl|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"During the sync_power process the "'
nl|'\n'
string|'"instance has moved from "'
nl|'\n'
string|'"host %(src)s to host %(dst)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'src'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dst'"
op|':'
name|'u'
op|'['
string|"'host'"
op|']'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'u'
op|'['
string|"'host'"
op|']'
op|'=='
name|'self'
op|'.'
name|'host'
name|'and'
nl|'\n'
name|'u'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'MIGRATING'
op|')'
op|':'
newline|'\n'
comment|'# on the receiving end of nova-compute, it could happen'
nl|'\n'
comment|'# that the DB instance already report the new resident'
nl|'\n'
comment|'# but the actual VM has not showed up on the hypervisor'
nl|'\n'
comment|"# yet. In this case, let's allow the loop to continue"
nl|'\n'
comment|'# and run the state sync in a later round'
nl|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance is in the process of "'
nl|'\n'
string|'"migrating to this host. Wait next "'
nl|'\n'
string|'"sync_power cycle before setting "'
nl|'\n'
string|'"power state to NOSTATE"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance found in database but not "'
nl|'\n'
string|'"known by hypervisor. Setting power "'
nl|'\n'
string|'"state to NOSTATE"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# no need to update vm_state for deleted instances'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'vm_power_state'
op|'=='
name|'db_power_state'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'vm_power_state'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
nl|'\n'
name|'and'
name|'db_instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|'"id"'
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'vm_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|'"id"'
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'vm_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_reclaim_queued_deletes
name|'def'
name|'_reclaim_queued_deletes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reclaim instances that are queued for deletion."""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'reclaim_instance_interval'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"FLAGS.reclaim_instance_interval <= 0, skipping..."'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'old_enough'
op|'='
op|'('
name|'not'
name|'instance'
op|'.'
name|'deleted_at'
name|'or'
name|'utils'
op|'.'
name|'is_older_than'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'deleted_at'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'reclaim_instance_interval'
op|')'
op|')'
newline|'\n'
name|'soft_deleted'
op|'='
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'SOFT_DELETE'
newline|'\n'
nl|'\n'
name|'if'
name|'soft_deleted'
name|'and'
name|'old_enough'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Reclaiming deleted instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|update_available_resource
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See driver.update_available_resource()\n\n        :param context: security context\n        :returns: See driver.update_available_resource()\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_instance_fault_from_exc
dedent|''
name|'def'
name|'add_instance_fault_from_exc'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'fault'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the specified fault to the database."""'
newline|'\n'
nl|'\n'
name|'code'
op|'='
number|'500'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'fault'
op|','
string|'"kwargs"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'code'
op|'='
name|'fault'
op|'.'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'code'"
op|','
number|'500'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'details'
op|'='
name|'unicode'
op|'('
name|'fault'
op|')'
newline|'\n'
name|'if'
name|'exc_info'
name|'and'
name|'code'
op|'=='
number|'500'
op|':'
newline|'\n'
indent|'            '
name|'tb'
op|'='
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
name|'details'
op|'+='
string|"'\\n'"
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_tb'
op|'('
name|'tb'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'code'"
op|':'
name|'code'
op|','
nl|'\n'
string|"'message'"
op|':'
name|'fault'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"'details'"
op|':'
name|'unicode'
op|'('
name|'details'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_fault_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'ticks_between_runs'
op|'='
name|'FLAGS'
op|'.'
name|'running_deleted_instance_poll_interval'
op|')'
newline|'\n'
DECL|member|_cleanup_running_deleted_instances
name|'def'
name|'_cleanup_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup any instances which are erroneously still running after\n        having been deleted.\n\n        Valid actions to take are:\n\n            1. noop - do nothing\n            2. log - log which instances are erroneously running\n            3. reap - shutdown and cleanup any erroneously running instances\n\n        The use-case for this cleanup task is: for various reasons, it may be\n        possible for the database to show an instance as deleted but for that\n        instance to still be running on a host machine (see bug\n        https://bugs.launchpad.net/nova/+bug/911366).\n\n        This cleanup task is a cross-hypervisor utility for finding these\n        zombied instances and either logging the discrepancy (likely what you\n        should do in production), or automatically reaping the instances (more\n        appropriate for dev environments).\n        """'
newline|'\n'
name|'action'
op|'='
name|'FLAGS'
op|'.'
name|'running_deleted_instance_action'
newline|'\n'
nl|'\n'
name|'if'
name|'action'
op|'=='
string|'"noop"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): admin contexts don't ordinarily return deleted records"
nl|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'_running_deleted_instances'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'action'
op|'=='
string|'"log"'
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Detected instance with name label "'
nl|'\n'
string|'"\'%(name)s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'action'
op|'=='
string|"'reap'"
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Destroying instance with name label "'
nl|'\n'
string|'"\'%(name)s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'Terminating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Unrecognized value \'%(action)s\'"'
nl|'\n'
string|'" for FLAGS.running_deleted_"'
nl|'\n'
string|'"instance_action"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_running_deleted_instances
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of instances nova thinks is deleted,\n        but the hypervisor thinks is still running. This method\n        should be pushed down to the virt layer for efficiency.\n        """'
newline|'\n'
DECL|function|deleted_instance
name|'def'
name|'deleted_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'present'
op|'='
name|'instance'
op|'.'
name|'name'
name|'in'
name|'present_name_labels'
newline|'\n'
name|'erroneously_running'
op|'='
name|'instance'
op|'.'
name|'deleted'
name|'and'
name|'present'
newline|'\n'
name|'old_enough'
op|'='
op|'('
name|'not'
name|'instance'
op|'.'
name|'deleted_at'
name|'or'
name|'utils'
op|'.'
name|'is_older_than'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'deleted_at'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'running_deleted_instance_timeout'
op|')'
op|')'
newline|'\n'
name|'if'
name|'erroneously_running'
name|'and'
name|'old_enough'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'present_name_labels'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
op|'['
name|'i'
name|'for'
name|'i'
name|'in'
name|'instances'
name|'if'
name|'deleted_instance'
op|'('
name|'i'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|error_out_instance_on_exception
name|'def'
name|'error_out_instance_on_exception'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|add_aggregate_host
name|'def'
name|'add_aggregate_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds a host to a physical hypervisor pool."""'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'AggregateError'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_undo_aggregate_operation'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_delete'
op|','
nl|'\n'
name|'aggregate'
op|'.'
name|'id'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|remove_aggregate_host
name|'def'
name|'remove_aggregate_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a host from a physical hypervisor pool."""'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'remove_from_aggregate'
op|'('
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'AggregateError'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_undo_aggregate_operation'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_add'
op|','
nl|'\n'
name|'aggregate'
op|'.'
name|'id'
op|','
name|'host'
op|','
nl|'\n'
name|'isinstance'
op|'('
name|'e'
op|','
name|'exception'
op|'.'
name|'AggregateError'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_undo_aggregate_operation
dedent|''
dedent|''
dedent|''
name|'def'
name|'_undo_aggregate_operation'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'op'
op|','
name|'aggregate_id'
op|','
nl|'\n'
name|'host'
op|','
name|'set_error'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'set_error'
op|':'
newline|'\n'
indent|'                '
name|'status'
op|'='
op|'{'
string|"'operational_state'"
op|':'
name|'aggregate_states'
op|'.'
name|'ERROR'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_update'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'status'
op|')'
newline|'\n'
dedent|''
name|'op'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Aggregate %(aggregate_id)s: unrecoverable state '"
nl|'\n'
string|"'during operation on %(host)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'ticks_between_runs'
op|'='
name|'FLAGS'
op|'.'
name|'image_cache_manager_interval'
op|')'
newline|'\n'
DECL|member|_run_image_cache_manager_pass
name|'def'
name|'_run_image_cache_manager_pass'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a single pass of the image cache manager."""'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'image_cache_manager_interval'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'manage_image_cache'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all processes relating to instances (guest vms).\n\nThe :py:class:`ComputeManager` class is a :py:class:`nova.manager.Manager` that\nhandles RPC calls relating to creating instances.  It is responsible for\nbuilding a disk image, launching it via the underlying virtualization driver,\nresponding to calls to check its state, attaching persistent storage, and\nterminating it.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cloudpipe'
name|'import'
name|'pipelib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'resource_tracker'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'conductor'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'consoleauth'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'hooks'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'security_group'
name|'import'
name|'openstack_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'notifier'
name|'import'
name|'api'
name|'as'
name|'notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'rpcapi'
name|'as'
name|'scheduler_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'event'
name|'as'
name|'virtevent'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'storage_users'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'virtapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|compute_opts
name|'compute_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'console_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'socket'
op|'.'
name|'getfqdn'
op|'('
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Console proxy host to use to connect '"
nl|'\n'
string|"'to instances on this host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'default_access_ip_network_name'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of network to use to set access ips for instances'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'defer_iptables_apply'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to batch up the application of IPTables rules'"
nl|'\n'
string|"' during a host restart and apply all at the end of the'"
nl|'\n'
string|"' init phase'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instances_path'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'instances'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'where instances are stored on disk'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'instance_usage_audit'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Generate periodic compute.instance.exists notifications"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'live_migration_retry_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'30'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of 1 second retries needed in live_migration"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'resume_guests_state_on_host_boot'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to start guests that were running before the '"
nl|'\n'
string|"'host rebooted'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|interval_opts
name|'interval_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'bandwidth_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'interval to pull bandwidth usage info'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"heal_instance_info_cache_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds between instance info_cache self "'
nl|'\n'
string|'"healing updates"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'host_state_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'120'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for querying the host status'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"image_cache_manager_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'2400'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds to wait between runs of the image '"
nl|'\n'
string|"'cache manager'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'reclaim_instance_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for reclaiming deleted instances'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'volume_usage_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for gathering volume usages'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|timeout_opts
name|'timeout_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"reboot_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically hard reboot an instance if it has been "'
nl|'\n'
string|'"stuck in a rebooting state longer than N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"instance_build_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Amount of time in seconds an instance can be in BUILD "'
nl|'\n'
string|'"before going into ERROR status."'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"rescue_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically unrescue an instance after N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"resize_confirm_window"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically confirm resizes after N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|running_deleted_opts
name|'running_deleted_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|'"running_deleted_instance_action"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"log"'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Action to take if a running deleted instance is detected."'
nl|'\n'
string|'"Valid options are \'noop\', \'log\' and \'reap\'. "'
nl|'\n'
string|'"Set to \'noop\' to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"running_deleted_instance_poll_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1800'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds to wait between runs of the cleanup "'
nl|'\n'
string|'"task."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"running_deleted_instance_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds after being deleted when a running "'
nl|'\n'
string|'"instance should be considered eligible for cleanup."'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'compute_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'interval_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'timeout_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'running_deleted_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'allow_resize_to_same_host'"
op|','
string|"'nova.compute.api'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'console_topic'"
op|','
string|"'nova.console.rpcapi'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|QUOTAS
name|'QUOTAS'
op|'='
name|'quota'
op|'.'
name|'QUOTAS'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|publisher_id
name|'def'
name|'publisher_id'
op|'('
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'notifier'
op|'.'
name|'publisher_id'
op|'('
string|'"compute"'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reverts_task_state
dedent|''
name|'def'
name|'reverts_task_state'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to revert task_state on failure."""'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Possibly task preempted."'
op|')'
op|')'
newline|'\n'
comment|'# Note(maoy): unexpected task state means the current'
nl|'\n'
comment|'# task is preempted. Do not clear task state in this'
nl|'\n'
comment|'# case.'
nl|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_instance_fault
dedent|''
name|'def'
name|'wrap_instance_fault'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method to catch exceptions related to instances.\n\n    This decorator wraps a method to catch any exceptions having to do with\n    an instance that may get thrown. It then logs an instance fault in the db.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|"# NOTE(gtt): If argument 'instance' is in args rather than kwargs,"
nl|'\n'
comment|'# we will get a KeyError exception which will cover up the real'
nl|'\n'
comment|'# exception. So, we update kwargs with the values from args first.'
nl|'\n'
comment|"# then, we can get 'instance' from kwargs easily."
nl|'\n'
indent|'            '
name|'kwargs'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'zip'
op|'('
name|'function'
op|'.'
name|'func_code'
op|'.'
name|'co_varnames'
op|'['
number|'2'
op|':'
op|']'
op|','
name|'args'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|','
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|','
nl|'\n'
name|'e'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_instance_event
dedent|''
name|'def'
name|'wrap_instance_event'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method to log the event taken on the instance, and result.\n\n    This decorator wraps a method to log the start and result of an event, as\n    part of an action taken on an instance.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'wrapped_func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
name|'keyed_args'
op|'='
name|'utils'
op|'.'
name|'getcallargs'
op|'('
name|'wrapped_func'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'keyed_args'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'event_name'
op|'='
string|"'compute_{0}'"
op|'.'
name|'format'
op|'('
name|'function'
op|'.'
name|'func_name'
op|')'
newline|'\n'
name|'with'
name|'compute_utils'
op|'.'
name|'EventReporter'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'event_name'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_image_meta
dedent|''
name|'def'
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'image_service'
op|','
name|'image_id'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
name|'context'
op|','
nl|'\n'
name|'image_ref'
op|')'
newline|'\n'
name|'return'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeVirtAPI
dedent|''
name|'class'
name|'ComputeVirtAPI'
op|'('
name|'virtapi'
op|'.'
name|'VirtAPI'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeVirtAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_compute'
op|'='
name|'compute'
newline|'\n'
nl|'\n'
DECL|member|instance_update
dedent|''
name|'def'
name|'instance_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'updates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
op|'**'
name|'updates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_get_by_uuid
dedent|''
name|'def'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_get_all_by_host
dedent|''
name|'def'
name|'instance_get_all_by_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|aggregate_get_by_host
dedent|''
name|'def'
name|'aggregate_get_by_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'key'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_get_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'host'
op|','
name|'key'
op|'='
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|aggregate_metadata_add
dedent|''
name|'def'
name|'aggregate_metadata_add'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate'
op|','
name|'metadata'
op|','
nl|'\n'
name|'set_delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_metadata_add'
op|'('
nl|'\n'
name|'context'
op|','
name|'aggregate'
op|','
name|'metadata'
op|','
name|'set_delete'
op|'='
name|'set_delete'
op|')'
newline|'\n'
nl|'\n'
DECL|member|aggregate_metadata_delete
dedent|''
name|'def'
name|'aggregate_metadata_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_metadata_delete'
op|'('
nl|'\n'
name|'context'
op|','
name|'aggregate'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|security_group_get_by_instance
dedent|''
name|'def'
name|'security_group_get_by_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'security_group_get_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|security_group_rule_get_by_security_group
dedent|''
name|'def'
name|'security_group_rule_get_by_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
nl|'\n'
name|'security_group_rule_get_by_security_group'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|provider_fw_rule_get_all
dedent|''
name|'def'
name|'provider_fw_rule_get_all'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'provider_fw_rule_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|agent_build_get_by_triple
dedent|''
name|'def'
name|'agent_build_get_by_triple'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hypervisor'
op|','
name|'os'
op|','
name|'architecture'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'agent_build_get_by_triple'
op|'('
nl|'\n'
name|'context'
op|','
name|'hypervisor'
op|','
name|'os'
op|','
name|'architecture'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_type_get
dedent|''
name|'def'
name|'instance_type_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeManager
dedent|''
dedent|''
name|'class'
name|'ComputeManager'
op|'('
name|'manager'
op|'.'
name|'SchedulerDependentManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages the running instances from creation to destruction."""'
newline|'\n'
nl|'\n'
DECL|variable|RPC_API_VERSION
name|'RPC_API_VERSION'
op|'='
string|"'2.26'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load configuration options and connect to the hypervisor."""'
newline|'\n'
name|'self'
op|'.'
name|'virtapi'
op|'='
name|'ComputeVirtAPI'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
op|'.'
name|'load_compute_driver'
op|'('
name|'self'
op|'.'
name|'virtapi'
op|','
name|'compute_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_last_host_check'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_vol_usage_poll'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_info_cache_heal'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'='
name|'scheduler_rpcapi'
op|'.'
name|'SchedulerAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'='
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'is_quantum_security_groups'
op|'='
op|'('
nl|'\n'
name|'openstack_driver'
op|'.'
name|'is_quantum_security_groups'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'='
name|'consoleauth'
op|'.'
name|'rpcapi'
op|'.'
name|'ConsoleAuthAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'ComputeManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|'"compute"'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_resource_tracker
dedent|''
name|'def'
name|'_get_resource_tracker'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'.'
name|'get'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rt'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'nodename'
name|'not'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%(nodename)s is not a valid node managed by this "'
nl|'\n'
string|'"compute host."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'rt'
op|'='
name|'resource_tracker'
op|'.'
name|'ResourceTracker'
op|'('
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
name|'nodename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'['
name|'nodename'
op|']'
op|'='
name|'rt'
newline|'\n'
dedent|''
name|'return'
name|'rt'
newline|'\n'
nl|'\n'
DECL|member|_instance_update
dedent|''
name|'def'
name|'_instance_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance in the database using kwargs as value."""'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
op|'('
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|'=='
name|'self'
op|'.'
name|'host'
name|'and'
nl|'\n'
name|'instance_ref'
op|'['
string|"'node'"
op|']'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'instance_ref'
op|'.'
name|'get'
op|'('
string|"'node'"
op|')'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'update_usage'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'instance_ref'
newline|'\n'
nl|'\n'
DECL|member|_set_instance_error_state
dedent|''
name|'def'
name|'_set_instance_error_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Instance has been destroyed from under us while '"
nl|'\n'
string|"'trying to set it to ERROR'"
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instances_on_driver
dedent|''
dedent|''
name|'def'
name|'_get_instances_on_driver'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of instance records that match the instances found\n        on the hypervisor.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'driver_uuids'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
newline|'\n'
name|'local_instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
op|'{'
string|"'uuid'"
op|':'
name|'driver_uuids'
op|'}'
op|')'
newline|'\n'
name|'local_instance_uuids'
op|'='
op|'['
name|'inst'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'inst'
name|'in'
name|'local_instances'
op|']'
newline|'\n'
name|'for'
name|'uuid'
name|'in'
name|'set'
op|'('
name|'driver_uuids'
op|')'
op|'-'
name|'set'
op|'('
name|'local_instance_uuids'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Instance %(uuid)s found in the hypervisor, but '"
nl|'\n'
string|"'not in the database'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'local_instances'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|"# The driver doesn't support uuids listing, so we'll have"
nl|'\n'
comment|'# to brute force.'
nl|'\n'
dedent|''
name|'driver_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'name_map'
op|'='
name|'dict'
op|'('
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'instance'
op|')'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|')'
newline|'\n'
name|'local_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'driver_instance'
name|'in'
name|'driver_instances'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'name_map'
op|'.'
name|'get'
op|'('
name|'driver_instance'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Instance %(driver_instance)s found in the '"
nl|'\n'
string|"'hypervisor, but not in the database'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'local_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'local_instances'
newline|'\n'
nl|'\n'
DECL|member|_destroy_evacuated_instances
dedent|''
name|'def'
name|'_destroy_evacuated_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys evacuated instances.\n\n        While nova-compute was down, the instances running on it could be\n        evacuated to another host. Check that the instances reported\n        by the driver are still associated with this host.  If they are\n        not, destroy them.\n        """'
newline|'\n'
name|'our_host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'local_instances'
op|'='
name|'self'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'local_instances'
op|':'
newline|'\n'
indent|'            '
name|'instance_host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
op|'!='
name|'our_host'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Deleting instance as its host ('"
nl|'\n'
string|"'%(instance_host)s) is not equal to our '"
nl|'\n'
string|"'host (%(our_host)s).'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'bdi'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'bdi'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_init_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'_init_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Initialize this instance during service init.'''"
newline|'\n'
name|'closing_vm_states'
op|'='
op|'('
name|'vm_states'
op|'.'
name|'DELETED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|')'
newline|'\n'
nl|'\n'
comment|"# instance was supposed to shut down - don't attempt"
nl|'\n'
comment|'# recovery in any case'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
name|'in'
name|'closing_vm_states'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'net_info'
op|'='
name|'compute_utils'
op|'.'
name|'get_nw_info_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|"# We're calling plug_vifs to ensure bridge and iptables"
nl|'\n'
comment|'# rules exist. This needs to be called for each instance.'
nl|'\n'
name|'legacy_net_info'
op|'='
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'net_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'legacy_net_info'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|'=='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|':'
newline|'\n'
comment|'# We crashed during resize/migration, so roll back for safety'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_revert_migration'
op|'('
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'net_info'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to revert crashed migration'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Instance found in migrating state during '"
nl|'\n'
string|"'startup. Resetting task_state'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'db_state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'drv_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'expect_running'
op|'='
op|'('
name|'db_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
name|'and'
nl|'\n'
name|'drv_state'
op|'!='
name|'db_state'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Current state is %(drv_state)s, state in DB is '"
nl|'\n'
string|"'%(db_state)s.'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expect_running'
name|'and'
name|'CONF'
op|'.'
name|'resume_guests_state_on_host_boot'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Rebooting instance after nova-compute restart.'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume_state_on_host_boot'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'net_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'resume guests'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# NOTE(vish): The instance failed to resume, so we set the'
nl|'\n'
comment|'#             instance to error and attempt to continue.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Failed to resume instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'drv_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
comment|'# VMwareAPI drivers will raise an exception'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'net_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'firewall rules'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_lifecycle_event
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_lifecycle_event'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Lifecycle event %(state)d on VM %(uuid)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'state'"
op|':'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'event'
op|'.'
name|'get_instance_uuid'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'event'
op|'.'
name|'get_instance_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'vm_power_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'SHUTDOWN'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_STARTED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_PAUSED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'PAUSED'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_RESUMED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Unexpected power state %d"'
op|')'
op|'%'
nl|'\n'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vm_power_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_power_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_events
dedent|''
dedent|''
name|'def'
name|'handle_events'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'event'
op|','
name|'virtevent'
op|'.'
name|'LifecycleEvent'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handle_lifecycle_event'
op|'('
name|'event'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Ignoring event %s"'
op|')'
op|'%'
name|'event'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_virt_events
dedent|''
dedent|''
name|'def'
name|'init_virt_events'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'register_event_listener'
op|'('
name|'self'
op|'.'
name|'handle_events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialization for a standalone compute service."""'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'defer_iptables_apply'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'filter_defer_apply_on'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'init_virt_events'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# checking that instance was not already evacuated to other host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_init_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'CONF'
op|'.'
name|'defer_iptables_apply'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'filter_defer_apply_off'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_report_driver_status'
op|'('
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'publish_service_capabilities'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_start_hook
dedent|''
name|'def'
name|'pre_start_hook'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""After the service is initialized, but before we fully bring\n        the service up by listening on RPC queues, make sure to update\n        our available resources.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'update_available_resource'
op|'('
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_power_state
dedent|''
name|'def'
name|'_get_power_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the power state for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Checking state'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'['
string|'"state"'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
nl|'\n'
DECL|member|get_backdoor_port
dedent|''
dedent|''
name|'def'
name|'get_backdoor_port'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return backdoor port for eventlet_backdoor."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'backdoor_port'
newline|'\n'
nl|'\n'
DECL|member|get_console_topic
dedent|''
name|'def'
name|'get_console_topic'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the console host for a project on this host.\n\n        Currently this is just set in the flags for each compute host.\n\n        """'
newline|'\n'
comment|'#TODO(mdragon): perhaps make this variable by console_type?'
nl|'\n'
name|'return'
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'console_topic'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'console_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_pool_info'
op|'('
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_security_group_rules
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group rules.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_security_group_members
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group members.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_instance_security_rules
name|'def'
name|'refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security rules for\n        an instance.\n\n        Passes straight through to the virtualization driver.\n\n        Synchronise the call beacuse we may still be in the middle of\n        creating the instance.\n        """'
newline|'\n'
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|function|_sync_refresh
name|'def'
name|'_sync_refresh'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_instance_security_rules'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_sync_refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_provider_fw_rules
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This call passes straight through to the virtualization driver."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_nw_info
dedent|''
name|'def'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a list of dictionaries of network data of an instance."""'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'conductor_api'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|')'
newline|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_legacy_nw_info
dedent|''
name|'def'
name|'_legacy_nw_info'
op|'('
name|'self'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Converts the model nw_info object to legacy style."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'legacy_nwinfo'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'network_info'
op|'.'
name|'legacy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_setup_block_device_mapping
dedent|''
name|'def'
name|'_setup_block_device_mapping'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""setup volumes for block device mapping."""'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'swap'
op|'='
name|'None'
newline|'\n'
name|'ephemerals'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Setting up bdm %s'"
op|')'
op|','
name|'bdm'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'bdm'
op|'['
string|"'no_device'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'virtual_name'
op|'='
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
newline|'\n'
name|'device_name'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'assert'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'                    '
name|'swap'
op|'='
op|'{'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'swap_size'"
op|':'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'eph'
op|'='
op|'{'
string|"'num'"
op|':'
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
name|'virtual_name'
op|')'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'virtual_name'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'}'
newline|'\n'
name|'ephemerals'
op|'.'
name|'append'
op|'('
name|'eph'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
op|'('
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
nl|'\n'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# TODO(yamahata): default name and description'
nl|'\n'
indent|'                '
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
name|'context'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
op|')'
newline|'\n'
name|'vol'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'snapshot'
op|')'
newline|'\n'
comment|'# TODO(yamahata): creating volume simultaneously'
nl|'\n'
comment|'#                 reduces creation time?'
nl|'\n'
comment|'# TODO(yamahata): eliminate dumb polling'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                    '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'vol'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'volume'
op|'['
string|"'status'"
op|']'
op|'!='
string|"'creating'"
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'volume_id'"
op|':'
name|'vol'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'vol'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'cinfo'
op|'='
name|'self'
op|'.'
name|'_attach_volume_boot'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'cinfo'
op|')'
op|'}'
op|')'
newline|'\n'
name|'bdmap'
op|'='
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|'}'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
name|'bdmap'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'block_device_info'
op|'='
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'swap'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
name|'ephemerals'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'block_device_info'
newline|'\n'
nl|'\n'
DECL|member|_run_instance
dedent|''
name|'def'
name|'_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'requested_networks'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'is_first_time'
op|','
name|'node'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Launch a new instance with specified options."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# If quantum security groups pass requested security'
nl|'\n'
comment|'# groups to allocate_for_instance()'
nl|'\n'
name|'if'
name|'request_spec'
name|'and'
name|'self'
op|'.'
name|'is_quantum_security_groups'
op|':'
newline|'\n'
indent|'            '
name|'security_groups'
op|'='
name|'request_spec'
op|'.'
name|'get'
op|'('
string|"'security_group'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'security_groups'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check_instance_exists'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'_check_image_size'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"No node specified, defaulting to %(node)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_meta'
op|':'
newline|'\n'
indent|'                '
name|'extra_usage_info'
op|'='
op|'{'
string|'"image_name"'
op|':'
name|'image_meta'
op|'['
string|"'name'"
op|']'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'extra_usage_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_start_building'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create.start"'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'None'
newline|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'node'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'limits'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'limits'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'rt'
op|'.'
name|'instance_claim'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'limits'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'macs'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'macs_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_allocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'macs'
op|','
name|'security_groups'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# the instance got deleted during the spawn'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to dealloc network for deleted instance'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'actual_task_state'
op|'='
name|'e'
op|'.'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'actual'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'actual_task_state'
op|'=='
string|"'deleting'"
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Instance was deleted during spawn.'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
comment|'# try to re-schedule instance:'
nl|'\n'
name|'self'
op|'.'
name|'_reschedule_or_reraise'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'admin_password'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'is_first_time'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Spawn success:'
nl|'\n'
indent|'                '
name|'if'
op|'('
name|'is_first_time'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'access_ip_v4'"
op|']'
nl|'\n'
name|'and'
name|'not'
name|'instance'
op|'['
string|"'access_ip_v6'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_update_access_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"create.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_log_original_error
dedent|''
dedent|''
dedent|''
name|'def'
name|'_log_original_error'
op|'('
name|'self'
op|','
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'type_'
op|','
name|'value'
op|','
name|'tb'
op|'='
name|'exc_info'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Error: %s'"
op|')'
op|'%'
nl|'\n'
name|'traceback'
op|'.'
name|'format_exception'
op|'('
name|'type_'
op|','
name|'value'
op|','
name|'tb'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule_or_reraise
dedent|''
name|'def'
name|'_reschedule_or_reraise'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'admin_password'
op|','
name|'injected_files'
op|','
name|'is_first_time'
op|','
nl|'\n'
name|'request_spec'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Try to re-schedule the build or re-raise the original build error to\n        error out the instance.\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'rescheduled'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'instance'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# do not attempt retry if network de-allocation failed:'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'method_args'
op|'='
op|'('
name|'request_spec'
op|','
name|'admin_password'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'is_first_time'
op|','
name|'filter_properties'
op|')'
newline|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
nl|'\n'
name|'rescheduled'
op|'='
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'run_instance'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_state'
op|','
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'rescheduled'
op|'='
name|'False'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error trying to reschedule"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescheduled'
op|':'
newline|'\n'
comment|'# log the original build error'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# not re-scheduling'
nl|'\n'
indent|'            '
name|'raise'
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_reschedule
dedent|''
dedent|''
name|'def'
name|'_reschedule'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'scheduler_method'
op|','
name|'method_args'
op|','
name|'task_state'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attempt to re-schedule a compute operation."""'
newline|'\n'
nl|'\n'
name|'retry'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'retry'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'retry'
op|':'
newline|'\n'
comment|'# no retry information, do not reschedule.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Retry info not present, will not reschedule"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'request_spec'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"No request spec, will not reschedule"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'request_spec'
op|'['
string|"'instance_uuids'"
op|']'
op|'='
op|'['
name|'instance_uuid'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Re-scheduling %(method)s: attempt %(num)d"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'scheduler_method'
op|'.'
name|'func_name'
op|','
nl|'\n'
string|"'num'"
op|':'
name|'retry'
op|'['
string|"'num_attempts'"
op|']'
op|'}'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset the task state:'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'task_state'
op|'='
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'exc_info'
op|':'
newline|'\n'
comment|'# stringify to avoid circular ref problem in json serialization:'
nl|'\n'
indent|'            '
name|'retry'
op|'['
string|"'exc'"
op|']'
op|'='
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'scheduler_method'
op|'('
name|'context'
op|','
op|'*'
name|'method_args'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_check_instance_build_time
name|'def'
name|'_check_instance_build_time'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that instances are not stuck in build."""'
newline|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'instance_build_timeout'
newline|'\n'
name|'if'
name|'timeout'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'filters'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
newline|'\n'
name|'building_insts'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'building_insts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'['
string|"'created_at'"
op|']'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance build timed out. Set to error state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_access_ip
dedent|''
dedent|''
dedent|''
name|'def'
name|'_update_access_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'nw_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the access ip values for a given instance.\n\n        If CONF.default_access_ip_network_name is set, this method will\n        grab the corresponding network and set the access ip values\n        accordingly. Note that when there are multiple ips to choose from,\n        an arbitrary one will be chosen.\n        """'
newline|'\n'
nl|'\n'
name|'network_name'
op|'='
name|'CONF'
op|'.'
name|'default_access_ip_network_name'
newline|'\n'
name|'if'
name|'not'
name|'network_name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
dedent|''
name|'update_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'nw_info'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|'=='
name|'network_name'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'ip'
name|'in'
name|'vif'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                        '
name|'update_info'
op|'['
string|"'access_ip_v4'"
op|']'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                        '
name|'update_info'
op|'['
string|"'access_ip_v6'"
op|']'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'update_info'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'**'
name|'update_info'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|_check_instance_exists
dedent|''
name|'def'
name|'_check_instance_exists'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure an instance with the same name is not already present."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_image_size
dedent|''
dedent|''
name|'def'
name|'_check_image_size'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure image is smaller than the maximum size allowed by the\n        instance_type.\n\n        The image stored in Glance is potentially compressed, so we use two\n        checks to ensure that the size isn\'t exceeded:\n\n            1) This one - checks compressed size, this a quick check to\n               eliminate any images which are obviously too large\n\n            2) Check uncompressed size in nova.virt.xenapi.vm_utils. This\n               is a slower check since it requires uncompressing the entire\n               image, but is accurate because it reflects the image\'s\n               actual size.\n        """'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# Instance was started from volume - so no image ref'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'size_bytes'
op|'='
name|'image_meta'
op|'['
string|"'size'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# Size is not a required field in the image service (yet), so'
nl|'\n'
comment|"# we are unable to rely on it being there even though it's in"
nl|'\n'
comment|'# glance.'
nl|'\n'
nl|'\n'
comment|'# TODO(jk0): Should size be required in the image service?'
nl|'\n'
indent|'            '
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'extract_instance_type'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'allowed_size_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): root_gb is allowed to be 0 for legacy reasons'
nl|'\n'
comment|'# since libvirt interpreted the value differently than other'
nl|'\n'
comment|"# drivers. A value of 0 means don't check size."
nl|'\n'
name|'if'
name|'not'
name|'allowed_size_gb'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'allowed_size_bytes'
op|'='
name|'allowed_size_gb'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"image_id=%(image_id)s, image_size_bytes="'
nl|'\n'
string|'"%(size_bytes)d, allowed_size_bytes="'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'size_bytes'
op|'>'
name|'allowed_size_bytes'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Image \'%(image_id)s\' size %(size_bytes)d exceeded"'
nl|'\n'
string|'" instance_type allowed size "'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageTooLarge'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|_start_building
dedent|''
name|'def'
name|'_start_building'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save the host and launched_on fields and log appropriately."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Starting instance...'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
op|'('
name|'task_states'
op|'.'
name|'SCHEDULING'
op|','
nl|'\n'
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_network
dedent|''
name|'def'
name|'_allocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|','
name|'macs'
op|','
nl|'\n'
name|'security_groups'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocate networks for an instance and return the network info."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'NETWORKING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'is_vpn'
op|'='
name|'pipelib'
op|'.'
name|'is_vpn_image'
op|'('
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# allocate and get network info'
nl|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vpn'
op|'='
name|'is_vpn'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'macs'
op|','
nl|'\n'
name|'conductor_api'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'security_groups'
op|'='
name|'security_groups'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance failed network setup'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Instance network_info: |%s|'"
op|')'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_prep_block_device
dedent|''
name|'def'
name|'_prep_block_device'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up the block device for an instance with error logging."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance failed block device setup'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_spawn
dedent|''
dedent|''
name|'def'
name|'_spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'injected_files'
op|','
name|'admin_password'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawn an instance with error logging and update its power state."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance failed to spawn'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_notify_about_instance_usage
dedent|''
name|'def'
name|'_notify_about_instance_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
name|'system_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(sirp): The only thing this wrapper function does extra is handle'
nl|'\n'
comment|'# the passing in of `self.host`. Ordinarily this will just be'
nl|'\n'
comment|"# CONF.host`, but `Manager`'s gets a chance to override this in its"
nl|'\n'
comment|'# `__init__`.'
nl|'\n'
indent|'        '
name|'compute_utils'
op|'.'
name|'notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'system_metadata'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deallocate_network
dedent|''
name|'def'
name|'_deallocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Deallocating network for instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_volume_bdms
dedent|''
name|'def'
name|'_get_volume_bdms'
op|'('
name|'self'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return only bdms that have a volume_id."""'
newline|'\n'
name|'return'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Legacy interface for digging up volumes in the database'
nl|'\n'
DECL|member|_get_instance_volume_bdms
dedent|''
name|'def'
name|'_get_instance_volume_bdms'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_get_volume_bdms'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_bdm
dedent|''
name|'def'
name|'_get_instance_volume_bdm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
comment|"# NOTE(vish): Comparing as strings because the os_api doesn't"
nl|'\n'
comment|'#             convert to integer and we may wish to support uuids'
nl|'\n'
comment|'#             in the future.'
nl|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
op|'=='
name|'str'
op|'('
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): This is a transitional interface until all the callers'
nl|'\n'
comment|'# can provide their own bdms'
nl|'\n'
DECL|member|_get_instance_volume_block_device_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_instance_volume_block_device_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'bdms'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_get_volume_block_device_info'
op|'('
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_volume_block_device_info
dedent|''
name|'def'
name|'_get_volume_block_device_info'
op|'('
name|'self'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cinfo'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'cinfo'
name|'and'
string|"'serial'"
name|'not'
name|'in'
name|'cinfo'
op|':'
newline|'\n'
indent|'                    '
name|'cinfo'
op|'['
string|"'serial'"
op|']'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
dedent|''
name|'bdmap'
op|'='
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|'}'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
name|'bdmap'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# if the block_device_mapping has no value in connection_info'
nl|'\n'
comment|"# (returned as None), don't include in the mapping"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'request_spec'
op|'='
name|'None'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'None'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_first_time'
op|'='
name|'False'
op|','
name|'node'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'filter_properties'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'injected_files'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'injected_files'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'injected_files'
op|'='
op|'['
op|'('
name|'path'
op|','
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'contents'
op|')'
op|')'
nl|'\n'
name|'for'
name|'path'
op|','
name|'contents'
name|'in'
name|'injected_files'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|function|do_run_instance
name|'def'
name|'do_run_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'requested_networks'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'is_first_time'
op|','
name|'node'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'do_run_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_shutdown_instance
dedent|''
name|'def'
name|'_shutdown_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'%(action_str)s instance'"
op|')'
op|'%'
op|'{'
string|"'action_str'"
op|':'
string|"'Terminating'"
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"shutdown.start"'
op|')'
newline|'\n'
nl|'\n'
comment|'# get network info before tearing down'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NetworkNotFound'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# tear down allocated network structure'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Failed to deallocate network for instance.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) get bdms before destroying the instance'
nl|'\n'
dedent|''
dedent|''
name|'vol_bdms'
op|'='
name|'self'
op|'.'
name|'_get_volume_bdms'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'vol_bdms'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(vish): actual driver detach done in driver.destroy, so'
nl|'\n'
comment|'#             just tell nova-volume that we are done with it.'
nl|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'DiskNotFound'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Ignoring DiskNotFound: %s'"
op|')'
op|'%'
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VolumeNotFound'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Ignoring VolumeNotFound: %s'"
op|')'
op|'%'
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"shutdown.end"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_volumes
dedent|''
name|'def'
name|'_cleanup_volumes'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"terminating bdm %s"'
op|')'
op|'%'
name|'bdm'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'and'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
comment|'# NOTE(vish): bdms will be deleted on instance destroy'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'hooks'
op|'.'
name|'add_hook'
op|'('
string|'"delete_instance"'
op|')'
newline|'\n'
DECL|member|_delete_instance
name|'def'
name|'_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete an instance on this host."""'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_info_cache_delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"delete.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
comment|'# NOTE(vish): We have already deleted the instance, so we have'
nl|'\n'
comment|'#             to ignore problems cleaning up the volumes. It would'
nl|'\n'
comment|'#             be nice to let the user know somehow that the volume'
nl|'\n'
comment|'#             deletion failed, but it is not acceptable to have an'
nl|'\n'
comment|'#             instance that can not be deleted. Perhaps this could'
nl|'\n'
comment|'#             be reworked in the future to set an instance fault'
nl|'\n'
comment|'#             the first time and to only ignore the failure if the'
nl|'\n'
comment|'#             instance is already in ERROR.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Ignoring volume cleanup failure due to %s"'
op|')'
op|'%'
name|'exc'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# if a delete task succeed, always update vm state and task state'
nl|'\n'
comment|'# without expecting task state to be DELETING'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
name|'system_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure block device mappings are not leaked'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"delete.end"'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'system_meta'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'vnc_enabled'
name|'or'
name|'CONF'
op|'.'
name|'spice'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'delete_tokens_for_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|terminate_instance
name|'def'
name|'terminate_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance on this host."""'
newline|'\n'
comment|'# Note(eglynn): we do not decorate this action with reverts_task_state'
nl|'\n'
comment|'# because a failure during termination should leave the task state as'
nl|'\n'
comment|'# DELETING, as a signal to the API layer that a subsequent deletion'
nl|'\n'
comment|'# attempt should not result in a further decrement of the quota_usages'
nl|'\n'
comment|'# in_use count (see bug 1046236).'
nl|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(danms): remove this compatibility in the future'
nl|'\n'
name|'if'
name|'not'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|function|do_terminate_instance
name|'def'
name|'do_terminate_instance'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'do_terminate_instance'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): This is probably better named power_off_instance'
nl|'\n'
comment|'# so it matches the driver method, but because of other issues, we'
nl|'\n'
comment|"# can't use that name in grizzly."
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|stop_instance
name|'def'
name|'stop_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stopping an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_off.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
op|'('
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'STOPPING'
op|')'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_off.end"'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): This is probably better named power_on_instance'
nl|'\n'
comment|'# so it matches the driver method, but because of other issues, we'
nl|'\n'
comment|"# can't use that name in grizzly."
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|start_instance
name|'def'
name|'start_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starting an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_on.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
op|'('
name|'task_states'
op|'.'
name|'POWERING_ON'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'STARTING'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_on.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|soft_delete_instance
name|'def'
name|'soft_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Soft delete an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"soft_delete.start"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'soft_delete'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# Fallback to just powering off the instance if the hypervisor'
nl|'\n'
comment|"# doesn't implement the soft_delete method"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"soft_delete.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|restore_instance
name|'def'
name|'restore_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a soft-deleted instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"restore.start"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'restore'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# Fallback to just powering on the instance if the hypervisor'
nl|'\n'
comment|"# doesn't implement the restore method"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESTORING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"restore.end"'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): In the folsom release, power_off_instance was poorly'
nl|'\n'
comment|'# named. It was the main entry point to soft delete an instance. That'
nl|'\n'
comment|'# has been changed to soft_delete_instance now, but power_off_instance'
nl|'\n'
comment|'# will need to stick around for compatibility in grizzly.'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|power_off_instance
name|'def'
name|'power_off_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'soft_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): In the folsom release, power_on_instance was poorly'
nl|'\n'
comment|'# named. It was the main entry point to restore a soft deleted instance.'
nl|'\n'
comment|'# That has been changed to restore_instance now, but power_on_instance'
nl|'\n'
comment|'# will need to stick around for compatibility in grizzly.'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|power_on_instance
name|'def'
name|'power_on_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'restore_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rebuild_instance
name|'def'
name|'rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'orig_image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'new_pass'
op|','
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'bdms'
op|'='
name|'None'
op|','
name|'recreate'
op|'='
name|'False'
op|','
name|'on_shared_storage'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy and re-make this instance.\n\n        A \'rebuild\' effectively purges all existing data from the system and\n        remakes the VM with given \'metadata\' and \'personalities\'.\n\n        :param context: `nova.RequestContext` object\n        :param instance: Instance dict\n        :param orig_image_ref: Original image_ref before rebuild\n        :param image_ref: New image_ref for rebuild\n        :param injected_files: Files to inject\n        :param new_pass: password to set on rebuilt instance\n        :param orig_sys_metadata: instance system metadata from pre-rebuild\n        :param bdms: block-device-mappings to use for rebuild\n        :param recreate: True if instance should be recreated with same disk\n        :param on_shared_storage: True if instance files on shared storage\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'orig_vm_state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebuilding instance"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'recreate'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|'"supports_recreate"'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InstanceRecreateNotSupported'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_instance_exists'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# To cover case when admin expects that instance files are on'
nl|'\n'
comment|'# shared storage, but not accessible and vice versa'
nl|'\n'
name|'if'
name|'on_shared_storage'
op|'!='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_on_disk'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidSharedStorage'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Invalid state of instance files on shared"'
nl|'\n'
string|'" storage"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'on_shared_storage'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'disk on shared storage, recreating using'"
nl|'\n'
string|"' existing disk'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'image_ref'
op|'='
name|'orig_image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"disk not on shared storagerebuilding from:"'
nl|'\n'
string|'" \'%s\'"'
op|')'
op|'%'
name|'str'
op|'('
name|'image_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_ref'
op|':'
newline|'\n'
indent|'                '
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# This instance.exists message should contain the original'
nl|'\n'
comment|'# image_ref, not the new one.  Since the DB has been updated'
nl|'\n'
comment|'# to point to the new one... we have to override it.'
nl|'\n'
dedent|''
name|'orig_image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'orig_image_ref'
op|')'
newline|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'image_ref_url'"
op|':'
name|'orig_image_ref_url'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'notify_usage_exists'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'current_period'
op|'='
name|'True'
op|','
name|'system_metadata'
op|'='
name|'orig_sys_metadata'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# This message should contain the new image_ref'
nl|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'image_name'"
op|':'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
string|"''"
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"rebuild.start"'
op|','
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'recreate'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'bdms'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): this detach is necessary b/c we will reattach the'
nl|'\n'
comment|'# volumes in _prep_block_devices below.'
nl|'\n'
dedent|''
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_volume_bdms'
op|'('
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'recreate'
op|':'
newline|'\n'
indent|'                '
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_volume_block_device_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_get_volume_bdms'
op|'('
name|'bdms'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'['
string|"'injected_files'"
op|']'
op|'='
name|'injected_files'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
nl|'\n'
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
op|'['
op|']'
op|','
name|'new_pass'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"bringing vm to original state: \'%s\'"'
op|')'
op|'%'
name|'orig_vm_state'
op|')'
newline|'\n'
name|'if'
name|'orig_vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'STOPPED'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'STOPPING'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stop_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"rebuild.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reboot_instance
name|'def'
name|'reboot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'reboot_type'
op|'='
string|'"SOFT"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebooting instance"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): remove these when RPC API < 2.5 compatibility'
nl|'\n'
comment|'# is no longer needed'
nl|'\n'
name|'if'
name|'block_device_info'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"reboot.start"'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to reboot a non-running '"
nl|'\n'
string|"'instance: (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'reboot_type'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Cannot reboot instance: %(exc)s'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|','
name|'instance'
op|','
name|'exc'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# Fall through and reset task_state to None'
nl|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance disappeared during reboot"'
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"reboot.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|snapshot_instance
name|'def'
name|'snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_type'
op|'='
string|"'snapshot'"
op|','
name|'backup_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'rotation'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot an instance on this host.\n\n        :param context: security context\n        :param instance: an Instance dict\n        :param image_id: glance.db.sqlalchemy.models.Image.Id\n        :param image_type: snapshot | backup\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance snapshotting'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to snapshot a non-running '"
nl|'\n'
string|"'instance: (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"snapshot.start"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
indent|'            '
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
newline|'\n'
nl|'\n'
DECL|function|update_task_state
dedent|''
name|'def'
name|'update_task_state'
op|'('
name|'task_state'
op|','
name|'expected_state'
op|'='
name|'expected_task_state'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_state'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'expected_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
newline|'\n'
comment|'# The instance could have changed from the driver.  But since'
nl|'\n'
comment|"# we're doing a fresh update here, we'll grab the changes."
nl|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
string|"'snapshot'"
name|'and'
name|'rotation'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageRotationNotAllowed'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
name|'and'
name|'rotation'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rotate_backups'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'RotationRequiredForBackup'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"snapshot.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|_rotate_backups
name|'def'
name|'_rotate_backups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete excess backups associated to an instance.\n\n        Instances are allowed a fixed number of backups (the rotation number);\n        this method deletes the oldest backups that exceed the rotation\n        threshold.\n\n        :param context: security context\n        :param instance: Instance dict\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
name|'image_service'
op|'='
name|'glance'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'property-image_type'"
op|':'
string|"'backup'"
op|','
nl|'\n'
string|"'property-backup_type'"
op|':'
name|'backup_type'
op|','
nl|'\n'
string|"'property-instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'images'
op|'='
name|'image_service'
op|'.'
name|'detail'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|'='
string|"'created_at'"
op|','
name|'sort_dir'
op|'='
string|"'desc'"
op|')'
newline|'\n'
name|'num_images'
op|'='
name|'len'
op|'('
name|'images'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found %(num_images)d images (rotation: %(rotation)d)"'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_images'
op|'>'
name|'rotation'
op|':'
newline|'\n'
comment|'# NOTE(sirp): this deletes all backups that exceed the rotation'
nl|'\n'
comment|'# limit'
nl|'\n'
indent|'            '
name|'excess'
op|'='
name|'len'
op|'('
name|'images'
op|')'
op|'-'
name|'rotation'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Rotating out %d backups"'
op|')'
op|','
name|'excess'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'excess'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'='
name|'images'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting image %s"'
op|')'
op|','
name|'image_id'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'new_pass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for an instance on this host.\n\n        This is generally only called by API password resets after an\n        image has been built.\n        """'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'if'
name|'new_pass'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Generate a random password'
nl|'\n'
indent|'            '
name|'new_pass'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
nl|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
nl|'\n'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'Failed to set admin password. Instance %s is not'"
nl|'\n'
string|"' running'"
op|')'
op|'%'
name|'instance'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstancePasswordSetFailed'
op|'('
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'reason'
op|'='
name|'_msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_admin_password'
op|'('
name|'instance'
op|','
name|'new_pass'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Root password set"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
nl|'\n'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'_msg'
op|'='
name|'_'
op|'('
string|"'set_admin_password is not implemented '"
nl|'\n'
string|"'by this driver or guest instance.'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
nl|'\n'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'_msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
op|':'
newline|'\n'
comment|'# interrupted by another (most likely delete) task'
nl|'\n'
comment|'# do not retry'
nl|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Catch all here because this could be anything.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'set_admin_password failed: %s'"
op|')'
op|'%'
name|'e'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|"# We create a new exception here so that we won't"
nl|'\n'
comment|'# potentially reveal password information to the'
nl|'\n'
comment|'# API caller.  The real exception is logged above'
nl|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'error setting admin password'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstancePasswordSetFailed'
op|'('
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'reason'
op|'='
name|'_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'path'
op|','
name|'file_contents'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the specified path in an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to inject a file into a non-running '"
nl|'\n'
string|"'(state: %(current_power_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'injecting file to %(path)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_file'
op|'('
name|'instance'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_rescue_image_ref
dedent|''
name|'def'
name|'_get_rescue_image_ref'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine what image should be used to boot the rescue VM."""'
newline|'\n'
name|'system_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_image_ref'
op|'='
name|'system_meta'
op|'.'
name|'get'
op|'('
string|"'image_base_image_ref'"
op|')'
newline|'\n'
nl|'\n'
comment|"# 1. First try to use base image associated with instance's current"
nl|'\n'
comment|'#    image.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The idea here is to provide the customer with a rescue environment'
nl|'\n'
comment|'# which they are familiar with. So, if they built their instance off of'
nl|'\n'
comment|'# a Debian image, their rescue VM wil also be Debian.'
nl|'\n'
name|'if'
name|'rescue_image_ref'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rescue_image_ref'
newline|'\n'
nl|'\n'
comment|"# 2. As a last resort, use instance's current image"
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Unable to find a different image to use for rescue VM,'"
nl|'\n'
string|"' using instance\\'s current image'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rescue_instance
name|'def'
name|'rescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rescue an instance on this host.\n        :param rescue_password: password to set on rescue instance\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Rescuing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'admin_password'
op|'='
op|'('
name|'rescue_password'
name|'if'
name|'rescue_password'
name|'else'
nl|'\n'
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_image_ref'
op|'='
name|'self'
op|'.'
name|'_get_rescue_image_ref'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'rescue_image_ref'
op|':'
newline|'\n'
indent|'            '
name|'rescue_image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'rescue_image_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rescue_image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'rescue_image_meta'
op|','
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESCUING'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unrescue_instance
name|'def'
name|'unrescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Unrescuing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unrescue'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UNRESCUING'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|change_instance_metadata
name|'def'
name|'change_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'diff'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the metadata published to the instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Changing instance metadata according to %(diff)r"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'change_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'diff'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reservations'
op|'='
name|'None'
op|','
nl|'\n'
name|'migration'
op|'='
name|'None'
op|','
name|'migration_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the source instance."""'
newline|'\n'
name|'if'
name|'not'
name|'migration'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"resize.confirm.start"'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): delete stashed old/new instance_type information'
nl|'\n'
indent|'            '
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'delete_instance_type_info'
op|'('
name|'sys_meta'
op|','
string|"'old_'"
op|','
string|"'new_'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on source host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'['
string|"'source_compute'"
op|']'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'confirm_migration'
op|'('
name|'migration'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'migration'
op|'['
string|"'source_node'"
op|']'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.confirm.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_quota_commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|'='
name|'None'
op|','
nl|'\n'
name|'migration_id'
op|'='
name|'None'
op|','
name|'reservations'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the new instance on the destination machine.\n\n        Reverts the model changes, and powers on the old instance on the\n        source machine.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'migration'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): A revert_resize is essentially a resize back to'
nl|'\n'
comment|'# the old size, so we need to send a usage event here.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): tear down networks on destination host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'network_migrate_instance_start'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_terminate_volume_connections'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'instance'
op|'.'
name|'get'
op|'('
string|"'node'"
op|')'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
name|'migration'
op|','
name|'status'
op|'='
string|"'reverted_dest'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'finish_revert_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|','
name|'migration'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_refresh_block_device_connection_info
dedent|''
dedent|''
name|'def'
name|'_refresh_block_device_connection_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""After some operations, the IQN or CHAP, for example, may have\n        changed. This call updates the DB with the latest connection info.\n        """'
newline|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'bdms'
newline|'\n'
nl|'\n'
dedent|''
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'cinfo'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
nl|'\n'
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'cinfo'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'bdms'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_revert_resize
name|'def'
name|'finish_revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reservations'
op|'='
name|'None'
op|','
nl|'\n'
name|'migration'
op|'='
name|'None'
op|','
name|'migration_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes the second half of reverting a resize.\n\n        Power back on the source instance and revert the resized attributes\n        in the database.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'migration'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.revert.start"'
op|')'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'extract_instance_type'
op|'('
name|'instance'
op|','
nl|'\n'
name|'prefix'
op|'='
string|"'old_'"
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'save_instance_type_info'
op|'('
name|'sys_meta'
op|','
name|'instance_type'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'delete_instance_type_info'
op|'('
name|'sys_meta'
op|','
string|"'new_'"
op|','
string|"'old_'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'root_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'node'
op|'='
name|'migration'
op|'['
string|"'source_node'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'['
string|"'source_compute'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_refresh_block_device_connection_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_revert_migration'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|"# Just roll back the record. There's no need to resize down since"
nl|'\n'
comment|"# the 'old' VM already has the preferred attributes"
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'network_migrate_instance_finish'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'instance'
op|'.'
name|'get'
op|'('
string|"'node'"
op|')'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.revert.end"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_quota_commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_quota_commit
dedent|''
dedent|''
name|'def'
name|'_quota_commit'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'quota_commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_quota_rollback
dedent|''
dedent|''
name|'def'
name|'_quota_rollback'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'quota_rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prep_resize
dedent|''
dedent|''
name|'def'
name|'_prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'reservations'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Instance has no source host'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'same_host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
op|'=='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'if'
name|'same_host'
name|'and'
name|'not'
name|'CONF'
op|'.'
name|'allow_resize_to_same_host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'destination same as source!'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Stash the new instance_type to avoid having to'
nl|'\n'
comment|'# look it up in the database later'
nl|'\n'
dedent|''
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'save_instance_type_info'
op|'('
name|'sys_meta'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'prefix'
op|'='
string|"'new_'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'limits'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'node'
op|')'
newline|'\n'
name|'with'
name|'rt'
op|'.'
name|'resize_claim'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
name|'as'
name|'claim'
op|':'
newline|'\n'
indent|'            '
name|'migration_ref'
op|'='
name|'claim'
op|'.'
name|'migration'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Migrating'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'resize_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration_ref'
op|','
name|'image'
op|','
name|'instance_type'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|prep_resize
name|'def'
name|'prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'None'
op|','
name|'request_spec'
op|'='
name|'None'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'None'
op|','
name|'node'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiates the process of moving a running instance to another host.\n\n        Possibly changes the RAM and disk size in the process.\n\n        """'
newline|'\n'
name|'if'
name|'node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"No node specified, defaulting to %(node)s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.prep.start"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_prep_resize'
op|'('
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'reservations'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
name|'node'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# try to re-schedule the resize elsewhere:'
nl|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reschedule_resize_or_reraise'
op|'('
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
nl|'\n'
name|'exc_info'
op|','
name|'instance_type'
op|','
name|'reservations'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'extra_usage_info'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'new_instance_type'
op|'='
name|'instance_type'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'new_instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.prep.end"'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule_resize_or_reraise
dedent|''
dedent|''
dedent|''
name|'def'
name|'_reschedule_resize_or_reraise'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'reservations'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Try to re-schedule the resize or re-raise the original error to\n        error out the instance.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'request_spec'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'rescheduled'
op|'='
name|'False'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'instance'
op|','
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'scheduler_method'
op|'='
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'prep_resize'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
nl|'\n'
name|'rescheduled'
op|'='
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance_uuid'
op|','
name|'scheduler_method'
op|','
nl|'\n'
name|'method_args'
op|','
name|'task_state'
op|','
name|'exc_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'rescheduled'
op|'='
name|'False'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error trying to reschedule"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescheduled'
op|':'
newline|'\n'
comment|'# log the original build error'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# not re-scheduling'
nl|'\n'
indent|'            '
name|'raise'
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resize_instance
name|'def'
name|'resize_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'None'
op|','
name|'migration'
op|'='
name|'None'
op|','
name|'migration_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts the migration of a running instance to another host."""'
newline|'\n'
name|'if'
name|'not'
name|'migration'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
dedent|''
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'instance_type'
op|':'
newline|'\n'
indent|'                '
name|'instance_type'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration'
op|'['
string|"'new_instance_type_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration'
op|','
string|"'migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.start"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|'['
string|"'dest_host'"
op|']'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_terminate_volume_connections'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'network_migrate_instance_start'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration'
op|','
string|"'post-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|','
nl|'\n'
name|'node'
op|'='
name|'migration'
op|'['
string|"'dest_node'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
nl|'\n'
name|'RESIZE_MIGRATING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'finish_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|','
name|'image'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"resize.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_terminate_volume_connections
dedent|''
dedent|''
name|'def'
name|'_terminate_volume_connections'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_finish_resize
dedent|''
dedent|''
dedent|''
name|'def'
name|'_finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resize_instance'
op|'='
name|'False'
newline|'\n'
name|'old_instance_type_id'
op|'='
name|'migration'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'new_instance_type_id'
op|'='
name|'migration'
op|'['
string|"'new_instance_type_id'"
op|']'
newline|'\n'
name|'if'
name|'old_instance_type_id'
op|'!='
name|'new_instance_type_id'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'extract_instance_type'
op|'('
name|'instance'
op|','
nl|'\n'
name|'prefix'
op|'='
string|"'new_'"
op|')'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'extract_instance_type'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'save_instance_type_info'
op|'('
name|'sys_meta'
op|','
nl|'\n'
name|'old_instance_type'
op|','
nl|'\n'
name|'prefix'
op|'='
string|"'old_'"
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'save_instance_type_info'
op|'('
name|'sys_meta'
op|','
name|'instance_type'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'root_gb'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
name|'resize_instance'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'network_migrate_instance_finish'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"finish_resize.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_refresh_block_device_connection_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_migration'
op|'('
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
nl|'\n'
name|'disk_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'image'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration'
op|','
string|"'finished'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
nl|'\n'
name|'RESIZE_FINISH'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"finish_resize.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_resize
name|'def'
name|'finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'disk_info'
op|','
name|'image'
op|','
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'None'
op|','
name|'migration'
op|'='
name|'None'
op|','
name|'migration_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes the migration process.\n\n        Sets up the newly transferred disk and turns on the instance at its\n        new host machine.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'migration'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_finish_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|','
nl|'\n'
name|'disk_info'
op|','
name|'image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_quota_commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_quota_rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'qr_error'
op|':'
newline|'\n'
indent|'                    '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Failed to rollback quota for failed "'
nl|'\n'
string|'"finish_resize: %(qr_error)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
op|'%'
name|'error'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|add_fixed_ip_to_instance
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to add new fixed_ip to instance\n        then injects the new network info and resets instance networking.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create_ip.start"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_id'
op|','
name|'conductor_api'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create_ip.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|remove_fixed_ip_from_instance
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to remove existing fixed_ip from instance\n        by injecting the altered network info and resetting\n        instance networking.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"delete_ip.start"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'address'
op|','
name|'conductor_api'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_inject_network_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"delete_ip.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|pause_instance
name|'def'
name|'pause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Pausing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pause'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unpause_instance
name|'def'
name|'unpause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause a paused instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Unpausing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unpause'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|host_power_action
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'action'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_power_action'
op|'('
name|'host'
op|','
name|'action'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|host_maintenance_mode
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_maintenance_mode'
op|'('
name|'host'
op|','
name|'mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|set_host_enabled
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'enabled'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_host_enabled'
op|'('
name|'host'
op|','
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|get_host_uptime
name|'def'
name|'get_host_uptime'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the result of calling "uptime" on the target host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_uptime'
op|'('
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for an instance on this host."""'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'current_power_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Retrieving diagnostics"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|suspend_instance
name|'def'
name|'suspend_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'suspend'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'suspend'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resume_instance
name|'def'
name|'resume_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given suspended instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Resuming'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resume'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Reset network'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reset_network'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_inject_network_info
dedent|''
name|'def'
name|'_inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Inject network info'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'network_info to inject: |%s|'"
op|')'
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info, but don\'t return the info."""'
newline|'\n'
name|'self'
op|'.'
name|'_inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the console output for the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Get console output"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_output'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'tail_length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
name|'self'
op|'.'
name|'_tail_log'
op|'('
name|'output'
op|','
name|'tail_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'output'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|','
string|"'replace'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tail_log
dedent|''
name|'def'
name|'_tail_log'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'int'
op|'('
name|'length'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'log'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
op|'-'
name|'int'
op|'('
name|'length'
op|')'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a vnc console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Getting vnc console"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'vnc_enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'console_type'
op|'=='
string|"'novnc'"
op|':'
newline|'\n'
comment|'# For essex, novncproxy_base_url must include the full path'
nl|'\n'
comment|'# including the html file (like http://myhost/vnc_auto.html)'
nl|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'novncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|"'xvpvnc'"
op|':'
newline|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'xvpvncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|'='
name|'token'
newline|'\n'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'='
name|'access_url'
newline|'\n'
nl|'\n'
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_spice_console
name|'def'
name|'get_spice_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a spice console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Getting spice console"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'spice'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'console_type'
op|'=='
string|"'spice-html5'"
op|':'
newline|'\n'
comment|'# For essex, spicehtml5proxy_base_url must include the full path'
nl|'\n'
comment|'# including the html file (like http://myhost/spice_auto.html)'
nl|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'spice'
op|'.'
name|'html5proxy_base_url'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_spice_console'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|'='
name|'token'
newline|'\n'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'='
name|'access_url'
newline|'\n'
nl|'\n'
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|validate_console_port
name|'def'
name|'validate_console_port'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'port'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'console_type'
op|'=='
string|'"spice-html5"'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_spice_console'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'console_info'
op|'['
string|"'port'"
op|']'
op|'=='
name|'port'
newline|'\n'
nl|'\n'
DECL|member|_attach_volume_boot
dedent|''
name|'def'
name|'_attach_volume_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance at boot time. So actual attach\n        is done by instance creation"""'
newline|'\n'
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Booting with volume %(volume_id)s at %(mountpoint)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance_uuid'
op|','
name|'mountpoint'
op|')'
newline|'\n'
name|'return'
name|'connection_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reserve_block_device_name
name|'def'
name|'reserve_block_device_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'device'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|function|do_reserve
name|'def'
name|'do_reserve'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'device_name'
op|'='
name|'compute_utils'
op|'.'
name|'get_device_name_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): create bdm here to avoid race condition'
nl|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
name|'or'
string|"'reserved'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device_name'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'device_name'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'do_reserve'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'mountpoint'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_attach_volume'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'mountpoint'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'capi'
op|'='
name|'self'
op|'.'
name|'conductor_api'
newline|'\n'
name|'capi'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_device'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'mountpoint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_volume
dedent|''
dedent|''
dedent|''
name|'def'
name|'_attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'mountpoint'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Attaching volume %(volume_id)s to %(mountpoint)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to connect to volume %(volume_id)s "'
nl|'\n'
string|'"while attaching at %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'unreserve_volume'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'serial'"
name|'not'
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'serial'"
op|']'
op|'='
name|'volume_id'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to attach volume %(volume_id)s "'
nl|'\n'
string|'"at %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'mountpoint'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_update_or_create'
op|'('
name|'context'
op|','
nl|'\n'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_detach_volume
dedent|''
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do the actual driver detach using block device mapping."""'
newline|'\n'
name|'mp'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Detach volume %(volume_id)s from mountpoint %(mp)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
comment|"# NOTE(vish): We currently don't use the serial when disconnecting,"
nl|'\n'
comment|'#             but added for completeness in case we ever do.'
nl|'\n'
name|'if'
name|'connection_info'
name|'and'
string|"'serial'"
name|'not'
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'serial'"
op|']'
op|'='
name|'volume_id'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Detaching volume from unknown instance'"
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'mp'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Failed to detach volume %(volume_id)s from %(mp)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'roll_detaching'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'bdm'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdm'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'volume_usage_poll_interval'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'vol_stats'
op|'='
op|'['
op|']'
newline|'\n'
name|'mp'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
comment|'# Handle bootable volumes which will not contain /dev/'
nl|'\n'
name|'if'
string|"'/dev/'"
name|'in'
name|'mp'
op|':'
newline|'\n'
indent|'                '
name|'mp'
op|'='
name|'mp'
op|'['
number|'5'
op|':'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vol_stats'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'block_stats'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|','
name|'mp'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vol_stats'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating volume usage cache with totals"'
op|')'
op|')'
newline|'\n'
name|'rd_req'
op|','
name|'rd_bytes'
op|','
name|'wr_req'
op|','
name|'wr_bytes'
op|','
name|'flush_ops'
op|'='
name|'vol_stats'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'vol_usage_update'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'rd_req'
op|','
name|'rd_bytes'
op|','
nl|'\n'
name|'wr_req'
op|','
name|'wr_bytes'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'update_totals'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_volume'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|remove_volume_connection
name|'def'
name|'remove_volume_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a volume connection using the volume api."""'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdm'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|attach_interface
dedent|''
dedent|''
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_id'
op|','
name|'port_id'
op|','
nl|'\n'
name|'requested_ip'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use hotplug to add an network adapter to an instance."""'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_port_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|','
name|'network_id'
op|','
name|'requested_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'network_info'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'allocate_port_for_instance returned %(port)s ports'"
op|')'
op|'%'
nl|'\n'
name|'dict'
op|'('
name|'ports'
op|'='
name|'len'
op|'('
name|'network_info'
op|')'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|'('
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
name|'legacy_net_info'
op|'='
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
newline|'\n'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
op|'='
name|'legacy_net_info'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'attach_interface'
op|'('
name|'instance'
op|','
name|'image_meta'
op|','
name|'legacy_net_info'
op|')'
newline|'\n'
name|'return'
name|'legacy_net_info'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|detach_interface
dedent|''
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach an network adapter from an instance."""'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|','
name|'conductor_api'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|')'
newline|'\n'
name|'legacy_nwinfo'
op|'='
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
newline|'\n'
name|'condemned'
op|'='
name|'None'
newline|'\n'
name|'for'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'in'
name|'legacy_nwinfo'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|'=='
name|'port_id'
op|':'
newline|'\n'
indent|'                '
name|'condemned'
op|'='
op|'('
name|'network'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'condemned'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'PortNotFound'
op|'('
name|'_'
op|'('
string|'"Port %(port_id)s is not "'
nl|'\n'
string|'"attached"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_port_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'port_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_interface'
op|'('
name|'instance'
op|','
op|'['
name|'condemned'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_compute_info
dedent|''
name|'def'
name|'_get_compute_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'compute_node_ref'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'service_get_by_compute_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'compute_node_ref'
op|'['
string|"'compute_node'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
name|'_'
op|'('
string|'"Host %(host)s not found"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|check_can_live_migrate_destination
name|'def'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it is possible to execute live migration.\n\n        This runs checks on the destination host, and then calls\n        back to the source host to check the results.\n\n        :param context: security context\n        :param instance: dict of instance data\n        :param block_migration: if true, prepare for block migration\n        :param disk_over_commit: if true, allow disk over commit\n\n        Returns a mapping of values required in case of block migration\n        and None otherwise.\n        """'
newline|'\n'
name|'src_compute_info'
op|'='
name|'self'
op|'.'
name|'_get_compute_info'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'dst_compute_info'
op|'='
name|'self'
op|'.'
name|'_get_compute_info'
op|'('
name|'ctxt'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'dest_check_data'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'src_compute_info'
op|','
name|'dst_compute_info'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'disk_over_commit'
op|')'
newline|'\n'
name|'migrate_data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'migrate_data'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination_cleanup'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'dest_check_data'
name|'and'
string|"'migrate_data'"
name|'in'
name|'dest_check_data'
op|':'
newline|'\n'
indent|'            '
name|'migrate_data'
op|'.'
name|'update'
op|'('
name|'dest_check_data'
op|'['
string|"'migrate_data'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'migrate_data'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|check_can_live_migrate_source
name|'def'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'dest_check_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it is possible to execute live migration.\n\n        This checks if the live migration can succeed, based on the\n        results from check_can_live_migrate_destination.\n\n        :param context: security context\n        :param instance: dict of instance data\n        :param dest_check_data: result of check_can_live_migrate_destination\n\n        Returns a dict values required for live migration without shared\n        storage.\n        """'
newline|'\n'
name|'capi'
op|'='
name|'self'
op|'.'
name|'conductor_api'
newline|'\n'
name|'bdms'
op|'='
name|'capi'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'is_volume_backed'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|')'
newline|'\n'
name|'dest_check_data'
op|'['
string|"'is_volume_backed'"
op|']'
op|'='
name|'is_volume_backed'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_live_migration
dedent|''
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
name|'disk'
op|'='
name|'None'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparations for live migration at dest host.\n\n        :param context: security context\n        :param instance: dict of instance data\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data : if not None, it is a dict which holds data\n        required for live migration without shared storage.\n\n        """'
newline|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_refresh_block_device_connection_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(tr3buchet): figure out how on the earth this is necessary'
nl|'\n'
name|'fixed_ips'
op|'='
name|'network_info'
op|'.'
name|'fixed_ips'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating filters to hypervisors and firewalls.'
nl|'\n'
comment|'# An example is that nova-instance-instance-xxx,'
nl|'\n'
comment|'# which is written to libvirt.xml(Check "virsh nwfilter-list")'
nl|'\n'
comment|'# This nwfilter is necessary on the destination host.'
nl|'\n'
comment|'# In addition, this method is creating filtering rule'
nl|'\n'
comment|'# onto destination host.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparation for block migration'
nl|'\n'
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_block_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'disk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'dest'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Executing live migration.\n\n        :param context: security context\n        :param instance: instance dict\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data: implementation specific params\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'pre_live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'disk'
op|','
name|'dest'
op|','
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Pre live migration failed at  %(dest)s'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_rollback_live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
comment|'# Executing live migration'
nl|'\n'
comment|'# live_migration might raises exceptions, but'
nl|'\n'
comment|'# nothing must be recovered in this version.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_rollback_live_migration'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_live_migration
dedent|''
name|'def'
name|'_post_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|'='
name|'False'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration.\n\n        This method is called from live_migration\n        and mainly updating database record.\n\n        :param ctxt: security context\n        :param instance_ref: nova.db.sqlalchemy.models.Instance\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data: if not None, it is a dict which has data\n        required for live migration without shared storage\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'_post_live_migration() is started..'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Detaching volumes.'
nl|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
nl|'\n'
comment|'# remove the volume connection without detaching from hypervisor'
nl|'\n'
comment|'# because the instance is not running anymore on the current host'
nl|'\n'
indent|'            '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'ctxt'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'ctxt'
op|','
name|'volume'
op|','
name|'connector'
op|')'
newline|'\n'
nl|'\n'
comment|'# Releasing vlan.'
nl|'\n'
comment|'# (not necessary in current implementation?)'
nl|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
newline|'\n'
comment|'# Releasing security group ingress rule.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'dest'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'network_migrate_instance_start'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
comment|'# Define domain at destination host, without doing it,'
nl|'\n'
comment|'# pause/suspend/terminate do not work.'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|','
name|'block_migration'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# No instance booting at source host, but instance dir'
nl|'\n'
comment|'# must be deleted for preparing next block migration'
nl|'\n'
comment|'# must be deleted for preparing next live migration w/o shared storage'
nl|'\n'
name|'is_shared_storage'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'migrate_data'
op|':'
newline|'\n'
indent|'            '
name|'is_shared_storage'
op|'='
name|'migrate_data'
op|'.'
name|'get'
op|'('
string|"'is_shared_storage'"
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'block_migration'
name|'or'
name|'not'
name|'is_shared_storage'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# self.driver.destroy() usually performs  vif unplugging'
nl|'\n'
comment|'# but we must do it explicitly here when block_migration'
nl|'\n'
comment|'# is false, as the network devices at the source must be'
nl|'\n'
comment|'# torn down'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on source host'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Migrating instance to %(dest)s finished successfully.'"
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"You may see the error \\"libvirt: QEMU error: "'
nl|'\n'
string|'"Domain not found: no domain with matching name.\\" "'
nl|'\n'
string|'"This error can be safely ignored."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration_at_destination
dedent|''
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration .\n\n        :param context: security context\n        :param instance: Instance dict\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Post operation of migration started'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
comment|'#                  this is called a second time because'
nl|'\n'
comment|'#                  multi_host does not create the bridge in'
nl|'\n'
comment|'#                  plug_vifs'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'network_migrate_instance_finish'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'block_device_info'
op|')'
newline|'\n'
comment|'# Restore instance state'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): this is necessary to update dhcp'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rollback_live_migration
dedent|''
name|'def'
name|'_rollback_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recovers Instance/volume state from migrating -> running.\n\n        :param context: security context\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param dest:\n            This method is called from live migration src host.\n            This param specifies destination host.\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data:\n            if not none, contains implementation specific data.\n\n        """'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(tr3buchet): setup networks on source host (really it's re-setup)"
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_volume_connection'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'volume_id'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# Block migration needs empty image at destination host'
nl|'\n'
comment|'# before migration starts, so if any failure occurs,'
nl|'\n'
comment|'# any empty images has to be deleted.'
nl|'\n'
comment|'# Also Volume backed live migration w/o shared storage needs to delete'
nl|'\n'
comment|'# newly created instance-xxx dir on the destination as a part of its'
nl|'\n'
comment|'# rollback process'
nl|'\n'
dedent|''
name|'is_volume_backed'
op|'='
name|'False'
newline|'\n'
name|'is_shared_storage'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'migrate_data'
op|':'
newline|'\n'
indent|'            '
name|'is_volume_backed'
op|'='
name|'migrate_data'
op|'.'
name|'get'
op|'('
string|"'is_volume_backed'"
op|','
name|'False'
op|')'
newline|'\n'
name|'is_shared_storage'
op|'='
name|'migrate_data'
op|'.'
name|'get'
op|'('
string|"'is_shared_storage'"
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'block_migration'
name|'or'
op|'('
name|'is_volume_backed'
name|'and'
name|'not'
name|'is_shared_storage'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration_at_destination
dedent|''
dedent|''
name|'def'
name|'rollback_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleaning up image directory that is created pre_live_migration.\n\n        :param context: security context\n        :param instance: an Instance dict sent over rpc\n        """'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on destination host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_legacy_nw_info'
op|'('
name|'network_info'
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_heal_instance_info_cache
name|'def'
name|'_heal_instance_info_cache'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called periodically.  On every call, try to update the\n        info_cache\'s network information for another instance by\n        calling to the network manager.\n\n        This is implemented by keeping a cache of uuids of instances\n        that live on this host.  On each call, we pop one off of a\n        list, pull the DB record, and try the call to the network API.\n        If anything errors, we don\'t care.  It\'s possible the instance\n        has been deleted, etc.\n        """'
newline|'\n'
name|'heal_interval'
op|'='
name|'CONF'
op|'.'
name|'heal_instance_info_cache_interval'
newline|'\n'
name|'if'
name|'not'
name|'heal_interval'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_last_info_cache_heal'
op|'+'
name|'heal_interval'
op|'>'
name|'curr_time'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_last_info_cache_heal'
op|'='
name|'curr_time'
newline|'\n'
nl|'\n'
name|'instance_uuids'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'_instance_uuids_to_heal'"
op|','
name|'None'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'while'
name|'not'
name|'instance'
name|'or'
name|'instance'
op|'['
string|"'host'"
op|']'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_uuids'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuids'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# Instance is gone.  Try to grab another.'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# No more in our copy of uuids.  Pull from the DB.'
nl|'\n'
indent|'                '
name|'db_instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'db_instances'
op|':'
newline|'\n'
comment|'# None.. just return.'
nl|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'db_instances'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'inst'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'inst'
name|'in'
name|'db_instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_instance_uuids_to_heal'
op|'='
name|'instance_uuids'
newline|'\n'
nl|'\n'
comment|"# We have an instance now and it's ours"
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Call to network API to get instance info.. this will'
nl|'\n'
comment|"# force an update to the instance's info_cache"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Updated the info_cache for instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# We don't care about any failures"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rebooting_instances
name|'def'
name|'_poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'reboot_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_hung_in_rebooting'
op|'('
nl|'\n'
name|'context'
op|','
name|'CONF'
op|'.'
name|'reboot_timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rebooting_instances'
op|'('
name|'CONF'
op|'.'
name|'reboot_timeout'
op|','
nl|'\n'
name|'instances'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rescued_instances
name|'def'
name|'_poll_rescued_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'rescue_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'rescued_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'RESCUED'
op|':'
newline|'\n'
indent|'                    '
name|'rescued_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'to_unrescue'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'rescued_instances'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'rescue_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'to_unrescue'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'to_unrescue'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unrescue'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_unconfirmed_resizes
name|'def'
name|'_poll_unconfirmed_resizes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'resize_confirm_window'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'capi'
op|'='
name|'self'
op|'.'
name|'conductor_api'
newline|'\n'
name|'migrations'
op|'='
name|'capi'
op|'.'
name|'migration_get_unconfirmed_by_dest_compute'
op|'('
nl|'\n'
name|'context'
op|','
name|'CONF'
op|'.'
name|'resize_confirm_window'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'migrations_info'
op|'='
name|'dict'
op|'('
name|'migration_count'
op|'='
name|'len'
op|'('
name|'migrations'
op|')'
op|','
nl|'\n'
name|'confirm_window'
op|'='
name|'CONF'
op|'.'
name|'resize_confirm_window'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'migrations_info'
op|'['
string|'"migration_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(migration_count)d unconfirmed migrations "'
nl|'\n'
string|'"older than %(confirm_window)d seconds"'
op|')'
op|','
nl|'\n'
name|'migrations_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_set_migration_to_error
dedent|''
name|'def'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration_id'
op|'='
name|'migration'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Setting migration %(migration_id)s to error: "'
nl|'\n'
string|'"%(reason)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration'
op|','
nl|'\n'
string|"'error'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'migration_id'
op|'='
name|'migration'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'migration'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Automatically confirming migration "'
nl|'\n'
string|'"%(migration_id)s for instance %(instance_uuid)s"'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                    '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Instance %(instance_uuid)s not found"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'ERROR'
op|':'
newline|'\n'
indent|'                    '
name|'reason'
op|'='
name|'_'
op|'('
string|'"In ERROR state"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'vm_state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
name|'task_state'
op|'='
name|'instance'
op|'['
string|"'task_state'"
op|']'
newline|'\n'
name|'if'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'RESIZED'
name|'or'
name|'task_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'reason'
op|'='
name|'_'
op|'('
string|'"In states %(vm_state)s/%(task_state)s, not "'
nl|'\n'
string|'"RESIZED/None"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Error auto-confirming resize: %(e)s. "'
nl|'\n'
string|'"Will retry later."'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_instance_usage_audit
name|'def'
name|'_instance_usage_audit'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'instance_usage_audit'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'compute_utils'
op|'.'
name|'has_audit_been_run'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
newline|'\n'
name|'capi'
op|'='
name|'self'
op|'.'
name|'conductor_api'
newline|'\n'
name|'instances'
op|'='
name|'capi'
op|'.'
name|'instance_get_active_by_window_joined'
op|'('
nl|'\n'
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'num_instances'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
newline|'\n'
name|'errors'
op|'='
number|'0'
newline|'\n'
name|'successes'
op|'='
number|'0'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instance usage audit for"'
nl|'\n'
string|'" host %(host)s from %(begin_time)s to "'
nl|'\n'
string|'"%(end_time)s. %(number_instances)s"'
nl|'\n'
string|'" instances."'
op|')'
op|'%'
name|'dict'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'begin_time'
op|'='
name|'begin'
op|','
nl|'\n'
name|'end_time'
op|'='
name|'end'
op|','
nl|'\n'
name|'number_instances'
op|'='
name|'num_instances'
op|')'
op|')'
newline|'\n'
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'start_instance_usage_audit'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'begin'
op|','
name|'end'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'num_instances'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'ignore_missing_network_data'
op|'='
name|'False'
op|')'
newline|'\n'
name|'successes'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to generate usage '"
nl|'\n'
string|"'audit for instance '"
nl|'\n'
string|"'on host %s'"
op|')'
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'errors'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'compute_utils'
op|'.'
name|'finish_instance_usage_audit'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
name|'begin'
op|','
name|'end'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'errors'
op|','
nl|'\n'
string|'"Instance usage audit ran "'
nl|'\n'
string|'"for host %s, %s instances "'
nl|'\n'
string|'"in %s seconds."'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'num_instances'
op|','
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_bandwidth_usage
name|'def'
name|'_poll_bandwidth_usage'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prev_time'
op|','
name|'start_time'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
op|'('
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'>'
nl|'\n'
name|'CONF'
op|'.'
name|'bandwidth_poll_interval'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating bandwidth usage cache"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'bw_counters'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_all_bw_counters'
op|'('
name|'instances'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(mdragon): Not all hypervisors have bandwidth polling'
nl|'\n'
comment|"# implemented yet.  If they don't it doesn't break anything,"
nl|'\n'
comment|"# they just don't get the info in the usage events."
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'refreshed'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'for'
name|'bw_ctr'
name|'in'
name|'bw_counters'
op|':'
newline|'\n'
comment|'# Allow switching of greenthreads between queries.'
nl|'\n'
indent|'                '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'bw_in'
op|'='
number|'0'
newline|'\n'
name|'bw_out'
op|'='
number|'0'
newline|'\n'
name|'last_ctr_in'
op|'='
name|'None'
newline|'\n'
name|'last_ctr_out'
op|'='
name|'None'
newline|'\n'
name|'usage'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'bw_usage_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'start_time'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'mac_address'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'usage'
op|':'
newline|'\n'
indent|'                    '
name|'bw_in'
op|'='
name|'usage'
op|'['
string|"'bw_in'"
op|']'
newline|'\n'
name|'bw_out'
op|'='
name|'usage'
op|'['
string|"'bw_out'"
op|']'
newline|'\n'
name|'last_ctr_in'
op|'='
name|'usage'
op|'['
string|"'last_ctr_in'"
op|']'
newline|'\n'
name|'last_ctr_out'
op|'='
name|'usage'
op|'['
string|"'last_ctr_out'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'usage'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'bw_usage_get'
op|'('
nl|'\n'
name|'context'
op|','
name|'bw_ctr'
op|'['
string|"'uuid'"
op|']'
op|','
name|'prev_time'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'mac_address'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'usage'
op|':'
newline|'\n'
indent|'                        '
name|'last_ctr_in'
op|'='
name|'usage'
op|'['
string|"'last_ctr_in'"
op|']'
newline|'\n'
name|'last_ctr_out'
op|'='
name|'usage'
op|'['
string|"'last_ctr_out'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'last_ctr_in'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
op|'<'
name|'last_ctr_in'
op|':'
newline|'\n'
comment|'# counter rollover'
nl|'\n'
indent|'                        '
name|'bw_in'
op|'+='
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'bw_in'
op|'+='
op|'('
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
op|'-'
name|'last_ctr_in'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'last_ctr_out'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
op|'<'
name|'last_ctr_out'
op|':'
newline|'\n'
comment|'# counter rollover'
nl|'\n'
indent|'                        '
name|'bw_out'
op|'+='
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'bw_out'
op|'+='
op|'('
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
op|'-'
name|'last_ctr_out'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'bw_usage_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
name|'start_time'
op|','
nl|'\n'
name|'bw_in'
op|','
nl|'\n'
name|'bw_out'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
op|','
nl|'\n'
name|'last_refreshed'
op|'='
name|'refreshed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_volume_bdms
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_host_volume_bdms'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all block device mappings on a compute host."""'
newline|'\n'
name|'compute_host_bdms'
op|'='
op|'['
op|']'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'instance_bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'compute_host_bdms'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_bdms'
op|'='
name|'instance_bdms'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'compute_host_bdms'
newline|'\n'
nl|'\n'
DECL|member|_update_volume_usage_cache
dedent|''
name|'def'
name|'_update_volume_usage_cache'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vol_usages'
op|','
name|'refreshed'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the volume usage cache table with a list of stats."""'
newline|'\n'
name|'for'
name|'usage'
name|'in'
name|'vol_usages'
op|':'
newline|'\n'
comment|'# Allow switching of greenthreads between queries.'
nl|'\n'
indent|'            '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'vol_usage_update'
op|'('
name|'context'
op|','
name|'usage'
op|'['
string|"'volume'"
op|']'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'rd_req'"
op|']'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'rd_bytes'"
op|']'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'wr_req'"
op|']'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'wr_bytes'"
op|']'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'instance'"
op|']'
op|','
nl|'\n'
name|'last_refreshed'
op|'='
name|'refreshed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_send_volume_usage_notifications
dedent|''
dedent|''
name|'def'
name|'_send_volume_usage_notifications'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'start_time'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Queries vol usage cache table and sends a vol usage notification."""'
newline|'\n'
comment|'# We might have had a quick attach/detach that we missed in'
nl|'\n'
comment|'# the last run of get_all_volume_usage and this one'
nl|'\n'
comment|'# but detach stats will be recorded in db and returned from'
nl|'\n'
comment|'# vol_get_usage_by_time'
nl|'\n'
name|'vol_usages'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'vol_get_usage_by_time'
op|'('
name|'context'
op|','
nl|'\n'
name|'start_time'
op|')'
newline|'\n'
name|'for'
name|'vol_usage'
name|'in'
name|'vol_usages'
op|':'
newline|'\n'
indent|'            '
name|'notifier'
op|'.'
name|'notify'
op|'('
name|'context'
op|','
string|"'volume.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
string|"'volume.usage'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'compute_utils'
op|'.'
name|'usage_volume_info'
op|'('
name|'vol_usage'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_volume_usage
name|'def'
name|'_poll_volume_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'start_time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'volume_usage_poll_interval'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'start_time'
op|':'
newline|'\n'
indent|'                '
name|'start_time'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
op|'('
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_vol_usage_poll'
op|')'
op|'<'
name|'CONF'
op|'.'
name|'volume_usage_poll_interval'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_last_vol_usage_poll'
op|'='
name|'curr_time'
newline|'\n'
name|'compute_host_bdms'
op|'='
name|'self'
op|'.'
name|'_get_host_volume_bdms'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'compute_host_bdms'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating volume usage cache"'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'vol_usages'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_all_volume_usage'
op|'('
name|'context'
op|','
nl|'\n'
name|'compute_host_bdms'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'refreshed'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_volume_usage_cache'
op|'('
name|'context'
op|','
name|'vol_usages'
op|','
nl|'\n'
name|'refreshed'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_send_volume_usage_notifications'
op|'('
name|'context'
op|','
name|'start_time'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_report_driver_status
name|'def'
name|'_report_driver_status'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_host_check'
op|'>'
name|'CONF'
op|'.'
name|'host_state_interval'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_host_check'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating host status"'
op|')'
op|')'
newline|'\n'
comment|'# This will grab info about the host and queue it'
nl|'\n'
comment|'# to be sent to the Schedulers.'
nl|'\n'
name|'capabilities'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'capability'
name|'in'
op|'('
name|'capabilities'
name|'if'
name|'isinstance'
op|'('
name|'capabilities'
op|','
name|'list'
op|')'
nl|'\n'
name|'else'
op|'['
name|'capabilities'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'capability'
op|'['
string|"'host_ip'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'my_ip'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'update_service_capabilities'
op|'('
name|'capabilities'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'600.0'
op|','
name|'run_immediately'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_sync_power_states
name|'def'
name|'_sync_power_states'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Align power states between the database and the hypervisor.\n\n        To sync power state data we make a DB call to get the number of\n        virtual machines known by the hypervisor and if the number matches the\n        number of virtual machines known by the database, we proceed in a lazy\n        loop, one database record at a time, checking if the hypervisor has the\n        same power state as is in the database.\n        """'
newline|'\n'
name|'db_instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'num_vm_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_num_instances'
op|'('
op|')'
newline|'\n'
name|'num_db_instances'
op|'='
name|'len'
op|'('
name|'db_instances'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_vm_instances'
op|'!='
name|'num_db_instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Found %(num_db_instances)s in the database and "'
nl|'\n'
string|'"%(num_vm_instances)s on the hypervisor."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'db_instance'
name|'in'
name|'db_instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'db_instance'
op|'['
string|"'task_state'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"During sync_power_state the instance has a "'
nl|'\n'
string|'"pending task. Skip."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
comment|'# No pending tasks. Now try to figure out the real vm_power_state.'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vm_instance'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'db_instance'
op|')'
newline|'\n'
name|'vm_power_state'
op|'='
name|'vm_instance'
op|'['
string|"'state'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
comment|'# Note(maoy): the above get_info call might take a long time,'
nl|'\n'
comment|'# for example, because of a broken libvirt driver.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|','
nl|'\n'
name|'vm_power_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sync_instance_power_state
dedent|''
dedent|''
name|'def'
name|'_sync_instance_power_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'db_instance'
op|','
name|'vm_power_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Align instance power state between the database and hypervisor.\n\n        If the instance is not found on the hypervisor, but is in the database,\n        then a stop() API will be called on the instance."""'
newline|'\n'
nl|'\n'
comment|'# We re-query the DB to get the latest instance info to minimize'
nl|'\n'
comment|'# (not eliminate) race condition.'
nl|'\n'
name|'u'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db_power_state'
op|'='
name|'u'
op|'['
string|'"power_state"'
op|']'
newline|'\n'
name|'vm_state'
op|'='
name|'u'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'host'
op|'!='
name|'u'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
comment|'# on the sending end of nova-compute _sync_power_state'
nl|'\n'
comment|'# may have yielded to the greenthread performing a live'
nl|'\n'
comment|'# migration; this in turn has changed the resident-host'
nl|'\n'
comment|'# for the VM; However, the instance is still active, it'
nl|'\n'
comment|'# is just in the process of migrating to another host.'
nl|'\n'
comment|'# This implies that the compute source must relinquish'
nl|'\n'
comment|'# control to the compute destination.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"During the sync_power process the "'
nl|'\n'
string|'"instance has moved from "'
nl|'\n'
string|'"host %(src)s to host %(dst)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'src'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dst'"
op|':'
name|'u'
op|'['
string|"'host'"
op|']'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'u'
op|'['
string|"'task_state'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# on the receiving end of nova-compute, it could happen'
nl|'\n'
comment|'# that the DB instance already report the new resident'
nl|'\n'
comment|'# but the actual VM has not showed up on the hypervisor'
nl|'\n'
comment|"# yet. In this case, let's allow the loop to continue"
nl|'\n'
comment|'# and run the state sync in a later round'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"During sync_power_state the instance has a "'
nl|'\n'
string|'"pending task. Skip."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vm_power_state'
op|'!='
name|'db_power_state'
op|':'
newline|'\n'
comment|'# power_state is always updated from hypervisor to db'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'vm_power_state'
op|')'
newline|'\n'
name|'db_power_state'
op|'='
name|'vm_power_state'
newline|'\n'
nl|'\n'
comment|'# Note(maoy): Now resolve the discrepancy between vm_state and'
nl|'\n'
comment|'# vm_power_state. We go through all possible vm_states.'
nl|'\n'
dedent|''
name|'if'
name|'vm_state'
name|'in'
op|'('
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
op|':'
newline|'\n'
comment|'# TODO(maoy): we ignore these vm_state for now.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'elif'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|':'
newline|'\n'
comment|'# The only rational power state should be RUNNING'
nl|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance shutdown by itself. Calling "'
nl|'\n'
string|'"the stop API."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Note(maoy): here we call the API instead of'
nl|'\n'
comment|'# brutally updating the vm_state in the database'
nl|'\n'
comment|'# to allow all the hooks and checks to be performed.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'compute_stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# Note(maoy): there is no need to propagate the error'
nl|'\n'
comment|'# because the same power_state will be retrieved next'
nl|'\n'
comment|'# time and retried.'
nl|'\n'
comment|'# For example, there might be another task scheduled.'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'vm_power_state'
op|'=='
name|'power_state'
op|'.'
name|'SUSPENDED'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance is suspended unexpectedly. Calling "'
nl|'\n'
string|'"the stop API."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'compute_stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'vm_power_state'
op|'=='
name|'power_state'
op|'.'
name|'PAUSED'
op|':'
newline|'\n'
comment|'# Note(maoy): a VM may get into the paused state not only'
nl|'\n'
comment|'# because the user request via API calls, but also'
nl|'\n'
comment|'# due to (temporary) external instrumentations.'
nl|'\n'
comment|'# Before the virt layer can reliably report the reason,'
nl|'\n'
comment|'# we simply ignore the state discrepancy. In many cases,'
nl|'\n'
comment|'# the VM state will go back to running after the external'
nl|'\n'
comment|'# instrumentation is done. See bug 1097806 for details.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance is paused unexpectedly. Ignore."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vm_power_state'
op|'=='
name|'power_state'
op|'.'
name|'NOSTATE'
op|':'
newline|'\n'
comment|'# Occasionally, depending on the status of the hypervisor,'
nl|'\n'
comment|'# which could be restarting for example, an instance may'
nl|'\n'
comment|'# not be found.  Therefore just log the condidtion.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance is unexpectedly not found. Ignore."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'STOPPED'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'not'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance is not stopped. Calling "'
nl|'\n'
string|'"the stop API."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Note(maoy): this assumes that the stop API is'
nl|'\n'
comment|'# idempotent.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'compute_stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'vm_state'
name|'in'
op|'('
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'DELETED'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'not'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
op|':'
newline|'\n'
comment|'# Note(maoy): this should be taken care of periodically in'
nl|'\n'
comment|'# _cleanup_running_deleted_instances().'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Instance is not (soft-)deleted."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_reclaim_queued_deletes
name|'def'
name|'_reclaim_queued_deletes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reclaim instances that are queued for deletion."""'
newline|'\n'
name|'interval'
op|'='
name|'CONF'
op|'.'
name|'reclaim_instance_interval'
newline|'\n'
name|'if'
name|'interval'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"CONF.reclaim_instance_interval <= 0, skipping..."'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'old_enough'
op|'='
op|'('
name|'not'
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
name|'or'
nl|'\n'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|','
nl|'\n'
name|'interval'
op|')'
op|')'
newline|'\n'
name|'soft_deleted'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
newline|'\n'
nl|'\n'
name|'if'
name|'soft_deleted'
name|'and'
name|'old_enough'
op|':'
newline|'\n'
indent|'                '
name|'capi'
op|'='
name|'self'
op|'.'
name|'conductor_api'
newline|'\n'
name|'bdms'
op|'='
name|'capi'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Reclaiming deleted instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|update_available_resource
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See driver.get_available_resource()\n\n        Periodic process that keeps that the compute host\'s understanding of\n        resource availability and usage in sync with the underlying hypervisor.\n\n        :param context: security context\n        """'
newline|'\n'
name|'new_resource_tracker_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'nodenames'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'nodename'
name|'in'
name|'nodenames'
op|':'
newline|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|')'
newline|'\n'
name|'new_resource_tracker_dict'
op|'['
name|'nodename'
op|']'
op|'='
name|'rt'
newline|'\n'
nl|'\n'
comment|'# delete nodes that the driver no longer reports'
nl|'\n'
dedent|''
name|'known_nodes'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'nodename'
name|'in'
name|'known_nodes'
op|'-'
name|'nodenames'
op|':'
newline|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|','
name|'delete'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'='
name|'new_resource_tracker_dict'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'running_deleted_instance_poll_interval'
op|')'
newline|'\n'
DECL|member|_cleanup_running_deleted_instances
name|'def'
name|'_cleanup_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup any instances which are erroneously still running after\n        having been deleted.\n\n        Valid actions to take are:\n\n            1. noop - do nothing\n            2. log - log which instances are erroneously running\n            3. reap - shutdown and cleanup any erroneously running instances\n\n        The use-case for this cleanup task is: for various reasons, it may be\n        possible for the database to show an instance as deleted but for that\n        instance to still be running on a host machine (see bug\n        https://bugs.launchpad.net/nova/+bug/911366).\n\n        This cleanup task is a cross-hypervisor utility for finding these\n        zombied instances and either logging the discrepancy (likely what you\n        should do in production), or automatically reaping the instances (more\n        appropriate for dev environments).\n        """'
newline|'\n'
name|'action'
op|'='
name|'CONF'
op|'.'
name|'running_deleted_instance_action'
newline|'\n'
nl|'\n'
name|'if'
name|'action'
op|'=='
string|'"noop"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): admin contexts don't ordinarily return deleted records"
nl|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'_running_deleted_instances'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'capi'
op|'='
name|'self'
op|'.'
name|'conductor_api'
newline|'\n'
name|'bdms'
op|'='
name|'capi'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'action'
op|'=='
string|'"log"'
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Detected instance with name label "'
nl|'\n'
string|'"\'%(name)s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'action'
op|'=='
string|"'reap'"
op|':'
newline|'\n'
indent|'                    '
name|'name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Destroying instance with name label "'
nl|'\n'
string|'"\'%(name)s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Unrecognized value \'%(action)s\'"'
nl|'\n'
string|'" for CONF.running_deleted_"'
nl|'\n'
string|'"instance_action"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_running_deleted_instances
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of instances nova thinks is deleted,\n        but the hypervisor thinks is still running.\n        """'
newline|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'running_deleted_instance_timeout'
newline|'\n'
nl|'\n'
DECL|function|deleted_instance
name|'def'
name|'deleted_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'erroneously_running'
op|'='
name|'instance'
op|'['
string|"'deleted'"
op|']'
newline|'\n'
name|'old_enough'
op|'='
op|'('
name|'not'
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
name|'or'
nl|'\n'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|','
nl|'\n'
name|'timeout'
op|')'
op|')'
newline|'\n'
name|'if'
name|'erroneously_running'
name|'and'
name|'old_enough'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
op|'['
name|'i'
name|'for'
name|'i'
name|'in'
name|'instances'
name|'if'
name|'deleted_instance'
op|'('
name|'i'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|_error_out_instance_on_exception
name|'def'
name|'_error_out_instance_on_exception'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_quota_rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|add_aggregate_host
name|'def'
name|'add_aggregate_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'slave_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'None'
op|','
name|'aggregate_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Notify hypervisor of change (for hypervisor pools)."""'
newline|'\n'
name|'if'
name|'not'
name|'aggregate'
op|':'
newline|'\n'
indent|'            '
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
name|'slave_info'
op|'='
name|'slave_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'AggregateError'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'undo_aggregate_operation'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_host_delete'
op|','
nl|'\n'
name|'aggregate'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|remove_aggregate_host
name|'def'
name|'remove_aggregate_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'slave_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'None'
op|','
name|'aggregate_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a host from a physical hypervisor pool."""'
newline|'\n'
name|'if'
name|'not'
name|'aggregate'
op|':'
newline|'\n'
indent|'            '
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'remove_from_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
name|'slave_info'
op|'='
name|'slave_info'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'AggregateError'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'undo_aggregate_operation'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'aggregate_host_add'
op|','
nl|'\n'
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
name|'isinstance'
op|'('
name|'e'
op|','
name|'exception'
op|'.'
name|'AggregateError'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'image_cache_manager_interval'
op|','
nl|'\n'
name|'external_process_ok'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_run_image_cache_manager_pass
name|'def'
name|'_run_image_cache_manager_pass'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a single pass of the image cache manager."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|'"has_imagecache"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'image_cache_manager_interval'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'all_instances'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
comment|'# Determine what other nodes use this storage'
nl|'\n'
name|'storage_users'
op|'.'
name|'register_storage_use'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'storage_users'
op|'.'
name|'get_storage_users'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Filter all_instances to only include those nodes which share this'
nl|'\n'
comment|'# storage path.'
nl|'\n'
comment|'# TODO(mikal): this should be further refactored so that the cache'
nl|'\n'
comment|"# cleanup code doesn't know what those instances are, just a remote"
nl|'\n'
comment|'# count, and then this logic should be pushed up the stack.'
nl|'\n'
name|'filtered_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'all_instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'                '
name|'filtered_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'manage_image_cache'
op|'('
name|'context'
op|','
name|'filtered_instances'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

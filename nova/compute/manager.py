begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all processes relating to instances (guest vms).\n\nThe :py:class:`ComputeManager` class is a :py:class:`nova.manager.Manager` that\nhandles RPC calls relating to creating instances.  It is responsible for\nbuilding a disk image, launching it via the underlying virtualization driver,\nresponding to calls to check its state, attaching persistent storage, and\nterminating it.\n\n**Related Flags**\n\n:instances_path:  Where instances are kept on disk\n:compute_driver:  Name of class that is used to handle virtualization, loaded\n                  by :func:`nova.utils.import_object`\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'utils'
name|'import'
name|'notify_usage_exists'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'api'
name|'as'
name|'notifier'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'vnc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'instances_path'"
op|','
string|"'$state_path/instances'"
op|','
nl|'\n'
string|"'where instances are stored on disk'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'compute_driver'"
op|','
string|"'nova.virt.connection.get_connection'"
op|','
nl|'\n'
string|"'Driver to use for controlling virtualization'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'console_host'"
op|','
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
op|','
nl|'\n'
string|"'Console proxy host to use to connect to instances on'"
nl|'\n'
string|"'this host.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'live_migration_retry_count'"
op|','
number|'30'
op|','
nl|'\n'
string|'"Retry count needed in live_migration."'
nl|'\n'
string|'" sleep 1 sec for each count"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"reboot_timeout"'
op|','
number|'0'
op|','
nl|'\n'
string|'"Automatically hard reboot an instance if it has been "'
nl|'\n'
string|'"stuck in a rebooting state longer than N seconds."'
nl|'\n'
string|'" Set to 0 to disable."'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"rescue_timeout"'
op|','
number|'0'
op|','
nl|'\n'
string|'"Automatically unrescue an instance after N seconds."'
nl|'\n'
string|'" Set to 0 to disable."'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"resize_confirm_window"'
op|','
number|'0'
op|','
nl|'\n'
string|'"Automatically confirm resizes after N seconds."'
nl|'\n'
string|'" Set to 0 to disable."'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'host_state_interval'"
op|','
number|'120'
op|','
nl|'\n'
string|"'Interval in seconds for querying the host status'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"running_deleted_instance_timeout"'
op|','
number|'0'
op|','
nl|'\n'
string|'"Number of seconds after being deleted when a"'
nl|'\n'
string|'" still-running instance should be considered"'
nl|'\n'
string|'" eligible for cleanup."'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"running_deleted_instance_poll_interval"'
op|','
number|'30'
op|','
nl|'\n'
string|'"Number of periodic scheduler ticks to wait between"'
nl|'\n'
string|'" runs of the cleanup task."'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"running_deleted_instance_action"'
op|','
string|'"noop"'
op|','
nl|'\n'
string|'"Action to take if a running deleted instance is"'
nl|'\n'
string|'" detected. Valid options are \'noop\', \'log\', and"'
nl|'\n'
string|'" \'reap\'. Set to \'noop\' to disable."'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|publisher_id
name|'def'
name|'publisher_id'
op|'('
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'notifier'
op|'.'
name|'publisher_id'
op|'('
string|'"compute"'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|checks_instance_lock
dedent|''
name|'def'
name|'checks_instance_lock'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to prevent action against locked instances for non-admins."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: decorating: |%s|"'
op|')'
op|','
name|'function'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: arguments: |%(self)s| |%(context)s|"'
nl|'\n'
string|'" |%(instance_uuid)s|"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'locked'
op|'='
name|'self'
op|'.'
name|'get_lock'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'admin'
op|'='
name|'context'
op|'.'
name|'is_admin'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: locked: |%s|"'
op|')'
op|','
name|'locked'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: admin: |%s|"'
op|')'
op|','
name|'admin'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
comment|'# if admin or unlocked call function otherwise log error'
nl|'\n'
name|'if'
name|'admin'
name|'or'
name|'not'
name|'locked'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: executing: |%s|"'
op|')'
op|','
name|'function'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"check_instance_lock: not executing |%s|"'
op|')'
op|','
nl|'\n'
name|'function'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_instance_fault
dedent|''
name|'def'
name|'wrap_instance_fault'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method to catch exceptions related to instances.\n\n    This decorator wraps a method to catch any exceptions having to do with\n    an instance that may get thrown. It then logs an instance fault in the db.\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'e'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_image_meta
dedent|''
name|'def'
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'image_service'
op|','
name|'image_id'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
newline|'\n'
name|'return'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeManager
dedent|''
name|'class'
name|'ComputeManager'
op|'('
name|'manager'
op|'.'
name|'SchedulerDependentManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages the running instances from creation to destruction."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load configuration options and connect to the hypervisor."""'
newline|'\n'
comment|'# TODO(vish): sync driver creation logic with the rest of the system'
nl|'\n'
comment|'#             and re-document the module docstring'
nl|'\n'
name|'if'
name|'not'
name|'compute_driver'
op|':'
newline|'\n'
indent|'            '
name|'compute_driver'
op|'='
name|'FLAGS'
op|'.'
name|'compute_driver'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'='
name|'utils'
op|'.'
name|'check_isinstance'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'compute_driver'
op|')'
op|','
nl|'\n'
name|'driver'
op|'.'
name|'ComputeDriver'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Unable to load the virtualization driver: %s"'
op|')'
op|'%'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_last_host_check'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
number|'0'
newline|'\n'
name|'super'
op|'('
name|'ComputeManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|'"compute"'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_update
dedent|''
name|'def'
name|'_instance_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance in the database using kwargs as value."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialization for a standalone compute service."""'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'db_state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'drv_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'expect_running'
op|'='
name|'db_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
name|'and'
name|'drv_state'
op|'!='
name|'db_state'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Current state of %(instance_uuid)s is %(drv_state)s, '"
nl|'\n'
string|"'state in DB is %(db_state)s.'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'expect_running'
name|'and'
name|'FLAGS'
op|'.'
name|'resume_guests_state_on_host_boot'
op|')'
name|'or'
name|'FLAGS'
op|'.'
name|'start_guests_on_host_boot'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Rebooting instance %(instance_uuid)s after '"
nl|'\n'
string|"'nova-compute restart.'"
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reboot_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'drv_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
comment|'# Hyper-V and VMWareAPI drivers will raise an exception'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'net_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'net_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'Hypervisor driver does not '"
nl|'\n'
string|"'support firewall rules'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_power_state
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_power_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the power state for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Checking state of %s'"
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'['
string|'"state"'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'power_state'
op|'.'
name|'FAILED'
newline|'\n'
nl|'\n'
DECL|member|get_console_topic
dedent|''
dedent|''
name|'def'
name|'get_console_topic'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the console host for a project on this host.\n\n        Currently this is just set in the flags for each compute host.\n\n        """'
newline|'\n'
comment|'#TODO(mdragon): perhaps make this variable by console_type?'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'console_topic'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'console_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_pool_info
dedent|''
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_pool_info'
op|'('
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_security_group_rules
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group rules.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_security_group_members
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'security_group_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group members.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_members'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|refresh_provider_fw_rules
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This call passes straight through to the virtualization driver."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_nw_info
dedent|''
name|'def'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a list of dictionaries of network data of an instance.\n        Returns an empty list if stub_network flag is set."""'
newline|'\n'
name|'network_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_setup_block_device_mapping
dedent|''
name|'def'
name|'_setup_block_device_mapping'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""setup volumes for block device mapping"""'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'swap'
op|'='
name|'None'
newline|'\n'
name|'ephemerals'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"setting up bdm %s"'
op|')'
op|','
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'bdm'
op|'['
string|"'no_device'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'virtual_name'
op|'='
name|'bdm'
op|'['
string|"'virtual_name'"
op|']'
newline|'\n'
name|'device_name'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'assert'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'                    '
name|'swap'
op|'='
op|'{'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'swap_size'"
op|':'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'eph'
op|'='
op|'{'
string|"'num'"
op|':'
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
name|'virtual_name'
op|')'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'virtual_name'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'size'"
op|':'
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|'}'
newline|'\n'
name|'ephemerals'
op|'.'
name|'append'
op|'('
name|'eph'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
op|'('
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
nl|'\n'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'None'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# TODO(yamahata): default name and description'
nl|'\n'
indent|'                '
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
name|'context'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
op|')'
newline|'\n'
name|'vol'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_size'"
op|']'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'snapshot'
op|')'
newline|'\n'
comment|'# TODO(yamahata): creating volume simultaneously'
nl|'\n'
comment|'#                 reduces creation time?'
nl|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'wait_creation'
op|'('
name|'context'
op|','
name|'vol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'volume_id'"
op|':'
name|'vol'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'vol'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'cinfo'
op|'='
name|'self'
op|'.'
name|'_attach_volume_boot'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'cinfo'
op|')'
op|'}'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'swap'
op|','
name|'ephemerals'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_instance_terminated
dedent|''
name|'def'
name|'_is_instance_terminated'
op|'('
name|'self'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Instance in DELETING task state or not found in DB"""'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|'=='
name|'task_states'
op|'.'
name|'DELETING'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_shutdown_instance_even_if_deleted
dedent|''
dedent|''
name|'def'
name|'_shutdown_instance_even_if_deleted'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call terminate_instance even for already deleted instances"""'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Going to force the deletion of the vm %(instance_uuid)s, "'
nl|'\n'
string|'"even if it is deleted"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Instance %(instance_uuid)s did not exist in the "'
nl|'\n'
string|'"DB, but I will shut it down anyway using a special "'
nl|'\n'
string|'"context"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'terminate_instance'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"exception terminating the instance "'
nl|'\n'
string|'"%(instance_uuid)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_instance
dedent|''
dedent|''
name|'def'
name|'_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Launch a new instance with specified options."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_instance_not_already_created'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'_check_image_size'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start_building'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_allocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_instance_terminated'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Instance %s not found."'
op|')'
op|'%'
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# assuming the instance was already deleted, run "delete" again'
nl|'\n'
comment|'# just in case'
nl|'\n'
name|'self'
op|'.'
name|'_shutdown_instance_even_if_deleted'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_instance_not_already_created
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_instance_not_already_created'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure an instance with the same name is not already present."""'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'name'"
op|']'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Instance has already been created"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_image_size
dedent|''
dedent|''
name|'def'
name|'_check_image_size'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure image is smaller than the maximum size allowed by the\n        instance_type.\n\n        The image stored in Glance is potentially compressed, so we use two\n        checks to ensure that the size isn\'t exceeded:\n\n            1) This one - checks compressed size, this a quick check to\n               eliminate any images which are obviously too large\n\n            2) Check uncompressed size in nova.virt.xenapi.vm_utils. This\n               is a slower check since it requires uncompressing the entire\n               image, but is accurate because it reflects the image\'s\n               actual size.\n        """'
newline|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'size_bytes'
op|'='
name|'image_meta'
op|'['
string|"'size'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# Size is not a required field in the image service (yet), so'
nl|'\n'
comment|"# we are unable to rely on it being there even though it's in"
nl|'\n'
comment|'# glance.'
nl|'\n'
nl|'\n'
comment|'# TODO(jk0): Should size be required in the image service?'
nl|'\n'
indent|'            '
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
name|'allowed_size_gb'
op|'='
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(jk0): Since libvirt uses local_gb as a secondary drive, we'
nl|'\n'
comment|'# need to handle potential situations where local_gb is 0. This is'
nl|'\n'
comment|'# the default for m1.tiny.'
nl|'\n'
name|'if'
name|'allowed_size_gb'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'allowed_size_bytes'
op|'='
name|'allowed_size_gb'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"image_id=%(image_id)s, image_size_bytes="'
nl|'\n'
string|'"%(size_bytes)d, allowed_size_bytes="'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'size_bytes'
op|'>'
name|'allowed_size_bytes'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Image \'%(image_id)s\' size %(size_bytes)d exceeded"'
nl|'\n'
string|'" instance_type allowed size "'
nl|'\n'
string|'"%(allowed_size_bytes)d"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageTooLarge'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|_start_building
dedent|''
name|'def'
name|'_start_building'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Save the host and launched_on fields and log appropriately."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"instance %s: starting..."'
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
name|'launched_on'
op|'='
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_network
dedent|''
name|'def'
name|'_allocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocate networks for an instance and return the network info"""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Skipping network allocation for instance %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|'%'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'NETWORKING'
op|')'
newline|'\n'
name|'is_vpn'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vpn'
op|'='
name|'is_vpn'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s failed network setup"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance network_info: |%s|"'
op|')'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_prep_block_device
dedent|''
name|'def'
name|'_prep_block_device'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up the block device for an instance with error logging"""'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'='
name|'self'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'swap'
op|','
name|'ephemerals'
op|','
name|'block_device_mapping'
op|'='
name|'mapping'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s failed block device setup"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'root_device_name'"
op|':'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'swap'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
name|'ephemerals'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_spawn
dedent|''
name|'def'
name|'_spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'injected_files'
op|','
name|'admin_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawn an instance with error logging and update its power state"""'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'injected_files'"
op|']'
op|'='
name|'injected_files'
newline|'\n'
name|'instance'
op|'['
string|"'admin_pass'"
op|']'
op|'='
name|'admin_pass'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'network_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance %s failed to spawn"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_notify_about_instance_usage
dedent|''
name|'def'
name|'_notify_about_instance_usage'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.create'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deallocate_network
dedent|''
name|'def'
name|'_deallocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"deallocating network for instance: %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|'%'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_bdms
dedent|''
dedent|''
name|'def'
name|'_get_instance_volume_bdms'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'return'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_bdm
dedent|''
name|'def'
name|'_get_instance_volume_bdm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
comment|"# NOTE(vish): Comparing as strings because the os_api doesn't"
nl|'\n'
comment|'#             convert to integer and we may wish to support uuids'
nl|'\n'
comment|'#             in the future.'
nl|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
op|'=='
name|'str'
op|'('
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_volume_block_device_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_instance_volume_block_device_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'cinfo'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
nl|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'}'
op|')'
newline|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|start_instance
name|'def'
name|'start_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starting an instance on this host."""'
newline|'\n'
comment|"# TODO(yamahata): injected_files isn't supported."
nl|'\n'
comment|"#                 Anyway OSAPI doesn't support stop/start yet"
nl|'\n'
comment|"# FIXME(vish): I've kept the files during stop instance, but"
nl|'\n'
comment|'#              I think start will fail due to the files still'
nl|'\n'
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_shutdown_instance
dedent|''
name|'def'
name|'_shutdown_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'action_str'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"%(action_str)s instance %(instance_uuid)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'action_str'"
op|':'
name|'action_str'
op|','
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'stub_network'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'=='
name|'power_state'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'trying to destroy already destroyed'"
nl|'\n'
string|"' instance: %s'"
op|')'
op|'%'
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# NOTE(vish) get bdms before destroying the instance'
nl|'\n'
dedent|''
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(vish): actual driver detach done in driver.destroy, so'
nl|'\n'
comment|'#             just tell nova-volume that we are done with it.'
nl|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'my_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'DiskNotFound'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Ignoring DiskNotFound: %s"'
op|')'
op|'%'
name|'exc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_volumes
dedent|''
dedent|''
dedent|''
name|'def'
name|'_cleanup_volumes'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"terminating bdm %s"'
op|')'
op|'%'
name|'bdm'
op|')'
newline|'\n'
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
name|'and'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
comment|'# NOTE(vish): bdms will be deleted on instance destroy'
nl|'\n'
nl|'\n'
DECL|member|_delete_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete an instance on this host."""'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'Terminating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.delete'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|terminate_instance
name|'def'
name|'terminate_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance on this host."""'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'elevated'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'notify_usage_exists'
op|'('
name|'instance'
op|','
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|stop_instance
name|'def'
name|'stop_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stopping an instance on this host."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'Stopping'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|power_off_instance
name|'def'
name|'power_off_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off an instance on this host."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|power_on_instance
name|'def'
name|'power_on_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power on an instance on this host."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rebuild_instance
name|'def'
name|'rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy and re-make this instance.\n\n        A \'rebuild\' effectively purges all existing data from the system and\n        remakes the VM with given \'metadata\' and \'personalities\'.\n\n        :param context: `nova.RequestContext` object\n        :param instance_uuid: Instance Identifier (UUID)\n        :param injected_files: Files to inject\n        :param new_pass: password to set on rebuilt instance\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebuilding instance %s"'
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'injected_files'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'injected_files'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'bd_mapping'
op|'='
name|'self'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|')'
newline|'\n'
comment|"# pull in new password here since the original password isn't in the db"
nl|'\n'
name|'instance'
op|'.'
name|'admin_pass'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'new_pass'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'network_info'
op|','
name|'bd_mapping'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.rebuild'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reboot_instance
name|'def'
name|'reboot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'reboot_type'
op|'='
string|'"SOFT"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot an instance on this host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Rebooting instance %s"'
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to reboot a non-running '"
nl|'\n'
string|"'instance: %(instance_uuid)s (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|snapshot_instance
name|'def'
name|'snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'image_id'
op|','
nl|'\n'
name|'image_type'
op|'='
string|"'snapshot'"
op|','
name|'backup_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'rotation'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot an instance on this host.\n\n        :param context: security context\n        :param instance_uuid: nova.db.sqlalchemy.models.Instance.Uuid\n        :param image_id: glance.db.sqlalchemy.models.Image.Id\n        :param image_type: snapshot | backup\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
name|'if'
name|'image_type'
op|'=='
string|'"snapshot"'
op|':'
newline|'\n'
indent|'            '
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
newline|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|'"backup"'
op|':'
newline|'\n'
indent|'            '
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Image type not recognized %s'"
op|')'
op|'%'
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: snapshotting'"
op|')'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to snapshot a non-running '"
nl|'\n'
string|"'instance: %(instance_uuid)s (state: %(state)s '"
nl|'\n'
string|"'expected: %(running)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_type'
op|'=='
string|"'snapshot'"
name|'and'
name|'rotation'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageRotationNotAllowed'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
name|'and'
name|'rotation'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'rotate_backups'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'RotationRequiredForBackup'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rotate_backups
name|'def'
name|'rotate_backups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete excess backups associated to an instance.\n\n        Instances are allowed a fixed number of backups (the rotation number);\n        this method deletes the oldest backups that exceed the rotation\n        threshold.\n\n        :param context: security context\n        :param instance_uuid: string representing uuid of instance\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
comment|'# NOTE(jk0): Eventually extract this out to the ImageService?'
nl|'\n'
DECL|function|fetch_images
name|'def'
name|'fetch_images'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'images'
op|'='
op|'['
op|']'
newline|'\n'
name|'marker'
op|'='
name|'None'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'batch'
op|'='
name|'image_service'
op|'.'
name|'detail'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|','
nl|'\n'
name|'marker'
op|'='
name|'marker'
op|','
name|'sort_key'
op|'='
string|"'created_at'"
op|','
name|'sort_dir'
op|'='
string|"'desc'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'batch'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'images'
op|'+='
name|'batch'
newline|'\n'
name|'marker'
op|'='
name|'batch'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'images'
newline|'\n'
nl|'\n'
dedent|''
name|'image_service'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'property-image_type'"
op|':'
string|"'backup'"
op|','
nl|'\n'
string|"'property-backup_type'"
op|':'
name|'backup_type'
op|','
nl|'\n'
string|"'property-instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
nl|'\n'
name|'images'
op|'='
name|'fetch_images'
op|'('
op|')'
newline|'\n'
name|'num_images'
op|'='
name|'len'
op|'('
name|'images'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Found %(num_images)d images (rotation: %(rotation)d)"'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'if'
name|'num_images'
op|'>'
name|'rotation'
op|':'
newline|'\n'
comment|'# NOTE(sirp): this deletes all backups that exceed the rotation'
nl|'\n'
comment|'# limit'
nl|'\n'
indent|'            '
name|'excess'
op|'='
name|'len'
op|'('
name|'images'
op|')'
op|'-'
name|'rotation'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Rotating out %d backups"'
op|'%'
name|'excess'
op|')'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'excess'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'='
name|'images'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deleting image %s"'
op|'%'
name|'image_id'
op|')'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'new_pass'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for an instance on this host.\n\n        This is generally only called by API password resets after an\n        image has been built.\n        """'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'new_pass'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Generate a random password'
nl|'\n'
indent|'            '
name|'new_pass'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'max_tries'
op|'='
number|'10'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'max_tries'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'instance_state'
op|'='
name|'instance_ref'
op|'['
string|'"power_state"'
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Failed to set admin password. '"
nl|'\n'
string|"'Instance %s is not running'"
op|')'
op|'%'
nl|'\n'
name|'instance_ref'
op|'['
string|'"uuid"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_admin_password'
op|'('
name|'instance_ref'
op|','
name|'new_pass'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Instance %s: Root password set"'
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|'"uuid"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|"# NOTE(dprince): if the driver doesn't implement"
nl|'\n'
comment|'# set_admin_password we break to avoid a loop'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'set_admin_password is not implemented '"
nl|'\n'
string|"'by this driver.'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Catch all here because this could be anything.'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'e'
op|')'
newline|'\n'
name|'if'
name|'i'
op|'=='
name|'max_tries'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
comment|"# We create a new exception here so that we won't"
nl|'\n'
comment|'# potentially reveal password information to the'
nl|'\n'
comment|'# API caller.  The real exception is logged above'
nl|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'Error setting admin password'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_msg'
op|')'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the specified path in an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_state'
op|'='
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'instance_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to inject a file into a non-running '"
nl|'\n'
string|"'instance: %(instance_uuid)s (state: %(instance_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'instance %(instance_uuid)s: injecting file to %(path)s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_file'
op|'('
name|'instance_ref'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|agent_update
name|'def'
name|'agent_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update agent running on an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_state'
op|'='
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'instance_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'trying to update agent on a non-running '"
nl|'\n'
string|"'instance: %(instance_uuid)s (state: %(instance_state)s '"
nl|'\n'
string|"'expected: %(expected_state)s)'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'instance %(instance_uuid)s: updating agent to %(url)s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'agent_update'
op|'('
name|'instance_ref'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rescue_instance
name|'def'
name|'rescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rescue an instance on this host.\n        :param rescue_password: password to set on rescue instance\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: rescuing'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'admin_pass'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'rescue_password'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'generate_password'
op|'('
name|'FLAGS'
op|'.'
name|'password_length'
op|')'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unrescue_instance
name|'def'
name|'unrescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue an instance on this host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: unrescuing'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unrescue'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the source instance."""'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'confirm_migration'
op|'('
nl|'\n'
name|'migration_ref'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.resize.confirm'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the new instance on the destination machine.\n\n        Reverts the model changes, and powers on the old instance on the\n        source machine.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'finish_revert_resize'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_revert_resize
name|'def'
name|'finish_revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes the second half of reverting a resize.\n\n        Power back on the source instance and revert the resized attributes\n        in the database.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'old_instance_type'
op|'='
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'old_instance_type'
op|')'
newline|'\n'
nl|'\n'
comment|"# Just roll back the record. There's no need to resize down since"
nl|'\n'
comment|"# the 'old' VM already has the preferred attributes"
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|'"uuid"'
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_revert_migration'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'reverted'"
op|'}'
op|')'
newline|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.resize.revert'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|prep_resize
name|'def'
name|'prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'instance_type_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiates the process of moving a running instance to another host.\n\n        Possibly changes the RAM and disk size in the process.\n\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'same_host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|'=='
name|'FLAGS'
op|'.'
name|'host'
newline|'\n'
name|'if'
name|'same_host'
name|'and'
name|'not'
name|'FLAGS'
op|'.'
name|'allow_resize_to_same_host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'destination same as source!'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'old_instance_type_id'
op|'='
name|'instance_ref'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'old_instance_type_id'
op|')'
newline|'\n'
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'source_compute'"
op|':'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'FLAGS'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dest_host'"
op|':'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
op|','
nl|'\n'
string|"'old_instance_type_id'"
op|':'
name|'old_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'new_instance_type_id'"
op|':'
name|'instance_type_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'pre-migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: migrating'"
op|')'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'resize_instance'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'new_instance_type'
op|'='
name|'new_instance_type'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'new_instance_type_id'
op|'='
name|'new_instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.resize.prep'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resize_instance
name|'def'
name|'resize_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts the migration of a running instance to another host."""'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'new_instance_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_ref'
op|','
name|'migration_ref'
op|'['
string|"'dest_host'"
op|']'
op|','
nl|'\n'
name|'instance_type_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'post-migrating'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_host_and_topic'
op|'('
nl|'\n'
name|'context'
op|','
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'migration_id'"
op|':'
name|'migration_id'
op|','
nl|'\n'
string|"'disk_info'"
op|':'
name|'disk_info'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
op|'{'
string|"'method'"
op|':'
string|"'finish_resize'"
op|','
nl|'\n'
string|"'args'"
op|':'
name|'params'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_resize
name|'def'
name|'finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'migration_id'
op|','
name|'disk_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes the migration process.\n\n        Sets up the newly transferred disk and turns on the instance at its\n        new host machine.\n\n        """'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'migration_id'
op|')'
newline|'\n'
nl|'\n'
name|'resize_instance'
op|'='
name|'False'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'old_instance_type_id'
op|'='
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'new_instance_type_id'
op|'='
name|'migration_ref'
op|'['
string|"'new_instance_type_id'"
op|']'
newline|'\n'
name|'if'
name|'old_instance_type_id'
op|'!='
name|'new_instance_type_id'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'new_instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'memory_mb'
op|'='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'vcpus'
op|'='
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
name|'local_gb'
op|'='
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
op|')'
op|')'
newline|'\n'
name|'resize_instance'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Have to look up image here since we depend on disk_format later'
nl|'\n'
name|'image_meta'
op|'='
name|'_get_image_meta'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_migration'
op|'('
name|'context'
op|','
name|'migration_ref'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'disk_info'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'resize_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_id'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'finished'"
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|add_fixed_ip_to_instance
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to add new fixed_ip to instance\n        then injects the new network info and resets instance networking.\n\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'usage'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.create_ip'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
name|'usage'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|remove_fixed_ip_from_instance
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to remove existing fixed_ip from instance\n        by injecting the altered network info and resetting\n        instance networking.\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'usage'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.delete_ip'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
name|'usage'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|pause_instance
name|'def'
name|'pause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause an instance on this host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: pausing'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pause'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unpause_instance
name|'def'
name|'unpause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause a paused instance on this host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: unpausing'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unpause'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|host_power_action
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'action'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_power_action'
op|'('
name|'host'
op|','
name|'action'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|set_host_enabled
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'enabled'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_host_enabled'
op|'('
name|'host'
op|','
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for an instance on this host."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|'"power_state"'
op|']'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"instance %s: retrieving diagnostics"'
op|')'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|suspend_instance
name|'def'
name|'suspend_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: suspending'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'suspend'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
string|"'compute.instance.suspend'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resume_instance
name|'def'
name|'resume_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given suspended instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'instance %s: resuming'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'utils'
op|'.'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'notify'
op|'('
string|"'compute.%s'"
op|'%'
name|'self'
op|'.'
name|'host'
op|','
string|"'compute.instance.resume'"
op|','
nl|'\n'
name|'notifier'
op|'.'
name|'INFO'
op|','
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|lock_instance
name|'def'
name|'lock_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: locking'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'locked'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unlock_instance
name|'def'
name|'unlock_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: unlocking'"
op|')'
op|','
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'locked'"
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_lock
name|'def'
name|'get_lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the boolean state of the given instance\'s lock."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: getting locked state'"
op|')'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'instance_ref'
op|'['
string|"'locked'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the given instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: reset network'"
op|')'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reset_network'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'instance %s: inject network info'"
op|')'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"network_info to inject: |%s|"'
op|')'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the console output for the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Get console output for instance %s"'
op|')'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_output'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'tail_length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
name|'self'
op|'.'
name|'_tail_log'
op|'('
name|'output'
op|','
name|'tail_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'output'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|','
string|"'replace'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tail_log
dedent|''
name|'def'
name|'_tail_log'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'int'
op|'('
name|'length'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'log'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
op|'-'
name|'int'
op|'('
name|'length'
op|')'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_ajax_console
name|'def'
name|'get_ajax_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for an ajax console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: getting ajax console"'
op|')'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_ajax_console'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a vnc console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"instance %s: getting vnc console"'
op|')'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'console_type'
op|'=='
string|"'novnc'"
op|':'
newline|'\n'
comment|'# For essex, novncproxy_base_url must include the full path'
nl|'\n'
comment|'# including the html file (like http://myhost/vnc_auto.html)'
nl|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'novncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|"'xvpvnc'"
op|':'
newline|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'xvpvncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|'='
name|'token'
newline|'\n'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'='
name|'access_url'
newline|'\n'
nl|'\n'
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
DECL|member|_attach_volume_boot
dedent|''
name|'def'
name|'_attach_volume_boot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance at boot time. So actual attach\n        is done by instance creation"""'
newline|'\n'
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"instance %(instance_uuid)s: booting with "'
nl|'\n'
string|'"volume %(volume_id)s at %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'address'
op|'='
name|'FLAGS'
op|'.'
name|'my_ip'
newline|'\n'
name|'connection_info'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
newline|'\n'
name|'return'
name|'connection_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance."""'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"instance %(instance_uuid)s: attaching volume %(volume_id)s"'
nl|'\n'
string|'" to %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'address'
op|'='
name|'FLAGS'
op|'.'
name|'my_ip'
newline|'\n'
name|'connection_info'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'attach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'mountpoint'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
comment|'# pylint: disable=W0702'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"instance %(instance_uuid)s: attach failed"'
nl|'\n'
string|'" %(mountpoint)s, removing"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'mountpoint'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_detach_volume
dedent|''
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do the actual driver detach using block device mapping."""'
newline|'\n'
name|'instance_name'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'mp'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Detach volume %(volume_id)s from mountpoint %(mp)s"'
nl|'\n'
string|'" on instance %(instance_uuid)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Detaching volume from unknown instance %s"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_volume'
op|'('
name|'utils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
op|','
nl|'\n'
name|'instance_name'
op|','
nl|'\n'
name|'mp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'checks_instance_lock'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'bdm'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdm'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'FLAGS'
op|'.'
name|'my_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_volume'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|remove_volume_connection
name|'def'
name|'remove_volume_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a volume connection using the volume api"""'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_bdm'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'FLAGS'
op|'.'
name|'my_ip'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|compare_cpu
name|'def'
name|'compare_cpu'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'cpu_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks that the host cpu is compatible with a cpu given by xml.\n\n        :param context: security context\n        :param cpu_info: json string obtained from virConnect.getCapabilities\n        :returns: See driver.compare_cpu\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'compare_cpu'
op|'('
name|'cpu_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|create_shared_storage_test_file
name|'def'
name|'create_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes tmpfile under FLAGS.instance_path.\n\n        This method enables compute nodes to recognize that they mounts\n        same shared storage. (create|check|creanup)_shared_storage_test_file()\n        is a pair.\n\n        :param context: security context\n        :returns: tmpfile name(basename)\n\n        """'
newline|'\n'
name|'dirpath'
op|'='
name|'FLAGS'
op|'.'
name|'instances_path'
newline|'\n'
name|'fd'
op|','
name|'tmp_file'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'dir'
op|'='
name|'dirpath'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating tmpfile %s to notify to other "'
nl|'\n'
string|'"compute nodes that they should mount "'
nl|'\n'
string|'"the same storage."'
op|')'
op|'%'
name|'tmp_file'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|check_shared_storage_test_file
name|'def'
name|'check_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms existence of the tmpfile under FLAGS.instances_path.\n           Cannot confirm tmpfile return False.\n\n        :param context: security context\n        :param filename: confirm existence of FLAGS.instances_path/thisfile\n\n        """'
newline|'\n'
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tmp_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|cleanup_shared_storage_test_file
name|'def'
name|'cleanup_shared_storage_test_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes existence of the tmpfile under FLAGS.instances_path.\n\n        :param context: security context\n        :param filename: remove existence of FLAGS.instances_path/thisfile\n\n        """'
newline|'\n'
name|'tmp_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'filename'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'remove'
op|'('
name|'tmp_file'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
name|'notifier'
op|'='
name|'notifier'
op|','
name|'publisher_id'
op|'='
name|'publisher_id'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|update_available_resource
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See comments update_resource_info.\n\n        :param context: security context\n        :returns: See driver.update_available_resource()\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_disk_info
dedent|''
name|'def'
name|'get_instance_disk_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Getting infomation of instance\'s current disk.\n\n        Implementation nova.virt.libvirt.connection.\n\n        :param context: security context\n        :param instance_name: instance name\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_live_migration
dedent|''
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'time'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
name|'disk'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparations for live migration at dest host.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'time'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'='
name|'greenthread'
newline|'\n'
nl|'\n'
comment|'# Getting instance info'
nl|'\n'
dedent|''
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# If any volume is mounted, prepare here.'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"%s has no volume."'
op|')'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Bridge settings.'
nl|'\n'
comment|'# Call this method prior to ensure_filtering_rules_for_instance,'
nl|'\n'
comment|'# since bridge is not set up, ensure_filtering_rules_for instance'
nl|'\n'
comment|'# fails.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Retry operation is necessary because continuously request comes,'
nl|'\n'
comment|'# concorrent request occurs to iptables, then it complains.'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ips'
op|'='
op|'['
name|'nw_info'
op|'['
number|'1'
op|']'
op|'['
string|"'ips'"
op|']'
name|'for'
name|'nw_info'
name|'in'
name|'network_info'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
name|'instance_id'
op|'='
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'max_retry'
op|'='
name|'FLAGS'
op|'.'
name|'live_migration_retry_count'
newline|'\n'
name|'for'
name|'cnt'
name|'in'
name|'range'
op|'('
name|'max_retry'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cnt'
op|'=='
name|'max_retry'
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"plug_vifs() failed %(cnt)d."'
nl|'\n'
string|'"Retry up to %(max_retry)d for %(hostname)s."'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating filters to hypervisors and firewalls.'
nl|'\n'
comment|'# An example is that nova-instance-instance-xxx,'
nl|'\n'
comment|'# which is written to libvirt.xml(Check "virsh nwfilter-list")'
nl|'\n'
comment|'# This nwfilter is necessary on the destination host.'
nl|'\n'
comment|'# In addition, this method is creating filtering rule'
nl|'\n'
comment|'# onto destination host.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparation for block migration'
nl|'\n'
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_block_migration'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'disk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Executing live migration.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
comment|'# Get instance for error handling.'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Checking volume node is working correctly when any volumes'
nl|'\n'
comment|'# are attached to instances.'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'volume_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"check_for_export"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"pre_live_migration"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'block_migration'"
op|':'
name|'block_migration'
op|','
nl|'\n'
string|"'disk'"
op|':'
name|'disk'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Pre live migration for %(instance_uuid)s failed at"'
nl|'\n'
string|'" %(dest)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rollback_live_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
comment|'# Executing live migration'
nl|'\n'
comment|'# live_migration might raises exceptions, but'
nl|'\n'
comment|'# nothing must be recovered in this version.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'rollback_live_migration'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration
dedent|''
name|'def'
name|'post_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration.\n\n        This method is called from live_migration\n        and mainly updating database record.\n\n        :param ctxt: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'post_live_migration() is started..'"
op|')'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Detaching volumes.'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'ctxt'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'remove_volume_connection'
op|'('
name|'ctxt'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Releasing vlan.'
nl|'\n'
comment|'# (not necessary in current implementation?)'
nl|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
newline|'\n'
comment|'# Releasing security group ingress rule.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Database updating.'
nl|'\n'
comment|'# NOTE(jkoelker) This needs to be converted to network api calls'
nl|'\n'
comment|'#                if nova wants to support floating_ips in'
nl|'\n'
comment|'#                quantum/melange'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Not return if floating_ip is not found, otherwise,'
nl|'\n'
comment|'# instance never be accessible..'
nl|'\n'
indent|'            '
name|'floating_ip'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'floating_ip'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No floating_ip is found for %s.'"
op|')'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'floating_ip_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'floating_ip_update'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'No floating_ip is found for %s.'"
op|')'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Live migration: Unexpected error: "'
nl|'\n'
string|'"%(instance_uuid)s cannot inherit floating "'
nl|'\n'
string|'"ip.\\n%(e)s"'
op|')'
op|'%'
op|'('
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Define domain at destination host, without doing it,'
nl|'\n'
comment|'# pause/suspend/terminate do not work.'
nl|'\n'
dedent|''
name|'rpc'
op|'.'
name|'call'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'ctxt'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"post_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'block_migration'"
op|':'
name|'block_migration'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restore instance state'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|'"id"'
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'dest'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'current_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restore volume state'
nl|'\n'
name|'for'
name|'volume_ref'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'update'
op|'('
name|'ctxt'
op|','
name|'volume_ref'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# No instance booting at source host, but instance dir'
nl|'\n'
comment|'# must be deleted for preparing next block migration'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# self.driver.destroy() usually performs  vif unplugging'
nl|'\n'
comment|'# but we must do it explicitly here when block_migration'
nl|'\n'
comment|'# is false, as the network devices at the source must be'
nl|'\n'
comment|'# torn down'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Migrating %(instance_uuid)s to %(dest)s finished'"
nl|'\n'
string|"' successfully.'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"You may see the error \\"libvirt: QEMU error: "'
nl|'\n'
string|'"Domain not found: no domain with matching name.\\" "'
nl|'\n'
string|'"This error can be safely ignored."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_live_migration_at_destination
dedent|''
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'block_migration'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration .\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Post operation of migraton started for %s .'"
op|')'
nl|'\n'
op|'%'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration
dedent|''
name|'def'
name|'rollback_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recovers Instance/volume state from migrating -> running.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        :param dest:\n            This method is called from live migration src host.\n            This param specifies destination host.\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'self'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'volume'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'remove_from_compute'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# Block migration needs empty image at destination host'
nl|'\n'
comment|'# before migration starts, so if any failure occurs,'
nl|'\n'
comment|'# any empty images has to be deleted.'
nl|'\n'
dedent|''
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'            '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"rollback_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_live_migration_at_destination
dedent|''
dedent|''
name|'def'
name|'rollback_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Cleaning up image directory that is created pre_live_migration.\n\n        :param context: security context\n        :param instance_id: nova.db.sqlalchemy.models.Instance.Id\n        """'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rebooting_instances
name|'def'
name|'_poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'reboot_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rebooting_instances'
op|'('
name|'FLAGS'
op|'.'
name|'reboot_timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rescued_instances
name|'def'
name|'_poll_rescued_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'rescue_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rescued_instances'
op|'('
name|'FLAGS'
op|'.'
name|'rescue_timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_unconfirmed_resizes
name|'def'
name|'_poll_unconfirmed_resizes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'resize_confirm_window'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_unconfirmed_resizes'
op|'('
name|'FLAGS'
op|'.'
name|'resize_confirm_window'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_bandwidth_usage
name|'def'
name|'_poll_bandwidth_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'start_time'
op|'='
name|'None'
op|','
name|'stop_time'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'start_time'
op|':'
newline|'\n'
indent|'            '
name|'start_time'
op|'='
name|'utils'
op|'.'
name|'current_audit_period'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'>'
name|'FLAGS'
op|'.'
name|'bandwith_poll_interval'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating bandwidth usage cache"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'bw_usage'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_all_bw_usage'
op|'('
name|'start_time'
op|','
name|'stop_time'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(mdragon): Not all hypervisors have bandwidth polling'
nl|'\n'
comment|"# implemented yet.  If they don't it doesn't break anything,"
nl|'\n'
comment|"# they just don't get the info in the usage events."
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'usage'
name|'in'
name|'bw_usage'
op|':'
newline|'\n'
indent|'                '
name|'vif'
op|'='
name|'usage'
op|'['
string|"'virtual_interface'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'bw_usage_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'vif'
op|'.'
name|'instance_id'
op|','
nl|'\n'
name|'vif'
op|'.'
name|'network'
op|'.'
name|'label'
op|','
nl|'\n'
name|'start_time'
op|','
nl|'\n'
name|'usage'
op|'['
string|"'bw_in'"
op|']'
op|','
name|'usage'
op|'['
string|"'bw_out'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_report_driver_status
name|'def'
name|'_report_driver_status'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_host_check'
op|'>'
name|'FLAGS'
op|'.'
name|'host_state_interval'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_host_check'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Updating host status"'
op|')'
op|')'
newline|'\n'
comment|'# This will grab info about the host and queue it'
nl|'\n'
comment|'# to be sent to the Schedulers.'
nl|'\n'
name|'self'
op|'.'
name|'update_service_capabilities'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_stats'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_sync_power_states
name|'def'
name|'_sync_power_states'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Align power states between the database and the hypervisor.\n\n        The hypervisor is authoritative for the power_state data, so we\n        simply loop over all known instances for this host and update the\n        power_state according to the hypervisor. If the instance is not found\n        then it will be set to power_state.NOSTATE, because it doesn\'t exist\n        on the hypervisor.\n\n        """'
newline|'\n'
name|'vm_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances_detail'
op|'('
op|')'
newline|'\n'
name|'vm_instances'
op|'='
name|'dict'
op|'('
op|'('
name|'vm'
op|'.'
name|'name'
op|','
name|'vm'
op|')'
name|'for'
name|'vm'
name|'in'
name|'vm_instances'
op|')'
newline|'\n'
name|'db_instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'num_vm_instances'
op|'='
name|'len'
op|'('
name|'vm_instances'
op|')'
newline|'\n'
name|'num_db_instances'
op|'='
name|'len'
op|'('
name|'db_instances'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_vm_instances'
op|'!='
name|'num_db_instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Found %(num_db_instances)s in the database and "'
nl|'\n'
string|'"%(num_vm_instances)s on the hypervisor."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'db_instance'
name|'in'
name|'db_instances'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'db_instance'
op|'['
string|'"name"'
op|']'
newline|'\n'
name|'db_power_state'
op|'='
name|'db_instance'
op|'['
string|"'power_state'"
op|']'
newline|'\n'
name|'vm_instance'
op|'='
name|'vm_instances'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_instance'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'vm_power_state'
op|'='
name|'vm_instance'
op|'.'
name|'state'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vm_power_state'
op|'=='
name|'db_power_state'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'vm_power_state'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
name|'power_state'
op|'.'
name|'SHUTOFF'
op|')'
nl|'\n'
name|'and'
name|'db_instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|'"id"'
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'vm_power_state'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|'['
string|'"id"'
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'vm_power_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_reclaim_queued_deletes
name|'def'
name|'_reclaim_queued_deletes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reclaim instances that are queued for deletion."""'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'reclaim_instance_interval'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"FLAGS.reclaim_instance_interval <= 0, skipping..."'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'old_enough'
op|'='
op|'('
name|'not'
name|'instance'
op|'.'
name|'deleted_at'
name|'or'
name|'utils'
op|'.'
name|'is_older_than'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'deleted_at'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'reclaim_instance_interval'
op|')'
op|')'
newline|'\n'
name|'soft_deleted'
op|'='
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'SOFT_DELETE'
newline|'\n'
nl|'\n'
name|'if'
name|'soft_deleted'
name|'and'
name|'old_enough'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Reclaiming deleted instance %(instance_uuid)s"'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_instance_fault_from_exc
dedent|''
dedent|''
dedent|''
name|'def'
name|'add_instance_fault_from_exc'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'fault'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the specified fault to the database."""'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'fault'
op|','
string|'"code"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'code'
op|'='
name|'fault'
op|'.'
name|'code'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'code'
op|'='
number|'500'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'code'"
op|':'
name|'code'
op|','
nl|'\n'
string|"'message'"
op|':'
name|'fault'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"'details'"
op|':'
name|'fault'
op|'.'
name|'message'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_fault_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'ticks_between_runs'
op|'='
name|'FLAGS'
op|'.'
name|'running_deleted_instance_poll_interval'
op|')'
newline|'\n'
DECL|member|_cleanup_running_deleted_instances
name|'def'
name|'_cleanup_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup any instances which are erroneously still running after\n        having been deleted.\n\n        Valid actions to take are:\n\n            1. noop - do nothing\n            2. log - log which instances are erroneously running\n            3. reap - shutdown and cleanup any erroneously running instances\n\n        The use-case for this cleanup task is: for various reasons, it may be\n        possible for the database to show an instance as deleted but for that\n        instance to still be running on a host machine (see bug\n        https://bugs.launchpad.net/nova/+bug/911366).\n\n        This cleanup task is a cross-hypervisor utility for finding these\n        zombied instances and either logging the discrepancy (likely what you\n        should do in production), or automatically reaping the instances (more\n        appropriate for dev environments).\n        """'
newline|'\n'
name|'action'
op|'='
name|'FLAGS'
op|'.'
name|'running_deleted_instance_action'
newline|'\n'
nl|'\n'
name|'if'
name|'action'
op|'=='
string|'"noop"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'present_name_labels'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): admin contexts don't ordinarily return deleted records"
nl|'\n'
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'present'
op|'='
name|'instance'
op|'.'
name|'name'
name|'in'
name|'present_name_labels'
newline|'\n'
name|'erroneously_running'
op|'='
name|'instance'
op|'.'
name|'deleted'
name|'and'
name|'present'
newline|'\n'
name|'old_enough'
op|'='
op|'('
name|'not'
name|'instance'
op|'.'
name|'deleted_at'
name|'or'
name|'utils'
op|'.'
name|'is_older_than'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'deleted_at'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'running_deleted_instance_timeout'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'erroneously_running'
name|'and'
name|'old_enough'
op|':'
newline|'\n'
indent|'                    '
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'name_label'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'action'
op|'=='
string|'"log"'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Detected instance %(instance_uuid)s"'
nl|'\n'
string|'" with name label \'%(name_label)s\' which"'
nl|'\n'
string|'" is marked as DELETED but still present"'
nl|'\n'
string|'" on host."'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'action'
op|'=='
string|"'reap'"
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Destroying instance %(instance_uuid)s with"'
nl|'\n'
string|'" name label \'%(name_label)s\' which is"'
nl|'\n'
string|'" marked as DELETED but still present on"'
nl|'\n'
string|'" host."'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|"'Terminating'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Unrecognized value \'%(action)s\'"'
nl|'\n'
string|'" for FLAGS.running_deleted_"'
nl|'\n'
string|'"instance_action"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|error_out_instance_on_exception
name|'def'
name|'error_out_instance_on_exception'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s. Setting instance vm_state to ERROR'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|'%'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

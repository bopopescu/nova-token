begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all processes relating to instances (guest vms).\n\nThe :py:class:`ComputeManager` class is a :py:class:`nova.manager.Manager` that\nhandles RPC calls relating to creating instances.  It is responsible for\nbuilding a disk image, launching it via the underlying virtualization driver,\nresponding to calls to check its state, attaching persistent storage, and\nterminating it.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'cinderclient'
name|'import'
name|'exceptions'
name|'as'
name|'cinder_exception'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'event'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'semaphore'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'timeout'
newline|'\n'
name|'from'
name|'keystoneclient'
name|'import'
name|'exceptions'
name|'as'
name|'keystone_exception'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'oslo_messaging'
name|'as'
name|'messaging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_service'
name|'import'
name|'loopingcall'
newline|'\n'
name|'from'
name|'oslo_service'
name|'import'
name|'periodic_task'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'range'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'rpcapi'
name|'as'
name|'cells_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cloudpipe'
name|'import'
name|'pipelib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'build_results'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'claims'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'resource_tracker'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'conductor'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'conf'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'consoleauth'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'hooks'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LI'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'image'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'base_api'
name|'as'
name|'base_net_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'security_group'
name|'import'
name|'openstack_driver'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'obj_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'migrate_data'
name|'as'
name|'migrate_data_obj'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'safe_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'client'
name|'as'
name|'scheduler_client'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'block_device'
name|'as'
name|'driver_block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'event'
name|'as'
name|'virtevent'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'storage_users'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'virtapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'encryptors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|compute_opts
name|'compute_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'console_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Console proxy host to use to connect '"
nl|'\n'
string|"'to instances on this host.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'default_access_ip_network_name'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Name of network to use to set access IPs for instances'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'defer_iptables_apply'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to batch up the application of IPTables rules'"
nl|'\n'
string|"' during a host restart and apply all at the end of the'"
nl|'\n'
string|"' init phase'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instances_path'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'instances'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Where instances are stored on disk'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'instance_usage_audit'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Generate periodic compute.instance.exists"'
nl|'\n'
string|'" notifications"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'live_migration_retry_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'30'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of 1 second retries needed in live_migration"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'resume_guests_state_on_host_boot'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to start guests that were running before the '"
nl|'\n'
string|"'host rebooted'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'network_allocate_retries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of times to retry network allocation on failures"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'max_concurrent_builds'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Maximum number of instance builds to run concurrently'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'max_concurrent_live_migrations'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Maximum number of live migrations to run concurrently. '"
nl|'\n'
string|"'This limit is enforced to avoid outbound live migrations '"
nl|'\n'
string|"'overwhelming the host/network and causing failures. It '"
nl|'\n'
string|"'is not recommended that you change this unless you are '"
nl|'\n'
string|"'very sure that doing so is safe and stable in your '"
nl|'\n'
string|"'environment.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'block_device_allocate_retries'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of times to retry block device '"
nl|'\n'
string|"'allocation on failures.\\n'"
nl|'\n'
string|"'Starting with Liberty, Cinder can use image volume '"
nl|'\n'
string|"'cache. This may help with block device allocation '"
nl|'\n'
string|"'performance. Look at the cinder '"
nl|'\n'
string|"'image_volume_cache_enabled configuration option.'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|interval_opts
name|'interval_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'bandwidth_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval to pull network bandwidth usage info. Not '"
nl|'\n'
string|"'supported on all hypervisors. Set to -1 to disable. '"
nl|'\n'
string|"'Setting this to 0 will run at the default rate.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'sync_power_state_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval to sync power states between the database and '"
nl|'\n'
string|"'the hypervisor. Set to -1 to disable. '"
nl|'\n'
string|"'Setting this to 0 will run at the default rate.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"heal_instance_info_cache_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds between instance network information "'
nl|'\n'
string|'"cache updates"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'reclaim_instance_interval'"
op|','
nl|'\n'
DECL|variable|min
name|'min'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for reclaiming deleted instances. '"
nl|'\n'
string|"'It takes effect only when value is greater than 0.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'volume_usage_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for gathering volume usages'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'shelved_poll_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for polling shelved instances to '"
nl|'\n'
string|"'offload. Set to -1 to disable.'"
nl|'\n'
string|"'Setting this to 0 will run at the default rate.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'shelved_offload_time'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Time in seconds before a shelved instance is eligible '"
nl|'\n'
string|"'for removing from a host. -1 never offload, 0 offload '"
nl|'\n'
string|"'immediately when shelved'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'instance_delete_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'300'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for retrying failed instance file '"
nl|'\n'
string|"'deletes. Set to -1 to disable. '"
nl|'\n'
string|"'Setting this to 0 will run at the default rate.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'block_device_allocate_retries_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'3'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Waiting time interval (seconds) between block'"
nl|'\n'
string|"' device allocation retries on failures'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'scheduler_instance_sync_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'120'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Waiting time interval (seconds) between sending the '"
nl|'\n'
string|"'scheduler a list of current instance UUIDs to verify '"
nl|'\n'
string|"'that its view of instances is in sync with nova. If the '"
nl|'\n'
string|"'CONF option `scheduler_tracks_instance_changes` is '"
nl|'\n'
string|"'False, changing this option will have no effect.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'update_resources_interval'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Interval in seconds for updating compute resources. A '"
nl|'\n'
string|"'number less than 0 means to disable the task completely. '"
nl|'\n'
string|"'Leaving this at the default of 0 will cause this to run '"
nl|'\n'
string|"'at the default periodic interval. Setting it to any '"
nl|'\n'
string|"'positive value will cause it to run at approximately '"
nl|'\n'
string|"'that number of seconds.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|timeout_opts
name|'timeout_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"reboot_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically hard reboot an instance if it has been "'
nl|'\n'
string|'"stuck in a rebooting state longer than N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"instance_build_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Amount of time in seconds an instance can be in BUILD "'
nl|'\n'
string|'"before going into ERROR status. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"rescue_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically unrescue an instance after N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"resize_confirm_window"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Automatically confirm resizes after N seconds. "'
nl|'\n'
string|'"Set to 0 to disable."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"shutdown_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Total amount of time to wait in seconds for an instance "'
nl|'\n'
string|'"to perform a clean shutdown."'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|running_deleted_opts
name|'running_deleted_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|'"running_deleted_instance_action"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"reap"'
op|','
nl|'\n'
DECL|variable|choices
name|'choices'
op|'='
op|'('
string|"'noop'"
op|','
string|"'log'"
op|','
string|"'shutdown'"
op|','
string|"'reap'"
op|')'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Action to take if a running deleted instance is detected."'
nl|'\n'
string|'"Set to \'noop\' to take no action."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"running_deleted_instance_poll_interval"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1800'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds to wait between runs of the cleanup "'
nl|'\n'
string|'"task."'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|'"running_deleted_instance_timeout"'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Number of seconds after being deleted when a running "'
nl|'\n'
string|'"instance should be considered eligible for cleanup."'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|instance_cleaning_opts
name|'instance_cleaning_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'maximum_instance_delete_attempts'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The number of times to attempt to reap an instance\\'s '"
nl|'\n'
string|"'files.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'nova'
op|'.'
name|'conf'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'compute_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'interval_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'timeout_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'running_deleted_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'instance_cleaning_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'console_topic'"
op|','
string|"'nova.console.rpcapi'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enabled'"
op|','
string|"'nova.vnc'"
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enabled'"
op|','
string|"'nova.spice'"
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enable'"
op|','
string|"'nova.cells.opts'"
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'image_cache_manager_interval'"
op|','
string|"'nova.virt.imagecache'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enabled'"
op|','
string|"'nova.rdp'"
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'html5_proxy_base_url'"
op|','
string|"'nova.rdp'"
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enabled'"
op|','
string|"'nova.mks'"
op|','
name|'group'
op|'='
string|"'mks'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'mksproxy_base_url'"
op|','
string|"'nova.mks'"
op|','
name|'group'
op|'='
string|"'mks'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'destroy_after_evacuate'"
op|','
string|"'nova.utils'"
op|','
name|'group'
op|'='
string|"'workarounds'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'scheduler_tracks_instance_changes'"
op|','
nl|'\n'
string|"'nova.scheduler.host_manager'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|get_notifier
name|'get_notifier'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'rpc'
op|'.'
name|'get_notifier'
op|','
name|'service'
op|'='
string|"'compute'"
op|')'
newline|'\n'
DECL|variable|wrap_exception
name|'wrap_exception'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'exception'
op|'.'
name|'wrap_exception'
op|','
nl|'\n'
DECL|variable|get_notifier
name|'get_notifier'
op|'='
name|'get_notifier'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'migration'"
op|')'
newline|'\n'
DECL|function|errors_out_migration
name|'def'
name|'errors_out_migration'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to error out migration on failure."""'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'wrapped_func'
op|'='
name|'safe_utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
name|'keyed_args'
op|'='
name|'inspect'
op|'.'
name|'getcallargs'
op|'('
name|'wrapped_func'
op|','
name|'self'
op|','
name|'context'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'migration'
op|'='
name|'keyed_args'
op|'['
string|"'migration'"
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(rajesht): If InstanceNotFound error is thrown from'
nl|'\n'
comment|'# decorated function, migration status should be set to'
nl|'\n'
comment|"# 'error', without checking current migration status."
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'ex'
op|','
name|'exception'
op|'.'
name|'InstanceNotFound'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'status'
op|'='
name|'migration'
op|'.'
name|'status'
newline|'\n'
name|'if'
name|'status'
name|'not'
name|'in'
op|'['
string|"'migrating'"
op|','
string|"'post-migrating'"
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'migration'
op|'.'
name|'status'
op|'='
string|"'error'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Error setting migration status '"
nl|'\n'
string|"'for instance %s.'"
op|','
nl|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'instance'"
op|')'
newline|'\n'
DECL|function|reverts_task_state
name|'def'
name|'reverts_task_state'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to revert task_state on failure."""'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# Note(maoy): unexpected task state means the current'
nl|'\n'
comment|'# task is preempted. Do not clear task state in this'
nl|'\n'
comment|'# case.'
nl|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Task possibly preempted: %s"'
op|')'
op|','
nl|'\n'
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'wrapped_func'
op|'='
name|'safe_utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
name|'keyed_args'
op|'='
name|'inspect'
op|'.'
name|'getcallargs'
op|'('
name|'wrapped_func'
op|','
name|'self'
op|','
name|'context'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|"# NOTE(mriedem): 'instance' must be in keyed_args because we"
nl|'\n'
comment|"# have utils.expects_func_args('instance') decorating this"
nl|'\n'
comment|'# method.'
nl|'\n'
name|'instance'
op|'='
name|'keyed_args'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# We might delete an instance that failed to build shortly'
nl|'\n'
comment|'# after it errored out this is an expected case and we'
nl|'\n'
comment|'# should not trace on it.'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Failed to revert task state for instance. "'
nl|'\n'
string|'"Error: %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'msg'
op|','
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'instance'"
op|')'
newline|'\n'
DECL|function|wrap_instance_fault
name|'def'
name|'wrap_instance_fault'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method to catch exceptions related to instances.\n\n    This decorator wraps a method to catch any exceptions having to do with\n    an instance that may get thrown. It then logs an instance fault in the db.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|"# NOTE(gtt): If argument 'instance' is in args rather than kwargs,"
nl|'\n'
comment|'# we will get a KeyError exception which will cover up the real'
nl|'\n'
comment|'# exception. So, we update kwargs with the values from args first.'
nl|'\n'
comment|"# then, we can get 'instance' from kwargs easily."
nl|'\n'
indent|'            '
name|'kwargs'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'zip'
op|'('
name|'function'
op|'.'
name|'__code__'
op|'.'
name|'co_varnames'
op|'['
number|'2'
op|':'
op|']'
op|','
name|'args'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|','
name|'e'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'instance'"
op|')'
newline|'\n'
DECL|function|wrap_instance_event
name|'def'
name|'wrap_instance_event'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method to log the event taken on the instance, and result.\n\n    This decorator wraps a method to log the start and result of an event, as\n    part of an action taken on an instance.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'wrapped_func'
op|'='
name|'safe_utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
name|'keyed_args'
op|'='
name|'inspect'
op|'.'
name|'getcallargs'
op|'('
name|'wrapped_func'
op|','
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'keyed_args'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'event_name'
op|'='
string|"'compute_{0}'"
op|'.'
name|'format'
op|'('
name|'function'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'with'
name|'compute_utils'
op|'.'
name|'EventReporter'
op|'('
name|'context'
op|','
name|'event_name'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'image_id'"
op|','
string|"'instance'"
op|')'
newline|'\n'
DECL|function|delete_image_on_error
name|'def'
name|'delete_image_on_error'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used for snapshot related method to ensure the image created in\n    compute.api is deleted when an error occurs.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Cleaning up image %s"'
op|','
name|'image_id'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'True'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'image_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Error while trying to clean up "'
nl|'\n'
string|'"image %s"'
op|')'
op|','
name|'image_id'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(danms): Remove me after Icehouse'
nl|'\n'
comment|'# NOTE(mikal): if the method being decorated has more than one decorator, then'
nl|'\n'
comment|'# put this one first. Otherwise the various exception handling decorators do'
nl|'\n'
comment|'# not function correctly.'
nl|'\n'
DECL|function|object_compat
dedent|''
name|'def'
name|'object_compat'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a method that expects a new-world instance\n\n    This provides compatibility for callers passing old-style dict\n    instances.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
DECL|function|_load_instance
indent|'        '
name|'def'
name|'_load_instance'
op|'('
name|'instance_or_dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'instance_or_dict'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
comment|'# try to get metadata and system_metadata for most cases but'
nl|'\n'
comment|'# only attempt to load those if the db instance already has'
nl|'\n'
comment|'# those fields joined'
nl|'\n'
indent|'                '
name|'metas'
op|'='
op|'['
name|'meta'
name|'for'
name|'meta'
name|'in'
op|'('
string|"'metadata'"
op|','
string|"'system_metadata'"
op|')'
nl|'\n'
name|'if'
name|'meta'
name|'in'
name|'instance_or_dict'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'instance_or_dict'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'metas'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
dedent|''
name|'return'
name|'instance_or_dict'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|'='
name|'_load_instance'
op|'('
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
op|'('
name|'_load_instance'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|')'
op|','
op|')'
op|'+'
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'migration'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'migration'"
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'migration'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|"'migration'"
op|']'
op|'='
name|'migration'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceEvents
dedent|''
name|'class'
name|'InstanceEvents'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_events'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_lock_name
name|'def'
name|'_lock_name'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'events'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_for_instance_event
dedent|''
name|'def'
name|'prepare_for_instance_event'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'event_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prepare to receive an event for an instance.\n\n        This will register an event for the given instance that we will\n        wait on later. This should be called before initiating whatever\n        action will trigger the event. The resulting eventlet.event.Event\n        object should be wait()\'d on to ensure completion.\n\n        :param instance: the instance for which the event will be generated\n        :param event_name: the name of the event we\'re expecting\n        :returns: an event object that should be wait()\'d on\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_events'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# NOTE(danms): We really should have a more specific error'
nl|'\n'
comment|'# here, but this is what we use for our default error case'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|"'In shutdown, no new events '"
nl|'\n'
string|"'can be scheduled'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'self'
op|'.'
name|'_lock_name'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
DECL|function|_create_or_get_event
name|'def'
name|'_create_or_get_event'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_events'
op|'='
name|'self'
op|'.'
name|'_events'
op|'.'
name|'setdefault'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'instance_events'
op|'.'
name|'setdefault'
op|'('
name|'event_name'
op|','
nl|'\n'
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Preparing to wait for external event %(event)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event_name'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'_create_or_get_event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|pop_instance_event
dedent|''
name|'def'
name|'pop_instance_event'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a pending event from the wait list.\n\n        This will remove a pending event from the wait list so that it\n        can be used to signal the waiters to wake up.\n\n        :param instance: the instance for which the event was generated\n        :param event: the nova.objects.external_event.InstanceExternalEvent\n                      that describes the event\n        :returns: the eventlet.event.Event object on which the waiters\n                  are blocked\n        """'
newline|'\n'
name|'no_events_sentinel'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'no_matching_event_sentinel'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'self'
op|'.'
name|'_lock_name'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
DECL|function|_pop_event
name|'def'
name|'_pop_event'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_events'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Unexpected attempt to pop events during shutdown'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'no_events_sentinel'
newline|'\n'
dedent|''
name|'events'
op|'='
name|'self'
op|'.'
name|'_events'
op|'.'
name|'get'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'events'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'no_events_sentinel'
newline|'\n'
dedent|''
name|'_event'
op|'='
name|'events'
op|'.'
name|'pop'
op|'('
name|'event'
op|'.'
name|'key'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'events'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'_events'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'_event'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'no_matching_event_sentinel'
newline|'\n'
dedent|''
name|'return'
name|'_event'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
name|'_pop_event'
op|'('
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'no_events_sentinel'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'No waiting events found dispatching %(event)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event'
op|'.'
name|'key'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'elif'
name|'result'
name|'is'
name|'no_matching_event_sentinel'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'No event matching %(event)s in %(events)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event'
op|'.'
name|'key'
op|','
nl|'\n'
string|"'events'"
op|':'
name|'self'
op|'.'
name|'_events'
op|'.'
name|'get'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'keys'
op|'('
op|')'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|clear_events_for_instance
dedent|''
dedent|''
name|'def'
name|'clear_events_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all pending events for an instance.\n\n        This will remove all events currently pending for an instance\n        and return them (indexed by event name).\n\n        :param instance: the instance for which events should be purged\n        :returns: a dictionary of {event_name: eventlet.event.Event}\n        """'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'self'
op|'.'
name|'_lock_name'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
DECL|function|_clear_events
name|'def'
name|'_clear_events'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_events'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Unexpected attempt to clear events during shutdown'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_events'
op|'.'
name|'pop'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_clear_events'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel_all_events
dedent|''
name|'def'
name|'cancel_all_events'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'our_events'
op|'='
name|'self'
op|'.'
name|'_events'
newline|'\n'
comment|'# NOTE(danms): Block new events'
nl|'\n'
name|'self'
op|'.'
name|'_events'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'instance_uuid'
op|','
name|'events'
name|'in'
name|'our_events'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'event_name'
op|','
name|'eventlet_event'
name|'in'
name|'events'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Canceling in-flight event %(event)s for '"
nl|'\n'
string|"'instance %(instance_uuid)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event_name'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
op|')'
newline|'\n'
name|'name'
op|','
name|'tag'
op|'='
name|'event_name'
op|'.'
name|'rsplit'
op|'('
string|"'-'"
op|','
number|'1'
op|')'
newline|'\n'
name|'event'
op|'='
name|'objects'
op|'.'
name|'InstanceExternalEvent'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|','
name|'status'
op|'='
string|"'failed'"
op|','
nl|'\n'
name|'tag'
op|'='
name|'tag'
op|','
name|'data'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'eventlet_event'
op|'.'
name|'send'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeVirtAPI
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ComputeVirtAPI'
op|'('
name|'virtapi'
op|'.'
name|'VirtAPI'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeVirtAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_compute'
op|'='
name|'compute'
newline|'\n'
nl|'\n'
DECL|member|provider_fw_rule_get_all
dedent|''
name|'def'
name|'provider_fw_rule_get_all'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'conductor_api'
op|'.'
name|'provider_fw_rule_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_default_error_callback
dedent|''
name|'def'
name|'_default_error_callback'
op|'('
name|'self'
op|','
name|'event_name'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'Instance event failed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|wait_for_instance_event
name|'def'
name|'wait_for_instance_event'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'event_names'
op|','
name|'deadline'
op|'='
number|'300'
op|','
nl|'\n'
name|'error_callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Plan to wait for some events, run some code, then wait.\n\n        This context manager will first create plans to wait for the\n        provided event_names, yield, and then wait for all the scheduled\n        events to complete.\n\n        Note that this uses an eventlet.timeout.Timeout to bound the\n        operation, so callers should be prepared to catch that\n        failure and handle that situation appropriately.\n\n        If the event is not received by the specified timeout deadline,\n        eventlet.timeout.Timeout is raised.\n\n        If the event is received but did not have a \'completed\'\n        status, a NovaException is raised.  If an error_callback is\n        provided, instead of raising an exception as detailed above\n        for the failure case, the callback will be called with the\n        event_name and instance, and can return True to continue\n        waiting for the rest of the events, False to stop processing,\n        or raise an exception which will bubble up to the waiter.\n\n        :param instance: The instance for which an event is expected\n        :param event_names: A list of event names. Each element can be a\n                            string event name or tuple of strings to\n                            indicate (name, tag).\n        :param deadline: Maximum number of seconds we should wait for all\n                         of the specified events to arrive.\n        :param error_callback: A function to be called if an event arrives\n\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'error_callback'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'error_callback'
op|'='
name|'self'
op|'.'
name|'_default_error_callback'
newline|'\n'
dedent|''
name|'events'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'event_name'
name|'in'
name|'event_names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'event_name'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'tag'
op|'='
name|'event_name'
newline|'\n'
name|'event_name'
op|'='
name|'objects'
op|'.'
name|'InstanceExternalEvent'
op|'.'
name|'make_key'
op|'('
nl|'\n'
name|'name'
op|','
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'['
name|'event_name'
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_compute'
op|'.'
name|'instance_events'
op|'.'
name|'prepare_for_instance_event'
op|'('
nl|'\n'
name|'instance'
op|','
name|'event_name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
op|':'
newline|'\n'
indent|'                '
name|'error_callback'
op|'('
name|'event_name'
op|','
name|'instance'
op|')'
newline|'\n'
comment|"# NOTE(danms): Don't wait for any of the events. They"
nl|'\n'
comment|'# should all be canceled and fired immediately below,'
nl|'\n'
comment|"# but don't stick around if not."
nl|'\n'
name|'deadline'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'yield'
newline|'\n'
name|'with'
name|'eventlet'
op|'.'
name|'timeout'
op|'.'
name|'Timeout'
op|'('
name|'deadline'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'event_name'
op|','
name|'event'
name|'in'
name|'events'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'actual_event'
op|'='
name|'event'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'actual_event'
op|'.'
name|'status'
op|'=='
string|"'completed'"
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'decision'
op|'='
name|'error_callback'
op|'('
name|'event_name'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'decision'
name|'is'
name|'False'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeManager
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ComputeManager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages the running instances from creation to destruction."""'
newline|'\n'
nl|'\n'
DECL|variable|target
name|'target'
op|'='
name|'messaging'
op|'.'
name|'Target'
op|'('
name|'version'
op|'='
string|"'4.7'"
op|')'
newline|'\n'
nl|'\n'
comment|'# How long to wait in seconds before re-issuing a shutdown'
nl|'\n'
comment|'# signal to an instance during power off.  The overall'
nl|'\n'
comment|'# time to wait is set by CONF.shutdown_timeout.'
nl|'\n'
DECL|variable|SHUTDOWN_RETRY_INTERVAL
name|'SHUTDOWN_RETRY_INTERVAL'
op|'='
number|'10'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'compute_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load configuration options and connect to the hypervisor."""'
newline|'\n'
name|'self'
op|'.'
name|'virtapi'
op|'='
name|'ComputeVirtAPI'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_api'
op|'='
name|'image'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_last_host_check'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_bw_usage_supported'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_last_bw_usage_cell_update'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'='
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_task_api'
op|'='
name|'conductor'
op|'.'
name|'ComputeTaskAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'is_neutron_security_groups'
op|'='
op|'('
nl|'\n'
name|'openstack_driver'
op|'.'
name|'is_neutron_security_groups'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'='
name|'consoleauth'
op|'.'
name|'rpcapi'
op|'.'
name|'ConsoleAuthAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_client'
op|'='
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'instance_events'
op|'='
name|'InstanceEvents'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sync_power_pool'
op|'='
name|'eventlet'
op|'.'
name|'GreenPool'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_syncs_in_progress'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'send_instance_updates'
op|'='
name|'CONF'
op|'.'
name|'scheduler_tracks_instance_changes'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'max_concurrent_builds'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_build_semaphore'
op|'='
name|'eventlet'
op|'.'
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'max_concurrent_builds'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_build_semaphore'
op|'='
name|'compute_utils'
op|'.'
name|'UnlimitedSemaphore'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'max'
op|'('
name|'CONF'
op|'.'
name|'max_concurrent_live_migrations'
op|','
number|'0'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_live_migration_semaphore'
op|'='
name|'eventlet'
op|'.'
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'max_concurrent_live_migrations'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_live_migration_semaphore'
op|'='
name|'compute_utils'
op|'.'
name|'UnlimitedSemaphore'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'ComputeManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|'"compute"'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(russellb) Load the driver last.  It may call back into the'
nl|'\n'
comment|'# compute manager via the virtapi, so we want it to be fully'
nl|'\n'
comment|'# initialized before that happens.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
op|'.'
name|'load_compute_driver'
op|'('
name|'self'
op|'.'
name|'virtapi'
op|','
name|'compute_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'use_legacy_block_device_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'need_legacy_block_device_info'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Reloading compute RPC API'"
op|')'
op|')'
newline|'\n'
name|'compute_rpcapi'
op|'.'
name|'LAST_VERSION'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_resource_tracker
dedent|''
name|'def'
name|'_get_resource_tracker'
op|'('
name|'self'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'.'
name|'get'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rt'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"%s is not a valid node managed by this "'
nl|'\n'
string|'"compute host."'
op|')'
op|'%'
name|'nodename'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'rt'
op|'='
name|'resource_tracker'
op|'.'
name|'ResourceTracker'
op|'('
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
name|'nodename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'['
name|'nodename'
op|']'
op|'='
name|'rt'
newline|'\n'
dedent|''
name|'return'
name|'rt'
newline|'\n'
nl|'\n'
DECL|member|_update_resource_tracker
dedent|''
name|'def'
name|'_update_resource_tracker'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Let the resource tracker know that an instance has changed state."""'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'instance'
op|'.'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'update_usage'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_update
dedent|''
dedent|''
name|'def'
name|'_instance_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance in the database using kwargs as value."""'
newline|'\n'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'instance'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_resource_tracker'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_nil_out_instance_obj_host_and_node
dedent|''
name|'def'
name|'_nil_out_instance_obj_host_and_node'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(jwcroppe): We don't do instance.save() here for performance"
nl|'\n'
comment|'# reasons; a call to this is expected to be immediately followed by'
nl|'\n'
comment|'# another call that does instance.save(), thus avoiding two writes'
nl|'\n'
comment|'# to the database layer.'
nl|'\n'
indent|'        '
name|'instance'
op|'.'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'node'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_set_instance_obj_error_state
dedent|''
name|'def'
name|'_set_instance_obj_error_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_task_state'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
newline|'\n'
name|'if'
name|'clean_task_state'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Instance has been destroyed from under us while '"
nl|'\n'
string|"'trying to set it to ERROR'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instances_on_driver
dedent|''
dedent|''
name|'def'
name|'_get_instances_on_driver'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of instance records for the instances found\n        on the hypervisor which satisfy the specified filters. If filters=None\n        return a list of instance records for all the instances found on the\n        hypervisor.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'driver_uuids'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'driver_uuids'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# Short circuit, don't waste a DB call"
nl|'\n'
indent|'                '
name|'return'
name|'objects'
op|'.'
name|'InstanceList'
op|'('
op|')'
newline|'\n'
dedent|''
name|'filters'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'driver_uuids'
newline|'\n'
name|'local_instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'local_instances'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|"# The driver doesn't support uuids listing, so we'll have"
nl|'\n'
comment|'# to brute force.'
nl|'\n'
dedent|''
name|'driver_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'name_map'
op|'='
op|'{'
name|'instance'
op|'.'
name|'name'
op|':'
name|'instance'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|'}'
newline|'\n'
name|'local_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'driver_instance'
name|'in'
name|'driver_instances'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'name_map'
op|'.'
name|'get'
op|'('
name|'driver_instance'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'local_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'local_instances'
newline|'\n'
nl|'\n'
DECL|member|_destroy_evacuated_instances
dedent|''
name|'def'
name|'_destroy_evacuated_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys evacuated instances.\n\n        While nova-compute was down, the instances running on it could be\n        evacuated to another host. Check that the instances reported\n        by the driver are still associated with this host.  If they are\n        not, destroy them, with the exception of instances which are in\n        the MIGRATING, RESIZE_MIGRATING, RESIZE_MIGRATED, RESIZE_FINISH\n        task state or RESIZED vm state.\n        """'
newline|'\n'
name|'filters'
op|'='
op|'{'
nl|'\n'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'status'"
op|':'
op|'['
string|"'accepted'"
op|','
string|"'done'"
op|']'
op|','
nl|'\n'
string|"'migration_type'"
op|':'
string|"'evacuation'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'evacuations'
op|'='
name|'objects'
op|'.'
name|'MigrationList'
op|'.'
name|'get_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'evacuations'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'evacuations'
op|'='
op|'{'
name|'mig'
op|'.'
name|'instance_uuid'
op|':'
name|'mig'
name|'for'
name|'mig'
name|'in'
name|'evacuations'
op|'}'
newline|'\n'
nl|'\n'
name|'filters'
op|'='
op|'{'
string|"'deleted'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'local_instances'
op|'='
name|'self'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
name|'evacuated'
op|'='
op|'['
name|'inst'
name|'for'
name|'inst'
name|'in'
name|'local_instances'
nl|'\n'
name|'if'
name|'inst'
op|'.'
name|'uuid'
name|'in'
name|'evacuations'
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'evacuated'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'evacuations'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Deleting instance as it has been evacuated from '"
nl|'\n'
string|"'this host'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'bdi'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'destroy_disks'
op|'='
name|'not'
op|'('
name|'self'
op|'.'
name|'_is_instance_storage_shared'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'bdi'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Instance has been marked deleted already, '"
nl|'\n'
string|"'removing it from the hypervisor.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# always destroy disks if the instance was deleted'
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'bdi'
op|','
name|'destroy_disks'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'completed'"
newline|'\n'
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_instance_storage_shared
dedent|''
dedent|''
name|'def'
name|'_is_instance_storage_shared'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shared_storage'
op|'='
name|'True'
newline|'\n'
name|'data'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_instance_shared_storage_local'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'                '
name|'shared_storage'
op|'='
op|'('
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
nl|'\n'
name|'check_instance_shared_storage'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'data'
op|','
name|'host'
op|'='
name|'host'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'instance shared storage check, '"
nl|'\n'
string|"'assuming it\\'s not on shared storage'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'shared_storage'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to check if instance shared'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'data'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_instance_shared_storage_cleanup'
op|'('
name|'context'
op|','
nl|'\n'
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'shared_storage'
newline|'\n'
nl|'\n'
DECL|member|_complete_partial_deletion
dedent|''
name|'def'
name|'_complete_partial_deletion'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Complete deletion for instances in DELETED status but not marked as\n        deleted in the DB\n        """'
newline|'\n'
name|'system_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'('
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'project_id'
op|','
name|'user_id'
op|'='
name|'objects'
op|'.'
name|'quotas'
op|'.'
name|'ids_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'reserve'
op|'('
name|'project_id'
op|'='
name|'project_id'
op|','
name|'user_id'
op|'='
name|'user_id'
op|','
name|'instances'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
name|'cores'
op|'='
op|'-'
name|'instance'
op|'.'
name|'vcpus'
op|','
name|'ram'
op|'='
op|'-'
name|'instance'
op|'.'
name|'memory_mb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_complete_deletion'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|','
nl|'\n'
name|'quotas'
op|','
nl|'\n'
name|'system_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_complete_deletion
dedent|''
name|'def'
name|'_complete_deletion'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
nl|'\n'
name|'quotas'
op|','
name|'system_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'quotas'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure block device mappings are not leaked'
nl|'\n'
dedent|''
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"delete.end"'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'system_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_clean_instance_console_tokens'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_reservations
dedent|''
name|'def'
name|'_create_reservations'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'project_id'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vcpus'
op|'='
name|'instance'
op|'.'
name|'vcpus'
newline|'\n'
name|'mem_mb'
op|'='
name|'instance'
op|'.'
name|'memory_mb'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'('
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'reserve'
op|'('
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|','
nl|'\n'
name|'instances'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
name|'cores'
op|'='
op|'-'
name|'vcpus'
op|','
nl|'\n'
name|'ram'
op|'='
op|'-'
name|'mem_mb'
op|')'
newline|'\n'
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|_init_instance
dedent|''
name|'def'
name|'_init_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Initialize this instance during service init.'''"
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): If the instance appears to not be owned by this'
nl|'\n'
comment|'# host, it may have been evacuated away, but skipped by the'
nl|'\n'
comment|'# evacuation cleanup code due to configuration. Thus, if that'
nl|'\n'
comment|"# is a possibility, don't touch the instance in any way, but"
nl|'\n'
comment|'# log the concern. This will help avoid potential issues on'
nl|'\n'
comment|'# startup due to misconfiguration.'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'host'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Instance %(uuid)s appears to not be owned '"
nl|'\n'
string|"'by this host, but by %(host)s. Startup '"
nl|'\n'
string|"'processing is being skipped.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'instance'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# Instances that are shut down, or in an error state can not be'
nl|'\n'
comment|'# initialized and are not attempted to be recovered. The exception'
nl|'\n'
comment|'# to this are instances that are in RESIZE_MIGRATING or DELETING,'
nl|'\n'
comment|'# which are dealt with further down.'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
name|'or'
nl|'\n'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'ERROR'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
name|'not'
name|'in'
nl|'\n'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance is in %s state."'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'DELETED'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_complete_partial_deletion'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# we don't want that an exception blocks the init_host"
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Failed to complete a deletion'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'BUILDING'
name|'or'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'SCHEDULING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'NETWORKING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SPAWNING'
op|']'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(dave-mcnally) compute stopped before instance was fully'
nl|'\n'
comment|'# spawned so set to ERROR state. This is safe to do as the state'
nl|'\n'
comment|'# may be set by the api but the host is not so if we get here the'
nl|'\n'
comment|'# instance has already been scheduled to this particular host.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance failed to spawn correctly, "'
nl|'\n'
string|'"setting to ERROR state"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance'
op|'.'
name|'vm_state'
name|'in'
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
op|']'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(jichenjc) compute stopped before instance was fully'
nl|'\n'
comment|'# spawned so set to ERROR state. This is consistent to BUILD'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance failed to rebuild correctly, "'
nl|'\n'
string|'"setting to ERROR state"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'ERROR'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT_PENDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance in transitional state %s at start-up "'
nl|'\n'
string|'"clearing task state"'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_post_interrupted_snapshot_cleanup'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# we don't want that an exception blocks the init_host"
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Failed to cleanup snapshot.'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'ERROR'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance in transitional state %s at start-up "'
nl|'\n'
string|'"clearing task state"'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'DELETING'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Service started deleting the instance during '"
nl|'\n'
string|"'the previous run, but did not finish. Restarting'"
nl|'\n'
string|"' the deletion now.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'obj_load_attr'
op|'('
string|"'metadata'"
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'obj_load_attr'
op|'('
string|"'system_metadata'"
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'project_id'
op|','
name|'user_id'
op|'='
name|'objects'
op|'.'
name|'quotas'
op|'.'
name|'ids_from_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'quotas'
op|'='
name|'self'
op|'.'
name|'_create_reservations'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'project_id'
op|','
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'quotas'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# we don't want that an exception blocks the init_host"
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Failed to complete a deletion'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'try_reboot'
op|','
name|'reboot_type'
op|'='
name|'self'
op|'.'
name|'_retry_reboot'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'try_reboot'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance in transitional state (%(task_state)s) at "'
nl|'\n'
string|'"start-up and power state is (%(power_state)s), "'
nl|'\n'
string|'"triggering reboot"'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'current_power_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): if the instance was doing a soft reboot that got as'
nl|'\n'
comment|'# far as shutting down the instance but not as far as starting it'
nl|'\n'
comment|"# again, then we've just become a hard reboot. That means the"
nl|'\n'
comment|"# task state for the instance needs to change so that we're in one"
nl|'\n'
comment|'# of the expected task states for a hard reboot.'
nl|'\n'
name|'soft_types'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOTING'
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'task_state'
name|'in'
name|'soft_types'
name|'and'
name|'reboot_type'
op|'=='
string|"'HARD'"
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'reboot_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'reboot_type'
op|'='
name|'reboot_type'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
op|'('
name|'current_power_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED_HARD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'PAUSING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'UNPAUSING'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance in transitional state "'
nl|'\n'
string|'"(%(task_state)s) at start-up and power state "'
nl|'\n'
string|'"is (%(power_state)s), clearing task state"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'current_power_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'current_power_state'
op|'=='
name|'power_state'
op|'.'
name|'PAUSED'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance in transitional state "'
nl|'\n'
string|'"(%(task_state)s) at start-up and power state "'
nl|'\n'
string|'"is (%(power_state)s), clearing task state "'
nl|'\n'
string|'"and unpausing the instance"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'current_power_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'unpause_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|"# Some virt driver didn't support pause and unpause"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to unpause instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance in transitional state %s at start-up "'
nl|'\n'
string|'"retrying stop request"'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stop_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# we don't want that an exception blocks the init_host"
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Failed to stop instance'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'POWERING_ON'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance in transitional state %s at start-up "'
nl|'\n'
string|'"retrying start request"'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# we don't want that an exception blocks the init_host"
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Failed to start instance'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'net_info'
op|'='
name|'compute_utils'
op|'.'
name|'get_nw_info_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'net_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VirtualInterfacePlugException'
op|':'
newline|'\n'
comment|"# we don't want an exception to block the init_host"
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Vifs plug failed"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|':'
newline|'\n'
comment|'# We crashed during resize/migration, so roll back for safety'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|"# NOTE(mriedem): check old_vm_state for STOPPED here, if it's"
nl|'\n'
comment|'# not in system_metadata we default to True for backwards'
nl|'\n'
comment|'# compatibility'
nl|'\n'
indent|'                '
name|'power_on'
op|'='
op|'('
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'old_vm_state'"
op|')'
op|'!='
nl|'\n'
name|'vm_states'
op|'.'
name|'STOPPED'
op|')'
newline|'\n'
nl|'\n'
name|'block_dev_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_revert_migration'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'net_info'
op|','
name|'block_dev_info'
op|','
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to revert crashed migration'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Instance found in migrating state during '"
nl|'\n'
string|"'startup. Resetting task_state'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'MIGRATING'
op|':'
newline|'\n'
comment|'# Live migration did not complete, but instance is on this'
nl|'\n'
comment|'# host, so reset the state.'
nl|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'MIGRATING'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'db_state'
op|'='
name|'instance'
op|'.'
name|'power_state'
newline|'\n'
name|'drv_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'expect_running'
op|'='
op|'('
name|'db_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
name|'and'
nl|'\n'
name|'drv_state'
op|'!='
name|'db_state'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Current state is %(drv_state)s, state in DB is '"
nl|'\n'
string|"'%(db_state)s.'"
op|','
nl|'\n'
op|'{'
string|"'drv_state'"
op|':'
name|'drv_state'
op|','
string|"'db_state'"
op|':'
name|'db_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expect_running'
name|'and'
name|'CONF'
op|'.'
name|'resume_guests_state_on_host_boot'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Rebooting instance after nova-compute restart.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume_state_on_host_boot'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'net_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'resume guests'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# NOTE(vish): The instance failed to resume, so we set the'
nl|'\n'
comment|'#             instance to error and attempt to continue.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Failed to resume instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'drv_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
comment|'# VMwareAPI drivers will raise an exception'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'net_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'firewall rules'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_retry_reboot
dedent|''
dedent|''
dedent|''
name|'def'
name|'_retry_reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'current_task_state'
op|'='
name|'instance'
op|'.'
name|'task_state'
newline|'\n'
name|'retry_reboot'
op|'='
name|'False'
newline|'\n'
name|'reboot_type'
op|'='
name|'compute_utils'
op|'.'
name|'get_reboot_type'
op|'('
name|'current_task_state'
op|','
nl|'\n'
name|'current_power_state'
op|')'
newline|'\n'
nl|'\n'
name|'pending_soft'
op|'='
op|'('
name|'current_task_state'
op|'=='
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
name|'and'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
name|'in'
name|'vm_states'
op|'.'
name|'ALLOW_SOFT_REBOOT'
op|')'
newline|'\n'
name|'pending_hard'
op|'='
op|'('
name|'current_task_state'
op|'=='
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
nl|'\n'
name|'and'
name|'instance'
op|'.'
name|'vm_state'
name|'in'
name|'vm_states'
op|'.'
name|'ALLOW_HARD_REBOOT'
op|')'
newline|'\n'
name|'started_not_running'
op|'='
op|'('
name|'current_task_state'
name|'in'
nl|'\n'
op|'['
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED_HARD'
op|']'
name|'and'
nl|'\n'
name|'current_power_state'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'pending_soft'
name|'or'
name|'pending_hard'
name|'or'
name|'started_not_running'
op|':'
newline|'\n'
indent|'            '
name|'retry_reboot'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'retry_reboot'
op|','
name|'reboot_type'
newline|'\n'
nl|'\n'
DECL|member|handle_lifecycle_event
dedent|''
name|'def'
name|'handle_lifecycle_event'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"VM %(state)s (Lifecycle Event)"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'state'"
op|':'
name|'event'
op|'.'
name|'get_name'
op|'('
op|')'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'event'
op|'.'
name|'get_instance_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'event'
op|'.'
name|'get_instance_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'vm_power_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'SHUTDOWN'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_STARTED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_PAUSED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'PAUSED'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_RESUMED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
dedent|''
name|'elif'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|'=='
name|'virtevent'
op|'.'
name|'EVENT_LIFECYCLE_SUSPENDED'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'SUSPENDED'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Unexpected power state %d"'
op|')'
op|','
nl|'\n'
name|'event'
op|'.'
name|'get_transition'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Note(lpetrut): The event may be delayed, thus not reflecting'
nl|'\n'
comment|'# the current instance power state. In that case, ignore the event.'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'current_power_state'
op|'=='
name|'vm_power_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Synchronizing instance power state after lifecycle '"
nl|'\n'
string|'\'event "%(event)s"; current vm_state: %(vm_state)s, \''
nl|'\n'
string|"'current task_state: %(task_state)s, current DB '"
nl|'\n'
string|"'power_state: %(db_power_state)s, VM power_state: '"
nl|'\n'
string|"'%(vm_power_state)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event'
op|'.'
name|'get_name'
op|'('
op|')'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'instance'
op|'.'
name|'vm_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'db_power_state'"
op|':'
name|'instance'
op|'.'
name|'power_state'
op|','
nl|'\n'
string|"'vm_power_state'"
op|':'
name|'vm_power_state'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_power_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_events
dedent|''
dedent|''
name|'def'
name|'handle_events'
op|'('
name|'self'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'event'
op|','
name|'virtevent'
op|'.'
name|'LifecycleEvent'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'handle_lifecycle_event'
op|'('
name|'event'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Event %s arrived for non-existent instance. The "'
nl|'\n'
string|'"instance was probably deleted."'
op|','
name|'event'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Ignoring event %s"'
op|','
name|'event'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_virt_events
dedent|''
dedent|''
name|'def'
name|'init_virt_events'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'workarounds'
op|'.'
name|'handle_virt_lifecycle_events'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'register_event_listener'
op|'('
name|'self'
op|'.'
name|'handle_events'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(mriedem): If the _sync_power_states periodic task is'
nl|'\n'
comment|'# disabled we should emit a warning in the logs.'
nl|'\n'
indent|'            '
name|'if'
name|'CONF'
op|'.'
name|'sync_power_state_interval'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Instance lifecycle events from the compute '"
nl|'\n'
string|"'driver have been disabled. Note that lifecycle '"
nl|'\n'
string|"'changes to an instance outside of the compute '"
nl|'\n'
string|"'service will not be synchronized '"
nl|'\n'
string|"'automatically since the _sync_power_states '"
nl|'\n'
string|"'periodic task is also disabled.'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Instance lifecycle events from the compute '"
nl|'\n'
string|"'driver have been disabled. Note that lifecycle '"
nl|'\n'
string|"'changes to an instance outside of the compute '"
nl|'\n'
string|"'service will only be synchronized by the '"
nl|'\n'
string|"'_sync_power_states periodic task.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|init_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialization for a standalone compute service."""'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'context'
op|'='
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'info_cache'"
op|','
string|"'metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'defer_iptables_apply'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'filter_defer_apply_on'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'init_virt_events'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# checking that instance was not already evacuated to other host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_init_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'CONF'
op|'.'
name|'defer_iptables_apply'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'filter_defer_apply_off'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instances'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanup_host
dedent|''
dedent|''
name|'def'
name|'cleanup_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'register_event_listener'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_events'
op|'.'
name|'cancel_all_events'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'cleanup_host'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_start_hook
dedent|''
name|'def'
name|'pre_start_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""After the service is initialized, but before we fully bring\n        the service up by listening on RPC queues, make sure to update\n        our available resources (and indirectly our available nodes).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'update_available_resource'
op|'('
name|'nova'
op|'.'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_power_state
dedent|''
name|'def'
name|'_get_power_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the power state for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Checking state'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
op|'.'
name|'state'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
nl|'\n'
DECL|member|get_console_topic
dedent|''
dedent|''
name|'def'
name|'get_console_topic'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the console host for a project on this host.\n\n        Currently this is just set in the flags for each compute host.\n\n        """'
newline|'\n'
comment|'# TODO(mdragon): perhaps make this variable by console_type?'
nl|'\n'
name|'return'
string|"'%s.%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'console_topic'
op|','
name|'CONF'
op|'.'
name|'console_host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_console_pool_info
name|'def'
name|'get_console_pool_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_pool_info'
op|'('
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(hanlind): This and the virt method it calls can be removed in'
nl|'\n'
comment|'# version 5.0 of the RPC API'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|refresh_security_group_rules
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security group rules.\n\n        Passes straight through to the virtualization driver.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'object_compat'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|refresh_instance_security_rules
name|'def'
name|'refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell the virtualization driver to refresh security rules for\n        an instance.\n\n        Passes straight through to the virtualization driver.\n\n        Synchronise the call because we may still be in the middle of\n        creating the instance.\n        """'
newline|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|_sync_refresh
name|'def'
name|'_sync_refresh'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_instance_security_rules'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'security groups.'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'_sync_refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|refresh_provider_fw_rules
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This call passes straight through to the virtualization driver."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_await_block_device_map_created
dedent|''
name|'def'
name|'_await_block_device_map_created'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vol_id'
op|')'
op|':'
newline|'\n'
comment|'# TODO(yamahata): creating volume simultaneously'
nl|'\n'
comment|'#                 reduces creation time?'
nl|'\n'
comment|'# TODO(yamahata): eliminate dumb polling'
nl|'\n'
indent|'        '
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'retries'
op|'='
name|'CONF'
op|'.'
name|'block_device_allocate_retries'
newline|'\n'
name|'if'
name|'retries'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Treating negative config value (%(retries)s) for "'
nl|'\n'
string|'"\'block_device_retries\' as 0."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'retries'"
op|':'
name|'retries'
op|'}'
op|')'
newline|'\n'
comment|'# (1) treat  negative config value as 0'
nl|'\n'
comment|'# (2) the configured value is 0, one attempt should be made'
nl|'\n'
comment|'# (3) the configured value is > 0, then the total number attempts'
nl|'\n'
comment|'#      is (retries + 1)'
nl|'\n'
dedent|''
name|'attempts'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'retries'
op|'>='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'attempts'
op|'='
name|'retries'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'for'
name|'attempt'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'attempts'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'vol_id'
op|')'
newline|'\n'
name|'volume_status'
op|'='
name|'volume'
op|'['
string|"'status'"
op|']'
newline|'\n'
name|'if'
name|'volume_status'
name|'not'
name|'in'
op|'['
string|"'creating'"
op|','
string|"'downloading'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'volume_status'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'attempt'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Volume id: %(vol_id)s finished being "'
nl|'\n'
string|'"created but its status is %(vol_status)s."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'vol_id'"
op|':'
name|'vol_id'
op|','
nl|'\n'
string|"'vol_status'"
op|':'
name|'volume_status'
op|'}'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'CONF'
op|'.'
name|'block_device_allocate_retries_interval'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'VolumeNotCreated'
op|'('
name|'volume_id'
op|'='
name|'vol_id'
op|','
nl|'\n'
name|'seconds'
op|'='
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|')'
op|','
nl|'\n'
name|'attempts'
op|'='
name|'attempt'
op|','
nl|'\n'
name|'volume_status'
op|'='
name|'volume_status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_decode_files
dedent|''
name|'def'
name|'_decode_files'
op|'('
name|'self'
op|','
name|'injected_files'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Base64 decode the list of files to inject."""'
newline|'\n'
name|'if'
name|'not'
name|'injected_files'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_decode
dedent|''
name|'def'
name|'_decode'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|','
name|'contents'
op|'='
name|'f'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'decoded'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'contents'
op|')'
newline|'\n'
name|'return'
name|'path'
op|','
name|'decoded'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Base64Exception'
op|'('
name|'path'
op|'='
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'['
name|'_decode'
op|'('
name|'f'
op|')'
name|'for'
name|'f'
name|'in'
name|'injected_files'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_validate_instance_group_policy
dedent|''
name|'def'
name|'_validate_instance_group_policy'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(russellb) Instance group policy is enforced by the scheduler.'
nl|'\n'
comment|'# However, there is a race condition with the enforcement of'
nl|'\n'
comment|'# the policy.  Since more than one instance may be scheduled at the'
nl|'\n'
comment|"# same time, it's possible that more than one instance with an"
nl|'\n'
comment|"# anti-affinity policy may end up here.  It's also possible that"
nl|'\n'
comment|'# multiple instances with an affinity policy could end up on different'
nl|'\n'
comment|'# hosts.  This is a validation step to make sure that starting the'
nl|'\n'
comment|"# instance here doesn't violate the policy."
nl|'\n'
nl|'\n'
indent|'        '
name|'scheduler_hints'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'scheduler_hints'"
op|')'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'group_hint'
op|'='
name|'scheduler_hints'
op|'.'
name|'get'
op|'('
string|"'group'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'group_hint'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'group_hint'
op|')'
newline|'\n'
DECL|function|_do_validation
name|'def'
name|'_do_validation'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'group_hint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'group'
op|'='
name|'objects'
op|'.'
name|'InstanceGroup'
op|'.'
name|'get_by_hint'
op|'('
name|'context'
op|','
name|'group_hint'
op|')'
newline|'\n'
name|'if'
string|"'anti-affinity'"
name|'in'
name|'group'
op|'.'
name|'policies'
op|':'
newline|'\n'
indent|'                '
name|'group_hosts'
op|'='
name|'group'
op|'.'
name|'get_hosts'
op|'('
name|'exclude'
op|'='
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'host'
name|'in'
name|'group_hosts'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Anti-affinity instance group policy "'
nl|'\n'
string|'"was violated."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'RescheduledException'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
string|"'affinity'"
name|'in'
name|'group'
op|'.'
name|'policies'
op|':'
newline|'\n'
indent|'                '
name|'group_hosts'
op|'='
name|'group'
op|'.'
name|'get_hosts'
op|'('
name|'exclude'
op|'='
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
op|')'
newline|'\n'
name|'if'
name|'group_hosts'
name|'and'
name|'self'
op|'.'
name|'host'
name|'not'
name|'in'
name|'group_hosts'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Affinity instance group policy was violated."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'RescheduledException'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'_do_validation'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'group_hint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_log_original_error
dedent|''
name|'def'
name|'_log_original_error'
op|'('
name|'self'
op|','
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Error: %s'"
op|')'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule
dedent|''
name|'def'
name|'_reschedule'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
nl|'\n'
name|'instance'
op|','
name|'reschedule_method'
op|','
name|'method_args'
op|','
name|'task_state'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attempt to re-schedule a compute operation."""'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'retry'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'retry'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'retry'
op|':'
newline|'\n'
comment|'# no retry information, do not reschedule.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Retry info not present, will not reschedule"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'request_spec'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"No request spec, will not reschedule"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Re-scheduling %(method)s: attempt %(num)d"'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
name|'reschedule_method'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"'num'"
op|':'
name|'retry'
op|'['
string|"'num_attempts'"
op|']'
op|'}'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset the task state:'
nl|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'task_state'
op|'='
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'exc_info'
op|':'
newline|'\n'
comment|'# stringify to avoid circular ref problem in json serialization:'
nl|'\n'
indent|'            '
name|'retry'
op|'['
string|"'exc'"
op|']'
op|'='
name|'traceback'
op|'.'
name|'format_exception_only'
op|'('
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'exc_info'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reschedule_method'
op|'('
name|'context'
op|','
op|'*'
name|'method_args'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_check_instance_build_time
name|'def'
name|'_check_instance_build_time'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that instances are not stuck in build."""'
newline|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'instance_build_timeout'
newline|'\n'
name|'if'
name|'timeout'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'filters'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
nl|'\n'
name|'building_insts'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|','
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'building_insts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'.'
name|'created_at'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance build timed out. Set to error "'
nl|'\n'
string|'"state."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_instance_exists
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_instance_exists'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure an instance with the same name is not already present."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceExists'
op|'('
name|'name'
op|'='
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_network_async
dedent|''
dedent|''
name|'def'
name|'_allocate_network_async'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|','
name|'security_groups'
op|','
name|'is_vpn'
op|','
name|'dhcp_options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Method used to allocate networks in the background.\n\n        Broken out for testing.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Allocating IP information in the background."'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'retries'
op|'='
name|'CONF'
op|'.'
name|'network_allocate_retries'
newline|'\n'
name|'if'
name|'retries'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Treating negative config value (%(retries)s) for "'
nl|'\n'
string|'"\'network_allocate_retries\' as 0."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'retries'"
op|':'
name|'retries'
op|'}'
op|')'
newline|'\n'
name|'retries'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'attempts'
op|'='
name|'retries'
op|'+'
number|'1'
newline|'\n'
name|'retry_time'
op|'='
number|'1'
newline|'\n'
name|'bind_host_id'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'network_binding_host_id'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'attempt'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'attempts'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'nwinfo'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'vpn'
op|'='
name|'is_vpn'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'macs'
op|','
nl|'\n'
name|'security_groups'
op|'='
name|'security_groups'
op|','
nl|'\n'
name|'dhcp_options'
op|'='
name|'dhcp_options'
op|','
nl|'\n'
name|'bind_host_id'
op|'='
name|'bind_host_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Instance network_info: |%s|'"
op|','
name|'nwinfo'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'network_allocated'"
op|']'
op|'='
string|"'True'"
newline|'\n'
comment|'# NOTE(JoshNang) do not save the instance here, as it can cause'
nl|'\n'
comment|'# races. The caller shares a reference to instance and waits'
nl|'\n'
comment|'# for this async greenthread to finish before calling'
nl|'\n'
comment|'# instance.save().'
nl|'\n'
name|'return'
name|'nwinfo'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'log_info'
op|'='
op|'{'
string|"'attempt'"
op|':'
name|'attempt'
op|','
nl|'\n'
string|"'attempts'"
op|':'
name|'attempts'
op|'}'
newline|'\n'
name|'if'
name|'attempt'
op|'=='
name|'attempts'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Instance failed network setup '"
nl|'\n'
string|"'after %(attempts)d attempt(s)'"
op|')'
op|','
nl|'\n'
name|'log_info'
op|')'
newline|'\n'
name|'six'
op|'.'
name|'reraise'
op|'('
op|'*'
name|'exc_info'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Instance failed network setup '"
nl|'\n'
string|"'(attempt %(attempt)d of %(attempts)d)'"
op|')'
op|','
nl|'\n'
name|'log_info'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
name|'retry_time'
op|')'
newline|'\n'
name|'retry_time'
op|'*='
number|'2'
newline|'\n'
name|'if'
name|'retry_time'
op|'>'
number|'30'
op|':'
newline|'\n'
indent|'                    '
name|'retry_time'
op|'='
number|'30'
newline|'\n'
comment|'# Not reached.'
nl|'\n'
nl|'\n'
DECL|member|_build_networks_for_instance
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_build_networks_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'security_groups'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|"# If we're here from a reschedule the network may already be allocated."
nl|'\n'
indent|'        '
name|'if'
name|'strutils'
op|'.'
name|'bool_from_string'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'network_allocated'"
op|','
string|"'False'"
op|')'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(alex_xu): The network_allocated is True means the network'
nl|'\n'
comment|'# resource already allocated at previous scheduling, and the'
nl|'\n'
comment|'# network setup is cleanup at previous. After rescheduling, the'
nl|'\n'
comment|'# network resource need setup on the new host.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_instance_network_on_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'instance'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'is_neutron_security_groups'
op|':'
newline|'\n'
indent|'            '
name|'security_groups'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'macs'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'macs_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'dhcp_options'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'dhcp_options_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_allocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'macs'
op|','
name|'security_groups'
op|','
name|'dhcp_options'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
DECL|member|_allocate_network
dedent|''
name|'def'
name|'_allocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|','
name|'macs'
op|','
nl|'\n'
name|'security_groups'
op|','
name|'dhcp_options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start network allocation asynchronously.  Return an instance\n        of NetworkInfoAsyncWrapper that can be used to retrieve the\n        allocated networks when the operation has finished.\n        """'
newline|'\n'
comment|"# NOTE(comstud): Since we're allocating networks asynchronously,"
nl|'\n'
comment|"# this task state has little meaning, as we won't be in this"
nl|'\n'
comment|'# state for very long.'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'NETWORKING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_resource_tracker'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'is_vpn'
op|'='
name|'pipelib'
op|'.'
name|'is_vpn_image'
op|'('
name|'instance'
op|'.'
name|'image_ref'
op|')'
newline|'\n'
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfoAsyncWrapper'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_allocate_network_async'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'macs'
op|','
name|'security_groups'
op|','
name|'is_vpn'
op|','
nl|'\n'
name|'dhcp_options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_default_root_device_name
dedent|''
name|'def'
name|'_default_root_device_name'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'root_bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'default_root_device_name'
op|'('
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'root_bdm'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'compute_utils'
op|'.'
name|'get_next_device_name'
op|'('
name|'instance'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_default_device_names_for_instance
dedent|''
dedent|''
name|'def'
name|'_default_device_names_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
nl|'\n'
name|'root_device_name'
op|','
nl|'\n'
op|'*'
name|'block_device_lists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'default_device_names_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'root_device_name'
op|','
nl|'\n'
op|'*'
name|'block_device_lists'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'compute_utils'
op|'.'
name|'default_device_names_for_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'root_device_name'
op|','
op|'*'
name|'block_device_lists'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_device_name_for_instance
dedent|''
dedent|''
name|'def'
name|'_get_device_name_for_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'block_device_obj'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(ndipanov): Copy obj to avoid changing the original'
nl|'\n'
indent|'        '
name|'block_device_obj'
op|'='
name|'block_device_obj'
op|'.'
name|'obj_clone'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_device_name_for_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'bdms'
op|','
name|'block_device_obj'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'compute_utils'
op|'.'
name|'get_device_name_for_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'bdms'
op|','
name|'block_device_obj'
op|'.'
name|'get'
op|'('
string|'"device_name"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_default_block_device_names
dedent|''
dedent|''
name|'def'
name|'_default_block_device_names'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'block_devices'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that all the devices have the device_name set. If not,\n        provide a default name.\n\n        It also ensures that there is a root_device_name and is set to the\n        first block device in the boot sequence (boot_index=0).\n        """'
newline|'\n'
name|'root_bdm'
op|'='
name|'block_device'
op|'.'
name|'get_root_bdm'
op|'('
name|'block_devices'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'root_bdm'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Get the root_device_name from the root BDM or the instance'
nl|'\n'
dedent|''
name|'root_device_name'
op|'='
name|'None'
newline|'\n'
name|'update_root_bdm'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'if'
name|'root_bdm'
op|'.'
name|'device_name'
op|':'
newline|'\n'
indent|'            '
name|'root_device_name'
op|'='
name|'root_bdm'
op|'.'
name|'device_name'
newline|'\n'
name|'instance'
op|'.'
name|'root_device_name'
op|'='
name|'root_device_name'
newline|'\n'
dedent|''
name|'elif'
name|'instance'
op|'.'
name|'root_device_name'
op|':'
newline|'\n'
indent|'            '
name|'root_device_name'
op|'='
name|'instance'
op|'.'
name|'root_device_name'
newline|'\n'
name|'root_bdm'
op|'.'
name|'device_name'
op|'='
name|'root_device_name'
newline|'\n'
name|'update_root_bdm'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'root_device_name'
op|'='
name|'self'
op|'.'
name|'_default_root_device_name'
op|'('
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'root_device_name'
op|'='
name|'root_device_name'
newline|'\n'
name|'root_bdm'
op|'.'
name|'device_name'
op|'='
name|'root_device_name'
newline|'\n'
name|'update_root_bdm'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'update_root_bdm'
op|':'
newline|'\n'
indent|'            '
name|'root_bdm'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ephemerals'
op|'='
name|'list'
op|'('
name|'filter'
op|'('
name|'block_device'
op|'.'
name|'new_format_is_ephemeral'
op|','
nl|'\n'
name|'block_devices'
op|')'
op|')'
newline|'\n'
name|'swap'
op|'='
name|'list'
op|'('
name|'filter'
op|'('
name|'block_device'
op|'.'
name|'new_format_is_swap'
op|','
nl|'\n'
name|'block_devices'
op|')'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
name|'list'
op|'('
name|'filter'
op|'('
nl|'\n'
name|'driver_block_device'
op|'.'
name|'is_block_device_mapping'
op|','
name|'block_devices'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_default_device_names_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'root_device_name'
op|','
nl|'\n'
name|'ephemerals'
op|','
nl|'\n'
name|'swap'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_block_device_info_to_legacy
dedent|''
name|'def'
name|'_block_device_info_to_legacy'
op|'('
name|'self'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert BDI to the old format for drivers that need it."""'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'use_legacy_block_device_info'
op|':'
newline|'\n'
indent|'            '
name|'ephemerals'
op|'='
name|'driver_block_device'
op|'.'
name|'legacy_block_devices'
op|'('
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_ephemerals'
op|'('
name|'block_device_info'
op|')'
op|')'
newline|'\n'
name|'mapping'
op|'='
name|'driver_block_device'
op|'.'
name|'legacy_block_devices'
op|'('
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
name|'block_device_info'
op|')'
op|')'
newline|'\n'
name|'swap'
op|'='
name|'block_device_info'
op|'['
string|"'swap'"
op|']'
newline|'\n'
name|'if'
name|'swap'
op|':'
newline|'\n'
indent|'                '
name|'swap'
op|'='
name|'swap'
op|'.'
name|'legacy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_info'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'ephemerals'"
op|':'
name|'ephemerals'
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'swap'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'mapping'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_dev_name
dedent|''
dedent|''
name|'def'
name|'_check_dev_name'
op|'('
name|'self'
op|','
name|'bdms'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms_no_device_name'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'bdms'
name|'if'
name|'x'
op|'.'
name|'device_name'
name|'is'
name|'None'
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms_no_device_name'
op|':'
newline|'\n'
indent|'            '
name|'device_name'
op|'='
name|'self'
op|'.'
name|'_get_device_name_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|','
nl|'\n'
name|'bdm'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'device_name'"
op|':'
name|'device_name'
op|'}'
newline|'\n'
name|'bdm'
op|'.'
name|'update'
op|'('
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prep_block_device
dedent|''
dedent|''
name|'def'
name|'_prep_block_device'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
nl|'\n'
name|'do_check_attach'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up the block device for an instance with error logging."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_check_dev_name'
op|'('
name|'bdms'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'driver'
op|'.'
name|'get_block_device_info'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'mapping'
op|'='
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'driver_block_device'
op|'.'
name|'attach_block_devices'
op|'('
nl|'\n'
name|'mapping'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'volume_api'
op|','
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
name|'do_check_attach'
op|'='
name|'do_check_attach'
op|','
nl|'\n'
name|'wait_func'
op|'='
name|'self'
op|'.'
name|'_await_block_device_map_created'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_block_device_info_to_legacy'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
name|'return'
name|'block_device_info'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LW'
op|'('
string|"'Failed to create block device for instance due to '"
nl|'\n'
string|"'being over volume resource quota'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'VolumeLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Instance failed block device setup'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDM'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_instance_after_spawn
dedent|''
dedent|''
name|'def'
name|'_update_instance_after_spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'configdrive'
op|'.'
name|'update_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_scheduler_instance_info
dedent|''
name|'def'
name|'_update_scheduler_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sends an InstanceList with created or updated Instance objects to\n        the Scheduler client.\n\n        In the case of init_host, the value passed will already be an\n        InstanceList. Other calls will send individual Instance objects that\n        have been created or resized. In this case, we create an InstanceList\n        object containing that Instance.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'send_instance_updates'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'obj_instance'
op|'.'
name|'Instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'('
name|'objects'
op|'='
op|'['
name|'instance'
op|']'
op|')'
newline|'\n'
dedent|''
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_client'
op|'.'
name|'update_instance_info'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_scheduler_instance_info
dedent|''
name|'def'
name|'_delete_scheduler_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sends the uuid of the deleted Instance to the Scheduler client."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'send_instance_updates'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_client'
op|'.'
name|'delete_instance_info'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'scheduler_instance_sync_interval'
op|')'
newline|'\n'
DECL|member|_sync_scheduler_instance_info
name|'def'
name|'_sync_scheduler_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'send_instance_updates'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'uuids'
op|'='
op|'['
name|'instance'
op|'.'
name|'uuid'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_client'
op|'.'
name|'sync_instance_info'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'uuids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_notify_about_instance_usage
dedent|''
name|'def'
name|'_notify_about_instance_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
name|'system_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'None'
op|','
name|'fault'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'compute_utils'
op|'.'
name|'notify_about_instance_usage'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'system_metadata'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|','
name|'fault'
op|'='
name|'fault'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deallocate_network
dedent|''
name|'def'
name|'_deallocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Deallocating network for instance'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'timeutils'
op|'.'
name|'StopWatch'
op|'('
op|')'
name|'as'
name|'timer'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
comment|"# nova-network does an rpc call so we're OK tracking time spent here"
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Took %0.2f seconds to deallocate network for instance.'"
op|')'
op|','
nl|'\n'
name|'timer'
op|'.'
name|'elapsed'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_block_device_info
dedent|''
name|'def'
name|'_get_instance_block_device_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'refresh_conn_info'
op|'='
name|'False'
op|','
nl|'\n'
name|'bdms'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transform block devices to the driver block_device format."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'block_device_info'
op|'='
name|'driver'
op|'.'
name|'get_block_device_info'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'refresh_conn_info'
op|':'
newline|'\n'
comment|'# if the block_device_mapping has no value in connection_info'
nl|'\n'
comment|"# (returned as None), don't include in the mapping"
nl|'\n'
indent|'            '
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|'='
op|'['
nl|'\n'
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
nl|'\n'
name|'block_device_info'
op|')'
nl|'\n'
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'connection_info'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'driver_block_device'
op|'.'
name|'refresh_conn_infos'
op|'('
nl|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
name|'block_device_info'
op|')'
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'volume_api'
op|','
name|'self'
op|'.'
name|'driver'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_block_device_info_to_legacy'
op|'('
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'block_device_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|build_and_run_instance
name|'def'
name|'build_and_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
name|'None'
op|','
name|'block_device_mapping'
op|'='
name|'None'
op|','
nl|'\n'
name|'node'
op|'='
name|'None'
op|','
name|'limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|_locked_do_build_and_run_instance
name|'def'
name|'_locked_do_build_and_run_instance'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): We grab the semaphore with the instance uuid'
nl|'\n'
comment|'# locked because we could wait in line to build this instance'
nl|'\n'
comment|'# for a while and we want to make sure that nothing else tries'
nl|'\n'
comment|'# to do anything with this instance while we wait.'
nl|'\n'
indent|'            '
name|'with'
name|'self'
op|'.'
name|'_build_semaphore'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_do_build_and_run_instance'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): We spawn here to return the RPC worker thread back to'
nl|'\n'
comment|"# the pool. Since what follows could take a really long time, we don't"
nl|'\n'
comment|'# want to tie up RPC workers.'
nl|'\n'
dedent|''
dedent|''
name|'utils'
op|'.'
name|'spawn_n'
op|'('
name|'_locked_do_build_and_run_instance'
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'admin_password'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'security_groups'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'node'
op|','
name|'limits'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'hooks'
op|'.'
name|'add_hook'
op|'('
string|"'build_instance'"
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|_do_build_and_run_instance
name|'def'
name|'_do_build_and_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'request_spec'
op|','
name|'filter_properties'
op|','
name|'admin_password'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'security_groups'
op|','
name|'block_device_mapping'
op|','
nl|'\n'
name|'node'
op|'='
name|'None'
op|','
name|'limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Starting instance...'"
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
nl|'\n'
op|'('
name|'task_states'
op|'.'
name|'SCHEDULING'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'Instance disappeared before build.'"
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'FAILED'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'FAILED'
newline|'\n'
nl|'\n'
comment|'# b64 decode the files to inject:'
nl|'\n'
dedent|''
name|'decoded_files'
op|'='
name|'self'
op|'.'
name|'_decode_files'
op|'('
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'limits'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'limits'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'No node specified, defaulting to %s'"
op|','
name|'node'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'timeutils'
op|'.'
name|'StopWatch'
op|'('
op|')'
name|'as'
name|'timer'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_build_and_run_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'decoded_files'
op|','
name|'admin_password'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'security_groups'
op|','
name|'block_device_mapping'
op|','
name|'node'
op|','
name|'limits'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Took %0.2f seconds to build instance.'"
op|')'
op|','
nl|'\n'
name|'timer'
op|'.'
name|'elapsed'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'ACTIVE'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'RescheduledException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'retry'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'retry'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'retry'
op|':'
newline|'\n'
comment|'# no retry information, do not reschedule.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Retry info not present, will not reschedule"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_allocated_networks'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'e'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|','
nl|'\n'
name|'fault_message'
op|'='
name|'e'
op|'.'
name|'kwargs'
op|'['
string|"'reason'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_nil_out_instance_obj_host_and_node'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_task_state'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'FAILED'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# This will be used for logging the exception'
nl|'\n'
name|'retry'
op|'['
string|"'exc'"
op|']'
op|'='
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# This will be used for setting the instance fault message'
nl|'\n'
name|'retry'
op|'['
string|"'exc_reason'"
op|']'
op|'='
name|'e'
op|'.'
name|'kwargs'
op|'['
string|"'reason'"
op|']'
newline|'\n'
comment|'# NOTE(comstud): Deallocate networks if the driver wants'
nl|'\n'
comment|'# us to do so.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'deallocate_networks_on_reschedule'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cleanup_allocated_networks'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# NOTE(alex_xu): Network already allocated and we don't"
nl|'\n'
comment|'# want to deallocate them before rescheduling. But we need'
nl|'\n'
comment|'# to cleanup those network resources setup on this host before'
nl|'\n'
comment|'# rescheduling.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'cleanup_instance_network_on_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_nil_out_instance_obj_host_and_node'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_task_api'
op|'.'
name|'build_instances'
op|'('
name|'context'
op|','
op|'['
name|'instance'
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'filter_properties'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'requested_networks'
op|','
name|'security_groups'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'RESCHEDULED'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'Instance disappeared during build.'"
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_allocated_networks'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'FAILED'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'BuildAbortException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_allocated_networks'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'raise_exc'
op|'='
name|'False'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'e'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_nil_out_instance_obj_host_and_node'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_task_state'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'FAILED'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# Should not reach here.'
nl|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Unexpected build failure, not rescheduling build.'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_allocated_networks'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'raise_exc'
op|'='
name|'False'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'e'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_nil_out_instance_obj_host_and_node'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_task_state'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'build_results'
op|'.'
name|'FAILED'
newline|'\n'
nl|'\n'
DECL|member|_build_and_run_instance
dedent|''
dedent|''
name|'def'
name|'_build_and_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'requested_networks'
op|','
name|'security_groups'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'node'
op|','
name|'limits'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'image_name'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'create.start'"
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'image_name'"
op|':'
name|'image_name'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'node'
op|')'
newline|'\n'
name|'with'
name|'rt'
op|'.'
name|'instance_claim'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'limits'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(russellb) It's important that this validation be done"
nl|'\n'
comment|'# *after* the resource tracker instance claim, as that is where'
nl|'\n'
comment|'# the host is set on the instance.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_validate_instance_group_policy'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'_build_resources'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'security_groups'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
name|'as'
name|'resources'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
newline|'\n'
comment|'# NOTE(JoshNang) This also saves the changes to the'
nl|'\n'
comment|"# instance from _allocate_network_async, as they aren't"
nl|'\n'
comment|'# saved in that function to prevent races.'
nl|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
nl|'\n'
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'resources'
op|'['
string|"'block_device_info'"
op|']'
newline|'\n'
name|'network_info'
op|'='
name|'resources'
op|'['
string|"'network_info'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Start spawning the instance on the hypervisor.'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'timeutils'
op|'.'
name|'StopWatch'
op|'('
op|')'
name|'as'
name|'timer'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Took %0.2f seconds to spawn the instance on '"
nl|'\n'
string|"'the hypervisor.'"
op|')'
op|','
name|'timer'
op|'.'
name|'elapsed'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.end'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'RescheduledException'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'reason'
op|'='
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'BuildAbortException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'FixedIpLimitExceeded'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'NoMoreNetworks'
op|','
name|'exception'
op|'.'
name|'NoMoreFixedIps'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'No more network or fixed IP to be allocated'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to allocate the network(s) with error %s, '"
nl|'\n'
string|"'not rescheduling.'"
op|')'
op|'%'
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'VirtualInterfaceMacAddressException'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to allocate network(s)'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to allocate the network(s), not rescheduling.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskTooSmall'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'FlavorMemoryTooSmall'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ImageNotActive'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ImageUnacceptable'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InvalidDiskInfo'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'RescheduledException'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'reason'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(alaski): This is only useful during reschedules, remove it now.'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'pop'
op|'('
string|"'network_allocated'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# If CONF.default_access_ip_network_name is set, grab the'
nl|'\n'
comment|'# corresponding network and set the access ip values accordingly.'
nl|'\n'
name|'network_name'
op|'='
name|'CONF'
op|'.'
name|'default_access_ip_network_name'
newline|'\n'
name|'if'
op|'('
name|'network_name'
name|'and'
name|'not'
name|'instance'
op|'.'
name|'access_ip_v4'
name|'and'
nl|'\n'
name|'not'
name|'instance'
op|'.'
name|'access_ip_v6'
op|')'
op|':'
newline|'\n'
comment|'# Note that when there are multiple ips to choose from, an'
nl|'\n'
comment|'# arbitrary one will be chosen.'
nl|'\n'
indent|'            '
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|'=='
name|'network_name'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'ip'
name|'in'
name|'vif'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'not'
name|'instance'
op|'.'
name|'access_ip_v4'
name|'and'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                            '
name|'instance'
op|'.'
name|'access_ip_v4'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'instance'
op|'.'
name|'access_ip_v6'
name|'and'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'                            '
name|'instance'
op|'.'
name|'access_ip_v6'
op|'='
name|'ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_update_instance_after_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'create.end'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_update_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'create.end'"
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'message'"
op|':'
name|'_'
op|'('
string|"'Success'"
op|')'
op|'}'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|_build_resources
name|'def'
name|'_build_resources'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'security_groups'
op|','
name|'image_meta'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resources'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'network_info'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Start building networks asynchronously for instance.'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'_build_networks_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'security_groups'
op|')'
newline|'\n'
name|'resources'
op|'['
string|"'network_info'"
op|']'
op|'='
name|'network_info'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# Because this allocation is async any failures are likely to occur'
nl|'\n'
comment|'# when the driver accesses network_info during spawn().'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to allocate network(s)'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failed to allocate the network(s), not rescheduling.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Verify that all the BDMs have a device_name set and assign a'
nl|'\n'
comment|'# default to the ones missing it with the help of the driver.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_default_block_device_names'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Start building block device mappings for instance.'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'resources'
op|'['
string|"'block_device_info'"
op|']'
op|'='
name|'block_device_info'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Make sure the async call finishes'
nl|'\n'
indent|'                '
name|'if'
name|'network_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'network_info'
op|'.'
name|'wait'
op|'('
name|'do_raise'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'VolumeLimitExceeded'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InvalidBDM'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# Make sure the async call finishes'
nl|'\n'
indent|'            '
name|'if'
name|'network_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network_info'
op|'.'
name|'wait'
op|'('
name|'do_raise'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failure prepping block device'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Make sure the async call finishes'
nl|'\n'
name|'if'
name|'network_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'network_info'
op|'.'
name|'wait'
op|'('
name|'do_raise'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|"'Failure prepping block device.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'resources'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
name|'as'
name|'ctxt'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'exc'
op|','
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Instance failed to spawn'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Make sure the async call finishes'
nl|'\n'
dedent|''
name|'if'
name|'network_info'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'network_info'
op|'.'
name|'wait'
op|'('
name|'do_raise'
op|'='
name|'False'
op|')'
newline|'\n'
comment|"# if network_info is empty we're likely here because of"
nl|'\n'
comment|'# network allocation failure. Since nothing can be reused on'
nl|'\n'
comment|"# rescheduling it's better to deallocate network to eliminate"
nl|'\n'
comment|'# the chance of orphaned ports in neutron'
nl|'\n'
dedent|''
name|'deallocate_networks'
op|'='
name|'False'
name|'if'
name|'network_info'
name|'else'
name|'True'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'try_deallocate_networks'
op|'='
name|'deallocate_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc2'
op|':'
newline|'\n'
indent|'                    '
name|'ctxt'
op|'.'
name|'reraise'
op|'='
name|'False'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Could not clean up failed build,'"
nl|'\n'
string|"' not rescheduling. Error: %s'"
op|')'
op|','
nl|'\n'
name|'six'
op|'.'
name|'text_type'
op|'('
name|'exc2'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_allocated_networks
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_cleanup_allocated_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LE'
op|'('
string|"'Failed to deallocate networks'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'network_allocated'"
op|']'
op|'='
string|"'False'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|"# NOTE(alaski): It's possible that we're cleaning up the networks"
nl|'\n'
comment|"# because the instance was deleted.  If that's the case then this"
nl|'\n'
comment|'# exception will be raised by instance.save()'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_try_deallocate_network
dedent|''
dedent|''
name|'def'
name|'_try_deallocate_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
comment|'# tear down allocated network structure'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Failed to deallocate network for instance.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_power_off_values
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_power_off_values'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the timing configuration for powering down this instance."""'
newline|'\n'
name|'if'
name|'clean_shutdown'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
name|'compute_utils'
op|'.'
name|'get_value_from_system_metadata'
op|'('
name|'instance'
op|','
nl|'\n'
name|'key'
op|'='
string|"'image_os_shutdown_timeout'"
op|','
name|'type'
op|'='
name|'int'
op|','
nl|'\n'
name|'default'
op|'='
name|'CONF'
op|'.'
name|'shutdown_timeout'
op|')'
newline|'\n'
name|'retry_interval'
op|'='
name|'self'
op|'.'
name|'SHUTDOWN_RETRY_INTERVAL'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
number|'0'
newline|'\n'
name|'retry_interval'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'timeout'
op|','
name|'retry_interval'
newline|'\n'
nl|'\n'
DECL|member|_power_off_instance
dedent|''
name|'def'
name|'_power_off_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Power off an instance on this host."""'
newline|'\n'
name|'timeout'
op|','
name|'retry_interval'
op|'='
name|'self'
op|'.'
name|'_get_power_off_values'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|','
name|'timeout'
op|','
name|'retry_interval'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_shutdown_instance
dedent|''
name|'def'
name|'_shutdown_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
name|'notify'
op|'='
name|'True'
op|','
nl|'\n'
name|'try_deallocate_networks'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shutdown an instance on this host.\n\n        :param:context: security context\n        :param:instance: a nova.objects.Instance object\n        :param:bdms: the block devices for the instance to be torn\n                     down\n        :param:requested_networks: the networks on which the instance\n                                   has ports\n        :param:notify: true if a final usage notification should be\n                       emitted\n        :param:try_deallocate_networks: false if we should avoid\n                                        trying to teardown networking\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'%(action_str)s instance'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'action_str'"
op|':'
string|"'Terminating'"
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'notify'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"shutdown.start"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'compute_utils'
op|'.'
name|'get_nw_info_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish) get bdms before destroying the instance'
nl|'\n'
name|'vol_bdms'
op|'='
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
op|']'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(melwitt): attempt driver destroy before releasing ip, may'
nl|'\n'
comment|'#                want to keep ip allocated for certain failures'
nl|'\n'
name|'timer'
op|'='
name|'timeutils'
op|'.'
name|'StopWatch'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Start destroying the instance on the hypervisor.'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Took %0.2f seconds to destroy the instance on the '"
nl|'\n'
string|"'hypervisor.'"
op|')'
op|','
name|'timer'
op|'.'
name|'elapsed'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstancePowerOffFailure'
op|':'
newline|'\n'
comment|"# if the instance can't power off, don't release the ip"
nl|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# deallocate ip and fail without proceeding to'
nl|'\n'
comment|'# volume api calls, preserving current behavior'
nl|'\n'
indent|'                '
name|'if'
name|'try_deallocate_networks'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_try_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'try_deallocate_networks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_try_deallocate_network'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'timer'
op|'.'
name|'restart'
op|'('
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'vol_bdms'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(vish): actual driver detach done in driver.destroy, so'
nl|'\n'
comment|'#             just tell cinder that we are done with it.'
nl|'\n'
indent|'                '
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'bdm'
op|'.'
name|'volume_id'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'DiskNotFound'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Ignoring DiskNotFound: %s'"
op|','
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'VolumeNotFound'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Ignoring VolumeNotFound: %s'"
op|','
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'cinder_exception'
op|'.'
name|'EndpointNotFound'
op|','
nl|'\n'
name|'keystone_exception'
op|'.'
name|'EndpointNotFound'
op|')'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Ignoring EndpointNotFound: %s'"
op|')'
op|','
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'cinder_exception'
op|'.'
name|'ClientException'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Ignoring Unknown cinder exception: %s'"
op|')'
op|','
name|'exc'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'vol_bdms'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Took %(time).2f seconds to detach %(num)s volumes '"
nl|'\n'
string|"'for instance.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'time'"
op|':'
name|'timer'
op|'.'
name|'elapsed'
op|'('
op|')'
op|','
string|"'num'"
op|':'
name|'len'
op|'('
name|'vol_bdms'
op|')'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'notify'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"shutdown.end"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_volumes
dedent|''
dedent|''
name|'def'
name|'_cleanup_volumes'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'bdms'
op|','
name|'raise_exc'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"terminating bdm %s"'
op|','
name|'bdm'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'bdm'
op|'.'
name|'volume_id'
name|'and'
name|'bdm'
op|'.'
name|'delete_on_termination'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                    '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Failed to delete volume: %(volume_id)s '"
nl|'\n'
string|"'due to %(exc)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'bdm'
op|'.'
name|'volume_id'
op|','
string|"'exc'"
op|':'
name|'exc'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'exc_info'
name|'is'
name|'not'
name|'None'
name|'and'
name|'raise_exc'
op|':'
newline|'\n'
indent|'            '
name|'six'
op|'.'
name|'reraise'
op|'('
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'hooks'
op|'.'
name|'add_hook'
op|'('
string|'"delete_instance"'
op|')'
newline|'\n'
DECL|member|_delete_instance
name|'def'
name|'_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'quotas'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete an instance on this host.  Commit or rollback quotas\n        as necessary.\n\n        :param context: nova request context\n        :param instance: nova.objects.instance.Instance object\n        :param bdms: nova.objects.block_device.BlockDeviceMappingList object\n        :param quotas: nova.objects.quotas.Quotas object\n        """'
newline|'\n'
name|'was_soft_deleted'
op|'='
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
newline|'\n'
name|'if'
name|'was_soft_deleted'
op|':'
newline|'\n'
comment|'# Instances in SOFT_DELETED vm_state have already had quotas'
nl|'\n'
comment|'# decremented.'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'='
name|'self'
op|'.'
name|'instance_events'
op|'.'
name|'clear_events_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'events'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Events pending at deletion: %(events)s'"
op|','
nl|'\n'
op|'{'
string|"'events'"
op|':'
string|"','"
op|'.'
name|'join'
op|'('
name|'events'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"delete.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
comment|'# NOTE(dims): instance.info_cache.delete() should be called after'
nl|'\n'
comment|'# _shutdown_instance in the compute manager as shutdown calls'
nl|'\n'
comment|'# deallocate_for_instance so the info_cache is still needed'
nl|'\n'
comment|'# at this point.'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'info_cache'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'delete'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# NOTE(yoshimatsu): Avoid AttributeError if instance.info_cache'
nl|'\n'
comment|'# is None. When the root cause that instance.info_cache becomes'
nl|'\n'
comment|'# None is fixed, the log level should be reconsidered.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Info cache for instance could not be found. "'
nl|'\n'
string|'"Ignore."'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): We have already deleted the instance, so we have'
nl|'\n'
comment|'#             to ignore problems cleaning up the volumes. It'
nl|'\n'
comment|'#             would be nice to let the user know somehow that'
nl|'\n'
comment|'#             the volume deletion failed, but it is not'
nl|'\n'
comment|'#             acceptable to have an instance that can not be'
nl|'\n'
comment|'#             deleted. Perhaps this could be reworked in the'
nl|'\n'
comment|'#             future to set an instance fault the first time'
nl|'\n'
comment|'#             and to only ignore the failure if the instance'
nl|'\n'
comment|'#             is already in ERROR.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
name|'bdms'
op|','
nl|'\n'
name|'raise_exc'
op|'='
name|'False'
op|')'
newline|'\n'
comment|'# if a delete task succeeded, always update vm state and task'
nl|'\n'
comment|'# state without expecting task state to be DELETING'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
name|'instance'
op|'.'
name|'terminated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_resource_tracker'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'system_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_complete_deletion'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|','
nl|'\n'
name|'quotas'
op|','
nl|'\n'
name|'system_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|terminate_instance
name|'def'
name|'terminate_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance on this host."""'
newline|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|do_terminate_instance
name|'def'
name|'do_terminate_instance'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mriedem): If we are deleting the instance while it was'
nl|'\n'
comment|'# booting from volume, we could be racing with a database update of'
nl|'\n'
comment|'# the BDM volume_id. Since the compute API passes the BDMs over RPC'
nl|'\n'
comment|'# to compute here, the BDMs may be stale at this point. So check'
nl|'\n'
comment|"# for any volume BDMs that don't have volume_id set and if we"
nl|'\n'
comment|'# detect that, we need to refresh the BDM list before proceeding.'
nl|'\n'
comment|'# TODO(mriedem): Move this into _delete_instance and make the bdms'
nl|'\n'
comment|'# parameter optional.'
nl|'\n'
indent|'            '
name|'for'
name|'bdm'
name|'in'
name|'list'
op|'('
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
name|'and'
name|'not'
name|'bdm'
op|'.'
name|'volume_id'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'There are potentially stale BDMs during '"
nl|'\n'
string|"'delete, refreshing the BlockDeviceMappingList.'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'quotas'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Instance disappeared during terminate"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# As we're trying to delete always go to Error if something"
nl|'\n'
comment|"# goes wrong that _delete_instance can't handle."
nl|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Setting instance vm_state to ERROR'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'do_terminate_instance'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): This is probably better named power_off_instance'
nl|'\n'
comment|'# so it matches the driver method, but because of other issues, we'
nl|'\n'
comment|"# can't use that name in grizzly."
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|stop_instance
name|'def'
name|'stop_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stopping an instance on this host."""'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|do_stop_instance
name|'def'
name|'do_stop_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Stopping instance; current vm_state: %(vm_state)s, '"
nl|'\n'
string|"'current task_state: %(task_state)s, current DB '"
nl|'\n'
string|"'power_state: %(db_power_state)s, current VM '"
nl|'\n'
string|"'power_state: %(current_power_state)s'"
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'instance'
op|'.'
name|'vm_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'db_power_state'"
op|':'
name|'instance'
op|'.'
name|'power_state'
op|','
nl|'\n'
string|"'current_power_state'"
op|':'
name|'current_power_state'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): If the instance is already powered off, we are'
nl|'\n'
comment|'# possibly tearing down and racing with other operations, so we can'
nl|'\n'
comment|'# expect the task_state to be None if something else updates the'
nl|'\n'
comment|"# instance and we're not locking it."
nl|'\n'
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|']'
newline|'\n'
comment|'# The list of power states is from _sync_instance_power_state.'
nl|'\n'
name|'if'
name|'current_power_state'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Instance is already powered off in the '"
nl|'\n'
string|"'hypervisor when stop is called.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'expected_task_state'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"power_off.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_power_off_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"power_off.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'do_stop_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_power_on
dedent|''
name|'def'
name|'_power_on'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_snapshot_of_shelved_instance
dedent|''
name|'def'
name|'_delete_snapshot_of_shelved_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'snapshot_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete snapshot of shelved instance."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'image_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'snapshot_id'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'ImageNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ImageNotAuthorized'
op|')'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Failed to delete snapshot "'
nl|'\n'
string|'"from shelved instance (%s)."'
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'format_message'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Something wrong happened when trying to "'
nl|'\n'
string|'"delete snapshot from shelved instance."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): This is probably better named power_on_instance'
nl|'\n'
comment|'# so it matches the driver method, but because of other issues, we'
nl|'\n'
comment|"# can't use that name in grizzly."
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|start_instance
name|'def'
name|'start_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starting an instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_on.start"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_power_on'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Delete an image(VM snapshot) for a shelved instance'
nl|'\n'
name|'snapshot_id'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'shelved_image_id'"
op|')'
newline|'\n'
name|'if'
name|'snapshot_id'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_snapshot_of_shelved_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'snapshot_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Delete system_metadata for a shelved instance'
nl|'\n'
dedent|''
name|'compute_utils'
op|'.'
name|'remove_shelved_keys_from_system_metadata'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"power_on.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'NMINotSupported'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|trigger_crash_dump
name|'def'
name|'trigger_crash_dump'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Trigger crash dump in an instance by injecting NMI."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"trigger_crash_dump.start"'
op|')'
newline|'\n'
nl|'\n'
comment|'# This method does not change task_state and power_state because the'
nl|'\n'
comment|"# effect of an NMI depends on user's configuration."
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_nmi'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"trigger_crash_dump.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|soft_delete_instance
name|'def'
name|'soft_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Soft delete an instance on this host."""'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"soft_delete.start"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'soft_delete'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# Fallback to just powering off the instance if the'
nl|'\n'
comment|"# hypervisor doesn't implement the soft_delete method"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'quotas'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"soft_delete.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|restore_instance
name|'def'
name|'restore_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a soft-deleted instance on this host."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"restore.start"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'restore'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# Fallback to just powering on the instance if the hypervisor'
nl|'\n'
comment|"# doesn't implement the restore method"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_power_on'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESTORING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"restore.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_set_migration_status
name|'def'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the status, and guard against a None being passed in.\n\n        This is useful as some of the compute RPC calls will not pass\n        a migration object in older versions. The check can be removed when\n        we move past 4.x major version of the RPC API.\n        """'
newline|'\n'
name|'if'
name|'migration'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'.'
name|'status'
op|'='
name|'status'
newline|'\n'
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rebuild_default_impl
dedent|''
dedent|''
name|'def'
name|'_rebuild_default_impl'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
name|'bdms'
op|','
nl|'\n'
name|'detach_block_devices'
op|','
name|'attach_block_devices'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'False'
op|','
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'preserve_ephemeral'
op|':'
newline|'\n'
comment|'# The default code path does not support preserving ephemeral'
nl|'\n'
comment|'# partitions.'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'PreserveEphemeralNotSupported'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'recreate'
op|':'
newline|'\n'
indent|'            '
name|'detach_block_devices'
op|'('
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_power_off_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'detach_block_devices'
op|'('
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILDING'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'new_block_device_info'
op|'='
name|'attach_block_devices'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'instance'
op|'.'
name|'mutated_migration_context'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'new_block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'PreserveEphemeralNotSupported'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rebuild_instance
name|'def'
name|'rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'orig_image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'new_pass'
op|','
name|'orig_sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|','
name|'recreate'
op|','
name|'on_shared_storage'
op|'='
name|'None'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'False'
op|','
name|'migration'
op|'='
name|'None'
op|','
nl|'\n'
name|'scheduled_node'
op|'='
name|'None'
op|','
name|'limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy and re-make this instance.\n\n        A \'rebuild\' effectively purges all existing data from the system and\n        remakes the VM with given \'metadata\' and \'personalities\'.\n\n        :param context: `nova.RequestContext` object\n        :param instance: Instance object\n        :param orig_image_ref: Original image_ref before rebuild\n        :param image_ref: New image_ref for rebuild\n        :param injected_files: Files to inject\n        :param new_pass: password to set on rebuilt instance\n        :param orig_sys_metadata: instance system metadata from pre-rebuild\n        :param bdms: block-device-mappings to use for rebuild\n        :param recreate: True if the instance is being recreated (e.g. the\n            hypervisor it was on failed) - cleanup of old state will be\n            skipped.\n        :param on_shared_storage: True if instance files on shared storage.\n                                  If not provided then information from the\n                                  driver will be used to decide if the instance\n                                  files are available or not on the target host\n        :param preserve_ephemeral: True if the default ephemeral storage\n                                   partition must be preserved on rebuild\n        :param migration: a Migration object if one was created for this\n                          rebuild operation (if it\'s a part of evacaute)\n        :param scheduled_node: A node of the host chosen by the scheduler. If a\n                               host was specified by the user, this will be\n                               None\n        :param limits: Overcommit limits set by the scheduler. If a host was\n                       specified by the user, this will be None\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Rebuilding instance"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'scheduled_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'scheduled_node'
op|')'
newline|'\n'
name|'rebuild_claim'
op|'='
name|'rt'
op|'.'
name|'rebuild_claim'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rebuild_claim'
op|'='
name|'claims'
op|'.'
name|'NopClaim'
newline|'\n'
nl|'\n'
dedent|''
name|'image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'image_ref'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'image_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'image_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): On a recreate (evacuate), we need to update'
nl|'\n'
comment|"# the instance's host and node properties to reflect it's"
nl|'\n'
comment|'# destination node for the recreate.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'scheduled_node'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_get_compute_info'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'scheduled_node'
op|'='
name|'compute_node'
op|'.'
name|'hypervisor_hostname'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to get compute_info for %s'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'claim_ctxt'
op|'='
name|'rebuild_claim'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'limits'
op|'='
name|'limits'
op|','
name|'image_meta'
op|'='
name|'image_meta'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_rebuild_instance_with_claim'
op|'('
nl|'\n'
name|'claim_ctxt'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'orig_image_ref'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'injected_files'
op|','
name|'new_pass'
op|','
name|'orig_sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|','
name|'recreate'
op|','
name|'on_shared_storage'
op|','
name|'preserve_ephemeral'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Could not rebuild instance on this host, not "'
nl|'\n'
string|'"enough resources available."'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ndipanov): We just abort the build for now and leave a'
nl|'\n'
comment|'# migration record for potential cleanup later'
nl|'\n'
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'failed'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'rebuild.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'reason'
op|'='
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'failed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'rebuild.error'"
op|','
name|'fault'
op|'='
name|'e'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'apply_migration_context'
op|'('
op|')'
newline|'\n'
comment|'# NOTE (ndipanov): This save will now update the host and node'
nl|'\n'
comment|'# attributes making sure that next RT pass is consistent since'
nl|'\n'
comment|'# it will be based on the instance and not the migration DB'
nl|'\n'
comment|'# entry.'
nl|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'instance'
op|'.'
name|'node'
op|'='
name|'scheduled_node'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'drop_migration_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE (ndipanov): Mark the migration as done only after we'
nl|'\n'
comment|'# mark the instance as belonging to this host.'
nl|'\n'
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'done'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_rebuild_instance_with_claim
dedent|''
dedent|''
dedent|''
name|'def'
name|'_do_rebuild_instance_with_claim'
op|'('
name|'self'
op|','
name|'claim_context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Helper to avoid deep nesting in the top-level method."""'
newline|'\n'
nl|'\n'
name|'with'
name|'claim_context'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_do_rebuild_instance'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_get_image_name
name|'def'
name|'_get_image_name'
op|'('
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'image_meta'
op|'.'
name|'obj_attr_is_set'
op|'('
string|'"name"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'image_meta'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|_do_rebuild_instance
dedent|''
dedent|''
name|'def'
name|'_do_rebuild_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'orig_image_ref'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'injected_files'
op|','
name|'new_pass'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|','
name|'bdms'
op|','
name|'recreate'
op|','
nl|'\n'
name|'on_shared_storage'
op|','
name|'preserve_ephemeral'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_vm_state'
op|'='
name|'instance'
op|'.'
name|'vm_state'
newline|'\n'
nl|'\n'
name|'if'
name|'recreate'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|'"supports_recreate"'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceRecreateNotSupported'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_instance_exists'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'on_shared_storage'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'on_shared_storage is not provided, using driver'"
nl|'\n'
string|"'information to decide if the instance needs to'"
nl|'\n'
string|"'be recreated'"
op|')'
newline|'\n'
name|'on_shared_storage'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_on_disk'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
op|'('
name|'on_shared_storage'
op|'!='
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_on_disk'
op|'('
name|'instance'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# To cover case when admin expects that instance files are'
nl|'\n'
comment|'# on shared storage, but not accessible and vice versa'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidSharedStorage'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Invalid state of instance files on shared"'
nl|'\n'
string|'" storage"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'on_shared_storage'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'disk on shared storage, recreating using'"
nl|'\n'
string|"' existing disk'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'image_ref'
op|'='
name|'orig_image_ref'
op|'='
name|'instance'
op|'.'
name|'image_ref'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"disk not on shared storage, rebuilding from:"'
nl|'\n'
string|'" \'%s\'"'
op|')'
op|','
name|'str'
op|'('
name|'image_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'image_ref'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_image_ref'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'image_api'
op|','
name|'image_ref'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# This instance.exists message should contain the original'
nl|'\n'
comment|'# image_ref, not the new one.  Since the DB has been updated'
nl|'\n'
comment|'# to point to the new one... we have to override it.'
nl|'\n'
comment|'# TODO(jaypipes): Move generate_image_url() into the nova.image.api'
nl|'\n'
dedent|''
name|'orig_image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'orig_image_ref'
op|')'
newline|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'image_ref_url'"
op|':'
name|'orig_image_ref_url'
op|'}'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'current_period'
op|'='
name|'True'
op|','
name|'system_metadata'
op|'='
name|'orig_sys_metadata'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# This message should contain the new image_ref'
nl|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'image_name'"
op|':'
name|'self'
op|'.'
name|'_get_image_name'
op|'('
name|'image_meta'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"rebuild.start"'
op|','
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILDING'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'recreate'
op|':'
newline|'\n'
comment|'# Needed for nova-network, does nothing for neutron'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
comment|'# For nova-network this is needed to move floating IPs'
nl|'\n'
comment|'# For neutron this updates the host in the port binding'
nl|'\n'
comment|'# TODO(cfriesen): this network_api call and the one above'
nl|'\n'
comment|'# are so similar, we should really try to unify them.'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_instance_network_on_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'compute_utils'
op|'.'
name|'get_nw_info_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'bdms'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|function|detach_block_devices
name|'def'
name|'detach_block_devices'
op|'('
name|'context'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|','
name|'instance'
op|','
nl|'\n'
name|'destroy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'files'
op|'='
name|'self'
op|'.'
name|'_decode_files'
op|'('
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|'='
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'files'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'new_pass'
op|','
nl|'\n'
name|'bdms'
op|'='
name|'bdms'
op|','
nl|'\n'
name|'detach_block_devices'
op|'='
name|'detach_block_devices'
op|','
nl|'\n'
name|'attach_block_devices'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'preserve_ephemeral'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'recreate'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'instance'
op|'.'
name|'mutated_migration_context'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rebuild'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|"# NOTE(rpodolyaka): driver doesn't provide specialized version"
nl|'\n'
comment|'# of rebuild, fall back to the default implementation'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rebuild_default_impl'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_instance_after_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'orig_vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'STOPPED'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"bringing vm to original state: \'%s\'"'
op|')'
op|','
nl|'\n'
name|'orig_vm_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_OFF'
newline|'\n'
name|'instance'
op|'.'
name|'progress'
op|'='
number|'0'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stop_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"rebuild.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_bad_volumes_detached
dedent|''
name|'def'
name|'_handle_bad_volumes_detached'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bad_devices'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handle cases where the virt-layer had to detach non-working volumes\n        in order to complete an operation.\n        """'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'mount_device'"
op|')'
name|'in'
name|'bad_devices'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'volume_id'
op|'='
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|'['
string|"'data'"
op|']'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): ideally we'd just call"
nl|'\n'
comment|'# `compute_api.detach_volume` here but since that hits the'
nl|'\n'
comment|"# DB directly, that's off limits from within the"
nl|'\n'
comment|'# compute-manager.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# API-detach'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Detaching from volume api: %s"'
op|')'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'begin_detaching'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Manager-detach'
nl|'\n'
name|'self'
op|'.'
name|'detach_volume'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reboot_instance
name|'def'
name|'reboot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'reboot_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot an instance on this host."""'
newline|'\n'
comment|'# acknowledge the request made it to the manager'
nl|'\n'
name|'if'
name|'reboot_type'
op|'=='
string|'"SOFT"'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
newline|'\n'
name|'expected_states'
op|'='
op|'('
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
newline|'\n'
name|'expected_states'
op|'='
op|'('
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED_HARD'
op|')'
newline|'\n'
dedent|''
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Rebooting instance"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"reboot.start"'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_states'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'power_state'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
name|'instance'
op|'.'
name|'power_state'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'trying to reboot a non-running instance:'"
nl|'\n'
string|"' (state: %(state)s expected: %(running)s)'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
string|"'running'"
op|':'
name|'running'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|function|bad_volumes_callback
dedent|''
name|'def'
name|'bad_volumes_callback'
op|'('
name|'bad_devices'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_handle_bad_volumes_detached'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bad_devices'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|"# Don't change it out of rescue mode"
nl|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'RESCUED'
op|':'
newline|'\n'
indent|'                '
name|'new_vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'new_vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
dedent|''
name|'new_power_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'reboot_type'
op|'=='
string|'"SOFT"'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
newline|'\n'
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_STARTED_HARD'
newline|'\n'
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'reboot_type'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|','
nl|'\n'
name|'bad_volumes_callback'
op|'='
name|'bad_volumes_callback'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
name|'as'
name|'ctxt'
op|':'
newline|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
comment|"# if the reboot failed but the VM is running don't"
nl|'\n'
comment|'# put it into an error state'
nl|'\n'
name|'new_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'new_power_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Reboot failed but instance is running'"
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'error'
op|','
name|'exc_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'reboot.error'"
op|','
name|'fault'
op|'='
name|'error'
op|')'
newline|'\n'
name|'ctxt'
op|'.'
name|'reraise'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Cannot reboot instance: %s'"
op|')'
op|','
name|'error'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'new_power_state'
op|':'
newline|'\n'
indent|'            '
name|'new_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'new_power_state'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'new_vm_state'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance disappeared during reboot"'
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"reboot.end"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'delete_image_on_error'
newline|'\n'
DECL|member|_do_snapshot_instance
name|'def'
name|'_do_snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_snapshot_instance'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|backup_instance
name|'def'
name|'backup_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
name|'backup_type'
op|','
nl|'\n'
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Backup an instance on this host.\n\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_do_snapshot_instance'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
name|'rotation'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_rotate_backups'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
op|'@'
name|'delete_image_on_error'
newline|'\n'
DECL|member|snapshot_instance
name|'def'
name|'snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot an instance on this host.\n\n        :param context: security context\n        :param instance: a nova.objects.instance.Instance object\n        :param image_id: glance.db.sqlalchemy.models.Image.Id\n        """'
newline|'\n'
comment|'# NOTE(dave-mcnally) the task state will already be set by the api'
nl|'\n'
comment|'# but if the compute manager has crashed/been restarted prior to the'
nl|'\n'
comment|'# request getting here the task state may have been cleared so we set'
nl|'\n'
comment|'# it again and things continue normally'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT_PENDING'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# possibility instance no longer exists, no point in continuing'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance not found, could not set state %s "'
nl|'\n'
string|'"for instance."'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Instance being deleted, snapshot cannot continue"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_snapshot_instance'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_snapshot_instance
dedent|''
name|'def'
name|'_snapshot_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'instance'
op|','
nl|'\n'
name|'expected_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'instance snapshotting'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'.'
name|'power_state'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'                '
name|'state'
op|'='
name|'instance'
op|'.'
name|'power_state'
newline|'\n'
name|'running'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'trying to snapshot a non-running instance: '"
nl|'\n'
string|"'(state: %(state)s expected: %(running)s)'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
string|"'running'"
op|':'
name|'running'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"snapshot.start"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|update_task_state
name|'def'
name|'update_task_state'
op|'('
name|'task_state'
op|','
nl|'\n'
name|'expected_state'
op|'='
name|'expected_task_state'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_state'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
nl|'\n'
name|'update_task_state'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"snapshot.end"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|')'
op|':'
newline|'\n'
comment|'# the instance got deleted during the snapshot'
nl|'\n'
comment|'# Quickly bail out of here'
nl|'\n'
indent|'            '
name|'msg'
op|'='
string|"'Instance disappeared during snapshot'"
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'image_service'
op|'='
name|'glance'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'if'
name|'image'
op|'['
string|"'status'"
op|']'
op|'!='
string|"'active'"
op|':'
newline|'\n'
indent|'                    '
name|'image_service'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Error while trying to clean up image %s"'
op|')'
op|','
nl|'\n'
name|'image_id'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ImageNotFound'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Image not found during snapshot"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_interrupted_snapshot_cleanup
dedent|''
dedent|''
name|'def'
name|'_post_interrupted_snapshot_cleanup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_interrupted_snapshot_cleanup'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|volume_snapshot_create
name|'def'
name|'volume_snapshot_create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'create_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'volume_snapshot_create'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'create_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|volume_snapshot_delete
name|'def'
name|'volume_snapshot_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'snapshot_id'
op|','
name|'delete_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'volume_snapshot_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'snapshot_id'
op|','
name|'delete_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|_rotate_backups
name|'def'
name|'_rotate_backups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'backup_type'
op|','
name|'rotation'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete excess backups associated to an instance.\n\n        Instances are allowed a fixed number of backups (the rotation number);\n        this method deletes the oldest backups that exceed the rotation\n        threshold.\n\n        :param context: security context\n        :param instance: Instance dict\n        :param backup_type: a user-defined type, like "daily" or "weekly" etc.\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        """'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'property-image_type'"
op|':'
string|"'backup'"
op|','
nl|'\n'
string|"'property-backup_type'"
op|':'
name|'backup_type'
op|','
nl|'\n'
string|"'property-instance_uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|'}'
newline|'\n'
nl|'\n'
name|'images'
op|'='
name|'self'
op|'.'
name|'image_api'
op|'.'
name|'get_all'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|'='
string|"'created_at'"
op|','
name|'sort_dir'
op|'='
string|"'desc'"
op|')'
newline|'\n'
name|'num_images'
op|'='
name|'len'
op|'('
name|'images'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Found %(num_images)d images (rotation: %(rotation)d)"'
op|','
nl|'\n'
op|'{'
string|"'num_images'"
op|':'
name|'num_images'
op|','
string|"'rotation'"
op|':'
name|'rotation'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_images'
op|'>'
name|'rotation'
op|':'
newline|'\n'
comment|'# NOTE(sirp): this deletes all backups that exceed the rotation'
nl|'\n'
comment|'# limit'
nl|'\n'
indent|'            '
name|'excess'
op|'='
name|'len'
op|'('
name|'images'
op|')'
op|'-'
name|'rotation'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rotating out %d backups"'
op|','
name|'excess'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'excess'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'='
name|'images'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Deleting image %s"'
op|','
name|'image_id'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'new_pass'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for an instance on this host.\n\n        This is generally only called by API password resets after an\n        image has been built.\n\n        @param context: Nova auth context.\n        @param instance: Nova instance object.\n        @param new_pass: The admin password for the instance.\n        """'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'if'
name|'new_pass'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Generate a random password'
nl|'\n'
indent|'            '
name|'new_pass'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
nl|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'instance %s is not running'"
op|')'
op|'%'
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstancePasswordSetFailed'
op|'('
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'reason'
op|'='
name|'_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_admin_password'
op|'('
name|'instance'
op|','
name|'new_pass'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Root password set"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'set_admin_password is not implemented '"
nl|'\n'
string|"'by this driver or guest instance.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'_'
op|'('
string|"'set_admin_password is not '"
nl|'\n'
string|"'implemented by this driver or guest '"
nl|'\n'
string|"'instance.'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'UnexpectedTaskStateError'
op|':'
newline|'\n'
comment|'# interrupted by another (most likely delete) task'
nl|'\n'
comment|'# do not retry'
nl|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# Catch all here because this could be anything.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'set_admin_password failed'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
comment|"# We create a new exception here so that we won't"
nl|'\n'
comment|'# potentially reveal password information to the'
nl|'\n'
comment|'# API caller.  The real exception is logged above'
nl|'\n'
name|'_msg'
op|'='
name|'_'
op|'('
string|"'error setting admin password'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstancePasswordSetFailed'
op|'('
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'reason'
op|'='
name|'_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'path'
op|','
name|'file_contents'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the specified path in an instance on this host."""'
newline|'\n'
comment|'# NOTE(russellb) Remove this method, as well as the underlying virt'
nl|'\n'
comment|'# driver methods, when the compute rpc interface is bumped to 4.x'
nl|'\n'
comment|'# as it is no longer used.'
nl|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'expected_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'if'
name|'current_power_state'
op|'!='
name|'expected_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'trying to inject a file into a non-running '"
nl|'\n'
string|"'(state: %(current_state)s expected: '"
nl|'\n'
string|"'%(expected_state)s)'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'current_state'"
op|':'
name|'current_power_state'
op|','
nl|'\n'
string|"'expected_state'"
op|':'
name|'expected_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'injecting file to %s'"
op|')'
op|','
name|'path'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_file'
op|'('
name|'instance'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_rescue_image
dedent|''
name|'def'
name|'_get_rescue_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_image_ref'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine what image should be used to boot the rescue VM."""'
newline|'\n'
comment|'# 1. If rescue_image_ref is passed in, use that for rescue.'
nl|'\n'
comment|"# 2. Else, use the base image associated with instance's current image."
nl|'\n'
comment|'#       The idea here is to provide the customer with a rescue'
nl|'\n'
comment|'#       environment which they are familiar with.'
nl|'\n'
comment|'#       So, if they built their instance off of a Debian image,'
nl|'\n'
comment|'#       their rescue VM will also be Debian.'
nl|'\n'
comment|"# 3. As a last resort, use instance's current image."
nl|'\n'
name|'if'
name|'not'
name|'rescue_image_ref'
op|':'
newline|'\n'
indent|'            '
name|'system_meta'
op|'='
name|'utils'
op|'.'
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'rescue_image_ref'
op|'='
name|'system_meta'
op|'.'
name|'get'
op|'('
string|"'image_base_image_ref'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'rescue_image_ref'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Unable to find a different image to use for '"
nl|'\n'
string|"'rescue VM, using instance\\'s current image'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'rescue_image_ref'
op|'='
name|'instance'
op|'.'
name|'image_ref'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_image_ref'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'image_api'
op|','
name|'rescue_image_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rescue_instance
name|'def'
name|'rescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|','
nl|'\n'
name|'rescue_image_ref'
op|','
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Rescuing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'admin_password'
op|'='
op|'('
name|'rescue_password'
name|'if'
name|'rescue_password'
name|'else'
nl|'\n'
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_image_meta'
op|'='
name|'self'
op|'.'
name|'_get_rescue_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'rescue_image_ref'
op|')'
newline|'\n'
nl|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'rescue_image_name'"
op|':'
nl|'\n'
name|'self'
op|'.'
name|'_get_image_name'
op|'('
name|'rescue_image_meta'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"rescue.start"'
op|','
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_power_off_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'rescue_image_meta'
op|','
name|'admin_password'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Error trying to Rescue Instance"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRescuable'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"Driver Error: %s"'
op|')'
op|'%'
name|'e'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"rescue.end"'
op|','
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unrescue_instance
name|'def'
name|'unrescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Unrescuing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"unrescue.start"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unrescue'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UNRESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
string|'"unrescue.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|change_instance_metadata
name|'def'
name|'change_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'diff'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the metadata published to the instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Changing instance metadata according to %r"'
op|','
nl|'\n'
name|'diff'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'change_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'diff'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reservations'
op|','
name|'migration'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|do_confirm_resize
name|'def'
name|'do_confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'migration_id'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(wangpan): Get the migration status from db, if it has been'
nl|'\n'
comment|'#                confirmed, we do nothing and return here'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Going to confirm migration %s"'
op|','
name|'migration_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# TODO(russellb) Why are we sending the migration object just'
nl|'\n'
comment|'# to turn around and look it up from the db again?'
nl|'\n'
indent|'                '
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'migration_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MigrationNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"Migration %s is not found during confirmation"'
op|')'
op|','
nl|'\n'
name|'migration_id'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'migration'
op|'.'
name|'status'
op|'=='
string|"'confirmed'"
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Migration %s is already confirmed"'
op|')'
op|','
nl|'\n'
name|'migration_id'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'migration'
op|'.'
name|'status'
name|'not'
name|'in'
op|'('
string|"'finished'"
op|','
string|"'confirming'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Unexpected confirmation status \'%(status)s\' "'
nl|'\n'
string|'"of migration %(id)s, exit confirmation "'
nl|'\n'
string|'"process"'
op|')'
op|','
nl|'\n'
op|'{'
string|'"status"'
op|':'
name|'migration'
op|'.'
name|'status'
op|','
string|'"id"'
op|':'
name|'migration_id'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# NOTE(wangpan): Get the instance from db, if it has been'
nl|'\n'
comment|'#                deleted, we do nothing and return here'
nl|'\n'
dedent|''
name|'expected_attrs'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|','
string|"'flavor'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'expected_attrs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Instance is not found during confirmation"'
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'quotas'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'do_confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_confirm_resize
dedent|''
name|'def'
name|'_confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'quotas'
op|','
nl|'\n'
name|'migration'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the source instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"resize.confirm.start"'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'quotas'
op|'='
name|'quotas'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): delete stashed migration information'
nl|'\n'
indent|'            '
name|'old_instance_type'
op|'='
name|'instance'
op|'.'
name|'old_flavor'
newline|'\n'
name|'instance'
op|'.'
name|'old_flavor'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'new_flavor'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'pop'
op|'('
string|"'old_vm_state'"
op|','
name|'None'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on source host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'.'
name|'source_compute'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'confirm_migration'
op|'('
name|'migration'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'confirmed'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'migration'
op|'.'
name|'source_node'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'drop_move_claim'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'old_instance_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): The old_vm_state could be STOPPED but the user'
nl|'\n'
comment|'# might have manually powered up the instance to confirm the'
nl|'\n'
comment|'# resize/migrate, so we need to check the current power state'
nl|'\n'
comment|'# on the instance and set the vm_state appropriately. We default'
nl|'\n'
comment|'# to ACTIVE because if the power state is not SHUTDOWN, we'
nl|'\n'
comment|'# assume _sync_instance_power_state will clean it up.'
nl|'\n'
name|'p_state'
op|'='
name|'instance'
op|'.'
name|'power_state'
newline|'\n'
name|'vm_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'p_state'
op|'=='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'                '
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Resized/migrated instance is powered off. "'
nl|'\n'
string|'"Setting vm_state to \'%s\'."'
op|','
name|'vm_state'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_state'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.confirm.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'quotas'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'errors_out_migration'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the new instance on the destination machine.\n\n        Reverts the model changes, and powers on the old instance on the\n        source machine.\n\n        """'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): A revert_resize is essentially a resize back to'
nl|'\n'
comment|'# the old size, so we need to send a usage event here.'
nl|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'quotas'
op|'='
name|'quotas'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): tear down networks on destination host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'migration_p'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration_p'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'destroy_disks'
op|'='
name|'not'
name|'self'
op|'.'
name|'_is_instance_storage_shared'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'host'
op|'='
name|'migration'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'destroy_disks'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_terminate_volume_connections'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'reverted'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ndipanov): We need to do this here because dropping the'
nl|'\n'
comment|'# claim means we lose the migration_context data. We really should'
nl|'\n'
comment|'# fix this by moving the drop_move_claim call to the'
nl|'\n'
comment|'# finish_revert_resize method as this is racy (revert is dropped,'
nl|'\n'
comment|'# but instance resources will be tracked with the new flavor until'
nl|'\n'
comment|'# it gets rolled back in finish_revert_resize, which is'
nl|'\n'
comment|'# potentially wrong for a period of time).'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'revert_migration_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'instance'
op|'.'
name|'node'
op|')'
newline|'\n'
name|'rt'
op|'.'
name|'drop_move_claim'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'finish_revert_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|','
name|'migration'
op|'.'
name|'source_compute'
op|','
nl|'\n'
name|'quotas'
op|'.'
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'errors_out_migration'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_revert_resize
name|'def'
name|'finish_revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reservations'
op|','
name|'migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes the second half of reverting a resize.\n\n        Bring the original source instance state back (active/shutoff) and\n        revert the resized attributes in the database.\n\n        """'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'quotas'
op|'='
name|'quotas'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.revert.start"'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): delete stashed old_vm_state information; we'
nl|'\n'
comment|'# default to ACTIVE for backwards compatibility if old_vm_state'
nl|'\n'
comment|'# is not set'
nl|'\n'
name|'old_vm_state'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'pop'
op|'('
string|"'old_vm_state'"
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_set_instance_info'
op|'('
name|'instance'
op|','
name|'instance'
op|'.'
name|'old_flavor'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'old_flavor'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'new_flavor'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'migration'
op|'.'
name|'source_compute'
newline|'\n'
name|'instance'
op|'.'
name|'node'
op|'='
name|'migration'
op|'.'
name|'source_node'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'.'
name|'dest_compute'
op|'='
name|'migration'
op|'.'
name|'source_compute'
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'refresh_conn_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'power_on'
op|'='
name|'old_vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_revert_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|')'
newline|'\n'
nl|'\n'
name|'migration_p'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration_p'
op|')'
newline|'\n'
nl|'\n'
comment|'# if the original vm state was STOPPED, set it back to STOPPED'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Updating instance to original state: \'%s\'"'
op|')'
op|','
nl|'\n'
name|'old_vm_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_OFF'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stop_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.revert.end"'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prep_resize
dedent|''
dedent|''
name|'def'
name|'_prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'quotas'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
name|'node'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'instance'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|"'Instance has no source host'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'same_host'
op|'='
name|'instance'
op|'.'
name|'host'
op|'=='
name|'self'
op|'.'
name|'host'
newline|'\n'
comment|"# if the flavor IDs match, it's migrate; otherwise resize"
nl|'\n'
name|'if'
name|'same_host'
name|'and'
name|'instance_type'
op|'.'
name|'id'
op|'=='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
op|':'
newline|'\n'
comment|'# check driver whether support migrate to same host'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|"'supports_migrate_to_same_host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'UnableToMigrateToSelf'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Stash the new instance_type to avoid having to'
nl|'\n'
comment|'# look it up in the database later'
nl|'\n'
dedent|''
dedent|''
name|'instance'
op|'.'
name|'new_flavor'
op|'='
name|'instance_type'
newline|'\n'
comment|'# NOTE(mriedem): Stash the old vm_state so we can set the'
nl|'\n'
comment|'# resized/reverted instance back to the same state later.'
nl|'\n'
name|'vm_state'
op|'='
name|'instance'
op|'.'
name|'vm_state'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Stashing vm_state: %s'"
op|','
name|'vm_state'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'old_vm_state'"
op|']'
op|'='
name|'vm_state'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'limits'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'node'
op|')'
newline|'\n'
name|'with'
name|'rt'
op|'.'
name|'resize_claim'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_meta'
op|'='
name|'image'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
name|'as'
name|'claim'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Migrating'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'resize_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'claim'
op|'.'
name|'migration'
op|','
name|'image'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'quotas'
op|'.'
name|'reservations'
op|','
nl|'\n'
name|'clean_shutdown'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|prep_resize
name|'def'
name|'prep_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'reservations'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
name|'node'
op|','
nl|'\n'
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiates the process of moving a running instance to another host.\n\n        Possibly changes the RAM and disk size in the process.\n\n        """'
newline|'\n'
name|'if'
name|'node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"No node specified, defaulting to %s"'
op|','
name|'node'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(melwitt): Remove this in version 5.0 of the RPC API'
nl|'\n'
comment|'# Code downstream may expect extra_specs to be populated since it'
nl|'\n'
comment|'# is receiving an object, so lookup the flavor to ensure this.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'instance_type'
op|','
name|'objects'
op|'.'
name|'Flavor'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'quotas'
op|'='
name|'quotas'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.prep.start"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_prep_resize'
op|'('
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'quotas'
op|','
nl|'\n'
name|'request_spec'
op|','
name|'filter_properties'
op|','
nl|'\n'
name|'node'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
comment|'# NOTE(dgenin): This is thrown in LibvirtDriver when the'
nl|'\n'
comment|'#               instance to be migrated is backed by LVM.'
nl|'\n'
comment|'#               Remove when LVM migration is implemented.'
nl|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MigrationPreCheckError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# try to re-schedule the resize elsewhere:'
nl|'\n'
indent|'                '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_reschedule_resize_or_reraise'
op|'('
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
nl|'\n'
name|'exc_info'
op|','
name|'instance_type'
op|','
name|'quotas'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'extra_usage_info'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'new_instance_type'
op|'='
name|'instance_type'
op|'.'
name|'name'
op|','
nl|'\n'
name|'new_instance_type_id'
op|'='
name|'instance_type'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.prep.end"'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule_resize_or_reraise
dedent|''
dedent|''
dedent|''
name|'def'
name|'_reschedule_resize_or_reraise'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'quotas'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Try to re-schedule the resize or re-raise the original error to\n        error out the instance.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'request_spec'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'rescheduled'
op|'='
name|'False'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reschedule_method'
op|'='
name|'self'
op|'.'
name|'compute_task_api'
op|'.'
name|'resize_instance'
newline|'\n'
name|'scheduler_hint'
op|'='
name|'dict'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'None'
op|','
name|'scheduler_hint'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'quotas'
op|'.'
name|'reservations'
op|')'
newline|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
nl|'\n'
name|'rescheduled'
op|'='
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance'
op|','
name|'reschedule_method'
op|','
nl|'\n'
name|'method_args'
op|','
name|'task_state'
op|','
name|'exc_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'rescheduled'
op|'='
name|'False'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Error trying to reschedule"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'error'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'resize.error'"
op|','
name|'fault'
op|'='
name|'error'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'rescheduled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'resize.error'"
op|','
name|'fault'
op|'='
name|'exc_info'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# not re-scheduling'
nl|'\n'
indent|'            '
name|'six'
op|'.'
name|'reraise'
op|'('
op|'*'
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'errors_out_migration'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resize_instance
name|'def'
name|'resize_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'reservations'
op|','
name|'migration'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts the migration of a running instance to another host."""'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'quotas'
op|'='
name|'quotas'
op|')'
op|':'
newline|'\n'
comment|'# TODO(chaochin) Remove this until v5 RPC API'
nl|'\n'
comment|'# Code downstream may expect extra_specs to be populated since it'
nl|'\n'
comment|'# is receiving an object, so lookup the flavor to ensure this.'
nl|'\n'
indent|'            '
name|'if'
op|'('
name|'not'
name|'instance_type'
name|'or'
nl|'\n'
name|'not'
name|'isinstance'
op|'('
name|'instance_type'
op|','
name|'objects'
op|'.'
name|'Flavor'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance_type'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'context'
op|','
name|'migration'
op|'['
string|"'new_instance_type_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'migrating'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"resize.start"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'timeout'
op|','
name|'retry_interval'
op|'='
name|'self'
op|'.'
name|'_get_power_off_values'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
name|'disk_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|'.'
name|'dest_host'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'timeout'
op|','
name|'retry_interval'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_terminate_volume_connections'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'migration_p'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration_p'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'post-migrating'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'host'
op|'='
name|'migration'
op|'.'
name|'dest_compute'
newline|'\n'
name|'instance'
op|'.'
name|'node'
op|'='
name|'migration'
op|'.'
name|'dest_node'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'finish_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|','
name|'image'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'migration'
op|'.'
name|'dest_compute'
op|','
name|'reservations'
op|'='
name|'quotas'
op|'.'
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|'"resize.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_events'
op|'.'
name|'clear_events_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_terminate_volume_connections
dedent|''
dedent|''
name|'def'
name|'_terminate_volume_connections'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_set_instance_info
name|'def'
name|'_set_instance_info'
op|'('
name|'instance'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'.'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'.'
name|'id'
newline|'\n'
name|'instance'
op|'.'
name|'memory_mb'
op|'='
name|'instance_type'
op|'.'
name|'memory_mb'
newline|'\n'
name|'instance'
op|'.'
name|'vcpus'
op|'='
name|'instance_type'
op|'.'
name|'vcpus'
newline|'\n'
name|'instance'
op|'.'
name|'root_gb'
op|'='
name|'instance_type'
op|'.'
name|'root_gb'
newline|'\n'
name|'instance'
op|'.'
name|'ephemeral_gb'
op|'='
name|'instance_type'
op|'.'
name|'ephemeral_gb'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'instance_type'
newline|'\n'
nl|'\n'
DECL|member|_finish_resize
dedent|''
name|'def'
name|'_finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|','
name|'disk_info'
op|','
nl|'\n'
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resize_instance'
op|'='
name|'False'
newline|'\n'
name|'old_instance_type_id'
op|'='
name|'migration'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'new_instance_type_id'
op|'='
name|'migration'
op|'['
string|"'new_instance_type_id'"
op|']'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance'
op|'.'
name|'get_flavor'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(mriedem): Get the old_vm_state so we know if we should'
nl|'\n'
comment|'# power on the instance. If old_vm_state is not set we need to default'
nl|'\n'
comment|'# to ACTIVE for backwards compatibility'
nl|'\n'
name|'old_vm_state'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'old_vm_state'"
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'old_flavor'
op|'='
name|'old_instance_type'
newline|'\n'
nl|'\n'
name|'if'
name|'old_instance_type_id'
op|'!='
name|'new_instance_type_id'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance'
op|'.'
name|'get_flavor'
op|'('
string|"'new'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_instance_info'
op|'('
name|'instance'
op|','
name|'instance_type'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
op|'('
string|"'root_gb'"
op|','
string|"'swap'"
op|','
string|"'ephemeral_gb'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'old_instance_type'
op|'['
name|'key'
op|']'
op|'!='
name|'instance_type'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'resize_instance'
op|'='
name|'True'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'instance'
op|'.'
name|'apply_migration_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'migration_p'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration_p'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"finish_resize.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'refresh_conn_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(mriedem): If the original vm_state was STOPPED, we don't"
nl|'\n'
comment|"# automatically power on the instance after it's migrated"
nl|'\n'
name|'power_on'
op|'='
name|'old_vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'finish_migration'
op|'('
name|'context'
op|','
name|'migration'
op|','
name|'instance'
op|','
nl|'\n'
name|'disk_info'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'resize_instance'
op|','
nl|'\n'
name|'block_device_info'
op|','
name|'power_on'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'old_instance_type_id'
op|'!='
name|'new_instance_type_id'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_set_instance_info'
op|'('
name|'instance'
op|','
nl|'\n'
name|'old_instance_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'migration'
op|'.'
name|'status'
op|'='
string|"'finished'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"finish_resize.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'errors_out_migration'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|finish_resize
name|'def'
name|'finish_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'disk_info'
op|','
name|'image'
op|','
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|','
name|'migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Completes the migration process.\n\n        Sets up the newly transferred disk and turns on the instance at its\n        new host machine.\n\n        """'
newline|'\n'
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_finish_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|','
nl|'\n'
name|'disk_info'
op|','
name|'image_meta'
op|')'
newline|'\n'
name|'quotas'
op|'.'
name|'commit'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Setting instance vm_state to ERROR'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed to rollback quota for failed "'
nl|'\n'
string|'"finish_resize"'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|add_fixed_ip_to_instance
name|'def'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to add new fixed_ip to instance\n        then injects the new network info and resets instance networking.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create_ip.start"'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(russellb) We just want to bump updated_at.  See bug 1143466.'
nl|'\n'
name|'instance'
op|'.'
name|'updated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"create_ip.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|remove_fixed_ip_from_instance
name|'def'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'address'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls network_api to remove existing fixed_ip from instance\n        by injecting the altered network info and resetting\n        instance networking.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"delete_ip.start"'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(russellb) We just want to bump updated_at.  See bug 1143466.'
nl|'\n'
name|'instance'
op|'.'
name|'updated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"delete_ip.end"'
op|','
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|pause_instance
name|'def'
name|'pause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Pausing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'pause.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pause'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'PAUSED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'pause.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unpause_instance
name|'def'
name|'unpause_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause a paused instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Unpausing'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unpause.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unpause'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unpause.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|host_power_action
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_power_action'
op|'('
name|'action'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|host_maintenance_mode
name|'def'
name|'host_maintenance_mode'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'host_maintenance_mode'
op|'('
name|'host'
op|','
name|'mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|set_host_enabled
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_host_enabled'
op|'('
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|get_host_uptime
name|'def'
name|'get_host_uptime'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the result of calling "uptime" on the target host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_uptime'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for an instance on this host."""'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'current_power_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Retrieving diagnostics"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'power_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'.'
name|'power_state'
op|','
nl|'\n'
name|'method'
op|'='
string|"'get_diagnostics'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'object_compat'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_instance_diagnostics
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for an instance on this host."""'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'current_power_state'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Retrieving diagnostics"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'diags'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'diags'
op|'.'
name|'serialize'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'power_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'.'
name|'power_state'
op|','
nl|'\n'
name|'method'
op|'='
string|"'get_diagnostics'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|suspend_instance
name|'def'
name|'suspend_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Store the old state'
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'old_vm_state'"
op|']'
op|'='
name|'instance'
op|'.'
name|'vm_state'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'suspend.start'"
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_state'
op|'='
name|'instance'
op|'.'
name|'vm_state'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'suspend'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'suspend.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|resume_instance
name|'def'
name|'resume_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given suspended instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Resuming'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resume.start'"
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'self'
op|'.'
name|'_error_out_instance_on_exception'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_state'
op|'='
name|'instance'
op|'.'
name|'vm_state'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'resume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# We default to the ACTIVE state for backwards compatibility'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'pop'
op|'('
string|"'old_vm_state'"
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resume.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|shelve_instance
name|'def'
name|'shelve_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
nl|'\n'
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shelve an instance.\n\n        This should be used when you want to take a snapshot of the instance.\n        It also adds system_metadata that can be used by a periodic task to\n        offload the shelved instance after a period of time.\n\n        :param context: request context\n        :param instance: an Instance object\n        :param image_id: an image id to snapshot to.\n        :param clean_shutdown: give the GuestOS a chance to stop\n        """'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'current_period'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'shelve.start'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|update_task_state
name|'def'
name|'update_task_state'
op|'('
name|'task_state'
op|','
name|'expected_state'
op|'='
name|'task_states'
op|'.'
name|'SHELVING'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shelving_state_map'
op|'='
op|'{'
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_PENDING_UPLOAD'
op|':'
nl|'\n'
name|'task_states'
op|'.'
name|'SHELVING_IMAGE_PENDING_UPLOAD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'IMAGE_UPLOADING'
op|':'
nl|'\n'
name|'task_states'
op|'.'
name|'SHELVING_IMAGE_UPLOADING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SHELVING'
op|':'
name|'task_states'
op|'.'
name|'SHELVING'
op|'}'
newline|'\n'
name|'task_state'
op|'='
name|'shelving_state_map'
op|'['
name|'task_state'
op|']'
newline|'\n'
name|'expected_state'
op|'='
name|'shelving_state_map'
op|'['
name|'expected_state'
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_state'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_power_off_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_id'
op|','
name|'update_task_state'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'isoformat'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
name|'image_id'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'shelved_offload_time'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SHELVING_OFFLOADING'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
nl|'\n'
name|'task_states'
op|'.'
name|'SHELVING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SHELVING_IMAGE_UPLOADING'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'shelve.end'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'shelved_offload_time'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'shelve_offload_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|shelve_offload_instance
name|'def'
name|'shelve_offload_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a shelved instance from the hypervisor.\n\n        This frees up those resources for use by other instances, but may lead\n        to slower unshelve times for this instance.  This method is used by\n        volume backed instances since restoring them doesn\'t involve the\n        potentially large download of an image.\n\n        :param context: request context\n        :param instance: nova.objects.instance.Instance\n        :param clean_shutdown: give the GuestOS a chance to stop\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'shelve_offload.start'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_power_off_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'cleanup_instance_network_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'current_power_state'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'node'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'SHELVING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SHELVING_OFFLOADING'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'shelve_offload.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|unshelve_instance
name|'def'
name|'unshelve_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unshelve the instance.\n\n        :param context: request context\n        :param instance: a nova.objects.instance.Instance object\n        :param image: an image to build from.  If None we assume a\n            volume backed instance.\n        :param filter_properties: dict containing limits, retry info etc.\n        :param node: target compute node\n        """'
newline|'\n'
name|'if'
name|'filter_properties'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|do_unshelve_instance
name|'def'
name|'do_unshelve_instance'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_unshelve_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'node'
op|')'
newline|'\n'
dedent|''
name|'do_unshelve_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unshelve_instance_key_scrub
dedent|''
name|'def'
name|'_unshelve_instance_key_scrub'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove data from the instance that may cause side effects."""'
newline|'\n'
name|'cleaned_keys'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'key_data'
op|'='
name|'instance'
op|'.'
name|'key_data'
op|','
nl|'\n'
name|'auto_disk_config'
op|'='
name|'instance'
op|'.'
name|'auto_disk_config'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'key_data'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'auto_disk_config'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'cleaned_keys'
newline|'\n'
nl|'\n'
DECL|member|_unshelve_instance_key_restore
dedent|''
name|'def'
name|'_unshelve_instance_key_restore'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore previously scrubbed keys before saving the instance."""'
newline|'\n'
name|'instance'
op|'.'
name|'update'
op|'('
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unshelve_instance
dedent|''
name|'def'
name|'_unshelve_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image'
op|','
name|'filter_properties'
op|','
nl|'\n'
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unshelve.start'"
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_prep_block_device'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
nl|'\n'
name|'do_check_attach'
op|'='
name|'False'
op|')'
newline|'\n'
name|'scrubbed_keys'
op|'='
name|'self'
op|'.'
name|'_unshelve_instance_key_scrub'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'No node specified, defaulting to %s'"
op|','
name|'node'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'node'
op|')'
newline|'\n'
name|'limits'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'limits'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'shelved_image_ref'
op|'='
name|'instance'
op|'.'
name|'image_ref'
newline|'\n'
name|'if'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'image_ref'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
name|'image'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_instance_network_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'rt'
op|'.'
name|'instance_claim'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'limits'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Instance failed to spawn'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'image_ref'
op|'='
name|'shelved_image_ref'
newline|'\n'
name|'self'
op|'.'
name|'_delete_snapshot_of_shelved_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_unshelve_instance_key_restore'
op|'('
name|'instance'
op|','
name|'scrubbed_keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_instance_after_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
comment|'# Delete system_metadata for a shelved instance'
nl|'\n'
name|'compute_utils'
op|'.'
name|'remove_shelved_keys_from_system_metadata'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SPAWNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_scheduler_instance_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unshelve.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Reset network'"
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reset_network'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_inject_network_info
dedent|''
name|'def'
name|'_inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the given instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Inject network info'"
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'network_info to inject: |%s|'"
op|','
name|'network_info'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'inject_network_info'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info, but don\'t return the info."""'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'tail_length'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the console output for the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Get console output"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_console_output'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'type'
op|'('
name|'output'
op|')'
name|'is'
name|'six'
op|'.'
name|'text_type'
op|':'
newline|'\n'
comment|'# the console output will be bytes.'
nl|'\n'
indent|'            '
name|'output'
op|'='
name|'six'
op|'.'
name|'b'
op|'('
name|'output'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'tail_length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
name|'self'
op|'.'
name|'_tail_log'
op|'('
name|'output'
op|','
name|'tail_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'output'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
op|'.'
name|'encode'
op|'('
string|"'ascii'"
op|','
string|"'replace'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tail_log
dedent|''
name|'def'
name|'_tail_log'
op|'('
name|'self'
op|','
name|'log'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'int'
op|'('
name|'length'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"b''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"b'\\n'"
op|'.'
name|'join'
op|'('
name|'log'
op|'.'
name|'split'
op|'('
string|"b'\\n'"
op|')'
op|'['
op|'-'
name|'int'
op|'('
name|'length'
op|')'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a vnc console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting vnc console"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'vnc'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'console_type'
op|'=='
string|"'novnc'"
op|':'
newline|'\n'
comment|'# For essex, novncproxy_base_url must include the full path'
nl|'\n'
comment|'# including the html file (like http://myhost/vnc_auto.html)'
nl|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'vnc'
op|'.'
name|'novncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|"'xvpvnc'"
op|':'
newline|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'vnc'
op|'.'
name|'xvpvncproxy_base_url'
op|','
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
indent|'            '
name|'console'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'='
name|'console'
op|'.'
name|'get_connection_info'
op|'('
name|'token'
op|','
name|'access_url'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_spice_console
name|'def'
name|'get_spice_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a spice console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting spice console"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'spice'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'console_type'
op|'=='
string|"'spice-html5'"
op|':'
newline|'\n'
comment|'# For essex, spicehtml5proxy_base_url must include the full path'
nl|'\n'
comment|'# including the html file (like http://myhost/spice_auto.html)'
nl|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'spice'
op|'.'
name|'html5proxy_base_url'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
indent|'            '
name|'console'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_spice_console'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'='
name|'console'
op|'.'
name|'get_connection_info'
op|'('
name|'token'
op|','
name|'access_url'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_rdp_console
name|'def'
name|'get_rdp_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a RDP console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting RDP console"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'rdp'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'console_type'
op|'=='
string|"'rdp-html5'"
op|':'
newline|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'rdp'
op|'.'
name|'html5_proxy_base_url'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
indent|'            '
name|'console'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_rdp_console'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'='
name|'console'
op|'.'
name|'get_connection_info'
op|'('
name|'token'
op|','
name|'access_url'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_mks_console
name|'def'
name|'get_mks_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return connection information for a MKS console."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting MKS console"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'mks'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'console_type'
op|'=='
string|"'webmks'"
op|':'
newline|'\n'
indent|'            '
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'mks'
op|'.'
name|'mksproxy_base_url'
op|','
nl|'\n'
name|'token'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
indent|'            '
name|'console'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_mks_console'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'='
name|'console'
op|'.'
name|'get_connection_info'
op|'('
name|'token'
op|','
name|'access_url'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'SocketPortRangeExhaustedException'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ImageSerialPortNumberInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'ImageSerialPortNumberExceedFlavorValue'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|get_serial_console
name|'def'
name|'get_serial_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'console_type'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns connection information for a serial console."""'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Getting serial console"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'serial_console'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|'('
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'token'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'access_url'
op|'='
string|"'%s?token=%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'serial_console'
op|'.'
name|'base_url'
op|','
name|'token'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Retrieve connect info from driver, and then decorate with our'
nl|'\n'
comment|'# access info token'
nl|'\n'
indent|'            '
name|'console'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_serial_console'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'connect_info'
op|'='
name|'console'
op|'.'
name|'get_connection_info'
op|'('
name|'token'
op|','
name|'access_url'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|validate_console_port
name|'def'
name|'validate_console_port'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'port'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'console_type'
op|'=='
string|'"spice-html5"'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_spice_console'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|'"rdp-html5"'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_rdp_console'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|'"serial"'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_serial_console'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'console_type'
op|'=='
string|'"webmks"'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_mks_console'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'console_info'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_vnc_console'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'console_info'
op|'.'
name|'port'
op|'=='
name|'port'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|reserve_block_device_name
name|'def'
name|'reserve_block_device_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'device'
op|','
nl|'\n'
name|'volume_id'
op|','
name|'disk_bus'
op|','
name|'device_type'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|do_reserve
name|'def'
name|'do_reserve'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
op|'('
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ndipanov): We need to explicitly set all the fields on the'
nl|'\n'
comment|'#                 object so that obj_load_attr does not fail'
nl|'\n'
name|'new_bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'source_type'
op|'='
string|"'volume'"
op|','
name|'destination_type'
op|'='
string|"'volume'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|','
name|'boot_index'
op|'='
name|'None'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'volume_id'
op|','
nl|'\n'
name|'device_name'
op|'='
name|'device'
op|','
name|'guest_format'
op|'='
name|'None'
op|','
nl|'\n'
name|'disk_bus'
op|'='
name|'disk_bus'
op|','
name|'device_type'
op|'='
name|'device_type'
op|')'
newline|'\n'
nl|'\n'
name|'new_bdm'
op|'.'
name|'device_name'
op|'='
name|'self'
op|'.'
name|'_get_device_name_for_instance'
op|'('
nl|'\n'
name|'instance'
op|','
name|'bdms'
op|','
name|'new_bdm'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): create bdm here to avoid race condition'
nl|'\n'
name|'new_bdm'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'return'
name|'new_bdm'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'do_reserve'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach a volume to an instance."""'
newline|'\n'
name|'driver_bdm'
op|'='
name|'driver_block_device'
op|'.'
name|'convert_volume'
op|'('
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|do_attach_volume
name|'def'
name|'do_attach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'driver_bdm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'_attach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'driver_bdm'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'bdm'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'do_attach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'driver_bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_attach_volume
dedent|''
name|'def'
name|'_attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Attaching volume %(volume_id)s to %(mountpoint)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'bdm'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'mountpoint'"
op|':'
name|'bdm'
op|'['
string|"'mount_device'"
op|']'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'.'
name|'attach'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'volume_api'
op|','
name|'self'
op|'.'
name|'driver'
op|','
nl|'\n'
name|'do_check_attach'
op|'='
name|'False'
op|','
name|'do_driver_attach'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed to attach %(volume_id)s "'
nl|'\n'
string|'"at %(mountpoint)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'bdm'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'mountpoint'"
op|':'
name|'bdm'
op|'['
string|"'mount_device'"
op|']'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'unreserve_volume'
op|'('
name|'context'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'info'
op|'='
op|'{'
string|"'volume_id'"
op|':'
name|'bdm'
op|'.'
name|'volume_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"volume.attach"'
op|','
name|'extra_usage_info'
op|'='
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_driver_detach_volume
dedent|''
name|'def'
name|'_driver_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Do the actual driver detach using block device mapping."""'
newline|'\n'
name|'mp'
op|'='
name|'bdm'
op|'.'
name|'device_name'
newline|'\n'
name|'volume_id'
op|'='
name|'bdm'
op|'.'
name|'volume_id'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Detach volume %(volume_id)s from mountpoint %(mp)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
string|"'mp'"
op|':'
name|'mp'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'connection_info'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'.'
name|'connection_info'
op|')'
newline|'\n'
comment|"# NOTE(vish): We currently don't use the serial when disconnecting,"
nl|'\n'
comment|'#             but added for completeness in case we ever do.'
nl|'\n'
name|'if'
name|'connection_info'
name|'and'
string|"'serial'"
name|'not'
name|'in'
name|'connection_info'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'serial'"
op|']'
op|'='
name|'volume_id'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Detaching volume from unknown instance'"
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'encryption'
op|'='
name|'encryptors'
op|'.'
name|'get_encryption_metadata'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'volume_api'
op|','
name|'volume_id'
op|','
name|'connection_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_volume'
op|'('
name|'connection_info'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'mp'
op|','
nl|'\n'
name|'encryption'
op|'='
name|'encryption'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'DiskNotFound'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Ignoring DiskNotFound exception while detaching '"
nl|'\n'
string|"'volume %(volume_id)s from %(mp)s: %(err)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
string|"'mp'"
op|':'
name|'mp'
op|','
string|"'err'"
op|':'
name|'err'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to detach volume %(volume_id)s '"
nl|'\n'
string|"'from %(mp)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
string|"'mp'"
op|':'
name|'mp'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'roll_detaching'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_detach_volume
dedent|''
dedent|''
dedent|''
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|','
name|'destroy_bdm'
op|'='
name|'True'
op|','
nl|'\n'
name|'attachment_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance.\n\n        :param context: security context\n        :param volume_id: the volume id\n        :param instance: the Instance object to detach the volume from\n        :param destroy_bdm: if True, the corresponding BDM entry will be marked\n                            as deleted. Disabling this is useful for operations\n                            like rebuild, when we don\'t want to destroy BDM\n\n        """'
newline|'\n'
nl|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'.'
name|'get_by_volume_and_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'if'
name|'CONF'
op|'.'
name|'volume_usage_poll_interval'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'vol_stats'
op|'='
op|'['
op|']'
newline|'\n'
name|'mp'
op|'='
name|'bdm'
op|'.'
name|'device_name'
newline|'\n'
comment|'# Handle bootable volumes which will not contain /dev/'
nl|'\n'
name|'if'
string|"'/dev/'"
name|'in'
name|'mp'
op|':'
newline|'\n'
indent|'                '
name|'mp'
op|'='
name|'mp'
op|'['
number|'5'
op|':'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'vol_stats'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'block_stats'
op|'('
name|'instance'
op|','
name|'mp'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vol_stats'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Updating volume usage cache with totals"'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'rd_req'
op|','
name|'rd_bytes'
op|','
name|'wr_req'
op|','
name|'wr_bytes'
op|','
name|'flush_ops'
op|'='
name|'vol_stats'
newline|'\n'
name|'vol_usage'
op|'='
name|'objects'
op|'.'
name|'VolumeUsage'
op|'('
name|'context'
op|')'
newline|'\n'
name|'vol_usage'
op|'.'
name|'volume_id'
op|'='
name|'volume_id'
newline|'\n'
name|'vol_usage'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'vol_usage'
op|'.'
name|'project_id'
op|'='
name|'instance'
op|'.'
name|'project_id'
newline|'\n'
name|'vol_usage'
op|'.'
name|'user_id'
op|'='
name|'instance'
op|'.'
name|'user_id'
newline|'\n'
name|'vol_usage'
op|'.'
name|'availability_zone'
op|'='
name|'instance'
op|'.'
name|'availability_zone'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_reads'
op|'='
name|'rd_req'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_read_bytes'
op|'='
name|'rd_bytes'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_writes'
op|'='
name|'wr_req'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_write_bytes'
op|'='
name|'wr_bytes'
newline|'\n'
name|'vol_usage'
op|'.'
name|'save'
op|'('
name|'update_totals'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
string|"'volume.usage'"
op|','
nl|'\n'
name|'compute_utils'
op|'.'
name|'usage_volume_info'
op|'('
name|'vol_usage'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_driver_detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'connector'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'destroy_bdm'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
name|'dict'
op|'('
name|'volume_id'
op|'='
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"volume.detach"'
op|','
name|'extra_usage_info'
op|'='
name|'info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'volume_id'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'attachment_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|','
name|'attachment_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|','
nl|'\n'
name|'attachment_id'
op|'='
name|'attachment_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_init_volume_connection
dedent|''
name|'def'
name|'_init_volume_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'new_volume_id'
op|','
nl|'\n'
name|'old_volume_id'
op|','
name|'connector'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'new_cinfo'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'initialize_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'new_volume_id'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'old_cinfo'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'old_cinfo'
name|'and'
string|"'serial'"
name|'not'
name|'in'
name|'old_cinfo'
op|':'
newline|'\n'
indent|'            '
name|'old_cinfo'
op|'['
string|"'serial'"
op|']'
op|'='
name|'old_volume_id'
newline|'\n'
dedent|''
name|'new_cinfo'
op|'['
string|"'serial'"
op|']'
op|'='
name|'old_cinfo'
op|'['
string|"'serial'"
op|']'
newline|'\n'
name|'return'
op|'('
name|'old_cinfo'
op|','
name|'new_cinfo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_swap_volume
dedent|''
name|'def'
name|'_swap_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|','
name|'connector'
op|','
nl|'\n'
name|'old_volume_id'
op|','
name|'new_volume_id'
op|','
name|'resize_to'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mountpoint'
op|'='
name|'bdm'
op|'['
string|"'device_name'"
op|']'
newline|'\n'
name|'failed'
op|'='
name|'False'
newline|'\n'
name|'new_cinfo'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'old_cinfo'
op|','
name|'new_cinfo'
op|'='
name|'self'
op|'.'
name|'_init_volume_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'new_volume_id'
op|','
nl|'\n'
name|'old_volume_id'
op|','
nl|'\n'
name|'connector'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'bdm'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"swap_volume: Calling driver volume swap with "'
nl|'\n'
string|'"connection infos: new: %(new_cinfo)s; "'
nl|'\n'
string|'"old: %(old_cinfo)s"'
op|','
nl|'\n'
op|'{'
string|"'new_cinfo'"
op|':'
name|'new_cinfo'
op|','
string|"'old_cinfo'"
op|':'
name|'old_cinfo'
op|'}'
op|','
nl|'\n'
name|'contex'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'swap_volume'
op|'('
name|'old_cinfo'
op|','
name|'new_cinfo'
op|','
name|'instance'
op|','
name|'mountpoint'
op|','
nl|'\n'
name|'resize_to'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'failed'
op|'='
name|'True'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'new_cinfo'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_LE'
op|'('
string|'"Failed to swap volume %(old_volume_id)s "'
nl|'\n'
string|'"for %(new_volume_id)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'{'
string|"'old_volume_id'"
op|':'
name|'old_volume_id'
op|','
nl|'\n'
string|"'new_volume_id'"
op|':'
name|'new_volume_id'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_LE'
op|'('
string|'"Failed to connect to volume %(volume_id)s "'
nl|'\n'
string|'"with volume at %(mountpoint)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'{'
string|"'volume_id'"
op|':'
name|'new_volume_id'
op|','
nl|'\n'
string|"'mountpoint'"
op|':'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'roll_detaching'
op|'('
name|'context'
op|','
name|'old_volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'unreserve_volume'
op|'('
name|'context'
op|','
name|'new_volume_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'conn_volume'
op|'='
name|'new_volume_id'
name|'if'
name|'failed'
name|'else'
name|'old_volume_id'
newline|'\n'
name|'if'
name|'new_cinfo'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"swap_volume: calling Cinder terminate_connection "'
nl|'\n'
string|'"for %(volume)s"'
op|','
op|'{'
string|"'volume'"
op|':'
name|'conn_volume'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'conn_volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
comment|'# If Cinder initiated the swap, it will keep'
nl|'\n'
comment|'# the original ID'
nl|'\n'
dedent|''
name|'comp_ret'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'migrate_volume_completion'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'old_volume_id'
op|','
nl|'\n'
name|'new_volume_id'
op|','
nl|'\n'
name|'error'
op|'='
name|'failed'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"swap_volume: Cinder migrate_volume_completion "'
nl|'\n'
string|'"returned: %(comp_ret)s"'
op|','
op|'{'
string|"'comp_ret'"
op|':'
name|'comp_ret'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'comp_ret'
op|','
name|'new_cinfo'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'reverts_task_state'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|swap_volume
name|'def'
name|'swap_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'old_volume_id'
op|','
name|'new_volume_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Swap volume for an instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'.'
name|'get_by_volume_and_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'old_volume_id'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'resize_to'
op|'='
number|'0'
newline|'\n'
name|'old_vol_size'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'old_volume_id'
op|')'
op|'['
string|"'size'"
op|']'
newline|'\n'
name|'new_vol_size'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'new_volume_id'
op|')'
op|'['
string|"'size'"
op|']'
newline|'\n'
name|'if'
name|'new_vol_size'
op|'>'
name|'old_vol_size'
op|':'
newline|'\n'
indent|'            '
name|'resize_to'
op|'='
name|'new_vol_size'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Swapping volume %(old_volume)s for %(new_volume)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'old_volume'"
op|':'
name|'old_volume_id'
op|','
string|"'new_volume'"
op|':'
name|'new_volume_id'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'comp_ret'
op|','
name|'new_cinfo'
op|'='
name|'self'
op|'.'
name|'_swap_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdm'
op|','
nl|'\n'
name|'connector'
op|','
nl|'\n'
name|'old_volume_id'
op|','
nl|'\n'
name|'new_volume_id'
op|','
nl|'\n'
name|'resize_to'
op|')'
newline|'\n'
nl|'\n'
name|'save_volume_id'
op|'='
name|'comp_ret'
op|'['
string|"'save_volume_id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Update bdm'
nl|'\n'
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'connection_info'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'new_cinfo'
op|')'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'save_volume_id'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'resize_to'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'volume_size'"
op|']'
op|'='
name|'resize_to'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"swap_volume: Updating volume %(volume_id)s BDM record with "'
nl|'\n'
string|'"%(updates)s"'
op|','
op|'{'
string|"'volume_id'"
op|':'
name|'bdm'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'updates'"
op|':'
name|'values'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'bdm'
op|'.'
name|'update'
op|'('
name|'values'
op|')'
newline|'\n'
name|'bdm'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|remove_volume_connection
name|'def'
name|'remove_volume_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a volume connection using the volume api."""'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'.'
name|'get_by_volume_and_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_driver_detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'connector'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|attach_interface
name|'def'
name|'attach_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_id'
op|','
name|'port_id'
op|','
nl|'\n'
name|'requested_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use hotplug to add an network adapter to an instance."""'
newline|'\n'
name|'bind_host_id'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'network_binding_host_id'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_port_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|','
name|'network_id'
op|','
name|'requested_ip'
op|','
nl|'\n'
name|'bind_host_id'
op|'='
name|'bind_host_id'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'network_info'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'allocate_port_for_instance returned %(ports)s '"
nl|'\n'
string|"'ports'"
op|')'
op|','
op|'{'
string|"'ports'"
op|':'
name|'len'
op|'('
name|'network_info'
op|')'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'attach_interface'
op|'('
name|'instance'
op|','
name|'image_meta'
op|','
name|'network_info'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'port_id'
op|'='
name|'network_info'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"attach interface failed , try to deallocate "'
nl|'\n'
string|'"port %(port_id)s, reason: %(msg)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'port_id'"
op|':'
name|'port_id'
op|','
string|"'msg'"
op|':'
name|'ex'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_port_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|'"deallocate port %(port_id)s failed"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'port_id'"
op|':'
name|'port_id'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'network_info'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|detach_interface
name|'def'
name|'detach_interface'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach an network adapter from an instance."""'
newline|'\n'
name|'network_info'
op|'='
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'network_info'
newline|'\n'
name|'condemned'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'=='
name|'port_id'
op|':'
newline|'\n'
indent|'                '
name|'condemned'
op|'='
name|'vif'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'condemned'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'PortNotFound'
op|'('
name|'_'
op|'('
string|'"Port %s is not "'
nl|'\n'
string|'"attached"'
op|')'
op|'%'
name|'port_id'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_interface'
op|'('
name|'instance'
op|','
name|'condemned'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Detach interface failed, port_id=%(port_id)s,"'
nl|'\n'
string|'" reason: %(msg)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'port_id'"
op|':'
name|'port_id'
op|','
string|"'msg'"
op|':'
name|'ex'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InterfaceDetachFailed'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_port_for_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Since this is a cast operation, log the failure for'
nl|'\n'
comment|'# triage.'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Failed to deallocate port %(port_id)s '"
nl|'\n'
string|"'for instance. Error: %(error)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'port_id'"
op|':'
name|'port_id'
op|','
string|"'error'"
op|':'
name|'ex'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_compute_info
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_compute_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'objects'
op|'.'
name|'ComputeNode'
op|'.'
name|'get_first_node_by_host_for_old_compat'
op|'('
nl|'\n'
name|'context'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|check_instance_shared_storage
name|'def'
name|'check_instance_shared_storage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if the instance files are shared\n\n        :param ctxt: security context\n        :param instance: dict of instance data\n        :param data: result of driver.check_instance_shared_storage_local\n\n        Returns True if instance disks located on shared storage and\n        False otherwise.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_instance_shared_storage_remote'
op|'('
name|'ctxt'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|check_can_live_migrate_destination
name|'def'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'disk_over_commit'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it is possible to execute live migration.\n\n        This runs checks on the destination host, and then calls\n        back to the source host to check the results.\n\n        :param context: security context\n        :param instance: dict of instance data\n        :param block_migration: if true, prepare for block migration\n        :param disk_over_commit: if true, allow disk over commit\n        :returns: a dict containing migration info\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_do_check_can_live_migrate_destination'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|','
nl|'\n'
name|'disk_over_commit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_check_can_live_migrate_destination
dedent|''
name|'def'
name|'_do_check_can_live_migrate_destination'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|','
nl|'\n'
name|'disk_over_commit'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'src_compute_info'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_get_compute_info'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'.'
name|'host'
op|')'
op|')'
newline|'\n'
name|'dst_compute_info'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_get_compute_info'
op|'('
name|'ctxt'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
op|')'
newline|'\n'
name|'dest_check_data'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'src_compute_info'
op|','
name|'dst_compute_info'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'disk_over_commit'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'dest_check_data'
op|','
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dest_check_data'
op|'='
name|'dest_check_data'
op|'.'
name|'to_legacy_dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'migrate_data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'migrate_data'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination_cleanup'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'dest_check_data'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'migrate_data'"
name|'in'
name|'dest_check_data'
op|':'
newline|'\n'
indent|'            '
name|'migrate_data'
op|'.'
name|'update'
op|'('
name|'dest_check_data'
op|'['
string|"'migrate_data'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'migrate_data'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|check_can_live_migrate_source
name|'def'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'dest_check_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if it is possible to execute live migration.\n\n        This checks if the live migration can succeed, based on the\n        results from check_can_live_migrate_destination.\n\n        :param ctxt: security context\n        :param instance: dict of instance data\n        :param dest_check_data: result of check_can_live_migrate_destination\n        :returns: a dict containing migration info\n        """'
newline|'\n'
name|'is_volume_backed'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'dest_check_data'
op|'['
string|"'is_volume_backed'"
op|']'
op|'='
name|'is_volume_backed'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance'
op|','
name|'refresh_conn_info'
op|'='
name|'True'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest_check_data'
op|','
nl|'\n'
name|'block_device_info'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'result'
op|'.'
name|'to_legacy_dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|pre_live_migration
name|'def'
name|'pre_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'block_migration'
op|','
name|'disk'
op|','
nl|'\n'
name|'migrate_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Preparations for live migration at dest host.\n\n        :param context: security context\n        :param instance: dict of instance data\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data: if not None, it is a dict which holds data\n                             required for live migration without shared\n                             storage.\n\n        """'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'refresh_conn_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"live_migration.pre.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'pre_live_migration_data'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'disk'
op|','
nl|'\n'
name|'migrate_data'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'pre_live_migration_data'
op|','
nl|'\n'
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pre_live_migration_data'
op|'='
name|'pre_live_migration_data'
op|'.'
name|'to_legacy_dict'
op|'('
nl|'\n'
name|'pre_migration_result'
op|'='
name|'True'
op|')'
newline|'\n'
name|'pre_live_migration_data'
op|'='
name|'pre_live_migration_data'
op|'['
nl|'\n'
string|"'pre_live_migration_result'"
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating filters to hypervisors and firewalls.'
nl|'\n'
comment|'# An example is that nova-instance-instance-xxx,'
nl|'\n'
comment|'# which is written to libvirt.xml(Check "virsh nwfilter-list")'
nl|'\n'
comment|'# This nwfilter is necessary on the destination host.'
nl|'\n'
comment|'# In addition, this method is creating filtering rule'
nl|'\n'
comment|'# onto destination host.'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"live_migration.pre.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'pre_live_migration_data'
newline|'\n'
nl|'\n'
DECL|member|_get_migrate_data_obj
dedent|''
name|'def'
name|'_get_migrate_data_obj'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# FIXME(danms): A couple patches from now, we'll be able to"
nl|'\n'
comment|'# avoid this failure _if_ we get a new-style call with the'
nl|'\n'
comment|'# object.'
nl|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'compute_driver'
op|'.'
name|'startswith'
op|'('
string|"'libvirt'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'objects'
op|'.'
name|'LibvirtLiveMigrateData'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'CONF'
op|'.'
name|'compute_driver'
op|'.'
name|'startswith'
op|'('
string|"'xenapi'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'objects'
op|'.'
name|'XenapiLiveMigrateData'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Older RPC caller and unsupported virt driver in '"
nl|'\n'
string|"'use. Unable to handle this!'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MigrationError'
op|'('
nl|'\n'
name|'_'
op|'('
string|"'Unknown compute driver while providing compatibility '"
nl|'\n'
string|"'with older RPC formats'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_live_migration
dedent|''
dedent|''
name|'def'
name|'_do_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'dest'
op|','
name|'instance'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'migration'
op|','
name|'migrate_data'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): We should enhance the RT to account for migrations'
nl|'\n'
comment|'# and use the status field to denote when the accounting has been'
nl|'\n'
comment|'# done on source/destination. For now, this is just here for status'
nl|'\n'
comment|'# reporting'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'preparing'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Create a local copy since we'll be modifying the dictionary"
nl|'\n'
name|'migrate_data'
op|'='
name|'dict'
op|'('
name|'migrate_data'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'block_migration'
op|':'
newline|'\n'
indent|'                '
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'disk'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
nl|'\n'
name|'instance'
op|','
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'disk'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'pre_migration_data'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'pre_live_migration'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'disk'
op|','
name|'dest'
op|','
name|'migrate_data'
op|')'
newline|'\n'
name|'migrate_data'
op|'['
string|"'pre_live_migration_result'"
op|']'
op|'='
name|'pre_migration_data'
newline|'\n'
name|'migrate_data_object'
op|'='
name|'self'
op|'.'
name|'_get_migrate_data_obj'
op|'('
op|')'
newline|'\n'
name|'migrate_data_object'
op|'.'
name|'from_legacy_dict'
op|'('
name|'migrate_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Pre live migration failed at %s'"
op|')'
op|','
nl|'\n'
name|'dest'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'failed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_rollback_live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'running'"
op|')'
newline|'\n'
nl|'\n'
name|'migrate_data_object'
op|'.'
name|'migration'
op|'='
name|'migration'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_rollback_live_migration'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data_object'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# Executing live migration'
nl|'\n'
comment|'# live_migration might raises exceptions, but'
nl|'\n'
comment|'# nothing must be recovered in this version.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Live migration failed.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'failed'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|live_migration
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'dest'
op|','
name|'instance'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'migration'
op|','
name|'migrate_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Executing live migration.\n\n        :param context: security context\n        :param dest: destination host\n        :param instance: a nova.objects.instance.Instance object\n        :param block_migration: if true, prepare for block migration\n        :param migration: an nova.objects.Migration object\n        :param migrate_data: implementation specific params\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'queued'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|dispatch_live_migration
name|'def'
name|'dispatch_live_migration'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'self'
op|'.'
name|'_live_migration_semaphore'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_do_live_migration'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): We spawn here to return the RPC worker thread back to'
nl|'\n'
comment|"# the pool. Since what follows could take a really long time, we don't"
nl|'\n'
comment|'# want to tie up RPC workers.'
nl|'\n'
dedent|''
dedent|''
name|'utils'
op|'.'
name|'spawn_n'
op|'('
name|'dispatch_live_migration'
op|','
nl|'\n'
name|'context'
op|','
name|'dest'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'migration'
op|','
nl|'\n'
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_live_migration_cleanup_flags
dedent|''
name|'def'
name|'_live_migration_cleanup_flags'
op|'('
name|'self'
op|','
name|'block_migration'
op|','
name|'migrate_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine whether disks or instance path need to be cleaned up after\n        live migration (at source on success, at destination on rollback)\n\n        Block migration needs empty image at destination host before migration\n        starts, so if any failure occurs, any empty images has to be deleted.\n\n        Also Volume backed live migration w/o shared storage needs to delete\n        newly created instance-xxx dir on the destination as a part of its\n        rollback process\n\n        :param block_migration: if true, it was a block migration\n        :param migrate_data: implementation specific data\n        :returns: (bool, bool) -- do_cleanup, destroy_disks\n        """'
newline|'\n'
comment|"# NOTE(angdraug): block migration wouldn't have been allowed if either"
nl|'\n'
comment|'#                 block storage or instance path were shared'
nl|'\n'
name|'is_shared_block_storage'
op|'='
name|'not'
name|'block_migration'
newline|'\n'
name|'is_shared_instance_path'
op|'='
name|'not'
name|'block_migration'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'migrate_data'
op|','
name|'migrate_data_obj'
op|'.'
name|'LibvirtLiveMigrateData'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'is_shared_block_storage'
op|'='
name|'migrate_data'
op|'.'
name|'is_shared_block_storage'
newline|'\n'
name|'is_shared_instance_path'
op|'='
name|'migrate_data'
op|'.'
name|'is_shared_instance_path'
newline|'\n'
nl|'\n'
comment|'# No instance booting at source host, but instance dir'
nl|'\n'
comment|'# must be deleted for preparing next block migration'
nl|'\n'
comment|'# must be deleted for preparing next live migration w/o shared storage'
nl|'\n'
dedent|''
name|'do_cleanup'
op|'='
name|'block_migration'
name|'or'
name|'not'
name|'is_shared_instance_path'
newline|'\n'
name|'destroy_disks'
op|'='
name|'not'
name|'is_shared_block_storage'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'do_cleanup'
op|','
name|'destroy_disks'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|_post_live_migration
name|'def'
name|'_post_live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|'='
name|'False'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration.\n\n        This method is called from live_migration\n        and mainly updating database record.\n\n        :param ctxt: security context\n        :param instance: instance dict\n        :param dest: destination host\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data: if not None, it is a dict which has data\n        required for live migration without shared storage\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'_post_live_migration() is started..'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup source host post live-migration'
nl|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
comment|'# Detaching volumes.'
nl|'\n'
name|'connector'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_volume_connector'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
comment|"# NOTE(vish): We don't want to actually mark the volume"
nl|'\n'
comment|'#             detached, or delete the bdm, just remove the'
nl|'\n'
comment|'#             connection from this host.'
nl|'\n'
nl|'\n'
comment|'# remove the volume connection without detaching from hypervisor'
nl|'\n'
comment|'# because the instance is not running anymore on the current host'
nl|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'ctxt'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
nl|'\n'
comment|'# Releasing vlan.'
nl|'\n'
comment|'# (not necessary in current implementation?)'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
string|'"live_migration._post.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
comment|'# Releasing security group ingress rule.'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Calling driver.unfilter_instance from _post_live_migration'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'dest'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'destroy_vifs'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_source'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'ex'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# For all hypervisors other than libvirt, there is a possibility'
nl|'\n'
comment|'# they are unplugging networks from source node in the cleanup'
nl|'\n'
comment|'# method'
nl|'\n'
name|'destroy_vifs'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Define domain at destination host, without doing it,'
nl|'\n'
comment|'# pause/suspend/terminate do not work.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'block_migration'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
name|'do_cleanup'
op|','
name|'destroy_disks'
op|'='
name|'self'
op|'.'
name|'_live_migration_cleanup_flags'
op|'('
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'do_cleanup'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Calling driver.cleanup from _post_live_migration'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'cleanup'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|','
nl|'\n'
name|'destroy_vifs'
op|'='
name|'destroy_vifs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'instance_events'
op|'.'
name|'clear_events_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(timello): make sure we update available resources on source'
nl|'\n'
comment|'# host even before next periodic task.'
nl|'\n'
name|'self'
op|'.'
name|'update_available_resource'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_scheduler_instance_info'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
string|'"live_migration._post.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Migrating instance to %s finished successfully.'"
op|')'
op|','
nl|'\n'
name|'dest'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"You may see the error \\"libvirt: QEMU error: "'
nl|'\n'
string|'"Domain not found: no domain with matching name.\\" "'
nl|'\n'
string|'"This error can be safely ignored."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_clean_instance_console_tokens'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'migrate_data'
name|'and'
name|'migrate_data'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'migration'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'migrate_data'
op|'.'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'completed'"
newline|'\n'
name|'migrate_data'
op|'.'
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_consoles_enabled
dedent|''
dedent|''
name|'def'
name|'_consoles_enabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns whether a console is enable."""'
newline|'\n'
name|'return'
op|'('
name|'CONF'
op|'.'
name|'vnc'
op|'.'
name|'enabled'
name|'or'
name|'CONF'
op|'.'
name|'spice'
op|'.'
name|'enabled'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'rdp'
op|'.'
name|'enabled'
name|'or'
name|'CONF'
op|'.'
name|'serial_console'
op|'.'
name|'enabled'
name|'or'
nl|'\n'
name|'CONF'
op|'.'
name|'mks'
op|'.'
name|'enabled'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_clean_instance_console_tokens
dedent|''
name|'def'
name|'_clean_instance_console_tokens'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clean console tokens stored for an instance."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_consoles_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'enable'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'consoleauth_delete_tokens'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'delete_tokens_for_instance'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|post_live_migration_at_destination
name|'def'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Post operations for live migration .\n\n        :param context: security context\n        :param instance: Instance dict\n        :param block_migration: if true, prepare for block migration\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Post operation of migration started'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): setup networks on destination host'
nl|'\n'
comment|'#                  this is called a second time because'
nl|'\n'
comment|'#                  multi_host does not create the bridge in'
nl|'\n'
comment|'#                  plug_vifs'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'instance'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"live_migration.post.dest.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'block_migration'
op|','
name|'block_device_info'
op|')'
newline|'\n'
comment|'# Restore instance state'
nl|'\n'
name|'current_power_state'
op|'='
name|'self'
op|'.'
name|'_get_power_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'node_name'
op|'='
name|'None'
newline|'\n'
name|'prev_host'
op|'='
name|'instance'
op|'.'
name|'host'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_get_compute_info'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'node_name'
op|'='
name|'compute_node'
op|'.'
name|'hypervisor_hostname'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to get compute_info for %s'"
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'current_power_state'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'node'
op|'='
name|'node_name'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(tr3buchet): tear down networks on source host'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'prev_host'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# NOTE(vish): this is necessary to update dhcp'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"live_migration.post.dest.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|_rollback_live_migration
name|'def'
name|'_rollback_live_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'dest'
op|','
name|'block_migration'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recovers Instance/volume state from migrating -> running.\n\n        :param context: security context\n        :param instance: nova.objects.instance.Instance object\n        :param dest:\n            This method is called from live migration src host.\n            This param specifies destination host.\n        :param block_migration: if true, prepare for block migration\n        :param migrate_data:\n            if not none, contains implementation specific data.\n\n        """'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'MIGRATING'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(danms): Pop out the migration object so we don't pass"
nl|'\n'
comment|'# it over RPC unintentionally below'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'migrate_data'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'migrate_data'
op|'.'
name|'pop'
op|'('
string|"'migration'"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'migrate_data'
op|','
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'migrate_data'
op|'.'
name|'migration'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# NOTE(tr3buchet): setup networks on source host (really it's re-setup)"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_volume_connection'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|'.'
name|'volume_id'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"live_migration._rollback.start"'
op|')'
newline|'\n'
nl|'\n'
name|'do_cleanup'
op|','
name|'destroy_disks'
op|'='
name|'self'
op|'.'
name|'_live_migration_cleanup_flags'
op|'('
nl|'\n'
name|'block_migration'
op|','
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'do_cleanup'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'migrate_data'
op|','
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migrate_data'
op|'='
name|'migrate_data'
op|'.'
name|'to_legacy_dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'dest'
op|','
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"live_migration._rollback.end"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_migration_status'
op|'('
name|'migration'
op|','
string|"'error'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
op|'@'
name|'wrap_instance_event'
newline|'\n'
op|'@'
name|'wrap_instance_fault'
newline|'\n'
DECL|member|rollback_live_migration_at_destination
name|'def'
name|'rollback_live_migration_at_destination'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'destroy_disks'
op|','
nl|'\n'
name|'migrate_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleaning up image directory that is created pre_live_migration.\n\n        :param context: security context\n        :param instance: a nova.objects.instance.Instance object sent over rpc\n        """'
newline|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"live_migration.rollback.dest.start"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(tr3buchet): tear down networks on destination host'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# NOTE(tdurakov): even if teardown networks fails driver'
nl|'\n'
comment|'# should try to rollback live migration on destination.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_LE'
op|'('
string|"'An error occurred while deallocating network.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# always run this even if setup_networks_on_host fails'
nl|'\n'
comment|'# NOTE(vish): The mapping is passed in so the driver can disconnect'
nl|'\n'
comment|'#             from remote volumes if necessary'
nl|'\n'
indent|'            '
name|'block_device_info'
op|'='
name|'self'
op|'.'
name|'_get_instance_block_device_info'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'destroy_disks'
op|','
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"live_migration.rollback.dest.end"'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'heal_instance_info_cache_interval'
op|')'
newline|'\n'
DECL|member|_heal_instance_info_cache
name|'def'
name|'_heal_instance_info_cache'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called periodically.  On every call, try to update the\n        info_cache\'s network information for another instance by\n        calling to the network manager.\n\n        This is implemented by keeping a cache of uuids of instances\n        that live on this host.  On each call, we pop one off of a\n        list, pull the DB record, and try the call to the network API.\n        If anything errors don\'t fail, as it\'s possible the instance\n        has been deleted, etc.\n        """'
newline|'\n'
name|'heal_interval'
op|'='
name|'CONF'
op|'.'
name|'heal_instance_info_cache_interval'
newline|'\n'
name|'if'
name|'not'
name|'heal_interval'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_uuids'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'_instance_uuids_to_heal'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Starting heal instance info cache'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'instance_uuids'
op|':'
newline|'\n'
comment|'# The list of instances to heal is empty so rebuild it'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Rebuilding the list of instances to heal'"
op|')'
newline|'\n'
name|'db_instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'inst'
name|'in'
name|'db_instances'
op|':'
newline|'\n'
comment|"# We don't want to refresh the cache for instances"
nl|'\n'
comment|"# which are building or deleting so don't put them"
nl|'\n'
comment|'# in the list. If they are building they will get'
nl|'\n'
comment|'# added to the list next time we build it.'
nl|'\n'
indent|'                '
name|'if'
op|'('
name|'inst'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'BUILDING'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Skipping network cache update for instance '"
nl|'\n'
string|"'because it is Building.'"
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'inst'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'DELETING'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Skipping network cache update for instance '"
nl|'\n'
string|"'because it is being deleted.'"
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
comment|"# Save the first one we find so we don't"
nl|'\n'
comment|'# have to get it again'
nl|'\n'
indent|'                    '
name|'instance'
op|'='
name|'inst'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'instance_uuids'
op|'.'
name|'append'
op|'('
name|'inst'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_instance_uuids_to_heal'
op|'='
name|'instance_uuids'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Find the next valid instance on the list'
nl|'\n'
indent|'            '
name|'while'
name|'instance_uuids'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'inst'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuids'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'info_cache'"
op|']'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# Instance is gone.  Try to grab another.'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
comment|"# Check the instance hasn't been migrated"
nl|'\n'
dedent|''
name|'if'
name|'inst'
op|'.'
name|'host'
op|'!='
name|'self'
op|'.'
name|'host'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Skipping network cache update for instance '"
nl|'\n'
string|"'because it has been migrated to another '"
nl|'\n'
string|"'host.'"
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
comment|"# Check the instance isn't being deleting"
nl|'\n'
dedent|''
name|'elif'
name|'inst'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'DELETING'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Skipping network cache update for instance '"
nl|'\n'
string|"'because it is being deleted.'"
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'='
name|'inst'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'instance'
op|':'
newline|'\n'
comment|'# We have an instance now to refresh'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# Call to network API to get instance info.. this will'
nl|'\n'
comment|"# force an update to the instance's info_cache"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Updated the network info_cache for instance'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# Instance is gone.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Instance no longer exists. Unable to refresh'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceInfoCacheNotFound'
op|':'
newline|'\n'
comment|'# InstanceInfoCache is gone.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'InstanceInfoCache no longer exists. '"
nl|'\n'
string|"'Unable to refresh'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'An error occurred while refreshing the network '"
nl|'\n'
string|"'cache.'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Didn\'t find any instances for network info cache "'
nl|'\n'
string|'"update."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rebooting_instances
name|'def'
name|'_poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'reboot_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
string|"'task_state'"
op|':'
nl|'\n'
op|'['
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'rebooting'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'to_poll'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'rebooting'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'.'
name|'updated_at'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'reboot_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'to_poll'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'poll_rebooting_instances'
op|'('
name|'CONF'
op|'.'
name|'reboot_timeout'
op|','
name|'to_poll'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_rescued_instances
name|'def'
name|'_poll_rescued_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'rescue_timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'rescued_instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
name|'expected_attrs'
op|'='
op|'['
string|'"system_metadata"'
op|']'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'to_unrescue'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'rescued_instances'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'instance'
op|'.'
name|'launched_at'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'rescue_timeout'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'to_unrescue'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'to_unrescue'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unrescue'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_poll_unconfirmed_resizes
name|'def'
name|'_poll_unconfirmed_resizes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'resize_confirm_window'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'migrations'
op|'='
name|'objects'
op|'.'
name|'MigrationList'
op|'.'
name|'get_unconfirmed_by_dest_compute'
op|'('
nl|'\n'
name|'context'
op|','
name|'CONF'
op|'.'
name|'resize_confirm_window'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'migrations_info'
op|'='
name|'dict'
op|'('
name|'migration_count'
op|'='
name|'len'
op|'('
name|'migrations'
op|')'
op|','
nl|'\n'
name|'confirm_window'
op|'='
name|'CONF'
op|'.'
name|'resize_confirm_window'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'migrations_info'
op|'['
string|'"migration_count"'
op|']'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Found %(migration_count)d unconfirmed migrations "'
nl|'\n'
string|'"older than %(confirm_window)d seconds"'
op|')'
op|','
nl|'\n'
name|'migrations_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_set_migration_to_error
dedent|''
name|'def'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Setting migration %(migration_id)s to error: "'
nl|'\n'
string|'"%(reason)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'migration_id'"
op|':'
name|'migration'
op|'['
string|"'id'"
op|']'
op|','
string|"'reason'"
op|':'
name|'reason'
op|'}'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'error'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'migration'
op|'.'
name|'instance_uuid'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Automatically confirming migration "'
nl|'\n'
string|'"%(migration_id)s for instance %(instance_uuid)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'migration_id'"
op|':'
name|'migration'
op|'.'
name|'id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
op|')'
newline|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'expected_attrs'
op|'='
name|'expected_attrs'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
op|'('
name|'_'
op|'('
string|'"Instance %s not found"'
op|')'
op|'%'
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'ERROR'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
name|'_'
op|'('
string|'"In ERROR state"'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
comment|'# race condition: The instance in DELETING state should not be'
nl|'\n'
comment|'# set the migration state to error, otherwise the instance in'
nl|'\n'
comment|'# to be deleted which is in RESIZED state'
nl|'\n'
comment|'# will not be able to confirm resize'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'DELETING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
string|'"Instance being deleted or soft deleted during resize "'
nl|'\n'
string|'"confirmation. Skipping."'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# race condition: This condition is hit when this method is'
nl|'\n'
comment|'# called between the save of the migration record with a status of'
nl|'\n'
comment|'# finished and the save of the instance object with a state of'
nl|'\n'
comment|'# RESIZED. The migration record should not be set to error.'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'.'
name|'task_state'
op|'=='
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
string|'"Instance still resizing during resize "'
nl|'\n'
string|'"confirmation. Skipping."'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'vm_state'
op|'='
name|'instance'
op|'.'
name|'vm_state'
newline|'\n'
name|'task_state'
op|'='
name|'instance'
op|'.'
name|'task_state'
newline|'\n'
name|'if'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'RESIZED'
name|'or'
name|'task_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'reason'
op|'='
op|'('
name|'_'
op|'('
string|'"In states %(vm_state)s/%(task_state)s, not "'
nl|'\n'
string|'"RESIZED/None"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_state'
op|'}'
op|')'
newline|'\n'
name|'_set_migration_to_error'
op|'('
name|'migration'
op|','
name|'reason'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Error auto-confirming resize: %s. "'
nl|'\n'
string|'"Will retry later."'
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'shelved_poll_interval'
op|')'
newline|'\n'
DECL|member|_poll_shelved_instances
name|'def'
name|'_poll_shelved_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'shelved_offload_time'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'filters'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SHELVED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'shelved_instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'to_gc'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'shelved_instances'
op|':'
newline|'\n'
indent|'            '
name|'sys_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'shelved_at'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
name|'sys_meta'
op|'['
string|"'shelved_at'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'shelved_at'
op|','
name|'CONF'
op|'.'
name|'shelved_offload_time'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'to_gc'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'to_gc'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SHELVING_OFFLOADING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'('
name|'None'
op|','
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'shelve_offload_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Periodic task failed to offload instance.'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_instance_usage_audit
name|'def'
name|'_instance_usage_audit'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'instance_usage_audit'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
newline|'\n'
name|'if'
name|'objects'
op|'.'
name|'TaskLog'
op|'.'
name|'get'
op|'('
name|'context'
op|','
string|"'instance_usage_audit'"
op|','
name|'begin'
op|','
name|'end'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_active_by_window_joined'
op|'('
nl|'\n'
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'info_cache'"
op|','
string|"'metadata'"
op|']'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'num_instances'
op|'='
name|'len'
op|'('
name|'instances'
op|')'
newline|'\n'
name|'errors'
op|'='
number|'0'
newline|'\n'
name|'successes'
op|'='
number|'0'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Running instance usage audit for"'
nl|'\n'
string|'" host %(host)s from %(begin_time)s to "'
nl|'\n'
string|'"%(end_time)s. %(number_instances)s"'
nl|'\n'
string|'" instances."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'begin_time'"
op|':'
name|'begin'
op|','
nl|'\n'
string|"'end_time'"
op|':'
name|'end'
op|','
nl|'\n'
string|"'number_instances'"
op|':'
name|'num_instances'
op|'}'
op|')'
newline|'\n'
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'task_log'
op|'='
name|'objects'
op|'.'
name|'TaskLog'
op|'('
name|'context'
op|')'
newline|'\n'
name|'task_log'
op|'.'
name|'task_name'
op|'='
string|"'instance_usage_audit'"
newline|'\n'
name|'task_log'
op|'.'
name|'period_beginning'
op|'='
name|'begin'
newline|'\n'
name|'task_log'
op|'.'
name|'period_ending'
op|'='
name|'end'
newline|'\n'
name|'task_log'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'task_log'
op|'.'
name|'task_items'
op|'='
name|'num_instances'
newline|'\n'
name|'task_log'
op|'.'
name|'message'
op|'='
string|"'Instance usage audit started...'"
newline|'\n'
name|'task_log'
op|'.'
name|'begin_task'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'notifier'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'ignore_missing_network_data'
op|'='
name|'False'
op|')'
newline|'\n'
name|'successes'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Failed to generate usage '"
nl|'\n'
string|"'audit for instance '"
nl|'\n'
string|"'on host %s'"
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'errors'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'task_log'
op|'.'
name|'errors'
op|'='
name|'errors'
newline|'\n'
name|'task_log'
op|'.'
name|'message'
op|'='
op|'('
nl|'\n'
string|"'Instance usage audit ran for host %s, %s instances in %s seconds.'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'num_instances'
op|','
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
op|')'
op|')'
newline|'\n'
name|'task_log'
op|'.'
name|'end_task'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'bandwidth_poll_interval'
op|')'
newline|'\n'
DECL|member|_poll_bandwidth_usage
name|'def'
name|'_poll_bandwidth_usage'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_bw_usage_supported'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'prev_time'
op|','
name|'start_time'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'curr_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
op|'('
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'>'
nl|'\n'
name|'CONF'
op|'.'
name|'bandwidth_poll_interval'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_last_bw_usage_poll'
op|'='
name|'curr_time'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Updating bandwidth usage cache"'
op|')'
op|')'
newline|'\n'
name|'cells_update_interval'
op|'='
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'bandwidth_update_interval'
newline|'\n'
name|'if'
op|'('
name|'cells_update_interval'
op|'>'
number|'0'
name|'and'
nl|'\n'
name|'curr_time'
op|'-'
name|'self'
op|'.'
name|'_last_bw_usage_cell_update'
op|'>'
nl|'\n'
name|'cells_update_interval'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_last_bw_usage_cell_update'
op|'='
name|'curr_time'
newline|'\n'
name|'update_cells'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'update_cells'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'bw_counters'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_all_bw_counters'
op|'('
name|'instances'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(mdragon): Not all hypervisors have bandwidth polling'
nl|'\n'
comment|"# implemented yet.  If they don't it doesn't break anything,"
nl|'\n'
comment|"# they just don't get the info in the usage events."
nl|'\n'
comment|'# NOTE(PhilDay): Record that its not supported so we can'
nl|'\n'
comment|'# skip fast on future calls rather than waste effort getting'
nl|'\n'
comment|'# the list of instances.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Bandwidth usage not supported by "'
nl|'\n'
string|'"hypervisor."'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_bw_usage_supported'
op|'='
name|'False'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'refreshed'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'for'
name|'bw_ctr'
name|'in'
name|'bw_counters'
op|':'
newline|'\n'
comment|'# Allow switching of greenthreads between queries.'
nl|'\n'
indent|'                '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'bw_in'
op|'='
number|'0'
newline|'\n'
name|'bw_out'
op|'='
number|'0'
newline|'\n'
name|'last_ctr_in'
op|'='
name|'None'
newline|'\n'
name|'last_ctr_out'
op|'='
name|'None'
newline|'\n'
name|'usage'
op|'='
name|'objects'
op|'.'
name|'BandwidthUsage'
op|'.'
name|'get_by_instance_uuid_and_mac'
op|'('
nl|'\n'
name|'context'
op|','
name|'bw_ctr'
op|'['
string|"'uuid'"
op|']'
op|','
name|'bw_ctr'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
name|'start_period'
op|'='
name|'start_time'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'usage'
op|':'
newline|'\n'
indent|'                    '
name|'bw_in'
op|'='
name|'usage'
op|'.'
name|'bw_in'
newline|'\n'
name|'bw_out'
op|'='
name|'usage'
op|'.'
name|'bw_out'
newline|'\n'
name|'last_ctr_in'
op|'='
name|'usage'
op|'.'
name|'last_ctr_in'
newline|'\n'
name|'last_ctr_out'
op|'='
name|'usage'
op|'.'
name|'last_ctr_out'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'usage'
op|'='
op|'('
name|'objects'
op|'.'
name|'BandwidthUsage'
op|'.'
nl|'\n'
name|'get_by_instance_uuid_and_mac'
op|'('
nl|'\n'
name|'context'
op|','
name|'bw_ctr'
op|'['
string|"'uuid'"
op|']'
op|','
name|'bw_ctr'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
name|'start_period'
op|'='
name|'prev_time'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'if'
name|'usage'
op|':'
newline|'\n'
indent|'                        '
name|'last_ctr_in'
op|'='
name|'usage'
op|'.'
name|'last_ctr_in'
newline|'\n'
name|'last_ctr_out'
op|'='
name|'usage'
op|'.'
name|'last_ctr_out'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'last_ctr_in'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
op|'<'
name|'last_ctr_in'
op|':'
newline|'\n'
comment|'# counter rollover'
nl|'\n'
indent|'                        '
name|'bw_in'
op|'+='
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'bw_in'
op|'+='
op|'('
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
op|'-'
name|'last_ctr_in'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'last_ctr_out'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
op|'<'
name|'last_ctr_out'
op|':'
newline|'\n'
comment|'# counter rollover'
nl|'\n'
indent|'                        '
name|'bw_out'
op|'+='
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'bw_out'
op|'+='
op|'('
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
op|'-'
name|'last_ctr_out'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'objects'
op|'.'
name|'BandwidthUsage'
op|'('
name|'context'
op|'='
name|'context'
op|')'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'bw_ctr'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
name|'bw_in'
op|','
nl|'\n'
name|'bw_out'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'bw_in'"
op|']'
op|','
nl|'\n'
name|'bw_ctr'
op|'['
string|"'bw_out'"
op|']'
op|','
nl|'\n'
name|'start_period'
op|'='
name|'start_time'
op|','
nl|'\n'
name|'last_refreshed'
op|'='
name|'refreshed'
op|','
nl|'\n'
name|'update_cells'
op|'='
name|'update_cells'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_volume_bdms
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_host_volume_bdms'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all block device mappings on a compute host."""'
newline|'\n'
name|'compute_host_bdms'
op|'='
op|'['
op|']'
newline|'\n'
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
name|'instance_bdms'
op|'='
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
name|'if'
name|'bdm'
op|'.'
name|'is_volume'
op|']'
newline|'\n'
name|'compute_host_bdms'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_bdms'
op|'='
name|'instance_bdms'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'compute_host_bdms'
newline|'\n'
nl|'\n'
DECL|member|_update_volume_usage_cache
dedent|''
name|'def'
name|'_update_volume_usage_cache'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'vol_usages'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the volume usage cache table with a list of stats."""'
newline|'\n'
name|'for'
name|'usage'
name|'in'
name|'vol_usages'
op|':'
newline|'\n'
comment|'# Allow switching of greenthreads between queries.'
nl|'\n'
indent|'            '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'vol_usage'
op|'='
name|'objects'
op|'.'
name|'VolumeUsage'
op|'('
name|'context'
op|')'
newline|'\n'
name|'vol_usage'
op|'.'
name|'volume_id'
op|'='
name|'usage'
op|'['
string|"'volume'"
op|']'
newline|'\n'
name|'vol_usage'
op|'.'
name|'instance_uuid'
op|'='
name|'usage'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'uuid'
newline|'\n'
name|'vol_usage'
op|'.'
name|'project_id'
op|'='
name|'usage'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'project_id'
newline|'\n'
name|'vol_usage'
op|'.'
name|'user_id'
op|'='
name|'usage'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'user_id'
newline|'\n'
name|'vol_usage'
op|'.'
name|'availability_zone'
op|'='
name|'usage'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'availability_zone'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_reads'
op|'='
name|'usage'
op|'['
string|"'rd_req'"
op|']'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_read_bytes'
op|'='
name|'usage'
op|'['
string|"'rd_bytes'"
op|']'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_writes'
op|'='
name|'usage'
op|'['
string|"'wr_req'"
op|']'
newline|'\n'
name|'vol_usage'
op|'.'
name|'curr_write_bytes'
op|'='
name|'usage'
op|'['
string|"'wr_bytes'"
op|']'
newline|'\n'
name|'vol_usage'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
string|"'volume.usage'"
op|','
nl|'\n'
name|'compute_utils'
op|'.'
name|'usage_volume_info'
op|'('
name|'vol_usage'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'volume_usage_poll_interval'
op|')'
newline|'\n'
DECL|member|_poll_volume_usage
name|'def'
name|'_poll_volume_usage'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'volume_usage_poll_interval'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'compute_host_bdms'
op|'='
name|'self'
op|'.'
name|'_get_host_volume_bdms'
op|'('
name|'context'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'compute_host_bdms'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Updating volume usage cache"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vol_usages'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_all_volume_usage'
op|'('
name|'context'
op|','
nl|'\n'
name|'compute_host_bdms'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_volume_usage_cache'
op|'('
name|'context'
op|','
name|'vol_usages'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'sync_power_state_interval'
op|','
nl|'\n'
name|'run_immediately'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_sync_power_states
name|'def'
name|'_sync_power_states'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Align power states between the database and the hypervisor.\n\n        To sync power state data we make a DB call to get the number of\n        virtual machines known by the hypervisor and if the number matches the\n        number of virtual machines known by the database, we proceed in a lazy\n        loop, one database record at a time, checking if the hypervisor has the\n        same power state as is in the database.\n        """'
newline|'\n'
name|'db_instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'num_vm_instances'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_num_instances'
op|'('
op|')'
newline|'\n'
name|'num_db_instances'
op|'='
name|'len'
op|'('
name|'db_instances'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_vm_instances'
op|'!='
name|'num_db_instances'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"While synchronizing instance power states, found "'
nl|'\n'
string|'"%(num_db_instances)s instances in the database "'
nl|'\n'
string|'"and %(num_vm_instances)s instances on the "'
nl|'\n'
string|'"hypervisor."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'num_db_instances'"
op|':'
name|'num_db_instances'
op|','
nl|'\n'
string|"'num_vm_instances'"
op|':'
name|'num_vm_instances'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_sync
dedent|''
name|'def'
name|'_sync'
op|'('
name|'db_instance'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(melwitt): This must be synchronized as we query state from'
nl|'\n'
comment|'#                two separate sources, the driver and the database.'
nl|'\n'
comment|'#                They are set (in stop_instance) and read, in sync.'
nl|'\n'
indent|'            '
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'db_instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
DECL|function|query_driver_power_state_and_sync
name|'def'
name|'query_driver_power_state_and_sync'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_query_driver_power_state_and_sync'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'query_driver_power_state_and_sync'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Periodic sync_power_state task had an "'
nl|'\n'
string|'"error while processing an instance."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_syncs_in_progress'
op|'.'
name|'pop'
op|'('
name|'db_instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'db_instance'
name|'in'
name|'db_instances'
op|':'
newline|'\n'
comment|"# process syncs asynchronously - don't want instance locking to"
nl|'\n'
comment|'# block entire periodic task thread'
nl|'\n'
indent|'            '
name|'uuid'
op|'='
name|'db_instance'
op|'.'
name|'uuid'
newline|'\n'
name|'if'
name|'uuid'
name|'in'
name|'self'
op|'.'
name|'_syncs_in_progress'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Sync already in progress for %s'"
op|'%'
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Triggering sync for uuid %s'"
op|'%'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_syncs_in_progress'
op|'['
name|'uuid'
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_sync_power_pool'
op|'.'
name|'spawn_n'
op|'('
name|'_sync'
op|','
name|'db_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_query_driver_power_state_and_sync
dedent|''
dedent|''
dedent|''
name|'def'
name|'_query_driver_power_state_and_sync'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'db_instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'db_instance'
op|'.'
name|'task_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"During sync_power_state the instance has a "'
nl|'\n'
string|'"pending task (%(task)s). Skip."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'task'"
op|':'
name|'db_instance'
op|'.'
name|'task_state'
op|'}'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
comment|'# No pending tasks. Now try to figure out the real vm_power_state.'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'vm_instance'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'db_instance'
op|')'
newline|'\n'
name|'vm_power_state'
op|'='
name|'vm_instance'
op|'.'
name|'state'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'vm_power_state'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
newline|'\n'
comment|'# Note(maoy): the above get_info call might take a long time,'
nl|'\n'
comment|'# for example, because of a broken libvirt driver.'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'context'
op|','
nl|'\n'
name|'db_instance'
op|','
nl|'\n'
name|'vm_power_state'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# NOTE(hanlind): If the instance gets deleted during sync,'
nl|'\n'
comment|'# silently ignore.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_sync_instance_power_state
dedent|''
dedent|''
name|'def'
name|'_sync_instance_power_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'db_instance'
op|','
name|'vm_power_state'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Align instance power state between the database and hypervisor.\n\n        If the instance is not found on the hypervisor, but is in the database,\n        then a stop() API will be called on the instance.\n        """'
newline|'\n'
nl|'\n'
comment|'# We re-query the DB to get the latest instance info to minimize'
nl|'\n'
comment|'# (not eliminate) race condition.'
nl|'\n'
name|'db_instance'
op|'.'
name|'refresh'
op|'('
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
name|'db_power_state'
op|'='
name|'db_instance'
op|'.'
name|'power_state'
newline|'\n'
name|'vm_state'
op|'='
name|'db_instance'
op|'.'
name|'vm_state'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'host'
op|'!='
name|'db_instance'
op|'.'
name|'host'
op|':'
newline|'\n'
comment|'# on the sending end of nova-compute _sync_power_state'
nl|'\n'
comment|'# may have yielded to the greenthread performing a live'
nl|'\n'
comment|'# migration; this in turn has changed the resident-host'
nl|'\n'
comment|'# for the VM; However, the instance is still active, it'
nl|'\n'
comment|'# is just in the process of migrating to another host.'
nl|'\n'
comment|'# This implies that the compute source must relinquish'
nl|'\n'
comment|'# control to the compute destination.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"During the sync_power process the "'
nl|'\n'
string|'"instance has moved from "'
nl|'\n'
string|'"host %(src)s to host %(dst)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'src'"
op|':'
name|'db_instance'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'dst'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'db_instance'
op|'.'
name|'task_state'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# on the receiving end of nova-compute, it could happen'
nl|'\n'
comment|'# that the DB instance already report the new resident'
nl|'\n'
comment|'# but the actual VM has not showed up on the hypervisor'
nl|'\n'
comment|"# yet. In this case, let's allow the loop to continue"
nl|'\n'
comment|'# and run the state sync in a later round'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"During sync_power_state the instance has a "'
nl|'\n'
string|'"pending task (%(task)s). Skip."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'task'"
op|':'
name|'db_instance'
op|'.'
name|'task_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'orig_db_power_state'
op|'='
name|'db_power_state'
newline|'\n'
name|'if'
name|'vm_power_state'
op|'!='
name|'db_power_state'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'During _sync_instance_power_state the DB '"
nl|'\n'
string|"'power_state (%(db_power_state)s) does not match '"
nl|'\n'
string|"'the vm_power_state from the hypervisor '"
nl|'\n'
string|"'(%(vm_power_state)s). Updating power_state in the '"
nl|'\n'
string|"'DB to match the hypervisor.'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'db_power_state'"
op|':'
name|'db_power_state'
op|','
nl|'\n'
string|"'vm_power_state'"
op|':'
name|'vm_power_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
comment|'# power_state is always updated from hypervisor to db'
nl|'\n'
name|'db_instance'
op|'.'
name|'power_state'
op|'='
name|'vm_power_state'
newline|'\n'
name|'db_instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'db_power_state'
op|'='
name|'vm_power_state'
newline|'\n'
nl|'\n'
comment|'# Note(maoy): Now resolve the discrepancy between vm_state and'
nl|'\n'
comment|'# vm_power_state. We go through all possible vm_states.'
nl|'\n'
dedent|''
name|'if'
name|'vm_state'
name|'in'
op|'('
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
op|':'
newline|'\n'
comment|'# TODO(maoy): we ignore these vm_state for now.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'elif'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|':'
newline|'\n'
comment|'# The only rational power state should be RUNNING'
nl|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance shutdown by itself. Calling the "'
nl|'\n'
string|'"stop API. Current vm_state: %(vm_state)s, "'
nl|'\n'
string|'"current task_state: %(task_state)s, "'
nl|'\n'
string|'"original DB power_state: %(db_power_state)s, "'
nl|'\n'
string|'"current VM power_state: %(vm_power_state)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'db_instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'db_power_state'"
op|':'
name|'orig_db_power_state'
op|','
nl|'\n'
string|"'vm_power_state'"
op|':'
name|'vm_power_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Note(maoy): here we call the API instead of'
nl|'\n'
comment|'# brutally updating the vm_state in the database'
nl|'\n'
comment|'# to allow all the hooks and checks to be performed.'
nl|'\n'
indent|'                    '
name|'if'
name|'db_instance'
op|'.'
name|'shutdown_terminate'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# Note(maoy): there is no need to propagate the error'
nl|'\n'
comment|'# because the same power_state will be retrieved next'
nl|'\n'
comment|'# time and retried.'
nl|'\n'
comment|'# For example, there might be another task scheduled.'
nl|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'vm_power_state'
op|'=='
name|'power_state'
op|'.'
name|'SUSPENDED'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance is suspended unexpectedly. Calling "'
nl|'\n'
string|'"the stop API."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'vm_power_state'
op|'=='
name|'power_state'
op|'.'
name|'PAUSED'
op|':'
newline|'\n'
comment|'# Note(maoy): a VM may get into the paused state not only'
nl|'\n'
comment|'# because the user request via API calls, but also'
nl|'\n'
comment|'# due to (temporary) external instrumentations.'
nl|'\n'
comment|'# Before the virt layer can reliably report the reason,'
nl|'\n'
comment|'# we simply ignore the state discrepancy. In many cases,'
nl|'\n'
comment|'# the VM state will go back to running after the external'
nl|'\n'
comment|'# instrumentation is done. See bug 1097806 for details.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance is paused unexpectedly. Ignore."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'vm_power_state'
op|'=='
name|'power_state'
op|'.'
name|'NOSTATE'
op|':'
newline|'\n'
comment|'# Occasionally, depending on the status of the hypervisor,'
nl|'\n'
comment|'# which could be restarting for example, an instance may'
nl|'\n'
comment|'# not be found.  Therefore just log the condition.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance is unexpectedly not found. Ignore."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'STOPPED'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'not'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance is not stopped. Calling "'
nl|'\n'
string|'"the stop API. Current vm_state: %(vm_state)s,"'
nl|'\n'
string|'" current task_state: %(task_state)s, "'
nl|'\n'
string|'"original DB power_state: %(db_power_state)s, "'
nl|'\n'
string|'"current VM power_state: %(vm_power_state)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'db_instance'
op|'.'
name|'task_state'
op|','
nl|'\n'
string|"'db_power_state'"
op|':'
name|'orig_db_power_state'
op|','
nl|'\n'
string|"'vm_power_state'"
op|':'
name|'vm_power_state'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(russellb) Force the stop, because normally the'
nl|'\n'
comment|'# compute API would not allow an attempt to stop a stopped'
nl|'\n'
comment|'# instance.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'force_stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'PAUSED'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Paused instance shutdown by itself. Calling "'
nl|'\n'
string|'"the stop API."'
op|')'
op|','
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'force_stop'
op|'('
name|'context'
op|','
name|'db_instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"error during stop() in "'
nl|'\n'
string|'"sync_power_state."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'vm_state'
name|'in'
op|'('
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'DELETED'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_power_state'
name|'not'
name|'in'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
op|':'
newline|'\n'
comment|'# Note(maoy): this should be taken care of periodically in'
nl|'\n'
comment|'# _cleanup_running_deleted_instances().'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance is not (soft-)deleted."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'db_instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|_reclaim_queued_deletes
name|'def'
name|'_reclaim_queued_deletes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reclaim instances that are queued for deletion."""'
newline|'\n'
name|'interval'
op|'='
name|'CONF'
op|'.'
name|'reclaim_instance_interval'
newline|'\n'
name|'if'
name|'interval'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"CONF.reclaim_instance_interval <= 0, skipping..."'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# TODO(comstud, jichenjc): Dummy quota object for now See bug 1296414.'
nl|'\n'
comment|'# The only case that the quota might be inconsistent is'
nl|'\n'
comment|'# the compute node died between set instance state to SOFT_DELETED'
nl|'\n'
comment|'# and quota commit to DB. When compute node starts again'
nl|'\n'
comment|'# it will have no idea the reservation is committed or not or even'
nl|'\n'
comment|"# expired, since it's a rare case, so marked as todo."
nl|'\n'
dedent|''
name|'quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
name|'context'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'filters'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'objects'
op|'.'
name|'instance'
op|'.'
name|'INSTANCE_DEFAULT_FIELDS'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_deleted_old_enough'
op|'('
name|'instance'
op|','
name|'interval'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Reclaiming deleted instance'"
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
name|'quotas'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Periodic reclaim failed to delete "'
nl|'\n'
string|'"instance: %s"'
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'update_resources_interval'
op|')'
newline|'\n'
DECL|member|update_available_resource
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""See driver.get_available_resource()\n\n        Periodic process that keeps that the compute host\'s understanding of\n        resource availability and usage in sync with the underlying hypervisor.\n\n        :param context: security context\n        """'
newline|'\n'
name|'new_resource_tracker_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'compute_nodes_in_db'
op|'='
name|'self'
op|'.'
name|'_get_compute_nodes_in_db'
op|'('
name|'context'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'nodenames'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'nodename'
name|'in'
name|'nodenames'
op|':'
newline|'\n'
indent|'            '
name|'rt'
op|'='
name|'self'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'nodename'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|':'
newline|'\n'
comment|'# NOTE(comstud): We can get to this case if a node was'
nl|'\n'
comment|"# marked 'deleted' in the DB and then re-added with a"
nl|'\n'
comment|'# different auto-increment id. The cached resource'
nl|'\n'
comment|'# tracker tried to update a deleted record and failed.'
nl|'\n'
comment|"# Don't add this resource tracker to the new dict, so"
nl|'\n'
comment|'# that this will resolve itself on the next run.'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Compute node \'%s\' not found in "'
nl|'\n'
string|'"update_available_resource."'
op|')'
op|','
name|'nodename'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Error updating resources for node "'
nl|'\n'
string|'"%(node)s."'
op|')'
op|','
op|'{'
string|"'node'"
op|':'
name|'nodename'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'new_resource_tracker_dict'
op|'['
name|'nodename'
op|']'
op|'='
name|'rt'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): Replace the RT cache before looping through'
nl|'\n'
comment|'# compute nodes to delete below, as we can end up doing greenthread'
nl|'\n'
comment|'# switches there. Best to have everyone using the newest cache'
nl|'\n'
comment|'# ASAP.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_resource_tracker_dict'
op|'='
name|'new_resource_tracker_dict'
newline|'\n'
nl|'\n'
comment|'# Delete orphan compute node not reported by driver but still in db'
nl|'\n'
name|'for'
name|'cn'
name|'in'
name|'compute_nodes_in_db'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cn'
op|'.'
name|'hypervisor_hostname'
name|'not'
name|'in'
name|'nodenames'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Deleting orphan compute node %s"'
op|')'
op|'%'
name|'cn'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'cn'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_compute_nodes_in_db
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_compute_nodes_in_db'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'objects'
op|'.'
name|'ComputeNodeList'
op|'.'
name|'get_all_by_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'use_slave'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|'"No compute node record for host %s"'
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
nl|'\n'
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'running_deleted_instance_poll_interval'
op|')'
newline|'\n'
DECL|member|_cleanup_running_deleted_instances
name|'def'
name|'_cleanup_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cleanup any instances which are erroneously still running after\n        having been deleted.\n\n        Valid actions to take are:\n\n            1. noop - do nothing\n            2. log - log which instances are erroneously running\n            3. reap - shutdown and cleanup any erroneously running instances\n            4. shutdown - power off *and disable* any erroneously running\n                          instances\n\n        The use-case for this cleanup task is: for various reasons, it may be\n        possible for the database to show an instance as deleted but for that\n        instance to still be running on a host machine (see bug\n        https://bugs.launchpad.net/nova/+bug/911366).\n\n        This cleanup task is a cross-hypervisor utility for finding these\n        zombied instances and either logging the discrepancy (likely what you\n        should do in production), or automatically reaping the instances (more\n        appropriate for dev environments).\n        """'
newline|'\n'
name|'action'
op|'='
name|'CONF'
op|'.'
name|'running_deleted_instance_action'
newline|'\n'
nl|'\n'
name|'if'
name|'action'
op|'=='
string|'"noop"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): admin contexts don't ordinarily return deleted records"
nl|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'_running_deleted_instances'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'action'
op|'=='
string|'"log"'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Detected instance with name label "'
nl|'\n'
string|'"\'%s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'action'
op|'=='
string|"'shutdown'"
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Powering off instance with name label "'
nl|'\n'
string|'"\'%s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
comment|'# disable starting the instance'
nl|'\n'
indent|'                            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'                            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"set_bootable is not implemented "'
nl|'\n'
string|'"for the current driver"'
op|')'
newline|'\n'
comment|'# and power it off'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                        '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Failed to power off instance"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'action'
op|'=='
string|"'reap'"
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Destroying instance with name label "'
nl|'\n'
string|'"\'%s\' which is marked as "'
nl|'\n'
string|'"DELETED but still present on host."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_events'
op|'.'
name|'clear_events_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_shutdown_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
nl|'\n'
name|'notify'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Periodic cleanup failed to delete "'
nl|'\n'
string|'"instance: %s"'
op|')'
op|','
nl|'\n'
name|'e'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"Unrecognized value \'%s\'"'
nl|'\n'
string|'" for CONF.running_deleted_"'
nl|'\n'
string|'"instance_action"'
op|')'
op|'%'
name|'action'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_running_deleted_instances
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_running_deleted_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of instances nova thinks is deleted,\n        but the hypervisor thinks is still running.\n        """'
newline|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'running_deleted_instance_timeout'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'deleted'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'soft_deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
name|'return'
op|'['
name|'i'
name|'for'
name|'i'
name|'in'
name|'instances'
name|'if'
name|'self'
op|'.'
name|'_deleted_old_enough'
op|'('
name|'i'
op|','
name|'timeout'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_deleted_old_enough
dedent|''
name|'def'
name|'_deleted_old_enough'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deleted_at'
op|'='
name|'instance'
op|'.'
name|'deleted_at'
newline|'\n'
name|'if'
name|'deleted_at'
op|':'
newline|'\n'
indent|'            '
name|'deleted_at'
op|'='
name|'deleted_at'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'not'
name|'deleted_at'
name|'or'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'deleted_at'
op|','
name|'timeout'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|member|_error_out_instance_on_exception
name|'def'
name|'_error_out_instance_on_exception'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'quotas'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'quotas'
op|':'
newline|'\n'
indent|'                    '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Setting instance back to %(state)s after: "'
nl|'\n'
string|'"%(error)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'state'"
op|':'
name|'instance_state'
op|','
string|"'error'"
op|':'
name|'error'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'instance_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceFaultRollback'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'quotas'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Setting instance back to ACTIVE after: %s"'
op|')'
op|','
nl|'\n'
name|'error'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'raise'
name|'error'
op|'.'
name|'inner_exception'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'Setting instance vm_state to ERROR'"
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'quotas'
op|':'
newline|'\n'
indent|'                    '
name|'quotas'
op|'.'
name|'rollback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_set_instance_obj_error_state'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|add_aggregate_host
name|'def'
name|'add_aggregate_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
name|'slave_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Notify hypervisor of change (for hypervisor pools)."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
name|'slave_info'
op|'='
name|'slave_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'add_aggregate_host'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'AggregateError'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'undo_aggregate_operation'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'.'
name|'delete_host'
op|','
nl|'\n'
name|'aggregate'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|remove_aggregate_host
name|'def'
name|'remove_aggregate_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'slave_info'
op|','
name|'aggregate'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes a host from a physical hypervisor pool."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'remove_from_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
name|'slave_info'
op|'='
name|'slave_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Hypervisor driver does not support '"
nl|'\n'
string|"'remove_aggregate_host'"
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'AggregateError'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|')'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'undo_aggregate_operation'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'.'
name|'add_host'
op|','
nl|'\n'
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
name|'isinstance'
op|'('
name|'e'
op|','
name|'exception'
op|'.'
name|'AggregateError'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_instance_event
dedent|''
dedent|''
dedent|''
name|'def'
name|'_process_instance_event'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'event'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_event'
op|'='
name|'self'
op|'.'
name|'instance_events'
op|'.'
name|'pop_instance_event'
op|'('
name|'instance'
op|','
name|'event'
op|')'
newline|'\n'
name|'if'
name|'_event'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Processing event %(event)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event'
op|'.'
name|'key'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'_event'
op|'.'
name|'send'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_instance_vif_deleted_event
dedent|''
dedent|''
name|'def'
name|'_process_instance_vif_deleted_event'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'deleted_vif_id'
op|')'
op|':'
newline|'\n'
comment|'# If an attached port is deleted by neutron, it needs to'
nl|'\n'
comment|'# be detached from the instance.'
nl|'\n'
comment|'# And info cache needs to be updated.'
nl|'\n'
indent|'        '
name|'network_info'
op|'='
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'network_info'
newline|'\n'
name|'for'
name|'index'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'=='
name|'deleted_vif_id'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Neutron deleted interface %(intf)s; '"
nl|'\n'
string|"'detaching it from the instance and '"
nl|'\n'
string|"'deleting it from the info cache'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'intf'"
op|':'
name|'vif'
op|'['
string|"'id'"
op|']'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'del'
name|'network_info'
op|'['
name|'index'
op|']'
newline|'\n'
name|'base_net_api'
op|'.'
name|'update_instance_cache_with_nw_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|','
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'nw_info'
op|'='
name|'network_info'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'detach_interface'
op|'('
name|'instance'
op|','
name|'vif'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Detach interface failed, "'
nl|'\n'
string|'"port_id=%(port_id)s, reason: %(msg)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'port_id'"
op|':'
name|'deleted_vif_id'
op|','
string|"'msg'"
op|':'
name|'ex'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|external_instance_event
name|'def'
name|'external_instance_event'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instances'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): Some event types are handled by the manager, such'
nl|'\n'
comment|"# as when we're asked to update the instance's info_cache. If it's"
nl|'\n'
comment|'# not one of those, look for some thread(s) waiting for the event and'
nl|'\n'
comment|'# unblock them if so.'
nl|'\n'
indent|'        '
name|'for'
name|'event'
name|'in'
name|'events'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
op|'['
name|'inst'
name|'for'
name|'inst'
name|'in'
name|'instances'
nl|'\n'
name|'if'
name|'inst'
op|'.'
name|'uuid'
op|'=='
name|'event'
op|'.'
name|'instance_uuid'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Received event %(event)s'"
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event'
op|'.'
name|'key'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'event'
op|'.'
name|'name'
op|'=='
string|"'network-changed'"
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Failed to process external instance event '"
nl|'\n'
string|"'%(event)s due to: %(error)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'event'"
op|':'
name|'event'
op|'.'
name|'key'
op|','
string|"'error'"
op|':'
name|'six'
op|'.'
name|'text_type'
op|'('
name|'e'
op|')'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'event'
op|'.'
name|'name'
op|'=='
string|"'network-vif-deleted'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_process_instance_vif_deleted_event'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'event'
op|'.'
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_process_instance_event'
op|'('
name|'instance'
op|','
name|'event'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'image_cache_manager_interval'
op|','
nl|'\n'
name|'external_process_ok'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_run_image_cache_manager_pass
name|'def'
name|'_run_image_cache_manager_pass'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a single pass of the image cache manager."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|'"has_imagecache"'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Determine what other nodes use this storage'
nl|'\n'
dedent|''
name|'storage_users'
op|'.'
name|'register_storage_use'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'nodes'
op|'='
name|'storage_users'
op|'.'
name|'get_storage_users'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# Filter all_instances to only include those nodes which share this'
nl|'\n'
comment|'# storage path.'
nl|'\n'
comment|'# TODO(mikal): this should be further refactored so that the cache'
nl|'\n'
comment|"# cleanup code doesn't know what those instances are, just a remote"
nl|'\n'
comment|'# count, and then this logic should be pushed up the stack.'
nl|'\n'
name|'filters'
op|'='
op|'{'
string|"'deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'soft_deleted'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'nodes'
op|'}'
newline|'\n'
name|'filtered_instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|','
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'manage_image_cache'
op|'('
name|'context'
op|','
name|'filtered_instances'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'instance_delete_interval'
op|')'
newline|'\n'
DECL|member|_run_pending_deletes
name|'def'
name|'_run_pending_deletes'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retry any pending instance file deletes."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Cleaning up deleted instances'"
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'deleted'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'soft_deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'cleaned'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'attrs'
op|'='
op|'['
string|"'info_cache'"
op|','
string|"'security_groups'"
op|','
string|"'system_metadata'"
op|']'
newline|'\n'
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'filters'
op|','
name|'expected_attrs'
op|'='
name|'attrs'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'There are %d instances to clean'"
op|','
name|'len'
op|'('
name|'instances'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'attempts'
op|'='
name|'int'
op|'('
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'clean_attempts'"
op|','
string|"'0'"
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Instance has had %(attempts)s of %(max)s '"
nl|'\n'
string|"'cleanup attempts'"
op|','
nl|'\n'
op|'{'
string|"'attempts'"
op|':'
name|'attempts'
op|','
nl|'\n'
string|"'max'"
op|':'
name|'CONF'
op|'.'
name|'maximum_instance_delete_attempts'
op|'}'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'attempts'
op|'<'
name|'CONF'
op|'.'
name|'maximum_instance_delete_attempts'
op|':'
newline|'\n'
indent|'                '
name|'success'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'delete_instance_files'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'clean_attempts'"
op|']'
op|'='
name|'str'
op|'('
name|'attempts'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'success'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'.'
name|'cleaned'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'CONF'
op|'.'
name|'instance_delete_interval'
op|')'
newline|'\n'
DECL|member|_cleanup_incomplete_migrations
name|'def'
name|'_cleanup_incomplete_migrations'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete instance files on failed resize/revert-resize operation\n\n        During resize/revert-resize operation, if that instance gets deleted\n        in-between then instance files might remain either on source or\n        destination compute node because of race condition.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Cleaning up deleted instances with incomplete migration '"
op|')'
newline|'\n'
name|'migration_filters'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'error'"
op|'}'
newline|'\n'
name|'migrations'
op|'='
name|'objects'
op|'.'
name|'MigrationList'
op|'.'
name|'get_by_filters'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_filters'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'migrations'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'inst_uuid_from_migrations'
op|'='
name|'set'
op|'('
op|'['
name|'migration'
op|'.'
name|'instance_uuid'
name|'for'
name|'migration'
nl|'\n'
name|'in'
name|'migrations'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'inst_filters'
op|'='
op|'{'
string|"'deleted'"
op|':'
name|'True'
op|','
string|"'soft_deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'inst_uuid_from_migrations'
op|','
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'attrs'
op|'='
op|'['
string|"'info_cache'"
op|','
string|"'security_groups'"
op|','
string|"'system_metadata'"
op|']'
newline|'\n'
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'context'
op|','
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'context'
op|','
name|'inst_filters'
op|','
name|'expected_attrs'
op|'='
name|'attrs'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'instance'
op|'.'
name|'uuid'
op|'=='
name|'migration'
op|'.'
name|'instance_uuid'
op|':'
newline|'\n'
comment|'# Delete instance files if not cleanup properly either'
nl|'\n'
comment|'# from the source or destination compute nodes when'
nl|'\n'
comment|'# the instance is deleted during resizing.'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'delete_instance_files'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'migration'
op|'.'
name|'status'
op|'='
string|"'failed'"
newline|'\n'
name|'with'
name|'migration'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MigrationNotFound'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Migration %s is not found."'
op|')'
op|','
nl|'\n'
name|'migration'
op|'.'
name|'id'
op|','
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'InstanceQuiesceNotSupported'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'QemuGuestAgentNotEnabled'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|quiesce_instance
name|'def'
name|'quiesce_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Quiesce an instance on this host."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'quiesce'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_snapshots_completion
dedent|''
name|'def'
name|'_wait_for_snapshots_completion'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'mapping_dict'
name|'in'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'mapping_dict'
op|'.'
name|'get'
op|'('
string|"'source_type'"
op|')'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
nl|'\n'
DECL|function|_wait_snapshot
indent|'                '
name|'def'
name|'_wait_snapshot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
nl|'\n'
name|'context'
op|','
name|'mapping_dict'
op|'['
string|"'snapshot_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'snapshot'
op|'.'
name|'get'
op|'('
string|"'status'"
op|')'
op|'!='
string|"'creating'"
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'loopingcall'
op|'.'
name|'LoopingCallDone'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'timer'
op|'='
name|'loopingcall'
op|'.'
name|'FixedIntervalLoopingCall'
op|'('
name|'_wait_snapshot'
op|')'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|')'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'messaging'
op|'.'
name|'expected_exceptions'
op|'('
name|'exception'
op|'.'
name|'InstanceQuiesceNotSupported'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'QemuGuestAgentNotEnabled'
op|','
nl|'\n'
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
op|'@'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|unquiesce_instance
name|'def'
name|'unquiesce_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'mapping'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unquiesce an instance on this host.\n\n        If snapshots\' image mapping is provided, it waits until snapshots are\n        completed before unqueiscing.\n        """'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'if'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_wait_for_snapshots_completion'
op|'('
name|'context'
op|','
name|'mapping'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Exception while waiting completion of "'
nl|'\n'
string|'"volume snapshots: %s"'
op|')'
op|','
nl|'\n'
name|'error'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'image_meta'
op|'='
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unquiesce'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Piston Cloud Computing, Inc.'
nl|'\n'
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all requests relating to compute resources (e.g. guest VMs,\nnetworking and storage of VMs, and compute hosts on which they run)."""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'availability_zones'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'consoleauth'
name|'import'
name|'rpcapi'
name|'as'
name|'consoleauth_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'crypto'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'hooks'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'notifications'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'rpcapi'
name|'as'
name|'scheduler_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'servicegroup'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|compute_opts
name|'compute_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'allow_resize_to_same_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Allow destination machine to match source for resize. '"
nl|'\n'
string|"'Useful when testing in single-host environments.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'default_schedule_zone'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'availability zone to use when user doesn\\'t specify one'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'non_inheritable_image_properties'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'cache_in_nova'"
op|','
nl|'\n'
string|"'bittorrent'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'These are image properties which a snapshot should not'"
nl|'\n'
string|"' inherit from an instance'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'null_kernel'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nokernel'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'kernel image that indicates not to use a kernel, but to '"
nl|'\n'
string|"'use a raw disk image instead'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'security_group_handler'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.network.sg.NullSecurityGroupHandler'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The full class name of the security group handler class'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'security_group_api'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.compute.api.SecurityGroupAPI'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The full class name of the security API class'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'compute_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'compute_topic'"
op|','
string|"'nova.compute.rpcapi'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enable'"
op|','
string|"'nova.cells.opts'"
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|MAX_USERDATA_SIZE
name|'MAX_USERDATA_SIZE'
op|'='
number|'65535'
newline|'\n'
DECL|variable|QUOTAS
name|'QUOTAS'
op|'='
name|'quota'
op|'.'
name|'QUOTAS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_instance_state
name|'def'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
name|'None'
op|','
name|'task_state'
op|'='
op|'('
name|'None'
op|','
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to check VM and/or task state before entry to API functions.\n\n    If the instance is in the wrong state, the wrapper will raise an exception.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'vm_state'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_state'
op|'='
name|'set'
op|'('
name|'vm_state'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'task_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'task_state'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'task_state'
op|'='
name|'set'
op|'('
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|function|outer
dedent|''
name|'def'
name|'outer'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
name|'not'
name|'in'
name|'vm_state'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'vm_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
name|'f'
op|'.'
name|'__name__'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'task_state'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'instance'
op|'['
string|"'task_state'"
op|']'
name|'not'
name|'in'
name|'task_state'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'task_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
name|'f'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'f'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'outer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_instance_lock
dedent|''
name|'def'
name|'check_instance_lock'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'['
string|"'locked'"
op|']'
name|'and'
name|'not'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceIsLocked'
op|'('
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|policy_decorator
dedent|''
name|'def'
name|'policy_decorator'
op|'('
name|'scope'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check corresponding policy prior of wrapped method to execution."""'
newline|'\n'
DECL|function|outer
name|'def'
name|'outer'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'target'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
name|'func'
op|'.'
name|'__name__'
op|','
name|'target'
op|','
name|'scope'
op|')'
newline|'\n'
name|'return'
name|'func'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'target'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
dedent|''
name|'return'
name|'outer'
newline|'\n'
nl|'\n'
DECL|variable|wrap_check_policy
dedent|''
name|'wrap_check_policy'
op|'='
name|'policy_decorator'
op|'('
name|'scope'
op|'='
string|"'compute'"
op|')'
newline|'\n'
DECL|variable|wrap_check_security_groups_policy
name|'wrap_check_security_groups_policy'
op|'='
name|'policy_decorator'
op|'('
nl|'\n'
name|'scope'
op|'='
string|"'compute:security_groups'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_policy
name|'def'
name|'check_policy'
op|'('
name|'context'
op|','
name|'action'
op|','
name|'target'
op|','
name|'scope'
op|'='
string|"'compute'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_action'
op|'='
string|"'%s:%s'"
op|'%'
op|'('
name|'scope'
op|','
name|'action'
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'enforce'
op|'('
name|'context'
op|','
name|'_action'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|API
dedent|''
name|'class'
name|'API'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""API for interacting with the compute manager."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'image_service'
op|'='
name|'None'
op|','
name|'network_api'
op|'='
name|'None'
op|','
name|'volume_api'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group_api'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'image_service'
op|'='
op|'('
name|'image_service'
name|'or'
nl|'\n'
name|'glance'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network_api'
name|'or'
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume_api'
name|'or'
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'='
op|'('
name|'security_group_api'
name|'or'
nl|'\n'
name|'importutils'
op|'.'
name|'import_object'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'security_group_api'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'CONF'
op|'.'
name|'security_group_handler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'='
name|'consoleauth_rpcapi'
op|'.'
name|'ConsoleAuthAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'='
name|'scheduler_rpcapi'
op|'.'
name|'SchedulerAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'servicegroup_api'
op|'='
name|'servicegroup'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'API'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_update
dedent|''
name|'def'
name|'_instance_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance in the database using kwargs as value."""'
newline|'\n'
nl|'\n'
op|'('
name|'old_ref'
op|','
name|'instance_ref'
op|')'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'notifications'
op|'.'
name|'send_update'
op|'('
name|'context'
op|','
name|'old_ref'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'instance_ref'
newline|'\n'
nl|'\n'
DECL|member|_check_injected_file_quota
dedent|''
name|'def'
name|'_check_injected_file_quota'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'injected_files'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enforce quota limits on injected files.\n\n        Raises a QuotaError if any limit is exceeded.\n        """'
newline|'\n'
name|'if'
name|'injected_files'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Check number of files first'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'injected_files'
op|'='
name|'len'
op|'('
name|'injected_files'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'OnsetFileLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# OK, now count path and content lengths; we're looking for"
nl|'\n'
comment|'# the max...'
nl|'\n'
dedent|''
name|'max_path'
op|'='
number|'0'
newline|'\n'
name|'max_content'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'path'
op|','
name|'content'
name|'in'
name|'injected_files'
op|':'
newline|'\n'
indent|'            '
name|'max_path'
op|'='
name|'max'
op|'('
name|'max_path'
op|','
name|'len'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
name|'max_content'
op|'='
name|'max'
op|'('
name|'max_content'
op|','
name|'len'
op|'('
name|'content'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'injected_file_path_bytes'
op|'='
name|'max_path'
op|','
nl|'\n'
name|'injected_file_content_bytes'
op|'='
name|'max_content'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|'# Favor path limit over content limit for reporting'
nl|'\n'
comment|'# purposes'
nl|'\n'
indent|'            '
name|'if'
string|"'injected_file_path_bytes'"
name|'in'
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'overs'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'OnsetFilePathLimitExceeded'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'OnsetFileContentLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_num_instances_quota
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_num_instances_quota'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
name|'min_count'
op|','
nl|'\n'
name|'max_count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enforce quota limits on number of instances created."""'
newline|'\n'
nl|'\n'
comment|'# Determine requested cores and ram'
nl|'\n'
name|'req_cores'
op|'='
name|'max_count'
op|'*'
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'req_ram'
op|'='
name|'max_count'
op|'*'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Check the quota'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reservations'
op|'='
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'instances'
op|'='
name|'max_count'
op|','
nl|'\n'
name|'cores'
op|'='
name|'req_cores'
op|','
name|'ram'
op|'='
name|'req_ram'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|"# OK, we exceeded quota; let's figure out why..."
nl|'\n'
indent|'            '
name|'quotas'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'quotas'"
op|']'
newline|'\n'
name|'usages'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'usages'"
op|']'
newline|'\n'
name|'overs'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'overs'"
op|']'
newline|'\n'
nl|'\n'
name|'headroom'
op|'='
name|'dict'
op|'('
op|'('
name|'res'
op|','
name|'quotas'
op|'['
name|'res'
op|']'
op|'-'
nl|'\n'
op|'('
name|'usages'
op|'['
name|'res'
op|']'
op|'['
string|"'in_use'"
op|']'
op|'+'
name|'usages'
op|'['
name|'res'
op|']'
op|'['
string|"'reserved'"
op|']'
op|')'
op|')'
nl|'\n'
name|'for'
name|'res'
name|'in'
name|'quotas'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'allowed'
op|'='
name|'headroom'
op|'['
string|"'instances'"
op|']'
newline|'\n'
comment|"# Reduce 'allowed' instances in line with the cores & ram headroom"
nl|'\n'
name|'if'
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'allowed'
op|'='
name|'min'
op|'('
name|'allowed'
op|','
nl|'\n'
name|'headroom'
op|'['
string|"'cores'"
op|']'
op|'//'
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'allowed'
op|'='
name|'min'
op|'('
name|'allowed'
op|','
nl|'\n'
name|'headroom'
op|'['
string|"'ram'"
op|']'
op|'//'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Convert to the appropriate exception message'
nl|'\n'
dedent|''
name|'if'
name|'allowed'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot run any more instances of this type."'
op|')'
newline|'\n'
name|'allowed'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'elif'
name|'min_count'
op|'<='
name|'allowed'
op|'<='
name|'max_count'
op|':'
newline|'\n'
comment|"# We're actually OK, but still need reservations"
nl|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'_check_num_instances_quota'
op|'('
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'min_count'
op|','
name|'allowed'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Can only run %s more instances of this type."'
op|')'
op|'%'
nl|'\n'
name|'allowed'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'resource'
op|'='
name|'overs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'used'
op|'='
name|'quotas'
op|'['
name|'resource'
op|']'
op|'-'
name|'headroom'
op|'['
name|'resource'
op|']'
newline|'\n'
name|'total_allowed'
op|'='
name|'used'
op|'+'
name|'headroom'
op|'['
name|'resource'
op|']'
newline|'\n'
name|'overs'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
name|'overs'
op|')'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"%(overs)s quota exceeded for %(pid)s,"'
nl|'\n'
string|'" tried to run %(min_count)s instances. %(msg)s"'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'requested'
op|'='
name|'dict'
op|'('
name|'instances'
op|'='
name|'min_count'
op|','
name|'cores'
op|'='
name|'req_cores'
op|','
name|'ram'
op|'='
name|'req_ram'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'TooManyInstances'
op|'('
name|'overs'
op|'='
name|'overs'
op|','
nl|'\n'
name|'req'
op|'='
name|'requested'
op|'['
name|'resource'
op|']'
op|','
nl|'\n'
name|'used'
op|'='
name|'used'
op|','
name|'allowed'
op|'='
name|'total_allowed'
op|','
nl|'\n'
name|'resource'
op|'='
name|'resource'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'max_count'
op|','
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|_check_metadata_properties_quota
dedent|''
name|'def'
name|'_check_metadata_properties_quota'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'metadata'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enforce quota limits on metadata properties."""'
newline|'\n'
name|'if'
name|'not'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'num_metadata'
op|'='
name|'len'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'metadata_items'
op|'='
name|'num_metadata'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Quota exceeded for %(pid)s, tried to set "'
nl|'\n'
string|'"%(num_metadata)s metadata properties"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'quota_metadata'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'quotas'"
op|']'
op|'['
string|"'metadata_items'"
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MetadataLimitExceeded'
op|'('
name|'allowed'
op|'='
name|'quota_metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# Because metadata is stored in the DB, we hard-code the size limits'
nl|'\n'
comment|'# In future, we may support more variable length strings, so we act'
nl|'\n'
comment|'#  as if this is quota-controlled for forwards compatibility'
nl|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'metadata'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'k'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Metadata property key blank"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidMetadata'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'k'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Metadata property key greater than 255 characters"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidMetadataSize'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'v'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Metadata property value greater than 255 characters"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidMetadataSize'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_requested_networks
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_requested_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if the networks requested belongs to the project\n        and the fixed IP address for each network provided is within\n        same the network block\n        """'
newline|'\n'
name|'if'
name|'not'
name|'requested_networks'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'validate_networks'
op|'('
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_handle_kernel_and_ramdisk
name|'def'
name|'_handle_kernel_and_ramdisk'
op|'('
name|'context'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Choose kernel and ramdisk appropriate for the instance.\n\n        The kernel and ramdisk can be chosen in one of three ways:\n\n            1. Passed in with create-instance request.\n\n            2. Inherited from image.\n\n            3. Forced to None by using `null_kernel` FLAG.\n        """'
newline|'\n'
comment|'# Inherit from image if not specified'
nl|'\n'
name|'image_properties'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'kernel_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kernel_id'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ramdisk_id'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Force to None if using null_kernel'
nl|'\n'
dedent|''
name|'if'
name|'kernel_id'
op|'=='
name|'str'
op|'('
name|'CONF'
op|'.'
name|'null_kernel'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel_id'
op|'='
name|'None'
newline|'\n'
name|'ramdisk_id'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Verify kernel and ramdisk exist (fail-fast)'
nl|'\n'
dedent|''
name|'if'
name|'kernel_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'image_service'
op|','
name|'kernel_id'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
nl|'\n'
name|'context'
op|','
name|'kernel_id'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'kernel_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'image_service'
op|','
name|'ramdisk_id'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
nl|'\n'
name|'context'
op|','
name|'ramdisk_id'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'ramdisk_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'kernel_id'
op|','
name|'ramdisk_id'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_handle_availability_zone
name|'def'
name|'_handle_availability_zone'
op|'('
name|'availability_zone'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): We have a legacy hack to allow admins to specify hosts'
nl|'\n'
comment|'#             via az using az:host. It might be nice to expose an'
nl|'\n'
comment|'#             api to specify specific hosts to force onto, but for'
nl|'\n'
comment|'#             now it just supports this legacy hack.'
nl|'\n'
indent|'        '
name|'forced_host'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'availability_zone'
name|'and'
string|"':'"
name|'in'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'availability_zone'
op|','
name|'forced_host'
op|'='
name|'availability_zone'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'availability_zone'
op|'='
name|'CONF'
op|'.'
name|'default_schedule_zone'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'availability_zone'
op|','
name|'forced_host'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_inherit_properties_from_image
name|'def'
name|'_inherit_properties_from_image'
op|'('
name|'image'
op|','
name|'auto_disk_config'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_properties'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|prop
name|'def'
name|'prop'
op|'('
name|'prop_'
op|','
name|'prop_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return the value of an image property."""'
newline|'\n'
name|'value'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
name|'prop_'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'prop_type'
op|'=='
string|"'bool'"
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'options_from_image'
op|'='
op|'{'
string|"'os_type'"
op|':'
name|'prop'
op|'('
string|"'os_type'"
op|')'
op|','
nl|'\n'
string|"'architecture'"
op|':'
name|'prop'
op|'('
string|"'architecture'"
op|')'
op|','
nl|'\n'
string|"'vm_mode'"
op|':'
name|'prop'
op|'('
string|"'vm_mode'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
comment|"# If instance doesn't have auto_disk_config overridden by request, use"
nl|'\n'
comment|'# whatever the image indicates'
nl|'\n'
name|'if'
name|'auto_disk_config'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'auto_disk_config'
op|'='
name|'prop'
op|'('
string|"'auto_disk_config'"
op|','
name|'prop_type'
op|'='
string|"'bool'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'options_from_image'
op|'['
string|"'auto_disk_config'"
op|']'
op|'='
name|'auto_disk_config'
newline|'\n'
name|'return'
name|'options_from_image'
newline|'\n'
nl|'\n'
DECL|member|_validate_and_provision_instance
dedent|''
name|'def'
name|'_validate_and_provision_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
nl|'\n'
name|'min_count'
op|','
name|'max_count'
op|','
nl|'\n'
name|'display_name'
op|','
name|'display_description'
op|','
nl|'\n'
name|'key_name'
op|','
name|'key_data'
op|','
name|'security_group'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'user_data'
op|','
nl|'\n'
name|'metadata'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'access_ip_v4'
op|','
name|'access_ip_v6'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'config_drive'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
nl|'\n'
name|'auto_disk_config'
op|','
name|'reservation_id'
op|','
nl|'\n'
name|'scheduler_hints'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify all the input parameters regardless of the provisioning\n        strategy being performed."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'security_group'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'='
string|"'default'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'min_count'
op|':'
newline|'\n'
indent|'            '
name|'min_count'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'max_count'
op|':'
newline|'\n'
indent|'            '
name|'max_count'
op|'='
name|'min_count'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
name|'or'
op|'['
op|']'
newline|'\n'
name|'if'
name|'min_count'
op|'>'
number|'1'
name|'or'
name|'max_count'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'any'
op|'('
name|'map'
op|'('
name|'lambda'
name|'bdm'
op|':'
string|"'volume_id'"
name|'in'
name|'bdm'
op|','
name|'block_device_mapping'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Cannot attach one or more volumes to multiple'"
nl|'\n'
string|"' instances'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidRequest'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'disabled'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|'('
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'user_data'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'len'
op|'('
name|'user_data'
op|')'
newline|'\n'
name|'if'
name|'l'
op|'>'
name|'MAX_USERDATA_SIZE'
op|':'
newline|'\n'
comment|'# NOTE(mikal): user_data is stored in a text column, and'
nl|'\n'
comment|'# the database might silently truncate if its over length.'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUserDataTooLarge'
op|'('
nl|'\n'
name|'length'
op|'='
name|'l'
op|','
name|'maxsize'
op|'='
name|'MAX_USERDATA_SIZE'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'base64'
op|'.'
name|'decodestring'
op|'('
name|'user_data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'base64'
op|'.'
name|'binascii'
op|'.'
name|'Error'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUserDataMalformed'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Reserve quotas'
nl|'\n'
dedent|''
dedent|''
name|'num_instances'
op|','
name|'quota_reservations'
op|'='
name|'self'
op|'.'
name|'_check_num_instances_quota'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
name|'min_count'
op|','
name|'max_count'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to create the instance'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_metadata_properties_quota'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_injected_file_quota'
op|'('
name|'context'
op|','
name|'injected_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_requested_networks'
op|'('
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image_href'
op|':'
newline|'\n'
indent|'                '
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
nl|'\n'
name|'context'
op|','
name|'image_href'
op|')'
newline|'\n'
name|'image'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'if'
name|'image'
op|'['
string|"'status'"
op|']'
op|'!='
string|"'active'"
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotActive'
op|'('
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|'<'
name|'int'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'min_ram'"
op|')'
name|'or'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeMemoryTooSmall'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'<'
name|'int'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'min_disk'"
op|')'
name|'or'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeDiskTooSmall'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kernel_id'
op|','
name|'ramdisk_id'
op|'='
name|'self'
op|'.'
name|'_handle_kernel_and_ramdisk'
op|'('
nl|'\n'
name|'context'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle config_drive'
nl|'\n'
name|'config_drive_id'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'config_drive'
name|'and'
name|'not'
name|'utils'
op|'.'
name|'is_valid_boolstr'
op|'('
name|'config_drive'
op|')'
op|':'
newline|'\n'
comment|'# config_drive is volume id'
nl|'\n'
indent|'                '
name|'config_drive_id'
op|'='
name|'config_drive'
newline|'\n'
name|'config_drive'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Ensure config_drive image exists'
nl|'\n'
name|'cd_image_service'
op|','
name|'config_drive_id'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
name|'context'
op|','
name|'config_drive_id'
op|')'
newline|'\n'
name|'cd_image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'config_drive_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key_data'
name|'is'
name|'None'
name|'and'
name|'key_name'
op|':'
newline|'\n'
indent|'                '
name|'key_pair'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_get'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'key_name'
op|')'
newline|'\n'
name|'key_data'
op|'='
name|'key_pair'
op|'['
string|"'public_key'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'root_device_name'
op|'='
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
nl|'\n'
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'availability_zone'
op|','
name|'forced_host'
op|'='
name|'self'
op|'.'
name|'_handle_availability_zone'
op|'('
nl|'\n'
name|'availability_zone'
op|')'
newline|'\n'
nl|'\n'
name|'base_options'
op|'='
op|'{'
nl|'\n'
string|"'reservation_id'"
op|':'
name|'reservation_id'
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'image_href'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'kernel_id'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'ramdisk_id'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'config_drive_id'"
op|':'
name|'config_drive_id'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'config_drive'"
op|':'
name|'config_drive'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'launch_time'"
op|':'
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|','
nl|'\n'
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
nl|'\n'
string|"'display_name'"
op|':'
name|'display_name'
op|','
nl|'\n'
string|"'display_description'"
op|':'
name|'display_description'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'user_data'"
op|':'
name|'user_data'
op|','
nl|'\n'
string|"'key_name'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'key_data'"
op|':'
name|'key_data'
op|','
nl|'\n'
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'metadata'"
op|':'
name|'metadata'
op|','
nl|'\n'
string|"'access_ip_v4'"
op|':'
name|'access_ip_v4'
op|','
nl|'\n'
string|"'access_ip_v6'"
op|':'
name|'access_ip_v6'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
name|'availability_zone'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'root_device_name'
op|','
nl|'\n'
string|"'progress'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
name|'options_from_image'
op|'='
name|'self'
op|'.'
name|'_inherit_properties_from_image'
op|'('
nl|'\n'
name|'image'
op|','
name|'auto_disk_config'
op|')'
newline|'\n'
nl|'\n'
name|'base_options'
op|'.'
name|'update'
op|'('
name|'options_from_image'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to run %s instances..."'
op|')'
op|'%'
name|'num_instances'
op|')'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'scheduler_hints'
op|'='
name|'scheduler_hints'
op|')'
newline|'\n'
name|'if'
name|'forced_host'
op|':'
newline|'\n'
indent|'                '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create:forced_host'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'filter_properties'
op|'['
string|"'force_hosts'"
op|']'
op|'='
op|'['
name|'forced_host'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'num_instances'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'options'
op|'='
name|'base_options'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'create_db_entry_for_new_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'options'
op|','
nl|'\n'
name|'security_group'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance_uuids'
op|'.'
name|'append'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# In the case of any exceptions, attempt DB cleanup and rollback the'
nl|'\n'
comment|'# quota reservations.'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'instance_uuid'
name|'in'
name|'instance_uuids'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
name|'quota_reservations'
op|')'
newline|'\n'
nl|'\n'
comment|'# Commit the reservations'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'quota_reservations'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'image'
op|')'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'base_options'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type'
op|','
nl|'\n'
string|"'instance_uuids'"
op|':'
name|'instance_uuids'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|','
nl|'\n'
string|"'security_group'"
op|':'
name|'security_group'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'instances'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
nl|'\n'
name|'min_count'
op|','
name|'max_count'
op|','
nl|'\n'
name|'display_name'
op|','
name|'display_description'
op|','
nl|'\n'
name|'key_name'
op|','
name|'key_data'
op|','
name|'security_group'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'user_data'
op|','
name|'metadata'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'access_ip_v4'
op|','
name|'access_ip_v6'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'config_drive'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'auto_disk_config'
op|','
nl|'\n'
name|'reservation_id'
op|'='
name|'None'
op|','
name|'scheduler_hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify all the input parameters regardless of the provisioning\n        strategy being performed and schedule the instance(s) for\n        creation."""'
newline|'\n'
nl|'\n'
name|'if'
name|'reservation_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'reservation_id'
op|'='
name|'utils'
op|'.'
name|'generate_uid'
op|'('
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'instances'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|')'
op|'='
name|'self'
op|'.'
name|'_validate_and_provision_instance'
op|'('
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
name|'min_count'
op|','
nl|'\n'
name|'max_count'
op|','
name|'display_name'
op|','
name|'display_description'
op|','
nl|'\n'
name|'key_name'
op|','
name|'key_data'
op|','
name|'security_group'
op|','
name|'availability_zone'
op|','
nl|'\n'
name|'user_data'
op|','
name|'metadata'
op|','
name|'injected_files'
op|','
name|'access_ip_v4'
op|','
nl|'\n'
name|'access_ip_v6'
op|','
name|'requested_networks'
op|','
name|'config_drive'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'auto_disk_config'
op|','
nl|'\n'
name|'reservation_id'
op|','
name|'scheduler_hints'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'run_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'admin_password'
op|','
name|'injected_files'
op|'='
name|'injected_files'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
name|'is_first_time'
op|'='
name|'True'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'instances'
op|','
name|'reservation_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_volume_size
name|'def'
name|'_volume_size'
op|'('
name|'instance_type'
op|','
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'size'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'instance_type'
op|'.'
name|'get'
op|'('
string|"'swap'"
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'num'
op|'='
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
name|'virtual_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(yamahata): ephemeralN where N > 0'
nl|'\n'
comment|'# Only ephemeral0 is allowed for now because InstanceTypes'
nl|'\n'
comment|'# table only allows single local disk, ephemeral_gb.'
nl|'\n'
comment|'# In order to enhance it, we need to add a new columns to'
nl|'\n'
comment|'# instance_types table.'
nl|'\n'
name|'if'
name|'num'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
name|'instance_type'
op|'.'
name|'get'
op|'('
string|"'ephemeral_gb'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'size'
newline|'\n'
nl|'\n'
DECL|member|_update_image_block_device_mapping
dedent|''
name|'def'
name|'_update_image_block_device_mapping'
op|'('
name|'self'
op|','
name|'elevated_context'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'mappings'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""tell vm driver to create ephemeral/swap device at boot time by\n        updating BlockDeviceMapping\n        """'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device'
op|'.'
name|'mappings_prepend_dev'
op|'('
name|'mappings'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"bdm %s"'
op|')'
op|','
name|'bdm'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'virtual_name'
op|'='
name|'bdm'
op|'['
string|"'virtual'"
op|']'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'ami'"
name|'or'
name|'virtual_name'
op|'=='
string|"'root'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
name|'self'
op|'.'
name|'_volume_size'
op|'('
name|'instance_type'
op|','
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'size'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'bdm'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'virtual_name'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'size'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update_or_create'
op|'('
name|'elevated_context'
op|','
nl|'\n'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_block_device_mapping
dedent|''
dedent|''
name|'def'
name|'_update_block_device_mapping'
op|'('
name|'self'
op|','
name|'elevated_context'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""tell vm driver to attach volume at boot time by updating\n        BlockDeviceMapping\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"block_device_mapping %s"'
op|')'
op|','
name|'block_device_mapping'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'assert'
string|"'device_name'"
name|'in'
name|'bdm'
newline|'\n'
nl|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
op|'('
string|"'device_name'"
op|','
string|"'delete_on_termination'"
op|','
string|"'virtual_name'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
nl|'\n'
string|"'no_device'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'['
name|'key'
op|']'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'virtual_name'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'virtual_name'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'virtual_name'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'self'
op|'.'
name|'_volume_size'
op|'('
name|'instance_type'
op|','
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'size'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'values'
op|'['
string|"'volume_size'"
op|']'
op|'='
name|'size'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): NoDevice eliminates devices defined in image'
nl|'\n'
comment|'#                 files by command line option.'
nl|'\n'
comment|'#                 (--block-device-mapping)'
nl|'\n'
dedent|''
name|'if'
name|'virtual_name'
op|'=='
string|"'NoDevice'"
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'['
string|"'no_device'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'k'
name|'in'
op|'('
string|"'delete_on_termination'"
op|','
string|"'virtual_name'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'['
name|'k'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update_or_create'
op|'('
name|'elevated_context'
op|','
nl|'\n'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_populate_instance_for_bdm
dedent|''
dedent|''
name|'def'
name|'_populate_instance_for_bdm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate instance block device mapping information."""'
newline|'\n'
comment|'# FIXME(comstud): Why do the block_device_mapping DB calls'
nl|'\n'
comment|'# require elevated context?'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'image_properties'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'mappings'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'if'
name|'mappings'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_image_block_device_mapping'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'instance_uuid'
op|','
name|'mappings'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'image_bdm'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'for'
name|'mapping'
name|'in'
op|'('
name|'image_bdm'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'mapping'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_block_device_mapping'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'instance_uuid'
op|','
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_populate_instance_shutdown_terminate
dedent|''
dedent|''
name|'def'
name|'_populate_instance_shutdown_terminate'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate instance shutdown_terminate information."""'
newline|'\n'
name|'image_properties'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
op|'('
name|'block_device_mapping'
name|'or'
nl|'\n'
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|')'
name|'or'
nl|'\n'
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'['
string|"'shutdown_terminate'"
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_populate_instance_names
dedent|''
dedent|''
name|'def'
name|'_populate_instance_names'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate instance display_name and hostname."""'
newline|'\n'
name|'display_name'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'display_name'"
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'hostname'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'display_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'display_name'
op|'='
name|'self'
op|'.'
name|'_default_display_name'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'display_name'"
op|']'
op|'='
name|'display_name'
newline|'\n'
dedent|''
name|'if'
name|'hostname'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
name|'display_name'
newline|'\n'
dedent|''
name|'instance'
op|'['
string|"'hostname'"
op|']'
op|'='
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_default_display_name
dedent|''
name|'def'
name|'_default_display_name'
op|'('
name|'self'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Server %s"'
op|'%'
name|'instance_uuid'
newline|'\n'
nl|'\n'
DECL|member|_populate_instance_for_create
dedent|''
name|'def'
name|'_populate_instance_for_create'
op|'('
name|'self'
op|','
name|'base_options'
op|','
name|'image'
op|','
nl|'\n'
name|'security_groups'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build the beginning of a new instance."""'
newline|'\n'
name|'image_properties'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'base_options'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'uuid'"
op|')'
op|':'
newline|'\n'
comment|'# Generate the instance_uuid here so we can use it'
nl|'\n'
comment|'# for additional setup before creating the DB entry.'
nl|'\n'
indent|'            '
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'['
string|"'launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
name|'instance'
op|'['
string|"'info_cache'"
op|']'
op|'='
op|'{'
string|"'network_info'"
op|':'
string|"'[]'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# Store image properties so we can use them later'
nl|'\n'
comment|'# (for notifications, etc).  Only store what we can.'
nl|'\n'
name|'instance'
op|'.'
name|'setdefault'
op|'('
string|"'system_metadata'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'image_properties'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_value'
op|'='
name|'str'
op|'('
name|'value'
op|')'
op|'['
op|':'
number|'255'
op|']'
newline|'\n'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'['
string|"'image_%s'"
op|'%'
name|'key'
op|']'
op|'='
name|'new_value'
newline|'\n'
nl|'\n'
comment|'# Keep a record of the original base image that this'
nl|'\n'
comment|"# image's instance is derived from:"
nl|'\n'
dedent|''
name|'base_image_ref'
op|'='
name|'image_properties'
op|'.'
name|'get'
op|'('
string|"'base_image_ref'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'base_image_ref'
op|':'
newline|'\n'
comment|'# base image ref property not previously set through a snapshot.'
nl|'\n'
comment|'# default to using the image ref as the base:'
nl|'\n'
indent|'            '
name|'base_image_ref'
op|'='
name|'base_options'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'['
string|"'image_base_image_ref'"
op|']'
op|'='
name|'base_image_ref'
newline|'\n'
nl|'\n'
comment|"# Use 'default' security_group if none specified."
nl|'\n'
name|'if'
name|'security_groups'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'security_groups'
op|'='
op|'['
string|"'default'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'security_groups'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'security_groups'
op|'='
op|'['
name|'security_groups'
op|']'
newline|'\n'
dedent|''
name|'instance'
op|'['
string|"'security_groups'"
op|']'
op|'='
name|'security_groups'
newline|'\n'
nl|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
comment|'#NOTE(bcwaldon): No policy check since this is only used by scheduler and'
nl|'\n'
comment|'# the compute api. That should probably be cleaned up, though.'
nl|'\n'
DECL|member|create_db_entry_for_new_instance
dedent|''
name|'def'
name|'create_db_entry_for_new_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
name|'image'
op|','
nl|'\n'
name|'base_options'
op|','
name|'security_group'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create an entry in the DB for this new instance,\n        including any related table updates (such as security group,\n        etc).\n\n        This is called by the scheduler after a location for the\n        instance has been determined.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_populate_instance_for_create'
op|'('
name|'base_options'
op|','
nl|'\n'
name|'image'
op|','
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_populate_instance_names'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_populate_instance_shutdown_terminate'
op|'('
name|'instance'
op|','
name|'image'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure_default security group is called before the instance'
nl|'\n'
comment|'# is created so the creation of the default security group is'
nl|'\n'
comment|'# proxied to the sgh.'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'ensure_default'
op|'('
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_populate_instance_for_bdm'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'image'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
comment|'# send a state update notification for the initial create to'
nl|'\n'
comment|'# show it going from non-existent to BUILDING'
nl|'\n'
name|'notifications'
op|'.'
name|'send_update_with_states'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
name|'None'
op|','
name|'None'
op|','
name|'service'
op|'='
string|'"api"'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|_check_create_policies
dedent|''
name|'def'
name|'_check_create_policies'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'availability_zone'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check policies for create()."""'
newline|'\n'
name|'target'
op|'='
op|'{'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
name|'availability_zone'
op|'}'
newline|'\n'
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'requested_networks'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create:attach_network'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create:attach_volume'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'hooks'
op|'.'
name|'add_hook'
op|'('
string|'"create_instance"'
op|')'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|'='
name|'None'
op|','
name|'ramdisk_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'min_count'
op|'='
name|'None'
op|','
name|'max_count'
op|'='
name|'None'
op|','
nl|'\n'
name|'display_name'
op|'='
name|'None'
op|','
name|'display_description'
op|'='
name|'None'
op|','
nl|'\n'
name|'key_name'
op|'='
name|'None'
op|','
name|'key_data'
op|'='
name|'None'
op|','
name|'security_group'
op|'='
name|'None'
op|','
nl|'\n'
name|'availability_zone'
op|'='
name|'None'
op|','
name|'user_data'
op|'='
name|'None'
op|','
name|'metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'None'
op|','
name|'access_ip_v4'
op|'='
name|'None'
op|','
nl|'\n'
name|'access_ip_v6'
op|'='
name|'None'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
name|'config_drive'
op|'='
name|'None'
op|','
nl|'\n'
name|'auto_disk_config'
op|'='
name|'None'
op|','
name|'scheduler_hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Provision instances, sending instance information to the\n        scheduler.  The scheduler will determine where the instance(s)\n        go and will handle creating the DB entries.\n\n        Returns a tuple of (instances, reservation_id)\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_create_policies'
op|'('
name|'context'
op|','
name|'availability_zone'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_create_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
nl|'\n'
name|'min_count'
op|','
name|'max_count'
op|','
nl|'\n'
name|'display_name'
op|','
name|'display_description'
op|','
nl|'\n'
name|'key_name'
op|','
name|'key_data'
op|','
name|'security_group'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'user_data'
op|','
name|'metadata'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'access_ip_v4'
op|','
name|'access_ip_v6'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'config_drive'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'auto_disk_config'
op|','
nl|'\n'
name|'scheduler_hints'
op|'='
name|'scheduler_hints'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_provider_fw_rules_refresh
dedent|''
name|'def'
name|'trigger_provider_fw_rules_refresh'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a rule is added/removed from a provider firewall."""'
newline|'\n'
nl|'\n'
name|'for'
name|'service'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all_by_topic'
op|'('
name|'context'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'compute_topic'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_name'
op|'='
name|'service'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_state
dedent|''
dedent|''
name|'def'
name|'update_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'new_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the state of a compute instance.\n        For example to \'active\' or \'error\'.\n        Also sets \'task_state\' to None.\n        Used by admin_actions api\n\n        :param context: The security context\n        :param instance: The instance to update\n        :param new_state: A member of vm_state, eg. \'active\'\n        """'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'new_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|update
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the instance in the datastore.\n\n        :param context: The security context\n        :param instance: The instance to update\n        :param kwargs: All additional keyword args are treated\n                       as data fields of the instance to be\n                       updated\n\n        :returns: None\n        """'
newline|'\n'
name|'_'
op|','
name|'updated'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'updated'
newline|'\n'
nl|'\n'
DECL|member|_update
dedent|''
name|'def'
name|'_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# Update the instance record and send a state update notification'
nl|'\n'
comment|'# if task or vm state changed'
nl|'\n'
indent|'        '
name|'old_ref'
op|','
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'notifications'
op|'.'
name|'send_update'
op|'('
name|'context'
op|','
name|'old_ref'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'service'
op|'='
string|'"api"'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'dict'
op|'('
name|'old_ref'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
op|','
name|'dict'
op|'('
name|'instance_ref'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete
dedent|''
name|'def'
name|'_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'cb'
op|','
op|'**'
name|'instance_attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'['
string|"'disable_terminate'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'instance termination disabled'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
name|'and'
name|'context'
op|'.'
name|'project_id'
op|'!='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(maoy): no expected_task_state needs to be set'
nl|'\n'
indent|'            '
name|'attrs'
op|'='
op|'{'
string|"'progress'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'attrs'
op|'.'
name|'update'
op|'('
name|'instance_attrs'
op|')'
newline|'\n'
name|'old'
op|','
name|'updated'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'**'
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Avoid double-counting the quota usage reduction'
nl|'\n'
comment|'# where delete is already in progress'
nl|'\n'
name|'if'
op|'('
name|'old'
op|'['
string|"'vm_state'"
op|']'
op|'!='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
name|'and'
nl|'\n'
name|'old'
op|'['
string|"'task_state'"
op|']'
name|'not'
name|'in'
op|'('
name|'task_states'
op|'.'
name|'DELETING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_create_reservations'
op|'('
name|'context'
op|','
nl|'\n'
name|'old'
op|','
nl|'\n'
name|'updated'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
comment|'# Just update database, nothing else we can do'
nl|'\n'
indent|'                '
name|'constraint'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'constraint'
op|'('
name|'host'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'equal_any'
op|'('
name|'host'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'constraint'
op|')'
newline|'\n'
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'                        '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ConstraintNotMet'
op|':'
newline|'\n'
comment|'# Refresh to get new host information'
nl|'\n'
indent|'                    '
name|'instance'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'RESIZED'
op|':'
newline|'\n'
comment|'# If in the middle of a resize, use confirm_resize to'
nl|'\n'
comment|'# ensure the original instance is cleaned up too'
nl|'\n'
indent|'                '
name|'get_migration'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'migration_ref'
op|'='
name|'get_migration'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'finished'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MigrationNotFoundByStatus'
op|':'
newline|'\n'
indent|'                    '
name|'migration_ref'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'migration_ref'
op|':'
newline|'\n'
indent|'                    '
name|'src_host'
op|'='
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
newline|'\n'
comment|'# Call since this can race with the terminate_instance.'
nl|'\n'
comment|'# The resize is done but awaiting confirmation/reversion,'
nl|'\n'
comment|'# so there are two cases:'
nl|'\n'
comment|"# 1. up-resize: here -instance['vcpus'/'memory_mb'] match"
nl|'\n'
comment|'#    the quota usages accounted for this instance,'
nl|'\n'
comment|'#    so no further quota adjustment is needed'
nl|'\n'
comment|"# 2. down-resize: here -instance['vcpus'/'memory_mb'] are"
nl|'\n'
comment|'#    shy by delta(old, new) from the quota usages accounted'
nl|'\n'
comment|'#    for this instance, so we must adjust'
nl|'\n'
name|'deltas'
op|'='
name|'self'
op|'.'
name|'_downsize_quota_delta'
op|'('
name|'context'
op|','
nl|'\n'
name|'migration_ref'
op|')'
newline|'\n'
name|'downsize_reservations'
op|'='
name|'self'
op|'.'
name|'_reserve_quota_delta'
op|'('
name|'context'
op|','
nl|'\n'
name|'deltas'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'migration_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'src_host'
op|','
name|'cast'
op|'='
name|'False'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'downsize_reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'is_up'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_compute_host'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'servicegroup_api'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'is_up'
op|'='
name|'True'
newline|'\n'
name|'cb'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'is_up'
op|':'
newline|'\n'
comment|"# If compute node isn't up, just delete from DB"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_local_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Race condition. Instance already gone.'
nl|'\n'
indent|'            '
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'                    '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_reservations
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_reservations'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'old_instance'
op|','
name|'new_instance'
op|','
nl|'\n'
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_vcpus'
op|'='
name|'old_instance'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'instance_memory_mb'
op|'='
name|'old_instance'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
comment|'# NOTE(wangpan): if the instance is resizing, and the resources'
nl|'\n'
comment|'#                are updated to new instance type, we should use'
nl|'\n'
comment|'#                the old instance type to create reservation.'
nl|'\n'
comment|'# see https://bugs.launchpad.net/nova/+bug/1099729 for more details'
nl|'\n'
name|'if'
name|'old_instance'
op|'['
string|"'task_state'"
op|']'
name|'in'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'get_migration'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'migration_ref'
op|'='
name|'get_migration'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'old_instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'post-migrating'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MigrationNotFoundByStatus'
op|':'
newline|'\n'
indent|'                '
name|'migration_ref'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'migration_ref'
name|'and'
nl|'\n'
name|'new_instance'
op|'['
string|"'instance_type_id'"
op|']'
op|'=='
nl|'\n'
name|'migration_ref'
op|'['
string|"'new_instance_type_id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'old_inst_type_id'
op|'='
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
newline|'\n'
name|'get_inst_type_by_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'old_inst_type'
op|'='
name|'get_inst_type_by_id'
op|'('
name|'old_inst_type_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"instance type %(old_inst_type_id)d "'
nl|'\n'
string|'"not found"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'instance_vcpus'
op|'='
name|'old_inst_type'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'instance_memory_mb'
op|'='
name|'old_inst_type'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"going to delete a resizing instance"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'reservations'
op|'='
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'instances'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
name|'cores'
op|'='
op|'-'
name|'instance_vcpus'
op|','
nl|'\n'
name|'ram'
op|'='
op|'-'
name|'instance_memory_mb'
op|')'
newline|'\n'
name|'return'
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|_local_delete
dedent|''
name|'def'
name|'_local_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"instance\'s host %s is down, deleting from "'
nl|'\n'
string|'"database"'
op|')'
op|'%'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_delete'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"delete.start"'
op|')'
newline|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'system_meta'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup volumes'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
comment|"# NOTE(vish): We don't have access to correct volume"
nl|'\n'
comment|'#             connector info, so just pass a fake'
nl|'\n'
comment|'#             connector. This can be improved when we'
nl|'\n'
comment|'#             expose get_volume_connector to rpc.'
nl|'\n'
name|'connector'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
string|"'initiator'"
op|':'
string|"'iqn.fake'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'terminate_connection'
op|'('
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'connector'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'elevated'
op|','
name|'volume'
op|')'
newline|'\n'
name|'if'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_about_instance_usage'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
string|'"delete.end"'
op|','
name|'system_metadata'
op|'='
name|'system_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(maoy): we allow delete to be called no matter what vm_state says.'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
name|'None'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|member|soft_delete
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Going to try to soft delete instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|function|soft_delete
name|'def'
name|'soft_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'soft_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'soft_delete'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|','
nl|'\n'
name|'deleted_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_instance
dedent|''
name|'def'
name|'_delete_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
DECL|function|terminate
indent|'        '
name|'def'
name|'terminate'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'terminate'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
name|'None'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|member|delete
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to terminate instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|']'
op|')'
newline|'\n'
DECL|member|restore
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a previously deleted (but not reclaimed) instance."""'
newline|'\n'
comment|'# Reserve quotas'
nl|'\n'
name|'instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
name|'num_instances'
op|','
name|'quota_reservations'
op|'='
name|'self'
op|'.'
name|'_check_num_instances_quota'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESTORING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'deleted_at'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'restore_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'deleted_at'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'quota_reservations'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
name|'quota_reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|']'
op|')'
newline|'\n'
DECL|member|force_delete
name|'def'
name|'force_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force delete a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
DECL|member|stop
name|'def'
name|'stop'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop an instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to stop instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'stop_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'cast'
op|'='
name|'do_cast'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|')'
newline|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start an instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to start instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|"# TODO(yamahata): injected_files isn't supported right now."
nl|'\n'
comment|'#                 It is used only for osapi. not for ec2 api.'
nl|'\n'
comment|"#                 availability_zone isn't used by run_instance."
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'start_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE(bcwaldon): no policy check here since it should be rolled in to'
nl|'\n'
comment|'# search_opts in get_all'
nl|'\n'
DECL|member|get_active_by_window
dedent|''
name|'def'
name|'get_active_by_window'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get instances that were continuously active over a window."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_active_by_window'
op|'('
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
comment|"#NOTE(bcwaldon): this doesn't really belong in this class"
nl|'\n'
DECL|member|get_instance_type
dedent|''
name|'def'
name|'get_instance_type'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an instance type by instance type id."""'
newline|'\n'
name|'return'
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a single instance with the given instance_id."""'
newline|'\n'
comment|'# NOTE(ameade): we still need to support integer ids for ec2'
nl|'\n'
name|'if'
name|'uuidutils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'utils'
op|'.'
name|'is_int_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'check_policy'
op|'('
name|'context'
op|','
string|"'get'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst'
op|'='
name|'dict'
op|'('
name|'instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# NOTE(comstud): Doesn't get returned with iteritems"
nl|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
DECL|member|get_all
dedent|''
name|'def'
name|'get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'search_opts'
op|'='
name|'None'
op|','
name|'sort_key'
op|'='
string|"'created_at'"
op|','
nl|'\n'
name|'sort_dir'
op|'='
string|"'desc'"
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'marker'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all instances filtered by one of the given parameters.\n\n        If there is no filter and the context is an admin, it will retrieve\n        all instances in the system.\n\n        Deleted instances will be returned by default, unless there is a\n        search option that says otherwise.\n\n        The results will be returned sorted in the order specified by the\n        \'sort_dir\' parameter using the key specified in the \'sort_key\'\n        parameter.\n        """'
newline|'\n'
nl|'\n'
comment|'#TODO(bcwaldon): determine the best argument for target here'
nl|'\n'
name|'target'
op|'='
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'check_policy'
op|'('
name|'context'
op|','
string|'"get_all"'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'search_opts'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'search_opts'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'all_tenants'"
name|'in'
name|'search_opts'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|'"get_all_tenants"'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Searching by: %s"'
op|')'
op|'%'
name|'str'
op|'('
name|'search_opts'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Fixups for the DB call'
nl|'\n'
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_remap_flavor_filter
name|'def'
name|'_remap_flavor_filter'
op|'('
name|'flavor_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
nl|'\n'
name|'flavor_id'
op|')'
newline|'\n'
nl|'\n'
name|'filters'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_remap_fixed_ip_filter
dedent|''
name|'def'
name|'_remap_fixed_ip_filter'
op|'('
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
comment|"# Turn fixed_ip into a regexp match. Since '.' matches"
nl|'\n'
comment|'# any character, we need to use regexp escaping for it.'
nl|'\n'
indent|'            '
name|'filters'
op|'['
string|"'ip'"
op|']'
op|'='
string|"'^%s$'"
op|'%'
name|'fixed_ip'
op|'.'
name|'replace'
op|'('
string|"'.'"
op|','
string|"'\\\\.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# search_option to filter_name mapping.'
nl|'\n'
dedent|''
name|'filter_mapping'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
string|"'image_ref'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'display_name'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'project_id'"
op|','
nl|'\n'
string|"'flavor'"
op|':'
name|'_remap_flavor_filter'
op|','
nl|'\n'
string|"'fixed_ip'"
op|':'
name|'_remap_fixed_ip_filter'
op|'}'
newline|'\n'
nl|'\n'
comment|'# copy from search_opts, doing various remappings as necessary'
nl|'\n'
name|'for'
name|'opt'
op|','
name|'value'
name|'in'
name|'search_opts'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Do remappings.'
nl|'\n'
comment|'# Values not in the filter_mapping table are copied as-is.'
nl|'\n'
comment|'# If remapping is None, option is not copied'
nl|'\n'
comment|'# If the remapping is a string, it is the filter_name to use'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'remap_object'
op|'='
name|'filter_mapping'
op|'['
name|'opt'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'filters'
op|'['
name|'opt'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Remaps are strings to translate to, or functions to call'
nl|'\n'
comment|'# to do the translating as defined by the table above.'
nl|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'remap_object'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'filters'
op|'['
name|'remap_object'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'remap_object'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|"# We already know we can't match the filter, so"
nl|'\n'
comment|'# return an empty list'
nl|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'inst_models'
op|'='
name|'self'
op|'.'
name|'_get_instances_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|','
name|'sort_dir'
op|','
nl|'\n'
name|'limit'
op|'='
name|'limit'
op|','
nl|'\n'
name|'marker'
op|'='
name|'marker'
op|')'
newline|'\n'
nl|'\n'
comment|'# Convert the models to dictionaries'
nl|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'inst_model'
name|'in'
name|'inst_models'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'dict'
op|'('
name|'inst_model'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# NOTE(comstud): Doesn't get returned by iteritems"
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|'='
name|'inst_model'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|_get_instances_by_filters
dedent|''
name|'def'
name|'_get_instances_by_filters'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|','
name|'sort_dir'
op|','
nl|'\n'
name|'limit'
op|'='
name|'None'
op|','
nl|'\n'
name|'marker'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'ip6'"
name|'in'
name|'filters'
name|'or'
string|"'ip'"
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|')'
newline|'\n'
comment|'# NOTE(jkoelker) It is possible that we will get the same'
nl|'\n'
comment|'#                instance uuid twice (one for ipv4 and ipv6)'
nl|'\n'
name|'uuids'
op|'='
name|'set'
op|'('
op|'['
name|'r'
op|'['
string|"'instance_uuid'"
op|']'
name|'for'
name|'r'
name|'in'
name|'res'
op|']'
op|')'
newline|'\n'
name|'filters'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'uuids'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|','
name|'sort_dir'
op|','
nl|'\n'
name|'limit'
op|'='
name|'limit'
op|','
name|'marker'
op|'='
name|'marker'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|')'
newline|'\n'
DECL|member|backup
name|'def'
name|'backup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'backup_type'
op|','
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'None'
op|','
name|'image_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Backup the given instance\n\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param name: name of the backup or snapshot\n            name = backup_type  # daily backups are called \'daily\'\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        :param extra_properties: dict of extra image properties to include\n        """'
newline|'\n'
name|'if'
name|'image_id'
op|':'
newline|'\n'
comment|'# The image entry has already been created, so just pull the'
nl|'\n'
comment|'# metadata.'
nl|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
nl|'\n'
string|"'backup'"
op|','
name|'backup_type'
op|'='
name|'backup_type'
op|','
nl|'\n'
name|'rotation'
op|'='
name|'rotation'
op|','
name|'extra_properties'
op|'='
name|'extra_properties'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'snapshot_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
op|','
name|'image_type'
op|'='
string|"'backup'"
op|','
nl|'\n'
name|'backup_type'
op|'='
name|'backup_type'
op|','
name|'rotation'
op|'='
name|'rotation'
op|')'
newline|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|']'
op|')'
newline|'\n'
DECL|member|snapshot
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'extra_properties'
op|'='
name|'None'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot the given instance.\n\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param name: name of the backup or snapshot\n        :param extra_properties: dict of extra image properties to include\n\n        :returns: A dict containing image metadata\n        """'
newline|'\n'
name|'if'
name|'image_id'
op|':'
newline|'\n'
comment|'# The image entry has already been created, so just pull the'
nl|'\n'
comment|'# metadata.'
nl|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
nl|'\n'
string|"'snapshot'"
op|','
name|'extra_properties'
op|'='
name|'extra_properties'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'snapshot_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
op|','
name|'image_type'
op|'='
string|"'snapshot'"
op|')'
newline|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|_create_image
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'image_type'
op|','
nl|'\n'
name|'backup_type'
op|'='
name|'None'
op|','
name|'rotation'
op|'='
name|'None'
op|','
name|'extra_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create new image entry in the image service.  This new image\n        will be reserved for the compute manager to upload a snapshot\n        or backup.\n\n        :param context: security context\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param name: string for name of the snapshot\n        :param image_type: snapshot | backup\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        :param extra_properties: dict of extra image properties to include\n\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'properties'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'str'
op|'('
name|'context'
op|'.'
name|'user_id'
op|')'
op|','
nl|'\n'
string|"'image_type'"
op|':'
name|'image_type'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'sent_meta'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'properties'"
op|':'
name|'properties'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Persist base image ref as a Glance image property'
nl|'\n'
name|'system_meta'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'base_image_ref'
op|'='
name|'system_meta'
op|'.'
name|'get'
op|'('
string|"'image_base_image_ref'"
op|')'
newline|'\n'
name|'if'
name|'base_image_ref'
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'['
string|"'base_image_ref'"
op|']'
op|'='
name|'base_image_ref'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'['
string|"'backup_type'"
op|']'
op|'='
name|'backup_type'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
indent|'            '
name|'min_ram'
op|','
name|'min_disk'
op|'='
name|'self'
op|'.'
name|'_get_minram_mindisk_params'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'min_ram'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sent_meta'
op|'['
string|"'min_ram'"
op|']'
op|'='
name|'min_ram'
newline|'\n'
dedent|''
name|'if'
name|'min_disk'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sent_meta'
op|'['
string|"'min_disk'"
op|']'
op|'='
name|'min_disk'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'properties'
op|'.'
name|'update'
op|'('
name|'extra_properties'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now inherit image properties from the base image'
nl|'\n'
name|'prefix'
op|'='
string|"'image_'"
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'system_meta'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Trim off the image_ prefix'
nl|'\n'
indent|'            '
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'key'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'# Skip properties that are non-inheritable'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'in'
name|'CONF'
op|'.'
name|'non_inheritable_image_properties'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# By using setdefault, we ensure that the properties set'
nl|'\n'
comment|'# up above will not be overwritten by inherited values'
nl|'\n'
dedent|''
name|'properties'
op|'.'
name|'setdefault'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'sent_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|')'
newline|'\n'
DECL|member|snapshot_volume_backed
name|'def'
name|'snapshot_volume_backed'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'name'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot the given volume-backed instance.\n\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param image_meta: metadata for the new image\n        :param name: name of the backup or snapshot\n        :param extra_properties: dict of extra image properties to include\n\n        :returns: the new image metadata\n        """'
newline|'\n'
name|'image_meta'
op|'['
string|"'name'"
op|']'
op|'='
name|'name'
newline|'\n'
name|'properties'
op|'='
name|'image_meta'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'['
string|"'root_device_name'"
op|']'
op|'='
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
newline|'\n'
dedent|''
name|'properties'
op|'.'
name|'update'
op|'('
name|'extra_properties'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'get_instance_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'.'
name|'no_device'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'m'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
name|'in'
op|'('
string|"'device_name'"
op|','
string|"'snapshot_id'"
op|','
string|"'volume_id'"
op|','
nl|'\n'
string|"'volume_size'"
op|','
string|"'delete_on_termination'"
op|','
string|"'no_device'"
op|','
nl|'\n'
string|"'virtual_name'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'val'
op|'='
name|'getattr'
op|'('
name|'bdm'
op|','
name|'attr'
op|')'
newline|'\n'
name|'if'
name|'val'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'m'
op|'['
name|'attr'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'volume_id'
op|'='
name|'m'
op|'.'
name|'get'
op|'('
string|"'volume_id'"
op|')'
newline|'\n'
name|'if'
name|'volume_id'
op|':'
newline|'\n'
comment|'# create snapshot based on volume_id'
nl|'\n'
indent|'                '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
comment|'# NOTE(yamahata): Should we wait for snapshot creation?'
nl|'\n'
comment|'#                 Linux LVM snapshot creation completes in'
nl|'\n'
comment|"#                 short time, it doesn't matter for now."
nl|'\n'
name|'name'
op|'='
name|'_'
op|'('
string|"'snapshot for %s'"
op|')'
op|'%'
name|'image_meta'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create_snapshot_force'
op|'('
nl|'\n'
name|'context'
op|','
name|'volume'
op|','
name|'name'
op|','
name|'volume'
op|'['
string|"'display_description'"
op|']'
op|')'
newline|'\n'
name|'m'
op|'['
string|"'snapshot_id'"
op|']'
op|'='
name|'snapshot'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'del'
name|'m'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'                '
name|'mapping'
op|'.'
name|'append'
op|'('
name|'m'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'m'
name|'in'
name|'block_device'
op|'.'
name|'mappings_prepend_dev'
op|'('
name|'properties'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|','
nl|'\n'
op|'['
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'virtual_name'
op|'='
name|'m'
op|'['
string|"'virtual'"
op|']'
newline|'\n'
name|'if'
name|'virtual_name'
name|'in'
op|'('
string|"'ami'"
op|','
string|"'root'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
newline|'\n'
name|'device_name'
op|'='
name|'m'
op|'['
string|"'device'"
op|']'
newline|'\n'
name|'if'
name|'device_name'
name|'in'
op|'['
name|'b'
op|'['
string|"'device_name'"
op|']'
name|'for'
name|'b'
name|'in'
name|'mapping'
nl|'\n'
name|'if'
name|'not'
name|'b'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|','
name|'False'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): swap and ephemeral devices are specified in'
nl|'\n'
comment|'#                 AMI, but disabled for this instance by user.'
nl|'\n'
comment|'#                 So disable those device by no_device.'
nl|'\n'
dedent|''
name|'mapping'
op|'.'
name|'append'
op|'('
op|'{'
string|"'device_name'"
op|':'
name|'device_name'
op|','
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'['
string|"'block_device_mapping'"
op|']'
op|'='
name|'mapping'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'attr'
name|'in'
op|'('
string|"'status'"
op|','
string|"'location'"
op|','
string|"'id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'.'
name|'pop'
op|'('
name|'attr'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# the new image is simply a bucket of properties (particularly the'
nl|'\n'
comment|'# block device mapping, kernel and ramdisk IDs) with no image data,'
nl|'\n'
comment|'# hence the zero size'
nl|'\n'
dedent|''
name|'image_meta'
op|'['
string|"'size'"
op|']'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'image_meta'
op|','
name|'data'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_minram_mindisk_params
dedent|''
name|'def'
name|'_get_minram_mindisk_params'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
comment|'#try to get source image of the instance'
nl|'\n'
indent|'            '
name|'orig_image'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ImageNotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
comment|'#disk format of vhd is non-shrinkable'
nl|'\n'
dedent|''
name|'if'
name|'orig_image'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'vhd'"
op|':'
newline|'\n'
indent|'            '
name|'min_ram'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'min_disk'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'#set new image values to the original image values'
nl|'\n'
indent|'            '
name|'min_ram'
op|'='
name|'orig_image'
op|'.'
name|'get'
op|'('
string|"'min_ram'"
op|')'
newline|'\n'
name|'min_disk'
op|'='
name|'orig_image'
op|'.'
name|'get'
op|'('
string|"'min_disk'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'min_ram'
op|','
name|'min_disk'
newline|'\n'
nl|'\n'
DECL|member|_get_block_device_info
dedent|''
name|'def'
name|'_get_block_device_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cinfo'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'cinfo'
name|'and'
string|"'serial'"
name|'not'
name|'in'
name|'cinfo'
op|':'
newline|'\n'
indent|'                    '
name|'cinfo'
op|'['
string|"'serial'"
op|']'
op|'='
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
newline|'\n'
dedent|''
name|'bdmap'
op|'='
op|'{'
string|"'connection_info'"
op|':'
name|'cinfo'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'bdm'
op|'['
string|"'delete_on_termination'"
op|']'
op|'}'
newline|'\n'
name|'block_device_mapping'
op|'.'
name|'append'
op|'('
name|'bdmap'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# if the block_device_mapping has no value in connection_info'
nl|'\n'
comment|"# (returned as None), don't include in the mapping"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'REBOOTING'
op|']'
op|')'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reboot_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the given instance."""'
newline|'\n'
name|'if'
op|'('
name|'reboot_type'
op|'=='
string|"'SOFT'"
name|'and'
nl|'\n'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|'=='
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'task_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
string|"'reboot'"
op|')'
newline|'\n'
dedent|''
name|'state'
op|'='
op|'{'
string|"'SOFT'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
string|"'HARD'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|'}'
op|'['
name|'reboot_type'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'state'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
op|'['
name|'None'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOTING'
op|']'
op|')'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'block_info'
op|'='
name|'self'
op|'.'
name|'_get_block_device_info'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'reboot_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_info'
op|','
nl|'\n'
name|'reboot_type'
op|'='
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_image
dedent|''
name|'def'
name|'_get_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_href'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Throws an ImageNotFound exception if image_href does not exist."""'
newline|'\n'
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
name|'context'
op|','
nl|'\n'
name|'image_href'
op|')'
newline|'\n'
name|'return'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
DECL|member|rebuild
name|'def'
name|'rebuild'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_href'
op|','
name|'admin_password'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebuild the given instance with the provided attributes."""'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'orig_image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'image_href'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'orig_image_ref'
op|'='
string|"''"
newline|'\n'
name|'image'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'files_to_inject'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'files_to_inject'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_injected_file_quota'
op|'('
name|'context'
op|','
name|'files_to_inject'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_metadata_properties_quota'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
name|'if'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|'<'
name|'int'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'min_ram'"
op|')'
name|'or'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeMemoryTooSmall'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'<'
name|'int'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'min_disk'"
op|')'
name|'or'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeDiskTooSmall'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_href'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
nl|'\n'
name|'context'
op|','
name|'image_href'
op|')'
newline|'\n'
name|'image'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'kernel_id'
op|','
name|'ramdisk_id'
op|'='
name|'self'
op|'.'
name|'_handle_kernel_and_ramdisk'
op|'('
nl|'\n'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_reset_image_metadata
name|'def'
name|'_reset_image_metadata'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Remove old image properties that we\'re storing as instance\n            system metadata.  These properties start with \'image_\'.\n            Then add the properites for the new image.\n            """'
newline|'\n'
nl|'\n'
comment|"# FIXME(comstud): There's a race condition here in that"
nl|'\n'
comment|'# if the system_metadata for this instance is updated'
nl|'\n'
comment|'# after we do the get and before we update.. those other'
nl|'\n'
comment|'# updates will be lost. Since this problem exists in a lot'
nl|'\n'
comment|'# of other places, I think it should be addressed in a DB'
nl|'\n'
comment|'# layer overhaul.'
nl|'\n'
name|'sys_metadata'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'orig_sys_metadata'
op|'='
name|'dict'
op|'('
name|'sys_metadata'
op|')'
newline|'\n'
comment|'# Remove the old keys'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'sys_metadata'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'image_'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'sys_metadata'
op|'['
name|'key'
op|']'
newline|'\n'
comment|'# Add the new ones'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'image'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'new_value'
op|'='
name|'str'
op|'('
name|'value'
op|')'
op|'['
op|':'
number|'255'
op|']'
newline|'\n'
name|'sys_metadata'
op|'['
string|"'image_%s'"
op|'%'
name|'key'
op|']'
op|'='
name|'new_value'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_system_metadata_update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'sys_metadata'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
name|'orig_sys_metadata'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|','
nl|'\n'
comment|'# Unfortunately we need to set image_ref early,'
nl|'\n'
comment|'# so API users can see it.'
nl|'\n'
name|'image_ref'
op|'='
name|'image_href'
op|','
name|'kernel_id'
op|'='
name|'kernel_id'
name|'or'
string|'""'
op|','
nl|'\n'
name|'ramdisk_id'
op|'='
name|'ramdisk_id'
name|'or'
string|'""'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|"# On a rebuild, since we're potentially changing images, we need to"
nl|'\n'
comment|"# wipe out the old image properties that we're storing as instance"
nl|'\n'
comment|'# system metadata... and copy in the properties for the new image.'
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'_reset_image_metadata'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'rebuild_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'new_pass'
op|'='
name|'admin_password'
op|','
name|'injected_files'
op|'='
name|'files_to_inject'
op|','
nl|'\n'
name|'image_ref'
op|'='
name|'image_href'
op|','
name|'orig_image_ref'
op|'='
name|'orig_image_ref'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'orig_sys_metadata'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESIZED'
op|']'
op|')'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reverts a resize, deleting the \'new\' instance in the process."""'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'finished'"
op|')'
newline|'\n'
nl|'\n'
comment|'# reverse quota reservation for increased resource usage'
nl|'\n'
name|'deltas'
op|'='
name|'self'
op|'.'
name|'_reverse_upsize_quota_delta'
op|'('
name|'context'
op|','
name|'migration_ref'
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_reserve_quota_delta'
op|'('
name|'context'
op|','
name|'deltas'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'elevated'
op|','
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'reverting'"
op|'}'
op|')'
newline|'\n'
comment|'# With cells, the best we can do right now is commit the reservations'
nl|'\n'
comment|'# immediately...'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'enable'
name|'and'
name|'reservations'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'reservations'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'migration'
op|'='
name|'migration_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESIZED'
op|']'
op|')'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a migration/resize and deletes the \'old\' instance."""'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'finished'"
op|')'
newline|'\n'
nl|'\n'
comment|'# reserve quota only for any decrease in resource usage'
nl|'\n'
name|'deltas'
op|'='
name|'self'
op|'.'
name|'_downsize_quota_delta'
op|'('
name|'context'
op|','
name|'migration_ref'
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_reserve_quota_delta'
op|'('
name|'context'
op|','
name|'deltas'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'elevated'
op|','
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'confirming'"
op|'}'
op|')'
newline|'\n'
comment|'# With cells, the best we can do right now is commit the reservations'
nl|'\n'
comment|'# immediately...'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'enable'
name|'and'
name|'reservations'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'reservations'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'migration'
op|'='
name|'migration_ref'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_resize_quota_delta
name|'def'
name|'_resize_quota_delta'
op|'('
name|'context'
op|','
name|'new_instance_type'
op|','
nl|'\n'
name|'old_instance_type'
op|','
name|'sense'
op|','
name|'compare'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate any quota adjustment required at a particular point\n        in the resize cycle.\n\n        :param context: the request context\n        :param new_instance_type: the target instance type\n        :param old_instance_type: the original instance type\n        :param sense: the sense of the adjustment, 1 indicates a\n                      forward adjustment, whereas -1 indicates a\n                      reversal of a prior adjustment\n        :param compare: the direction of the comparison, 1 indicates\n                        we\'re checking for positive deltas, whereas\n                        -1 indicates negative deltas\n        """'
newline|'\n'
DECL|function|_quota_delta
name|'def'
name|'_quota_delta'
op|'('
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'sense'
op|'*'
op|'('
name|'new_instance_type'
op|'['
name|'resource'
op|']'
op|'-'
nl|'\n'
name|'old_instance_type'
op|'['
name|'resource'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'deltas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'compare'
op|'*'
name|'_quota_delta'
op|'('
string|"'vcpus'"
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'deltas'
op|'['
string|"'cores'"
op|']'
op|'='
name|'_quota_delta'
op|'('
string|"'vcpus'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'compare'
op|'*'
name|'_quota_delta'
op|'('
string|"'memory_mb'"
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'deltas'
op|'['
string|"'ram'"
op|']'
op|'='
name|'_quota_delta'
op|'('
string|"'memory_mb'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'deltas'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_upsize_quota_delta
name|'def'
name|'_upsize_quota_delta'
op|'('
name|'context'
op|','
name|'new_instance_type'
op|','
name|'old_instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate deltas required to adjust quota for an instance upsize.\n        """'
newline|'\n'
name|'return'
name|'API'
op|'.'
name|'_resize_quota_delta'
op|'('
name|'context'
op|','
name|'new_instance_type'
op|','
nl|'\n'
name|'old_instance_type'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_reverse_upsize_quota_delta
name|'def'
name|'_reverse_upsize_quota_delta'
op|'('
name|'context'
op|','
name|'migration_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate deltas required to reverse a prior upsizing\n        quota adjustment.\n        """'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'migration_ref'
op|'['
string|"'new_instance_type_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'API'
op|'.'
name|'_resize_quota_delta'
op|'('
name|'context'
op|','
name|'new_instance_type'
op|','
nl|'\n'
name|'old_instance_type'
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_downsize_quota_delta
name|'def'
name|'_downsize_quota_delta'
op|'('
name|'context'
op|','
name|'migration_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate deltas required to adjust quota for an instance downsize.\n        """'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'migration_ref'
op|'['
string|"'old_instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'migration_ref'
op|'['
string|"'new_instance_type_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'API'
op|'.'
name|'_resize_quota_delta'
op|'('
name|'context'
op|','
name|'new_instance_type'
op|','
nl|'\n'
name|'old_instance_type'
op|','
number|'1'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_reserve_quota_delta
name|'def'
name|'_reserve_quota_delta'
op|'('
name|'context'
op|','
name|'deltas'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
op|'**'
name|'deltas'
op|')'
name|'if'
name|'deltas'
name|'else'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
DECL|member|resize
name|'def'
name|'resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'flavor_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resize (ie, migrate) a running instance.\n\n        If flavor_id is None, the process is considered a migration, keeping\n        the original flavor_id. If flavor_id is not None, the instance should\n        be migrated to a new host and resized to the new flavor_id.\n        """'
newline|'\n'
name|'current_instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
nl|'\n'
comment|'# If flavor_id is not provided, only migrate the instance.'
nl|'\n'
name|'if'
name|'not'
name|'flavor_id'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"flavor_id is None. Assuming migration."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'new_instance_type'
op|'='
name|'current_instance_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
nl|'\n'
name|'flavor_id'
op|','
name|'read_deleted'
op|'='
string|'"no"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_instance_type_name'
op|'='
name|'current_instance_type'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'new_instance_type_name'
op|'='
name|'new_instance_type'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Old instance type %(current_instance_type_name)s, "'
nl|'\n'
string|'" new instance type %(new_instance_type_name)s"'
op|')'
op|','
nl|'\n'
name|'locals'
op|'('
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(sirp): both of these should raise InstanceTypeNotFound instead'
nl|'\n'
name|'if'
name|'not'
name|'new_instance_type'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FlavorNotFound'
op|'('
name|'flavor_id'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'same_instance_type'
op|'='
op|'('
name|'current_instance_type'
op|'['
string|"'id'"
op|']'
op|'=='
nl|'\n'
name|'new_instance_type'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): We don't want to force a customer to change their flavor"
nl|'\n'
comment|'# when Ops is migrating off of a failed host.'
nl|'\n'
name|'if'
name|'new_instance_type'
op|'['
string|"'disabled'"
op|']'
name|'and'
name|'not'
name|'same_instance_type'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FlavorNotFound'
op|'('
name|'flavor_id'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(markwash): look up the image early to avoid auth problems later'
nl|'\n'
dedent|''
name|'image'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'same_instance_type'
name|'and'
name|'flavor_id'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'CannotResizeToSameFlavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure there is sufficient headroom for upsizes'
nl|'\n'
dedent|''
name|'deltas'
op|'='
name|'self'
op|'.'
name|'_upsize_quota_delta'
op|'('
name|'context'
op|','
name|'new_instance_type'
op|','
nl|'\n'
name|'current_instance_type'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_reserve_quota_delta'
op|'('
name|'context'
op|','
name|'deltas'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'quotas'"
op|']'
newline|'\n'
name|'usages'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'usages'"
op|']'
newline|'\n'
name|'overs'
op|'='
name|'exc'
op|'.'
name|'kwargs'
op|'['
string|"'overs'"
op|']'
newline|'\n'
nl|'\n'
name|'headroom'
op|'='
name|'dict'
op|'('
op|'('
name|'res'
op|','
name|'quotas'
op|'['
name|'res'
op|']'
op|'-'
nl|'\n'
op|'('
name|'usages'
op|'['
name|'res'
op|']'
op|'['
string|"'in_use'"
op|']'
op|'+'
name|'usages'
op|'['
name|'res'
op|']'
op|'['
string|"'reserved'"
op|']'
op|')'
op|')'
nl|'\n'
name|'for'
name|'res'
name|'in'
name|'quotas'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'resource'
op|'='
name|'overs'
op|'['
number|'0'
op|']'
newline|'\n'
name|'used'
op|'='
name|'quotas'
op|'['
name|'resource'
op|']'
op|'-'
name|'headroom'
op|'['
name|'resource'
op|']'
newline|'\n'
name|'total_allowed'
op|'='
name|'used'
op|'+'
name|'headroom'
op|'['
name|'resource'
op|']'
newline|'\n'
name|'overs'
op|'='
string|"','"
op|'.'
name|'join'
op|'('
name|'overs'
op|')'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"%(overs)s quota exceeded for %(pid)s,"'
nl|'\n'
string|'" tried to resize instance."'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'TooManyInstances'
op|'('
name|'overs'
op|'='
name|'overs'
op|','
nl|'\n'
name|'req'
op|'='
name|'deltas'
op|'['
name|'resource'
op|']'
op|','
nl|'\n'
name|'used'
op|'='
name|'used'
op|','
name|'allowed'
op|'='
name|'total_allowed'
op|','
nl|'\n'
name|'resource'
op|'='
name|'resource'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'instance_type'"
op|':'
name|'new_instance_type'
op|','
nl|'\n'
string|"'instance_uuids'"
op|':'
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|']'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'ignore_hosts'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'allow_resize_to_same_host'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'['
string|"'ignore_hosts'"
op|']'
op|'.'
name|'append'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# With cells, the best we can do right now is commit the reservations'
nl|'\n'
comment|'# immediately...'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'enable'
name|'and'
name|'reservations'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'reservations'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'{'
nl|'\n'
string|'"instance"'
op|':'
name|'instance'
op|','
nl|'\n'
string|'"instance_type"'
op|':'
name|'new_instance_type'
op|','
nl|'\n'
string|'"image"'
op|':'
name|'image'
op|','
nl|'\n'
string|'"request_spec"'
op|':'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'request_spec'
op|')'
op|','
nl|'\n'
string|'"filter_properties"'
op|':'
name|'filter_properties'
op|','
nl|'\n'
string|'"reservations"'
op|':'
name|'reservations'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|add_fixed_ip
name|'def'
name|'add_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add fixed_ip from specified network to given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'network_id'
op|'='
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|remove_fixed_ip
name|'def'
name|'remove_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove fixed_ip from specified network to given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|')'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'PAUSING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'pause_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'PAUSED'
op|']'
op|')'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNPAUSING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'unpause_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for the given instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_diagnostics'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_backdoor_port
dedent|''
name|'def'
name|'get_backdoor_port'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve backdoor port."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_backdoor_port'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|')'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'suspend_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|']'
op|')'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'resume_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|')'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESCUING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'rescue_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|')'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNRESCUING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'unrescue_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|']'
op|')'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'set_admin_password'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'new_pass'
op|'='
name|'password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'inject_file'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'path'
op|'='
name|'path'
op|','
nl|'\n'
name|'file_contents'
op|'='
name|'file_contents'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to an instance Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_vnc_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_vnc_connect_info
dedent|''
name|'def'
name|'get_vnc_connect_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Used in a child cell to get console info."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_vnc_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_spice_console
name|'def'
name|'get_spice_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to an instance Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_spice_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_spice_connect_info
dedent|''
name|'def'
name|'get_spice_connect_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Used in a child cell to get console info."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_spice_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'console_type'
op|'='
name|'console_type'
op|')'
newline|'\n'
name|'return'
name|'connect_info'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get console output for an instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'get_console_output'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'tail_length'
op|'='
name|'tail_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|lock
name|'def'
name|'lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Locking'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'locked'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|unlock
name|'def'
name|'unlock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Unlocking'"
op|')'
op|','
name|'context'
op|'='
name|'context'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'locked'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_lock
name|'def'
name|'get_lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the boolean state of given instance\'s lock."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'['
string|"'locked'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the instance."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the instance."""'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
name|'device'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an existing volume to an existing instance."""'
newline|'\n'
comment|'# NOTE(vish): Fail fast if the device is not going to pass. This'
nl|'\n'
comment|'#             will need to be removed along with the test if we'
nl|'\n'
comment|'#             change the logic in the manager for what constitutes'
nl|'\n'
comment|'#             a valid device.'
nl|'\n'
name|'if'
name|'device'
name|'and'
name|'not'
name|'block_device'
op|'.'
name|'match_device'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'device'
op|')'
newline|'\n'
comment|'# NOTE(vish): This is done on the compute host because we want'
nl|'\n'
comment|'#             to avoid a race where two devices are requested at'
nl|'\n'
comment|'#             the same time. When db access is removed from'
nl|'\n'
comment|'#             compute, the bdm will be created here and we will'
nl|'\n'
comment|'#             have to make sure that they are assigned atomically.'
nl|'\n'
dedent|''
name|'device'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'reserve_block_device_name'
op|'('
nl|'\n'
name|'context'
op|','
name|'device'
op|'='
name|'device'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'volume_id'
op|'='
name|'volume_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'reserve_volume'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'attach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'volume_id'
op|','
name|'mountpoint'
op|'='
name|'device'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_device'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'device'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_lock'
newline|'\n'
DECL|member|_detach_volume
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'detach_volume'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'begin_detaching'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'volume_id'
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
comment|'# FIXME(comstud): I wonder if API should pull in the instance from'
nl|'\n'
comment|'# the volume ID via volume API and pass it and the volume object here'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'if'
name|'volume'
op|'['
string|"'attach_status'"
op|']'
op|'=='
string|"'detached'"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Volume must be attached in order to detach."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidVolume'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'volume'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VolumeUnattached'
op|'('
name|'volume_id'
op|'='
name|'volume_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_instance_metadata
name|'def'
name|'get_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all metadata associated with an instance."""'
newline|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_metadata_get'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'rv'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|member|delete_instance_metadata
name|'def'
name|'delete_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the given metadata item from an instance."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_metadata_delete'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'key'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'notifications'
op|'.'
name|'send_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'change_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'diff'
op|'='
op|'{'
name|'key'
op|':'
op|'['
string|"'-'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|member|update_instance_metadata
name|'def'
name|'update_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates or creates instance metadata.\n\n        If delete is True, metadata items that are not specified in the\n        `metadata` argument will be deleted.\n\n        """'
newline|'\n'
name|'orig'
op|'='
name|'self'
op|'.'
name|'get_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'delete'
op|':'
newline|'\n'
indent|'            '
name|'_metadata'
op|'='
name|'metadata'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_metadata'
op|'='
name|'orig'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'_metadata'
op|'.'
name|'update'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_metadata_properties_quota'
op|'('
name|'context'
op|','
name|'_metadata'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_metadata_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'_metadata'
op|','
name|'True'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|'='
name|'metadata'
newline|'\n'
name|'notifications'
op|'.'
name|'send_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'instance'
op|')'
newline|'\n'
name|'diff'
op|'='
name|'utils'
op|'.'
name|'diff_dict'
op|'('
name|'orig'
op|','
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'change_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'diff'
op|'='
name|'diff'
op|')'
newline|'\n'
name|'return'
name|'_metadata'
newline|'\n'
nl|'\n'
DECL|member|get_instance_faults
dedent|''
name|'def'
name|'get_instance_faults'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all faults for a list of instance uuids."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'get_instance_faults'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_fault_get_by_instance_uuids'
op|'('
name|'context'
op|','
name|'uuids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_bdms
dedent|''
name|'def'
name|'get_instance_bdms'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all bdm tables for specified instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_volume_backed_instance
dedent|''
name|'def'
name|'is_volume_backed_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'bdms'
name|'or'
name|'self'
op|'.'
name|'get_instance_bdms'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'bdm'
op|'.'
name|'device_name'
op|')'
op|'=='
nl|'\n'
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|']'
op|')'
newline|'\n'
DECL|member|live_migrate
name|'def'
name|'live_migrate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'disk_over_commit'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Migrate a server lively to a new host."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to live migrate instance to %s"'
op|')'
op|','
nl|'\n'
name|'host_name'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'live_migration'
op|'('
name|'context'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'disk_over_commit'
op|','
name|'instance'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostAPI
dedent|''
dedent|''
name|'class'
name|'HostAPI'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sub-set of the Compute Manager API for managing host operations."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'rpcapi'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rpcapi'
op|'='
name|'rpcapi'
name|'or'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'HostAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_host_exists
dedent|''
name|'def'
name|'_assert_host_exists'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Raise HostNotFound if compute host doesn\'t exist."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_host_and_topic'
op|'('
name|'context'
op|','
name|'host_name'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'compute_topic'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'HostNotFound'
op|'('
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'self'
op|'.'
name|'_assert_host_exists'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'rpcapi'
op|'.'
name|'set_host_enabled'
op|'('
name|'context'
op|','
name|'enabled'
op|'='
name|'enabled'
op|','
nl|'\n'
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_host_uptime
dedent|''
name|'def'
name|'get_host_uptime'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the result of calling "uptime" on the target host."""'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'self'
op|'.'
name|'_assert_host_exists'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'rpcapi'
op|'.'
name|'get_host_uptime'
op|'('
name|'context'
op|','
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
name|'self'
op|'.'
name|'_assert_host_exists'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'rpcapi'
op|'.'
name|'host_power_action'
op|'('
name|'context'
op|','
name|'action'
op|'='
name|'action'
op|','
nl|'\n'
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_maintenance
dedent|''
name|'def'
name|'set_host_maintenance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation."""'
newline|'\n'
name|'self'
op|'.'
name|'_assert_host_exists'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'rpcapi'
op|'.'
name|'host_maintenance_mode'
op|'('
name|'context'
op|','
nl|'\n'
name|'host_param'
op|'='
name|'host_name'
op|','
name|'mode'
op|'='
name|'mode'
op|','
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_get_all
dedent|''
name|'def'
name|'service_get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of services, optionally filtering the results.\n\n        If specified, \'filters\' should be a dictionary containing services\n        attributes and matching values.  Ie, to get a list of services for\n        the \'compute\' topic, use filters={\'topic\': \'compute\'}.\n        """'
newline|'\n'
name|'if'
name|'filters'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'services'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all'
op|'('
name|'context'
op|','
name|'False'
op|')'
newline|'\n'
name|'services'
op|'='
name|'availability_zones'
op|'.'
name|'set_availability_zones'
op|'('
name|'context'
op|','
nl|'\n'
name|'services'
op|')'
newline|'\n'
name|'ret_services'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'services'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'filters'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'service'
op|'['
name|'key'
op|']'
op|'!='
name|'val'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# All filters matched.'
nl|'\n'
indent|'                '
name|'ret_services'
op|'.'
name|'append'
op|'('
name|'service'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ret_services'
newline|'\n'
nl|'\n'
DECL|member|service_get_by_compute_host
dedent|''
name|'def'
name|'service_get_by_compute_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get service entry for the given compute hostname."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_get_all_by_host
dedent|''
name|'def'
name|'instance_get_all_by_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all instances on the given host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AggregateAPI
dedent|''
dedent|''
name|'class'
name|'AggregateAPI'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sub-set of the Compute Manager API for managing host aggregates."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'AggregateAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_aggregate
dedent|''
name|'def'
name|'create_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_name'
op|','
name|'availability_zone'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates the model for the aggregate."""'
newline|'\n'
nl|'\n'
name|'values'
op|'='
op|'{'
string|'"name"'
op|':'
name|'aggregate_name'
op|'}'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_create'
op|'('
name|'context'
op|','
name|'values'
op|','
nl|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
name|'availability_zone'
op|'}'
op|')'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'aggregate'
op|')'
newline|'\n'
comment|'# To maintain the same API result as before.'
nl|'\n'
name|'del'
name|'aggregate'
op|'['
string|"'hosts'"
op|']'
newline|'\n'
name|'del'
name|'aggregate'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'return'
name|'aggregate'
newline|'\n'
nl|'\n'
DECL|member|get_aggregate
dedent|''
name|'def'
name|'get_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an aggregate by id."""'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'aggregate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_aggregate_list
dedent|''
name|'def'
name|'get_aggregate_list'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all the aggregates."""'
newline|'\n'
name|'aggregates'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
op|'['
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'a'
op|')'
name|'for'
name|'a'
name|'in'
name|'aggregates'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update_aggregate
dedent|''
name|'def'
name|'update_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the properties of an aggregate."""'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_update'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'aggregate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_aggregate_metadata
dedent|''
name|'def'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the aggregate metadata.\n\n        If a key is set to None, it gets removed from the aggregate metadata.\n        """'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'metadata'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'metadata'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_metadata_delete'
op|'('
name|'context'
op|','
nl|'\n'
name|'aggregate_id'
op|','
name|'key'
op|')'
newline|'\n'
name|'metadata'
op|'.'
name|'pop'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'AggregateMetadataNotFound'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'e'
op|'.'
name|'message'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_metadata_add'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_aggregate'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_aggregate
dedent|''
name|'def'
name|'delete_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the aggregate."""'
newline|'\n'
name|'hosts'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_get_all'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'hosts'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|'('
name|'action'
op|'='
string|"'delete'"
op|','
nl|'\n'
name|'aggregate_id'
op|'='
name|'aggregate_id'
op|','
nl|'\n'
name|'reason'
op|'='
string|"'not empty'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_delete'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_host_to_aggregate
dedent|''
name|'def'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the host to an aggregate."""'
newline|'\n'
comment|'# validates the host; ComputeHostNotFound is raised if invalid'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_add'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host_name'
op|')'
newline|'\n'
comment|'#NOTE(jogo): Send message to host to support resource pools'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'add_aggregate_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'aggregate'
op|','
name|'host_param'
op|'='
name|'host_name'
op|','
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_aggregate'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_host_from_aggregate
dedent|''
name|'def'
name|'remove_host_from_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes host from the aggregate."""'
newline|'\n'
comment|'# validates the host; ComputeHostNotFound is raised if invalid'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_delete'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_aggregate_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'aggregate'
op|','
name|'host_param'
op|'='
name|'host_name'
op|','
name|'host'
op|'='
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_aggregate'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_aggregate_info
dedent|''
name|'def'
name|'_get_aggregate_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Builds a dictionary with aggregate props, metadata and hosts."""'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_metadata_get'
op|'('
name|'context'
op|','
name|'aggregate'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'hosts'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_get_all'
op|'('
name|'context'
op|','
name|'aggregate'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dict'
op|'('
name|'aggregate'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# metadetails was not originally included here.  We need to pull it'
nl|'\n'
comment|'# back out to maintain API stability.'
nl|'\n'
name|'del'
name|'result'
op|'['
string|"'metadetails'"
op|']'
newline|'\n'
name|'result'
op|'['
string|'"metadata"'
op|']'
op|'='
name|'metadata'
newline|'\n'
name|'result'
op|'['
string|'"hosts"'
op|']'
op|'='
name|'hosts'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeypairAPI
dedent|''
dedent|''
name|'class'
name|'KeypairAPI'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sub-set of the Compute Manager API for managing key pairs."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'KeypairAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_keypair_name
dedent|''
name|'def'
name|'_validate_keypair_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'safechars'
op|'='
string|'"_- "'
op|'+'
name|'string'
op|'.'
name|'digits'
op|'+'
name|'string'
op|'.'
name|'ascii_letters'
newline|'\n'
name|'clean_value'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'x'
name|'for'
name|'x'
name|'in'
name|'key_name'
name|'if'
name|'x'
name|'in'
name|'safechars'
op|')'
newline|'\n'
name|'if'
name|'clean_value'
op|'!='
name|'key_name'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Keypair name contains unsafe characters"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidKeypair'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
number|'0'
op|'<'
name|'len'
op|'('
name|'key_name'
op|')'
op|'<'
number|'256'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Keypair name must be between 1 and 255 characters long'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidKeypair'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE: check for existing keypairs of same name'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_get'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'KeyPairExists'
op|'('
name|'key_name'
op|'='
name|'key_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|import_key_pair
dedent|''
dedent|''
name|'def'
name|'import_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|','
name|'public_key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Import a key pair using an existing public key."""'
newline|'\n'
name|'self'
op|'.'
name|'_validate_keypair_name'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
nl|'\n'
name|'count'
op|'='
name|'QUOTAS'
op|'.'
name|'count'
op|'('
name|'context'
op|','
string|"'key_pairs'"
op|','
name|'user_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'key_pairs'
op|'='
name|'count'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'KeypairLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fingerprint'
op|'='
name|'crypto'
op|'.'
name|'generate_fingerprint'
op|'('
name|'public_key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidKeypair'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Keypair data is invalid"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidKeypair'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'keypair'
op|'='
op|'{'
string|"'user_id'"
op|':'
name|'user_id'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'fingerprint'"
op|':'
name|'fingerprint'
op|','
nl|'\n'
string|"'public_key'"
op|':'
name|'public_key'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_create'
op|'('
name|'context'
op|','
name|'keypair'
op|')'
newline|'\n'
name|'return'
name|'keypair'
newline|'\n'
nl|'\n'
DECL|member|create_key_pair
dedent|''
name|'def'
name|'create_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new key pair."""'
newline|'\n'
name|'self'
op|'.'
name|'_validate_keypair_name'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
nl|'\n'
name|'count'
op|'='
name|'QUOTAS'
op|'.'
name|'count'
op|'('
name|'context'
op|','
string|"'key_pairs'"
op|','
name|'user_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'key_pairs'
op|'='
name|'count'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'KeypairLimitExceeded'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'private_key'
op|','
name|'public_key'
op|','
name|'fingerprint'
op|'='
name|'crypto'
op|'.'
name|'generate_key_pair'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'keypair'
op|'='
op|'{'
string|"'user_id'"
op|':'
name|'user_id'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'fingerprint'"
op|':'
name|'fingerprint'
op|','
nl|'\n'
string|"'public_key'"
op|':'
name|'public_key'
op|','
nl|'\n'
string|"'private_key'"
op|':'
name|'private_key'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_create'
op|'('
name|'context'
op|','
name|'keypair'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'keypair'
newline|'\n'
nl|'\n'
DECL|member|delete_key_pair
dedent|''
name|'def'
name|'delete_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a keypair by name."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_destroy'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_key_pairs
dedent|''
name|'def'
name|'get_key_pairs'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List key pairs."""'
newline|'\n'
name|'key_pairs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_get_all_by_user'
op|'('
name|'context'
op|','
name|'user_id'
op|')'
newline|'\n'
name|'rval'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key_pair'
name|'in'
name|'key_pairs'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'name'"
op|':'
name|'key_pair'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'public_key'"
op|':'
name|'key_pair'
op|'['
string|"'public_key'"
op|']'
op|','
nl|'\n'
string|"'fingerprint'"
op|':'
name|'key_pair'
op|'['
string|"'fingerprint'"
op|']'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rval'
newline|'\n'
nl|'\n'
DECL|member|get_key_pair
dedent|''
name|'def'
name|'get_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a keypair by name."""'
newline|'\n'
name|'key_pair'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_get'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'name'"
op|':'
name|'key_pair'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'public_key'"
op|':'
name|'key_pair'
op|'['
string|"'public_key'"
op|']'
op|','
nl|'\n'
string|"'fingerprint'"
op|':'
name|'key_pair'
op|'['
string|"'fingerprint'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupAPI
dedent|''
dedent|''
name|'class'
name|'SecurityGroupAPI'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Sub-set of the Compute API related to managing security groups\n    and security group rules\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SecurityGroupAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'SecurityGroupAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'CONF'
op|'.'
name|'security_group_handler'
op|')'
newline|'\n'
nl|'\n'
DECL|member|validate_property
dedent|''
name|'def'
name|'validate_property'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'property'
op|','
name|'allowed'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Validate given security group property.\n\n        :param value:          the value to validate, as a string or unicode\n        :param property:       the property, either \'name\' or \'description\'\n        :param allowed:        the range of characters allowed\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group %s is not a string or unicode"'
op|')'
op|'%'
name|'property'
newline|'\n'
name|'self'
op|'.'
name|'raise_invalid_property'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'val'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group %s cannot be empty."'
op|')'
op|'%'
name|'property'
newline|'\n'
name|'self'
op|'.'
name|'raise_invalid_property'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'allowed'
name|'and'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
name|'allowed'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
comment|'# Some validation to ensure that values match API spec.'
nl|'\n'
comment|'# - Alphanumeric characters, spaces, dashes, and underscores.'
nl|'\n'
comment|'# TODO(Daviey): LP: #813685 extend beyond group_name checking, and'
nl|'\n'
comment|'#  probably create a param validator that can be used elsewhere.'
nl|'\n'
indent|'            '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Value (%(value)s) for parameter Group%(property)s is "'
nl|'\n'
string|'"invalid. Content limited to \'%(allowed)\'."'
op|')'
op|'%'
nl|'\n'
name|'dict'
op|'('
name|'value'
op|'='
name|'value'
op|','
name|'allowed'
op|'='
name|'allowed'
op|','
nl|'\n'
name|'property'
op|'='
name|'property'
op|'.'
name|'capitalize'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'raise_invalid_property'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'val'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group %s should not be greater "'
nl|'\n'
string|'"than 255 characters."'
op|')'
op|'%'
name|'property'
newline|'\n'
name|'self'
op|'.'
name|'raise_invalid_property'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_default
dedent|''
dedent|''
name|'def'
name|'ensure_default'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that a context has a security group.\n\n        Creates a security group for the security context if it does not\n        already exist.\n\n        :param context: the security context\n        """'
newline|'\n'
name|'existed'
op|','
name|'group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_ensure_default'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'existed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_create_refresh'
op|'('
name|'context'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reservations'
op|'='
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'security_groups'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Quota exceeded, too many security groups."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'raise_over_quota'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create Security Group %s"'
op|')'
op|','
name|'name'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ensure_default'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_exists'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Security group %s already exists'"
op|')'
op|'%'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'raise_group_already_exists'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group'
op|'='
op|'{'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'description'"
op|':'
name|'description'
op|'}'
newline|'\n'
name|'group_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'context'
op|','
name|'group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_create_refresh'
op|'('
name|'context'
op|','
name|'group'
op|')'
newline|'\n'
comment|'# Commit the reservation'
nl|'\n'
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'group_ref'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|'='
name|'None'
op|','
name|'id'
op|'='
name|'None'
op|','
name|'map_exception'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ensure_default'
op|'('
name|'context'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'map_exception'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'raise_not_found'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|list
dedent|''
dedent|''
dedent|''
name|'def'
name|'list'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'names'
op|'='
name|'None'
op|','
name|'ids'
op|'='
name|'None'
op|','
name|'project'
op|'='
name|'None'
op|','
nl|'\n'
name|'search_opts'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ensure_default'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'groups'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'names'
name|'or'
name|'ids'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'names'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'                    '
name|'groups'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'project'
op|','
nl|'\n'
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'ids'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'id'
name|'in'
name|'ids'
op|':'
newline|'\n'
indent|'                    '
name|'groups'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
comment|'# TODO(eglynn): support a wider set of search options than just'
nl|'\n'
comment|'# all_tenants, at least include the standard filters defined for'
nl|'\n'
comment|'# the EC2 DescribeSecurityGroups API for the non-admin case also'
nl|'\n'
indent|'            '
name|'if'
op|'('
name|'search_opts'
name|'and'
string|"'all_tenants'"
name|'in'
name|'search_opts'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'groups'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'project'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'project'
op|':'
newline|'\n'
indent|'            '
name|'groups'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_project'
op|'('
name|'context'
op|','
name|'project'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'groups'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_in_use'
op|'('
name|'context'
op|','
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group is still in use"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'raise_invalid_group'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get reservations'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'reservations'
op|'='
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'security_groups'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'reservations'
op|'='
name|'None'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Failed to update usages deallocating "'
nl|'\n'
string|'"security group"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Delete security group %s"'
op|')'
op|','
name|'security_group'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'context'
op|','
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_destroy_refresh'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Commit the reservations'
nl|'\n'
name|'if'
name|'reservations'
op|':'
newline|'\n'
indent|'            '
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_associated_with_server
dedent|''
dedent|''
name|'def'
name|'is_associated_with_server'
op|'('
name|'self'
op|','
name|'security_group'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if the security group is already associated\n           with the instance. If Yes, return True.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'security_group'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'security_group'
op|'.'
name|'get'
op|'('
string|"'instances'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inst'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'instance_uuid'
op|'=='
name|'inst'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_security_groups_policy'
newline|'\n'
DECL|member|add_to_instance
name|'def'
name|'add_to_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'security_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add security group to the instance."""'
newline|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'#check if the security group is associated with the server'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'is_associated_with_server'
op|'('
name|'security_group'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupExistsForInstance'
op|'('
nl|'\n'
name|'security_group_id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'#check if the instance is in running state'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'self'
op|'.'
name|'security_group_rpcapi'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'trigger_handler'
op|'('
string|"'instance_add_security_group'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_security_groups_policy'
newline|'\n'
DECL|member|remove_from_instance
name|'def'
name|'remove_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'security_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove the security group associated with the instance."""'
newline|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'#check if the security group is associated with the server'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'is_associated_with_server'
op|'('
name|'security_group'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupNotExistsForInstance'
op|'('
nl|'\n'
name|'security_group_id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'#check if the instance is in running state'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_remove_security_group'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'self'
op|'.'
name|'security_group_rpcapi'
op|'.'
name|'refresh_security_group_rules'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'trigger_handler'
op|'('
string|"'instance_remove_security_group'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_handler
dedent|''
name|'def'
name|'trigger_handler'
op|'('
name|'self'
op|','
name|'event'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'handle'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'sgh'
op|','
string|"'trigger_%s_refresh'"
op|'%'
name|'event'
op|')'
newline|'\n'
name|'handle'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_rules_refresh
dedent|''
name|'def'
name|'trigger_rules_refresh'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a rule is added to or removed from a security_group."""'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'security_group'
op|'['
string|"'instances'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'security_group_rpcapi'
op|'.'
name|'refresh_instance_security_rules'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_members_refresh
dedent|''
dedent|''
dedent|''
name|'def'
name|'trigger_members_refresh'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a security group gains a new or loses a member.\n\n        Sends an update request to each compute node for each instance for\n        which this is relevant.\n        """'
newline|'\n'
comment|'# First, we get the security group rules that reference these groups as'
nl|'\n'
comment|'# the grantee..'
nl|'\n'
name|'security_group_rules'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'group_id'
name|'in'
name|'group_ids'
op|':'
newline|'\n'
indent|'            '
name|'security_group_rules'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_rule_get_by_security_group_grantee'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'group_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# ..then we distill the rules into the groups to which they belong..'
nl|'\n'
dedent|''
name|'security_groups'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group_rules'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'rule'
op|'['
string|"'parent_group_id'"
op|']'
op|')'
newline|'\n'
name|'security_groups'
op|'.'
name|'add'
op|'('
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
comment|'# ..then we find the instances that are members of these groups..'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'security_group'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'security_group'
op|'['
string|"'instances'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'.'
name|'add'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# ..then we send a request to refresh the rules for each instance.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'security_group_rpcapi'
op|'.'
name|'refresh_instance_security_rules'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parse_cidr
dedent|''
dedent|''
dedent|''
name|'def'
name|'parse_cidr'
op|'('
name|'self'
op|','
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cidr'
op|'='
name|'urllib'
op|'.'
name|'unquote'
op|'('
name|'cidr'
op|')'
op|'.'
name|'decode'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'raise_invalid_cidr'
op|'('
name|'cidr'
op|','
name|'e'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_valid_cidr'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'raise_invalid_cidr'
op|'('
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'cidr'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'0.0.0.0/0'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|new_group_ingress_rule
name|'def'
name|'new_group_ingress_rule'
op|'('
name|'grantee_group_id'
op|','
name|'protocol'
op|','
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'SecurityGroupAPI'
op|'.'
name|'_new_ingress_rule'
op|'('
name|'protocol'
op|','
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|','
name|'group_id'
op|'='
name|'grantee_group_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|new_cidr_ingress_rule
name|'def'
name|'new_cidr_ingress_rule'
op|'('
name|'grantee_cidr'
op|','
name|'protocol'
op|','
name|'from_port'
op|','
name|'to_port'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'SecurityGroupAPI'
op|'.'
name|'_new_ingress_rule'
op|'('
name|'protocol'
op|','
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|','
name|'cidr'
op|'='
name|'grantee_cidr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_new_ingress_rule
name|'def'
name|'_new_ingress_rule'
op|'('
name|'ip_protocol'
op|','
name|'from_port'
op|','
name|'to_port'
op|','
nl|'\n'
name|'group_id'
op|'='
name|'None'
op|','
name|'cidr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'group_id'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'group_id'"
op|']'
op|'='
name|'group_id'
newline|'\n'
comment|'# Open everything if an explicit port range or type/code are not'
nl|'\n'
comment|'# specified, but only if a source group was specified.'
nl|'\n'
name|'ip_proto_upper'
op|'='
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'if'
name|'ip_protocol'
name|'else'
string|"''"
newline|'\n'
name|'if'
op|'('
name|'ip_proto_upper'
op|'=='
string|"'ICMP'"
name|'and'
nl|'\n'
name|'from_port'
name|'is'
name|'None'
name|'and'
name|'to_port'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'from_port'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'to_port'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'ip_proto_upper'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|']'
name|'and'
name|'from_port'
name|'is'
name|'None'
nl|'\n'
name|'and'
name|'to_port'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'from_port'
op|'='
number|'1'
newline|'\n'
name|'to_port'
op|'='
number|'65535'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'cidr'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'cidr'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ip_protocol'
name|'and'
name|'from_port'
name|'is'
name|'not'
name|'None'
name|'and'
name|'to_port'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'ip_protocol'
op|'='
name|'str'
op|'('
name|'ip_protocol'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Verify integer conversions'
nl|'\n'
indent|'                '
name|'from_port'
op|'='
name|'int'
op|'('
name|'from_port'
op|')'
newline|'\n'
name|'to_port'
op|'='
name|'int'
op|'('
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'ICMP'"
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
string|'"Type and"'
nl|'\n'
string|'" Code must be integers for ICMP protocol type"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
string|'"To and From ports "'
nl|'\n'
string|'"must be integers"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|','
string|"'ICMP'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidIpProtocol'
op|'('
name|'protocol'
op|'='
name|'ip_protocol'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that from_port must always be less than'
nl|'\n'
comment|'# or equal to to_port'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|']'
name|'and'
nl|'\n'
op|'('
name|'from_port'
op|'>'
name|'to_port'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidPortRange'
op|'('
name|'from_port'
op|'='
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'to_port'
op|','
name|'msg'
op|'='
string|'"Former value cannot"'
nl|'\n'
string|'" be greater than the later"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify valid TCP, UDP port ranges'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|']'
name|'and'
nl|'\n'
op|'('
name|'from_port'
op|'<'
number|'1'
name|'or'
name|'to_port'
op|'>'
number|'65535'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidPortRange'
op|'('
name|'from_port'
op|'='
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'to_port'
op|','
name|'msg'
op|'='
string|'"Valid TCP ports should"'
nl|'\n'
string|'" be between 1-65535"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify ICMP type and code'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"ICMP"'
name|'and'
nl|'\n'
op|'('
name|'from_port'
op|'<'
op|'-'
number|'1'
name|'or'
name|'from_port'
op|'>'
number|'255'
name|'or'
nl|'\n'
name|'to_port'
op|'<'
op|'-'
number|'1'
name|'or'
name|'to_port'
op|'>'
number|'255'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidPortRange'
op|'('
name|'from_port'
op|'='
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'to_port'
op|','
name|'msg'
op|'='
string|'"For ICMP, the"'
nl|'\n'
string|'" type:code must be valid"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'protocol'"
op|']'
op|'='
name|'ip_protocol'
newline|'\n'
name|'values'
op|'['
string|"'from_port'"
op|']'
op|'='
name|'from_port'
newline|'\n'
name|'values'
op|'['
string|"'to_port'"
op|']'
op|'='
name|'to_port'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If cidr based filtering, protocol and ports are mandatory'
nl|'\n'
indent|'            '
name|'if'
name|'cidr'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|rule_exists
dedent|''
name|'def'
name|'rule_exists'
op|'('
name|'self'
op|','
name|'security_group'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicates whether the specified rule values are already\n           defined in the given security group.\n        """'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'['
string|"'rules'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'is_duplicate'
op|'='
name|'True'
newline|'\n'
name|'keys'
op|'='
op|'('
string|"'group_id'"
op|','
string|"'cidr'"
op|','
string|"'from_port'"
op|','
string|"'to_port'"
op|','
string|"'protocol'"
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|'!='
name|'values'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'is_duplicate'
op|'='
name|'False'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'is_duplicate'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'rule'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
name|'or'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_rule
dedent|''
name|'def'
name|'get_rule'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ensure_default'
op|'('
name|'context'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_rule_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Rule (%s) not found"'
op|')'
op|'%'
name|'id'
newline|'\n'
name|'self'
op|'.'
name|'raise_not_found'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_rules
dedent|''
dedent|''
name|'def'
name|'add_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|','
name|'name'
op|','
name|'vals'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'count'
op|'='
name|'QUOTAS'
op|'.'
name|'count'
op|'('
name|'context'
op|','
string|"'security_group_rules'"
op|','
name|'id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'projected'
op|'='
name|'count'
op|'+'
name|'len'
op|'('
name|'vals'
op|')'
newline|'\n'
name|'QUOTAS'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'security_group_rules'
op|'='
name|'projected'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'OverQuota'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Quota exceeded, too many security group rules."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'raise_over_quota'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"Authorize security group ingress %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|','
name|'name'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
op|'['
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'context'
op|','
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
name|'vals'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'trigger_rules_refresh'
op|'('
name|'context'
op|','
name|'id'
op|'='
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'trigger_handler'
op|'('
string|"'security_group_rule_create'"
op|','
name|'context'
op|','
nl|'\n'
op|'['
name|'r'
op|'['
string|"'id'"
op|']'
name|'for'
name|'r'
name|'in'
name|'rules'
op|']'
op|')'
newline|'\n'
name|'return'
name|'rules'
newline|'\n'
nl|'\n'
DECL|member|remove_rules
dedent|''
name|'def'
name|'remove_rules'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group'
op|','
name|'rule_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Revoke security group ingress %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|','
name|'security_group'
op|'['
string|"'name'"
op|']'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'rule_id'
name|'in'
name|'rule_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_rule_destroy'
op|'('
name|'context'
op|','
name|'rule_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): we removed some rules, so refresh'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'trigger_rules_refresh'
op|'('
name|'context'
op|','
name|'id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'trigger_handler'
op|'('
string|"'security_group_rule_destroy'"
op|','
name|'context'
op|','
name|'rule_ids'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_invalid_property
name|'def'
name|'raise_invalid_property'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_group_already_exists
name|'def'
name|'raise_group_already_exists'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_invalid_group
name|'def'
name|'raise_invalid_group'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_invalid_cidr
name|'def'
name|'raise_invalid_cidr'
op|'('
name|'cidr'
op|','
name|'decoding_exception'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_over_quota
name|'def'
name|'raise_over_quota'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_not_found
name|'def'
name|'raise_not_found'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

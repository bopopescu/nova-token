begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Piston Cloud Computing, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Handles all requests relating to compute resources (e.g. guest vms,\nnetworking and storage of vms, and compute hosts on which they run)."""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'webob'
op|'.'
name|'exc'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'aggregate_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'api'
name|'as'
name|'scheduler_api'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|find_host_timeout_opt
name|'find_host_timeout_opt'
op|'='
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'find_host_timeout'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'30'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Timeout after NN seconds when looking for a host.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'find_host_timeout_opt'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'consoleauth_topic'"
op|','
string|"'nova.consoleauth'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_instance_state
name|'def'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
name|'None'
op|','
name|'task_state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to check VM and/or task state before entry to API functions.\n\n    If the instance is in the wrong state, the wrapper will raise an exception.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'vm_state'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm_state'
op|'='
name|'set'
op|'('
name|'vm_state'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'task_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'task_state'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'task_state'
op|'='
name|'set'
op|'('
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|function|outer
dedent|''
name|'def'
name|'outer'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vm_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
name|'not'
name|'in'
name|'vm_state'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'vm_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
name|'f'
op|'.'
name|'__name__'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'task_state'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'instance'
op|'['
string|"'task_state'"
op|']'
name|'not'
name|'in'
name|'task_state'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|"'task_state'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
name|'f'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'f'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'outer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|wrap_check_policy
dedent|''
name|'def'
name|'wrap_check_policy'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check corresponding policy prior of wrapped method to execution"""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'target'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_policy'
op|'('
name|'context'
op|','
name|'func'
op|'.'
name|'__name__'
op|','
name|'target'
op|')'
newline|'\n'
name|'return'
name|'func'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'target'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_policy
dedent|''
name|'def'
name|'check_policy'
op|'('
name|'context'
op|','
name|'action'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'_action'
op|'='
string|"'compute:%s'"
op|'%'
name|'action'
newline|'\n'
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'enforce'
op|'('
name|'context'
op|','
name|'_action'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseAPI
dedent|''
name|'class'
name|'BaseAPI'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base API class."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cast_or_call_compute_message
dedent|''
name|'def'
name|'_cast_or_call_compute_message'
op|'('
name|'self'
op|','
name|'rpc_method'
op|','
name|'compute_method'
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generic handler for RPC casts and calls to compute.\n\n        :param rpc_method: RPC method to use (rpc.call or rpc.cast)\n        :param compute_method: Compute manager method to call\n        :param context: RequestContext of caller\n        :param instance: The instance object to use to find host to send to\n                         Can be None to not include instance_uuid in args\n        :param host: Optional host to send to instead of instance[\'host\']\n                     Must be specified if \'instance\' is None\n        :param params: Optional dictionary of arguments to be passed to the\n                       compute worker\n\n        :returns: None\n        """'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"No compute host specified"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Unable to find host for "'
nl|'\n'
string|'"Instance %s"'
op|')'
op|'%'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'queue'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
newline|'\n'
name|'if'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
dedent|''
name|'kwargs'
op|'='
op|'{'
string|"'method'"
op|':'
name|'compute_method'
op|','
string|"'args'"
op|':'
name|'params'
op|'}'
newline|'\n'
name|'return'
name|'rpc_method'
op|'('
name|'context'
op|','
name|'queue'
op|','
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cast_compute_message
dedent|''
name|'def'
name|'_cast_compute_message'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generic handler for RPC casts to compute."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_or_call_compute_message'
op|'('
name|'rpc'
op|'.'
name|'cast'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_compute_message
dedent|''
name|'def'
name|'_call_compute_message'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generic handler for RPC calls to compute."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_cast_or_call_compute_message'
op|'('
name|'rpc'
op|'.'
name|'call'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_cast_scheduler_message
name|'def'
name|'_cast_scheduler_message'
op|'('
name|'context'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generic handler for RPC calls to the scheduler."""'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'scheduler_topic'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|API
dedent|''
dedent|''
name|'class'
name|'API'
op|'('
name|'BaseAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""API for interacting with the compute manager."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'image_service'
op|'='
name|'None'
op|','
name|'network_api'
op|'='
name|'None'
op|','
name|'volume_api'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'image_service'
op|'='
op|'('
name|'image_service'
name|'or'
nl|'\n'
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network_api'
name|'or'
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume_api'
name|'or'
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'API'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_injected_file_quota
dedent|''
name|'def'
name|'_check_injected_file_quota'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'injected_files'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enforce quota limits on injected files.\n\n        Raises a QuotaError if any limit is exceeded.\n        """'
newline|'\n'
name|'if'
name|'injected_files'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'limit'
op|'='
name|'quota'
op|'.'
name|'allowed_injected_files'
op|'('
name|'context'
op|','
name|'len'
op|'('
name|'injected_files'
op|')'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'injected_files'
op|')'
op|'>'
name|'limit'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
name|'code'
op|'='
string|'"OnsetFileLimitExceeded"'
op|')'
newline|'\n'
dedent|''
name|'path_limit'
op|'='
name|'quota'
op|'.'
name|'allowed_injected_file_path_bytes'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'path'
op|','
name|'content'
name|'in'
name|'injected_files'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'path'
op|')'
op|'>'
name|'path_limit'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
name|'code'
op|'='
string|'"OnsetFilePathLimitExceeded"'
op|')'
newline|'\n'
dedent|''
name|'content_limit'
op|'='
name|'quota'
op|'.'
name|'allowed_injected_file_content_bytes'
op|'('
nl|'\n'
name|'context'
op|','
name|'len'
op|'('
name|'content'
op|')'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'content'
op|')'
op|'>'
name|'content_limit'
op|':'
newline|'\n'
indent|'                '
name|'code'
op|'='
string|'"OnsetFileContentLimitExceeded"'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
name|'code'
op|'='
name|'code'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_num_instances_quota
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_num_instances_quota'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
name|'min_count'
op|','
nl|'\n'
name|'max_count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enforce quota limits on number of instances created."""'
newline|'\n'
name|'num_instances'
op|'='
name|'quota'
op|'.'
name|'allowed_instances'
op|'('
name|'context'
op|','
name|'max_count'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
name|'if'
name|'num_instances'
op|'<'
name|'min_count'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'if'
name|'num_instances'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot run any more instances of this type."'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
name|'_'
op|'('
string|'"Can only run %s more instances of this type."'
op|')'
op|'%'
nl|'\n'
name|'num_instances'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Quota exceeded for %(pid)s,"'
nl|'\n'
string|'" tried to run %(min_count)s instances. %(msg)s"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
name|'code'
op|'='
string|'"InstanceLimitExceeded"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'num_instances'
newline|'\n'
nl|'\n'
DECL|member|_check_metadata_properties_quota
dedent|''
name|'def'
name|'_check_metadata_properties_quota'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'metadata'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enforce quota limits on metadata properties."""'
newline|'\n'
name|'if'
name|'not'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'num_metadata'
op|'='
name|'len'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'quota_metadata'
op|'='
name|'quota'
op|'.'
name|'allowed_metadata_items'
op|'('
name|'context'
op|','
name|'num_metadata'
op|')'
newline|'\n'
name|'if'
name|'quota_metadata'
op|'<'
name|'num_metadata'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Quota exceeded for %(pid)s, tried to set "'
nl|'\n'
string|'"%(num_metadata)s metadata properties"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
name|'code'
op|'='
string|'"MetadataLimitExceeded"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Because metadata is stored in the DB, we hard-code the size limits'
nl|'\n'
comment|'# In future, we may support more variable length strings, so we act'
nl|'\n'
comment|'#  as if this is quota-controlled for forwards compatibility'
nl|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'metadata'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'k'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Metadata property key blank"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
name|'code'
op|'='
string|'"MetadataKeyUnspecified"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'k'
op|')'
op|'>'
number|'255'
name|'or'
name|'len'
op|'('
name|'v'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Metadata property key or value greater than 255 "'
nl|'\n'
string|'"characters"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'QuotaError'
op|'('
nl|'\n'
name|'code'
op|'='
string|'"MetadataKeyValueLimitExceeded"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_requested_networks
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_requested_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Check if the networks requested belongs to the project\n            and the fixed IP address for each network provided is within\n            same the network block\n        """'
newline|'\n'
name|'if'
name|'requested_networks'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'validate_networks'
op|'('
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_handle_kernel_and_ramdisk
name|'def'
name|'_handle_kernel_and_ramdisk'
op|'('
name|'context'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
name|'image'
op|','
nl|'\n'
name|'image_service'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Choose kernel and ramdisk appropriate for the instance.\n\n        The kernel and ramdisk can be chosen in one of three ways:\n\n            1. Passed in with create-instance request.\n\n            2. Inherited from image.\n\n            3. Forced to None by using `null_kernel` FLAG.\n        """'
newline|'\n'
comment|'# Inherit from image if not specified'
nl|'\n'
name|'if'
name|'kernel_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kernel_id'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ramdisk_id'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Force to None if using null_kernel'
nl|'\n'
dedent|''
name|'if'
name|'kernel_id'
op|'=='
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'null_kernel'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel_id'
op|'='
name|'None'
newline|'\n'
name|'ramdisk_id'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Verify kernel and ramdisk exist (fail-fast)'
nl|'\n'
dedent|''
name|'if'
name|'kernel_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'kernel_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'ramdisk_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'kernel_id'
op|','
name|'ramdisk_id'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_handle_availability_zone
name|'def'
name|'_handle_availability_zone'
op|'('
name|'availability_zone'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): We have a legacy hack to allow admins to specify hosts'
nl|'\n'
comment|'#             via az using az:host. It might be nice to expose an'
nl|'\n'
comment|'#             api to specify specific hosts to force onto, but for'
nl|'\n'
comment|'#             now it just supports this legacy hack.'
nl|'\n'
indent|'        '
name|'forced_host'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'availability_zone'
name|'and'
string|"':'"
name|'in'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'availability_zone'
op|','
name|'forced_host'
op|'='
name|'availability_zone'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'availability_zone'
op|'='
name|'FLAGS'
op|'.'
name|'default_schedule_zone'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'availability_zone'
op|','
name|'forced_host'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_inherit_properties_from_image
name|'def'
name|'_inherit_properties_from_image'
op|'('
name|'image'
op|','
name|'auto_disk_config'
op|')'
op|':'
newline|'\n'
DECL|function|prop
indent|'        '
name|'def'
name|'prop'
op|'('
name|'prop_'
op|','
name|'prop_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return the value of an image property."""'
newline|'\n'
name|'value'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
name|'prop_'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'prop_type'
op|'=='
string|"'bool'"
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'options_from_image'
op|'='
op|'{'
string|"'os_type'"
op|':'
name|'prop'
op|'('
string|"'os_type'"
op|')'
op|','
nl|'\n'
string|"'architecture'"
op|':'
name|'prop'
op|'('
string|"'arch'"
op|')'
op|','
nl|'\n'
string|"'vm_mode'"
op|':'
name|'prop'
op|'('
string|"'vm_mode'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
comment|"# If instance doesn't have auto_disk_config overridden by request, use"
nl|'\n'
comment|'# whatever the image indicates'
nl|'\n'
name|'if'
name|'auto_disk_config'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'auto_disk_config'
op|'='
name|'prop'
op|'('
string|"'auto_disk_config'"
op|','
name|'prop_type'
op|'='
string|"'bool'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'options_from_image'
op|'['
string|"'auto_disk_config'"
op|']'
op|'='
name|'auto_disk_config'
newline|'\n'
name|'return'
name|'options_from_image'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
nl|'\n'
name|'min_count'
op|','
name|'max_count'
op|','
nl|'\n'
name|'display_name'
op|','
name|'display_description'
op|','
nl|'\n'
name|'key_name'
op|','
name|'key_data'
op|','
name|'security_group'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'user_data'
op|','
name|'metadata'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'access_ip_v4'
op|','
name|'access_ip_v6'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'config_drive'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'auto_disk_config'
op|','
nl|'\n'
name|'reservation_id'
op|'='
name|'None'
op|','
name|'create_instance_here'
op|'='
name|'False'
op|','
nl|'\n'
name|'scheduler_hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify all the input parameters regardless of the provisioning\n        strategy being performed and schedule the instance(s) for\n        creation."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'security_group'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'='
string|"'default'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'min_count'
op|':'
newline|'\n'
indent|'            '
name|'min_count'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'max_count'
op|':'
newline|'\n'
indent|'            '
name|'max_count'
op|'='
name|'min_count'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
name|'block_device_mapping'
name|'or'
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Check quotas'
nl|'\n'
name|'num_instances'
op|'='
name|'self'
op|'.'
name|'_check_num_instances_quota'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
name|'min_count'
op|','
name|'max_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_metadata_properties_quota'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_injected_file_quota'
op|'('
name|'context'
op|','
name|'injected_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_requested_networks'
op|'('
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
name|'context'
op|','
nl|'\n'
name|'image_href'
op|')'
newline|'\n'
name|'image'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|'<'
name|'int'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'min_ram'"
op|')'
name|'or'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeMemoryTooSmall'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'<'
name|'int'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'min_disk'"
op|')'
name|'or'
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeDiskTooSmall'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle config_drive'
nl|'\n'
dedent|''
name|'config_drive_id'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'config_drive'
name|'and'
name|'config_drive'
name|'is'
name|'not'
name|'True'
op|':'
newline|'\n'
comment|'# config_drive is volume id'
nl|'\n'
indent|'            '
name|'config_drive_id'
op|'='
name|'config_drive'
newline|'\n'
name|'config_drive'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Ensure config_drive image exists'
nl|'\n'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'config_drive_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'kernel_id'
op|','
name|'ramdisk_id'
op|'='
name|'self'
op|'.'
name|'_handle_kernel_and_ramdisk'
op|'('
nl|'\n'
name|'context'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
name|'image'
op|','
name|'image_service'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'key_data'
name|'is'
name|'None'
name|'and'
name|'key_name'
op|':'
newline|'\n'
indent|'            '
name|'key_pair'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'key_pair_get'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
name|'key_data'
op|'='
name|'key_pair'
op|'['
string|"'public_key'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'reservation_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'reservation_id'
op|'='
name|'utils'
op|'.'
name|'generate_uid'
op|'('
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'root_device_name'
op|'='
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
nl|'\n'
name|'image'
op|'['
string|"'properties'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'availability_zone'
op|','
name|'forced_host'
op|'='
name|'self'
op|'.'
name|'_handle_availability_zone'
op|'('
nl|'\n'
name|'availability_zone'
op|')'
newline|'\n'
nl|'\n'
name|'base_options'
op|'='
op|'{'
nl|'\n'
string|"'reservation_id'"
op|':'
name|'reservation_id'
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'image_href'
op|','
nl|'\n'
string|"'kernel_id'"
op|':'
name|'kernel_id'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
name|'ramdisk_id'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'config_drive_id'"
op|':'
name|'config_drive_id'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'config_drive'"
op|':'
name|'config_drive'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'launch_time'"
op|':'
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'instance_type'
op|'['
string|"'vcpus'"
op|']'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
nl|'\n'
string|"'display_name'"
op|':'
name|'display_name'
op|','
nl|'\n'
string|"'display_description'"
op|':'
name|'display_description'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'user_data'"
op|':'
name|'user_data'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'key_name'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'key_data'"
op|':'
name|'key_data'
op|','
nl|'\n'
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'metadata'"
op|':'
name|'metadata'
op|','
nl|'\n'
string|"'access_ip_v4'"
op|':'
name|'access_ip_v4'
op|','
nl|'\n'
string|"'access_ip_v6'"
op|':'
name|'access_ip_v6'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
name|'availability_zone'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'root_device_name'
op|','
nl|'\n'
string|"'progress'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
name|'options_from_image'
op|'='
name|'self'
op|'.'
name|'_inherit_properties_from_image'
op|'('
nl|'\n'
name|'image'
op|','
name|'auto_disk_config'
op|')'
newline|'\n'
nl|'\n'
name|'base_options'
op|'.'
name|'update'
op|'('
name|'options_from_image'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to run %s instances..."'
op|')'
op|'%'
name|'num_instances'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'create_instance_here'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'create_db_entry_for_new_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'base_options'
op|','
nl|'\n'
name|'security_group'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
comment|'# Tells scheduler we created the instance already.'
nl|'\n'
name|'base_options'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'rpc_method'
op|'='
name|'rpc'
op|'.'
name|'cast'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# We need to wait for the scheduler to create the instance'
nl|'\n'
comment|'# DB entries, because the instance *could* be # created in'
nl|'\n'
comment|'# a child zone.'
nl|'\n'
indent|'            '
name|'rpc_method'
op|'='
name|'rpc'
op|'.'
name|'call'
newline|'\n'
nl|'\n'
dedent|''
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'scheduler_hints'
op|'='
name|'scheduler_hints'
op|')'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
name|'and'
name|'forced_host'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'['
string|"'force_hosts'"
op|']'
op|'='
op|'['
name|'forced_host'
op|']'
newline|'\n'
nl|'\n'
comment|'# TODO(comstud): We should use rpc.multicall when we can'
nl|'\n'
comment|'# retrieve the full instance dictionary from the scheduler.'
nl|'\n'
comment|'# Otherwise, we could exceed the AMQP max message size limit.'
nl|'\n'
comment|"# This would require the schedulers' schedule_run_instances"
nl|'\n'
comment|'# methods to return an iterator vs a list.'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'self'
op|'.'
name|'_schedule_run_instance'
op|'('
nl|'\n'
name|'rpc_method'
op|','
nl|'\n'
name|'context'
op|','
name|'base_options'
op|','
nl|'\n'
name|'instance_type'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'image'
op|','
nl|'\n'
name|'num_instances'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'security_group'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'create_instance_here'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
op|'['
name|'instance'
op|']'
op|','
name|'reservation_id'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'instances'
op|','
name|'reservation_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_volume_size
name|'def'
name|'_volume_size'
op|'('
name|'instance_type'
op|','
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'size'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'instance_type'
op|'.'
name|'get'
op|'('
string|"'swap'"
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'num'
op|'='
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
name|'virtual_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(yamahata): ephemeralN where N > 0'
nl|'\n'
comment|'# Only ephemeral0 is allowed for now because InstanceTypes'
nl|'\n'
comment|'# table only allows single local disk, ephemeral_gb.'
nl|'\n'
comment|'# In order to enhance it, we need to add a new columns to'
nl|'\n'
comment|'# instance_types table.'
nl|'\n'
name|'if'
name|'num'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
name|'instance_type'
op|'.'
name|'get'
op|'('
string|"'ephemeral_gb'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'size'
newline|'\n'
nl|'\n'
DECL|member|_update_image_block_device_mapping
dedent|''
name|'def'
name|'_update_image_block_device_mapping'
op|'('
name|'self'
op|','
name|'elevated_context'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'mappings'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""tell vm driver to create ephemeral/swap device at boot time by\n        updating BlockDeviceMapping\n        """'
newline|'\n'
name|'instance_type'
op|'='
op|'('
name|'instance_type'
name|'or'
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device'
op|'.'
name|'mappings_prepend_dev'
op|'('
name|'mappings'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"bdm %s"'
op|')'
op|','
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
name|'virtual_name'
op|'='
name|'bdm'
op|'['
string|"'virtual'"
op|']'
newline|'\n'
name|'if'
name|'virtual_name'
op|'=='
string|"'ami'"
name|'or'
name|'virtual_name'
op|'=='
string|"'root'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'size'
op|'='
name|'self'
op|'.'
name|'_volume_size'
op|'('
name|'instance_type'
op|','
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'size'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'bdm'
op|'['
string|"'device'"
op|']'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'virtual_name'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'size'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update_or_create'
op|'('
name|'elevated_context'
op|','
nl|'\n'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_block_device_mapping
dedent|''
dedent|''
name|'def'
name|'_update_block_device_mapping'
op|'('
name|'self'
op|','
name|'elevated_context'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""tell vm driver to attach volume at boot time by updating\n        BlockDeviceMapping\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"block_device_mapping %s"'
op|')'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'assert'
string|"'device_name'"
name|'in'
name|'bdm'
newline|'\n'
nl|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
op|'('
string|"'device_name'"
op|','
string|"'delete_on_termination'"
op|','
string|"'virtual_name'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
nl|'\n'
string|"'no_device'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'['
name|'key'
op|']'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'virtual_name'
op|'='
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'virtual_name'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'virtual_name'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'virtual_name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'size'
op|'='
name|'self'
op|'.'
name|'_volume_size'
op|'('
name|'instance_type'
op|','
name|'virtual_name'
op|')'
newline|'\n'
name|'if'
name|'size'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'values'
op|'['
string|"'volume_size'"
op|']'
op|'='
name|'size'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): NoDevice eliminates devices defined in image'
nl|'\n'
comment|'#                 files by command line option.'
nl|'\n'
comment|'#                 (--block-device-mapping)'
nl|'\n'
dedent|''
name|'if'
name|'virtual_name'
op|'=='
string|"'NoDevice'"
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'['
string|"'no_device'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'k'
name|'in'
op|'('
string|"'delete_on_termination'"
op|','
string|"'volume_id'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
nl|'\n'
string|"'virtual_name'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'['
name|'k'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_update_or_create'
op|'('
name|'elevated_context'
op|','
nl|'\n'
name|'values'
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE(bcwaldon): No policy check since this is only used by scheduler and'
nl|'\n'
comment|'# the compute api. That should probably be cleaned up, though.'
nl|'\n'
DECL|member|create_db_entry_for_new_instance
dedent|''
dedent|''
name|'def'
name|'create_db_entry_for_new_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
name|'image'
op|','
nl|'\n'
name|'base_options'
op|','
name|'security_group'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create an entry in the DB for this new instance,\n        including any related table updates (such as security group,\n        etc).\n\n        This is called by the scheduler after a location for the\n        instance has been determined.\n        """'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'if'
name|'security_group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'='
op|'['
string|"'default'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'security_group'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'='
op|'['
name|'security_group'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'security_groups'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'security_group_name'
name|'in'
name|'security_group'
op|':'
newline|'\n'
indent|'            '
name|'group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
name|'security_groups'
op|'.'
name|'append'
op|'('
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'base_options'
op|'.'
name|'setdefault'
op|'('
string|"'launch_index'"
op|','
number|'0'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context'
op|','
name|'base_options'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'security_group_id'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# BlockDeviceMapping table'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_image_block_device_mapping'
op|'('
name|'elevated'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'instance_id'
op|','
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_block_device_mapping'
op|'('
name|'elevated'
op|','
name|'instance_type'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
comment|'# override via command line option'
nl|'\n'
name|'self'
op|'.'
name|'_update_block_device_mapping'
op|'('
name|'elevated'
op|','
name|'instance_type'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set sane defaults if not specified'
nl|'\n'
name|'updates'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'display_name'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'display_name'"
op|')'
newline|'\n'
name|'if'
name|'display_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'display_name'
op|'='
name|'self'
op|'.'
name|'_default_display_name'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostname'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'hostname'"
op|')'
newline|'\n'
name|'if'
name|'hostname'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
name|'display_name'
newline|'\n'
nl|'\n'
dedent|''
name|'updates'
op|'['
string|"'display_name'"
op|']'
op|'='
name|'display_name'
newline|'\n'
name|'updates'
op|'['
string|"'hostname'"
op|']'
op|'='
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
newline|'\n'
name|'updates'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'updates'
op|'['
string|"'task_state'"
op|']'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|','
op|'['
op|']'
op|')'
name|'or'
nl|'\n'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
name|'or'
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|'['
string|"'shutdown_terminate'"
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'updates'
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|_default_display_name
dedent|''
name|'def'
name|'_default_display_name'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Server %s"'
op|'%'
name|'instance_id'
newline|'\n'
nl|'\n'
DECL|member|_schedule_run_instance
dedent|''
name|'def'
name|'_schedule_run_instance'
op|'('
name|'self'
op|','
nl|'\n'
name|'rpc_method'
op|','
nl|'\n'
name|'context'
op|','
name|'base_options'
op|','
nl|'\n'
name|'instance_type'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'image'
op|','
nl|'\n'
name|'num_instances'
op|','
nl|'\n'
name|'requested_networks'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
nl|'\n'
name|'security_group'
op|','
nl|'\n'
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a run_instance request to the schedulers for processing."""'
newline|'\n'
nl|'\n'
name|'pid'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'uid'
op|'='
name|'context'
op|'.'
name|'user_id'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Sending create to scheduler for %(pid)s/%(uid)s\'s"'
op|')'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
name|'utils'
op|'.'
name|'to_primitive'
op|'('
name|'image'
op|')'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'base_options'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type'
op|','
nl|'\n'
string|"'num_instances'"
op|':'
name|'num_instances'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|','
nl|'\n'
string|"'security_group'"
op|':'
name|'security_group'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'rpc_method'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'scheduler_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"run_instance"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"topic"'
op|':'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
string|'"request_spec"'
op|':'
name|'request_spec'
op|','
nl|'\n'
string|'"admin_password"'
op|':'
name|'admin_password'
op|','
nl|'\n'
string|'"injected_files"'
op|':'
name|'injected_files'
op|','
nl|'\n'
string|'"requested_networks"'
op|':'
name|'requested_networks'
op|','
nl|'\n'
string|'"is_first_time"'
op|':'
name|'True'
op|','
nl|'\n'
string|'"filter_properties"'
op|':'
name|'filter_properties'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_create_policies
dedent|''
name|'def'
name|'_check_create_policies'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'availability_zone'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check policies for create()."""'
newline|'\n'
name|'target'
op|'='
op|'{'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
name|'availability_zone'
op|'}'
newline|'\n'
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'requested_networks'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create:attach_network'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'create:attach_volume'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|'='
name|'None'
op|','
name|'ramdisk_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'min_count'
op|'='
name|'None'
op|','
name|'max_count'
op|'='
name|'None'
op|','
nl|'\n'
name|'display_name'
op|'='
name|'None'
op|','
name|'display_description'
op|'='
name|'None'
op|','
nl|'\n'
name|'key_name'
op|'='
name|'None'
op|','
name|'key_data'
op|'='
name|'None'
op|','
name|'security_group'
op|'='
name|'None'
op|','
nl|'\n'
name|'availability_zone'
op|'='
name|'None'
op|','
name|'user_data'
op|'='
name|'None'
op|','
name|'metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'None'
op|','
name|'access_ip_v4'
op|'='
name|'None'
op|','
nl|'\n'
name|'access_ip_v6'
op|'='
name|'None'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
name|'config_drive'
op|'='
name|'None'
op|','
nl|'\n'
name|'auto_disk_config'
op|'='
name|'None'
op|','
name|'scheduler_hints'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Provision instances, sending instance information to the\n        scheduler.  The scheduler will determine where the instance(s)\n        go and will handle creating the DB entries.\n\n        Returns a tuple of (instances, reservation_id) where instances\n        could be \'None\' or a list of instance dicts depending on if\n        we waited for information from the scheduler or not.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_create_policies'
op|'('
name|'context'
op|','
name|'availability_zone'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
nl|'\n'
comment|"# We can create the DB entry for the instance here if we're"
nl|'\n'
comment|'# only going to create 1 instance.'
nl|'\n'
comment|'# This speeds up API responses for builds'
nl|'\n'
comment|"# as we don't need to wait for the scheduler."
nl|'\n'
name|'create_instance_here'
op|'='
name|'max_count'
op|'=='
number|'1'
newline|'\n'
nl|'\n'
op|'('
name|'instances'
op|','
name|'reservation_id'
op|')'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|','
name|'kernel_id'
op|','
name|'ramdisk_id'
op|','
nl|'\n'
name|'min_count'
op|','
name|'max_count'
op|','
nl|'\n'
name|'display_name'
op|','
name|'display_description'
op|','
nl|'\n'
name|'key_name'
op|','
name|'key_data'
op|','
name|'security_group'
op|','
nl|'\n'
name|'availability_zone'
op|','
name|'user_data'
op|','
name|'metadata'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'access_ip_v4'
op|','
name|'access_ip_v6'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'config_drive'
op|','
nl|'\n'
name|'block_device_mapping'
op|','
name|'auto_disk_config'
op|','
nl|'\n'
name|'create_instance_here'
op|'='
name|'create_instance_here'
op|','
nl|'\n'
name|'scheduler_hints'
op|'='
name|'scheduler_hints'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'create_instance_here'
name|'or'
name|'instances'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'instances'
op|','
name|'reservation_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'inst_ret_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'_is_precooked'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'inst_ret_list'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# Scheduler only gives us the 'id'.  We need to pull"
nl|'\n'
comment|'# in the created instances from the DB'
nl|'\n'
indent|'                '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'inst_ret_list'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'inst_ret_list'
op|','
name|'reservation_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure_default_security_group
dedent|''
name|'def'
name|'ensure_default_security_group'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that a context has a security group.\n\n        Creates a security group for the security context if it does not\n        already exist.\n\n        :param context: the security context\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'default'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'default'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'default'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_security_group_rules_refresh
dedent|''
dedent|''
name|'def'
name|'trigger_security_group_rules_refresh'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a rule is added to or removed from a security_group."""'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'security_group_id'
op|')'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'security_group'
op|'['
string|"'instances'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'hosts'
op|'.'
name|'add'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'host'
name|'in'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_security_group_rules"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"security_group_id"'
op|':'
name|'security_group'
op|'.'
name|'id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_security_group_members_refresh
dedent|''
dedent|''
name|'def'
name|'trigger_security_group_members_refresh'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a security group gains a new or loses a member.\n\n        Sends an update request to each compute node for whom this is\n        relevant.\n        """'
newline|'\n'
comment|'# First, we get the security group rules that reference these groups as'
nl|'\n'
comment|'# the grantee..'
nl|'\n'
name|'security_group_rules'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'group_id'
name|'in'
name|'group_ids'
op|':'
newline|'\n'
indent|'            '
name|'security_group_rules'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_rule_get_by_security_group_grantee'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'group_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# ..then we distill the security groups to which they belong..'
nl|'\n'
dedent|''
name|'security_groups'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group_rules'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'rule'
op|'['
string|"'parent_group_id'"
op|']'
op|')'
newline|'\n'
name|'security_groups'
op|'.'
name|'add'
op|'('
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
comment|'# ..then we find the instances that are members of these groups..'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'security_group'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'security_group'
op|'['
string|"'instances'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'.'
name|'add'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# ...then we find the hosts where they live...'
nl|'\n'
dedent|''
dedent|''
name|'hosts'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'hosts'
op|'.'
name|'add'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# ...and finally we tell these nodes to refresh their view of this'
nl|'\n'
comment|'# particular security group.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'host'
name|'in'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_security_group_members"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"security_group_id"'
op|':'
name|'group_id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trigger_provider_fw_rules_refresh
dedent|''
dedent|''
name|'def'
name|'trigger_provider_fw_rules_refresh'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a rule is added/removed from a provider firewall"""'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
op|'['
name|'x'
op|'['
string|"'host'"
op|']'
name|'for'
op|'('
name|'x'
op|','
name|'idx'
op|')'
nl|'\n'
name|'in'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all_compute_sorted'
op|'('
name|'context'
op|')'
op|']'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'refresh_provider_fw_rules'"
op|','
string|"'args'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_security_group_associated_with_server
dedent|''
dedent|''
name|'def'
name|'_is_security_group_associated_with_server'
op|'('
name|'self'
op|','
name|'security_group'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if the security group is already associated\n           with the instance. If Yes, return True.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'security_group'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'security_group'
op|'.'
name|'get'
op|'('
string|"'instances'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inst'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'instance_uuid'
op|'=='
name|'inst'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|add_security_group
name|'def'
name|'add_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'security_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add security group to the instance"""'
newline|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'#check if the security group is associated with the server'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_security_group_associated_with_server'
op|'('
name|'security_group'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupExistsForInstance'
op|'('
nl|'\n'
name|'security_group_id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'#check if the instance is in running state'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"security_group_id"'
op|':'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'refresh_security_group_rules'"
op|','
nl|'\n'
name|'context'
op|','
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|remove_security_group
name|'def'
name|'remove_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'security_group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove the security group associated with the instance"""'
newline|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'#check if the security group is associated with the server'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_is_security_group_associated_with_server'
op|'('
name|'security_group'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupNotExistsForInstance'
op|'('
nl|'\n'
name|'security_group_id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'#check if the instance is in running state'
nl|'\n'
dedent|''
name|'if'
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|'!='
name|'power_state'
op|'.'
name|'RUNNING'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_remove_security_group'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"security_group_id"'
op|':'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'refresh_security_group_rules'"
op|','
nl|'\n'
name|'context'
op|','
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|update
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the instance in the datastore.\n\n        :param context: The security context\n        :param instance: The instance to update\n        :param kwargs: All additional keyword args are treated\n                       as data fields of the instance to be\n                       updated\n\n        :returns: None\n        """'
newline|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|'"id"'
op|']'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'rv'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|']'
op|')'
newline|'\n'
DECL|member|soft_delete
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Going to try to soft delete instance'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'disable_terminate'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# NOTE(jerdfelt): The compute daemon handles reclaiming instances'
nl|'\n'
comment|'# that are in soft delete. If there is no host assigned, there is'
nl|'\n'
comment|'# no daemon to reclaim, so delete it immediately.'
nl|'\n'
dedent|''
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SOFT_DELETE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|','
nl|'\n'
name|'deleted_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'power_off_instance'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|"'No host for instance, deleting immediately'"
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Race condition.  Instance already gone.'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_delete
dedent|''
dedent|''
dedent|''
name|'def'
name|'_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
comment|'# Just update database, nothing else we can do'
nl|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'DELETING'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|'=='
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|':'
newline|'\n'
comment|'# If in the middle of a resize, use confirm_resize to'
nl|'\n'
comment|'# ensure the original instance is cleaned up too'
nl|'\n'
indent|'                '
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'finished'"
op|')'
newline|'\n'
name|'if'
name|'migration_ref'
op|':'
newline|'\n'
indent|'                    '
name|'src_host'
op|'='
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
comment|'# Call since this can race with the terminate_instance'
nl|'\n'
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|"'confirm_resize'"
op|','
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'host'
op|'='
name|'src_host'
op|','
nl|'\n'
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'terminate_instance'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Race condition. Instance already gone.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# NOTE(jerdfelt): The API implies that only ACTIVE and ERROR are'
nl|'\n'
comment|'# allowed but the EC2 API appears to allow from RESCUED and STOPPED'
nl|'\n'
comment|'# too'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|')'
newline|'\n'
DECL|member|delete
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to terminate instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'disable_terminate'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'SOFT_DELETE'
op|']'
op|')'
newline|'\n'
DECL|member|restore
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'deleted_at'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'power_on_instance'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'SOFT_DELETE'
op|']'
op|')'
newline|'\n'
DECL|member|force_delete
name|'def'
name|'force_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force delete a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|stop
name|'def'
name|'stop'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop an instance."""'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to stop instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'STOPPING'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'rpc_method'
op|'='
name|'rpc'
op|'.'
name|'cast'
name|'if'
name|'do_cast'
name|'else'
name|'rpc'
op|'.'
name|'call'
newline|'\n'
name|'self'
op|'.'
name|'_cast_or_call_compute_message'
op|'('
name|'rpc_method'
op|','
string|"'stop_instance'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|')'
newline|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start an instance."""'
newline|'\n'
name|'vm_state'
op|'='
name|'instance'
op|'['
string|'"vm_state"'
op|']'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to try to start instance"'
op|')'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'shutdown_terminate'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Instance %(instance_uuid)s is not "'
nl|'\n'
string|'"stopped. (%(vm_state)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|"# NOTE(yamahata): nova compute doesn't reap instances"
nl|'\n'
comment|'# which initiated shutdown itself. So reap it here.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'do_cast'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'STARTING'
op|')'
newline|'\n'
nl|'\n'
comment|"# TODO(yamahata): injected_files isn't supported right now."
nl|'\n'
comment|'#                 It is used only for osapi. not for ec2 api.'
nl|'\n'
comment|"#                 availability_zone isn't used by run_instance."
nl|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'start_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE(bcwaldon): no policy check here since it should be rolled in to'
nl|'\n'
comment|'# search_opts in get_all'
nl|'\n'
DECL|member|get_active_by_window
dedent|''
name|'def'
name|'get_active_by_window'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get instances that were continuously active over a window."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_active_by_window'
op|'('
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
comment|"#NOTE(bcwaldon): this doesn't really belong in this class"
nl|'\n'
DECL|member|get_instance_type
dedent|''
name|'def'
name|'get_instance_type'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_type_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an instance type by instance type id."""'
newline|'\n'
name|'return'
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a single instance with the given instance_id."""'
newline|'\n'
comment|'# NOTE(ameade): we still need to support integer ids for ec2'
nl|'\n'
name|'if'
name|'utils'
op|'.'
name|'is_uuid_like'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'check_policy'
op|'('
name|'context'
op|','
string|"'get'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst'
op|'='
name|'dict'
op|'('
name|'instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# NOTE(comstud): Doesn't get returned with iteritems"
nl|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
name|'instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
DECL|member|get_all
dedent|''
name|'def'
name|'get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'search_opts'
op|'='
name|'None'
op|','
name|'sort_key'
op|'='
string|"'created_at'"
op|','
nl|'\n'
name|'sort_dir'
op|'='
string|"'desc'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all instances filtered by one of the given parameters.\n\n        If there is no filter and the context is an admin, it will retrieve\n        all instances in the system.\n\n        Deleted instances will be returned by default, unless there is a\n        search option that says otherwise.\n\n        The results will be returned sorted in the order specified by the\n        \'sort_dir\' parameter using the key specified in the \'sort_key\'\n        parameter.\n        """'
newline|'\n'
nl|'\n'
comment|'#TODO(bcwaldon): determine the best argument for target here'
nl|'\n'
name|'target'
op|'='
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'check_policy'
op|'('
name|'context'
op|','
string|'"get_all"'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'search_opts'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'search_opts'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Searching by: %s"'
op|')'
op|'%'
name|'str'
op|'('
name|'search_opts'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Fixups for the DB call'
nl|'\n'
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_remap_flavor_filter
name|'def'
name|'_remap_flavor_filter'
op|'('
name|'flavor_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
nl|'\n'
name|'flavor_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FlavorNotFound'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'filters'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_remap_fixed_ip_filter
dedent|''
name|'def'
name|'_remap_fixed_ip_filter'
op|'('
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
comment|"# Turn fixed_ip into a regexp match. Since '.' matches"
nl|'\n'
comment|'# any character, we need to use regexp escaping for it.'
nl|'\n'
indent|'            '
name|'filters'
op|'['
string|"'ip'"
op|']'
op|'='
string|"'^%s$'"
op|'%'
name|'fixed_ip'
op|'.'
name|'replace'
op|'('
string|"'.'"
op|','
string|"'\\\\.'"
op|')'
newline|'\n'
nl|'\n'
comment|'# search_option to filter_name mapping.'
nl|'\n'
dedent|''
name|'filter_mapping'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
string|"'image_ref'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'display_name'"
op|','
nl|'\n'
string|"'instance_name'"
op|':'
string|"'name'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'project_id'"
op|','
nl|'\n'
string|"'flavor'"
op|':'
name|'_remap_flavor_filter'
op|','
nl|'\n'
string|"'fixed_ip'"
op|':'
name|'_remap_fixed_ip_filter'
op|'}'
newline|'\n'
nl|'\n'
comment|'# copy from search_opts, doing various remappings as necessary'
nl|'\n'
name|'for'
name|'opt'
op|','
name|'value'
name|'in'
name|'search_opts'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Do remappings.'
nl|'\n'
comment|'# Values not in the filter_mapping table are copied as-is.'
nl|'\n'
comment|'# If remapping is None, option is not copied'
nl|'\n'
comment|'# If the remapping is a string, it is the filter_name to use'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'remap_object'
op|'='
name|'filter_mapping'
op|'['
name|'opt'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'filters'
op|'['
name|'opt'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Remaps are strings to translate to, or functions to call'
nl|'\n'
comment|'# to do the translating as defined by the table above.'
nl|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'remap_object'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'filters'
op|'['
name|'remap_object'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'remap_object'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|"# We already know we can't match the filter, so"
nl|'\n'
comment|'# return an empty list'
nl|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'inst_models'
op|'='
name|'self'
op|'.'
name|'_get_instances_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|','
name|'sort_dir'
op|')'
newline|'\n'
nl|'\n'
comment|'# Convert the models to dictionaries'
nl|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'inst_model'
name|'in'
name|'inst_models'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'dict'
op|'('
name|'inst_model'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
comment|"# NOTE(comstud): Doesn't get returned by iteritems"
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|'='
name|'inst_model'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|_get_instances_by_filters
dedent|''
name|'def'
name|'_get_instances_by_filters'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|','
name|'sort_key'
op|','
name|'sort_dir'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'ip6'"
name|'in'
name|'filters'
name|'or'
string|"'ip'"
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|')'
newline|'\n'
comment|'# NOTE(jkoelker) It is possible that we will get the same'
nl|'\n'
comment|'#                instance uuid twice (one for ipv4 and ipv6)'
nl|'\n'
name|'uuids'
op|'='
name|'set'
op|'('
op|'['
name|'r'
op|'['
string|"'instance_uuid'"
op|']'
name|'for'
name|'r'
name|'in'
name|'res'
op|']'
op|')'
newline|'\n'
name|'filters'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'uuids'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_all_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|','
name|'sort_key'
op|','
nl|'\n'
name|'sort_dir'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|')'
newline|'\n'
DECL|member|backup
name|'def'
name|'backup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'backup_type'
op|','
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Backup the given instance\n\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param name: name of the backup or snapshot\n            name = backup_type  # daily backups are called \'daily\'\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        :param extra_properties: dict of extra image properties to include\n        """'
newline|'\n'
name|'recv_meta'
op|'='
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
string|"'backup'"
op|','
nl|'\n'
name|'backup_type'
op|'='
name|'backup_type'
op|','
name|'rotation'
op|'='
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'extra_properties'
op|')'
newline|'\n'
name|'return'
name|'recv_meta'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|')'
newline|'\n'
DECL|member|snapshot
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'extra_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot the given instance.\n\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param name: name of the backup or snapshot\n        :param extra_properties: dict of extra image properties to include\n\n        :returns: A dict containing image metadata\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_create_image'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
string|"'snapshot'"
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'extra_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_image
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'image_type'
op|','
nl|'\n'
name|'backup_type'
op|'='
name|'None'
op|','
name|'rotation'
op|'='
name|'None'
op|','
name|'extra_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create snapshot or backup for an instance on this host.\n\n        :param context: security context\n        :param instance: nova.db.sqlalchemy.models.Instance\n        :param name: string for name of the snapshot\n        :param image_type: snapshot | backup\n        :param backup_type: daily | weekly\n        :param rotation: int representing how many backups to keep around;\n            None if rotation shouldn\'t be used (as in the case of snapshots)\n        :param extra_properties: dict of extra image properties to include\n\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
string|'"snapshot"'
op|':'
newline|'\n'
indent|'            '
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
newline|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|'"backup"'
op|':'
newline|'\n'
indent|'            '
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Image type not recognized %s'"
op|')'
op|'%'
name|'image_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_test_and_set'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|','
string|"'task_state'"
op|','
op|'['
name|'None'
op|']'
op|','
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
name|'properties'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'str'
op|'('
name|'context'
op|'.'
name|'user_id'
op|')'
op|','
nl|'\n'
string|"'image_type'"
op|':'
name|'image_type'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'sent_meta'
op|'='
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'is_public'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'image_type'
op|'=='
string|"'backup'"
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'['
string|"'backup_type'"
op|']'
op|'='
name|'backup_type'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'image_type'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
indent|'            '
name|'min_ram'
op|','
name|'min_disk'
op|'='
name|'self'
op|'.'
name|'_get_minram_mindisk_params'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'min_ram'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sent_meta'
op|'['
string|"'min_ram'"
op|']'
op|'='
name|'min_ram'
newline|'\n'
dedent|''
name|'if'
name|'min_disk'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sent_meta'
op|'['
string|"'min_disk'"
op|']'
op|'='
name|'min_disk'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'properties'
op|'.'
name|'update'
op|'('
name|'extra_properties'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'sent_meta'
op|'['
string|"'properties'"
op|']'
op|'='
name|'properties'
newline|'\n'
nl|'\n'
name|'recv_meta'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'sent_meta'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|','
string|"'image_type'"
op|':'
name|'image_type'
op|','
nl|'\n'
string|"'backup_type'"
op|':'
name|'backup_type'
op|','
string|"'rotation'"
op|':'
name|'rotation'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'snapshot_instance'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
name|'return'
name|'recv_meta'
newline|'\n'
nl|'\n'
DECL|member|_get_minram_mindisk_params
dedent|''
name|'def'
name|'_get_minram_mindisk_params'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
comment|'#try to get source image of the instance'
nl|'\n'
indent|'            '
name|'orig_image'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ImageNotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
comment|'#disk format of vhd is non-shrinkable'
nl|'\n'
dedent|''
name|'if'
name|'orig_image'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'vhd'"
op|':'
newline|'\n'
indent|'            '
name|'min_ram'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'min_disk'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'#set new image values to the original image values'
nl|'\n'
indent|'            '
name|'min_ram'
op|'='
name|'orig_image'
op|'.'
name|'get'
op|'('
string|"'min_ram'"
op|')'
newline|'\n'
name|'min_disk'
op|'='
name|'orig_image'
op|'.'
name|'get'
op|'('
string|"'min_disk'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'min_ram'
op|','
name|'min_disk'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'reboot_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the given instance."""'
newline|'\n'
name|'state'
op|'='
op|'{'
string|"'SOFT'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
string|"'HARD'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|'}'
op|'['
name|'reboot_type'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'reboot_instance'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'reboot_type'"
op|':'
name|'reboot_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_image_href
dedent|''
name|'def'
name|'_validate_image_href'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_href'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Throws an ImageNotFound exception if image_href does not exist."""'
newline|'\n'
op|'('
name|'image_service'
op|','
name|'image_id'
op|')'
op|'='
name|'nova'
op|'.'
name|'image'
op|'.'
name|'get_image_service'
op|'('
name|'context'
op|','
nl|'\n'
name|'image_href'
op|')'
newline|'\n'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|rebuild
name|'def'
name|'rebuild'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_href'
op|','
name|'admin_password'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebuild the given instance with the provided attributes."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_validate_image_href'
op|'('
name|'context'
op|','
name|'image_href'
op|')'
newline|'\n'
nl|'\n'
name|'files_to_inject'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'files_to_inject'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_injected_file_quota'
op|'('
name|'context'
op|','
name|'files_to_inject'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_metadata_properties_quota'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|'='
name|'image_href'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'rebuild_params'
op|'='
op|'{'
nl|'\n'
string|'"new_pass"'
op|':'
name|'admin_password'
op|','
nl|'\n'
string|'"injected_files"'
op|':'
name|'files_to_inject'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'rebuild_instance'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'rebuild_params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reverts a resize, deleting the \'new\' instance in the process."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'finished'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'migration_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'MigrationNotFoundByStatus'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'status'
op|'='
string|"'finished'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'revert_resize'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'reverted'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a migration/resize and deletes the \'old\' instance."""'
newline|'\n'
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'finished'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'migration_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'MigrationNotFoundByStatus'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'status'
op|'='
string|"'finished'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'migration_id'"
op|':'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'confirm_resize'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|','
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_update'
op|'('
name|'context'
op|','
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'confirmed'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
DECL|member|resize
name|'def'
name|'resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'flavor_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resize (ie, migrate) a running instance.\n\n        If flavor_id is None, the process is considered a migration, keeping\n        the original flavor_id. If flavor_id is not None, the instance should\n        be migrated to a new host and resized to the new flavor_id.\n        """'
newline|'\n'
name|'current_instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
nl|'\n'
comment|'# If flavor_id is not provided, only migrate the instance.'
nl|'\n'
name|'if'
name|'not'
name|'flavor_id'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"flavor_id is None. Assuming migration."'
op|')'
op|')'
newline|'\n'
name|'new_instance_type'
op|'='
name|'current_instance_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
nl|'\n'
name|'flavor_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'current_instance_type_name'
op|'='
name|'current_instance_type'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'new_instance_type_name'
op|'='
name|'new_instance_type'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Old instance type %(current_instance_type_name)s, "'
nl|'\n'
string|'" new instance type %(new_instance_type_name)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'new_instance_type'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FlavorNotFound'
op|'('
name|'flavor_id'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(markwash): look up the image early to avoid auth problems later'
nl|'\n'
dedent|''
name|'image'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'current_memory_mb'
op|'='
name|'current_instance_type'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'new_memory_mb'
op|'='
name|'new_instance_type'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'current_memory_mb'
op|'=='
name|'new_memory_mb'
op|')'
name|'and'
name|'flavor_id'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'CannotResizeToSameSize'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZING'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
nl|'\n'
name|'progress'
op|'='
number|'0'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'instance_type'"
op|':'
name|'new_instance_type'
op|','
nl|'\n'
string|"'num_instances'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'ignore_hosts'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'allow_resize_to_same_host'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'['
string|"'ignore_hosts'"
op|']'
op|'.'
name|'append'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'{'
nl|'\n'
string|'"topic"'
op|':'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
string|'"instance_uuid"'
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|'"instance_type_id"'
op|':'
name|'new_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|'"image"'
op|':'
name|'image'
op|','
nl|'\n'
string|'"update_db"'
op|':'
name|'False'
op|','
nl|'\n'
string|'"request_spec"'
op|':'
name|'utils'
op|'.'
name|'to_primitive'
op|'('
name|'request_spec'
op|')'
op|','
nl|'\n'
string|'"filter_properties"'
op|':'
name|'filter_properties'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_scheduler_message'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"prep_resize"'
op|','
nl|'\n'
string|'"args"'
op|':'
name|'args'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|add_fixed_ip
name|'def'
name|'add_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add fixed_ip from specified network to given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'add_fixed_ip_to_instance'"
op|','
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'params'
op|'='
name|'dict'
op|'('
name|'network_id'
op|'='
name|'network_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|remove_fixed_ip
name|'def'
name|'remove_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove fixed_ip from specified network to given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'remove_fixed_ip_from_instance'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'params'
op|'='
name|'dict'
op|'('
name|'address'
op|'='
name|'address'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'pause_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'PAUSED'
op|']'
op|')'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'unpause_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_diagnostics
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for the given instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|'"get_diagnostics"'
op|','
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_actions
name|'def'
name|'get_actions'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve actions for the given instance."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_actions'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'suspend_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|']'
op|')'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'resume_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'SHUTOFF'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|','
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|']'
op|')'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'rescue_params'
op|'='
op|'{'
nl|'\n'
string|'"rescue_password"'
op|':'
name|'rescue_password'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'rescue_instance'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'rescue_params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESCUED'
op|']'
op|')'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNRESCUING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'unrescue_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|']'
op|')'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"new_pass"'
op|':'
name|'password'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'set_admin_password'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'file_contents'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the given instance."""'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'path'"
op|':'
name|'path'
op|','
string|"'file_contents'"
op|':'
name|'file_contents'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'inject_file'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to an instance Console."""'
newline|'\n'
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|"'get_vnc_console'"
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'params'
op|'='
op|'{'
string|'"console_type"'
op|':'
name|'console_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
string|"'%s'"
op|'%'
name|'FLAGS'
op|'.'
name|'consoleauth_topic'
op|','
nl|'\n'
op|'{'
string|"'method'"
op|':'
string|"'authorize_console'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'token'"
op|':'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
nl|'\n'
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get console output for an an instance."""'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'tail_length'"
op|':'
name|'tail_length'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|"'get_console_output'"
op|','
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|lock
name|'def'
name|'lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'lock_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|unlock
name|'def'
name|'unlock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'unlock_instance'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_lock
name|'def'
name|'get_lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the boolean state of given instance\'s lock."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'['
string|"'locked'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'reset_network'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the instance."""'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'inject_network_info'"
op|','
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an existing volume to an existing instance."""'
newline|'\n'
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
string|'"^/dev/x{0,1}[a-z]d[a-z]+$"'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'device'
op|')'
newline|'\n'
dedent|''
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'reserve_volume'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"volume_id"'
op|':'
name|'volume_id'
op|','
nl|'\n'
string|'"mountpoint"'
op|':'
name|'device'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'attach_volume'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(comstud): I wonder if API should pull in the instance from'
nl|'\n'
comment|'# the volume ID via volume API and pass it and the volume object here'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'volume_get_instance'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VolumeUnattached'
op|'('
name|'volume_id'
op|'='
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'check_policy'
op|'('
name|'context'
op|','
string|"'detach_volume'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_cast_compute_message'
op|'('
string|"'detach_volume'"
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes calls to network_api to associate_floating_ip.\n\n        :param address: is a string floating ip address\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|"# TODO(tr3buchet): currently network_info doesn't contain floating IPs"
nl|'\n'
comment|'# in its info, if this changes, the next few lines will need to'
nl|'\n'
comment|'# accommodate the info containing floating as well as fixed ip'
nl|'\n'
comment|'# addresses'
nl|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'nw_info'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ips'
op|'='
op|'['
name|'ip'
name|'for'
name|'ip'
name|'in'
name|'nw_info'
op|'['
number|'0'
op|']'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'ips'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(tr3buchet): this will associate the floating IP with the'
nl|'\n'
comment|'# first fixed_ip (lowest id) an instance has. This should be'
nl|'\n'
comment|'# changed to support specifying a particular fixed_ip if'
nl|'\n'
comment|'# multiple exist.'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'ips'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'multiple fixedips exist, using the first: %s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'msg'
op|','
name|'ips'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|'='
name|'address'
op|','
name|'fixed_address'
op|'='
name|'ips'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|get_instance_metadata
name|'def'
name|'get_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all metadata associated with an instance."""'
newline|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_metadata_get'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'rv'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|delete_instance_metadata
name|'def'
name|'delete_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the given metadata item from an instance."""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_metadata_delete'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
DECL|member|update_instance_metadata
name|'def'
name|'update_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates or creates instance metadata.\n\n        If delete is True, metadata items that are not specified in the\n        `metadata` argument will be deleted.\n\n        """'
newline|'\n'
name|'if'
name|'delete'
op|':'
newline|'\n'
indent|'            '
name|'_metadata'
op|'='
name|'metadata'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_metadata'
op|'='
name|'self'
op|'.'
name|'get_instance_metadata'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'_metadata'
op|'.'
name|'update'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_metadata_properties_quota'
op|'('
name|'context'
op|','
name|'_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_metadata_update'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'_metadata'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
name|'_metadata'
newline|'\n'
nl|'\n'
DECL|member|get_instance_faults
dedent|''
name|'def'
name|'get_instance_faults'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all faults for a list of instance uuids."""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'check_policy'
op|'('
name|'context'
op|','
string|"'get_instance_faults'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_fault_get_by_instance_uuids'
op|'('
name|'context'
op|','
name|'uuids'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostAPI
dedent|''
dedent|''
name|'class'
name|'HostAPI'
op|'('
name|'BaseAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sub-set of the Compute Manager API for managing host operations."""'
newline|'\n'
DECL|member|set_host_enabled
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|'"set_host_enabled"'
op|','
name|'context'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
name|'params'
op|'='
op|'{'
string|'"enabled"'
op|':'
name|'enabled'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
comment|'# NOTE(comstud): No instance_uuid argument to this compute manager'
nl|'\n'
comment|'# call'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|'"host_power_action"'
op|','
name|'context'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
name|'params'
op|'='
op|'{'
string|'"action"'
op|':'
name|'action'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_maintenance
dedent|''
name|'def'
name|'set_host_maintenance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start/Stop host maintenance window. On start, it triggers\n        guest VMs evacuation."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_compute_message'
op|'('
string|'"host_maintenance_mode"'
op|','
name|'context'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
name|'params'
op|'='
op|'{'
string|'"host"'
op|':'
name|'host'
op|','
string|'"mode"'
op|':'
name|'mode'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AggregateAPI
dedent|''
dedent|''
name|'class'
name|'AggregateAPI'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sub-set of the Compute Manager API for managing host aggregates."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AggregateAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_aggregate
dedent|''
name|'def'
name|'create_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_name'
op|','
name|'availability_zone'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates the model for the aggregate."""'
newline|'\n'
name|'zones'
op|'='
op|'['
name|'s'
op|'.'
name|'availability_zone'
name|'for'
name|'s'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all_by_topic'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|')'
op|']'
newline|'\n'
name|'if'
name|'availability_zone'
name|'in'
name|'zones'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
op|'{'
string|'"name"'
op|':'
name|'aggregate_name'
op|','
nl|'\n'
string|'"availability_zone"'
op|':'
name|'availability_zone'
op|'}'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'aggregate'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|'('
name|'action'
op|'='
string|"'create_aggregate'"
op|','
nl|'\n'
name|'aggregate_id'
op|'='
string|'"\'N/A\'"'
op|','
nl|'\n'
name|'reason'
op|'='
string|"'invalid zone'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_aggregate
dedent|''
dedent|''
name|'def'
name|'get_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an aggregate by id."""'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'aggregate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_aggregate_list
dedent|''
name|'def'
name|'get_aggregate_list'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all the aggregates for this zone."""'
newline|'\n'
name|'aggregates'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
op|'['
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'a'
op|')'
name|'for'
name|'a'
name|'in'
name|'aggregates'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update_aggregate
dedent|''
name|'def'
name|'update_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the properties of an aggregate."""'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_update'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_aggregate_info'
op|'('
name|'context'
op|','
name|'aggregate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_aggregate_metadata
dedent|''
name|'def'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the aggregate metadata.\n\n        If a key is set to None, it gets removed from the aggregate metadata.\n        """'
newline|'\n'
comment|'# As a first release of the host aggregates blueprint, this call is'
nl|'\n'
comment|'# pretty dumb, in the sense that interacts only with the model.'
nl|'\n'
comment|'# In later releasses, updating metadata may trigger virt actions like'
nl|'\n'
comment|'# the setup of shared storage, or more generally changes to the'
nl|'\n'
comment|'# underlying hypervisor pools.'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'metadata'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'metadata'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_metadata_delete'
op|'('
name|'context'
op|','
nl|'\n'
name|'aggregate_id'
op|','
name|'key'
op|')'
newline|'\n'
name|'metadata'
op|'.'
name|'pop'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'AggregateMetadataNotFound'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'e'
op|'.'
name|'message'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_metadata_add'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_aggregate'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_aggregate
dedent|''
name|'def'
name|'delete_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the aggregate."""'
newline|'\n'
name|'hosts'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_get_all'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'hosts'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|'('
name|'action'
op|'='
string|"'delete'"
op|','
nl|'\n'
name|'aggregate_id'
op|'='
name|'aggregate_id'
op|','
nl|'\n'
name|'reason'
op|'='
string|"'not empty'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_delete'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_host_to_aggregate
dedent|''
name|'def'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the host to an aggregate."""'
newline|'\n'
comment|'# validates the host; ComputeHostNotFound is raised if invalid'
nl|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all_compute_by_host'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# add host, and reflects action in the aggregate operational state'
nl|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'if'
name|'aggregate'
op|'.'
name|'operational_state'
name|'in'
op|'['
name|'aggregate_states'
op|'.'
name|'CREATED'
op|','
nl|'\n'
name|'aggregate_states'
op|'.'
name|'ACTIVE'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'service'
op|'.'
name|'availability_zone'
op|'!='
name|'aggregate'
op|'.'
name|'availability_zone'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|'('
nl|'\n'
name|'action'
op|'='
string|"'add host'"
op|','
nl|'\n'
name|'aggregate_id'
op|'='
name|'aggregate_id'
op|','
nl|'\n'
name|'reason'
op|'='
string|"'availibility zone mismatch'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_add'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|')'
newline|'\n'
name|'if'
name|'aggregate'
op|'.'
name|'operational_state'
op|'=='
name|'aggregate_states'
op|'.'
name|'CREATED'
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'='
op|'{'
string|"'operational_state'"
op|':'
name|'aggregate_states'
op|'.'
name|'CHANGING'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_update'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'values'
op|')'
newline|'\n'
dedent|''
name|'queue'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'service'
op|'.'
name|'topic'
op|','
name|'host'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'queue'
op|','
op|'{'
string|'"method"'
op|':'
string|'"add_aggregate_host"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"aggregate_id"'
op|':'
name|'aggregate_id'
op|','
nl|'\n'
string|'"host"'
op|':'
name|'host'
op|'}'
op|','
op|'}'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_aggregate'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'invalid'
op|'='
op|'{'
name|'aggregate_states'
op|'.'
name|'CHANGING'
op|':'
string|"'setup in progress'"
op|','
nl|'\n'
name|'aggregate_states'
op|'.'
name|'DISMISSED'
op|':'
string|"'aggregate deleted'"
op|','
nl|'\n'
name|'aggregate_states'
op|'.'
name|'ERROR'
op|':'
string|"'aggregate in error'"
op|','
op|'}'
newline|'\n'
name|'if'
name|'aggregate'
op|'.'
name|'operational_state'
name|'in'
name|'invalid'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|'('
nl|'\n'
name|'action'
op|'='
string|"'add host'"
op|','
nl|'\n'
name|'aggregate_id'
op|'='
name|'aggregate_id'
op|','
nl|'\n'
name|'reason'
op|'='
name|'invalid'
op|'['
name|'aggregate'
op|'.'
name|'operational_state'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_host_from_aggregate
dedent|''
dedent|''
dedent|''
name|'def'
name|'remove_host_from_aggregate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes host from the aggregate."""'
newline|'\n'
comment|'# validates the host; ComputeHostNotFound is raised if invalid'
nl|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all_compute_by_host'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
name|'if'
name|'aggregate'
op|'.'
name|'operational_state'
name|'in'
op|'['
name|'aggregate_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'aggregate_states'
op|'.'
name|'ERROR'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_delete'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|','
name|'host'
op|')'
newline|'\n'
name|'queue'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'service'
op|'.'
name|'topic'
op|','
name|'host'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'queue'
op|','
op|'{'
string|'"method"'
op|':'
string|'"remove_aggregate_host"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"aggregate_id"'
op|':'
name|'aggregate_id'
op|','
nl|'\n'
string|'"host"'
op|':'
name|'host'
op|'}'
op|','
op|'}'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_aggregate'
op|'('
name|'context'
op|','
name|'aggregate_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'invalid'
op|'='
op|'{'
name|'aggregate_states'
op|'.'
name|'CREATED'
op|':'
string|"'no hosts to remove'"
op|','
nl|'\n'
name|'aggregate_states'
op|'.'
name|'CHANGING'
op|':'
string|"'setup in progress'"
op|','
nl|'\n'
name|'aggregate_states'
op|'.'
name|'DISMISSED'
op|':'
string|"'aggregate deleted'"
op|','
op|'}'
newline|'\n'
name|'if'
name|'aggregate'
op|'.'
name|'operational_state'
name|'in'
name|'invalid'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|'('
nl|'\n'
name|'action'
op|'='
string|"'remove host'"
op|','
nl|'\n'
name|'aggregate_id'
op|'='
name|'aggregate_id'
op|','
nl|'\n'
name|'reason'
op|'='
name|'invalid'
op|'['
name|'aggregate'
op|'.'
name|'operational_state'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_aggregate_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_aggregate_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'aggregate'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Builds a dictionary with aggregate props, metadata and hosts."""'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_metadata_get'
op|'('
name|'context'
op|','
name|'aggregate'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'hosts'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'aggregate_host_get_all'
op|'('
name|'context'
op|','
name|'aggregate'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'result'
op|'='
name|'dict'
op|'('
name|'aggregate'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'result'
op|'['
string|'"metadata"'
op|']'
op|'='
name|'metadata'
newline|'\n'
name|'result'
op|'['
string|'"hosts"'
op|']'
op|'='
name|'hosts'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

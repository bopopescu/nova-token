begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2010 Anso Labs, LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nDatastore Model objects for Compute Instances, with\nInstanceDirectory manager.\n\n# Create a new instance?\n>>> InstDir = InstanceDirectory()\n>>> inst = InstDir.new()\n>>> inst.destroy()\nTrue\n>>> inst = InstDir[\'i-123\']\n>>> inst[\'ip\'] = "192.168.0.3"\n>>> inst[\'project_id\'] = "projectA"\n>>> inst.save()\nTrue\n\n>>> InstDir[\'i-123\']\n<Instance:i-123>\n>>> InstDir.all.next()\n<Instance:i-123>\n\n>>> inst.destroy()\nTrue\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
name|'import'
name|'redis'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'datastore'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionError
name|'class'
name|'ConnectionError'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|absorb_connection_error
dedent|''
name|'def'
name|'absorb_connection_error'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
DECL|function|_wrapper
indent|'    '
name|'def'
name|'_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fn'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'redis'
op|'.'
name|'exceptions'
op|'.'
name|'ConnectionError'
op|','
name|'ce'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConnectionError'
op|'('
name|'str'
op|'('
name|'ce'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'_wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(todd): Implement this at the class level for Instance'
nl|'\n'
DECL|class|InstanceDirectory
dedent|''
name|'class'
name|'InstanceDirectory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""an api for interacting with the global state of instances"""'
newline|'\n'
nl|'\n'
DECL|member|get
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns an instance object for a given id"""'
newline|'\n'
name|'return'
name|'Instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'item'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|by_project
name|'def'
name|'by_project'
op|'('
name|'self'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns a list of instance objects for a project"""'
newline|'\n'
name|'for'
name|'instance_id'
name|'in'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'smembers'
op|'('
string|"'project:%s:instances'"
op|'%'
name|'project'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'Instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|by_node
dedent|''
dedent|''
name|'def'
name|'by_node'
op|'('
name|'self'
op|','
name|'node_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns a list of instances for a node"""'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'all'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'node_name'"
op|']'
op|'=='
name|'node_id'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|by_ip
dedent|''
dedent|''
dedent|''
name|'def'
name|'by_ip'
op|'('
name|'self'
op|','
name|'ip_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns an instance object that is using the IP"""'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'all'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'private_dns_name'"
op|']'
op|'=='
name|'ip_address'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'instance'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|by_volume
dedent|''
name|'def'
name|'by_volume'
op|'('
name|'self'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns the instance a volume is attached to"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|exists
name|'def'
name|'exists'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'sismember'
op|'('
string|"'instances'"
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|all
name|'def'
name|'all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns a list of all instances"""'
newline|'\n'
name|'for'
name|'instance_id'
name|'in'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'smembers'
op|'('
string|"'instances'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'Instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|new
dedent|''
dedent|''
name|'def'
name|'new'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns an empty Instance object, with ID"""'
newline|'\n'
name|'instance_id'
op|'='
name|'utils'
op|'.'
name|'generate_uid'
op|'('
string|"'i'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|class|BasicModel
dedent|''
dedent|''
name|'class'
name|'BasicModel'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    All Redis-backed data derives from this class.\n\n    You MUST specify an identifier() property that returns a unique string\n    per instance.\n\n    You MUST have an initializer that takes a single argument that is a value\n    returned by identifier() to load a new class with.\n\n    You may want to specify a dictionary for default_state().\n\n    You may also specify override_type at the class left to use a key other\n    than __class__.__name__.\n\n    You override save and destroy calls to automatically build and destroy\n    associations.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|override_type
name|'override_type'
op|'='
name|'None'
newline|'\n'
nl|'\n'
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'initial_state'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
name|'self'
op|'.'
name|'__redis_key'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'initial_state'
op|'='
name|'self'
op|'.'
name|'state'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'default_state'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|default_state
dedent|''
dedent|''
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""You probably want to define this in your subclass"""'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_redis_name
name|'def'
name|'_redis_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'override_type'
name|'or'
name|'cls'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|lookup
name|'def'
name|'lookup'
op|'('
name|'cls'
op|','
name|'identifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
name|'cls'
op|'('
name|'identifier'
op|')'
newline|'\n'
name|'if'
name|'rv'
op|'.'
name|'is_new_record'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|all
name|'def'
name|'all'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""yields all objects in the store"""'
newline|'\n'
name|'redis_set'
op|'='
name|'cls'
op|'.'
name|'_redis_set_name'
op|'('
name|'cls'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'for'
name|'identifier'
name|'in'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'smembers'
op|'('
name|'redis_set'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'cls'
op|'('
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|associated_to
name|'def'
name|'associated_to'
op|'('
name|'cls'
op|','
name|'foreign_type'
op|','
name|'foreign_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'redis_set'
op|'='
name|'cls'
op|'.'
name|'_redis_association_name'
op|'('
name|'foreign_type'
op|','
name|'foreign_id'
op|')'
newline|'\n'
name|'for'
name|'identifier'
name|'in'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'smembers'
op|'('
name|'redis_set'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'cls'
op|'('
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_redis_set_name
name|'def'
name|'_redis_set_name'
op|'('
name|'cls'
op|','
name|'kls_name'
op|')'
op|':'
newline|'\n'
comment|'# stupidly pluralize (for compatiblity with previous codebase)'
nl|'\n'
indent|'        '
name|'return'
name|'kls_name'
op|'.'
name|'lower'
op|'('
op|')'
op|'+'
string|'"s"'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_redis_association_name
name|'def'
name|'_redis_association_name'
op|'('
name|'cls'
op|','
name|'foreign_type'
op|','
name|'foreign_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cls'
op|'.'
name|'_redis_set_name'
op|'('
string|'"%s:%s:%s"'
op|'%'
nl|'\n'
op|'('
name|'foreign_type'
op|','
name|'foreign_id'
op|','
name|'cls'
op|'.'
name|'__name__'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""You DEFINITELY want to define this in your subclass"""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Your sublcass should define identifier"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|__redis_key
name|'def'
name|'__redis_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<%s:%s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copyDict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'copyDict'
op|'['
name|'item'
op|']'
op|'='
name|'self'
op|'['
name|'item'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'copyDict'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'get'
op|'('
name|'item'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'update_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'update'
op|'('
name|'update_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setdefault
dedent|''
name|'def'
name|'setdefault'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'setdefault'
op|'('
name|'item'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'['
name|'item'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'['
name|'item'
op|']'
op|'='
name|'val'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'state'
op|'['
name|'item'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We don\'t support this"""'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
string|'"Silly monkey, models NEED all their properties."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_new_record
dedent|''
name|'def'
name|'is_new_record'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'initial_state'
op|'=='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|add_to_index
name|'def'
name|'add_to_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'set_name'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'_redis_set_name'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'sadd'
op|'('
name|'set_name'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|remove_from_index
name|'def'
name|'remove_from_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'set_name'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'_redis_set_name'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'srem'
op|'('
name|'set_name'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|remove_from_index
name|'def'
name|'remove_from_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'set_name'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'_redis_set_name'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'srem'
op|'('
name|'set_name'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|associate_with
name|'def'
name|'associate_with'
op|'('
name|'self'
op|','
name|'foreign_type'
op|','
name|'foreign_id'
op|')'
op|':'
newline|'\n'
comment|"# note the extra 's' on the end is for plurality"
nl|'\n'
comment|'# to match the old data without requiring a migration of any sort'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'add_associated_model_to_its_set'
op|'('
name|'foreign_type'
op|','
name|'foreign_id'
op|')'
newline|'\n'
name|'redis_set'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'_redis_association_name'
op|'('
name|'foreign_type'
op|','
nl|'\n'
name|'foreign_id'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'sadd'
op|'('
name|'redis_set'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|unassociate_with
name|'def'
name|'unassociate_with'
op|'('
name|'self'
op|','
name|'foreign_type'
op|','
name|'foreign_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'redis_set'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'_redis_association_name'
op|'('
name|'foreign_type'
op|','
nl|'\n'
name|'foreign_id'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'srem'
op|'('
name|'redis_set'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_associated_model_to_its_set
dedent|''
name|'def'
name|'add_associated_model_to_its_set'
op|'('
name|'self'
op|','
name|'my_type'
op|','
name|'my_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'='
name|'globals'
op|'('
op|')'
newline|'\n'
name|'klsname'
op|'='
name|'my_type'
op|'.'
name|'capitalize'
op|'('
op|')'
newline|'\n'
name|'if'
name|'table'
op|'.'
name|'has_key'
op|'('
name|'klsname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'my_class'
op|'='
name|'table'
op|'['
name|'klsname'
op|']'
newline|'\n'
name|'my_inst'
op|'='
name|'my_class'
op|'('
name|'my_id'
op|')'
newline|'\n'
name|'my_inst'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warning'
op|'('
string|'"no model class for %s when building"'
nl|'\n'
string|'" association from %s"'
op|','
nl|'\n'
name|'klsname'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|save
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        update the directory with the state from this model\n        also add it to the index of items of the same type\n        then set the initial_state = state so new changes are tracked\n        """'
newline|'\n'
comment|'# TODO(ja): implement hmset in redis-py and use it'
nl|'\n'
comment|'# instead of multiple calls to hset'
nl|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'self'
op|'.'
name|'state'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# if (not self.initial_state.has_key(key)'
nl|'\n'
comment|'# or self.initial_state[key] != val):'
nl|'\n'
indent|'                '
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hset'
op|'('
name|'self'
op|'.'
name|'__redis_key'
op|','
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'add_to_index'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'initial_state'
op|'='
name|'self'
op|'.'
name|'state'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'absorb_connection_error'
newline|'\n'
DECL|member|destroy
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        deletes all related records from datastore.\n        does NOT do anything to running libvirt state.\n        """'
newline|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|'"Destroying datamodel for %s %s"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'identifier'
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'__redis_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remove_from_index'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Instance
dedent|''
dedent|''
name|'class'
name|'Instance'
op|'('
name|'BasicModel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrapper around stored properties of an instance"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""loads an instance from the datastore if exists"""'
newline|'\n'
comment|'# set instance data before super call since it uses default_state'
nl|'\n'
name|'self'
op|'.'
name|'instance_id'
op|'='
name|'instance_id'
newline|'\n'
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|default_state
dedent|''
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'state'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'pending'"
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'self'
op|'.'
name|'instance_id'
op|','
nl|'\n'
string|"'node_name'"
op|':'
string|"'unassigned'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'unassigned'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
string|"'unassigned'"
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'instance_id'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|project
name|'def'
name|'project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'state'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'get'
op|'('
string|"'owner_id'"
op|','
string|"'unassigned'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|volumes
name|'def'
name|'volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""returns a list of attached volumes"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|reservation
name|'def'
name|'reservation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a reservation object"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call into superclass to save object, then save associations"""'
newline|'\n'
comment|"# NOTE(todd): doesn't track migration between projects,"
nl|'\n'
comment|'#             it just adds the first one'
nl|'\n'
name|'should_update_project'
op|'='
name|'self'
op|'.'
name|'is_new_record'
op|'('
op|')'
newline|'\n'
name|'success'
op|'='
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'if'
name|'success'
name|'and'
name|'should_update_project'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'associate_with'
op|'('
string|'"project"'
op|','
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy associations, then destroy the object"""'
newline|'\n'
name|'self'
op|'.'
name|'unassociate_with'
op|'('
string|'"project"'
op|','
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'Instance'
op|','
name|'self'
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Host
dedent|''
dedent|''
name|'class'
name|'Host'
op|'('
name|'BasicModel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Host is the machine where a Daemon is running.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""loads an instance from the datastore if exists"""'
newline|'\n'
comment|'# set instance data before super call since it uses default_state'
nl|'\n'
name|'self'
op|'.'
name|'hostname'
op|'='
name|'hostname'
newline|'\n'
name|'super'
op|'('
name|'Host'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|default_state
dedent|''
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|'"hostname"'
op|':'
name|'self'
op|'.'
name|'hostname'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'hostname'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Daemon
dedent|''
dedent|''
name|'class'
name|'Daemon'
op|'('
name|'BasicModel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Daemon is a job (compute, api, network, ...) that runs on a host.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host_or_combined'
op|','
name|'binpath'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""loads an instance from the datastore if exists"""'
newline|'\n'
comment|'# set instance data before super call since it uses default_state'
nl|'\n'
comment|'# since loading from datastore expects a combined key that'
nl|'\n'
comment|'# is equivilent to identifier, we need to expect that, while'
nl|'\n'
comment|'# maintaining meaningful semantics (2 arguments) when creating'
nl|'\n'
comment|'# from within other code like the bin/nova-* scripts'
nl|'\n'
name|'if'
name|'binpath'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'hostname'
op|'='
name|'host_or_combined'
newline|'\n'
name|'self'
op|'.'
name|'binary'
op|'='
name|'binpath'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'binary'
op|'='
name|'host_or_combined'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'Daemon'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|default_state
dedent|''
name|'def'
name|'default_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|'"hostname"'
op|':'
name|'self'
op|'.'
name|'hostname'
op|','
nl|'\n'
string|'"binary"'
op|':'
name|'self'
op|'.'
name|'binary'
op|','
nl|'\n'
string|'"updated_at"'
op|':'
name|'utils'
op|'.'
name|'isotime'
op|'('
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|identifier
name|'def'
name|'identifier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s:%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'binary'
op|')'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call into superclass to save object, then save associations"""'
newline|'\n'
comment|'# NOTE(todd): this makes no attempt to destroy itsself,'
nl|'\n'
comment|'#             so after termination a record w/ old timestmap remains'
nl|'\n'
name|'success'
op|'='
name|'super'
op|'('
name|'Daemon'
op|','
name|'self'
op|')'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'if'
name|'success'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'associate_with'
op|'('
string|'"host"'
op|','
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy associations, then destroy the object"""'
newline|'\n'
name|'self'
op|'.'
name|'unassociate_with'
op|'('
string|'"host"'
op|','
name|'self'
op|'.'
name|'hostname'
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'Daemon'
op|','
name|'self'
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|heartbeat
dedent|''
name|'def'
name|'heartbeat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'['
string|"'updated_at'"
op|']'
op|'='
name|'utils'
op|'.'
name|'isotime'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|by_host
name|'def'
name|'by_host'
op|'('
name|'cls'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'x'
name|'in'
name|'cls'
op|'.'
name|'associated_to'
op|'('
string|'"host"'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'x'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'doctest'
newline|'\n'
name|'doctest'
op|'.'
name|'testmod'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright [2010] [Anso Labs, LLC]'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'#    you may not use this file except in compliance with the License.'
nl|'\n'
comment|'#    You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#        http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'#    See the License for the specific language governing permissions and'
nl|'\n'
comment|'#    limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nDatastore Model objects for Compute Instances, with\nInstanceDirectory manager.\n\n# Create a new instance?\n>>> InstDir = InstanceDirectory()\n>>> inst = InstDir.new()\n>>> inst.destroy()\nTrue\n>>> inst = InstDir[\'i-123\']\n>>> inst[\'ip\'] = "192.168.0.3"\n>>> inst[\'project_id\'] = "projectA"\n>>> inst.save()\nTrue\n\n>>> InstDir[\'i-123\']\n<Instance:i-123>\n>>> InstDir.all.next()\n<Instance:i-123>\n\n>>> inst.destroy()\nTrue\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'datastore'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'instances_prefix'"
op|','
string|"'compute-'"
op|','
nl|'\n'
string|"'prefix for keepers for instances'"
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(ja): singleton instance of the directory'
nl|'\n'
DECL|class|InstanceDirectory
name|'class'
name|'InstanceDirectory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""an api for interacting with the global state of instances """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'keeper'
op|'='
name|'datastore'
op|'.'
name|'Keeper'
op|'('
name|'FLAGS'
op|'.'
name|'instances_prefix'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns an instance object for a given id """'
newline|'\n'
name|'return'
name|'Instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'item'
op|')'
newline|'\n'
nl|'\n'
DECL|member|by_project
dedent|''
name|'def'
name|'by_project'
op|'('
name|'self'
op|','
name|'project'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns a list of instance objects for a project """'
newline|'\n'
name|'for'
name|'instance_id'
name|'in'
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'smembers'
op|'('
string|"'project:%s:instances'"
op|'%'
name|'project'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'Instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|by_node
dedent|''
dedent|''
name|'def'
name|'by_node'
op|'('
name|'self'
op|','
name|'node_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns a list of instances for a node """'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'all'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'node_name'"
op|']'
op|'=='
name|'node_id'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|by_ip
dedent|''
dedent|''
dedent|''
name|'def'
name|'by_ip'
op|'('
name|'self'
op|','
name|'ip_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns an instance object that is using the IP """'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'self'
op|'.'
name|'all'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'private_dns_name'"
op|']'
op|'=='
name|'ip_address'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'instance'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|by_volume
dedent|''
name|'def'
name|'by_volume'
op|'('
name|'self'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns the instance a volume is attached to """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|exists
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'set_is_member'
op|'('
string|"'instances'"
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|all
name|'def'
name|'all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns a list of all instances """'
newline|'\n'
name|'for'
name|'instance_id'
name|'in'
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'set_members'
op|'('
string|"'instances'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'Instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|new
dedent|''
dedent|''
name|'def'
name|'new'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns an empty Instance object, with ID """'
newline|'\n'
name|'instance_id'
op|'='
name|'utils'
op|'.'
name|'generate_uid'
op|'('
string|"'i'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get'
op|'('
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Instance
dedent|''
dedent|''
name|'class'
name|'Instance'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Wrapper around stored properties of an instance """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" loads an instance from the datastore if exists """'
newline|'\n'
name|'self'
op|'.'
name|'keeper'
op|'='
name|'datastore'
op|'.'
name|'Keeper'
op|'('
name|'FLAGS'
op|'.'
name|'instances_prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_id'
op|'='
name|'instance_id'
newline|'\n'
name|'self'
op|'.'
name|'initial_state'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'state'
op|'='
name|'self'
op|'.'
name|'keeper'
op|'['
name|'self'
op|'.'
name|'__redis_key'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'initial_state'
op|'='
name|'self'
op|'.'
name|'state'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'state'
op|'='
op|'{'
string|"'state'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'pending'"
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'node_name'"
op|':'
string|"'unassigned'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'unassigned'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
string|"'unassigned'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|__redis_key
name|'def'
name|'__redis_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Magic string for instance keys """'
newline|'\n'
name|'return'
string|"'instance:%s'"
op|'%'
name|'self'
op|'.'
name|'instance_id'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<Instance:%s>"'
op|'%'
name|'self'
op|'.'
name|'instance_id'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copyDict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'copyDict'
op|'['
name|'item'
op|']'
op|'='
name|'self'
op|'['
name|'item'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'copyDict'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'get'
op|'('
name|'item'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'update_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'update'
op|'('
name|'update_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setdefault
dedent|''
name|'def'
name|'setdefault'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'setdefault'
op|'('
name|'item'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'['
name|'item'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'item'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state'
op|'['
name|'item'
op|']'
op|'='
name|'val'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'state'
op|'['
name|'item'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" We don\'t support this """'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
string|'"Silly monkey, Instances NEED all their properties."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" update the directory with the state from this instance\n        make sure you\'ve set the project_id and user_id before you call save\n        for the first time.\n        """'
newline|'\n'
comment|'# TODO(ja): implement hmset in redis-py and use it'
nl|'\n'
comment|'# instead of multiple calls to hset'
nl|'\n'
name|'state'
op|'='
name|'self'
op|'.'
name|'keeper'
op|'['
name|'self'
op|'.'
name|'__redis_key'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'state'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'self'
op|'.'
name|'state'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# if (not self.initial_state.has_key(key)'
nl|'\n'
comment|'# or self.initial_state[key] != val):'
nl|'\n'
indent|'                '
name|'state'
op|'['
name|'key'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'keeper'
op|'['
name|'self'
op|'.'
name|'__redis_key'
op|']'
op|'='
name|'state'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'initial_state'
op|'=='
op|'{'
op|'}'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'set_add'
op|'('
string|"'project:%s:instances'"
op|'%'
name|'self'
op|'.'
name|'project'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'set_add'
op|'('
string|"'instances'"
op|','
name|'self'
op|'.'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'initial_state'
op|'='
name|'self'
op|'.'
name|'state'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|project
name|'def'
name|'project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'state'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'state'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'state'
op|'.'
name|'get'
op|'('
string|"'owner_id'"
op|','
string|"'unassigned'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" deletes all related records from datastore.\n        does NOT do anything to running libvirt state.\n        """'
newline|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|'"Destroying datamodel for instance %s"'
op|','
name|'self'
op|'.'
name|'instance_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'set_remove'
op|'('
string|"'project:%s:instances'"
op|'%'
name|'self'
op|'.'
name|'project'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_id'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'keeper'
op|'['
name|'self'
op|'.'
name|'__redis_key'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'keeper'
op|'.'
name|'set_remove'
op|'('
string|"'instances'"
op|','
name|'self'
op|'.'
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|volumes
name|'def'
name|'volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns a list of attached volumes """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|reservation
name|'def'
name|'reservation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Returns a reservation object """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'doctest'
newline|'\n'
name|'doctest'
op|'.'
name|'testmod'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

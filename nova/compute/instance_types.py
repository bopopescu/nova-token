begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 Ken Pepple'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Built-in instance properties."""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'session'
name|'as'
name|'db_session'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|instance_type_opts
name|'instance_type_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'default_instance_type'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'m1.small'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'default instance type to use, testing only'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'instance_type_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|INVALID_NAME_REGEX
name|'INVALID_NAME_REGEX'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"[^\\w\\.\\- ]"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_int_or_none
name|'def'
name|'_int_or_none'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'val'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|system_metadata_instance_type_props
dedent|''
dedent|''
name|'system_metadata_instance_type_props'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'int'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'str'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'int'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'int'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
name|'int'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
name|'int'
op|','
nl|'\n'
string|"'flavorid'"
op|':'
name|'str'
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'int'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
name|'float'
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'_int_or_none'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create
name|'def'
name|'create'
op|'('
name|'name'
op|','
name|'memory'
op|','
name|'vcpus'
op|','
name|'root_gb'
op|','
name|'ephemeral_gb'
op|'='
name|'None'
op|','
name|'flavorid'
op|'='
name|'None'
op|','
nl|'\n'
name|'swap'
op|'='
name|'None'
op|','
name|'rxtx_factor'
op|'='
name|'None'
op|','
name|'is_public'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Creates instance types."""'
newline|'\n'
nl|'\n'
name|'if'
name|'flavorid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'flavorid'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'swap'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'swap'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'rxtx_factor'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'rxtx_factor'
op|'='
number|'1.0'
newline|'\n'
dedent|''
name|'if'
name|'ephemeral_gb'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ephemeral_gb'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'kwargs'
op|'='
op|'{'
nl|'\n'
string|"'memory_mb'"
op|':'
name|'memory'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'vcpus'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
name|'root_gb'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
name|'ephemeral_gb'
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'swap'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
name|'rxtx_factor'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# ensure name do not exceed 255 characters'
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|'('
name|'name'
op|','
string|"'name'"
op|','
name|'min_length'
op|'='
number|'1'
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure name does not contain any special characters'
nl|'\n'
name|'invalid_name'
op|'='
name|'INVALID_NAME_REGEX'
op|'.'
name|'search'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'invalid_name'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"names can only contain [a-zA-Z0-9_.- ]"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure some attributes are integers and greater than or equal to 0'
nl|'\n'
dedent|''
name|'for'
name|'option'
name|'in'
op|'['
string|"'memory_mb'"
op|','
string|"'vcpus'"
op|','
string|"'root_gb'"
op|','
string|"'ephemeral_gb'"
op|','
string|"'swap'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
name|'option'
op|']'
op|'='
name|'int'
op|'('
name|'kwargs'
op|'['
name|'option'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'kwargs'
op|'['
name|'option'
op|']'
op|'>='
number|'0'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'AssertionError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"\'%s\' argument must be a positive integer"'
op|')'
op|'%'
name|'option'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# rxtx_factor should be a positive float'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
name|'float'
op|'('
name|'kwargs'
op|'['
string|"'rxtx_factor'"
op|']'
op|')'
newline|'\n'
name|'assert'
name|'kwargs'
op|'['
string|"'rxtx_factor'"
op|']'
op|'>'
number|'0'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'AssertionError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"\'rxtx_factor\' argument must be a positive float"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# some value are required to be nonzero, not just positive'
nl|'\n'
dedent|''
name|'for'
name|'option'
name|'in'
op|'['
string|"'memory_mb'"
op|','
string|"'vcpus'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'kwargs'
op|'['
name|'option'
op|']'
op|'>'
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'AssertionError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"\'%s\' argument must be greater than 0"'
op|')'
op|'%'
name|'option'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'kwargs'
op|'['
string|"'name'"
op|']'
op|'='
name|'name'
newline|'\n'
comment|'# NOTE(vish): Internally, flavorid is stored as a string but it comes'
nl|'\n'
comment|'#             in through json as an integer, so we convert it here.'
nl|'\n'
name|'kwargs'
op|'['
string|"'flavorid'"
op|']'
op|'='
name|'unicode'
op|'('
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure is_public attribute is boolean'
nl|'\n'
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_valid_boolstr'
op|'('
name|'is_public'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"is_public must be a boolean"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'kwargs'
op|'['
string|"'is_public'"
op|']'
op|'='
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
name|'is_public'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_type_create'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'db_session'
op|'.'
name|'DBError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'DB error: %s'"
op|')'
op|'%'
name|'e'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeCreateFailed'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|destroy
dedent|''
dedent|''
name|'def'
name|'destroy'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Marks instance types as deleted."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'name'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'db'
op|'.'
name|'instance_type_destroy'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'AssertionError'
op|','
name|'exception'
op|'.'
name|'NotFound'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Instance type %s not found for deletion'"
op|')'
op|'%'
name|'name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InstanceTypeNotFoundByName'
op|'('
name|'instance_type_name'
op|'='
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_all_types
dedent|''
dedent|''
name|'def'
name|'get_all_types'
op|'('
name|'ctxt'
op|'='
name|'None'
op|','
name|'inactive'
op|'='
name|'False'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all non-deleted instance_types.\n\n    Pass true as argument if you want deleted instance types returned also.\n    """'
newline|'\n'
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'inst_types'
op|'='
name|'db'
op|'.'
name|'instance_type_get_all'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'inactive'
op|'='
name|'inactive'
op|','
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
nl|'\n'
name|'inst_type_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'inst_type'
name|'in'
name|'inst_types'
op|':'
newline|'\n'
indent|'        '
name|'inst_type_dict'
op|'['
name|'inst_type'
op|'['
string|"'name'"
op|']'
op|']'
op|'='
name|'inst_type'
newline|'\n'
dedent|''
name|'return'
name|'inst_type_dict'
newline|'\n'
nl|'\n'
DECL|variable|get_all_flavors
dedent|''
name|'get_all_flavors'
op|'='
name|'get_all_types'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_default_instance_type
name|'def'
name|'get_default_instance_type'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the default instance type."""'
newline|'\n'
name|'name'
op|'='
name|'CONF'
op|'.'
name|'default_instance_type'
newline|'\n'
name|'return'
name|'get_instance_type_by_name'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_instance_type
dedent|''
name|'def'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|','
name|'inactive'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieves single instance type by id."""'
newline|'\n'
name|'if'
name|'instance_type_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'inactive'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'ctxt'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'ctxt'
op|','
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_instance_type_by_name
dedent|''
name|'def'
name|'get_instance_type_by_name'
op|'('
name|'name'
op|','
name|'ctxt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieves single instance type by name."""'
newline|'\n'
name|'if'
name|'name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'instance_type_get_by_name'
op|'('
name|'ctxt'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(termie): flavor-specific code should probably be in the API that uses'
nl|'\n'
comment|'#               flavors.'
nl|'\n'
DECL|function|get_instance_type_by_flavor_id
dedent|''
name|'def'
name|'get_instance_type_by_flavor_id'
op|'('
name|'flavorid'
op|','
name|'ctxt'
op|'='
name|'None'
op|','
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieve instance type by flavorid.\n\n    :raises: FlavorNotFound\n    """'
newline|'\n'
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
name|'read_deleted'
op|'='
name|'read_deleted'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'instance_type_get_by_flavor_id'
op|'('
name|'ctxt'
op|','
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_instance_type_access_by_flavor_id
dedent|''
name|'def'
name|'get_instance_type_access_by_flavor_id'
op|'('
name|'flavorid'
op|','
name|'ctxt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieve instance type access list by flavor id."""'
newline|'\n'
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'instance_type_access_get_by_flavor_id'
op|'('
name|'ctxt'
op|','
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|add_instance_type_access
dedent|''
name|'def'
name|'add_instance_type_access'
op|'('
name|'flavorid'
op|','
name|'projectid'
op|','
name|'ctxt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Add instance type access for project."""'
newline|'\n'
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'instance_type_access_add'
op|'('
name|'ctxt'
op|','
name|'flavorid'
op|','
name|'projectid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_instance_type_access
dedent|''
name|'def'
name|'remove_instance_type_access'
op|'('
name|'flavorid'
op|','
name|'projectid'
op|','
name|'ctxt'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove instance type access for project."""'
newline|'\n'
name|'if'
name|'ctxt'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'instance_type_access_remove'
op|'('
name|'ctxt'
op|','
name|'flavorid'
op|','
name|'projectid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|extract_instance_type
dedent|''
name|'def'
name|'extract_instance_type'
op|'('
name|'instance'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create an InstanceType-like object from instance\'s system_metadata\n    information."""'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'type_fn'
name|'in'
name|'system_metadata_instance_type_props'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'type_key'
op|'='
string|"'%sinstance_type_%s'"
op|'%'
op|'('
name|'prefix'
op|','
name|'key'
op|')'
newline|'\n'
name|'instance_type'
op|'['
name|'key'
op|']'
op|'='
name|'type_fn'
op|'('
name|'sys_meta'
op|'['
name|'type_key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instance_type'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|save_instance_type_info
dedent|''
name|'def'
name|'save_instance_type_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Save properties from instance_type into instance\'s system_metadata,\n    in the format of:\n\n      [prefix]instance_type_[key]\n\n    This can be used to update system_metadata in place from a type, as well\n    as stash information about another instance_type for later use (such as\n    during resize)."""'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'system_metadata_instance_type_props'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'to_key'
op|'='
string|"'%sinstance_type_%s'"
op|'%'
op|'('
name|'prefix'
op|','
name|'key'
op|')'
newline|'\n'
name|'metadata'
op|'['
name|'to_key'
op|']'
op|'='
name|'instance_type'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'metadata'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_instance_type_info
dedent|''
name|'def'
name|'delete_instance_type_info'
op|'('
name|'metadata'
op|','
op|'*'
name|'prefixes'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Delete instance_type information from instance\'s system_metadata\n    by prefix."""'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'system_metadata_instance_type_props'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'prefix'
name|'in'
name|'prefixes'
op|':'
newline|'\n'
indent|'            '
name|'to_key'
op|'='
string|"'%sinstance_type_%s'"
op|'%'
op|'('
name|'prefix'
op|','
name|'key'
op|')'
newline|'\n'
name|'del'
name|'metadata'
op|'['
name|'to_key'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'metadata'
newline|'\n'
dedent|''
endmarker|''
end_unit

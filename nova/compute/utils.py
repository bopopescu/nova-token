begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 OpenStack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Compute-related Utilities and helpers."""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'notifications'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'notifier'
name|'import'
name|'api'
name|'as'
name|'notifier_api'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.config'"
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'log'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_to_dict
name|'def'
name|'metadata_to_dict'
op|'('
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'['
name|'item'
op|'['
string|"'key'"
op|']'
op|']'
op|'='
name|'item'
op|'['
string|"'value'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|add_instance_fault_from_exc
dedent|''
name|'def'
name|'add_instance_fault_from_exc'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'fault'
op|','
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Adds the specified fault to the database."""'
newline|'\n'
nl|'\n'
name|'code'
op|'='
number|'500'
newline|'\n'
name|'message'
op|'='
name|'fault'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'fault'
op|','
string|'"kwargs"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'code'
op|'='
name|'fault'
op|'.'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'code'"
op|','
number|'500'
op|')'
newline|'\n'
comment|'# get the message from the exception that was thrown'
nl|'\n'
comment|'# if that does not exist, use the name of the exception class itself'
nl|'\n'
name|'message'
op|'='
name|'fault'
op|'.'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'value'"
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'details'
op|'='
name|'unicode'
op|'('
name|'fault'
op|')'
newline|'\n'
name|'if'
name|'exc_info'
name|'and'
name|'code'
op|'=='
number|'500'
op|':'
newline|'\n'
indent|'        '
name|'tb'
op|'='
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
name|'details'
op|'+='
string|"'\\n'"
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'traceback'
op|'.'
name|'format_tb'
op|'('
name|'tb'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'code'"
op|':'
name|'code'
op|','
nl|'\n'
string|"'message'"
op|':'
name|'unicode'
op|'('
name|'message'
op|')'
op|','
nl|'\n'
string|"'details'"
op|':'
name|'unicode'
op|'('
name|'details'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_fault_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_device_name_for_instance
dedent|''
name|'def'
name|'get_device_name_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Validates (or generates) a device name for instance.\n\n    If device is not set, it will generate a unique device appropriate\n    for the instance. It uses the block device mapping table to find\n    valid device names. If the device name is valid but applicable to\n    a different backend (for example /dev/vdc is specified but the\n    backend uses /dev/xvdc), the device name will be converted to the\n    appropriate format.\n    """'
newline|'\n'
name|'req_prefix'
op|'='
name|'None'
newline|'\n'
name|'req_letters'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'device'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'req_prefix'
op|','
name|'req_letters'
op|'='
name|'block_device'
op|'.'
name|'match_device'
op|'('
name|'device'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'AttributeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'device'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'bdms'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'mappings'
op|'='
name|'block_device'
op|'.'
name|'instance_block_mapping'
op|'('
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
name|'block_device'
op|'.'
name|'match_device'
op|'('
name|'mappings'
op|'['
string|"'root'"
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'AttributeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'mappings'
op|'['
string|"'root'"
op|']'
op|')'
newline|'\n'
comment|'# NOTE(vish): remove this when xenapi is setting default_root_device'
nl|'\n'
dedent|''
name|'if'
name|'driver'
op|'.'
name|'compute_driver_matches'
op|'('
string|"'xenapi.XenAPIDriver'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|'='
string|"'/dev/xvd'"
newline|'\n'
dedent|''
name|'if'
name|'req_prefix'
op|'!='
name|'prefix'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Using %(prefix)s instead of %(req_prefix)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'letters_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'_name'
op|','
name|'device'
name|'in'
name|'mappings'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'letter'
op|'='
name|'block_device'
op|'.'
name|'strip_prefix'
op|'('
name|'device'
op|')'
newline|'\n'
comment|'# NOTE(vish): delete numbers in case we have something like'
nl|'\n'
comment|'#             /dev/sda1'
nl|'\n'
name|'letter'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'"\\d+"'
op|','
string|'""'
op|','
name|'letter'
op|')'
newline|'\n'
name|'letters_list'
op|'.'
name|'append'
op|'('
name|'letter'
op|')'
newline|'\n'
dedent|''
name|'used_letters'
op|'='
name|'set'
op|'('
name|'letters_list'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): remove this when xenapi is properly setting'
nl|'\n'
comment|'#             default_ephemeral_device and default_swap_device'
nl|'\n'
name|'if'
name|'driver'
op|'.'
name|'compute_driver_matches'
op|'('
string|"'xenapi.XenAPIDriver'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
name|'if'
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'used_letters'
op|'.'
name|'update'
op|'('
string|"'b'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|'['
string|"'swap'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'used_letters'
op|'.'
name|'update'
op|'('
string|"'c'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'req_letters'
op|':'
newline|'\n'
indent|'        '
name|'req_letters'
op|'='
name|'_get_unused_letters'
op|'('
name|'used_letters'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'req_letters'
name|'in'
name|'used_letters'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'DevicePathInUse'
op|'('
name|'path'
op|'='
name|'device'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'prefix'
op|'+'
name|'req_letters'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_unused_letters
dedent|''
name|'def'
name|'_get_unused_letters'
op|'('
name|'used_letters'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'doubles'
op|'='
op|'['
name|'first'
op|'+'
name|'second'
name|'for'
name|'second'
name|'in'
name|'string'
op|'.'
name|'ascii_lowercase'
nl|'\n'
name|'for'
name|'first'
name|'in'
name|'string'
op|'.'
name|'ascii_lowercase'
op|']'
newline|'\n'
name|'all_letters'
op|'='
name|'set'
op|'('
name|'list'
op|'('
name|'string'
op|'.'
name|'ascii_lowercase'
op|')'
op|'+'
name|'doubles'
op|')'
newline|'\n'
name|'letters'
op|'='
name|'list'
op|'('
name|'all_letters'
op|'-'
name|'used_letters'
op|')'
newline|'\n'
comment|'# NOTE(vish): prepend ` so all shorter sequences sort first'
nl|'\n'
name|'letters'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'rjust'
op|'('
number|'2'
op|','
string|"'`'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'letters'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|notify_usage_exists
dedent|''
name|'def'
name|'notify_usage_exists'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'current_period'
op|'='
name|'False'
op|','
nl|'\n'
name|'ignore_missing_network_data'
op|'='
name|'True'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'None'
op|','
name|'extra_usage_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates \'exists\' notification for an instance for usage auditing\n    purposes.\n\n    :param current_period: if True, this will generate a usage for the\n        current usage period; if False, this will generate a usage for the\n        previous audit period.\n\n    :param ignore_missing_network_data: if True, log any exceptions generated\n        while getting network info; if False, raise the exception.\n    :param system_metadata: system_metadata DB entries for the instance,\n        if not None.  *NOTE*: Currently unused here in trunk, but needed for\n        potential custom modifications.\n    :param extra_usage_info: Dictionary containing extra values to add or\n        override in the notification if not None.\n    """'
newline|'\n'
nl|'\n'
name|'audit_start'
op|','
name|'audit_end'
op|'='
name|'notifications'
op|'.'
name|'audit_period_bounds'
op|'('
name|'current_period'
op|')'
newline|'\n'
nl|'\n'
name|'bw'
op|'='
name|'notifications'
op|'.'
name|'bandwidth_usage'
op|'('
name|'instance_ref'
op|','
name|'audit_start'
op|','
nl|'\n'
name|'ignore_missing_network_data'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'system_metadata'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'system_metadata'
op|'='
name|'metadata_to_dict'
op|'('
name|'instance_ref'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# add image metadata to the notification:'
nl|'\n'
dedent|''
name|'image_meta'
op|'='
name|'notifications'
op|'.'
name|'image_meta'
op|'('
name|'system_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'extra_info'
op|'='
name|'dict'
op|'('
name|'audit_period_beginning'
op|'='
name|'str'
op|'('
name|'audit_start'
op|')'
op|','
nl|'\n'
name|'audit_period_ending'
op|'='
name|'str'
op|'('
name|'audit_end'
op|')'
op|','
nl|'\n'
name|'bandwidth'
op|'='
name|'bw'
op|','
name|'image_meta'
op|'='
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'extra_usage_info'
op|':'
newline|'\n'
indent|'        '
name|'extra_info'
op|'.'
name|'update'
op|'('
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
string|"'exists'"
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'system_metadata'
op|','
name|'extra_usage_info'
op|'='
name|'extra_info'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|notify_about_instance_usage
dedent|''
name|'def'
name|'notify_about_instance_usage'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'event_suffix'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'None'
op|','
name|'system_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Send a notification about an instance.\n\n    :param event_suffix: Event type like "delete.start" or "exists"\n    :param network_info: Networking information, if provided.\n    :param system_metadata: system_metadata DB entries for the instance,\n        if provided.\n    :param extra_usage_info: Dictionary containing extra values to add or\n        override in the notification.\n    :param host: Compute host for the instance, if specified.  Default is\n        CONF.host\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'extra_usage_info'
op|':'
newline|'\n'
indent|'        '
name|'extra_usage_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'usage_info'
op|'='
name|'notifications'
op|'.'
name|'info_from_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|','
name|'system_metadata'
op|','
op|'**'
name|'extra_usage_info'
op|')'
newline|'\n'
nl|'\n'
name|'notifier_api'
op|'.'
name|'notify'
op|'('
name|'context'
op|','
string|"'compute.%s'"
op|'%'
name|'host'
op|','
nl|'\n'
string|"'compute.instance.%s'"
op|'%'
name|'event_suffix'
op|','
nl|'\n'
name|'notifier_api'
op|'.'
name|'INFO'
op|','
name|'usage_info'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_nw_info_for_instance
dedent|''
name|'def'
name|'get_nw_info_for_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'info_cache'
op|'='
name|'instance'
op|'['
string|"'info_cache'"
op|']'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'cached_nwinfo'
op|'='
name|'info_cache'
op|'.'
name|'get'
op|'('
string|"'network_info'"
op|')'
name|'or'
op|'['
op|']'
newline|'\n'
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
name|'cached_nwinfo'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|has_audit_been_run
dedent|''
name|'def'
name|'has_audit_been_run'
op|'('
name|'context'
op|','
name|'host'
op|','
name|'timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'before'
op|'='
name|'timestamp'
op|')'
newline|'\n'
name|'task_log'
op|'='
name|'db'
op|'.'
name|'task_log_get'
op|'('
name|'context'
op|','
string|'"instance_usage_audit"'
op|','
nl|'\n'
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|')'
newline|'\n'
name|'if'
name|'task_log'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|start_instance_usage_audit
dedent|''
dedent|''
name|'def'
name|'start_instance_usage_audit'
op|'('
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|','
name|'num_instances'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'db'
op|'.'
name|'task_log_begin_task'
op|'('
name|'context'
op|','
string|'"instance_usage_audit"'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|','
nl|'\n'
name|'num_instances'
op|','
string|'"Instance usage audit started..."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|finish_instance_usage_audit
dedent|''
name|'def'
name|'finish_instance_usage_audit'
op|'('
name|'context'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|','
name|'errors'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'db'
op|'.'
name|'task_log_end_task'
op|'('
name|'context'
op|','
string|'"instance_usage_audit"'
op|','
name|'begin'
op|','
name|'end'
op|','
name|'host'
op|','
nl|'\n'
name|'errors'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|usage_volume_info
dedent|''
name|'def'
name|'usage_volume_info'
op|'('
name|'vol_usage'
op|')'
op|':'
newline|'\n'
DECL|function|null_safe_str
indent|'    '
name|'def'
name|'null_safe_str'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'s'
op|')'
name|'if'
name|'s'
name|'else'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'tot_refreshed'
op|'='
name|'vol_usage'
op|'['
string|"'tot_last_refreshed'"
op|']'
newline|'\n'
name|'curr_refreshed'
op|'='
name|'vol_usage'
op|'['
string|"'curr_last_refreshed'"
op|']'
newline|'\n'
name|'last_refreshed_time'
op|'='
op|'('
name|'tot_refreshed'
name|'if'
name|'tot_refreshed'
op|'>'
name|'curr_refreshed'
nl|'\n'
name|'else'
name|'curr_refreshed'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'volume_id'
op|'='
name|'vol_usage'
op|'['
string|"'volume_id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'vol_usage'
op|'['
string|"'instance_id'"
op|']'
op|','
nl|'\n'
name|'last_refreshed'
op|'='
name|'null_safe_str'
op|'('
name|'last_refreshed_time'
op|')'
op|','
nl|'\n'
name|'reads'
op|'='
name|'vol_usage'
op|'['
string|"'tot_reads'"
op|']'
op|'+'
name|'vol_usage'
op|'['
string|"'curr_reads'"
op|']'
op|','
nl|'\n'
name|'read_bytes'
op|'='
name|'vol_usage'
op|'['
string|"'tot_read_bytes'"
op|']'
op|'+'
nl|'\n'
name|'vol_usage'
op|'['
string|"'curr_read_bytes'"
op|']'
op|','
nl|'\n'
name|'writes'
op|'='
name|'vol_usage'
op|'['
string|"'tot_writes'"
op|']'
op|'+'
name|'vol_usage'
op|'['
string|"'curr_writes'"
op|']'
op|','
nl|'\n'
name|'write_bytes'
op|'='
name|'vol_usage'
op|'['
string|"'tot_write_bytes'"
op|']'
op|'+'
nl|'\n'
name|'vol_usage'
op|'['
string|"'curr_write_bytes'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'usage_info'
newline|'\n'
dedent|''
endmarker|''
end_unit

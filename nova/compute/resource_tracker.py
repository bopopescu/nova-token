begin_unit
comment|'# Copyright (c) 2012 OpenStack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTrack resources like memory and disk for a compute host.  Provides the\nscheduler with useful information about availability through the ComputeNode\nmodel.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|resource_tracker_opts
name|'resource_tracker_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'claim_timeout_seconds'"
op|','
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How long, in seconds, before a resource claim times out'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'compute_stats_class'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.compute.stats.Stats'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Class that will manage stats for the local compute host'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'resource_tracker_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|COMPUTE_RESOURCE_SEMAPHORE
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|'='
string|'"compute_resources"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Claim
name|'class'
name|'Claim'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A declaration that a compute host operation will require free resources.\n\n    This information will be used to help keep the local compute hosts\'s\n    ComputeNode model in sync to aid the scheduler in making efficient / more\n    correct decisions with respect to host selection.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'claim_id'
op|','
name|'memory_mb'
op|','
name|'disk_gb'
op|','
name|'timeout'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'claim_id'
op|'='
name|'claim_id'
newline|'\n'
name|'self'
op|'.'
name|'memory_mb'
op|'='
name|'memory_mb'
newline|'\n'
name|'self'
op|'.'
name|'disk_gb'
op|'='
name|'disk_gb'
newline|'\n'
name|'self'
op|'.'
name|'timeout'
op|'='
name|'timeout'
newline|'\n'
name|'self'
op|'.'
name|'expire_ts'
op|'='
name|'timeutils'
op|'.'
name|'utcnow_ts'
op|'('
op|')'
op|'+'
name|'timeout'
newline|'\n'
nl|'\n'
DECL|member|apply_claim
dedent|''
name|'def'
name|'apply_claim'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adjust the resources required from available resources.\n\n        :param resources: Should be a dictionary-like object that\n                          has fields like a compute node\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_apply'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
DECL|member|undo_claim
dedent|''
name|'def'
name|'undo_claim'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_apply'
op|'('
name|'resources'
op|','
name|'sign'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_expired
dedent|''
name|'def'
name|'is_expired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine if this adjustment is old enough that we can assume it\'s\n        no longer needed.\n        """'
newline|'\n'
name|'return'
name|'timeutils'
op|'.'
name|'utcnow_ts'
op|'('
op|')'
op|'>'
name|'self'
op|'.'
name|'expire_ts'
newline|'\n'
nl|'\n'
DECL|member|_apply
dedent|''
name|'def'
name|'_apply'
op|'('
name|'self'
op|','
name|'resources'
op|','
name|'sign'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'values'
op|'['
string|"'memory_mb_used'"
op|']'
op|'='
op|'('
name|'resources'
op|'['
string|"'memory_mb_used'"
op|']'
op|'+'
name|'sign'
op|'*'
nl|'\n'
name|'self'
op|'.'
name|'memory_mb'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'free_ram_mb'"
op|']'
op|'='
op|'('
name|'resources'
op|'['
string|"'free_ram_mb'"
op|']'
op|'-'
name|'sign'
op|'*'
nl|'\n'
name|'self'
op|'.'
name|'memory_mb'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'local_gb_used'"
op|']'
op|'='
op|'('
name|'resources'
op|'['
string|"'local_gb_used'"
op|']'
op|'+'
name|'sign'
op|'*'
nl|'\n'
name|'self'
op|'.'
name|'disk_gb'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'free_disk_gb'"
op|']'
op|'='
op|'('
name|'resources'
op|'['
string|"'free_disk_gb'"
op|']'
op|'-'
name|'sign'
op|'*'
nl|'\n'
name|'self'
op|'.'
name|'disk_gb'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"[Claim %d: %d MB memory, %d GB disk]"'
op|'%'
op|'('
name|'self'
op|'.'
name|'claim_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'memory_mb'
op|','
name|'self'
op|'.'
name|'disk_gb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceContextManager
dedent|''
dedent|''
name|'class'
name|'ResourceContextManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'claim'
op|','
name|'tracker'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
newline|'\n'
name|'self'
op|'.'
name|'claim'
op|'='
name|'claim'
newline|'\n'
name|'self'
op|'.'
name|'tracker'
op|'='
name|'tracker'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'claim'
name|'and'
name|'not'
name|'self'
op|'.'
name|'tracker'
op|'.'
name|'disabled'
op|':'
newline|'\n'
comment|'# insufficient resources to complete request'
nl|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_val'
op|','
name|'exc_tb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'claim'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'exc_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tracker'
op|'.'
name|'finish_resource_claim'
op|'('
name|'self'
op|'.'
name|'claim'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tracker'
op|'.'
name|'abort_resource_claim'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'claim'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceTracker
dedent|''
dedent|''
dedent|''
name|'class'
name|'ResourceTracker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compute helper class for keeping track of resource usage as instances\n    are built and destroyed.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'driver'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'next_claim_id'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'claims'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'stats'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'compute_stats_class'
op|')'
newline|'\n'
nl|'\n'
DECL|member|resource_claim
dedent|''
name|'def'
name|'resource_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'claim'
op|'='
name|'self'
op|'.'
name|'begin_resource_claim'
op|'('
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'ResourceContextManager'
op|'('
name|'context'
op|','
name|'claim'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_resource_claim
dedent|''
name|'def'
name|'instance_resource_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'claim'
op|'='
name|'self'
op|'.'
name|'begin_instance_resource_claim'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'ResourceContextManager'
op|'('
name|'context'
op|','
name|'claim'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|begin_instance_resource_claim
name|'def'
name|'begin_instance_resource_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Method to begin a resource claim for a new instance."""'
newline|'\n'
name|'memory_mb'
op|'='
name|'instance_ref'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'disk_gb'
op|'='
name|'instance_ref'
op|'['
string|"'root_gb'"
op|']'
op|'+'
name|'instance_ref'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'claim'
op|'='
name|'self'
op|'.'
name|'_do_begin_resource_claim'
op|'('
name|'context'
op|','
name|'memory_mb'
op|','
name|'disk_gb'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'claim'
op|':'
newline|'\n'
comment|'# also update load stats related to new instances firing up -'
nl|'\n'
indent|'            '
name|'values'
op|'='
name|'self'
op|'.'
name|'_create_load_stats'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'claim'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|begin_resource_claim
name|'def'
name|'begin_resource_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'memory_mb'
op|','
name|'disk_gb'
op|','
nl|'\n'
name|'memory_mb_limit'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that some resources are needed for an upcoming compute\n        host operation.\n\n        This should be called any time the compute node is about to perform\n        an operation that will consume resources.\n\n        :param memory_mb: security context\n        :param memory_mb: Memory in MB to be claimed\n        :param root_gb: Disk in GB to be claimed\n        :param memory_mb_limit: Memory in MB that is the maximum to allocate on\n                        this node.  May exceed installed physical memory if\n                        oversubscription is the desired behavior.\n        :param timeout: How long, in seconds, the operation that requires\n                        these resources should take to actually allocate what\n                        it needs from the hypervisor.  If the timeout is\n                        exceeded, the new resource claim will assume caller\n                        before releasing the resources.\n        :returns: An integer \'claim ticket\'.  This should be turned into\n                  finalize  a resource claim or free resources after the\n                  compute operation is finished. Returns None if the claim\n                  failed.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_do_begin_resource_claim'
op|'('
name|'context'
op|','
name|'memory_mb'
op|','
name|'disk_gb'
op|','
nl|'\n'
name|'memory_mb_limit'
op|','
name|'timeout'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_begin_resource_claim
dedent|''
name|'def'
name|'_do_begin_resource_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'memory_mb'
op|','
name|'disk_gb'
op|','
nl|'\n'
name|'memory_mb_limit'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'timeout'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
name|'FLAGS'
op|'.'
name|'claim_timeout_seconds'
newline|'\n'
nl|'\n'
dedent|''
name|'memory_mb'
op|'='
name|'abs'
op|'('
name|'memory_mb'
op|')'
newline|'\n'
name|'disk_gb'
op|'='
name|'abs'
op|'('
name|'disk_gb'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Attempting claim: memory %(memory_mb)d MB, disk %(disk_gb)d "'
nl|'\n'
string|'"GB, mem limit %(memory_mb_limit)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'memory_mb_limit'
op|':'
newline|'\n'
comment|'# default to total memory:'
nl|'\n'
indent|'            '
name|'memory_mb_limit'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'free_ram_mb'
op|'='
name|'memory_mb_limit'
op|'-'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Installed memory and usage info:'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Total memory: %(total_mem)d MB, used: %(used_mem)d MB, free: "'
nl|'\n'
string|'"%(free_mem)d"'
op|')'
op|'%'
name|'dict'
op|'('
nl|'\n'
name|'total_mem'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
name|'used_mem'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|','
nl|'\n'
name|'free_mem'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# Oversubscribed memory policy info:'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Limit: %(memory_mb_limit)d MB, free: %(free_ram_mb)d"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'memory_mb'
op|'>'
name|'free_ram_mb'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Unable to claim resources.  Free memory %(free_ram_mb)d "'
nl|'\n'
string|'"MB < requested memory %(memory_mb)d MB"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'disk_gb'
op|'>'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'free_disk_gb'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Unable to claim resources.  Free disk %(free_disk_gb)d GB"'
nl|'\n'
string|'" < requested disk %(disk_gb)d GB"'
op|')'
op|'%'
name|'dict'
op|'('
nl|'\n'
name|'free_disk_gb'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'free_disk_gb'"
op|']'
op|','
nl|'\n'
name|'disk_gb'
op|'='
name|'disk_gb'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'claim_id'
op|'='
name|'self'
op|'.'
name|'_get_next_id'
op|'('
op|')'
newline|'\n'
name|'c'
op|'='
name|'Claim'
op|'('
name|'claim_id'
op|','
name|'memory_mb'
op|','
name|'disk_gb'
op|','
name|'timeout'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# adjust compute node usage values and save so scheduler will see it:'
nl|'\n'
name|'values'
op|'='
name|'c'
op|'.'
name|'apply_claim'
op|'('
name|'self'
op|'.'
name|'compute_node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
comment|'# keep track of this claim until we know whether the compute operation'
nl|'\n'
comment|'# was successful/completed:'
nl|'\n'
name|'self'
op|'.'
name|'claims'
op|'['
name|'claim_id'
op|']'
op|'='
name|'c'
newline|'\n'
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|member|finish_resource_claim
dedent|''
name|'def'
name|'finish_resource_claim'
op|'('
name|'self'
op|','
name|'claim'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that the compute operation that previously claimed the\n        resources identified by \'claim\' has now completed and the resources\n        have been allocated at the virt layer.\n\n        Calling this keeps the available resource data more accurate and\n        timely than letting the claim timeout elapse and waiting for\n        update_available_resource to reflect the changed usage data.\n\n        :param claim: A claim indicating a set of resources that were\n                      previously claimed.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'claims'
op|'.'
name|'pop'
op|'('
name|'claim'
op|'.'
name|'claim_id'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Finishing claim: %s"'
op|')'
op|'%'
name|'claim'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Can\'t find claim %d.  It may have been \'finished\' "'
nl|'\n'
string|'"twice, or it has already timed out."'
op|')'
op|','
name|'claim'
op|'.'
name|'claim_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|abort_resource_claim
name|'def'
name|'abort_resource_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'claim'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that the operation that claimed the resources identified by\n        \'claim_id\' has either failed or been aborted and the resources are no\n        longer needed.\n\n        :param claim: A claim ticket indicating a set of resources that were\n                      previously claimed.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# un-claim the resources:'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'claims'
op|'.'
name|'pop'
op|'('
name|'claim'
op|'.'
name|'claim_id'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Aborting claim: %s"'
op|')'
op|'%'
name|'claim'
op|')'
newline|'\n'
name|'values'
op|'='
name|'claim'
op|'.'
name|'undo_claim'
op|'('
name|'self'
op|'.'
name|'compute_node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# can't find the claim.  this may mean the claim already timed"
nl|'\n'
comment|'# out or it was already explicitly finished/aborted.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Claim %d not found.  It either timed out or was "'
nl|'\n'
string|'"already explicitly finished/aborted"'
op|')'
op|','
name|'claim'
op|'.'
name|'claim_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|disabled
name|'def'
name|'disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'compute_node'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|free_resources
dedent|''
name|'def'
name|'free_resources'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A compute operation finished freeing up resources.  Update compute\n        model to reflect updated resource usage.\n\n        (The hypervisor may not immediately \'GC\' all resources, so ask directly\n        to see what\'s available to update the compute node model.)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'update_available_resource'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|update_available_resource
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override in-memory calculations of compute node resource usage based\n        on data audited from the hypervisor layer.\n\n        Add in resource claims in progress to account for operations that have\n        declared a need for resources, but not necessarily retrieved them from\n        the hypervisor layer yet.\n        """'
newline|'\n'
comment|'# ask hypervisor for its view of resource availability &'
nl|'\n'
comment|'# usage:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'resources'
op|':'
newline|'\n'
comment|'# The virt driver does not support this function'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Virt driver does not support "'
nl|'\n'
string|'"\'get_available_resource\'  Compute tracking is disabled."'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'claims'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# Confirm resources dictionary contains expected keys:'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
name|'resources'
op|'['
string|"'free_ram_mb'"
op|']'
op|'='
name|'resources'
op|'['
string|"'memory_mb'"
op|']'
op|'-'
name|'resources'
op|'['
string|"'memory_mb_used'"
op|']'
newline|'\n'
name|'resources'
op|'['
string|"'free_disk_gb'"
op|']'
op|'='
name|'resources'
op|'['
string|"'local_gb'"
op|']'
op|'-'
name|'resources'
op|'['
string|"'local_gb_used'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"free_ram_mb: %s"'
op|')'
op|'%'
name|'resources'
op|'['
string|"'free_ram_mb'"
op|']'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"free_disk_gb: %s"'
op|')'
op|'%'
name|'resources'
op|'['
string|"'free_disk_gb'"
op|']'
op|')'
newline|'\n'
comment|'# Apply resource claims representing in-progress operations to'
nl|'\n'
comment|"# 'resources'. This may over-estimate the amount of resources in use,"
nl|'\n'
comment|"# at least until the next time 'update_available_resource' runs."
nl|'\n'
name|'self'
op|'.'
name|'_apply_claims'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
comment|'# also generate all load stats:'
nl|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'_create_load_stats'
op|'('
name|'context'
op|')'
newline|'\n'
name|'resources'
op|'.'
name|'update'
op|'('
name|'values'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'compute_node'
op|':'
newline|'\n'
comment|'# we need a copy of the ComputeNode record:'
nl|'\n'
indent|'            '
name|'service'
op|'='
name|'self'
op|'.'
name|'_get_service'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'service'
op|':'
newline|'\n'
comment|'# no service record, disable resource'
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'compute_node_ref'
op|'='
name|'service'
op|'['
string|"'compute_node'"
op|']'
newline|'\n'
name|'if'
name|'compute_node_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'compute_node_ref'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'compute_node'
op|':'
newline|'\n'
comment|'# Need to create the ComputeNode record:'
nl|'\n'
indent|'            '
name|'resources'
op|'['
string|"'service_id'"
op|']'
op|'='
name|'service'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_create'
op|'('
name|'context'
op|','
name|'resources'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record created for %s '"
op|')'
op|'%'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# just update the record:'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|','
name|'resources'
op|','
nl|'\n'
name|'prune_stats'
op|'='
name|'True'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Compute_service record updated for %s '"
op|')'
op|'%'
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|update_load_stats_for_instance
name|'def'
name|'update_load_stats_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'old_ref'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update workload stats for the local compute host."""'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'stats'
op|'.'
name|'update_stats_for_instance'
op|'('
name|'old_ref'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'stats'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
newline|'\n'
nl|'\n'
name|'values'
op|'['
string|"'current_workload'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'calculate_workload'
op|'('
op|')'
newline|'\n'
name|'values'
op|'['
string|"'running_vms'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'num_instances'
newline|'\n'
name|'values'
op|'['
string|"'vcpus_used'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'num_vcpus_used'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_apply_claims
dedent|''
name|'def'
name|'_apply_claims'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply in-progress resource claims to the \'resources\' dict from the\n        virt layer\n        """'
newline|'\n'
name|'for'
name|'claim_id'
name|'in'
name|'self'
op|'.'
name|'claims'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'claims'
op|'['
name|'claim_id'
op|']'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'is_expired'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# if this claim is expired, just expunge it'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Expiring resource claim %d"'
op|')'
op|','
name|'claim_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'claims'
op|'.'
name|'pop'
op|'('
name|'claim_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'values'
op|'='
name|'c'
op|'.'
name|'apply_claim'
op|'('
name|'resources'
op|')'
newline|'\n'
name|'resources'
op|'.'
name|'update'
op|'('
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create the compute node in the DB"""'
newline|'\n'
comment|'# initialize load stats from existing instances:'
nl|'\n'
name|'compute_node'
op|'='
name|'db'
op|'.'
name|'compute_node_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'compute_node'
newline|'\n'
nl|'\n'
DECL|member|_create_load_stats
dedent|''
name|'def'
name|'_create_load_stats'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""For each existing instance generate load stats for the compute\n        node record.\n        """'
newline|'\n'
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
op|'['
name|'instance'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stats'
op|'.'
name|'clear'
op|'('
op|')'
comment|'# re-generating all, so clear old stats'
newline|'\n'
nl|'\n'
comment|'# grab all instances that are not yet DELETED'
nl|'\n'
name|'filters'
op|'='
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'deleted'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stats'
op|'.'
name|'add_stats_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'current_workload'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'calculate_workload'
op|'('
op|')'
newline|'\n'
name|'values'
op|'['
string|"'running_vms'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'num_instances'
newline|'\n'
name|'values'
op|'['
string|"'vcpus_used'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'num_vcpus_used'
newline|'\n'
name|'values'
op|'['
string|"'stats'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
newline|'\n'
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|_get_next_id
dedent|''
name|'def'
name|'_get_next_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'next_id'
op|'='
name|'self'
op|'.'
name|'next_claim_id'
newline|'\n'
name|'self'
op|'.'
name|'next_claim_id'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'next_id'
newline|'\n'
nl|'\n'
DECL|member|_get_service
dedent|''
name|'def'
name|'_get_service'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'db'
op|'.'
name|'service_get_all_compute_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"No service record for host %s"'
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update
dedent|''
dedent|''
name|'def'
name|'_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'values'
op|','
name|'prune_stats'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Persist the compute node updates to the DB"""'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'compute_node_update'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'values'
op|','
name|'prune_stats'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_verify_resources
dedent|''
name|'def'
name|'_verify_resources'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource_keys'
op|'='
op|'['
string|'"vcpus"'
op|','
string|'"memory_mb"'
op|','
string|'"local_gb"'
op|','
string|'"cpu_info"'
op|','
nl|'\n'
string|'"vcpus_used"'
op|','
string|'"memory_mb_used"'
op|','
string|'"local_gb_used"'
op|']'
newline|'\n'
nl|'\n'
name|'missing_keys'
op|'='
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'resource_keys'
name|'if'
name|'k'
name|'not'
name|'in'
name|'resources'
op|']'
newline|'\n'
name|'if'
name|'missing_keys'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Missing keys: %s"'
op|')'
op|'%'
name|'missing_keys'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

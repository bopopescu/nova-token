begin_unit
comment|'# Copyright (c) 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTrack resources like memory and disk for a compute host.  Provides the\nscheduler with useful information about availability through the ComputeNode\nmodel.\n"""'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'importutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'claims'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'monitors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'resources'
name|'as'
name|'ext_resources'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'conductor'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LI'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'pci'
name|'import'
name|'manager'
name|'as'
name|'pci_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'pci'
name|'import'
name|'whitelist'
name|'as'
name|'pci_whitelist'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'client'
name|'as'
name|'scheduler_client'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
nl|'\n'
DECL|variable|resource_tracker_opts
name|'resource_tracker_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'reserved_host_disk_mb'"
op|','
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Amount of disk in MB to reserve for the host'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'reserved_host_memory_mb'"
op|','
name|'default'
op|'='
number|'512'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Amount of memory in MB to reserve for the host'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'compute_stats_class'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.compute.stats.Stats'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Class that will manage stats for the local compute host'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'compute_resources'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'vcpu'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The names of the extra resources to track.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'resource_tracker_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|COMPUTE_RESOURCE_SEMAPHORE
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|'='
string|'"compute_resources"'
newline|'\n'
nl|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceTracker
name|'class'
name|'ResourceTracker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compute helper class for keeping track of resource usage as instances\n    are built and destroyed.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'driver'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'driver'
newline|'\n'
name|'self'
op|'.'
name|'pci_tracker'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'pci_filter'
op|'='
name|'pci_whitelist'
op|'.'
name|'get_pci_devices_filter'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nodename'
op|'='
name|'nodename'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'stats'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'CONF'
op|'.'
name|'compute_stats_class'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tracked_instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'tracked_migrations'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'='
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'monitor_handler'
op|'='
name|'monitors'
op|'.'
name|'ResourceMonitorHandler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'monitors'
op|'='
name|'monitor_handler'
op|'.'
name|'choose_monitors'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ext_resources_handler'
op|'='
name|'ext_resources'
op|'.'
name|'ResourceHandler'
op|'('
name|'CONF'
op|'.'
name|'compute_resources'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'old_resources'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_client'
op|'='
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|instance_claim
name|'def'
name|'instance_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that some resources are needed for an upcoming compute\n        instance build operation.\n\n        This should be called before the compute node is about to perform\n        an instance build operation that will consume additional resources.\n\n        :param context: security context\n        :param instance_ref: instance to reserve resources for\n        :param limits: Dict of oversubscription limits for memory, disk,\n                       and CPUs.\n        :returns: A Claim ticket representing the reserved resources.  It can\n                  be used to revert the resource usage if an error occurs\n                  during the instance build.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
comment|"# compute_driver doesn't support resource tracking, just"
nl|'\n'
comment|"# set the 'host' and node fields and continue the build:"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_instance_host_and_node'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'return'
name|'claims'
op|'.'
name|'NopClaim'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# sanity checks:'
nl|'\n'
dedent|''
name|'if'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Host field should not be set on the instance "'
nl|'\n'
string|'"until resources have been claimed."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'instance_ref'
op|'['
string|"'node'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Node field should not be set on the instance "'
nl|'\n'
string|'"until resources have been claimed."'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# get memory overhead required to build this instance:'
nl|'\n'
dedent|''
name|'overhead'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'estimate_instance_overhead'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Memory overhead for %(flavor)d MB instance; %(overhead)d "'
nl|'\n'
string|'"MB"'
op|','
op|'{'
string|"'flavor'"
op|':'
name|'instance_ref'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
string|"'overhead'"
op|':'
name|'overhead'
op|'['
string|"'memory_mb'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'claim'
op|'='
name|'claims'
op|'.'
name|'Claim'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'self'
op|','
name|'self'
op|'.'
name|'compute_node'
op|','
nl|'\n'
name|'overhead'
op|'='
name|'overhead'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_set_instance_host_and_node'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'instance_ref'
op|'['
string|"'numa_topology'"
op|']'
op|'='
name|'claim'
op|'.'
name|'claimed_numa_topology'
newline|'\n'
nl|'\n'
comment|'# Mark resources in-use and update stats'
nl|'\n'
name|'self'
op|'.'
name|'_update_usage_from_instance'
op|'('
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
comment|'# persist changes to the compute node:'
nl|'\n'
name|'self'
op|'.'
name|'_update'
op|'('
name|'elevated'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'claim'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|resize_claim
name|'def'
name|'resize_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_meta'
op|'='
name|'None'
op|','
name|'limits'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicate that resources are needed for a resize operation to this\n        compute host.\n        :param context: security context\n        :param instance: instance object to reserve resources for\n        :param instance_type: new instance_type being resized to\n        :param limits: Dict of oversubscription limits for memory, disk,\n        and CPUs\n        :returns: A Claim ticket representing the reserved resources.  This\n        should be turned into finalize  a resource claim or free\n        resources after the compute operation is finished.\n        """'
newline|'\n'
name|'image_meta'
op|'='
name|'image_meta'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
comment|"# compute_driver doesn't support resource tracking, just"
nl|'\n'
comment|'# generate the migration record and continue the resize:'
nl|'\n'
indent|'            '
name|'migration'
op|'='
name|'self'
op|'.'
name|'_create_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
name|'return'
name|'claims'
op|'.'
name|'NopClaim'
op|'('
name|'migration'
op|'='
name|'migration'
op|')'
newline|'\n'
nl|'\n'
comment|'# get memory overhead required to build this instance:'
nl|'\n'
dedent|''
name|'overhead'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'estimate_instance_overhead'
op|'('
name|'instance_type'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Memory overhead for %(flavor)d MB instance; %(overhead)d "'
nl|'\n'
string|'"MB"'
op|','
op|'{'
string|"'flavor'"
op|':'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
string|"'overhead'"
op|':'
name|'overhead'
op|'['
string|"'memory_mb'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'instance_obj'
op|'.'
name|'compat_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'claim'
op|'='
name|'claims'
op|'.'
name|'ResizeClaim'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'self'
op|','
name|'self'
op|'.'
name|'compute_node'
op|','
nl|'\n'
name|'overhead'
op|'='
name|'overhead'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'self'
op|'.'
name|'_create_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
name|'claim'
op|'.'
name|'migration'
op|'='
name|'migration'
newline|'\n'
nl|'\n'
comment|'# Mark the resources in-use for the resize landing on this'
nl|'\n'
comment|'# compute host:'
nl|'\n'
name|'self'
op|'.'
name|'_update_usage_from_migration'
op|'('
name|'context'
op|','
name|'instance_ref'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update'
op|'('
name|'elevated'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'claim'
newline|'\n'
nl|'\n'
DECL|member|_create_migration
dedent|''
name|'def'
name|'_create_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a migration record for the upcoming resize.  This should\n        be done while the COMPUTE_RESOURCES_SEMAPHORE is held so the resource\n        claim will not be lost if the audit process starts.\n        """'
newline|'\n'
name|'old_instance_type'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'context'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'dest_compute'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'migration'
op|'.'
name|'dest_node'
op|'='
name|'self'
op|'.'
name|'nodename'
newline|'\n'
name|'migration'
op|'.'
name|'dest_host'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'old_instance_type_id'
op|'='
name|'old_instance_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'migration'
op|'.'
name|'new_instance_type_id'
op|'='
name|'instance_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'pre-migrating'"
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'migration'
op|'.'
name|'source_compute'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'migration'
op|'.'
name|'source_node'
op|'='
name|'instance'
op|'['
string|"'node'"
op|']'
newline|'\n'
name|'migration'
op|'.'
name|'migration_type'
op|'='
op|'('
nl|'\n'
name|'migration'
op|'.'
name|'old_instance_type_id'
op|'!='
name|'migration'
op|'.'
name|'new_instance_type_id'
nl|'\n'
name|'and'
string|"'resize'"
name|'or'
string|"'migration'"
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'return'
name|'migration'
newline|'\n'
nl|'\n'
DECL|member|_set_instance_host_and_node
dedent|''
name|'def'
name|'_set_instance_host_and_node'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tag the instance as belonging to this host.  This should be done\n        while the COMPUTE_RESOURCES_SEMAPHORE is held so the resource claim\n        will not be lost if the audit process starts.\n        """'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|','
nl|'\n'
string|"'launched_on'"
op|':'
name|'self'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'**'
name|'values'
op|')'
newline|'\n'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'instance_ref'
op|'['
string|"'launched_on'"
op|']'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'instance_ref'
op|'['
string|"'node'"
op|']'
op|'='
name|'self'
op|'.'
name|'nodename'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|abort_instance_claim
name|'def'
name|'abort_instance_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove usage from the given instance."""'
newline|'\n'
comment|'# flag the instance as deleted to revert the resource usage'
nl|'\n'
comment|'# and associated stats:'
nl|'\n'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'self'
op|'.'
name|'_update_usage_from_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|drop_resize_claim
name|'def'
name|'drop_resize_claim'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'image_meta'
op|'='
name|'None'
op|','
name|'prefix'
op|'='
string|"'new_'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove usage for an incoming/outgoing migration."""'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'self'
op|'.'
name|'tracked_migrations'
op|':'
newline|'\n'
indent|'            '
name|'migration'
op|','
name|'itype'
op|'='
name|'self'
op|'.'
name|'tracked_migrations'
op|'.'
name|'pop'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'instance_type'
op|':'
newline|'\n'
indent|'                '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'self'
op|'.'
name|'_get_instance_type'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_meta'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
nl|'\n'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance_type'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|'=='
name|'itype'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'numa_topology'
op|'='
name|'hardware'
op|'.'
name|'numa_get_constraints'
op|'('
nl|'\n'
name|'itype'
op|','
name|'image_meta'
op|')'
newline|'\n'
name|'usage'
op|'='
name|'self'
op|'.'
name|'_get_usage_dict'
op|'('
nl|'\n'
name|'itype'
op|','
name|'numa_topology'
op|'='
name|'numa_topology'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'update_pci_for_migration'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'sign'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_usage'
op|'('
name|'usage'
op|','
name|'sign'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|update_usage
name|'def'
name|'update_usage'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the resource usage and stats after a change in an\n        instance\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|"# don't update usage for this instance unless it submitted a resource"
nl|'\n'
comment|'# claim first:'
nl|'\n'
name|'if'
name|'uuid'
name|'in'
name|'self'
op|'.'
name|'tracked_instances'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_usage_from_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|disabled
name|'def'
name|'disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'compute_node'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_init_compute_node
dedent|''
name|'def'
name|'_init_compute_node'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialise the compute node if it does not already exist.\n\n        The resource tracker will be inoperable if compute_node\n        is not defined. The compute_node will remain undefined if\n        we fail to create it or if there is no associated service\n        registered.\n\n        If this method has to create a compute node it needs initial\n        values - these come from resources.\n\n        :param context: security context\n        :param resources: initial values\n        """'
newline|'\n'
nl|'\n'
comment|'# if there is already a compute node just use resources'
nl|'\n'
comment|'# to initialize'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'compute_node'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_copy_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# TODO(pmurray): this lookup should be removed when the service_id'
nl|'\n'
comment|'# field in the compute node goes away. At the moment it is deprecated'
nl|'\n'
comment|'# but still a required field, so it has to be assigned below.'
nl|'\n'
dedent|''
name|'service'
op|'='
name|'self'
op|'.'
name|'_get_service'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'service'
op|':'
newline|'\n'
comment|'# no service record, disable resource'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# now try to get the compute node record from the'
nl|'\n'
comment|'# database. If we get one we use resources to initialize'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'_get_compute_node'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'compute_node'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_copy_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# there was no local copy and none in the database'
nl|'\n'
comment|'# so we need to create a new compute node. This needs'
nl|'\n'
comment|'# initial values for the database.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# TODO(pmurray) this section will be cleaned up when we'
nl|'\n'
comment|'# use the ComputeNode object. Here it is the conductor call'
nl|'\n'
comment|'# to compute_node_create() that sets up the compute_node'
nl|'\n'
comment|'# dict. That will change to create the compute_node, initialize'
nl|'\n'
comment|'# it and then save.'
nl|'\n'
dedent|''
name|'cn'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'cn'
op|'.'
name|'update'
op|'('
name|'resources'
op|')'
newline|'\n'
comment|'# TODO(pmurray) service_id is deprecated but is still a required field.'
nl|'\n'
comment|'# This should be removed when the field is changed.'
nl|'\n'
name|'cn'
op|'['
string|"'service_id'"
op|']'
op|'='
name|'service'
op|'.'
name|'id'
newline|'\n'
name|'cn'
op|'['
string|"'host'"
op|']'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
comment|'# initialize load stats from existing instances:'
nl|'\n'
name|'self'
op|'.'
name|'_write_ext_resources'
op|'('
name|'cn'
op|')'
newline|'\n'
comment|'# NOTE(pmurray): the stats field is stored as a json string. The'
nl|'\n'
comment|'# json conversion will be done automatically by the ComputeNode object'
nl|'\n'
comment|'# so this can be removed when using ComputeNode.'
nl|'\n'
name|'cn'
op|'['
string|"'stats'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'cn'
op|'['
string|"'stats'"
op|']'
op|')'
newline|'\n'
comment|'# pci_passthrough_devices may be in resources but are not'
nl|'\n'
comment|'# stored in compute nodes'
nl|'\n'
name|'cn'
op|'.'
name|'pop'
op|'('
string|"'pci_passthrough_devices'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'conductor_api'
op|'.'
name|'compute_node_create'
op|'('
name|'context'
op|','
name|'cn'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Compute_service record created for '"
nl|'\n'
string|"'%(host)s:%(node)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# now we have created a compute node we can copy resources'
nl|'\n'
comment|'# NOTE(pmurray): this has an unnecessary copy until the above'
nl|'\n'
comment|'# is cleaned up.'
nl|'\n'
name|'self'
op|'.'
name|'_copy_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_copy_resources
dedent|''
name|'def'
name|'_copy_resources'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Copy resource values to initialise compute_node and related\n        data structures.\n        """'
newline|'\n'
comment|'# purge old stats and init with anything passed in by the driver'
nl|'\n'
name|'self'
op|'.'
name|'stats'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stats'
op|'.'
name|'digest_stats'
op|'('
name|'resources'
op|'.'
name|'get'
op|'('
string|"'stats'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# now copy reset to compute_node'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'.'
name|'update'
op|'('
name|'resources'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'.'
name|'pop'
op|'('
string|"'pci_passthrough_devices'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_metrics
dedent|''
name|'def'
name|'_get_host_metrics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the metrics from monitors and\n        notify information to message bus.\n        """'
newline|'\n'
name|'metrics'
op|'='
op|'['
op|']'
newline|'\n'
name|'metrics_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'monitor'
name|'in'
name|'self'
op|'.'
name|'monitors'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'metrics'
op|'+='
name|'monitor'
op|'.'
name|'get_metrics'
op|'('
name|'nodename'
op|'='
name|'nodename'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Cannot get the metrics from %s."'
op|')'
op|','
name|'monitor'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'metrics'
op|':'
newline|'\n'
indent|'            '
name|'metrics_info'
op|'['
string|"'nodename'"
op|']'
op|'='
name|'nodename'
newline|'\n'
name|'metrics_info'
op|'['
string|"'metrics'"
op|']'
op|'='
name|'metrics'
newline|'\n'
name|'metrics_info'
op|'['
string|"'host'"
op|']'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
name|'metrics_info'
op|'['
string|"'host_ip'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'my_ip'
newline|'\n'
name|'notifier'
op|'='
name|'rpc'
op|'.'
name|'get_notifier'
op|'('
name|'service'
op|'='
string|"'compute'"
op|','
name|'host'
op|'='
name|'nodename'
op|')'
newline|'\n'
name|'notifier'
op|'.'
name|'info'
op|'('
name|'context'
op|','
string|"'compute.metrics.update'"
op|','
name|'metrics_info'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'metrics'
newline|'\n'
nl|'\n'
DECL|member|update_available_resource
dedent|''
name|'def'
name|'update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override in-memory calculations of compute node resource usage based\n        on data audited from the hypervisor layer.\n\n        Add in resource claims in progress to account for operations that have\n        declared a need for resources, but not necessarily retrieved them from\n        the hypervisor layer yet.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Auditing locally available compute resources for "'
nl|'\n'
string|'"node %(node)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|'}'
op|')'
newline|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'self'
op|'.'
name|'nodename'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'resources'
op|':'
newline|'\n'
comment|'# The virt driver does not support this function'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Virt driver does not support "'
nl|'\n'
string|'"\'get_available_resource\'. Compute tracking is disabled."'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'='
name|'None'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'resources'
op|'['
string|"'host_ip'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'my_ip'
newline|'\n'
nl|'\n'
comment|"# We want the 'cpu_info' to be None from the POV of the"
nl|'\n'
comment|'# virt driver, but the DB requires it to be non-null so'
nl|'\n'
comment|'# just force it to empty string'
nl|'\n'
name|'if'
op|'('
string|'"cpu_info"'
name|'not'
name|'in'
name|'resources'
name|'or'
nl|'\n'
name|'resources'
op|'['
string|'"cpu_info"'
op|']'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'resources'
op|'['
string|'"cpu_info"'
op|']'
op|'='
string|"''"
newline|'\n'
nl|'\n'
comment|'# TODO(berrange): remove this once all virt drivers are updated'
nl|'\n'
comment|'# to report topology'
nl|'\n'
dedent|''
name|'if'
string|'"numa_topology"'
name|'not'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'resources'
op|'['
string|'"numa_topology"'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_verify_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_report_hypervisor_resource_view'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_available_resource'
op|'('
name|'context'
op|','
name|'resources'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'COMPUTE_RESOURCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|_update_available_resource
name|'def'
name|'_update_available_resource'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# initialise the compute node object, creating it'
nl|'\n'
comment|'# if it does not already exist.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_init_compute_node'
op|'('
name|'context'
op|','
name|'resources'
op|')'
newline|'\n'
nl|'\n'
comment|'# if we could not init the compute node the tracker will be'
nl|'\n'
comment|'# disabled and we should quit now'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'pci_passthrough_devices'"
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'devs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'dev'
name|'in'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'resources'
op|'.'
name|'pop'
op|'('
nl|'\n'
string|"'pci_passthrough_devices'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'dev'
op|'['
string|"'dev_type'"
op|']'
op|'=='
string|"'type-PF'"
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'pci_filter'
op|'.'
name|'device_assignable'
op|'('
name|'dev'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'devs'
op|'.'
name|'append'
op|'('
name|'dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'                '
name|'n_id'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'id'"
op|']'
name|'if'
name|'self'
op|'.'
name|'compute_node'
name|'else'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'pci_tracker'
op|'='
name|'pci_manager'
op|'.'
name|'PciDevTracker'
op|'('
name|'context'
op|','
nl|'\n'
name|'node_id'
op|'='
name|'n_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'set_hvdevs'
op|'('
name|'devs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Grab all instances assigned to this node:'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host_and_node'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'nodename'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|','
nl|'\n'
string|"'numa_topology'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now calculate usage based on instance utilization:'
nl|'\n'
name|'self'
op|'.'
name|'_update_usage_from_instances'
op|'('
name|'context'
op|','
name|'instances'
op|')'
newline|'\n'
nl|'\n'
comment|'# Grab all in-progress migrations:'
nl|'\n'
name|'migrations'
op|'='
name|'objects'
op|'.'
name|'MigrationList'
op|'.'
name|'get_in_progress_by_host_and_node'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'nodename'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update_usage_from_migrations'
op|'('
name|'context'
op|','
name|'migrations'
op|')'
newline|'\n'
nl|'\n'
comment|'# Detect and account for orphaned instances that may exist on the'
nl|'\n'
comment|'# hypervisor, but are not in the DB:'
nl|'\n'
name|'orphans'
op|'='
name|'self'
op|'.'
name|'_find_orphaned_instances'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_update_usage_from_orphans'
op|'('
name|'orphans'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(yjiang5): Because pci device tracker status is not cleared in'
nl|'\n'
comment|'# this periodic task, and also because the resource tracker is not'
nl|'\n'
comment|'# notified when instances are deleted, we need remove all usages'
nl|'\n'
comment|'# from deleted instances.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'clean_usage'
op|'('
name|'instances'
op|','
name|'migrations'
op|','
name|'orphans'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'pci_device_pools'"
op|']'
op|'='
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'stats'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'pci_device_pools'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_report_final_resource_view'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'metrics'
op|'='
name|'self'
op|'.'
name|'_get_host_metrics'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'metrics'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'metrics'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(sbauza): Juno compute nodes are missing the host field and'
nl|'\n'
comment|'# the Juno ResourceTracker does not set this field, even if'
nl|'\n'
comment|'# the ComputeNode object can show it.'
nl|'\n'
comment|"# Unfortunately, as we're not yet using ComputeNode.save(), we need"
nl|'\n'
comment|'# to add this field in the resources dict until the RT is using'
nl|'\n'
comment|'# the ComputeNode.save() method for populating the table.'
nl|'\n'
comment|'# tl;dr: To be removed once RT is using ComputeNode.save()'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'host'"
op|']'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_update'
op|'('
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Compute_service record updated for %(host)s:%(node)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_compute_node
dedent|''
name|'def'
name|'_get_compute_node'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns compute node for the host and nodename."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'compute'
op|'='
name|'objects'
op|'.'
name|'ComputeNode'
op|'.'
name|'get_by_host_and_nodename'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'return'
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'compute'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"No compute node record for %(host)s:%(node)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_write_ext_resources
dedent|''
dedent|''
name|'def'
name|'_write_ext_resources'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resources'
op|'['
string|"'stats'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'resources'
op|'['
string|"'stats'"
op|']'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'stats'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ext_resources_handler'
op|'.'
name|'write_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_service
dedent|''
name|'def'
name|'_get_service'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'objects'
op|'.'
name|'Service'
op|'.'
name|'get_by_compute_host'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"No service record for host %s"'
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_report_hypervisor_resource_view
dedent|''
dedent|''
name|'def'
name|'_report_hypervisor_resource_view'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Log the hypervisor\'s view of free resources.\n\n        This is just a snapshot of resource usage recorded by the\n        virt driver.\n\n        The following resources are logged:\n            - free memory\n            - free disk\n            - free CPUs\n            - assignable PCI devices\n        """'
newline|'\n'
name|'free_ram_mb'
op|'='
name|'resources'
op|'['
string|"'memory_mb'"
op|']'
op|'-'
name|'resources'
op|'['
string|"'memory_mb_used'"
op|']'
newline|'\n'
name|'free_disk_gb'
op|'='
name|'resources'
op|'['
string|"'local_gb'"
op|']'
op|'-'
name|'resources'
op|'['
string|"'local_gb_used'"
op|']'
newline|'\n'
name|'vcpus'
op|'='
name|'resources'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'if'
name|'vcpus'
op|':'
newline|'\n'
indent|'            '
name|'free_vcpus'
op|'='
name|'vcpus'
op|'-'
name|'resources'
op|'['
string|"'vcpus_used'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Hypervisor: free VCPUs: %s"'
op|'%'
name|'free_vcpus'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'free_vcpus'
op|'='
string|"'unknown'"
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Hypervisor: VCPU information unavailable"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
string|"'pci_passthrough_devices'"
name|'in'
name|'resources'
name|'and'
nl|'\n'
name|'resources'
op|'['
string|"'pci_passthrough_devices'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Hypervisor: assignable PCI devices: %s"'
op|'%'
nl|'\n'
name|'resources'
op|'['
string|"'pci_passthrough_devices'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pci_devices'
op|'='
name|'resources'
op|'.'
name|'get'
op|'('
string|"'pci_passthrough_devices'"
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Hypervisor/Node resource view: "'
nl|'\n'
string|'"name=%(node)s "'
nl|'\n'
string|'"free_ram=%(free_ram)sMB "'
nl|'\n'
string|'"free_disk=%(free_disk)sGB "'
nl|'\n'
string|'"free_vcpus=%(free_vcpus)s "'
nl|'\n'
string|'"pci_devices=%(pci_devices)s"'
op|','
nl|'\n'
op|'{'
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|','
nl|'\n'
string|"'free_ram'"
op|':'
name|'free_ram_mb'
op|','
nl|'\n'
string|"'free_disk'"
op|':'
name|'free_disk_gb'
op|','
nl|'\n'
string|"'free_vcpus'"
op|':'
name|'free_vcpus'
op|','
nl|'\n'
string|"'pci_devices'"
op|':'
name|'pci_devices'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_report_final_resource_view
dedent|''
name|'def'
name|'_report_final_resource_view'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Report final calculate of physical memory, used virtual memory,\n        disk, usable vCPUs, used virtual CPUs and PCI devices,\n        including instance calculations and in-progress resource claims. These\n        values will be exposed via the compute node table to the scheduler.\n        """'
newline|'\n'
name|'vcpus'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'if'
name|'vcpus'
op|':'
newline|'\n'
indent|'            '
name|'tcpu'
op|'='
name|'vcpus'
newline|'\n'
name|'ucpu'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Total usable vcpus: %(tcpu)s, "'
nl|'\n'
string|'"total allocated vcpus: %(ucpu)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'tcpu'"
op|':'
name|'vcpus'
op|','
nl|'\n'
string|"'ucpu'"
op|':'
name|'ucpu'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tcpu'
op|'='
number|'0'
newline|'\n'
name|'ucpu'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'pci_device_pools'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'.'
name|'get'
op|'('
string|"'pci_device_pools'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Final resource view: "'
nl|'\n'
string|'"name=%(node)s "'
nl|'\n'
string|'"phys_ram=%(phys_ram)sMB "'
nl|'\n'
string|'"used_ram=%(used_ram)sMB "'
nl|'\n'
string|'"phys_disk=%(phys_disk)sGB "'
nl|'\n'
string|'"used_disk=%(used_disk)sGB "'
nl|'\n'
string|'"total_vcpus=%(total_vcpus)s "'
nl|'\n'
string|'"used_vcpus=%(used_vcpus)s "'
nl|'\n'
string|'"pci_stats=%(pci_stats)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'node'"
op|':'
name|'self'
op|'.'
name|'nodename'
op|','
nl|'\n'
string|"'phys_ram'"
op|':'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
string|"'used_ram'"
op|':'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|','
nl|'\n'
string|"'phys_disk'"
op|':'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb'"
op|']'
op|','
nl|'\n'
string|"'used_disk'"
op|':'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|','
nl|'\n'
string|"'total_vcpus'"
op|':'
name|'tcpu'
op|','
nl|'\n'
string|"'used_vcpus'"
op|':'
name|'ucpu'
op|','
nl|'\n'
string|"'pci_stats'"
op|':'
name|'pci_device_pools'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resource_change
dedent|''
name|'def'
name|'_resource_change'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check to see if any resouces have changed."""'
newline|'\n'
name|'if'
name|'cmp'
op|'('
name|'self'
op|'.'
name|'compute_node'
op|','
name|'self'
op|'.'
name|'old_resources'
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'old_resources'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'compute_node'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_update
dedent|''
name|'def'
name|'_update'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update partial stats locally and populate them to Scheduler."""'
newline|'\n'
name|'self'
op|'.'
name|'_write_ext_resources'
op|'('
name|'self'
op|'.'
name|'compute_node'
op|')'
newline|'\n'
comment|'# NOTE(pmurray): the stats field is stored as a json string. The'
nl|'\n'
comment|'# json conversion will be done automatically by the ComputeNode object'
nl|'\n'
comment|'# so this can be removed when using ComputeNode.'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'stats'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'stats'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_resource_change'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
string|'"service"'
name|'in'
name|'self'
op|'.'
name|'compute_node'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'service'"
op|']'
newline|'\n'
comment|'# Persist the stats to the Scheduler'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_resource_stats'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'compute_node'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'save'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_resource_stats
dedent|''
dedent|''
name|'def'
name|'_update_resource_stats'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'stats'
op|'='
name|'values'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'stats'
op|'['
string|"'id'"
op|']'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'scheduler_client'
op|'.'
name|'update_resource_stats'
op|'('
nl|'\n'
name|'context'
op|','
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'nodename'
op|')'
op|','
name|'stats'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_usage
dedent|''
name|'def'
name|'_update_usage'
op|'('
name|'self'
op|','
name|'usage'
op|','
name|'sign'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mem_usage'
op|'='
name|'usage'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'overhead'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'estimate_instance_overhead'
op|'('
name|'usage'
op|')'
newline|'\n'
name|'mem_usage'
op|'+='
name|'overhead'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|'+='
name|'sign'
op|'*'
name|'mem_usage'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|'+='
name|'sign'
op|'*'
name|'usage'
op|'.'
name|'get'
op|'('
string|"'root_gb'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|'+='
op|'('
nl|'\n'
name|'sign'
op|'*'
name|'usage'
op|'.'
name|'get'
op|'('
string|"'ephemeral_gb'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# free ram and disk may be negative, depending on policy:'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'free_ram_mb'"
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
op|'-'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'free_disk_gb'"
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb'"
op|']'
op|'-'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'running_vms'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'num_instances'
newline|'\n'
name|'self'
op|'.'
name|'ext_resources_handler'
op|'.'
name|'update_from_instance'
op|'('
name|'usage'
op|','
name|'sign'
op|')'
newline|'\n'
nl|'\n'
comment|'# Calculate the numa usage'
nl|'\n'
name|'free'
op|'='
name|'sign'
op|'=='
op|'-'
number|'1'
newline|'\n'
name|'updated_numa_topology'
op|'='
name|'hardware'
op|'.'
name|'get_host_numa_usage_from_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|','
name|'usage'
op|','
name|'free'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'numa_topology'"
op|']'
op|'='
name|'updated_numa_topology'
newline|'\n'
nl|'\n'
DECL|member|_update_usage_from_migration
dedent|''
name|'def'
name|'_update_usage_from_migration'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'migration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update usage for a single migration.  The record may\n        represent an incoming or outbound migration.\n        """'
newline|'\n'
name|'uuid'
op|'='
name|'migration'
op|'.'
name|'instance_uuid'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Updating from migration %s"'
op|')'
op|'%'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'incoming'
op|'='
op|'('
name|'migration'
op|'.'
name|'dest_compute'
op|'=='
name|'self'
op|'.'
name|'host'
name|'and'
nl|'\n'
name|'migration'
op|'.'
name|'dest_node'
op|'=='
name|'self'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'outbound'
op|'='
op|'('
name|'migration'
op|'.'
name|'source_compute'
op|'=='
name|'self'
op|'.'
name|'host'
name|'and'
nl|'\n'
name|'migration'
op|'.'
name|'source_node'
op|'=='
name|'self'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'same_node'
op|'='
op|'('
name|'incoming'
name|'and'
name|'outbound'
op|')'
newline|'\n'
nl|'\n'
name|'record'
op|'='
name|'self'
op|'.'
name|'tracked_instances'
op|'.'
name|'get'
op|'('
name|'uuid'
op|','
name|'None'
op|')'
newline|'\n'
name|'itype'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'same_node'
op|':'
newline|'\n'
comment|'# same node resize. record usage for whichever instance type the'
nl|'\n'
comment|'# instance is *not* in:'
nl|'\n'
indent|'            '
name|'if'
op|'('
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
op|'=='
nl|'\n'
name|'migration'
op|'.'
name|'old_instance_type_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'itype'
op|'='
name|'self'
op|'.'
name|'_get_instance_type'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'new_'"
op|','
nl|'\n'
name|'migration'
op|'.'
name|'new_instance_type_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# instance record already has new flavor, hold space for a'
nl|'\n'
comment|'# possible revert to the old instance type:'
nl|'\n'
indent|'                '
name|'itype'
op|'='
name|'self'
op|'.'
name|'_get_instance_type'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'old_'"
op|','
nl|'\n'
name|'migration'
op|'.'
name|'old_instance_type_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'incoming'
name|'and'
name|'not'
name|'record'
op|':'
newline|'\n'
comment|'# instance has not yet migrated here:'
nl|'\n'
indent|'            '
name|'itype'
op|'='
name|'self'
op|'.'
name|'_get_instance_type'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'new_'"
op|','
nl|'\n'
name|'migration'
op|'.'
name|'new_instance_type_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'outbound'
name|'and'
name|'not'
name|'record'
op|':'
newline|'\n'
comment|'# instance migrated, but record usage for a possible revert:'
nl|'\n'
indent|'            '
name|'itype'
op|'='
name|'self'
op|'.'
name|'_get_instance_type'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'old_'"
op|','
nl|'\n'
name|'migration'
op|'.'
name|'old_instance_type_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_meta'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
nl|'\n'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'itype'
op|':'
newline|'\n'
indent|'            '
name|'host_topology'
op|'='
name|'self'
op|'.'
name|'compute_node'
op|'.'
name|'get'
op|'('
string|"'numa_topology'"
op|')'
newline|'\n'
name|'if'
name|'host_topology'
op|':'
newline|'\n'
indent|'                '
name|'host_topology'
op|'='
name|'objects'
op|'.'
name|'NUMATopology'
op|'.'
name|'obj_from_db_obj'
op|'('
nl|'\n'
name|'host_topology'
op|')'
newline|'\n'
dedent|''
name|'numa_topology'
op|'='
name|'hardware'
op|'.'
name|'numa_get_constraints'
op|'('
name|'itype'
op|','
name|'image_meta'
op|')'
newline|'\n'
name|'numa_topology'
op|'='
op|'('
nl|'\n'
name|'hardware'
op|'.'
name|'numa_fit_instance_to_host'
op|'('
nl|'\n'
name|'host_topology'
op|','
name|'numa_topology'
op|')'
op|')'
newline|'\n'
name|'usage'
op|'='
name|'self'
op|'.'
name|'_get_usage_dict'
op|'('
nl|'\n'
name|'itype'
op|','
name|'numa_topology'
op|'='
name|'numa_topology'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'update_pci_for_migration'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_update_usage'
op|'('
name|'usage'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'pci_device_pools'"
op|']'
op|'='
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'stats'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'pci_device_pools'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'tracked_migrations'
op|'['
name|'uuid'
op|']'
op|'='
op|'('
name|'migration'
op|','
name|'itype'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_usage_from_migrations
dedent|''
dedent|''
name|'def'
name|'_update_usage_from_migrations'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'migrations'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'tracked_migrations'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'filtered'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# do some defensive filtering against bad migrations records in the'
nl|'\n'
comment|'# database:'
nl|'\n'
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'migration'
op|'.'
name|'instance'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# migration referencing deleted instance'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Migration instance not found: %s'"
op|','
name|'e'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
comment|"# skip migration if instance isn't in a resize state:"
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_instance_in_resize_state'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance not resizing, skipping migration."'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'uuid'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# filter to most recently updated migration for each instance:'
nl|'\n'
dedent|''
name|'m'
op|'='
name|'filtered'
op|'.'
name|'get'
op|'('
name|'uuid'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
name|'or'
name|'migration'
op|'.'
name|'updated_at'
op|'>='
name|'m'
op|'.'
name|'updated_at'
op|':'
newline|'\n'
indent|'                '
name|'filtered'
op|'['
name|'uuid'
op|']'
op|'='
name|'migration'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'migration'
name|'in'
name|'filtered'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'migration'
op|'.'
name|'instance'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_update_usage_from_migration'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'FlavorNotFound'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Flavor could not be found, skipping "'
nl|'\n'
string|'"migration."'
op|')'
op|','
name|'instance_uuid'
op|'='
name|'uuid'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
DECL|member|_update_usage_from_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'_update_usage_from_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update usage for a single instance."""'
newline|'\n'
nl|'\n'
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'is_new_instance'
op|'='
name|'uuid'
name|'not'
name|'in'
name|'self'
op|'.'
name|'tracked_instances'
newline|'\n'
name|'is_deleted_instance'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
nl|'\n'
name|'if'
name|'is_new_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tracked_instances'
op|'['
name|'uuid'
op|']'
op|'='
name|'instance_obj'
op|'.'
name|'compat_instance'
op|'('
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'sign'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'is_deleted_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tracked_instances'
op|'.'
name|'pop'
op|'('
name|'uuid'
op|')'
newline|'\n'
name|'sign'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stats'
op|'.'
name|'update_stats_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'update_pci_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|"# if it's a new or deleted instance:"
nl|'\n'
dedent|''
name|'if'
name|'is_new_instance'
name|'or'
name|'is_deleted_instance'
op|':'
newline|'\n'
comment|'# new instance, update compute node resource usage:'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_usage'
op|'('
name|'instance'
op|','
name|'sign'
op|'='
name|'sign'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'current_workload'"
op|']'
op|'='
name|'self'
op|'.'
name|'stats'
op|'.'
name|'calculate_workload'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'pci_tracker'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'pci_device_pools'"
op|']'
op|'='
name|'self'
op|'.'
name|'pci_tracker'
op|'.'
name|'stats'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'pci_device_pools'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|_update_usage_from_instances
dedent|''
dedent|''
name|'def'
name|'_update_usage_from_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calculate resource usage based on instance utilization.  This is\n        different than the hypervisor\'s view as it will account for all\n        instances assigned to the local compute host, even if they are not\n        currently powered on.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'tracked_instances'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# set some initial values, reserve room for host/hypervisor:'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'reserved_host_disk_mb'
op|'/'
number|'1024'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'reserved_host_memory_mb'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'free_ram_mb'"
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
op|'-'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'free_disk_gb'"
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb'"
op|']'
op|'-'
nl|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'current_workload'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'compute_node'
op|'['
string|"'running_vms'"
op|']'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Reset values for extended resources'
nl|'\n'
name|'self'
op|'.'
name|'ext_resources_handler'
op|'.'
name|'reset_resources'
op|'('
name|'self'
op|'.'
name|'compute_node'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'.'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'DELETED'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_update_usage_from_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_orphaned_instances
dedent|''
dedent|''
dedent|''
name|'def'
name|'_find_orphaned_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given the set of instances and migrations already account for\n        by resource tracker, sanity check the hypervisor to determine\n        if there are any "orphaned" instances left hanging around.\n\n        Orphans could be consuming memory and should be accounted for in\n        usage calculations to guard against potential out of memory\n        errors.\n        """'
newline|'\n'
name|'uuids1'
op|'='
name|'frozenset'
op|'('
name|'self'
op|'.'
name|'tracked_instances'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'uuids2'
op|'='
name|'frozenset'
op|'('
name|'self'
op|'.'
name|'tracked_migrations'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'uuids'
op|'='
name|'uuids1'
op|'|'
name|'uuids2'
newline|'\n'
nl|'\n'
name|'usage'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_per_instance_usage'
op|'('
op|')'
newline|'\n'
name|'vuuids'
op|'='
name|'frozenset'
op|'('
name|'usage'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'orphan_uuids'
op|'='
name|'vuuids'
op|'-'
name|'uuids'
newline|'\n'
name|'orphans'
op|'='
op|'['
name|'usage'
op|'['
name|'uuid'
op|']'
name|'for'
name|'uuid'
name|'in'
name|'orphan_uuids'
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'orphans'
newline|'\n'
nl|'\n'
DECL|member|_update_usage_from_orphans
dedent|''
name|'def'
name|'_update_usage_from_orphans'
op|'('
name|'self'
op|','
name|'orphans'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Include orphaned instances in usage."""'
newline|'\n'
name|'for'
name|'orphan'
name|'in'
name|'orphans'
op|':'
newline|'\n'
indent|'            '
name|'memory_mb'
op|'='
name|'orphan'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Detected running orphan instance: %(uuid)s "'
nl|'\n'
string|'"(consuming %(memory_mb)s MB memory)"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'orphan'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'memory_mb'"
op|':'
name|'memory_mb'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# just record memory usage for the orphan'
nl|'\n'
name|'usage'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
name|'memory_mb'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_update_usage'
op|'('
name|'usage'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_verify_resources
dedent|''
dedent|''
name|'def'
name|'_verify_resources'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resource_keys'
op|'='
op|'['
string|'"vcpus"'
op|','
string|'"memory_mb"'
op|','
string|'"local_gb"'
op|','
string|'"cpu_info"'
op|','
nl|'\n'
string|'"vcpus_used"'
op|','
string|'"memory_mb_used"'
op|','
string|'"local_gb_used"'
op|','
nl|'\n'
string|'"numa_topology"'
op|']'
newline|'\n'
nl|'\n'
name|'missing_keys'
op|'='
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'resource_keys'
name|'if'
name|'k'
name|'not'
name|'in'
name|'resources'
op|']'
newline|'\n'
name|'if'
name|'missing_keys'
op|':'
newline|'\n'
indent|'            '
name|'reason'
op|'='
name|'_'
op|'('
string|'"Missing keys: %s"'
op|')'
op|'%'
name|'missing_keys'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_instance_in_resize_state
dedent|''
dedent|''
name|'def'
name|'_instance_in_resize_state'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vm'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
name|'task'
op|'='
name|'instance'
op|'['
string|"'task_state'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'vm'
op|'=='
name|'vm_states'
op|'.'
name|'RESIZED'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'vm'
name|'in'
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
nl|'\n'
name|'and'
name|'task'
name|'in'
op|'['
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|','
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_type
dedent|''
name|'def'
name|'_get_instance_type'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'prefix'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the instance type from sys metadata if it\'s stashed.  If not,\n        fall back to fetching it via the object API.\n\n        See bug 1164110\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'extracted_flavor'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|','
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'instance_type_id'
op|':'
newline|'\n'
indent|'                '
name|'instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_id'
op|'('
name|'context'
op|','
name|'instance_type_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'extracted_flavor'
newline|'\n'
nl|'\n'
DECL|member|_get_usage_dict
dedent|''
name|'def'
name|'_get_usage_dict'
op|'('
name|'self'
op|','
name|'object_or_dict'
op|','
op|'**'
name|'updates'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make a usage dict _update methods expect.\n\n        Accepts a dict or an Instance or Flavor object, and a set of updates.\n        Converts the object to a dict and applies the updates.\n\n        :param object_or_dict: instance or flavor as an object or just a dict\n        :param updates: key-value pairs to update the passed object.\n                        Currently only considers \'numa_topology\', all other\n                        keys are ignored.\n\n        :returns: a dict with all the information from object_or_dict updated\n                  with updates\n        """'
newline|'\n'
name|'usage'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'object_or_dict'
op|','
name|'objects'
op|'.'
name|'Instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'usage'
op|'='
name|'instance_obj'
op|'.'
name|'compat_instance'
op|'('
name|'object_or_dict'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'object_or_dict'
op|','
name|'objects'
op|'.'
name|'Flavor'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'usage'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'object_or_dict'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'usage'
op|'.'
name|'update'
op|'('
name|'object_or_dict'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
op|'('
string|"'numa_topology'"
op|','
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'in'
name|'updates'
op|':'
newline|'\n'
indent|'                '
name|'usage'
op|'['
name|'key'
op|']'
op|'='
name|'updates'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'usage'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

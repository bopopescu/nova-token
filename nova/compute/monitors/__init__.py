begin_unit
comment|'# Copyright 2013 Intel Corporation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'# @author: Shane Wang, Intel Corporation.'
nl|'\n'
nl|'\n'
string|'"""\nResource monitor API specification.\n\nResourceMonitorBase provides the definition of minimum set of methods\nthat needs to be implemented by Resource Monitor.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'types'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'loadables'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceMonitorMeta
name|'class'
name|'ResourceMonitorMeta'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'cls'
op|','
name|'names'
op|','
name|'bases'
op|','
name|'dict_'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Metaclass that allows us to create a function map and call it later\n        to get the metric names and their values.\n        """'
newline|'\n'
name|'super'
op|'('
name|'ResourceMonitorMeta'
op|','
name|'cls'
op|')'
op|'.'
name|'__init__'
op|'('
name|'names'
op|','
name|'bases'
op|','
name|'dict_'
op|')'
newline|'\n'
nl|'\n'
name|'prefix'
op|'='
string|"'_get_'"
newline|'\n'
name|'prefix_len'
op|'='
name|'len'
op|'('
name|'prefix'
op|')'
newline|'\n'
name|'cls'
op|'.'
name|'metric_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'cls'
op|'.'
name|'__dict__'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'len'
op|'('
name|'name'
op|')'
op|'>'
name|'prefix_len'
nl|'\n'
name|'and'
name|'name'
op|'['
op|':'
name|'prefix_len'
op|']'
op|'=='
name|'prefix'
nl|'\n'
name|'and'
name|'isinstance'
op|'('
name|'value'
op|','
name|'types'
op|'.'
name|'FunctionType'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'metric_name'
op|'='
name|'name'
op|'['
name|'prefix_len'
op|':'
op|']'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'.'"
op|')'
newline|'\n'
name|'cls'
op|'.'
name|'metric_map'
op|'['
name|'metric_name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'ResourceMonitorMeta'
op|')'
newline|'\n'
DECL|class|ResourceMonitorBase
name|'class'
name|'ResourceMonitorBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for resource monitors\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute_manager'
op|'='
name|'parent'
newline|'\n'
name|'self'
op|'.'
name|'source'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_metric_names
dedent|''
name|'def'
name|'get_metric_names'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get available metric names.\n\n        Get available metric names, which are represented by a set of keys\n        that can be used to check conflicts and duplications\n        :returns: a set of keys representing metrics names\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'metric_map'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_metrics
dedent|''
name|'def'
name|'get_metrics'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get metrics.\n\n        Get metrics, which are represented by a list of dictionaries\n        [{\'name\': metric name,\n          \'value\': metric value,\n          \'timestamp\': the time when the value is retrieved,\n          \'source\': what the value is got by}, ...]\n        :param kwargs: extra arguments that might be present\n        :returns: a list to tell the current metrics\n        """'
newline|'\n'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
op|','
name|'func'
name|'in'
name|'self'
op|'.'
name|'metric_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'func'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_populate'
op|'('
name|'name'
op|','
name|'ret'
op|'['
number|'0'
op|']'
op|','
name|'ret'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_populate
dedent|''
name|'def'
name|'_populate'
op|'('
name|'self'
op|','
name|'metric_name'
op|','
name|'metric_value'
op|','
name|'timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate the format what we want from metric name and metric value\n        """'
newline|'\n'
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'result'
op|'['
string|"'name'"
op|']'
op|'='
name|'metric_name'
newline|'\n'
name|'result'
op|'['
string|"'value'"
op|']'
op|'='
name|'metric_value'
newline|'\n'
name|'result'
op|'['
string|"'timestamp'"
op|']'
op|'='
name|'timestamp'
name|'or'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'result'
op|'['
string|"'source'"
op|']'
op|'='
name|'self'
op|'.'
name|'source'
newline|'\n'
nl|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceMonitorHandler
dedent|''
dedent|''
name|'class'
name|'ResourceMonitorHandler'
op|'('
name|'loadables'
op|'.'
name|'BaseLoader'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class to handle loading monitor classes.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ResourceMonitorHandler'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'ResourceMonitorBase'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|all_monitors
dedent|''
dedent|''
name|'def'
name|'all_monitors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a list of monitor classes found in this directory.\n\n    This method is used as the default for available monitors\n    and should return a list of all monitor classes avaiable.\n    """'
newline|'\n'
name|'return'
name|'ResourceMonitorHandler'
op|'('
op|')'
op|'.'
name|'get_all_classes'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

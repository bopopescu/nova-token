begin_unit
comment|'# Copyright 2013 Intel Corporation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nResource monitor API specification.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'monitors'
op|'.'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'loadables'
newline|'\n'
nl|'\n'
DECL|variable|compute_monitors_opts
name|'compute_monitors_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'compute_available_monitors'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'nova.compute.monitors.all_monitors'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Monitor classes available to the compute which may '"
nl|'\n'
string|"'be specified more than once.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'compute_monitors'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'A list of monitors that can be used for getting '"
nl|'\n'
string|"'compute metrics.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'compute_monitors_opts'
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(jaypipes): Replace the use of loadables with stevedore.'
nl|'\n'
DECL|class|ResourceMonitorHandler
name|'class'
name|'ResourceMonitorHandler'
op|'('
name|'loadables'
op|'.'
name|'BaseLoader'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class to handle loading monitor classes.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ResourceMonitorHandler'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'monitors'
op|'.'
name|'base'
op|'.'
name|'MonitorBase'
op|')'
newline|'\n'
nl|'\n'
DECL|member|choose_monitors
dedent|''
name|'def'
name|'choose_monitors'
op|'('
name|'self'
op|','
name|'manager'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This function checks the monitor names and metrics names against a\n        predefined set of acceptable monitors.\n        """'
newline|'\n'
name|'monitor_classes'
op|'='
name|'self'
op|'.'
name|'get_matching_classes'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'compute_available_monitors'
op|')'
newline|'\n'
name|'monitor_class_map'
op|'='
op|'{'
name|'cls'
op|'.'
name|'__name__'
op|':'
name|'cls'
name|'for'
name|'cls'
name|'in'
name|'monitor_classes'
op|'}'
newline|'\n'
name|'monitor_cls_names'
op|'='
name|'CONF'
op|'.'
name|'compute_monitors'
newline|'\n'
name|'good_monitors'
op|'='
op|'['
op|']'
newline|'\n'
name|'bad_monitors'
op|'='
op|'['
op|']'
newline|'\n'
name|'metric_names'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'monitor_name'
name|'in'
name|'monitor_cls_names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'monitor_name'
name|'not'
name|'in'
name|'monitor_class_map'
op|':'
newline|'\n'
indent|'                '
name|'bad_monitors'
op|'.'
name|'append'
op|'('
name|'monitor_name'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# make sure different monitors do not have the same'
nl|'\n'
comment|'# metric name'
nl|'\n'
indent|'                '
name|'monitor'
op|'='
name|'monitor_class_map'
op|'['
name|'monitor_name'
op|']'
op|'('
name|'manager'
op|')'
newline|'\n'
name|'metric_names_tmp'
op|'='
name|'monitor'
op|'.'
name|'get_metric_names'
op|'('
op|')'
newline|'\n'
name|'overlap'
op|'='
name|'metric_names'
op|'&'
name|'metric_names_tmp'
newline|'\n'
name|'if'
name|'not'
name|'overlap'
op|':'
newline|'\n'
indent|'                    '
name|'metric_names'
op|'='
name|'metric_names'
op|'|'
name|'metric_names_tmp'
newline|'\n'
name|'good_monitors'
op|'.'
name|'append'
op|'('
name|'monitor'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
op|'('
name|'_LW'
op|'('
string|'"Excluding monitor %(monitor_name)s due to "'
nl|'\n'
string|'"metric name overlap; overlapping "'
nl|'\n'
string|'"metrics: %(overlap)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'monitor_name'"
op|':'
name|'monitor_name'
op|','
nl|'\n'
string|"'overlap'"
op|':'
string|"', '"
op|'.'
name|'join'
op|'('
name|'overlap'
op|')'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'bad_monitors'
op|'.'
name|'append'
op|'('
name|'monitor_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
name|'_LW'
op|'('
string|'"Monitor %(monitor_name)s cannot be used: %(ex)s"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'monitor_name'"
op|':'
name|'monitor_name'
op|','
string|"'ex'"
op|':'
name|'ex'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'bad_monitors'
op|'.'
name|'append'
op|'('
name|'monitor_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'bad_monitors'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"The following monitors have been disabled: %s"'
op|')'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'bad_monitors'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'good_monitors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|all_monitors
dedent|''
dedent|''
name|'def'
name|'all_monitors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a list of monitor classes found in this directory.\n\n    This method is used as the default for available monitors\n    and should return a list of all monitor classes available.\n    """'
newline|'\n'
name|'return'
name|'ResourceMonitorHandler'
op|'('
op|')'
op|'.'
name|'get_all_classes'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

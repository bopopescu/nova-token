begin_unit
comment|'# Copyright 2013 Intel Corporation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nResource monitor API specification.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'stevedore'
name|'import'
name|'enabled'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LW'
newline|'\n'
nl|'\n'
DECL|variable|compute_monitors_opts
name|'compute_monitors_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'compute_available_monitors'"
op|','
nl|'\n'
DECL|variable|deprecated_for_removal
name|'deprecated_for_removal'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Monitor classes available to the compute which may '"
nl|'\n'
string|"'be specified more than once. This option is '"
nl|'\n'
string|"'DEPRECATED and no longer used. Use setuptools entry '"
nl|'\n'
string|"'points to list available monitor plugins.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'compute_monitors'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'A list of monitors that can be used for getting '"
nl|'\n'
string|"'compute metrics. You can use the alias/name from '"
nl|'\n'
string|"'the setuptools entry points for nova.compute.monitors.* '"
nl|'\n'
string|"'namespaces.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'compute_monitors_opts'
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonitorHandler
name|'class'
name|'MonitorHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'resource_tracker'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cpu_monitor_loaded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'ns'
op|'='
string|"'nova.compute.monitors.cpu'"
newline|'\n'
name|'cpu_plugin_mgr'
op|'='
name|'enabled'
op|'.'
name|'EnabledExtensionManager'
op|'('
nl|'\n'
name|'namespace'
op|'='
name|'ns'
op|','
nl|'\n'
name|'invoke_on_load'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_func'
op|'='
name|'self'
op|'.'
name|'check_enabled_cpu_monitor'
op|','
nl|'\n'
name|'invoke_args'
op|'='
op|'('
name|'resource_tracker'
op|','
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'monitors'
op|'='
op|'['
name|'obj'
op|'.'
name|'obj'
name|'for'
name|'obj'
name|'in'
name|'cpu_plugin_mgr'
op|']'
newline|'\n'
nl|'\n'
DECL|member|check_enabled_cpu_monitor
dedent|''
name|'def'
name|'check_enabled_cpu_monitor'
op|'('
name|'self'
op|','
name|'ext'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'cpu_monitor_loaded'
name|'is'
name|'not'
name|'False'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Excluding CPU monitor %(monitor_name)s. Already "'
nl|'\n'
string|'"loaded %(loaded_cpu_monitor)s."'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'msg'
op|'%'
op|'{'
nl|'\n'
string|"'monitor_name'"
op|':'
name|'ext'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'loaded_cpu_monitor'"
op|':'
name|'self'
op|'.'
name|'cpu_monitor_loaded'
nl|'\n'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
comment|"# TODO(jaypipes): Right now, we only have CPU monitors, so we don't"
nl|'\n'
comment|'# need to check if the plugin is a CPU monitor or not. Once non-CPU'
nl|'\n'
comment|'# monitors are added, change this to check either the base class or'
nl|'\n'
comment|'# the set of metric names returned to ensure only a single CPU'
nl|'\n'
comment|'# monitor is loaded at any one time.'
nl|'\n'
dedent|''
name|'if'
name|'ext'
op|'.'
name|'name'
name|'in'
name|'CONF'
op|'.'
name|'compute_monitors'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cpu_monitor_loaded'
op|'='
name|'ext'
op|'.'
name|'name'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'msg'
op|'='
name|'_LW'
op|'('
string|'"Excluding CPU monitor %(monitor_name)s. Not in the "'
nl|'\n'
string|'"list of enabled monitors (CONF.compute_monitors)."'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'msg'
op|'%'
op|'{'
nl|'\n'
string|"'monitor_name'"
op|':'
name|'ext'
op|'.'
name|'name'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

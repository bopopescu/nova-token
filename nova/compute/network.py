begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2010 Anso Labs, LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nClasses for network control, including VLANs, DHCP, and IP allocation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
comment|'# TODO(termie): clean up these imports'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
name|'import'
name|'IPy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'datastore'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'users'
newline|'\n'
nl|'\n'
name|'import'
name|'linux_net'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'networks_path'"
op|','
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'../networks'"
op|')'
op|','
nl|'\n'
string|"'Location to keep network config files'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'public_vlan'"
op|','
number|'1'
op|','
string|"'VLAN for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_interface'"
op|','
string|"'vlan1'"
op|','
nl|'\n'
string|"'Interface for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'bridge_dev'"
op|','
string|"'eth1'"
op|','
nl|'\n'
string|"'network device for bridges'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_start'"
op|','
number|'100'
op|','
string|"'First VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_end'"
op|','
number|'4093'
op|','
string|"'Last VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'network_size'"
op|','
number|'256'
op|','
nl|'\n'
string|"'Number of addresses in each private subnet'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_range'"
op|','
string|"'4.4.4.0/24'"
op|','
string|"'Public IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'private_range'"
op|','
string|"'10.0.0.0/8'"
op|','
string|"'Private IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cnt_vpn_clients'"
op|','
number|'5'
op|','
nl|'\n'
string|"'Number of addresses reserved for vpn clients'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cloudpipe_start_port'"
op|','
number|'12000'
op|','
nl|'\n'
string|"'Starting port for mapped CloudPipe external ports'"
op|')'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
nl|'\n'
comment|'# CLEANUP:'
nl|'\n'
comment|'# TODO(ja): Save the IPs at the top of each subnet for cloudpipe vpn clients'
nl|'\n'
comment|'# TODO(ja): use singleton for usermanager instead of self.manager in vlanpool et al'
nl|'\n'
comment|'# TODO(ja): does vlanpool "keeper" need to know the min/max - shouldn\'t FLAGS always win?'
nl|'\n'
comment|'# TODO(joshua): Save the IPs at the top of each subnet for cloudpipe vpn clients'
nl|'\n'
nl|'\n'
DECL|class|BaseNetwork
name|'class'
name|'BaseNetwork'
op|'('
name|'datastore'
op|'.'
name|'RedisModel'
op|')'
op|':'
newline|'\n'
DECL|variable|bridge_gets_ip
indent|'    '
name|'bridge_gets_ip'
op|'='
name|'False'
newline|'\n'
DECL|variable|object_type
name|'object_type'
op|'='
string|"'network'"
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_all_hosts
name|'def'
name|'get_all_hosts'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'vlan'
name|'in'
name|'get_assigned_vlans'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'network_str'
op|'='
name|'get_subnet_from_vlan'
op|'('
name|'vlan'
op|')'
newline|'\n'
name|'for'
name|'addr'
name|'in'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
nl|'\n'
string|'"network:%s:hosts"'
op|'%'
op|'('
name|'network_str'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'addr'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'security_group'
op|','
name|'vlan'
op|','
name|'network_str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network_id'
op|'='
string|'"%s:%s"'
op|'%'
op|'('
name|'project_id'
op|','
name|'security_group'
op|')'
newline|'\n'
name|'net'
op|'='
name|'cls'
op|'('
name|'network_id'
op|','
name|'network_str'
op|')'
newline|'\n'
name|'net'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'user_id'
newline|'\n'
name|'net'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'project_id'
newline|'\n'
name|'net'
op|'['
string|'"vlan"'
op|']'
op|'='
name|'vlan'
newline|'\n'
name|'net'
op|'['
string|'"bridge_name"'
op|']'
op|'='
string|'"br%s"'
op|'%'
name|'vlan'
newline|'\n'
name|'net'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'net'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network_id'
op|','
name|'network_str'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'object_id'
op|'='
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'network_id'
newline|'\n'
name|'self'
op|'['
string|"'network_str'"
op|']'
op|'='
name|'network_str'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|network
name|'def'
name|'network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'self'
op|'['
string|"'network_str'"
op|']'
op|')'
newline|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|netmask
name|'def'
name|'netmask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'network'
op|'.'
name|'netmask'
op|'('
op|')'
newline|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|gateway
name|'def'
name|'gateway'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'network'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|broadcast
name|'def'
name|'broadcast'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'network'
op|'.'
name|'broadcast'
op|'('
op|')'
newline|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|gateway
name|'def'
name|'gateway'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'network'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|bridge_name
name|'def'
name|'bridge_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"br%s"'
op|'%'
op|'('
name|'self'
op|'['
string|'"vlan"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|range
dedent|''
name|'def'
name|'range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# the .2 address is always CloudPipe'
nl|'\n'
indent|'        '
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|'-'
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'.'
name|'network'
op|'['
name|'idx'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|user
name|'def'
name|'user'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'get_user'
op|'('
name|'self'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|project
name|'def'
name|'project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'self'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_hosts_key
name|'def'
name|'_hosts_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"network:%s:hosts"'
op|'%'
op|'('
name|'self'
op|'['
string|"'network_str'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|hosts
name|'def'
name|'hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
name|'self'
op|'.'
name|'_hosts_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_host
dedent|''
name|'def'
name|'_add_host'
op|'('
name|'self'
op|','
name|'_user_id'
op|','
name|'_project_id'
op|','
name|'host'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hset'
op|'('
name|'self'
op|'.'
name|'_hosts_key'
op|','
name|'host'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rem_host
dedent|''
name|'def'
name|'_rem_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hdel'
op|'('
name|'self'
op|'.'
name|'_hosts_key'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|assigned
name|'def'
name|'assigned'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hkeys'
op|'('
name|'self'
op|'.'
name|'_hosts_key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|available
name|'def'
name|'available'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# the .2 address is always CloudPipe'
nl|'\n'
comment|'# and the top <n> are for vpn clients'
nl|'\n'
indent|'        '
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|'-'
op|'('
number|'1'
op|'+'
name|'FLAGS'
op|'.'
name|'cnt_vpn_clients'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'address'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'str'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_ip
dedent|''
dedent|''
dedent|''
name|'def'
name|'allocate_ip'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'address'
name|'in'
name|'self'
op|'.'
name|'available'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Allocating IP %s to %s"'
op|'%'
op|'('
name|'address'
op|','
name|'project_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_host'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'address'
op|','
name|'mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NoMoreAddresses'
op|'('
string|'"Project %s with network %s"'
op|'%'
op|'('
name|'project_id'
op|','
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lease_ip
dedent|''
name|'def'
name|'lease_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Leasing allocated IP %s"'
op|'%'
op|'('
name|'ip_str'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_ip
dedent|''
name|'def'
name|'release_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'ip_str'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'ip_str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_rem_host'
op|'('
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_ip
dedent|''
name|'def'
name|'deallocate_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
comment|'# Do nothing for now, cleanup on ip release'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|list_addresses
dedent|''
name|'def'
name|'list_addresses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'address'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
name|'pass'
newline|'\n'
DECL|member|deexpress
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BridgedNetwork
dedent|''
name|'class'
name|'BridgedNetwork'
op|'('
name|'BaseNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Virtual Network that can express itself to create a vlan and\n    a bridge (with or without an IP address/netmask/gateway)\n\n    properties:\n        bridge_name - string (example value: br42)\n        vlan - integer (example value: 42)\n        bridge_dev - string (example: eth0)\n        bridge_gets_ip - boolean used during bridge creation\n\n        if bridge_gets_ip then network address for bridge uses the properties:\n            gateway\n            broadcast\n            netmask\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|get_network_for_project
name|'def'
name|'get_network_for_project'
op|'('
name|'cls'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vlan'
op|'='
name|'get_vlan_for_project'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'network_str'
op|'='
name|'get_subnet_from_vlan'
op|'('
name|'vlan'
op|')'
newline|'\n'
comment|'# logging.debug("creating network on vlan %s with network string %s" % (vlan, network_str))'
nl|'\n'
name|'return'
name|'cls'
op|'.'
name|'create'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'security_group'
op|','
name|'vlan'
op|','
name|'network_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BridgedNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'bridge_dev'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'bridge_dev'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BridgedNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'vlan_create'
op|'('
name|'self'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'bridge_create'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|DHCPNetwork
dedent|''
dedent|''
name|'class'
name|'DHCPNetwork'
op|'('
name|'BridgedNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    properties:\n        dhcp_listen_address: the ip of the gateway / dhcp host\n        dhcp_range_start: the first ip to give out\n        dhcp_range_end: the last ip to give out\n    """'
newline|'\n'
DECL|variable|bridge_gets_ip
name|'bridge_gets_ip'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# logging.debug("Initing DHCPNetwork object...")'
nl|'\n'
name|'self'
op|'.'
name|'dhcp_listen_address'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dhcp_range_start'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dhcp_range_end'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
op|'-'
op|'('
number|'1'
op|'+'
name|'FLAGS'
op|'.'
name|'cnt_vpn_clients'
op|')'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'assigned'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting dnsmasq server for network with vlan %s"'
op|','
nl|'\n'
name|'self'
op|'['
string|"'vlan'"
op|']'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'start_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Not launching dnsmasq: no hosts."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'express_cloudpipe'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_vpn_ip
dedent|''
name|'def'
name|'allocate_vpn_ip'
op|'('
name|'self'
op|','
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_host'
op|'('
name|'self'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'['
string|"'project_id'"
op|']'
op|','
name|'address'
op|','
name|'mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|express_cloudpipe
dedent|''
name|'def'
name|'express_cloudpipe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'private_ip'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
number|'2'
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p udp --dport 1194 -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"PREROUTING -t nat -d %s -p udp --dport %s -j DNAT --to %s:1194"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'project'
op|'.'
name|'vpn_ip'
op|','
name|'self'
op|'.'
name|'project'
op|'.'
name|'vpn_port'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# if this is the last address, stop dns'
nl|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'assigned'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'stop_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'start_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|PublicAddress
dedent|''
dedent|''
dedent|''
name|'class'
name|'PublicAddress'
op|'('
name|'datastore'
op|'.'
name|'RedisModel'
op|')'
op|':'
newline|'\n'
DECL|variable|object_type
indent|'    '
name|'object_type'
op|'='
string|'"address"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PublicAddress'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'cls'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'addr'
op|'['
string|"'address'"
op|']'
op|'='
name|'address'
newline|'\n'
name|'addr'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'user_id'
newline|'\n'
name|'addr'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'project_id'
newline|'\n'
name|'addr'
op|'['
string|"'instance_id'"
op|']'
op|'='
string|"'available'"
newline|'\n'
name|'addr'
op|'['
string|"'private_ip'"
op|']'
op|'='
string|"'available'"
newline|'\n'
name|'addr'
op|'['
string|'"create_time"'
op|']'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
newline|'\n'
name|'addr'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'addr'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_PORTS
dedent|''
dedent|''
name|'DEFAULT_PORTS'
op|'='
op|'['
op|'('
string|'"tcp"'
op|','
number|'80'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'22'
op|')'
op|','
op|'('
string|'"udp"'
op|','
number|'1194'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'443'
op|')'
op|']'
newline|'\n'
DECL|class|PublicNetworkController
name|'class'
name|'PublicNetworkController'
op|'('
name|'BaseNetwork'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network_id'
op|'='
string|'"public:default"'
newline|'\n'
name|'super'
op|'('
name|'PublicNetworkController'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'network_id'
op|','
name|'FLAGS'
op|'.'
name|'public_range'
op|')'
newline|'\n'
name|'self'
op|'['
string|"'user_id'"
op|']'
op|'='
string|'"public"'
newline|'\n'
name|'self'
op|'['
string|"'project_id'"
op|']'
op|'='
string|'"public"'
newline|'\n'
name|'self'
op|'['
string|'"create_time"'
op|']'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'['
string|'"vlan"'
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'public_vlan'
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|available
name|'def'
name|'available'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'address'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'address'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|host_objs
name|'def'
name|'host_objs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'address'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'PublicAddress'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_public_ip_for_instance
dedent|''
dedent|''
name|'def'
name|'get_public_ip_for_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
comment|"# FIXME: this should be a lookup - iteration won't scale"
nl|'\n'
indent|'        '
name|'for'
name|'address_record'
name|'in'
name|'self'
op|'.'
name|'host_objs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'address_record'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|','
string|"'available'"
op|')'
op|'=='
name|'instance_id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'address_record'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_host
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'host'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'PublicAddress'
op|'('
name|'host'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_add_host
dedent|''
name|'def'
name|'_add_host'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'project_id'
op|','
name|'host'
op|','
name|'_target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hset'
op|'('
name|'self'
op|'.'
name|'_hosts_key'
op|','
name|'host'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'PublicAddress'
op|'.'
name|'create'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rem_host
dedent|''
name|'def'
name|'_rem_host'
op|'('
name|'self'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'PublicAddress'
op|'('
name|'host'
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hdel'
op|'('
name|'self'
op|'.'
name|'_hosts_key'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|','
name|'private_ip'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'public_ip'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
comment|'# TODO(joshua): Keep an index going both ways'
nl|'\n'
dedent|''
name|'for'
name|'addr'
name|'in'
name|'self'
op|'.'
name|'host_objs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
name|'None'
op|')'
op|'=='
name|'private_ip'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'AddressAlreadyAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'addr'
op|'='
name|'self'
op|'.'
name|'get_host'
op|'('
name|'public_ip'
op|')'
newline|'\n'
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
string|"'available'"
op|')'
op|'!='
string|"'available'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressAlreadyAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'addr'
op|'['
string|"'private_ip'"
op|']'
op|'='
name|'private_ip'
newline|'\n'
name|'addr'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'instance_id'
newline|'\n'
name|'addr'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'public_ip'
name|'in'
name|'self'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'addr'
op|'='
name|'self'
op|'.'
name|'get_host'
op|'('
name|'public_ip'
op|')'
newline|'\n'
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
string|"'available'"
op|')'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
name|'addr'
op|'['
string|"'private_ip'"
op|']'
op|'='
string|"'available'"
newline|'\n'
name|'addr'
op|'['
string|"'instance_id'"
op|']'
op|'='
string|"'available'"
newline|'\n'
name|'addr'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addresses'
op|'='
name|'self'
op|'.'
name|'host_objs'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'            '
name|'addresses'
op|'='
op|'['
name|'self'
op|'.'
name|'get_host'
op|'('
name|'address'
op|')'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'addr'
name|'in'
name|'addresses'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'addr'
op|'.'
name|'get'
op|'('
string|"'private_ip'"
op|','
string|"'available'"
op|')'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'public_ip'
op|'='
name|'addr'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'private_ip'
op|'='
name|'addr'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'bind_public_ip'
op|'('
name|'public_ip'
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"PREROUTING -t nat -d %s -j DNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'public_ip'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"POSTROUTING -t nat -s %s -j SNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'public_ip'
op|')'
op|')'
newline|'\n'
comment|'# TODO: Get these from the secgroup datastore entries'
nl|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p icmp -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'protocol'
op|','
name|'port'
op|')'
name|'in'
name|'DEFAULT_PORTS'
op|':'
newline|'\n'
indent|'                '
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p %s --dport %s -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'protocol'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
dedent|''
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'self'
op|'.'
name|'get_host'
op|'('
name|'address'
op|')'
newline|'\n'
name|'private_ip'
op|'='
name|'addr'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'unbind_public_ip'
op|'('
name|'address'
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"PREROUTING -t nat -d %s -j DNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'address'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"POSTROUTING -t nat -s %s -j SNAT --to %s"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"FORWARD -d %s -p icmp -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'protocol'
op|','
name|'port'
op|')'
name|'in'
name|'DEFAULT_PORTS'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"FORWARD -d %s -p %s --dport %s -j ACCEPT"'
nl|'\n'
op|'%'
op|'('
name|'private_ip'
op|','
name|'protocol'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|VLANS_KEY
dedent|''
dedent|''
dedent|''
name|'VLANS_KEY'
op|'='
string|'"vlans"'
newline|'\n'
DECL|function|_add_vlan
name|'def'
name|'_add_vlan'
op|'('
name|'project_id'
op|','
name|'vlan'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hset'
op|'('
name|'VLANS_KEY'
op|','
name|'project_id'
op|','
name|'vlan'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_rem_vlan
dedent|''
name|'def'
name|'_rem_vlan'
op|'('
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hdel'
op|'('
name|'VLANS_KEY'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_assigned_vlans
dedent|''
name|'def'
name|'get_assigned_vlans'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Returns a dictionary, with keys of project_id and values of vlan_id """'
newline|'\n'
name|'return'
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hgetall'
op|'('
name|'VLANS_KEY'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_vlan_for_project
dedent|''
name|'def'
name|'get_vlan_for_project'
op|'('
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Allocate vlan IDs to individual users.\n    """'
newline|'\n'
name|'vlan'
op|'='
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hget'
op|'('
name|'VLANS_KEY'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'if'
name|'vlan'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'vlan'
newline|'\n'
dedent|''
name|'assigned_vlans'
op|'='
name|'get_assigned_vlans'
op|'('
op|')'
newline|'\n'
comment|'# TODO(joshua) I can do this in one loop, I think'
nl|'\n'
name|'for'
name|'old_project_id'
op|','
name|'vlan'
name|'in'
name|'assigned_vlans'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'old_project_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_rem_vlan'
op|'('
name|'old_project_id'
op|')'
newline|'\n'
name|'_add_vlan'
op|'('
name|'project_id'
op|','
name|'vlan'
op|')'
newline|'\n'
name|'return'
name|'vlan'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'vlan'
name|'in'
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'vlan_start'
op|','
name|'FLAGS'
op|'.'
name|'vlan_end'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'str'
op|'('
name|'vlan'
op|')'
name|'in'
name|'assigned_vlans'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_add_vlan'
op|'('
name|'project_id'
op|','
name|'vlan'
op|')'
newline|'\n'
name|'return'
name|'vlan'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
string|'"Out of VLANs"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_project_id_for_vlan
dedent|''
name|'def'
name|'get_project_id_for_vlan'
op|'('
name|'vlan'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assigned_vlans'
op|'='
name|'get_assigned_vlans'
op|'('
op|')'
newline|'\n'
name|'for'
name|'project_id'
op|','
name|'project_vlan'
name|'in'
name|'assigned_vlans'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'vlan'
op|'=='
name|'project_vlan'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'project_id'
newline|'\n'
nl|'\n'
DECL|function|get_network_by_interface
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_network_by_interface'
op|'('
name|'iface'
op|','
name|'security_group'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'vlan'
op|'='
name|'iface'
op|'.'
name|'rpartition'
op|'('
string|'"br"'
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'return'
name|'get_project_network'
op|'('
name|'get_project_id_for_vlan'
op|'('
name|'vlan'
op|')'
op|','
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_network_by_address
dedent|''
name|'def'
name|'get_network_by_address'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Get Network By Address: %s"'
op|'%'
name|'address'
op|')'
newline|'\n'
name|'for'
name|'project'
name|'in'
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'get_projects'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|'='
name|'get_project_network'
op|'('
name|'project'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'if'
name|'address'
name|'in'
name|'net'
op|'.'
name|'assigned'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Found %s in %s"'
op|'%'
op|'('
name|'address'
op|','
name|'project'
op|'.'
name|'id'
op|')'
op|')'
newline|'\n'
name|'return'
name|'net'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|allocate_vpn_ip
dedent|''
name|'def'
name|'allocate_vpn_ip'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'get_project_network'
op|'('
name|'project_id'
op|')'
op|'.'
name|'allocate_vpn_ip'
op|'('
name|'mac'
op|')'
newline|'\n'
nl|'\n'
DECL|function|allocate_ip
dedent|''
name|'def'
name|'allocate_ip'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'get_project_network'
op|'('
name|'project_id'
op|')'
op|'.'
name|'allocate_ip'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'mac'
op|')'
newline|'\n'
nl|'\n'
DECL|function|deallocate_ip
dedent|''
name|'def'
name|'deallocate_ip'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'get_network_by_address'
op|'('
name|'address'
op|')'
op|'.'
name|'deallocate_ip'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|function|release_ip
dedent|''
name|'def'
name|'release_ip'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'get_network_by_address'
op|'('
name|'address'
op|')'
op|'.'
name|'release_ip'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|function|lease_ip
dedent|''
name|'def'
name|'lease_ip'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'get_network_by_address'
op|'('
name|'address'
op|')'
op|'.'
name|'lease_ip'
op|'('
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_project_network
dedent|''
name|'def'
name|'get_project_network'
op|'('
name|'project_id'
op|','
name|'security_group'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" get a project\'s private network, allocating one if needed """'
newline|'\n'
name|'project'
op|'='
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'get_project'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'project'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'nova'
op|'.'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Project %s doesn\'t exist, uhoh."'
op|'%'
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'DHCPNetwork'
op|'.'
name|'get_network_for_project'
op|'('
name|'project'
op|'.'
name|'project_manager_id'
op|','
name|'project'
op|'.'
name|'id'
op|','
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_subnet_from_vlan
dedent|''
name|'def'
name|'get_subnet_from_vlan'
op|'('
name|'vlan'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Assign one subnet to each VLAN, for now."""'
newline|'\n'
name|'vlan'
op|'='
name|'int'
op|'('
name|'vlan'
op|')'
newline|'\n'
name|'network'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'FLAGS'
op|'.'
name|'private_range'
op|')'
newline|'\n'
name|'start'
op|'='
op|'('
name|'vlan'
op|'-'
name|'FLAGS'
op|'.'
name|'vlan_start'
op|')'
op|'*'
name|'FLAGS'
op|'.'
name|'network_size'
newline|'\n'
name|'return'
string|'"%s-%s"'
op|'%'
op|'('
name|'network'
op|'['
name|'start'
op|']'
op|','
name|'network'
op|'['
name|'start'
op|'+'
name|'FLAGS'
op|'.'
name|'network_size'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|restart_nets
dedent|''
name|'def'
name|'restart_nets'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Ensure the network for each user is enabled"""'
newline|'\n'
name|'for'
name|'project'
name|'in'
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'get_projects'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'get_project_network'
op|'('
name|'project'
op|'.'
name|'id'
op|')'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

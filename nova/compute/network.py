begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright [2010] [Anso Labs, LLC]'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'#    you may not use this file except in compliance with the License.'
nl|'\n'
comment|'#    You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#        http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'#    See the License for the specific language governing permissions and'
nl|'\n'
comment|'#    limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nClasses for network control, including VLANs, DHCP, and IP allocation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
comment|'# TODO(termie): clean up these imports'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
name|'import'
name|'IPy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'datastore'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'users'
newline|'\n'
nl|'\n'
name|'import'
name|'linux_net'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'net_libvirt_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'compute/net.libvirt.xml.template'"
op|')'
op|','
nl|'\n'
string|"'Template file for libvirt networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'networks_path'"
op|','
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'../networks'"
op|')'
op|','
nl|'\n'
string|"'Location to keep network config files'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'public_vlan'"
op|','
number|'1'
op|','
string|"'VLAN for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_interface'"
op|','
string|"'vlan1'"
op|','
string|"'Interface for public IP addresses'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'bridge_dev'"
op|','
string|"'eth1'"
op|','
nl|'\n'
string|"'network device for bridges'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_start'"
op|','
number|'100'
op|','
string|"'First VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_end'"
op|','
number|'4093'
op|','
string|"'Last VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'network_size'"
op|','
number|'256'
op|','
string|"'Number of addresses in each private subnet'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_range'"
op|','
string|"'4.4.4.0/24'"
op|','
string|"'Public IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'private_range'"
op|','
string|"'10.0.0.0/8'"
op|','
string|"'Private IP address block'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# HACK(vish): to delay _get_keeper() loading'
nl|'\n'
DECL|function|_get_keeper
name|'def'
name|'_get_keeper'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'_get_keeper'
op|'.'
name|'keeper'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_get_keeper'
op|'.'
name|'keeper'
op|'='
name|'datastore'
op|'.'
name|'Keeper'
op|'('
name|'prefix'
op|'='
string|'"net"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_get_keeper'
op|'.'
name|'keeper'
newline|'\n'
dedent|''
name|'_get_keeper'
op|'.'
name|'keeper'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
nl|'\n'
comment|'# CLEANUP:'
nl|'\n'
comment|'# TODO(ja): use singleton for usermanager instead of self.manager in vlanpool et al'
nl|'\n'
comment|'# TODO(ja): does vlanpool "keeper" need to know the min/max - shouldn\'t FLAGS always win?'
nl|'\n'
nl|'\n'
DECL|class|Network
name|'class'
name|'Network'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bridge_gets_ip'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'networks_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'load'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|to_dict
dedent|''
name|'def'
name|'to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'vlan'"
op|':'
name|'self'
op|'.'
name|'vlan'
op|','
nl|'\n'
string|"'network'"
op|':'
name|'self'
op|'.'
name|'network_str'
op|','
nl|'\n'
string|"'hosts'"
op|':'
name|'self'
op|'.'
name|'hosts'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|load
dedent|''
name|'def'
name|'load'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network_str'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'network'"
op|','
string|'"192.168.100.0/24"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hosts'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'hosts'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vlan'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vlan'"
op|','
number|'100'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
string|'"nova-%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'vlan'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'self'
op|'.'
name|'network_str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gateway'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'netmask'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'netmask'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'broadcast'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'broadcast'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bridge_name'
op|'='
string|'"br%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'vlan'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'to_dict'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__unicode__
dedent|''
name|'def'
name|'__unicode__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'to_dict'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_dict
name|'def'
name|'from_dict'
op|'('
name|'cls'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'arg'
name|'in'
name|'args'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'args'
op|'['
name|'arg'
op|']'
newline|'\n'
name|'del'
name|'args'
op|'['
name|'arg'
op|']'
newline|'\n'
name|'args'
op|'['
name|'str'
op|'('
name|'arg'
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'self'
op|'='
name|'cls'
op|'('
op|'**'
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_json
name|'def'
name|'from_json'
op|'('
name|'cls'
op|','
name|'json_string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'json_string'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'from_dict'
op|'('
name|'parsed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|range
dedent|''
name|'def'
name|'range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
op|'-'
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'self'
op|'.'
name|'network'
op|'['
name|'idx'
op|']'
newline|'\n'
nl|'\n'
DECL|member|allocate_ip
dedent|''
dedent|''
name|'def'
name|'allocate_ip'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ip'
name|'in'
name|'self'
op|'.'
name|'range'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'ip'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'address'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Allocating IP %s to %s"'
op|'%'
op|'('
name|'address'
op|','
name|'user_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'address'
op|']'
op|'='
op|'{'
nl|'\n'
string|'"address"'
op|':'
name|'address'
op|','
string|'"user_id"'
op|':'
name|'user_id'
op|','
string|"'mac'"
op|':'
name|'mac'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NoMoreAddresses'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_ip
dedent|''
name|'def'
name|'deallocate_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'ip_str'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'ip_str'
op|']'
newline|'\n'
comment|'# TODO(joshua) SCRUB from the leases file somehow'
nl|'\n'
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_addresses
dedent|''
name|'def'
name|'list_addresses'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'address'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Vlan
dedent|''
dedent|''
name|'class'
name|'Vlan'
op|'('
name|'Network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    VLAN configuration, that when expressed creates the vlan\n\n    properties:\n\n        vlan - integer (example: 42)\n        bridge_dev - string (example: eth0)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Vlan'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bridge_dev'
op|'='
name|'FLAGS'
op|'.'
name|'bridge_dev'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Vlan'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting VLAN inteface for %s network"'
op|'%'
op|'('
name|'self'
op|'.'
name|'vlan'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'vlan_create'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VirtNetwork
dedent|''
dedent|''
dedent|''
name|'class'
name|'VirtNetwork'
op|'('
name|'Vlan'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Virtual Network that can export libvirt configuration or express itself to\n    create a bridge (with or without an IP address/netmask/gateway)\n\n    properties:\n        bridge_name - string (example value: br42)\n        vlan - integer (example value: 42)\n        bridge_gets_ip - boolean used during bridge creation\n\n        if bridge_gets_ip then network address for bridge uses the properties:\n            gateway\n            broadcast\n            netmask\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VirtNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|virtXML
dedent|''
name|'def'
name|'virtXML'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" generate XML for libvirt network """'
newline|'\n'
nl|'\n'
name|'libvirt_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'net_libvirt_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'xml_info'
op|'='
op|'{'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
name|'self'
op|'.'
name|'bridge_name'
op|','
nl|'\n'
string|"'device'"
op|':'
string|'"vlan%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'vlan'
op|')'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'self'
op|'.'
name|'gateway'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'self'
op|'.'
name|'netmask'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'libvirt_xml'
op|'='
name|'libvirt_xml'
op|'%'
name|'xml_info'
newline|'\n'
name|'return'
name|'libvirt_xml'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" creates a bridge device on top of the Vlan """'
newline|'\n'
name|'super'
op|'('
name|'VirtNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting Bridge inteface for %s network"'
op|'%'
op|'('
name|'self'
op|'.'
name|'vlan'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'bridge_create'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|DHCPNetwork
dedent|''
dedent|''
dedent|''
name|'class'
name|'DHCPNetwork'
op|'('
name|'VirtNetwork'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    properties:\n        dhcp_listen_address: the ip of the gateway / dhcp host\n        dhcp_range_start: the first ip to give out\n        dhcp_range_end: the last ip to give out\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Initing DHCPNetwork object..."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bridge_gets_ip'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'dhcp_listen_address'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dhcp_range_start'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dhcp_range_end'
op|'='
name|'self'
op|'.'
name|'network'
op|'['
op|'-'
number|'2'
op|']'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'values'
op|'('
op|')'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting dnsmasq server for network with vlan %s"'
op|'%'
name|'self'
op|'.'
name|'vlan'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'start_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Not launching dnsmasq cause I don\'t think we have any hosts."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# if this is the last address, stop dns'
nl|'\n'
indent|'        '
name|'super'
op|'('
name|'DHCPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'values'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'stop_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'start_dnsmasq'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PrivateNetwork
dedent|''
dedent|''
dedent|''
name|'class'
name|'PrivateNetwork'
op|'('
name|'DHCPNetwork'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PrivateNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# self.express()'
nl|'\n'
nl|'\n'
DECL|member|to_dict
dedent|''
name|'def'
name|'to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'vlan'"
op|':'
name|'self'
op|'.'
name|'vlan'
op|','
nl|'\n'
string|"'network'"
op|':'
name|'self'
op|'.'
name|'network_str'
op|','
nl|'\n'
string|"'hosts'"
op|':'
name|'self'
op|'.'
name|'hosts'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PrivateNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'express'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PublicNetwork
dedent|''
dedent|''
name|'class'
name|'PublicNetwork'
op|'('
name|'Network'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'network'
op|'='
string|'"192.168.216.0/24"'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PublicNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'network'
op|'='
name|'network'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_ip
dedent|''
name|'def'
name|'allocate_ip'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ip'
name|'in'
name|'self'
op|'.'
name|'range'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'str'
op|'('
name|'ip'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'address'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Allocating IP %s to %s"'
op|'%'
op|'('
name|'address'
op|','
name|'user_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'address'
op|']'
op|'='
op|'{'
nl|'\n'
string|'"address"'
op|':'
name|'address'
op|','
string|'"user_id"'
op|':'
name|'user_id'
op|','
string|"'mac'"
op|':'
name|'mac'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NoMoreAddresses'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_ip
dedent|''
name|'def'
name|'deallocate_ip'
op|'('
name|'self'
op|','
name|'ip_str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'ip_str'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'ip_str'
op|']'
newline|'\n'
comment|'# TODO(joshua) SCRUB from the leases file somehow'
nl|'\n'
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'address'
op|'='
name|'ip_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|','
name|'private_ip'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'public_ip'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'addr'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'addr'
op|'.'
name|'has_key'
op|'('
string|"'private_ip'"
op|')'
name|'and'
name|'addr'
op|'['
string|"'private_ip'"
op|']'
op|'=='
name|'private_ip'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'AddressAlreadyAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'public_ip'
op|']'
op|'.'
name|'has_key'
op|'('
string|"'private_ip'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressAlreadyAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'hosts'
op|'['
name|'public_ip'
op|']'
op|'['
string|"'private_ip'"
op|']'
op|'='
name|'private_ip'
newline|'\n'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'public_ip'
op|']'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'instance_id'
newline|'\n'
name|'self'
op|'.'
name|'express'
op|'('
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'public_ip'
name|'in'
name|'self'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'public_ip'
op|']'
op|'.'
name|'has_key'
op|'('
string|"'private_ip'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAssociated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'deexpress'
op|'('
name|'public_ip'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'public_ip'
op|']'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'hosts'
op|'['
name|'public_ip'
op|']'
op|'['
string|"'instance_id'"
op|']'
newline|'\n'
comment|'# TODO Express the removal'
nl|'\n'
nl|'\n'
DECL|member|deexpress
dedent|''
name|'def'
name|'deexpress'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addr'
op|'='
name|'self'
op|'.'
name|'hosts'
op|'['
name|'address'
op|']'
newline|'\n'
name|'public_ip'
op|'='
name|'addr'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'private_ip'
op|'='
name|'addr'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"PREROUTING -t nat -d %s -j DNAT --to %s"'
op|'%'
op|'('
name|'public_ip'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"POSTROUTING -t nat -s %s -j SNAT --to %s"'
op|'%'
op|'('
name|'private_ip'
op|','
name|'public_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"FORWARD -d %s -p icmp -j ACCEPT"'
op|'%'
op|'('
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'protocol'
op|','
name|'port'
op|')'
name|'in'
op|'['
op|'('
string|'"tcp"'
op|','
number|'80'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'22'
op|')'
op|','
op|'('
string|'"udp"'
op|','
number|'1194'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'443'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'linux_net'
op|'.'
name|'remove_rule'
op|'('
string|'"FORWARD -d %s -p %s --dport %s -j ACCEPT"'
op|'%'
op|'('
name|'private_ip'
op|','
name|'protocol'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Todo - need to create IPTables natting entries for this net."'
op|')'
newline|'\n'
name|'addresses'
op|'='
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'            '
name|'addresses'
op|'='
op|'['
name|'self'
op|'.'
name|'hosts'
op|'['
name|'address'
op|']'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'addr'
name|'in'
name|'addresses'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'addr'
op|'.'
name|'has_key'
op|'('
string|"'private_ip'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'public_ip'
op|'='
name|'addr'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'private_ip'
op|'='
name|'addr'
op|'['
string|"'private_ip'"
op|']'
newline|'\n'
name|'linux_net'
op|'.'
name|'bind_public_ip'
op|'('
name|'public_ip'
op|','
name|'FLAGS'
op|'.'
name|'public_interface'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"PREROUTING -t nat -d %s -j DNAT --to %s"'
op|'%'
op|'('
name|'public_ip'
op|','
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"POSTROUTING -t nat -s %s -j SNAT --to %s"'
op|'%'
op|'('
name|'private_ip'
op|','
name|'public_ip'
op|')'
op|')'
newline|'\n'
comment|'# TODO: Get these from the secgroup datastore entries'
nl|'\n'
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p icmp -j ACCEPT"'
op|'%'
op|'('
name|'private_ip'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'protocol'
op|','
name|'port'
op|')'
name|'in'
op|'['
op|'('
string|'"tcp"'
op|','
number|'80'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'22'
op|')'
op|','
op|'('
string|'"udp"'
op|','
number|'1194'
op|')'
op|','
op|'('
string|'"tcp"'
op|','
number|'443'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'linux_net'
op|'.'
name|'confirm_rule'
op|'('
string|'"FORWARD -d %s -p %s --dport %s -j ACCEPT"'
op|'%'
op|'('
name|'private_ip'
op|','
name|'protocol'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkPool
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'NetworkPool'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
comment|'# TODO - Allocations need to be system global'
nl|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network'
op|'='
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'FLAGS'
op|'.'
name|'private_range'
op|')'
newline|'\n'
name|'netsize'
op|'='
name|'FLAGS'
op|'.'
name|'network_size'
newline|'\n'
name|'if'
name|'not'
name|'netsize'
name|'in'
op|'['
number|'4'
op|','
number|'8'
op|','
number|'16'
op|','
number|'32'
op|','
number|'64'
op|','
number|'128'
op|','
number|'256'
op|','
number|'512'
op|','
number|'1024'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotValidNetworkSize'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'netsize'
op|'='
name|'netsize'
newline|'\n'
name|'self'
op|'.'
name|'startvlan'
op|'='
name|'FLAGS'
op|'.'
name|'vlan_start'
newline|'\n'
nl|'\n'
DECL|member|get_from_vlan
dedent|''
name|'def'
name|'get_from_vlan'
op|'('
name|'self'
op|','
name|'vlan'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start'
op|'='
op|'('
name|'vlan'
op|'-'
name|'self'
op|'.'
name|'startvlan'
op|')'
op|'*'
name|'self'
op|'.'
name|'netsize'
newline|'\n'
name|'net_str'
op|'='
string|'"%s-%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'network'
op|'['
name|'start'
op|']'
op|','
name|'self'
op|'.'
name|'network'
op|'['
name|'start'
op|'+'
name|'self'
op|'.'
name|'netsize'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Allocating %s"'
op|'%'
name|'net_str'
op|')'
newline|'\n'
name|'return'
name|'net_str'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VlanPool
dedent|''
dedent|''
name|'class'
name|'VlanPool'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'start'
op|'='
name|'FLAGS'
op|'.'
name|'vlan_start'
newline|'\n'
name|'self'
op|'.'
name|'end'
op|'='
name|'FLAGS'
op|'.'
name|'vlan_end'
newline|'\n'
name|'self'
op|'.'
name|'vlans'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vlans'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vlanpool'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'='
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'for'
name|'user_id'
op|','
name|'vlan'
name|'in'
name|'self'
op|'.'
name|'vlans'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'vlanpool'
op|'['
name|'vlan'
op|']'
op|'='
name|'user_id'
newline|'\n'
nl|'\n'
DECL|member|to_dict
dedent|''
dedent|''
name|'def'
name|'to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'vlans'"
op|':'
name|'self'
op|'.'
name|'vlans'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'to_dict'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__unicode__
dedent|''
name|'def'
name|'__unicode__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'to_dict'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_dict
name|'def'
name|'from_dict'
op|'('
name|'cls'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'arg'
name|'in'
name|'args'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'args'
op|'['
name|'arg'
op|']'
newline|'\n'
name|'del'
name|'args'
op|'['
name|'arg'
op|']'
newline|'\n'
name|'args'
op|'['
name|'str'
op|'('
name|'arg'
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'self'
op|'='
name|'cls'
op|'('
op|'**'
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_json
name|'def'
name|'from_json'
op|'('
name|'cls'
op|','
name|'json_string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parsed'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'json_string'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'from_dict'
op|'('
name|'parsed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assign_vlan
dedent|''
name|'def'
name|'assign_vlan'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'vlan'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Assigning vlan %s to user %s"'
op|'%'
op|'('
name|'vlan'
op|','
name|'user_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'vlans'
op|'['
name|'user_id'
op|']'
op|'='
name|'vlan'
newline|'\n'
name|'self'
op|'.'
name|'vlanpool'
op|'['
name|'vlan'
op|']'
op|'='
name|'user_id'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'vlans'
op|'['
name|'user_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'old_user_id'
op|','
name|'vlan'
name|'in'
name|'self'
op|'.'
name|'vlans'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_user'
op|'('
name|'old_user_id'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'_get_keeper'
op|'('
op|')'
op|'['
string|'"%s-default"'
op|'%'
name|'old_user_id'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'del'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|'"%s-default"'
op|'%'
name|'old_user_id'
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'vlans'
op|'['
name|'old_user_id'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assign_vlan'
op|'('
name|'user_id'
op|','
name|'vlan'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'vlans'
op|'='
name|'self'
op|'.'
name|'vlanpool'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'vlans'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'start'
op|')'
newline|'\n'
name|'nextvlan'
op|'='
name|'max'
op|'('
name|'vlans'
op|')'
op|'+'
number|'1'
newline|'\n'
name|'if'
name|'nextvlan'
op|'=='
name|'self'
op|'.'
name|'end'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
string|'"Out of VLANs"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'assign_vlan'
op|'('
name|'user_id'
op|','
name|'nextvlan'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkController
dedent|''
dedent|''
name|'class'
name|'NetworkController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" The network controller is in charge of network connections  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting up the network controller."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'='
name|'users'
op|'.'
name|'UserManager'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pubnet'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'vlans'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'vlans'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|'='
op|'{'
string|"'vlan'"
op|':'
name|'FLAGS'
op|'.'
name|'public_vlan'
op|','
string|"'network'"
op|':'
name|'FLAGS'
op|'.'
name|'public_range'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|'='
op|'{'
string|"'vlan'"
op|':'
name|'FLAGS'
op|'.'
name|'public_vlan'
op|','
string|"'network'"
op|':'
name|'FLAGS'
op|'.'
name|'public_range'
op|'}'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'vlans'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# TODO : Get rid of old interfaces, bridges, and IPTables rules.'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|public_net
name|'def'
name|'public_net'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_pubnet'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_pubnet'
op|'='
name|'PublicNetwork'
op|'.'
name|'from_dict'
op|'('
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_pubnet'
op|'.'
name|'load'
op|'('
op|'**'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_pubnet'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|vlan_pool
name|'def'
name|'vlan_pool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'VlanPool'
op|'.'
name|'from_dict'
op|'('
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'vlans'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_network_from_name
dedent|''
name|'def'
name|'get_network_from_name'
op|'('
name|'self'
op|','
name|'network_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_dict'
op|'='
name|'_get_keeper'
op|'('
op|')'
op|'['
name|'network_name'
op|']'
newline|'\n'
name|'if'
name|'net_dict'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'PrivateNetwork'
op|'.'
name|'from_dict'
op|'('
name|'net_dict'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_public_ip_for_instance
dedent|''
name|'def'
name|'get_public_ip_for_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
comment|"# FIXME: this should be a lookup - iteration won't scale"
nl|'\n'
indent|'        '
name|'for'
name|'address_record'
name|'in'
name|'self'
op|'.'
name|'describe_addresses'
op|'('
name|'type'
op|'='
name|'PublicNetwork'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'address_record'
op|'.'
name|'get'
op|'('
string|"u'instance_id'"
op|','
string|"'free'"
op|')'
op|'=='
name|'instance_id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'address_record'
op|'['
string|"u'address'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_users_network
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_users_network'
op|'('
name|'self'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" get a user\'s private network, allocating one if needed """'
newline|'\n'
nl|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_user'
op|'('
name|'user_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'user'
op|':'
newline|'\n'
indent|'           '
name|'raise'
name|'Exception'
op|'('
string|'"User %s doesn\'t exist, uhoh."'
op|'%'
name|'user_id'
op|')'
newline|'\n'
dedent|''
name|'usernet'
op|'='
name|'self'
op|'.'
name|'get_network_from_name'
op|'('
string|'"%s-default"'
op|'%'
name|'user_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'usernet'
op|':'
newline|'\n'
indent|'            '
name|'pool'
op|'='
name|'self'
op|'.'
name|'vlan_pool'
newline|'\n'
name|'vlan'
op|'='
name|'pool'
op|'.'
name|'next'
op|'('
name|'user_id'
op|')'
newline|'\n'
name|'private_pool'
op|'='
name|'NetworkPool'
op|'('
op|')'
newline|'\n'
name|'network_str'
op|'='
name|'private_pool'
op|'.'
name|'get_from_vlan'
op|'('
name|'vlan'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Constructing network %s and %s for %s"'
op|'%'
op|'('
name|'network_str'
op|','
name|'vlan'
op|','
name|'user_id'
op|')'
op|')'
newline|'\n'
name|'usernet'
op|'='
name|'PrivateNetwork'
op|'('
nl|'\n'
name|'network'
op|'='
name|'network_str'
op|','
nl|'\n'
name|'vlan'
op|'='
name|'vlan'
op|')'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|'"%s-default"'
op|'%'
name|'user_id'
op|']'
op|'='
name|'usernet'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'vlans'"
op|']'
op|'='
name|'pool'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'usernet'
newline|'\n'
nl|'\n'
DECL|member|allocate_address
dedent|''
name|'def'
name|'allocate_address'
op|'('
name|'self'
op|','
name|'user_id'
op|','
name|'mac'
op|'='
name|'None'
op|','
name|'type'
op|'='
name|'PrivateNetwork'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ip'
op|'='
name|'None'
newline|'\n'
name|'net_name'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'type'
op|'=='
name|'PrivateNetwork'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'self'
op|'.'
name|'get_users_network'
op|'('
name|'user_id'
op|')'
newline|'\n'
name|'ip'
op|'='
name|'net'
op|'.'
name|'allocate_ip'
op|'('
name|'user_id'
op|','
name|'mac'
op|')'
newline|'\n'
name|'net_name'
op|'='
name|'net'
op|'.'
name|'name'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|'"%s-default"'
op|'%'
name|'user_id'
op|']'
op|'='
name|'net'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'self'
op|'.'
name|'public_net'
newline|'\n'
name|'ip'
op|'='
name|'net'
op|'.'
name|'allocate_ip'
op|'('
name|'user_id'
op|','
name|'mac'
op|')'
newline|'\n'
name|'net_name'
op|'='
name|'net'
op|'.'
name|'name'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|'='
name|'net'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'ip'
op|','
name|'net_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deallocate_address
dedent|''
name|'def'
name|'deallocate_address'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'address'
name|'in'
name|'self'
op|'.'
name|'public_net'
op|'.'
name|'network'
op|':'
newline|'\n'
indent|'            '
name|'net'
op|'='
name|'self'
op|'.'
name|'public_net'
newline|'\n'
name|'rv'
op|'='
name|'net'
op|'.'
name|'deallocate_ip'
op|'('
name|'str'
op|'('
name|'address'
op|')'
op|')'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|'='
name|'net'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
dedent|''
name|'for'
name|'user'
name|'in'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_users'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'address'
name|'in'
name|'self'
op|'.'
name|'get_users_network'
op|'('
name|'user'
op|'.'
name|'id'
op|')'
op|'.'
name|'network'
op|':'
newline|'\n'
indent|'                '
name|'net'
op|'='
name|'self'
op|'.'
name|'get_users_network'
op|'('
name|'user'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'rv'
op|'='
name|'net'
op|'.'
name|'deallocate_ip'
op|'('
name|'str'
op|'('
name|'address'
op|')'
op|')'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|'"%s-default"'
op|'%'
name|'user'
op|'.'
name|'id'
op|']'
op|'='
name|'net'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'AddressNotAllocated'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_addresses
dedent|''
name|'def'
name|'describe_addresses'
op|'('
name|'self'
op|','
name|'type'
op|'='
name|'PrivateNetwork'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'=='
name|'PrivateNetwork'
op|':'
newline|'\n'
indent|'            '
name|'addresses'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'user'
name|'in'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_users'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'addresses'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'get_users_network'
op|'('
name|'user'
op|'.'
name|'id'
op|')'
op|'.'
name|'list_addresses'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'addresses'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'public_net'
op|'.'
name|'list_addresses'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'private_ip'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|'='
name|'self'
op|'.'
name|'public_net'
newline|'\n'
name|'rv'
op|'='
name|'net'
op|'.'
name|'associate_address'
op|'('
name|'address'
op|','
name|'private_ip'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|'='
name|'net'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|'='
name|'self'
op|'.'
name|'public_net'
newline|'\n'
name|'rv'
op|'='
name|'net'
op|'.'
name|'disassociate_address'
op|'('
name|'address'
op|')'
newline|'\n'
name|'_get_keeper'
op|'('
op|')'
op|'['
string|"'public'"
op|']'
op|'='
name|'net'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|express
dedent|''
name|'def'
name|'express'
op|'('
name|'self'
op|','
name|'address'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'user'
name|'in'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_users'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'get_users_network'
op|'('
name|'user'
op|'.'
name|'id'
op|')'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|report_state
dedent|''
dedent|''
name|'def'
name|'report_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

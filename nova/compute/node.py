begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright [2010] [Anso Labs, LLC]'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'#    you may not use this file except in compliance with the License.'
nl|'\n'
comment|'#    You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#        http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'#    See the License for the specific language governing permissions and'
nl|'\n'
comment|'#    limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCompute Node:\n\n    Runs on each compute node, managing the\n    hypervisor using libvirt.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'task'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'service'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'libvirt'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'err'
op|':'
newline|'\n'
indent|'    '
name|'logging'
op|'.'
name|'warning'
op|'('
string|"'no libvirt found'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'fakevirt'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'process'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'disk'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objectstore'
name|'import'
name|'image'
comment|'# for image_path flag'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'libvirt_xml_template'"
op|','
nl|'\n'
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'compute/libvirt.xml.template'"
op|')'
op|','
nl|'\n'
string|"'Network XML Template'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_bool'
op|'('
string|"'use_s3'"
op|','
name|'True'
op|','
nl|'\n'
string|"'whether to get images from s3 or use local copy'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'instances_path'"
op|','
name|'utils'
op|'.'
name|'abspath'
op|'('
string|"'../instances'"
op|')'
op|','
nl|'\n'
string|"'where instances are stored on disk'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|INSTANCE_TYPES
name|'INSTANCE_TYPES'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'INSTANCE_TYPES'
op|'['
string|"'m1.tiny'"
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'local_gb'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'INSTANCE_TYPES'
op|'['
string|"'m1.small'"
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'1024'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'local_gb'"
op|':'
number|'10'
op|'}'
newline|'\n'
name|'INSTANCE_TYPES'
op|'['
string|"'m1.medium'"
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'2048'
op|','
string|"'vcpus'"
op|':'
number|'2'
op|','
string|"'local_gb'"
op|':'
number|'10'
op|'}'
newline|'\n'
name|'INSTANCE_TYPES'
op|'['
string|"'m1.large'"
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'4096'
op|','
string|"'vcpus'"
op|':'
number|'4'
op|','
string|"'local_gb'"
op|':'
number|'10'
op|'}'
newline|'\n'
name|'INSTANCE_TYPES'
op|'['
string|"'m1.xlarge'"
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'8192'
op|','
string|"'vcpus'"
op|':'
number|'4'
op|','
string|"'local_gb'"
op|':'
number|'10'
op|'}'
newline|'\n'
name|'INSTANCE_TYPES'
op|'['
string|"'c1.medium'"
op|']'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'2048'
op|','
string|"'vcpus'"
op|':'
number|'4'
op|','
string|"'local_gb'"
op|':'
number|'10'
op|'}'
newline|'\n'
nl|'\n'
comment|'# The number of processes to start in our process pool'
nl|'\n'
comment|'# TODO(termie): this should probably be a flag and the pool should probably'
nl|'\n'
comment|'#               be a singleton'
nl|'\n'
DECL|variable|PROCESS_POOL_SIZE
name|'PROCESS_POOL_SIZE'
op|'='
number|'4'
newline|'\n'
nl|'\n'
DECL|class|Node
name|'class'
name|'Node'
op|'('
name|'object'
op|','
name|'service'
op|'.'
name|'Service'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Manages the running instances.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" load configuration options for this node and connect to libvirt """'
newline|'\n'
name|'super'
op|'('
name|'Node'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'='
name|'self'
op|'.'
name|'_get_connection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pool'
op|'='
name|'process'
op|'.'
name|'Pool'
op|'('
name|'PROCESS_POOL_SIZE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instdir'
op|'='
name|'model'
op|'.'
name|'InstanceDirectory'
op|'('
op|')'
newline|'\n'
comment|'# TODO(joshua): This needs to ensure system state, specifically: modprobe aoe'
nl|'\n'
nl|'\n'
DECL|member|_get_connection
dedent|''
name|'def'
name|'_get_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" returns a libvirt connection object """'
newline|'\n'
comment|'# TODO(termie): maybe lazy load after initial check for permissions'
nl|'\n'
comment|'# TODO(termie): check whether we can be disconnected'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_libvirt'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'fakevirt'
op|'.'
name|'FakeVirtConnection'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'auth'
op|'='
op|'['
op|'['
name|'libvirt'
op|'.'
name|'VIR_CRED_AUTHNAME'
op|','
name|'libvirt'
op|'.'
name|'VIR_CRED_NOECHOPROMPT'
op|']'
op|','
nl|'\n'
string|"'root'"
op|','
nl|'\n'
name|'None'
op|']'
newline|'\n'
name|'conn'
op|'='
name|'libvirt'
op|'.'
name|'openAuth'
op|'('
string|"'qemu:///system'"
op|','
name|'auth'
op|','
number|'0'
op|')'
newline|'\n'
name|'if'
name|'conn'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'error'
op|'('
string|"'Failed to open connection to the hypervisor'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'conn'
newline|'\n'
nl|'\n'
DECL|member|noop
dedent|''
name|'def'
name|'noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" simple test of an AMQP message call """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|"'PONG'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance
dedent|''
name|'def'
name|'get_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
comment|'# inst = self.instdir.get(instance_id)'
nl|'\n'
comment|'# return inst'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'instdir'
op|'.'
name|'exists'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Instance'
op|'.'
name|'fromName'
op|'('
name|'self'
op|'.'
name|'_conn'
op|','
name|'self'
op|'.'
name|'_pool'
op|','
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|adopt_instances
name|'def'
name|'adopt_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" if there are instances already running, adopt them """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
number|'0'
op|')'
newline|'\n'
name|'instance_names'
op|'='
op|'['
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'x'
op|')'
op|'.'
name|'name'
op|'('
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|']'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'instance_names'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'new_inst'
op|'='
name|'Instance'
op|'.'
name|'fromName'
op|'('
name|'self'
op|'.'
name|'_conn'
op|','
name|'self'
op|'.'
name|'_pool'
op|','
name|'name'
op|')'
newline|'\n'
name|'new_inst'
op|'.'
name|'update_state'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'_instances'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|describe_instances
name|'def'
name|'describe_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retval'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'inst'
name|'in'
name|'self'
op|'.'
name|'instdir'
op|'.'
name|'by_node'
op|'('
name|'FLAGS'
op|'.'
name|'node_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'retval'
op|'['
name|'inst'
op|'['
string|"'instance_id'"
op|']'
op|']'
op|'='
op|'('
name|'Instance'
op|'.'
name|'fromName'
op|'('
name|'self'
op|'.'
name|'_conn'
op|','
name|'self'
op|'.'
name|'_pool'
op|','
name|'inst'
op|'['
string|"'instance_id'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'retval'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|report_state
name|'def'
name|'report_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Reporting State"'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" launch a new instance with specified options """'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting instance %s..."'
op|'%'
op|'('
name|'instance_id'
op|')'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'self'
op|'.'
name|'instdir'
op|'.'
name|'get'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'inst'
op|'['
string|"'node_name'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'node_name'
newline|'\n'
name|'inst'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
comment|'# TODO(vish) check to make sure the availability zone matches'
nl|'\n'
name|'new_inst'
op|'='
name|'Instance'
op|'('
name|'self'
op|'.'
name|'_conn'
op|','
name|'name'
op|'='
name|'instance_id'
op|','
nl|'\n'
name|'pool'
op|'='
name|'self'
op|'.'
name|'_pool'
op|','
name|'data'
op|'='
name|'inst'
op|')'
newline|'\n'
name|'if'
name|'new_inst'
op|'.'
name|'is_running'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|'"Instance is already running"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'new_inst'
op|'.'
name|'spawn'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|terminate_instance
name|'def'
name|'terminate_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" terminate an instance on this machine """'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Got told to terminate instance %s"'
op|'%'
name|'instance_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'get_instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
comment|'# inst = self.instdir.get(instance_id)'
nl|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
nl|'\n'
string|"'trying to terminate unknown instance: %s'"
op|'%'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
comment|'# d.addCallback(lambda x: inst.destroy())'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|reboot_instance
name|'def'
name|'reboot_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" reboot an instance on this server\n        KVM doesn\'t support reboot, so we terminate and restart """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'get_instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
nl|'\n'
string|"'trying to reboot unknown instance: %s'"
op|'%'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instance'
op|'.'
name|'reboot'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" send the console output for an instance """'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Getting console output for %s"'
op|'%'
op|'('
name|'instance_id'
op|')'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'self'
op|'.'
name|'instdir'
op|'.'
name|'get'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'get_instance'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
nl|'\n'
string|"'trying to get console log for unknown: %s'"
op|'%'
name|'instance_id'
op|')'
newline|'\n'
dedent|''
name|'rv'
op|'='
name|'yield'
name|'instance'
op|'.'
name|'console_output'
op|'('
op|')'
newline|'\n'
comment|'# TODO(termie): this stuff belongs in the API layer, no need to'
nl|'\n'
comment|'#               munge the data we send to ourselves'
nl|'\n'
name|'output'
op|'='
op|'{'
string|'"InstanceId"'
op|':'
name|'instance_id'
op|','
nl|'\n'
string|'"Timestamp"'
op|':'
string|'"2"'
op|','
nl|'\n'
string|'"output"'
op|':'
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'rv'
op|')'
op|'}'
newline|'\n'
name|'defer'
op|'.'
name|'returnValue'
op|'('
name|'output'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'instance_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'aoe_device'
op|'='
name|'None'
op|','
name|'mountpoint'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'runthis'
op|'('
string|'"Attached Volume: %s"'
op|','
nl|'\n'
string|'"sudo virsh attach-disk %s /dev/etherd/%s %s"'
nl|'\n'
op|'%'
op|'('
name|'instance_id'
op|','
name|'aoe_device'
op|','
name|'mountpoint'
op|'.'
name|'split'
op|'('
string|'"/"'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_init_aoe
dedent|''
name|'def'
name|'_init_aoe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'runthis'
op|'('
string|'"Doin an AoE discover, returns %s"'
op|','
string|'"sudo aoe-discover"'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'runthis'
op|'('
string|'"Doin an AoE stat, returns %s"'
op|','
string|'"sudo aoe-stat"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|detach_volume
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" detach a volume from an instance """'
newline|'\n'
comment|'# despite the documentation, virsh detach-disk just wants the device'
nl|'\n'
comment|'# name without the leading /dev/'
nl|'\n'
name|'target'
op|'='
name|'mountpoint'
op|'.'
name|'rpartition'
op|'('
string|"'/dev/'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'utils'
op|'.'
name|'runthis'
op|'('
string|'"Detached Volume: %s"'
op|','
string|'"sudo virsh detach-disk %s %s "'
nl|'\n'
op|'%'
op|'('
name|'instance_id'
op|','
name|'target'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Group
dedent|''
dedent|''
name|'class'
name|'Group'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'group_id'
op|'='
name|'group_id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProductCode
dedent|''
dedent|''
name|'class'
name|'ProductCode'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'product_code'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'product_code'
op|'='
name|'product_code'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_image
dedent|''
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'data'
op|','
name|'libvirt_xml'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" create libvirt.xml and copy files into instance path """'
newline|'\n'
DECL|function|basepath
name|'def'
name|'basepath'
op|'('
name|'path'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'data'
op|'['
string|"'basepath'"
op|']'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|imagepath
dedent|''
name|'def'
name|'imagepath'
op|'('
name|'path'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'images_path'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|image_url
dedent|''
name|'def'
name|'image_url'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s:%s/_images/%s"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'s3_host'
op|','
name|'FLAGS'
op|'.'
name|'s3_port'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'logging'
op|'.'
name|'info'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'data'
op|'['
string|"'basepath'"
op|']'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'data'
op|'['
string|"'basepath'"
op|']'
op|','
number|'0777'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
comment|'# TODO: there is already an instance with this name, do something'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Creating image for: %s'"
op|','
name|'data'
op|'['
string|"'instance_id'"
op|']'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'basepath'
op|'('
string|"'libvirt.xml'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
name|'libvirt_xml'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_libvirt'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'use_s3'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'fetchfile'
op|'('
name|'image_url'
op|'('
string|'"%s/image"'
op|'%'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
op|','
nl|'\n'
name|'basepath'
op|'('
string|"'disk-raw'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'fetchfile'
op|'('
name|'image_url'
op|'('
string|'"%s/image"'
op|'%'
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|')'
op|','
nl|'\n'
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'utils'
op|'.'
name|'fetchfile'
op|'('
name|'image_url'
op|'('
string|'"%s/image"'
op|'%'
name|'data'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
op|','
nl|'\n'
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'imagepath'
op|'('
string|'"%s/image"'
op|'%'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
op|','
nl|'\n'
name|'basepath'
op|'('
string|"'disk-raw'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'imagepath'
op|'('
string|'"%s/image"'
op|'%'
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|')'
op|','
nl|'\n'
name|'basepath'
op|'('
string|"'kernel'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'imagepath'
op|'('
string|'"%s/image"'
op|'%'
nl|'\n'
name|'data'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
op|','
nl|'\n'
name|'basepath'
op|'('
string|"'ramdisk'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'data'
op|'['
string|"'key_data'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Injecting key data into image %s'"
op|'%'
nl|'\n'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
name|'disk'
op|'.'
name|'inject_key'
op|'('
name|'data'
op|'['
string|"'key_data'"
op|']'
op|','
name|'basepath'
op|'('
string|"'disk-raw'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'remove'
op|'('
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'bytes'
op|'='
name|'INSTANCE_TYPES'
op|'['
name|'data'
op|'['
string|"'instance_type'"
op|']'
op|']'
op|'['
string|"'local_gb'"
op|']'
op|'*'
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'disk'
op|'.'
name|'partition'
op|'('
name|'basepath'
op|'('
string|"'disk-raw'"
op|')'
op|','
name|'basepath'
op|'('
string|"'disk'"
op|')'
op|','
name|'bytes'
op|')'
newline|'\n'
dedent|''
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Done create image for: %s'"
op|','
name|'data'
op|'['
string|"'instance_id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'exception'"
op|':'
name|'ex'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Instance
dedent|''
dedent|''
name|'class'
name|'Instance'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|NOSTATE
indent|'    '
name|'NOSTATE'
op|'='
number|'0x00'
newline|'\n'
DECL|variable|RUNNING
name|'RUNNING'
op|'='
number|'0x01'
newline|'\n'
DECL|variable|BLOCKED
name|'BLOCKED'
op|'='
number|'0x02'
newline|'\n'
DECL|variable|PAUSED
name|'PAUSED'
op|'='
number|'0x03'
newline|'\n'
DECL|variable|SHUTDOWN
name|'SHUTDOWN'
op|'='
number|'0x04'
newline|'\n'
DECL|variable|SHUTOFF
name|'SHUTOFF'
op|'='
number|'0x05'
newline|'\n'
DECL|variable|CRASHED
name|'CRASHED'
op|'='
number|'0x06'
newline|'\n'
nl|'\n'
DECL|member|is_pending
name|'def'
name|'is_pending'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'state'
op|'=='
name|'Instance'
op|'.'
name|'NOSTATE'
name|'or'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'pending'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_destroyed
dedent|''
name|'def'
name|'is_destroyed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'state'
op|'=='
name|'Instance'
op|'.'
name|'SHUTOFF'
newline|'\n'
nl|'\n'
DECL|member|is_running
dedent|''
name|'def'
name|'is_running'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Instance state is: %s"'
op|'%'
name|'self'
op|'.'
name|'state'
op|')'
newline|'\n'
name|'return'
op|'('
name|'self'
op|'.'
name|'state'
op|'=='
name|'Instance'
op|'.'
name|'RUNNING'
name|'or'
name|'self'
op|'.'
name|'state'
op|'=='
string|"'running'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'pool'
op|','
name|'name'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" spawn an instance with a given name """'
newline|'\n'
comment|'# TODO(termie): pool should probably be a singleton instead of being passed'
nl|'\n'
comment|'#               here and in the classmethods'
nl|'\n'
name|'self'
op|'.'
name|'_pool'
op|'='
name|'pool'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'='
name|'conn'
newline|'\n'
comment|'# TODO(vish): this can be removed after data has been updated'
nl|'\n'
comment|"# data doesn't seem to have a working iterator so in doesn't work"
nl|'\n'
name|'if'
name|'not'
name|'data'
op|'.'
name|'get'
op|'('
string|"'owner_id'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'data'
op|'['
string|"'owner_id'"
op|']'
newline|'\n'
name|'data'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'data'
op|'['
string|"'owner_id'"
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'datamodel'
op|'='
name|'data'
newline|'\n'
nl|'\n'
comment|'# NOTE(termie): to be passed to multiprocess self._s must be'
nl|'\n'
comment|'#               pickle-able by cPickle'
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# TODO(termie): is instance_type that actual name for this?'
nl|'\n'
name|'size'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'instance_type'"
op|','
name|'FLAGS'
op|'.'
name|'default_instance_type'
op|')'
newline|'\n'
name|'if'
name|'size'
name|'not'
name|'in'
name|'INSTANCE_TYPES'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|"'invalid instance type: %s'"
op|'%'
name|'size'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_s'
op|'.'
name|'update'
op|'('
name|'INSTANCE_TYPES'
op|'['
name|'size'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'name'"
op|']'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'instance_type'"
op|']'
op|'='
name|'size'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'mac_address'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'mac_address'"
op|','
string|"'df:df:df:df:df:df'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'basepath'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'basepath'"
op|','
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'memory_kb'"
op|']'
op|'='
name|'int'
op|'('
name|'self'
op|'.'
name|'_s'
op|'['
string|"'memory_mb'"
op|']'
op|')'
op|'*'
number|'1024'
newline|'\n'
comment|'# TODO(joshua) - Get this from network directory controller later'
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'bridge_name'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'bridge_name'"
op|','
string|"'br0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'image_id'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'image_id'"
op|','
name|'FLAGS'
op|'.'
name|'default_image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'kernel_id'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|','
name|'FLAGS'
op|'.'
name|'default_kernel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|','
name|'FLAGS'
op|'.'
name|'default_ramdisk'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'user_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|','
name|'self'
op|'.'
name|'_s'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'node_name'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'node_name'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'user_data'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'user_data'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'ami_launch_index'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'launch_time'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'launch_time'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'reservation_id'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'reservation_id'"
op|','
name|'None'
op|')'
newline|'\n'
comment|"# self._s['state'] = Instance.NOSTATE"
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'state'"
op|','
name|'Instance'
op|'.'
name|'NOSTATE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'key_data'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'key_data'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO: we may not need to save the next few'
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'groups'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'security_group'"
op|','
op|'['
string|"'default'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'product_codes'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'product_code'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'key_name'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'key_name'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'addressing_type'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'addressing_type'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'availability_zone'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'availability_zone'"
op|','
string|"'fixme'"
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO: put real dns items here'
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'private_dns_name'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'private_dns_name'"
op|','
string|"'fixme'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'dns_name'"
op|']'
op|'='
name|'data'
op|'.'
name|'get'
op|'('
string|"'dns_name'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'private_dns_name'"
op|']'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Finished init of Instance with id of %s"'
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|toXml
dedent|''
name|'def'
name|'toXml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# TODO(termie): cache?'
nl|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting the toXML method"'
op|')'
newline|'\n'
name|'libvirt_xml'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_xml_template'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'xml_info'
op|'='
name|'self'
op|'.'
name|'_s'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
comment|'#xml_info.update(self._s)'
nl|'\n'
nl|'\n'
comment|'# TODO(termie): lazy lazy hack because xml is annoying'
nl|'\n'
name|'xml_info'
op|'['
string|"'nova'"
op|']'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'_s'
op|')'
newline|'\n'
name|'libvirt_xml'
op|'='
name|'libvirt_xml'
op|'%'
name|'xml_info'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Finished the toXML method"'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'libvirt_xml'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|fromName
name|'def'
name|'fromName'
op|'('
name|'cls'
op|','
name|'conn'
op|','
name|'pool'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" use the saved data for reloading the instance """'
newline|'\n'
comment|'# if FLAGS.fake_libvirt:'
nl|'\n'
comment|"#     raise Exception('this is a bit useless, eh?')"
nl|'\n'
nl|'\n'
name|'instdir'
op|'='
name|'model'
op|'.'
name|'InstanceDirectory'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instdir'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'('
name|'conn'
op|'='
name|'conn'
op|','
name|'pool'
op|'='
name|'pool'
op|','
name|'name'
op|'='
name|'name'
op|','
name|'data'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|state
name|'def'
name|'state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|name
name|'def'
name|'name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_s'
newline|'\n'
nl|'\n'
DECL|member|info
dedent|''
name|'def'
name|'info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Getting info for dom %s"'
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
op|'('
name|'state'
op|','
name|'max_mem'
op|','
name|'mem'
op|','
name|'num_cpu'
op|','
name|'cpu_time'
op|')'
op|'='
name|'virt_dom'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'state'"
op|':'
name|'state'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'max_mem'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'mem'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'num_cpu'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
name|'cpu_time'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|update_state
dedent|''
name|'def'
name|'update_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
name|'self'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
name|'info'
op|'['
string|"'state'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'node_name'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'node_name'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|destroy
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'is_destroyed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|"'trying to destroy already destroyed'"
nl|'\n'
string|"' instance: %s'"
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|"'shutting_down'"
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'virt_dom'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'virt_dom'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'_err'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|"# If the instance is already terminated, we're still happy"
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'destroy'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# TODO(termie): short-circuit me for tests'
nl|'\n'
comment|"# WE'LL save this for when we do shutdown,"
nl|'\n'
comment|'# instead of destroy - but destroy returns immediately'
nl|'\n'
name|'timer'
op|'='
name|'task'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|function|_wait_for_shutdown
name|'def'
name|'_wait_for_shutdown'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'='
name|'self'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'info'
op|'['
string|"'state'"
op|']'
op|'=='
name|'Instance'
op|'.'
name|'SHUTDOWN'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
op|'='
name|'Instance'
op|'.'
name|'SHUTDOWN'
newline|'\n'
comment|"#self.datamodel['state'] = 'shutdown'"
nl|'\n'
comment|'#self.datamodel.save()'
nl|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
op|'='
name|'Instance'
op|'.'
name|'SHUTDOWN'
newline|'\n'
name|'timer'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'timer'
op|'.'
name|'f'
op|'='
name|'_wait_for_shutdown'
newline|'\n'
name|'timer'
op|'.'
name|'start'
op|'('
name|'interval'
op|'='
number|'0.5'
op|','
name|'now'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# if not self.is_running():'
nl|'\n'
comment|'#     raise exception.Error('
nl|'\n'
comment|"#             'trying to reboot a non-running'"
nl|'\n'
comment|"#             'instance: %s (state: %s)' % (self.name, self.state))"
nl|'\n'
nl|'\n'
indent|'        '
name|'yield'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|"'rebooting'"
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
op|'='
name|'Instance'
op|'.'
name|'NOSTATE'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'self'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# TODO(termie): this should actually register a callback to check'
nl|'\n'
comment|'#               for successful boot'
nl|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|"'running'"
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
op|'='
name|'Instance'
op|'.'
name|'RUNNING'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'rebooted instance %s'"
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'defer'
op|'.'
name|'returnValue'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|spawn
name|'def'
name|'spawn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|'"spawning"'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Starting spawn in Instance"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'toXml'
op|'('
op|')'
newline|'\n'
DECL|function|_launch
name|'def'
name|'_launch'
op|'('
name|'retvals'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|"'launching'"
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Arrived in _launch"'
op|')'
newline|'\n'
name|'if'
name|'retvals'
name|'and'
string|"'exception'"
name|'in'
name|'retvals'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'retvals'
op|'['
string|"'exception'"
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'createXML'
op|'('
name|'self'
op|'.'
name|'toXml'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# TODO(termie): this should actually register'
nl|'\n'
comment|'# a callback to check for successful boot'
nl|'\n'
name|'self'
op|'.'
name|'_s'
op|'['
string|"'state'"
op|']'
op|'='
name|'Instance'
op|'.'
name|'RUNNING'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|"'running'"
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Instance is running"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'debug'
op|'('
name|'ex'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'['
string|"'state'"
op|']'
op|'='
string|"'shutdown'"
newline|'\n'
name|'self'
op|'.'
name|'datamodel'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
comment|'#return self'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'_pool'
op|'.'
name|'apply'
op|'('
name|'_create_image'
op|','
name|'self'
op|'.'
name|'_s'
op|','
name|'xml'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_launch'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|console_output
name|'def'
name|'console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'fake_libvirt'
op|':'
newline|'\n'
indent|'            '
name|'fname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_s'
op|'['
string|"'basepath'"
op|']'
op|','
string|"'console.log'"
op|')'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'fname'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'console'
op|'='
name|'f'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'console'
op|'='
string|"'FAKE CONSOLE OUTPUT'"
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'console'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_mac
dedent|''
name|'def'
name|'generate_mac'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mac'
op|'='
op|'['
number|'0x00'
op|','
number|'0x16'
op|','
number|'0x3e'
op|','
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0x7f'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'return'
string|"':'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
string|'"%02x"'
op|'%'
name|'x'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkNode
dedent|''
dedent|''
name|'class'
name|'NetworkNode'
op|'('
name|'Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NetworkNode'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'virtNets'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|add_network
dedent|''
name|'def'
name|'add_network'
op|'('
name|'self'
op|','
name|'net_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|'='
name|'network'
op|'.'
name|'VirtNetwork'
op|'('
op|'**'
name|'net_dict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'virtNets'
op|'['
name|'net'
op|'.'
name|'name'
op|']'
op|'='
name|'net'
newline|'\n'
name|'self'
op|'.'
name|'virtNets'
op|'['
name|'net'
op|'.'
name|'name'
op|']'
op|'.'
name|'express'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'{'
string|"'retval'"
op|':'
string|"'network added'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'self'
op|'.'
name|'instdir'
op|'.'
name|'get'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'net_dict'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'inst'
op|'.'
name|'get'
op|'('
string|"'network_str'"
op|','
string|'"{}"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_network'
op|'('
name|'net_dict'
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'NetworkNode'
op|','
name|'self'
op|')'
op|'.'
name|'run_instance'
op|'('
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

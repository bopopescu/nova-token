begin_unit
comment|'# Copyright (c) 2012 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Compute API that proxies via Cells Service."""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'rpcapi'
name|'as'
name|'cells_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|check_instance_state
name|'check_instance_state'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_state'
newline|'\n'
DECL|variable|wrap_check_policy
name|'wrap_check_policy'
op|'='
name|'compute_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|variable|check_policy
name|'check_policy'
op|'='
name|'compute_api'
op|'.'
name|'check_policy'
newline|'\n'
DECL|variable|check_instance_lock
name|'check_instance_lock'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_lock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_cell
name|'def'
name|'validate_cell'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
DECL|function|_wrapped
indent|'    '
name|'def'
name|'_wrapped'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_validate_cell'
op|'('
name|'instance'
op|','
name|'fn'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'return'
name|'fn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'_wrapped'
op|'.'
name|'__name__'
op|'='
name|'fn'
op|'.'
name|'__name__'
newline|'\n'
name|'return'
name|'_wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRPCAPINoOp
dedent|''
name|'class'
name|'ComputeRPCAPINoOp'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__getattr__
indent|'    '
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
DECL|function|_noop_rpc_wrapper
indent|'        '
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SchedulerRPCAPIRedirect
dedent|''
dedent|''
name|'class'
name|'SchedulerRPCAPIRedirect'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cells_rpcapi_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi_obj'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
DECL|function|_noop_rpc_wrapper
indent|'        '
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
DECL|member|run_instance
dedent|''
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'schedule_run_instance'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeCellsAPI
dedent|''
dedent|''
name|'class'
name|'ComputeCellsAPI'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
comment|'# Avoid casts/calls directly to compute'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'ComputeRPCAPINoOp'
op|'('
op|')'
newline|'\n'
comment|'# Redirect scheduler run_instance to cells.'
nl|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'='
name|'SchedulerRPCAPIRedirect'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cell_read_only
dedent|''
name|'def'
name|'_cell_read_only'
op|'('
name|'self'
op|','
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Is the target cell in a read-only mode?"""'
newline|'\n'
comment|'# FIXME(comstud): Add support for this.'
nl|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_validate_cell
dedent|''
name|'def'
name|'_validate_cell'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_cell_read_only'
op|'('
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|'"vm_state"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
string|'"temporary_readonly"'
op|','
nl|'\n'
name|'method'
op|'='
name|'method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cast_to_cells
dedent|''
dedent|''
name|'def'
name|'_cast_to_cells'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'cast_compute_api_method'
op|'('
name|'context'
op|','
name|'cell_name'
op|','
nl|'\n'
name|'method'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_to_cells
dedent|''
name|'def'
name|'_call_to_cells'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'call_compute_api_method'
op|'('
name|'context'
op|','
name|'cell_name'
op|','
nl|'\n'
name|'method'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_requested_networks
dedent|''
name|'def'
name|'_check_requested_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override compute API\'s checking of this.  It\'ll happen in\n        child cell\n        """'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|_validate_image_href
dedent|''
name|'def'
name|'_validate_image_href'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_href'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override compute API\'s checking of this.  It\'ll happen in\n        child cell\n        """'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|_create_image
dedent|''
name|'def'
name|'_create_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'image_type'
op|','
nl|'\n'
name|'backup_type'
op|'='
name|'None'
op|','
name|'rotation'
op|'='
name|'None'
op|','
name|'extra_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'backup_type'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'backup'"
op|','
nl|'\n'
name|'name'
op|','
name|'backup_type'
op|','
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'extra_properties'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'snapshot'"
op|','
nl|'\n'
name|'name'
op|','
name|'extra_properties'
op|'='
name|'extra_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We can use the base functionality, but I left this here just\n        for completeness.\n        """'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'create'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|update
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance."""'
newline|'\n'
name|'rv'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# We need to skip vm_state/task_state updates... those will'
nl|'\n'
comment|'# happen when via a a _cast_to_cells for running a different'
nl|'\n'
comment|'# compute api method'
nl|'\n'
name|'kwargs_copy'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'kwargs_copy'
op|'.'
name|'pop'
op|'('
string|"'vm_state'"
op|','
name|'None'
op|')'
newline|'\n'
name|'kwargs_copy'
op|'.'
name|'pop'
op|'('
string|"'task_state'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'kwargs_copy'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'update'"
op|','
nl|'\n'
op|'**'
name|'kwargs_copy'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|_local_delete
dedent|''
name|'def'
name|'_local_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
comment|'# This will get called for every delete in the API cell'
nl|'\n'
comment|'# because _delete() in compute/api.py will not find a'
nl|'\n'
comment|"# service when checking if it's up."
nl|'\n'
comment|"# We need to only take action if there's no cell_name.  Our"
nl|'\n'
comment|'# overrides of delete() and soft_delete() will take care of'
nl|'\n'
comment|'# the rest.'
nl|'\n'
indent|'        '
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'_local_delete'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|soft_delete
dedent|''
dedent|''
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle_cell_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'soft_delete'
op|','
string|"'soft_delete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle_cell_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'delete'
op|','
string|"'delete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_cell_delete
dedent|''
name|'def'
name|'_handle_cell_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
name|'method_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance."""'
newline|'\n'
comment|"# We can't use the decorator because we have special logic in the"
nl|'\n'
comment|"# case we don't know the cell_name..."
nl|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'cell_name'
name|'and'
name|'self'
op|'.'
name|'_cell_read_only'
op|'('
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|'"vm_state"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
string|'"temporary_readonly"'
op|','
nl|'\n'
name|'method'
op|'='
name|'method_name'
op|')'
newline|'\n'
dedent|''
name|'method'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'method_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
comment|"# If there's no cell, there's also no host... which means"
nl|'\n'
comment|"# the instance was destroyed from the DB here.  Let's just"
nl|'\n'
comment|'# broadcast a message down to all cells and hope this ends'
nl|'\n'
comment|'# up resolving itself...  Worse case.. the instance will'
nl|'\n'
comment|'# show back up again here.'
nl|'\n'
indent|'            '
name|'delete_type'
op|'='
name|'method'
op|'=='
string|"'soft_delete'"
name|'and'
string|"'soft'"
name|'or'
string|"'hard'"
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'instance_delete_everywhere'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'delete_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|restore
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'restore'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'restore'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|force_delete
name|'def'
name|'force_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force delete a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'force_delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'force_delete'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|stop
name|'def'
name|'stop'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'do_cast'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'stop'"
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'stop'"
op|','
nl|'\n'
name|'do_cast'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'start'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'start'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'reboot'"
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|rebuild
name|'def'
name|'rebuild'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebuild the given instance with the provided attributes."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'rebuild'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'rebuild'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESIZED'
op|']'
op|')'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reverts a resize, deleting the \'new\' instance in the process."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'revert_resize'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESIZED'
op|']'
op|')'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a migration/resize and deletes the \'old\' instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'confirm_resize'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|resize
name|'def'
name|'resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resize (ie, migrate) a running instance.\n\n        If flavor_id is None, the process is considered a migration, keeping\n        the original flavor_id. If flavor_id is not None, the instance should\n        be migrated to a new host and resized to the new flavor_id.\n        """'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): If we get to this point, then we know the'
nl|'\n'
comment|"# specified flavor_id is valid and exists. We'll need to load"
nl|'\n'
comment|'# it again, but that should be safe.'
nl|'\n'
nl|'\n'
name|'old_instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'old_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type'
op|'('
nl|'\n'
name|'old_instance_type_id'
op|')'
newline|'\n'
nl|'\n'
name|'flavor_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'flavor_id'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'flavor_id'
op|':'
newline|'\n'
indent|'            '
name|'new_instance_type'
op|'='
name|'old_instance_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
nl|'\n'
name|'flavor_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): Later, when the resize is confirmed or reverted,'
nl|'\n'
comment|'# the superclass implementations of those methods will need access'
nl|'\n'
comment|"# to a local migration record for quota reasons. We don't need"
nl|'\n'
comment|'# source and/or destination information, just the old and new'
nl|'\n'
comment|"# instance_types. Status is set to 'finished' since nothing else"
nl|'\n'
comment|'# will update the status along the way.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'old_instance_type_id'"
op|':'
name|'old_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'new_instance_type_id'"
op|':'
name|'new_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(comstud): pass new instance_type object down to a method'
nl|'\n'
comment|"# that'll unfold it"
nl|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resize'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|add_fixed_ip
name|'def'
name|'add_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add fixed_ip from specified network to given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'add_fixed_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'add_fixed_ip'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|remove_fixed_ip
name|'def'
name|'remove_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove fixed_ip from specified network to given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'remove_fixed_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'remove_fixed_ip'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'pause'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'pause'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'unpause'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unpause'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_host_enabled
dedent|''
name|'def'
name|'set_host_enabled'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'enabled'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the specified host\'s ability to accept new instances."""'
newline|'\n'
comment|"# FIXME(comstud): Since there's no instance here, we have no"
nl|'\n'
comment|'# idea which cell should be the target.'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|host_power_action
dedent|''
name|'def'
name|'host_power_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboots, shuts down or powers up the host."""'
newline|'\n'
comment|"# FIXME(comstud): Since there's no instance here, we have no"
nl|'\n'
comment|'# idea which cell should be the target.'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for the given instance."""'
newline|'\n'
comment|'# FIXME(comstud): Cache this?'
nl|'\n'
comment|'# Also: only calling super() to get state/policy checking'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_diagnostics'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'get_diagnostics'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'suspend'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'suspend'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'resume'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resume'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'rescue'"
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'unrescue'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unrescue'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'set_admin_password'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'password'
op|'='
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'set_admin_password'"
op|','
nl|'\n'
name|'password'
op|'='
name|'password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'inject_file'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'inject_file'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a VNC Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_vnc_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get console output for an an instance."""'
newline|'\n'
comment|'# NOTE(comstud): Calling super() just to get policy check'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_console_output'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'get_console_output'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lock
dedent|''
name|'def'
name|'lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'lock'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'lock'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'lock'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unlock'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'reset_network'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'inject_network_info'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
name|'device'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an existing volume to an existing instance."""'
newline|'\n'
name|'if'
name|'device'
name|'and'
name|'not'
name|'block_device'
op|'.'
name|'match_device'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'device'
op|')'
newline|'\n'
dedent|''
name|'device'
op|'='
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'reserve_block_device_name'
op|'('
nl|'\n'
name|'context'
op|','
name|'device'
op|'='
name|'device'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'volume_id'
op|'='
name|'volume_id'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_device'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'device'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'volume_id'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_lock'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|_detach_volume
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'check_policy'
op|'('
name|'context'
op|','
string|"'detach_volume'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'detach_volume'"
op|','
nl|'\n'
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes calls to network_api to associate_floating_ip.\n\n        :param address: is a string floating ip address\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'associate_floating_ip'"
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|delete_instance_metadata
name|'def'
name|'delete_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the given metadata item from an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'delete_instance_metadata'"
op|','
nl|'\n'
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|update_instance_metadata
name|'def'
name|'update_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'update_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'metadata'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'update_instance_metadata'"
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

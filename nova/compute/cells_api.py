begin_unit
comment|'# Copyright (c) 2012 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Compute API that proxies via Cells Service."""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
name|'import'
name|'messaging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'availability_zones'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'rpcapi'
name|'as'
name|'cells_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'utils'
name|'as'
name|'cells_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'delete_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|check_instance_state
name|'check_instance_state'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_state'
newline|'\n'
DECL|variable|wrap_check_policy
name|'wrap_check_policy'
op|'='
name|'compute_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|variable|check_policy
name|'check_policy'
op|'='
name|'compute_api'
op|'.'
name|'check_policy'
newline|'\n'
DECL|variable|check_instance_lock
name|'check_instance_lock'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_lock'
newline|'\n'
DECL|variable|check_instance_cell
name|'check_instance_cell'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_cell'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRPCAPIRedirect
name|'class'
name|'ComputeRPCAPIRedirect'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(comstud): These are a list of methods where the cells_rpcapi'
nl|'\n'
comment|'# and the compute_rpcapi methods have the same signatures.  This'
nl|'\n'
comment|'# is for transitioning to a common interface where we can just'
nl|'\n'
comment|'# swap out the compute_rpcapi class with the cells_rpcapi class.'
nl|'\n'
DECL|variable|cells_compatible
indent|'    '
name|'cells_compatible'
op|'='
op|'['
string|"'start_instance'"
op|','
string|"'stop_instance'"
op|','
nl|'\n'
string|"'reboot_instance'"
op|','
string|"'suspend_instance'"
op|','
nl|'\n'
string|"'resume_instance'"
op|','
string|"'terminate_instance'"
op|','
nl|'\n'
string|"'soft_delete_instance'"
op|','
string|"'pause_instance'"
op|','
nl|'\n'
string|"'unpause_instance'"
op|','
string|"'revert_resize'"
op|','
nl|'\n'
string|"'confirm_resize'"
op|','
string|"'reset_network'"
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
nl|'\n'
string|"'backup_instance'"
op|','
string|"'snapshot_instance'"
op|','
nl|'\n'
string|"'set_admin_password'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cells_rpcapi'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'cells_compatible'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_noop_rpc_wrapper
dedent|''
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorTaskRPCAPIRedirect
dedent|''
dedent|''
name|'class'
name|'ConductorTaskRPCAPIRedirect'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(comstud): These are a list of methods where the cells_rpcapi'
nl|'\n'
comment|'# and the compute_task_rpcapi methods have the same signatures.  This'
nl|'\n'
comment|'# is for transitioning to a common interface where we can just'
nl|'\n'
comment|'# swap out the compute_task_rpcapi class with the cells_rpcapi class.'
nl|'\n'
DECL|variable|cells_compatible
indent|'    '
name|'cells_compatible'
op|'='
op|'['
string|"'build_instances'"
op|','
string|"'resize_instance'"
op|','
nl|'\n'
string|"'live_migrate_instance'"
op|','
string|"'rebuild_instance'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cells_rpcapi_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi_obj'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'cells_compatible'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_noop_rpc_wrapper
dedent|''
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCClientCellsProxy
dedent|''
dedent|''
name|'class'
name|'RPCClientCellsProxy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'version_cap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RPCClientCellsProxy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'target'
op|'='
name|'target'
newline|'\n'
name|'self'
op|'.'
name|'version_cap'
op|'='
name|'version_cap'
newline|'\n'
name|'self'
op|'.'
name|'_server'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_version'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare
dedent|''
name|'def'
name|'prepare'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'type'
op|'('
name|'self'
op|')'
op|'('
name|'self'
op|'.'
name|'target'
op|','
name|'self'
op|'.'
name|'version_cap'
op|')'
newline|'\n'
name|'ret'
op|'.'
name|'cells_rpcapi'
op|'='
name|'self'
op|'.'
name|'cells_rpcapi'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'server'"
op|','
name|'None'
op|')'
newline|'\n'
name|'version'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'version'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Unsupported kwargs: %s"'
op|'%'
name|'kwargs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'server'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'.'
name|'_server'
op|'='
name|'server'
newline|'\n'
dedent|''
name|'if'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'.'
name|'_version'
op|'='
name|'version'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
DECL|member|_check_version_cap
dedent|''
name|'def'
name|'_check_version_cap'
op|'('
name|'self'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'rpc'
op|'.'
name|'get_client'
op|'('
name|'self'
op|'.'
name|'target'
op|','
name|'version_cap'
op|'='
name|'self'
op|'.'
name|'version_cap'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'client'
op|'.'
name|'can_send_version'
op|'('
name|'version'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'messaging'
op|'.'
name|'RPCVersionCapError'
op|'('
name|'version'
op|'='
name|'version'
op|','
nl|'\n'
name|'version_cap'
op|'='
name|'self'
op|'.'
name|'version_cap'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_make_msg
dedent|''
dedent|''
name|'def'
name|'_make_msg'
op|'('
name|'self'
op|','
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'version'
op|'='
name|'self'
op|'.'
name|'_version'
name|'if'
name|'self'
op|'.'
name|'_version'
name|'else'
name|'self'
op|'.'
name|'target'
op|'.'
name|'version'
newline|'\n'
name|'self'
op|'.'
name|'_check_version_cap'
op|'('
name|'version'
op|')'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'method'"
op|':'
name|'method'
op|','
nl|'\n'
string|"'namespace'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'version'"
op|':'
name|'version'
op|','
nl|'\n'
string|"'args'"
op|':'
name|'kwargs'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_topic
dedent|''
name|'def'
name|'_get_topic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_server'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'target'
op|'.'
name|'topic'
op|','
name|'self'
op|'.'
name|'_server'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'target'
op|'.'
name|'topic'
newline|'\n'
nl|'\n'
DECL|member|can_send_version
dedent|''
dedent|''
name|'def'
name|'can_send_version'
op|'('
name|'self'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'rpc'
op|'.'
name|'get_client'
op|'('
name|'self'
op|'.'
name|'target'
op|','
name|'version_cap'
op|'='
name|'self'
op|'.'
name|'version_cap'
op|')'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'can_send_version'
op|'('
name|'version'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_make_msg'
op|'('
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'_get_topic'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'proxy_rpc_to_manager'
op|'('
name|'ctxt'
op|','
name|'msg'
op|','
name|'topic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|call
dedent|''
name|'def'
name|'call'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_make_msg'
op|'('
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'_get_topic'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'proxy_rpc_to_manager'
op|'('
name|'ctxt'
op|','
name|'msg'
op|','
nl|'\n'
name|'topic'
op|','
name|'call'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRPCProxyAPI
dedent|''
dedent|''
name|'class'
name|'ComputeRPCProxyAPI'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class used to substitute Compute RPC API that will proxy\n    via the cells manager to a compute manager in a child cell.\n    """'
newline|'\n'
DECL|member|get_client
name|'def'
name|'get_client'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'version_cap'
op|','
name|'serializer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'RPCClientCellsProxy'
op|'('
name|'target'
op|','
name|'version_cap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeCellsAPI
dedent|''
dedent|''
name|'class'
name|'ComputeCellsAPI'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
comment|'# Avoid casts/calls directly to compute'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'ComputeRPCAPIRedirect'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|')'
newline|'\n'
comment|'# Redirect conductor build_instances to cells'
nl|'\n'
name|'self'
op|'.'
name|'_compute_task_api'
op|'='
name|'ConductorTaskRPCAPIRedirect'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cell_type'
op|'='
string|"'api'"
newline|'\n'
nl|'\n'
DECL|member|_cast_to_cells
dedent|''
name|'def'
name|'_cast_to_cells'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'cast_compute_api_method'
op|'('
name|'context'
op|','
name|'cell_name'
op|','
nl|'\n'
name|'method'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_to_cells
dedent|''
name|'def'
name|'_call_to_cells'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'call_compute_api_method'
op|'('
name|'context'
op|','
name|'cell_name'
op|','
nl|'\n'
name|'method'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_requested_networks
dedent|''
name|'def'
name|'_check_requested_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'max_count'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override compute API\'s checking of this.  It\'ll happen in\n        child cell\n        """'
newline|'\n'
name|'return'
name|'max_count'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We can use the base functionality, but I left this here just\n        for completeness.\n        """'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'create'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance."""'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'cell_name'
name|'and'
name|'self'
op|'.'
name|'_cell_read_only'
op|'('
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|'"vm_state"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
string|'"temporary_readonly"'
op|','
nl|'\n'
name|'method'
op|'='
string|"'update'"
op|')'
newline|'\n'
dedent|''
name|'rv'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'kwargs_copy'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
comment|'# We need to skip vm_state/task_state updates as the child'
nl|'\n'
comment|'# cell is authoritative for these.  The admin API does'
nl|'\n'
comment|'# support resetting state, but it has been converted to use'
nl|'\n'
comment|'# Instance.save() with an appropriate kwarg.'
nl|'\n'
name|'kwargs_copy'
op|'.'
name|'pop'
op|'('
string|"'vm_state'"
op|','
name|'None'
op|')'
newline|'\n'
name|'kwargs_copy'
op|'.'
name|'pop'
op|'('
string|"'task_state'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'kwargs_copy'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'update'"
op|','
nl|'\n'
op|'**'
name|'kwargs_copy'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|soft_delete
dedent|''
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle_cell_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'delete_types'
op|'.'
name|'SOFT_DELETE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle_cell_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'delete_types'
op|'.'
name|'DELETE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_cell_delete
dedent|''
name|'def'
name|'_handle_cell_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'delete_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'instance'
op|'['
string|"'cell_name'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'instance_delete_everywhere'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'delete_type'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device'
op|'.'
name|'legacy_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|')'
newline|'\n'
comment|'# NOTE(danms): If we try to delete an instance with no cell,'
nl|'\n'
comment|"# there isn't anything to salvage, so we can hard-delete here."
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'_local_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
nl|'\n'
name|'delete_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_do_delete'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'method'
op|'='
name|'getattr'
op|'('
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|','
name|'delete_type'
op|')'
newline|'\n'
name|'method'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|restore
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'restore'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'restore'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|force_delete
name|'def'
name|'force_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force delete a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'force_delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'delete_types'
op|'.'
name|'FORCE_DELETE'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|evacuate
name|'def'
name|'evacuate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Evacuate the given instance with the provided attributes."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'evacuate'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'evacuate'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|add_fixed_ip
name|'def'
name|'add_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add fixed_ip from specified network to given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'add_fixed_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'add_fixed_ip'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|remove_fixed_ip
name|'def'
name|'remove_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove fixed_ip from specified network to given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'remove_fixed_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'remove_fixed_ip'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for the given instance."""'
newline|'\n'
comment|'# FIXME(comstud): Cache this?'
nl|'\n'
comment|'# Also: only calling super() to get state/policy checking'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_diagnostics'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'get_diagnostics'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_instance_diagnostics
dedent|''
name|'def'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for the given instance."""'
newline|'\n'
comment|'# FIXME(comstud): Cache this?'
nl|'\n'
comment|'# Also: only calling super() to get state/policy checking'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_instance_diagnostics'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'rescue_image_ref'
op|'='
name|'None'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|','
nl|'\n'
name|'rescue_image_ref'
op|'='
name|'rescue_image_ref'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'rescue'"
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|','
nl|'\n'
name|'rescue_image_ref'
op|'='
name|'rescue_image_ref'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'unrescue'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unrescue'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|shelve
name|'def'
name|'shelve'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shelve the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'shelve'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'shelve'"
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|shelve_offload
name|'def'
name|'shelve_offload'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Offload the shelved instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'shelve_offload'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'shelve_offload'"
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|unshelve
name|'def'
name|'unshelve'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unshelve the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'unshelve'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unshelve'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a VNC Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_vnc_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|get_spice_console
name|'def'
name|'get_spice_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a SPICE Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_spice_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|get_rdp_console
name|'def'
name|'get_rdp_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a RDP Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_rdp_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|get_serial_console
name|'def'
name|'get_serial_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a serial console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_serial_console_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get console output for an instance."""'
newline|'\n'
comment|'# NOTE(comstud): Calling super() just to get policy check'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_console_output'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'get_console_output'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|_attach_volume
name|'def'
name|'_attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
name|'device'
op|','
nl|'\n'
name|'disk_bus'
op|','
name|'device_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an existing volume to an existing instance."""'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'volume_id'
op|','
name|'device'
op|','
name|'disk_bus'
op|','
name|'device_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|_detach_volume
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'detach_volume'"
op|','
nl|'\n'
name|'volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes calls to network_api to associate_floating_ip.\n\n        :param address: is a string floating ip address\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'associate_floating_ip'"
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|delete_instance_metadata
name|'def'
name|'delete_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the given metadata item from an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'delete_instance_metadata'"
op|','
nl|'\n'
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'check_instance_cell'
newline|'\n'
DECL|member|update_instance_metadata
name|'def'
name|'update_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'update_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'metadata'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'update_instance_metadata'"
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|get_migrations
dedent|''
name|'def'
name|'get_migrations'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'get_migrations'
op|'('
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServiceProxy
dedent|''
dedent|''
name|'class'
name|'ServiceProxy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'cell_path'
op|','
name|'compute_node'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'_cell_path'
op|'='
name|'cell_path'
newline|'\n'
name|'self'
op|'.'
name|'_compute_node'
op|'='
name|'compute_node'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|id
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cells_utils'
op|'.'
name|'cell_with_item'
op|'('
name|'self'
op|'.'
name|'_cell_path'
op|','
name|'self'
op|'.'
name|'_obj'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
op|'=='
string|"'id'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
op|'=='
string|"'compute_node'"
name|'and'
name|'self'
op|'.'
name|'_compute_node'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_compute_node'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_obj'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'key'
op|'=='
string|"'compute_node'"
name|'and'
name|'self'
op|'.'
name|'_compute_node'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_compute_node'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_obj'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeNodeProxy
dedent|''
dedent|''
name|'class'
name|'ComputeNodeProxy'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'cell_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'_cell_path'
op|'='
name|'cell_path'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|id
name|'def'
name|'id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cells_utils'
op|'.'
name|'cell_with_item'
op|'('
name|'self'
op|'.'
name|'_cell_path'
op|','
name|'self'
op|'.'
name|'_obj'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
op|'=='
string|"'id'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_obj'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_obj'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostAPI
dedent|''
dedent|''
name|'class'
name|'HostAPI'
op|'('
name|'compute_api'
op|'.'
name|'HostAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""HostAPI() class for cells.\n\n    Implements host management related operations.  Works by setting the\n    RPC API used by the base class to proxy via the cells manager to the\n    compute manager in the correct cell.  Hosts specified with cells will\n    need to be of the format \'path!to!cell@host\'.\n\n    DB methods in the base class are also overridden to proxy via the\n    cells manager.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HostAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'rpcapi'
op|'='
name|'ComputeRPCProxyAPI'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_host_exists
dedent|''
name|'def'
name|'_assert_host_exists'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'must_be_up'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cannot check this in API cell.  This will be checked in the\n        target child cell.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_host_uptime
dedent|''
name|'def'
name|'get_host_uptime'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the result of calling "uptime" on the target host."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'get_host_uptime'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_get_all
dedent|''
name|'def'
name|'service_get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|'='
name|'None'
op|','
name|'set_zones'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'filters'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
string|"'availability_zone'"
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'zone_filter'
op|'='
name|'filters'
op|'.'
name|'pop'
op|'('
string|"'availability_zone'"
op|')'
newline|'\n'
name|'set_zones'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'zone_filter'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'services'
op|'='
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
name|'if'
name|'set_zones'
op|':'
newline|'\n'
indent|'            '
name|'services'
op|'='
name|'availability_zones'
op|'.'
name|'set_availability_zones'
op|'('
name|'context'
op|','
nl|'\n'
name|'services'
op|')'
newline|'\n'
name|'if'
name|'zone_filter'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'services'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'services'
nl|'\n'
name|'if'
name|'s'
op|'['
string|"'availability_zone'"
op|']'
op|'=='
name|'zone_filter'
op|']'
newline|'\n'
comment|'# NOTE(johannes): Cells adds the cell path as a prefix to the id'
nl|'\n'
comment|'# to uniquely identify the service amongst all cells. Unfortunately'
nl|'\n'
comment|'# the object model makes the id an integer. Use a proxy here to'
nl|'\n'
comment|'# work around this particular problem.'
nl|'\n'
nl|'\n'
comment|'# Split out the cell path first'
nl|'\n'
dedent|''
dedent|''
name|'cell_paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'services'
op|':'
newline|'\n'
indent|'            '
name|'cell_path'
op|','
name|'id'
op|'='
name|'cells_utils'
op|'.'
name|'split_cell_and_item'
op|'('
name|'service'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'service'
op|'['
string|"'id'"
op|']'
op|'='
name|'id'
newline|'\n'
name|'cell_paths'
op|'.'
name|'append'
op|'('
name|'cell_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Currently cells does not support objects as'
nl|'\n'
comment|'# return values, so just convert the db-formatted service objects'
nl|'\n'
comment|'# to new-world objects here'
nl|'\n'
dedent|''
name|'services'
op|'='
name|'obj_base'
op|'.'
name|'obj_make_list'
op|'('
name|'context'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'ServiceList'
op|'('
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Service'
op|','
nl|'\n'
name|'services'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now wrap it in the proxy with the original cell_path'
nl|'\n'
name|'services'
op|'='
op|'['
name|'ServiceProxy'
op|'('
name|'s'
op|','
name|'c'
op|')'
name|'for'
name|'s'
op|','
name|'c'
name|'in'
name|'zip'
op|'('
name|'services'
op|','
name|'cell_paths'
op|')'
op|']'
newline|'\n'
name|'return'
name|'services'
newline|'\n'
nl|'\n'
DECL|member|service_get_by_compute_host
dedent|''
name|'def'
name|'service_get_by_compute_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_service'
op|'='
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'host_name'
op|')'
newline|'\n'
comment|'# NOTE(danms): Currently cells does not support objects as'
nl|'\n'
comment|'# return values, so just convert the db-formatted service objects'
nl|'\n'
comment|'# to new-world objects here'
nl|'\n'
nl|'\n'
comment|"# NOTE(dheeraj): Use ServiceProxy here too. See johannes'"
nl|'\n'
comment|'# note on service_get_all'
nl|'\n'
name|'if'
name|'db_service'
op|':'
newline|'\n'
comment|'# NOTE(alaski): Creation of the Service object involves creating'
nl|'\n'
comment|'# a ComputeNode object in this case.  This will fail because with'
nl|'\n'
comment|"# cells the 'id' is a string of the format 'region!child@1' but"
nl|'\n'
comment|"# the object expects the 'id' to be an int."
nl|'\n'
indent|'            '
name|'if'
string|"'compute_node'"
name|'in'
name|'db_service'
op|':'
newline|'\n'
comment|'# NOTE(alaski): compute_node is a list that should have one'
nl|'\n'
comment|'# item in it, except in the case of Ironic.  But the Service'
nl|'\n'
comment|'# object only uses the first compute_node for its relationship'
nl|'\n'
comment|'# so we only need to pull the first one here.'
nl|'\n'
indent|'                '
name|'db_compute'
op|'='
name|'db_service'
op|'['
string|"'compute_node'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'comp_cell_path'
op|','
name|'comp_id'
op|'='
name|'cells_utils'
op|'.'
name|'split_cell_and_item'
op|'('
nl|'\n'
name|'db_compute'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db_compute'
op|'['
string|"'id'"
op|']'
op|'='
name|'comp_id'
newline|'\n'
nl|'\n'
dedent|''
name|'cell_path'
op|','
name|'_id'
op|'='
name|'cells_utils'
op|'.'
name|'split_cell_and_item'
op|'('
name|'db_service'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db_service'
op|'['
string|"'id'"
op|']'
op|'='
name|'_id'
newline|'\n'
name|'ser_obj'
op|'='
name|'objects'
op|'.'
name|'Service'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Service'
op|'('
op|')'
op|','
nl|'\n'
name|'db_service'
op|')'
newline|'\n'
name|'compute_proxy'
op|'='
name|'None'
newline|'\n'
name|'if'
string|"'compute_node'"
name|'in'
name|'db_service'
op|':'
newline|'\n'
indent|'                '
name|'compute_proxy'
op|'='
name|'ComputeNodeProxy'
op|'('
name|'ser_obj'
op|'.'
name|'compute_node'
op|','
nl|'\n'
name|'comp_cell_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'ServiceProxy'
op|'('
name|'ser_obj'
op|','
name|'cell_path'
op|','
name|'compute_node'
op|'='
name|'compute_proxy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_update
dedent|''
dedent|''
name|'def'
name|'service_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'binary'
op|','
name|'params_to_update'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Used to enable/disable a service. For compute services, setting to\n        disabled stops new builds arriving on that host.\n\n        :param host_name: the name of the host machine that the service is\n                          running\n        :param binary: The name of the executable that the service runs as\n        :param params_to_update: eg. {\'disabled\': True}\n        """'
newline|'\n'
name|'db_service'
op|'='
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'host_name'
op|','
name|'binary'
op|','
name|'params_to_update'
op|')'
newline|'\n'
comment|'# NOTE(danms): Currently cells does not support objects as'
nl|'\n'
comment|'# return values, so just convert the db-formatted service objects'
nl|'\n'
comment|'# to new-world objects here'
nl|'\n'
nl|'\n'
comment|"# NOTE(dheeraj): Use ServiceProxy here too. See johannes'"
nl|'\n'
comment|'# note on service_get_all'
nl|'\n'
name|'if'
name|'db_service'
op|':'
newline|'\n'
indent|'            '
name|'cell_path'
op|','
name|'_id'
op|'='
name|'cells_utils'
op|'.'
name|'split_cell_and_item'
op|'('
name|'db_service'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db_service'
op|'['
string|"'id'"
op|']'
op|'='
name|'_id'
newline|'\n'
name|'ser_obj'
op|'='
name|'objects'
op|'.'
name|'Service'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Service'
op|'('
op|')'
op|','
nl|'\n'
name|'db_service'
op|')'
newline|'\n'
name|'return'
name|'ServiceProxy'
op|'('
name|'ser_obj'
op|','
name|'cell_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_delete
dedent|''
dedent|''
name|'def'
name|'service_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'service_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the specified service."""'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_delete'
op|'('
name|'context'
op|','
name|'service_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_get_all_by_host
dedent|''
name|'def'
name|'instance_get_all_by_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all instances by host.  Host might have a cell prepended\n        to it, so we\'ll need to strip it out.  We don\'t need to proxy\n        this call to cells, as we have instance information here in\n        the API cell.\n        """'
newline|'\n'
name|'cell_name'
op|','
name|'host_name'
op|'='
name|'cells_utils'
op|'.'
name|'split_cell_and_item'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'super'
op|'('
name|'HostAPI'
op|','
name|'self'
op|')'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
op|'['
name|'i'
name|'for'
name|'i'
name|'in'
name|'instances'
nl|'\n'
name|'if'
name|'i'
op|'['
string|"'cell_name'"
op|']'
op|'=='
name|'cell_name'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|task_log_get_all
dedent|''
name|'def'
name|'task_log_get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'task_name'
op|','
name|'beginning'
op|','
name|'ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'None'
op|','
name|'state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the task logs within a given range from cells,\n        optionally filtering by the host and/or state.  For cells, the\n        host should be a path like \'path!to!cell@host\'.  If no @host\n        is given, only task logs from a particular cell will be returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'task_log_get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'task_name'
op|','
nl|'\n'
name|'beginning'
op|','
nl|'\n'
name|'ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
nl|'\n'
name|'state'
op|'='
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get
dedent|''
name|'def'
name|'compute_node_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'compute_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a compute node from a particular cell by its integer ID.\n        compute_id should be in the format of \'path!to!cell@ID\'.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_get'
op|'('
name|'context'
op|','
name|'compute_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get_all
dedent|''
name|'def'
name|'compute_node_get_all'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_search_by_hypervisor
dedent|''
name|'def'
name|'compute_node_search_by_hypervisor'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hypervisor_match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'hypervisor_match'
op|'='
name|'hypervisor_match'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_statistics
dedent|''
name|'def'
name|'compute_node_statistics'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_stats'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceActionAPI
dedent|''
dedent|''
name|'class'
name|'InstanceActionAPI'
op|'('
name|'compute_api'
op|'.'
name|'InstanceActionAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""InstanceActionAPI() class for cells."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InstanceActionAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|actions_get
dedent|''
name|'def'
name|'actions_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'actions_get'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_get_by_request_id
dedent|''
name|'def'
name|'action_get_by_request_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'request_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'action_get_by_request_id'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'request_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_events_get
dedent|''
name|'def'
name|'action_events_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'action_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'action_events_get'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'action_id'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

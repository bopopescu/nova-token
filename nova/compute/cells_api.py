begin_unit
comment|'# Copyright (c) 2012 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Compute API that proxies via Cells Service."""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'availability_zones'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'rpcapi'
name|'as'
name|'cells_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'utils'
name|'as'
name|'cells_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|check_instance_state
name|'check_instance_state'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_state'
newline|'\n'
DECL|variable|wrap_check_policy
name|'wrap_check_policy'
op|'='
name|'compute_api'
op|'.'
name|'wrap_check_policy'
newline|'\n'
DECL|variable|check_policy
name|'check_policy'
op|'='
name|'compute_api'
op|'.'
name|'check_policy'
newline|'\n'
DECL|variable|check_instance_lock
name|'check_instance_lock'
op|'='
name|'compute_api'
op|'.'
name|'check_instance_lock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_cell
name|'def'
name|'validate_cell'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
DECL|function|_wrapped
indent|'    '
name|'def'
name|'_wrapped'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_validate_cell'
op|'('
name|'instance'
op|','
name|'fn'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'return'
name|'fn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'_wrapped'
op|'.'
name|'__name__'
op|'='
name|'fn'
op|'.'
name|'__name__'
newline|'\n'
name|'return'
name|'_wrapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRPCAPINoOp
dedent|''
name|'class'
name|'ComputeRPCAPINoOp'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__getattr__
indent|'    '
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
DECL|function|_noop_rpc_wrapper
indent|'        '
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SchedulerRPCAPIRedirect
dedent|''
dedent|''
name|'class'
name|'SchedulerRPCAPIRedirect'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cells_rpcapi_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi_obj'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
DECL|function|_noop_rpc_wrapper
indent|'        '
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorTaskRPCAPIRedirect
dedent|''
dedent|''
name|'class'
name|'ConductorTaskRPCAPIRedirect'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cells_rpcapi_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi_obj'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
DECL|function|_noop_rpc_wrapper
indent|'        '
name|'def'
name|'_noop_rpc_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'_noop_rpc_wrapper'
newline|'\n'
nl|'\n'
DECL|member|build_instances
dedent|''
name|'def'
name|'build_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'build_instances'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRPCProxyAPI
dedent|''
dedent|''
name|'class'
name|'ComputeRPCProxyAPI'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class used to substitute Compute RPC API that will proxy\n    via the cells manager to a compute manager in a child cell.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeRPCProxyAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'msg'
op|','
name|'topic'
op|'='
name|'None'
op|','
name|'version'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_set_version'
op|'('
name|'msg'
op|','
name|'version'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'_get_topic'
op|'('
name|'topic'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'proxy_rpc_to_manager'
op|'('
name|'ctxt'
op|','
name|'msg'
op|','
name|'topic'
op|')'
newline|'\n'
nl|'\n'
DECL|member|call
dedent|''
name|'def'
name|'call'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'msg'
op|','
name|'topic'
op|'='
name|'None'
op|','
name|'version'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_set_version'
op|'('
name|'msg'
op|','
name|'version'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'self'
op|'.'
name|'_get_topic'
op|'('
name|'topic'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'proxy_rpc_to_manager'
op|'('
name|'ctxt'
op|','
name|'msg'
op|','
name|'topic'
op|','
nl|'\n'
name|'call'
op|'='
name|'True'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeCellsAPI
dedent|''
dedent|''
name|'class'
name|'ComputeCellsAPI'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
comment|'# Avoid casts/calls directly to compute'
nl|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'ComputeRPCAPINoOp'
op|'('
op|')'
newline|'\n'
comment|'# Redirect scheduler run_instance to cells.'
nl|'\n'
name|'self'
op|'.'
name|'scheduler_rpcapi'
op|'='
name|'SchedulerRPCAPIRedirect'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|')'
newline|'\n'
comment|'# Redirect conductor build_instances to cells'
nl|'\n'
name|'self'
op|'.'
name|'_compute_task_api'
op|'='
name|'ConductorTaskRPCAPIRedirect'
op|'('
name|'self'
op|'.'
name|'cells_rpcapi'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cell_read_only
dedent|''
name|'def'
name|'_cell_read_only'
op|'('
name|'self'
op|','
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Is the target cell in a read-only mode?"""'
newline|'\n'
comment|'# FIXME(comstud): Add support for this.'
nl|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_validate_cell
dedent|''
name|'def'
name|'_validate_cell'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_cell_read_only'
op|'('
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|'"vm_state"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
string|'"temporary_readonly"'
op|','
nl|'\n'
name|'method'
op|'='
name|'method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cast_to_cells
dedent|''
dedent|''
name|'def'
name|'_cast_to_cells'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'cast_compute_api_method'
op|'('
name|'context'
op|','
name|'cell_name'
op|','
nl|'\n'
name|'method'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_call_to_cells
dedent|''
name|'def'
name|'_call_to_cells'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'call_compute_api_method'
op|'('
name|'context'
op|','
name|'cell_name'
op|','
nl|'\n'
name|'method'
op|','
name|'instance_uuid'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_requested_networks
dedent|''
name|'def'
name|'_check_requested_networks'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'requested_networks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override compute API\'s checking of this.  It\'ll happen in\n        child cell\n        """'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|_validate_image_href
dedent|''
name|'def'
name|'_validate_image_href'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_href'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override compute API\'s checking of this.  It\'ll happen in\n        child cell\n        """'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|member|backup
dedent|''
name|'def'
name|'backup'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'backup_type'
op|','
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'None'
op|','
name|'image_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Backup the given instance."""'
newline|'\n'
name|'image_meta'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'backup'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'name'
op|','
name|'backup_type'
op|','
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'extra_properties'
op|','
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'backup'"
op|','
name|'name'
op|','
nl|'\n'
name|'backup_type'
op|'='
name|'backup_type'
op|','
name|'rotation'
op|'='
name|'rotation'
op|','
nl|'\n'
name|'extra_properties'
op|'='
name|'extra_properties'
op|','
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|snapshot
dedent|''
name|'def'
name|'snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
name|'extra_properties'
op|'='
name|'None'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Snapshot the given instance."""'
newline|'\n'
name|'image_meta'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'snapshot'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'name'
op|','
name|'extra_properties'
op|'='
name|'extra_properties'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'image_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'snapshot'"
op|','
nl|'\n'
name|'name'
op|','
name|'extra_properties'
op|'='
name|'extra_properties'
op|','
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""We can use the base functionality, but I left this here just\n        for completeness.\n        """'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'create'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_state
dedent|''
name|'def'
name|'update_state'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'new_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the state of a compute instance.\n        For example to \'active\' or \'error\'.\n        Also sets \'task_state\' to None.\n        Used by admin_actions api\n\n        :param context: The security context\n        :param instance: The instance to update\n        :param new_state: A member of vm_state to change\n                          the instance\'s state to,\n                          eg. \'active\'\n        """'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'pass_on_state_change'
op|'='
name|'True'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'new_state'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'pass_on_state_change'
op|'='
name|'False'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update an instance.\n        :param pass_on_state_change: if true, the state change will be passed\n                                     on to child cells\n        """'
newline|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'cell_name'
name|'and'
name|'self'
op|'.'
name|'_cell_read_only'
op|'('
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|'"vm_state"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
string|'"temporary_readonly"'
op|','
nl|'\n'
name|'method'
op|'='
string|"'update'"
op|')'
newline|'\n'
dedent|''
name|'rv'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'update'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'kwargs_copy'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'pass_on_state_change'
op|':'
newline|'\n'
comment|'# We need to skip vm_state/task_state updates... those will'
nl|'\n'
comment|'# happen via a _cast_to_cells when running a different'
nl|'\n'
comment|'# compute api method'
nl|'\n'
indent|'            '
name|'kwargs_copy'
op|'.'
name|'pop'
op|'('
string|"'vm_state'"
op|','
name|'None'
op|')'
newline|'\n'
name|'kwargs_copy'
op|'.'
name|'pop'
op|'('
string|"'task_state'"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'kwargs_copy'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'update'"
op|','
nl|'\n'
op|'**'
name|'kwargs_copy'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|_local_delete
dedent|''
name|'def'
name|'_local_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
comment|'# This will get called for every delete in the API cell'
nl|'\n'
comment|'# because _delete() in compute/api.py will not find a'
nl|'\n'
comment|"# service when checking if it's up."
nl|'\n'
comment|"# We need to only take action if there's no cell_name.  Our"
nl|'\n'
comment|'# overrides of delete() and soft_delete() will take care of'
nl|'\n'
comment|'# the rest.'
nl|'\n'
indent|'        '
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'_local_delete'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|soft_delete
dedent|''
dedent|''
name|'def'
name|'soft_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle_cell_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'soft_delete'
op|','
string|"'soft_delete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_handle_cell_delete'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'delete'
op|','
string|"'delete'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_cell_delete
dedent|''
name|'def'
name|'_handle_cell_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
name|'method_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate an instance."""'
newline|'\n'
comment|"# We can't use the decorator because we have special logic in the"
nl|'\n'
comment|"# case we don't know the cell_name..."
nl|'\n'
name|'cell_name'
op|'='
name|'instance'
op|'['
string|"'cell_name'"
op|']'
newline|'\n'
name|'if'
name|'cell_name'
name|'and'
name|'self'
op|'.'
name|'_cell_read_only'
op|'('
name|'cell_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
nl|'\n'
name|'attr'
op|'='
string|'"vm_state"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'state'
op|'='
string|'"temporary_readonly"'
op|','
nl|'\n'
name|'method'
op|'='
name|'method_name'
op|')'
newline|'\n'
dedent|''
name|'method'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'method_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
comment|"# If there's no cell, there's also no host... which means"
nl|'\n'
comment|"# the instance was destroyed from the DB here.  Let's just"
nl|'\n'
comment|'# broadcast a message down to all cells and hope this ends'
nl|'\n'
comment|'# up resolving itself...  Worse case.. the instance will'
nl|'\n'
comment|'# show back up again here.'
nl|'\n'
indent|'            '
name|'delete_type'
op|'='
name|'method_name'
op|'=='
string|"'soft_delete'"
name|'and'
string|"'soft'"
name|'or'
string|"'hard'"
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'instance_delete_everywhere'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'delete_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|restore
name|'def'
name|'restore'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Restore a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'restore'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'restore'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|force_delete
name|'def'
name|'force_delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force delete a previously deleted (but not reclaimed) instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'force_delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'force_delete'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|stop
name|'def'
name|'stop'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'do_cast'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'stop'"
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'stop'"
op|','
nl|'\n'
name|'do_cast'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'start'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'start'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|reboot
name|'def'
name|'reboot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reboot the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'reboot'"
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|rebuild
name|'def'
name|'rebuild'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebuild the given instance with the provided attributes."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'rebuild'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'rebuild'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|evacuate
name|'def'
name|'evacuate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Evacuate the given instance with the provided attributes."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'evacuate'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'evacuate'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESIZED'
op|']'
op|')'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|revert_resize
name|'def'
name|'revert_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reverts a resize, deleting the \'new\' instance in the process."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'revert_resize'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'RESIZED'
op|']'
op|')'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|confirm_resize
name|'def'
name|'confirm_resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms a migration/resize and deletes the \'old\' instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'confirm_resize'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_instance_state'
op|'('
name|'vm_state'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
name|'task_state'
op|'='
op|'['
name|'None'
op|']'
op|')'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|resize
name|'def'
name|'resize'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'flavor_id'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resize (ie, migrate) a running instance.\n\n        If flavor_id is None, the process is considered a migration, keeping\n        the original flavor_id. If flavor_id is not None, the instance should\n        be migrated to a new host and resized to the new flavor_id.\n        """'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'flavor_id'
op|'='
name|'flavor_id'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): If we get to this point, then we know the'
nl|'\n'
comment|"# specified flavor_id is valid and exists. We'll need to load"
nl|'\n'
comment|'# it again, but that should be safe.'
nl|'\n'
nl|'\n'
name|'old_instance_type'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'flavor_id'
op|':'
newline|'\n'
indent|'            '
name|'new_instance_type'
op|'='
name|'old_instance_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
nl|'\n'
name|'flavor_id'
op|','
name|'read_deleted'
op|'='
string|'"no"'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): Later, when the resize is confirmed or reverted,'
nl|'\n'
comment|'# the superclass implementations of those methods will need access'
nl|'\n'
comment|"# to a local migration record for quota reasons. We don't need"
nl|'\n'
comment|'# source and/or destination information, just the old and new'
nl|'\n'
comment|"# flavors. Status is set to 'finished' since nothing else"
nl|'\n'
comment|'# will update the status along the way.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'old_instance_type_id'"
op|':'
name|'old_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'new_instance_type_id'"
op|':'
name|'new_instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(comstud): pass new instance_type object down to a method'
nl|'\n'
comment|"# that'll unfold it"
nl|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resize'"
op|','
name|'flavor_id'
op|'='
name|'flavor_id'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|add_fixed_ip
name|'def'
name|'add_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add fixed_ip from specified network to given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'add_fixed_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'add_fixed_ip'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|remove_fixed_ip
name|'def'
name|'remove_fixed_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove fixed_ip from specified network to given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'remove_fixed_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'remove_fixed_ip'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|pause
name|'def'
name|'pause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pause the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'pause'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'pause'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|unpause
name|'def'
name|'unpause'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unpause the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'unpause'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unpause'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_diagnostics
dedent|''
name|'def'
name|'get_diagnostics'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve diagnostics for the given instance."""'
newline|'\n'
comment|'# FIXME(comstud): Cache this?'
nl|'\n'
comment|'# Also: only calling super() to get state/policy checking'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_diagnostics'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'get_diagnostics'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|suspend
name|'def'
name|'suspend'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Suspend the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'suspend'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'suspend'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|resume
name|'def'
name|'resume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resume the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'resume'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'resume'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|rescue
name|'def'
name|'rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'rescue_password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rescue the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'rescue'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'rescue'"
op|','
nl|'\n'
name|'rescue_password'
op|'='
name|'rescue_password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|unrescue
name|'def'
name|'unrescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unrescue the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'unrescue'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unrescue'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|set_admin_password
name|'def'
name|'set_admin_password'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'password'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the root/admin password for the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'set_admin_password'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'password'
op|'='
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'set_admin_password'"
op|','
nl|'\n'
name|'password'
op|'='
name|'password'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|inject_file
name|'def'
name|'inject_file'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write a file to the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'inject_file'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'inject_file'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|get_vnc_console
name|'def'
name|'get_vnc_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a VNC Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_vnc_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|get_spice_console
name|'def'
name|'get_spice_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a url to a SPICE Console."""'
newline|'\n'
name|'if'
name|'not'
name|'instance'
op|'['
string|"'host'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotReady'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'connect_info'
op|'='
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'get_spice_connect_info'"
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
name|'context'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'token'"
op|']'
op|','
name|'console_type'
op|','
name|'connect_info'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'connect_info'
op|'['
string|"'port'"
op|']'
op|','
name|'connect_info'
op|'['
string|"'internal_access_path'"
op|']'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'url'"
op|':'
name|'connect_info'
op|'['
string|"'access_url'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|get_console_output
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get console output for an an instance."""'
newline|'\n'
comment|'# NOTE(comstud): Calling super() just to get policy check'
nl|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'get_console_output'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'get_console_output'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lock
dedent|''
name|'def'
name|'lock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Lock the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'lock'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'lock'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unlock the given instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'lock'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'unlock'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|reset_network
name|'def'
name|'reset_network'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset networking on the instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'reset_network'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'reset_network'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|inject_network_info
name|'def'
name|'inject_network_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Inject network info for the instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'inject_network_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'inject_network_info'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|attach_volume
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
name|'device'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach an existing volume to an existing instance."""'
newline|'\n'
name|'if'
name|'device'
name|'and'
name|'not'
name|'block_device'
op|'.'
name|'match_device'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|'('
name|'path'
op|'='
name|'device'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
name|'context'
op|','
name|'volume'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'block_device_mapping_destroy_by_instance_and_device'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'device'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'volume_id'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|_detach_volume
name|'def'
name|'_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detach a volume from an instance."""'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'check_detach'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'detach_volume'"
op|','
nl|'\n'
name|'volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|associate_floating_ip
name|'def'
name|'associate_floating_ip'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes calls to network_api to associate_floating_ip.\n\n        :param address: is a string floating ip address\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'associate_floating_ip'"
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|delete_instance_metadata
name|'def'
name|'delete_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the given metadata item from an instance."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'delete_instance_metadata'"
op|','
nl|'\n'
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wrap_check_policy'
newline|'\n'
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|update_instance_metadata
name|'def'
name|'update_instance_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'update_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'metadata'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'update_instance_metadata'"
op|','
nl|'\n'
name|'metadata'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceUnknownCell'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'validate_cell'
newline|'\n'
DECL|member|live_migrate
name|'def'
name|'live_migrate'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'block_migration'
op|','
nl|'\n'
name|'disk_over_commit'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Migrate a server lively to a new host."""'
newline|'\n'
name|'super'
op|'('
name|'ComputeCellsAPI'
op|','
name|'self'
op|')'
op|'.'
name|'live_migrate'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'block_migration'
op|','
name|'disk_over_commit'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'live_migrate'"
op|','
nl|'\n'
name|'block_migration'
op|','
name|'disk_over_commit'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_migrations
dedent|''
name|'def'
name|'get_migrations'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'get_migrations'
op|'('
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostAPI
dedent|''
dedent|''
name|'class'
name|'HostAPI'
op|'('
name|'compute_api'
op|'.'
name|'HostAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""HostAPI() class for cells.\n\n    Implements host management related operations.  Works by setting the\n    RPC API used by the base class to proxy via the cells manager to the\n    compute manager in the correct cell.  Hosts specified with cells will\n    need to be of the format \'path!to!cell@host\'.\n\n    DB methods in the base class are also overridden to proxy via the\n    cells manager.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HostAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'rpcapi'
op|'='
name|'ComputeRPCProxyAPI'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_host_exists
dedent|''
name|'def'
name|'_assert_host_exists'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cannot check this in API cell.  This will be checked in the\n        target child cell.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|service_get_all
dedent|''
name|'def'
name|'service_get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'filters'
op|'='
name|'None'
op|','
name|'set_zones'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'filters'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
string|"'availability_zone'"
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'zone_filter'
op|'='
name|'filters'
op|'.'
name|'pop'
op|'('
string|"'availability_zone'"
op|')'
newline|'\n'
name|'set_zones'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'zone_filter'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'services'
op|'='
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
name|'if'
name|'set_zones'
op|':'
newline|'\n'
indent|'            '
name|'services'
op|'='
name|'availability_zones'
op|'.'
name|'set_availability_zones'
op|'('
name|'context'
op|','
nl|'\n'
name|'services'
op|')'
newline|'\n'
name|'if'
name|'zone_filter'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'services'
op|'='
op|'['
name|'s'
name|'for'
name|'s'
name|'in'
name|'services'
nl|'\n'
name|'if'
name|'s'
op|'['
string|"'availability_zone'"
op|']'
op|'=='
name|'zone_filter'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'services'
newline|'\n'
nl|'\n'
DECL|member|service_get_by_compute_host
dedent|''
name|'def'
name|'service_get_by_compute_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_update
dedent|''
name|'def'
name|'service_update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'binary'
op|','
name|'params_to_update'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to enable/disable a service. For compute services, setting to\n        disabled stops new builds arriving on that host.\n\n        :param host_name: the name of the host machine that the service is\n                          running\n        :param binary: The name of the executable that the service runs as\n        :param params_to_update: eg. {\'disabled\': True}\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'service_update'
op|'('
nl|'\n'
name|'context'
op|','
name|'host_name'
op|','
name|'binary'
op|','
name|'params_to_update'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_get_all_by_host
dedent|''
name|'def'
name|'instance_get_all_by_host'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all instances by host.  Host might have a cell prepended\n        to it, so we\'ll need to strip it out.  We don\'t need to proxy\n        this call to cells, as we have instance information here in\n        the API cell.\n        """'
newline|'\n'
name|'cell_name'
op|','
name|'host_name'
op|'='
name|'cells_utils'
op|'.'
name|'split_cell_and_item'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'super'
op|'('
name|'HostAPI'
op|','
name|'self'
op|')'
op|'.'
name|'instance_get_all_by_host'
op|'('
name|'context'
op|','
nl|'\n'
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
op|'['
name|'i'
name|'for'
name|'i'
name|'in'
name|'instances'
nl|'\n'
name|'if'
name|'i'
op|'['
string|"'cell_name'"
op|']'
op|'=='
name|'cell_name'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|task_log_get_all
dedent|''
name|'def'
name|'task_log_get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'task_name'
op|','
name|'beginning'
op|','
name|'ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'None'
op|','
name|'state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the task logs within a given range from cells,\n        optionally filtering by the host and/or state.  For cells, the\n        host should be a path like \'path!to!cell@host\'.  If no @host\n        is given, only task logs from a particular cell will be returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'task_log_get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'task_name'
op|','
nl|'\n'
name|'beginning'
op|','
nl|'\n'
name|'ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
nl|'\n'
name|'state'
op|'='
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get
dedent|''
name|'def'
name|'compute_node_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'compute_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a compute node from a particular cell by its integer ID.\n        compute_id should be in the format of \'path!to!cell@ID\'.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_get'
op|'('
name|'context'
op|','
name|'compute_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get_all
dedent|''
name|'def'
name|'compute_node_get_all'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_search_by_hypervisor
dedent|''
name|'def'
name|'compute_node_search_by_hypervisor'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'hypervisor_match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'hypervisor_match'
op|'='
name|'hypervisor_match'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_statistics
dedent|''
name|'def'
name|'compute_node_statistics'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'compute_node_stats'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceActionAPI
dedent|''
dedent|''
name|'class'
name|'InstanceActionAPI'
op|'('
name|'compute_api'
op|'.'
name|'InstanceActionAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""InstanceActionAPI() class for cells."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InstanceActionAPI'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|actions_get
dedent|''
name|'def'
name|'actions_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'actions_get'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_get_by_request_id
dedent|''
name|'def'
name|'action_get_by_request_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'request_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'action_get_by_request_id'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'request_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_events_get
dedent|''
name|'def'
name|'action_events_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'action_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'action_events_get'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'action_id'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

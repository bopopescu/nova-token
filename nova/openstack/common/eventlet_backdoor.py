begin_unit
comment|'# Copyright (c) 2012 OpenStack Foundation.'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'print_function'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'gc'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pprint'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'eventlet'
op|'.'
name|'backdoor'
newline|'\n'
name|'import'
name|'greenlet'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'_i18n'
name|'import'
name|'_LI'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|help_for_backdoor_port
name|'help_for_backdoor_port'
op|'='
op|'('
nl|'\n'
string|'"Acceptable values are 0, <port>, and <start>:<end>, where 0 results "'
nl|'\n'
string|'"in listening on a random tcp port number; <port> results in listening "'
nl|'\n'
string|'"on the specified port number (and not enabling backdoor if that port "'
nl|'\n'
string|'"is in use); and <start>:<end> results in listening on the smallest "'
nl|'\n'
string|'"unused port number within the specified range of port numbers.  The "'
nl|'\n'
string|'"chosen port is displayed in the service\'s log file."'
op|')'
newline|'\n'
DECL|variable|eventlet_backdoor_opts
name|'eventlet_backdoor_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'backdoor_port'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Enable eventlet backdoor.  %s"'
op|'%'
name|'help_for_backdoor_port'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'eventlet_backdoor_opts'
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EventletBackdoorConfigValueError
name|'class'
name|'EventletBackdoorConfigValueError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'port_range'
op|','
name|'help_msg'
op|','
name|'ex'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
op|'('
string|"'Invalid backdoor_port configuration %(range)s: %(ex)s. '"
nl|'\n'
string|"'%(help)s'"
op|'%'
nl|'\n'
op|'{'
string|"'range'"
op|':'
name|'port_range'
op|','
string|"'ex'"
op|':'
name|'ex'
op|','
string|"'help'"
op|':'
name|'help_msg'
op|'}'
op|')'
newline|'\n'
name|'super'
op|'('
name|'EventletBackdoorConfigValueError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_range'
op|'='
name|'port_range'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_dont_use_this
dedent|''
dedent|''
name|'def'
name|'_dont_use_this'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
string|'"Don\'t use this, just disconnect instead"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_objects
dedent|''
name|'def'
name|'_find_objects'
op|'('
name|'t'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
name|'o'
name|'for'
name|'o'
name|'in'
name|'gc'
op|'.'
name|'get_objects'
op|'('
op|')'
name|'if'
name|'isinstance'
op|'('
name|'o'
op|','
name|'t'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_print_greenthreads
dedent|''
name|'def'
name|'_print_greenthreads'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'i'
op|','
name|'gt'
name|'in'
name|'enumerate'
op|'('
name|'_find_objects'
op|'('
name|'greenlet'
op|'.'
name|'greenlet'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
name|'i'
op|','
name|'gt'
op|')'
newline|'\n'
name|'traceback'
op|'.'
name|'print_stack'
op|'('
name|'gt'
op|'.'
name|'gr_frame'
op|')'
newline|'\n'
name|'print'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_print_nativethreads
dedent|''
dedent|''
name|'def'
name|'_print_nativethreads'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'threadId'
op|','
name|'stack'
name|'in'
name|'sys'
op|'.'
name|'_current_frames'
op|'('
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
name|'threadId'
op|')'
newline|'\n'
name|'traceback'
op|'.'
name|'print_stack'
op|'('
name|'stack'
op|')'
newline|'\n'
name|'print'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parse_port_range
dedent|''
dedent|''
name|'def'
name|'_parse_port_range'
op|'('
name|'port_range'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"':'"
name|'not'
name|'in'
name|'port_range'
op|':'
newline|'\n'
indent|'        '
name|'start'
op|','
name|'end'
op|'='
name|'port_range'
op|','
name|'port_range'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'start'
op|','
name|'end'
op|'='
name|'port_range'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'start'
op|','
name|'end'
op|'='
name|'int'
op|'('
name|'start'
op|')'
op|','
name|'int'
op|'('
name|'end'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'<'
name|'start'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
newline|'\n'
dedent|''
name|'return'
name|'start'
op|','
name|'end'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'EventletBackdoorConfigValueError'
op|'('
name|'port_range'
op|','
name|'ex'
op|','
nl|'\n'
name|'help_for_backdoor_port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_listen
dedent|''
dedent|''
name|'def'
name|'_listen'
op|'('
name|'host'
op|','
name|'start_port'
op|','
name|'end_port'
op|','
name|'listen_func'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try_port'
op|'='
name|'start_port'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'listen_func'
op|'('
op|'('
name|'host'
op|','
name|'try_port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'exc'
op|'.'
name|'errno'
op|'!='
name|'errno'
op|'.'
name|'EADDRINUSE'
name|'or'
nl|'\n'
name|'try_port'
op|'>='
name|'end_port'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'try_port'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|initialize_if_enabled
dedent|''
dedent|''
dedent|''
name|'def'
name|'initialize_if_enabled'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'backdoor_locals'
op|'='
op|'{'
nl|'\n'
string|"'exit'"
op|':'
name|'_dont_use_this'
op|','
comment|"# So we don't exit the entire process"
nl|'\n'
string|"'quit'"
op|':'
name|'_dont_use_this'
op|','
comment|"# So we don't exit the entire process"
nl|'\n'
string|"'fo'"
op|':'
name|'_find_objects'
op|','
nl|'\n'
string|"'pgt'"
op|':'
name|'_print_greenthreads'
op|','
nl|'\n'
string|"'pnt'"
op|':'
name|'_print_nativethreads'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'backdoor_port'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'start_port'
op|','
name|'end_port'
op|'='
name|'_parse_port_range'
op|'('
name|'str'
op|'('
name|'CONF'
op|'.'
name|'backdoor_port'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(johannes): The standard sys.displayhook will print the value of'
nl|'\n'
comment|'# the last expression and set it to __builtin__._, which overwrites'
nl|'\n'
comment|"# the __builtin__._ that gettext sets. Let's switch to using pprint"
nl|'\n'
comment|"# since it won't interact poorly with gettext, and it's easier to"
nl|'\n'
comment|'# read the output too.'
nl|'\n'
DECL|function|displayhook
name|'def'
name|'displayhook'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'val'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pprint'
op|'.'
name|'pprint'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'sys'
op|'.'
name|'displayhook'
op|'='
name|'displayhook'
newline|'\n'
nl|'\n'
name|'sock'
op|'='
name|'_listen'
op|'('
string|"'localhost'"
op|','
name|'start_port'
op|','
name|'end_port'
op|','
name|'eventlet'
op|'.'
name|'listen'
op|')'
newline|'\n'
nl|'\n'
comment|'# In the case of backdoor port being zero, a port number is assigned by'
nl|'\n'
comment|'# listen().  In any case, pull the port number out here.'
nl|'\n'
name|'port'
op|'='
name|'sock'
op|'.'
name|'getsockname'
op|'('
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
nl|'\n'
name|'_LI'
op|'('
string|"'Eventlet backdoor listening on %(port)s for process %(pid)d'"
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'port'"
op|':'
name|'port'
op|','
string|"'pid'"
op|':'
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|'}'
nl|'\n'
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn_n'
op|'('
name|'eventlet'
op|'.'
name|'backdoor'
op|'.'
name|'backdoor_server'
op|','
name|'sock'
op|','
nl|'\n'
name|'locals'
op|'='
name|'backdoor_locals'
op|')'
newline|'\n'
name|'return'
name|'port'
newline|'\n'
dedent|''
endmarker|''
end_unit

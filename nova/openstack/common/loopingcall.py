begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'event'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_LE'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopingCallDone
name|'class'
name|'LoopingCallDone'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exception to break out and stop a LoopingCall.\n\n    The poll-function passed to LoopingCall can raise this exception to\n    break out of the loop normally. This is somewhat analogous to\n    StopIteration.\n\n    An optional return-value can be included as the argument to the exception;\n    this return-value will be returned by LoopingCall.wait()\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'retvalue'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""":param retvalue: Value that LoopingCall.wait() should return."""'
newline|'\n'
name|'self'
op|'.'
name|'retvalue'
op|'='
name|'retvalue'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopingCallBase
dedent|''
dedent|''
name|'class'
name|'LoopingCallBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kw'
op|'='
name|'kw'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
newline|'\n'
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'done'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'done'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FixedIntervalLoopingCall
dedent|''
dedent|''
name|'class'
name|'FixedIntervalLoopingCall'
op|'('
name|'LoopingCallBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A fixed interval looping call."""'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'interval'
op|','
name|'initial_delay'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'True'
newline|'\n'
name|'done'
op|'='
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_inner
name|'def'
name|'_inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'initial_delay'
op|':'
newline|'\n'
indent|'                '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'initial_delay'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                    '
name|'start'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
name|'end'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'delay'
op|'='
name|'interval'
op|'-'
name|'timeutils'
op|'.'
name|'delta_seconds'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
name|'if'
name|'delay'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_LW'
op|'('
string|"'task run outlasted interval by %s sec'"
op|')'
op|'%'
nl|'\n'
op|'-'
name|'delay'
op|')'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'delay'
name|'if'
name|'delay'
op|'>'
number|'0'
name|'else'
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'LoopingCallDone'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
name|'e'
op|'.'
name|'retvalue'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'in fixed duration looping call'"
op|')'
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send_exception'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'done'
op|'.'
name|'send'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'done'
op|'='
name|'done'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn_n'
op|'('
name|'_inner'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'done'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(mikal): this class name is deprecated in Havana and should be removed'
nl|'\n'
comment|'# in the I release'
nl|'\n'
DECL|variable|LoopingCall
dedent|''
dedent|''
name|'LoopingCall'
op|'='
name|'FixedIntervalLoopingCall'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DynamicLoopingCall
name|'class'
name|'DynamicLoopingCall'
op|'('
name|'LoopingCallBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A looping call which sleeps until the next known event.\n\n    The function called should return how long to sleep for before being\n    called again.\n    """'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'initial_delay'
op|'='
name|'None'
op|','
name|'periodic_interval_max'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'True'
newline|'\n'
name|'done'
op|'='
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_inner
name|'def'
name|'_inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'initial_delay'
op|':'
newline|'\n'
indent|'                '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'initial_delay'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                    '
name|'idle'
op|'='
name|'self'
op|'.'
name|'f'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'periodic_interval_max'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'idle'
op|'='
name|'min'
op|'('
name|'idle'
op|','
name|'periodic_interval_max'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Dynamic looping call sleeping for %.02f '"
nl|'\n'
string|"'seconds'"
op|','
name|'idle'
op|')'
newline|'\n'
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'idle'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'LoopingCallDone'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
name|'e'
op|'.'
name|'retvalue'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'in dynamic looping call'"
op|')'
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send_exception'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'done'
op|'.'
name|'send'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'done'
op|'='
name|'done'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn'
op|'('
name|'_inner'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'done'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

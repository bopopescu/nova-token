begin_unit
comment|'# Copyright (c) 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nHelpers for comparing version strings.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
nl|'\n'
name|'import'
name|'pkg_resources'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'_i18n'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|deprecated
name|'class'
name|'deprecated'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A decorator to mark callables as deprecated.\n\n    This decorator logs a deprecation message when the callable it decorates is\n    used. The message will include the release where the callable was\n    deprecated, the release where it may be removed and possibly an optional\n    replacement.\n\n    Examples:\n\n    1. Specifying the required deprecated release\n\n    >>> @deprecated(as_of=deprecated.ICEHOUSE)\n    ... def a(): pass\n\n    2. Specifying a replacement:\n\n    >>> @deprecated(as_of=deprecated.ICEHOUSE, in_favor_of=\'f()\')\n    ... def b(): pass\n\n    3. Specifying the release where the functionality may be removed:\n\n    >>> @deprecated(as_of=deprecated.ICEHOUSE, remove_in=+1)\n    ... def c(): pass\n\n    4. Specifying the deprecated functionality will not be removed:\n    >>> @deprecated(as_of=deprecated.ICEHOUSE, remove_in=0)\n    ... def d(): pass\n\n    5. Specifying a replacement, deprecated functionality will not be removed:\n    >>> @deprecated(as_of=deprecated.ICEHOUSE, in_favor_of=\'f()\', remove_in=0)\n    ... def e(): pass\n\n    """'
newline|'\n'
nl|'\n'
comment|'# NOTE(morganfainberg): Bexar is used for unit test purposes, it is'
nl|'\n'
comment|'# expected we maintain a gap between Bexar and Folsom in this list.'
nl|'\n'
DECL|variable|BEXAR
name|'BEXAR'
op|'='
string|"'B'"
newline|'\n'
DECL|variable|FOLSOM
name|'FOLSOM'
op|'='
string|"'F'"
newline|'\n'
DECL|variable|GRIZZLY
name|'GRIZZLY'
op|'='
string|"'G'"
newline|'\n'
DECL|variable|HAVANA
name|'HAVANA'
op|'='
string|"'H'"
newline|'\n'
DECL|variable|ICEHOUSE
name|'ICEHOUSE'
op|'='
string|"'I'"
newline|'\n'
DECL|variable|JUNO
name|'JUNO'
op|'='
string|"'J'"
newline|'\n'
DECL|variable|KILO
name|'KILO'
op|'='
string|"'K'"
newline|'\n'
nl|'\n'
DECL|variable|_RELEASES
name|'_RELEASES'
op|'='
op|'{'
nl|'\n'
comment|'# NOTE(morganfainberg): Bexar is used for unit test purposes, it is'
nl|'\n'
comment|'# expected we maintain a gap between Bexar and Folsom in this list.'
nl|'\n'
string|"'B'"
op|':'
string|"'Bexar'"
op|','
nl|'\n'
string|"'F'"
op|':'
string|"'Folsom'"
op|','
nl|'\n'
string|"'G'"
op|':'
string|"'Grizzly'"
op|','
nl|'\n'
string|"'H'"
op|':'
string|"'Havana'"
op|','
nl|'\n'
string|"'I'"
op|':'
string|"'Icehouse'"
op|','
nl|'\n'
string|"'J'"
op|':'
string|"'Juno'"
op|','
nl|'\n'
string|"'K'"
op|':'
string|"'Kilo'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|_deprecated_msg_with_alternative
name|'_deprecated_msg_with_alternative'
op|'='
name|'_'
op|'('
nl|'\n'
string|"'%(what)s is deprecated as of %(as_of)s in favor of '"
nl|'\n'
string|"'%(in_favor_of)s and may be removed in %(remove_in)s.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_deprecated_msg_no_alternative
name|'_deprecated_msg_no_alternative'
op|'='
name|'_'
op|'('
nl|'\n'
string|"'%(what)s is deprecated as of %(as_of)s and may be '"
nl|'\n'
string|"'removed in %(remove_in)s. It will not be superseded.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_deprecated_msg_with_alternative_no_removal
name|'_deprecated_msg_with_alternative_no_removal'
op|'='
name|'_'
op|'('
nl|'\n'
string|"'%(what)s is deprecated as of %(as_of)s in favor of %(in_favor_of)s.'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_deprecated_msg_with_no_alternative_no_removal
name|'_deprecated_msg_with_no_alternative_no_removal'
op|'='
name|'_'
op|'('
nl|'\n'
string|"'%(what)s is deprecated as of %(as_of)s. It will not be superseded.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'as_of'
op|','
name|'in_favor_of'
op|'='
name|'None'
op|','
name|'remove_in'
op|'='
number|'2'
op|','
name|'what'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize decorator\n\n        :param as_of: the release deprecating the callable. Constants\n            are define in this class for convenience.\n        :param in_favor_of: the replacement for the callable (optional)\n        :param remove_in: an integer specifying how many releases to wait\n            before removing (default: 2)\n        :param what: name of the thing being deprecated (default: the\n            callable\'s name)\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'as_of'
op|'='
name|'as_of'
newline|'\n'
name|'self'
op|'.'
name|'in_favor_of'
op|'='
name|'in_favor_of'
newline|'\n'
name|'self'
op|'.'
name|'remove_in'
op|'='
name|'remove_in'
newline|'\n'
name|'self'
op|'.'
name|'what'
op|'='
name|'what'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'func_or_cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'what'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'what'
op|'='
name|'func_or_cls'
op|'.'
name|'__name__'
op|'+'
string|"'()'"
newline|'\n'
dedent|''
name|'msg'
op|','
name|'details'
op|'='
name|'self'
op|'.'
name|'_build_message'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'inspect'
op|'.'
name|'isfunction'
op|'('
name|'func_or_cls'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
op|'@'
name|'six'
op|'.'
name|'wraps'
op|'('
name|'func_or_cls'
op|')'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'msg'
op|','
name|'details'
op|')'
newline|'\n'
name|'return'
name|'func_or_cls'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapped'
newline|'\n'
dedent|''
name|'elif'
name|'inspect'
op|'.'
name|'isclass'
op|'('
name|'func_or_cls'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'orig_init'
op|'='
name|'func_or_cls'
op|'.'
name|'__init__'
newline|'\n'
nl|'\n'
comment|'# TODO(tsufiev): change `functools` module to `six` as'
nl|'\n'
comment|'# soon as six 1.7.4 (with fix for passing `assigned`'
nl|'\n'
comment|'# argument to underlying `functools.wraps`) is released'
nl|'\n'
comment|'# and added to the nova-incubator requrements'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'orig_init'
op|','
name|'assigned'
op|'='
op|'('
string|"'__name__'"
op|','
string|"'__doc__'"
op|')'
op|')'
newline|'\n'
DECL|function|new_init
name|'def'
name|'new_init'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'deprecated'
op|'('
name|'msg'
op|','
name|'details'
op|')'
newline|'\n'
name|'orig_init'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'func_or_cls'
op|'.'
name|'__init__'
op|'='
name|'new_init'
newline|'\n'
name|'return'
name|'func_or_cls'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|"'deprecated can be used only with functions or '"
nl|'\n'
string|"'classes'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_safe_to_remove_release
dedent|''
dedent|''
name|'def'
name|'_get_safe_to_remove_release'
op|'('
name|'self'
op|','
name|'release'
op|')'
op|':'
newline|'\n'
comment|'# TODO(dstanek): this method will have to be reimplemented once'
nl|'\n'
comment|'#    when we get to the X release because once we get to the Y'
nl|'\n'
comment|'#    release, what is Y+2?'
nl|'\n'
indent|'        '
name|'new_release'
op|'='
name|'chr'
op|'('
name|'ord'
op|'('
name|'release'
op|')'
op|'+'
name|'self'
op|'.'
name|'remove_in'
op|')'
newline|'\n'
name|'if'
name|'new_release'
name|'in'
name|'self'
op|'.'
name|'_RELEASES'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_RELEASES'
op|'['
name|'new_release'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'new_release'
newline|'\n'
nl|'\n'
DECL|member|_build_message
dedent|''
dedent|''
name|'def'
name|'_build_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'details'
op|'='
name|'dict'
op|'('
name|'what'
op|'='
name|'self'
op|'.'
name|'what'
op|','
nl|'\n'
name|'as_of'
op|'='
name|'self'
op|'.'
name|'_RELEASES'
op|'['
name|'self'
op|'.'
name|'as_of'
op|']'
op|','
nl|'\n'
name|'remove_in'
op|'='
name|'self'
op|'.'
name|'_get_safe_to_remove_release'
op|'('
name|'self'
op|'.'
name|'as_of'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'in_favor_of'
op|':'
newline|'\n'
indent|'            '
name|'details'
op|'['
string|"'in_favor_of'"
op|']'
op|'='
name|'self'
op|'.'
name|'in_favor_of'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'remove_in'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_deprecated_msg_with_alternative'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# There are no plans to remove this function, but it is'
nl|'\n'
comment|'# now deprecated.'
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_deprecated_msg_with_alternative_no_removal'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'remove_in'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_deprecated_msg_no_alternative'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# There are no plans to remove this function, but it is'
nl|'\n'
comment|'# now deprecated.'
nl|'\n'
indent|'                '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_deprecated_msg_with_no_alternative_no_removal'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'msg'
op|','
name|'details'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_compatible
dedent|''
dedent|''
name|'def'
name|'is_compatible'
op|'('
name|'requested_version'
op|','
name|'current_version'
op|','
name|'same_major'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine whether `requested_version` is satisfied by\n    `current_version`; in other words, `current_version` is >=\n    `requested_version`.\n\n    :param requested_version: version to check for compatibility\n    :param current_version: version to check against\n    :param same_major: if True, the major version must be identical between\n        `requested_version` and `current_version`. This is used when a\n        major-version difference indicates incompatibility between the two\n        versions. Since this is the common-case in practice, the default is\n        True.\n    :returns: True if compatible, False if not\n    """'
newline|'\n'
name|'requested_parts'
op|'='
name|'pkg_resources'
op|'.'
name|'parse_version'
op|'('
name|'requested_version'
op|')'
newline|'\n'
name|'current_parts'
op|'='
name|'pkg_resources'
op|'.'
name|'parse_version'
op|'('
name|'current_version'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'same_major'
name|'and'
op|'('
name|'requested_parts'
op|'['
number|'0'
op|']'
op|'!='
name|'current_parts'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'current_parts'
op|'>='
name|'requested_parts'
newline|'\n'
dedent|''
endmarker|''
end_unit

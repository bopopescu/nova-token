begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides thread-related generators\n\nThis module defines classes for threading-related\ngenerators for generating the models in\n:mod:`openstack.common.report.models.threading`.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'absolute_import'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
nl|'\n'
name|'import'
name|'greenlet'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'models'
name|'import'
name|'threading'
name|'as'
name|'tm'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'models'
name|'import'
name|'with_default_views'
name|'as'
name|'mwdv'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
name|'import'
name|'utils'
name|'as'
name|'rutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'views'
op|'.'
name|'text'
name|'import'
name|'generic'
name|'as'
name|'text_views'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadReportGenerator
name|'class'
name|'ThreadReportGenerator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Thread Data Generator\n\n    This generator returns a collection of\n    :class:`openstack.common.report.models.threading.ThreadModel`\n    objects by introspecting the current python state using\n    :func:`sys._current_frames()` .  Its constructor may optionally\n    be passed a frame object.  This frame object will be interpreted\n    as the actual stack trace for the current thread, and, come generation\n    time, will be used to replace the stack trace of the thread in which\n    this code is running.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'curr_thread_traceback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'traceback'
op|'='
name|'curr_thread_traceback'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'threadModels'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'('
name|'thread_id'
op|','
name|'tm'
op|'.'
name|'ThreadModel'
op|'('
name|'thread_id'
op|','
name|'stack'
op|')'
op|')'
nl|'\n'
name|'for'
name|'thread_id'
op|','
name|'stack'
name|'in'
name|'sys'
op|'.'
name|'_current_frames'
op|'('
op|')'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'traceback'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'curr_thread_id'
op|'='
name|'threading'
op|'.'
name|'current_thread'
op|'('
op|')'
op|'.'
name|'ident'
newline|'\n'
name|'threadModels'
op|'['
name|'curr_thread_id'
op|']'
op|'='
name|'tm'
op|'.'
name|'ThreadModel'
op|'('
name|'curr_thread_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'traceback'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'mwdv'
op|'.'
name|'ModelWithDefaultViews'
op|'('
name|'threadModels'
op|','
nl|'\n'
name|'text_view'
op|'='
name|'text_views'
op|'.'
name|'MultiView'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenThreadReportGenerator
dedent|''
dedent|''
name|'class'
name|'GreenThreadReportGenerator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Green Thread Data Generator\n\n    This generator returns a collection of\n    :class:`openstack.common.report.models.threading.GreenThreadModel`\n    objects by introspecting the current python garbage collection\n    state, and sifting through for :class:`greenlet.greenlet` objects.\n\n    .. seealso::\n\n        Function :func:`openstack.common.report.utils._find_objects`\n    """'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'threadModels'
op|'='
op|'['
nl|'\n'
name|'tm'
op|'.'
name|'GreenThreadModel'
op|'('
name|'gr'
op|'.'
name|'gr_frame'
op|')'
nl|'\n'
name|'for'
name|'gr'
name|'in'
name|'rutils'
op|'.'
name|'_find_objects'
op|'('
name|'greenlet'
op|'.'
name|'greenlet'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'mwdv'
op|'.'
name|'ModelWithDefaultViews'
op|'('
name|'threadModels'
op|','
nl|'\n'
name|'text_view'
op|'='
name|'text_views'
op|'.'
name|'MultiView'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

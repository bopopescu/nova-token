begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides generic XML views\n\nThis modules defines several basic views for serializing\ndata to XML.  Submodels that have already been serialized\nas XML may have their string values marked with `__is_xml__\n= True` using :class:`openstack.common.report.utils.StringWithAttrs`\n(each of the classes within this module does this automatically,\nand non-naive serializers check for this attribute and handle\nsuch strings specially)\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
name|'as'
name|'col'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'xml'
op|'.'
name|'etree'
op|'.'
name|'ElementTree'
name|'as'
name|'ET'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'utils'
name|'as'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeyValueView
name|'class'
name|'KeyValueView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Key-Value XML View\n\n    This view performs advanced serialization of a data model\n    into XML.  It first deserializes any values marked as XML so\n    that they can be properly reserialized later.  It then follows\n    the following rules to perform serialization:\n\n    key : text/xml\n        The tag name is the key name, and the contents are the text or xml\n    key : Sequence\n        A wrapper tag is created with the key name, and each item is placed\n        in an \'item\' tag\n    key : Mapping\n        A wrapper tag is created with the key name, and the serialize is called\n        on each key-value pair (such that each key gets its own tag)\n\n    :param str wrapper_name: the name of the top-level element\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrapper_name'
op|'='
string|'"model"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wrapper_name'
op|'='
name|'wrapper_name'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
comment|'# this part deals with subviews that were already serialized'
nl|'\n'
indent|'        '
name|'cpy'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'model'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'valstr'
name|'in'
name|'model'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'valstr'
op|','
string|"'__is_xml__'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cpy'
op|'['
name|'key'
op|']'
op|'='
name|'ET'
op|'.'
name|'fromstring'
op|'('
name|'valstr'
op|')'
newline|'\n'
nl|'\n'
DECL|function|serialize
dedent|''
dedent|''
name|'def'
name|'serialize'
op|'('
name|'rootmodel'
op|','
name|'rootkeyname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'ET'
op|'.'
name|'Element'
op|'('
name|'rootkeyname'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'rootmodel'
op|','
name|'col'
op|'.'
name|'Mapping'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'key'
name|'in'
name|'rootmodel'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'append'
op|'('
name|'serialize'
op|'('
name|'rootmodel'
op|'['
name|'key'
op|']'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
op|'('
name|'isinstance'
op|'('
name|'rootmodel'
op|','
name|'col'
op|'.'
name|'Sequence'
op|')'
nl|'\n'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'rootmodel'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'val'
name|'in'
name|'rootmodel'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'append'
op|'('
name|'serialize'
op|'('
name|'val'
op|','
string|"'item'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'ET'
op|'.'
name|'iselement'
op|'('
name|'rootmodel'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'append'
op|'('
name|'rootmodel'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'text'
op|'='
name|'str'
op|'('
name|'rootmodel'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
dedent|''
name|'res'
op|'='
name|'utils'
op|'.'
name|'StringWithAttrs'
op|'('
name|'ET'
op|'.'
name|'tostring'
op|'('
name|'serialize'
op|'('
name|'cpy'
op|','
nl|'\n'
name|'self'
op|'.'
name|'wrapper_name'
op|')'
op|')'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'__is_xml__'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'res'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

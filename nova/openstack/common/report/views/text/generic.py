begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides generic text views\n\nThis modules provides several generic views for\nserializing models into human-readable text.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
name|'as'
name|'col'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiView
name|'class'
name|'MultiView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Text View Containing Multiple Views\n\n    This view simply serializes each\n    value in the data model, and then\n    joins them with newlines (ignoring\n    the key values altogether).  This is\n    useful for serializing lists of models\n    (as array-like dicts).\n    """'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
op|'['
name|'str'
op|'('
name|'model'
op|'['
name|'key'
op|']'
op|')'
name|'for'
name|'key'
name|'in'
name|'model'
op|']'
newline|'\n'
name|'return'
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicKeyValueView
dedent|''
dedent|''
name|'class'
name|'BasicKeyValueView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Basic Key-Value Text View\n\n    This view performs a naive serialization of a model into\n    text using a basic key-value method, where each\n    key-value pair is rendered as "key = str(value)"\n    """'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
string|'""'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'model'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'+='
string|'"{key} = {value}\\n"'
op|'.'
name|'format'
op|'('
name|'key'
op|'='
name|'key'
op|','
name|'value'
op|'='
name|'model'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeyValueView
dedent|''
dedent|''
name|'class'
name|'KeyValueView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Key-Value Text View\n\n    This view performs an advanced serialization of a model\n    into text by following the following set of rules:\n\n    key : text\n        key = text\n\n    rootkey : Mapping\n        ::\n\n            rootkey =\n              serialize(key, value)\n\n    key : Sequence\n        ::\n\n            key =\n              serialize(item)\n\n    :param str indent_str: the string used to represent one "indent"\n    :param str key_sep: the separator to use between keys and values\n    :param str dict_sep: the separator to use after a dictionary root key\n    :param str list_sep: the separator to use after a list root key\n    :param str anon_dict: the "key" to use when there is a dict in a list\n                          (does not automatically use the dict separator)\n    :param before_dict: content to place on the line(s) before the a dict\n                        root key (use None to avoid inserting an extra line)\n    :type before_dict: str or None\n    :param before_list: content to place on the line(s) before the a list\n                        root key (use None to avoid inserting an extra line)\n    :type before_list: str or None\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
nl|'\n'
name|'indent_str'
op|'='
string|"'  '"
op|','
nl|'\n'
name|'key_sep'
op|'='
string|"' = '"
op|','
nl|'\n'
name|'dict_sep'
op|'='
string|"' = '"
op|','
nl|'\n'
name|'list_sep'
op|'='
string|"' = '"
op|','
nl|'\n'
name|'anon_dict'
op|'='
string|"'[dict]'"
op|','
nl|'\n'
name|'before_dict'
op|'='
name|'None'
op|','
nl|'\n'
name|'before_list'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'indent_str'
op|'='
name|'indent_str'
newline|'\n'
name|'self'
op|'.'
name|'key_sep'
op|'='
name|'key_sep'
newline|'\n'
name|'self'
op|'.'
name|'dict_sep'
op|'='
name|'dict_sep'
newline|'\n'
name|'self'
op|'.'
name|'list_sep'
op|'='
name|'list_sep'
newline|'\n'
name|'self'
op|'.'
name|'anon_dict'
op|'='
name|'anon_dict'
newline|'\n'
name|'self'
op|'.'
name|'before_dict'
op|'='
name|'before_dict'
newline|'\n'
name|'self'
op|'.'
name|'before_list'
op|'='
name|'before_list'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
DECL|function|serialize
indent|'        '
name|'def'
name|'serialize'
op|'('
name|'root'
op|','
name|'rootkey'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'rootkey'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'.'
name|'append'
op|'('
op|'('
name|'self'
op|'.'
name|'indent_str'
op|'*'
name|'indent'
op|')'
op|'+'
name|'rootkey'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'root'
op|','
name|'col'
op|'.'
name|'Mapping'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rootkey'
name|'is'
name|'None'
name|'and'
name|'indent'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'append'
op|'('
op|'('
name|'self'
op|'.'
name|'indent_str'
op|'*'
name|'indent'
op|')'
op|'+'
name|'self'
op|'.'
name|'anon_dict'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'rootkey'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'['
number|'0'
op|']'
op|'+='
name|'self'
op|'.'
name|'dict_sep'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'before_dict'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'before_dict'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'key'
name|'in'
name|'root'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'extend'
op|'('
name|'serialize'
op|'('
name|'root'
op|'['
name|'key'
op|']'
op|','
name|'key'
op|','
name|'indent'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
op|'('
name|'isinstance'
op|'('
name|'root'
op|','
name|'col'
op|'.'
name|'Sequence'
op|')'
name|'and'
nl|'\n'
name|'not'
name|'isinstance'
op|'('
name|'root'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rootkey'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'['
number|'0'
op|']'
op|'+='
name|'self'
op|'.'
name|'list_sep'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'before_list'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'before_list'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'val'
name|'in'
name|'root'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'extend'
op|'('
name|'serialize'
op|'('
name|'val'
op|','
name|'None'
op|','
name|'indent'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'str_root'
op|'='
name|'str'
op|'('
name|'root'
op|')'
newline|'\n'
name|'if'
string|"'\\n'"
name|'in'
name|'str_root'
op|':'
newline|'\n'
comment|'# we are in a submodel'
nl|'\n'
indent|'                    '
name|'if'
name|'rootkey'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'['
number|'0'
op|']'
op|'+='
name|'self'
op|'.'
name|'dict_sep'
newline|'\n'
nl|'\n'
dedent|''
name|'list_root'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'indent_str'
op|'*'
op|'('
name|'indent'
op|'+'
number|'1'
op|')'
op|')'
op|'+'
name|'line'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'str_root'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
newline|'\n'
name|'res'
op|'.'
name|'extend'
op|'('
name|'list_root'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# just a normal key or list entry'
nl|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'['
number|'0'
op|']'
op|'+='
name|'self'
op|'.'
name|'key_sep'
op|'+'
name|'str_root'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                        '
name|'res'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'indent_str'
op|'*'
name|'indent'
op|')'
op|'+'
name|'str_root'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'serialize'
op|'('
name|'model'
op|','
name|'None'
op|','
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TableView
dedent|''
dedent|''
name|'class'
name|'TableView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Basic Table Text View\n\n    This view performs serialization of data into a basic table with\n    predefined column names and mappings.  Column width is auto-calculated\n    evenly, column values are automatically truncated accordingly.  Values\n    are centered in the columns.\n\n    :param [str] column_names: the headers for each of the columns\n    :param [str] column_values: the item name to match each column to in\n                                each row\n    :param str table_prop_name: the name of the property within the model\n                                containing the row models\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'column_names'
op|','
name|'column_values'
op|','
name|'table_prop_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'table_prop_name'
op|'='
name|'table_prop_name'
newline|'\n'
name|'self'
op|'.'
name|'column_names'
op|'='
name|'column_names'
newline|'\n'
name|'self'
op|'.'
name|'column_values'
op|'='
name|'column_values'
newline|'\n'
name|'self'
op|'.'
name|'column_width'
op|'='
op|'('
number|'72'
op|'-'
name|'len'
op|'('
name|'column_names'
op|')'
op|'+'
number|'1'
op|')'
op|'/'
name|'len'
op|'('
name|'column_names'
op|')'
newline|'\n'
nl|'\n'
name|'column_headers'
op|'='
string|'"|"'
op|'.'
name|'join'
op|'('
nl|'\n'
string|'"{ch["'
op|'+'
name|'str'
op|'('
name|'n'
op|')'
op|'+'
string|'"]: ^"'
op|'+'
name|'str'
op|'('
name|'self'
op|'.'
name|'column_width'
op|')'
op|'+'
string|'"}"'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'column_names'
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# correct for float-to-int roundoff error'
nl|'\n'
name|'test_fmt'
op|'='
name|'column_headers'
op|'.'
name|'format'
op|'('
name|'ch'
op|'='
name|'column_names'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'test_fmt'
op|')'
op|'<'
number|'72'
op|':'
newline|'\n'
indent|'            '
name|'column_headers'
op|'+='
string|"' '"
op|'*'
op|'('
number|'72'
op|'-'
name|'len'
op|'('
name|'test_fmt'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'vert_divider'
op|'='
string|"'-'"
op|'*'
number|'72'
newline|'\n'
name|'self'
op|'.'
name|'header_fmt_str'
op|'='
name|'column_headers'
op|'+'
string|'"\\n"'
op|'+'
name|'vert_divider'
op|'+'
string|'"\\n"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'row_fmt_str'
op|'='
string|'"|"'
op|'.'
name|'join'
op|'('
nl|'\n'
string|'"{cv["'
op|'+'
name|'str'
op|'('
name|'n'
op|')'
op|'+'
string|'"]: ^"'
op|'+'
name|'str'
op|'('
name|'self'
op|'.'
name|'column_width'
op|')'
op|'+'
string|'"}"'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'column_values'
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'self'
op|'.'
name|'header_fmt_str'
op|'.'
name|'format'
op|'('
name|'ch'
op|'='
name|'self'
op|'.'
name|'column_names'
op|')'
newline|'\n'
name|'for'
name|'raw_row'
name|'in'
name|'model'
op|'['
name|'self'
op|'.'
name|'table_prop_name'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'row'
op|'='
op|'['
name|'str'
op|'('
name|'raw_row'
op|'['
name|'prop_name'
op|']'
op|')'
name|'for'
name|'prop_name'
name|'in'
name|'self'
op|'.'
name|'column_values'
op|']'
newline|'\n'
comment|'# double format is in case we have roundoff error'
nl|'\n'
name|'res'
op|'+='
string|"'{0: <72}\\n'"
op|'.'
name|'format'
op|'('
name|'self'
op|'.'
name|'row_fmt_str'
op|'.'
name|'format'
op|'('
name|'cv'
op|'='
name|'row'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

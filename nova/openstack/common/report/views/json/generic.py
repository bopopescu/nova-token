begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides generic JSON views\n\nThis modules defines several basic views for serializing\ndata to JSON.  Submodels that have already been serialized\nas JSON may have their string values marked with `__is_json__\n= True` using :class:`openstack.common.report.utils.StringWithAttrs`\n(each of the classes within this module does this automatically,\nand non-naive serializers check for this attribute and handle\nsuch strings specially)\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
name|'as'
name|'json'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
name|'import'
name|'utils'
name|'as'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicKeyValueView
name|'class'
name|'BasicKeyValueView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Basic Key-Value JSON View\n\n    This view performs a naive serialization of a model\n    into JSON by simply calling :func:`json.dumps` on the model\n    """'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'utils'
op|'.'
name|'StringWithAttrs'
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'model'
op|'.'
name|'data'
op|')'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'__is_json__'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'res'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeyValueView
dedent|''
dedent|''
name|'class'
name|'KeyValueView'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Key-Value JSON View\n\n    This view performs advanced serialization to a model\n    into JSON.  It does so by first checking all values to\n    see if they are marked as JSON.  If so, they are deserialized\n    using :func:`json.loads`.  Then, the copy of the model with all\n    JSON deserialized is reserialized into proper nested JSON using\n    :func:`json.dumps`.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'model'
op|')'
op|':'
newline|'\n'
comment|'# this part deals with subviews that were already serialized'
nl|'\n'
indent|'        '
name|'cpy'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'model'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'model'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'model'
op|'['
name|'key'
op|']'
op|','
string|"'__is_json__'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'cpy'
op|'['
name|'key'
op|']'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'model'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'res'
op|'='
name|'utils'
op|'.'
name|'StringWithAttrs'
op|'('
name|'json'
op|'.'
name|'dumps'
op|'('
name|'cpy'
op|'.'
name|'data'
op|','
name|'sort_keys'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'res'
op|'.'
name|'__is_json__'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'res'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

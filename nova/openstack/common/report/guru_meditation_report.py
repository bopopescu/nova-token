begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides Guru Meditation Report\n\nThis module defines the actual OpenStack Guru Meditation\nReport class.\n\nThis can be used in the OpenStack command definition files.\nFor example, in a nova command module (under nova/cmd):\n\n.. code-block:: python\n   :emphasize-lines: 8,9,10\n\n   CONF = cfg.CONF\n   # maybe import some options here...\n\n   def main():\n       config.parse_args(sys.argv)\n       logging.setup(\'blah\')\n\n       TextGuruMeditation.register_section(\'Some Special Section\',\n                                           special_section_generator)\n       TextGuruMeditation.setup_autorun(version_object)\n\n       server = service.Service.create(binary=\'some-service\',\n                                       topic=CONF.some_service_topic)\n       service.serve(server)\n       service.wait()\n\nThen, you can do\n\n.. code-block:: bash\n\n   $ kill -USR1 $SERVICE_PID\n\nand get a Guru Meditation Report in the file or terminal\nwhere stderr is logged for that given service.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'print_function'
newline|'\n'
nl|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'generators'
name|'import'
name|'conf'
name|'as'
name|'cgen'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'generators'
name|'import'
name|'threading'
name|'as'
name|'tgen'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'generators'
name|'import'
name|'version'
name|'as'
name|'pgen'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
name|'import'
name|'report'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GuruMeditation
name|'class'
name|'GuruMeditation'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Guru Meditation Report Mixin/Base Class\n\n    This class is a base class for Guru Meditation Reports.\n    It provides facilities for registering sections and\n    setting up functionality to auto-run the report on\n    a certain signal.\n\n    This class should always be used in conjunction with\n    a Report class via multiple inheritance.  It should\n    always come first in the class list to ensure the\n    MRO is correct.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'version_obj'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'version_obj'
op|'='
name|'version_obj'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'GuruMeditation'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start_section_index'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'sections'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|register_section
name|'def'
name|'register_section'
op|'('
name|'cls'
op|','
name|'section_title'
op|','
name|'generator'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a New Section\n\n        This method registers a persistent section for the current\n        class.\n\n        :param str section_title: the title of the section\n        :param generator: the generator for the section\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'persistent_sections'
op|'.'
name|'append'
op|'('
op|'['
name|'section_title'
op|','
name|'generator'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'persistent_sections'
op|'='
op|'['
op|'['
name|'section_title'
op|','
name|'generator'
op|']'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|setup_autorun
name|'def'
name|'setup_autorun'
op|'('
name|'cls'
op|','
name|'version'
op|','
name|'signum'
op|'='
name|'signal'
op|'.'
name|'SIGUSR1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set Up Auto-Run\n\n        This method sets up the Guru Meditation Report to automatically\n        get dumped to stderr when the given signal is received.\n\n        :param version: the version object for the current product\n        :param signum: the signal to associate with running the report\n        """'
newline|'\n'
nl|'\n'
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signum'
op|','
name|'lambda'
op|'*'
name|'args'
op|':'
name|'cls'
op|'.'
name|'handle_signal'
op|'('
name|'version'
op|','
op|'*'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|handle_signal
name|'def'
name|'handle_signal'
op|'('
name|'cls'
op|','
name|'version'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The Signal Handler\n\n        This method (indirectly) handles receiving a registered signal and\n        dumping the Guru Meditation Report to stderr.  This method is designed\n        to be curried into a proper signal handler by currying out the version\n        parameter.\n\n        :param version: the version object for the current product\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'res'
op|'='
name|'cls'
op|'('
name|'version'
op|')'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'('
string|'"Unable to run Guru Meditation Report!"'
op|','
nl|'\n'
name|'file'
op|'='
name|'sys'
op|'.'
name|'stderr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'('
name|'res'
op|','
name|'file'
op|'='
name|'sys'
op|'.'
name|'stderr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_readd_sections
dedent|''
dedent|''
name|'def'
name|'_readd_sections'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'sections'
op|'['
name|'self'
op|'.'
name|'start_section_index'
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'add_section'
op|'('
string|"'Package'"
op|','
nl|'\n'
name|'pgen'
op|'.'
name|'PackageReportGenerator'
op|'('
name|'self'
op|'.'
name|'version_obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'add_section'
op|'('
string|"'Threads'"
op|','
nl|'\n'
name|'tgen'
op|'.'
name|'ThreadReportGenerator'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'add_section'
op|'('
string|"'Green Threads'"
op|','
nl|'\n'
name|'tgen'
op|'.'
name|'GreenThreadReportGenerator'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'add_section'
op|'('
string|"'Configuration'"
op|','
nl|'\n'
name|'cgen'
op|'.'
name|'ConfigReportGenerator'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'section_title'
op|','
name|'generator'
name|'in'
name|'self'
op|'.'
name|'persistent_sections'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'add_section'
op|'('
name|'section_title'
op|','
name|'generator'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_readd_sections'
op|'('
op|')'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'GuruMeditation'
op|','
name|'self'
op|')'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# GuruMeditation must come first to get the correct MRO'
nl|'\n'
DECL|class|TextGuruMeditation
dedent|''
dedent|''
name|'class'
name|'TextGuruMeditation'
op|'('
name|'GuruMeditation'
op|','
name|'report'
op|'.'
name|'TextReport'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Text Guru Meditation Report\n\n    This report is the basic human-readable Guru Meditation Report\n\n    It contains the following sections by default\n    (in addition to any registered persistent sections):\n\n    - Package Information\n\n    - Threads List\n\n    - Green Threads List\n\n    - Configuration Options\n\n    :param version_obj: the version object for the current product\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'version_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextGuruMeditation'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'version_obj'
op|','
nl|'\n'
string|"'Guru Meditation'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

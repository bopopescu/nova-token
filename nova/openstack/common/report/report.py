begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides Report classes\n\nThis module defines various classes representing\nreports and report sections.  All reports take the\nform of a report class containing various report sections.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'views'
op|'.'
name|'text'
op|'.'
name|'header'
name|'as'
name|'header_views'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BasicReport
name|'class'
name|'BasicReport'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Basic Report\n\n    A Basic Report consists of a collection of :class:`ReportSection`\n    objects, each of which contains a top-level model and generator.\n    It collects these sections into a cohesive report which may then\n    be serialized by calling :func:`run`\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sections'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|add_section
dedent|''
name|'def'
name|'add_section'
op|'('
name|'self'
op|','
name|'view'
op|','
name|'generator'
op|','
name|'index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a section to the report\n\n        This method adds a section with the given view and\n        generator to the report.  An index may be specified to\n        insert the section at a given location in the list;\n        If no index is specified, the section is appended to the\n        list.  The view is called on the model which results from\n        the generator when the report is run.  A generator is simply\n        a method or callable object which takes no arguments and\n        returns a :class:`openstack.common.report.models.base.ReportModel`\n        or similar object.\n\n        :param view: the top-level view for the section\n        :param generator: the method or class which generates the model\n        :param index: the index at which to insert the section\n                      (or None to append it)\n        :type index: int or None\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'index'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sections'
op|'.'
name|'append'
op|'('
name|'ReportSection'
op|'('
name|'view'
op|','
name|'generator'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sections'
op|'.'
name|'insert'
op|'('
name|'index'
op|','
name|'ReportSection'
op|'('
name|'view'
op|','
name|'generator'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run the report\n\n        This method runs the report, having each section generate\n        its data and serialize itself before joining the sections\n        together.  The BasicReport accomplishes the joining\n        by joining the serialized sections together with newlines.\n\n        :rtype: str\n        :returns: the serialized report\n        """'
newline|'\n'
nl|'\n'
name|'return'
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'str'
op|'('
name|'sect'
op|')'
name|'for'
name|'sect'
name|'in'
name|'self'
op|'.'
name|'sections'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReportSection
dedent|''
dedent|''
name|'class'
name|'ReportSection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Report Section\n\n    A report section contains a generator and a top-level view.\n    When something attempts to serialize the section by calling\n    str() on it, the section runs the generator and calls the view\n    on the resulting model.\n\n    .. seealso::\n\n       Class :class:`BasicReport`\n           :func:`BasicReport.add_section`\n\n    :param view: the top-level view for this section\n    :param generator: the generator for this section\n                      (any callable object which takes\n                       no parameters and returns a data model)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'view'
op|','
name|'generator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'view'
op|'='
name|'view'
newline|'\n'
name|'self'
op|'.'
name|'generator'
op|'='
name|'generator'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'view'
op|'('
name|'self'
op|'.'
name|'generator'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReportOfType
dedent|''
dedent|''
name|'class'
name|'ReportOfType'
op|'('
name|'BasicReport'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Report of a Certain Type\n\n    A ReportOfType has a predefined type associated with it.\n    This type is automatically propagated down to the each of\n    the sections upon serialization by wrapping the generator\n    for each section.\n\n    .. seealso::\n\n       Class :class:`openstack.common.report.models.with_default_view.ModelWithDefaultView` # noqa\n          (the entire class)\n\n       Class :class:`openstack.common.report.models.base.ReportModel`\n           :func:`openstack.common.report.models.base.ReportModel.set_current_view_type` # noqa\n\n    :param str tp: the type of the report\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'tp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'output_type'
op|'='
name|'tp'
newline|'\n'
name|'super'
op|'('
name|'ReportOfType'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_section
dedent|''
name|'def'
name|'add_section'
op|'('
name|'self'
op|','
name|'view'
op|','
name|'generator'
op|','
name|'index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
DECL|function|with_type
indent|'        '
name|'def'
name|'with_type'
op|'('
name|'gen'
op|')'
op|':'
newline|'\n'
DECL|function|newgen
indent|'            '
name|'def'
name|'newgen'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'res'
op|'='
name|'gen'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'res'
op|'.'
name|'set_current_view_type'
op|'('
name|'self'
op|'.'
name|'output_type'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
dedent|''
name|'return'
name|'newgen'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'ReportOfType'
op|','
name|'self'
op|')'
op|'.'
name|'add_section'
op|'('
nl|'\n'
name|'view'
op|','
nl|'\n'
name|'with_type'
op|'('
name|'generator'
op|')'
op|','
nl|'\n'
name|'index'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TextReport
dedent|''
dedent|''
name|'class'
name|'TextReport'
op|'('
name|'ReportOfType'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Human-Readable Text Report\n\n    This class defines a report that is designed to be read by a human\n    being.  It has nice section headers, and a formatted title.\n\n    :param str name: the title of the report\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TextReport'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|"'text'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
comment|'# add a title with a generator that creates an empty result model'
nl|'\n'
name|'self'
op|'.'
name|'add_section'
op|'('
name|'name'
op|','
name|'lambda'
op|':'
op|'('
string|"'|'"
op|'*'
number|'72'
op|')'
op|'+'
string|'"\\n\\n"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_section
dedent|''
name|'def'
name|'add_section'
op|'('
name|'self'
op|','
name|'heading'
op|','
name|'generator'
op|','
name|'index'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add a section to the report\n\n        This method adds a section with the given title, and\n        generator to the report.  An index may be specified to\n        insert the section at a given location in the list;\n        If no index is specified, the section is appended to the\n        list.  The view is called on the model which results from\n        the generator when the report is run.  A generator is simply\n        a method or callable object which takes no arguments and\n        returns a :class:`openstack.common.report.models.base.ReportModel`\n        or similar object.\n\n        The model is told to serialize as text (if possible) at serialization\n        time by wrapping the generator.  The view model\'s attached view\n        (if any) is wrapped in a\n        :class:`openstack.common.report.views.text.header.TitledView`\n\n        :param str heading: the title for the section\n        :param generator: the method or class which generates the model\n        :param index: the index at which to insert the section\n                      (or None to append)\n        :type index: int or None\n        """'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'TextReport'
op|','
name|'self'
op|')'
op|'.'
name|'add_section'
op|'('
name|'header_views'
op|'.'
name|'TitledView'
op|'('
name|'heading'
op|')'
op|','
nl|'\n'
name|'generator'
op|','
nl|'\n'
name|'index'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

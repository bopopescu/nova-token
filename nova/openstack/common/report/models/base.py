begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides the base report model\n\nThis module defines a class representing the basic report\ndata model from which all data models should inherit (or\nat least implement similar functionality).  Data models\nstore unserialized data generated by generators during\nthe report serialization process.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
name|'as'
name|'col'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReportModel
name|'class'
name|'ReportModel'
op|'('
name|'col'
op|'.'
name|'MutableMapping'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Report Data Model\n\n    A report data model contains data generated by some\n    generator method or class.  Data may be read or written\n    using dictionary-style access, and may be read (but not\n    written) using object-member-style access.  Additionally,\n    a data model may have an associated view.  This view is\n    used to serialize the model when str() is called on the\n    model.  An appropriate object for a view is callable with\n    a single parameter: the model to be serialized.\n\n    :param data: a dictionary of data to initially associate with the model\n    :param attached_view: a view object to attach to this model\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'data'
op|'='
name|'None'
op|','
name|'attached_view'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'attached_view'
op|'='
name|'attached_view'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
name|'data'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self_cpy'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self_cpy'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'self_cpy'
op|'['
name|'key'
op|']'
op|','
string|"'attached_view'"
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self_cpy'
op|'['
name|'key'
op|']'
op|'='
name|'str'
op|'('
name|'self_cpy'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'attached_view'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'attached_view'
op|'('
name|'self_cpy'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Cannot stringify model: no attached view"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'attached_view'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
string|'"<Model {cl.__module__}.{cl.__name__} {dt}"'
nl|'\n'
string|'" with view {vw.__module__}."'
nl|'\n'
string|'"{vw.__name__}>"'
op|')'
op|'.'
name|'format'
op|'('
name|'cl'
op|'='
name|'type'
op|'('
name|'self'
op|')'
op|','
nl|'\n'
name|'dt'
op|'='
name|'self'
op|'.'
name|'data'
op|','
nl|'\n'
name|'vw'
op|'='
name|'type'
op|'('
name|'self'
op|'.'
name|'attached_view'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
string|'"<Model {cl.__module__}.{cl.__name__} {dt}"'
nl|'\n'
string|'" with no view>"'
op|')'
op|'.'
name|'format'
op|'('
name|'cl'
op|'='
name|'type'
op|'('
name|'self'
op|')'
op|','
nl|'\n'
name|'dt'
op|'='
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'['
name|'attrname'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'attrname'
op|','
name|'attrval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'['
name|'attrname'
op|']'
op|'='
name|'attrval'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'data'
op|'['
name|'attrname'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'__contains__'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
comment|'# Needed for deepcopy in Python3. That will avoid an infinite loop'
nl|'\n'
comment|'# in __getattr__ .'
nl|'\n'
indent|'        '
name|'if'
string|"'data'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'__dict__'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'data'
op|'['
name|'attrname'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
nl|'\n'
string|'"\'{cl}\' object has no attribute \'{an}\'"'
op|'.'
name|'format'
op|'('
nl|'\n'
name|'cl'
op|'='
name|'type'
op|'('
name|'self'
op|')'
op|'.'
name|'__name__'
op|','
name|'an'
op|'='
name|'attrname'
nl|'\n'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'__iter__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_current_view_type
dedent|''
name|'def'
name|'set_current_view_type'
op|'('
name|'self'
op|','
name|'tp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the current view type\n\n        This method attempts to set the current view\n        type for this model and all submodels by calling\n        itself recursively on all values (and ignoring the\n        ones that are not themselves models)\n\n        :param tp: the type of the view (\'text\', \'json\', \'xml\', etc)\n        """'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
name|'key'
op|']'
op|'.'
name|'set_current_view_type'
op|'('
name|'tp'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

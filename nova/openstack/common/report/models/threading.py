begin_unit
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides threading and stack-trace models\n\nThis module defines classes representing thread, green\nthread, and stack trace data models\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'models'
name|'import'
name|'with_default_views'
name|'as'
name|'mwdv'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'report'
op|'.'
name|'views'
op|'.'
name|'text'
name|'import'
name|'threading'
name|'as'
name|'text_views'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StackTraceModel
name|'class'
name|'StackTraceModel'
op|'('
name|'mwdv'
op|'.'
name|'ModelWithDefaultViews'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Stack Trace Model\n\n    This model holds data from a python stack trace,\n    commonly extracted from running thread information\n\n    :param stack_state: the python stack_state object\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stack_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'StackTraceModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'text_view'
op|'='
name|'text_views'
op|'.'
name|'StackTraceView'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'stack_state'
name|'is'
name|'not'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'lines'"
op|']'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'filename'"
op|':'
name|'fn'
op|','
string|"'line'"
op|':'
name|'ln'
op|','
string|"'name'"
op|':'
name|'nm'
op|','
string|"'code'"
op|':'
name|'cd'
op|'}'
nl|'\n'
name|'for'
name|'fn'
op|','
name|'ln'
op|','
name|'nm'
op|','
name|'cd'
name|'in'
name|'traceback'
op|'.'
name|'extract_stack'
op|'('
name|'stack_state'
op|')'
nl|'\n'
op|']'
newline|'\n'
comment|"# FIXME(flepied): under Python3 f_exc_type doesn't exist"
nl|'\n'
comment|'# anymore so we lose information about exceptions'
nl|'\n'
name|'if'
name|'getattr'
op|'('
name|'stack_state'
op|','
string|"'f_exc_type'"
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
string|"'root_exception'"
op|']'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
name|'stack_state'
op|'.'
name|'f_exc_type'
op|','
nl|'\n'
string|"'value'"
op|':'
name|'stack_state'
op|'.'
name|'f_exc_value'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
string|"'root_exception'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'['
string|"'lines'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'['
string|"'root_exception'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ThreadModel
dedent|''
dedent|''
dedent|''
name|'class'
name|'ThreadModel'
op|'('
name|'mwdv'
op|'.'
name|'ModelWithDefaultViews'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Thread Model\n\n    This model holds data for information about an\n    individual thread.  It holds both a thread id,\n    as well as a stack trace for the thread\n\n    .. seealso::\n\n        Class :class:`StackTraceModel`\n\n    :param int thread_id: the id of the thread\n    :param stack: the python stack state for the current thread\n    """'
newline|'\n'
nl|'\n'
comment|'# threadId, stack in sys._current_frams().items()'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'thread_id'
op|','
name|'stack'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ThreadModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'text_view'
op|'='
name|'text_views'
op|'.'
name|'ThreadView'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'['
string|"'thread_id'"
op|']'
op|'='
name|'thread_id'
newline|'\n'
name|'self'
op|'['
string|"'stack_trace'"
op|']'
op|'='
name|'StackTraceModel'
op|'('
name|'stack'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GreenThreadModel
dedent|''
dedent|''
name|'class'
name|'GreenThreadModel'
op|'('
name|'mwdv'
op|'.'
name|'ModelWithDefaultViews'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Green Thread Model\n\n    This model holds data for information about an\n    individual thread.  Unlike the thread model,\n    it holds just a stack trace, since green threads\n    do not have thread ids.\n\n    .. seealso::\n\n        Class :class:`StackTraceModel`\n\n    :param stack: the python stack state for the green thread\n    """'
newline|'\n'
nl|'\n'
comment|'# gr in greenpool.coroutines_running  --> gr.gr_frame'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stack'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'GreenThreadModel'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
op|'{'
string|"'stack_trace'"
op|':'
name|'StackTraceModel'
op|'('
name|'stack'
op|')'
op|'}'
op|','
nl|'\n'
name|'text_view'
op|'='
name|'text_views'
op|'.'
name|'GreenThreadView'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'weakref'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'semaphore'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'fileutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
comment|'# noqa'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'local'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|util_opts
name|'util_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'disable_process_locking'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to disable inter-process locks'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'lock_path'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
op|'('
string|"'Directory to use for lock files.'"
op|')'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'util_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|set_defaults
name|'def'
name|'set_defaults'
op|'('
name|'lock_path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'cfg'
op|'.'
name|'set_defaults'
op|'('
name|'util_opts'
op|','
name|'lock_path'
op|'='
name|'lock_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_InterProcessLock
dedent|''
name|'class'
name|'_InterProcessLock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Lock implementation which allows multiple locks, working around\n    issues like bugs.debian.org/cgi-bin/bugreport.cgi?bug=632857 and does\n    not require any cleanup. Since the lock is always held on a file\n    descriptor rather than outside of the process, the lock gets dropped\n    automatically if the process crashes, even if __exit__ is not executed.\n\n    There are no guarantees regarding usage by multiple green threads in a\n    single process here. This lock works only between processes. Exclusive\n    access between local threads should be achieved using the semaphores\n    in the @synchronized decorator.\n\n    Note these locks are released when the descriptor is closed, so it\'s not\n    safe to close the file descriptor while another green thread holds the\n    lock. Just opening and closing the lock file can break synchronisation,\n    so lock files must be accessed only using this abstraction.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lockfile'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'fname'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lockfile'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'fname'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# Using non-blocking locks since green threads are not'
nl|'\n'
comment|'# patched to deal with blocking locking calls.'
nl|'\n'
comment|'# Also upon reading the MSDN docs for locking(), it seems'
nl|'\n'
comment|'# to have a laughable 10 attempts "blocking" mechanism.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'trylock'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'errno'
op|'.'
name|'EAGAIN'
op|')'
op|':'
newline|'\n'
comment|'# external locks synchronise things like iptables'
nl|'\n'
comment|'# updates - give it some time to prevent busy spinning'
nl|'\n'
indent|'                    '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.01'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_val'
op|','
name|'exc_tb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unlock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lockfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Could not release the acquired lock `%s`"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trylock
dedent|''
dedent|''
name|'def'
name|'trylock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_WindowsLock
dedent|''
dedent|''
name|'class'
name|'_WindowsLock'
op|'('
name|'_InterProcessLock'
op|')'
op|':'
newline|'\n'
DECL|member|trylock
indent|'    '
name|'def'
name|'trylock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msvcrt'
op|'.'
name|'locking'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'msvcrt'
op|'.'
name|'LK_NBLCK'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msvcrt'
op|'.'
name|'locking'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'msvcrt'
op|'.'
name|'LK_UNLCK'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PosixLock
dedent|''
dedent|''
name|'class'
name|'_PosixLock'
op|'('
name|'_InterProcessLock'
op|')'
op|':'
newline|'\n'
DECL|member|trylock
indent|'    '
name|'def'
name|'trylock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fcntl'
op|'.'
name|'lockf'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|','
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fcntl'
op|'.'
name|'lockf'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|','
name|'fcntl'
op|'.'
name|'LOCK_UN'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'os'
op|'.'
name|'name'
op|'=='
string|"'nt'"
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'msvcrt'
newline|'\n'
DECL|variable|InterProcessLock
name|'InterProcessLock'
op|'='
name|'_WindowsLock'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'fcntl'
newline|'\n'
DECL|variable|InterProcessLock
name|'InterProcessLock'
op|'='
name|'_PosixLock'
newline|'\n'
nl|'\n'
DECL|variable|_semaphores
dedent|''
name|'_semaphores'
op|'='
name|'weakref'
op|'.'
name|'WeakValueDictionary'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|lock
name|'def'
name|'lock'
op|'('
name|'name'
op|','
name|'lock_file_prefix'
op|'='
name|'None'
op|','
name|'external'
op|'='
name|'False'
op|','
name|'lock_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Context based lock\n\n    This function yields a `semaphore.Semaphore` instance unless external is\n    True, in which case, it\'ll yield an InterProcessLock instance.\n\n    :param lock_file_prefix: The lock_file_prefix argument is used to provide\n    lock files on disk with a meaningful prefix.\n\n    :param external: The external keyword argument denotes whether this lock\n    should work across multiple processes. This means that if two different\n    workers both run a a method decorated with @synchronized(\'mylock\',\n    external=True), only one of them will execute at a time.\n\n    :param lock_path: The lock_path keyword argument is used to specify a\n    special location for external lock files to live. If nothing is set, then\n    CONF.lock_path is used as a default.\n    """'
newline|'\n'
comment|'# NOTE(soren): If we ever go natively threaded, this will be racy.'
nl|'\n'
comment|'#              See http://stackoverflow.com/questions/5390569/dyn'
nl|'\n'
comment|'#              amically-allocating-and-destroying-mutexes'
nl|'\n'
name|'sem'
op|'='
name|'_semaphores'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'_semaphores'
op|':'
newline|'\n'
comment|"# this check is not racy - we're already holding ref locally"
nl|'\n'
comment|"# so GC won't remove the item and there was no IO switch"
nl|'\n'
comment|'# (only valid in greenthreads)'
nl|'\n'
indent|'        '
name|'_semaphores'
op|'['
name|'name'
op|']'
op|'='
name|'sem'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'sem'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got semaphore "%(lock)s"\''
op|')'
op|','
op|'{'
string|"'lock'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): I know this looks odd'
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'local'
op|'.'
name|'strong_store'
op|','
string|"'locks_held'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'local'
op|'.'
name|'strong_store'
op|'.'
name|'locks_held'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'local'
op|'.'
name|'strong_store'
op|'.'
name|'locks_held'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'external'
name|'and'
name|'not'
name|'CONF'
op|'.'
name|'disable_process_locking'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Attempting to grab file lock "%(lock)s"\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# We need a copy of lock_path because it is non-local'
nl|'\n'
name|'local_lock_path'
op|'='
name|'lock_path'
name|'or'
name|'CONF'
op|'.'
name|'lock_path'
newline|'\n'
name|'if'
name|'not'
name|'local_lock_path'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'cfg'
op|'.'
name|'RequiredOptError'
op|'('
string|"'lock_path'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'local_lock_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'fileutils'
op|'.'
name|'ensure_tree'
op|'('
name|'local_lock_path'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Created lock path: %s'"
op|')'
op|','
name|'local_lock_path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|add_prefix
dedent|''
name|'def'
name|'add_prefix'
op|'('
name|'name'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'prefix'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'name'
newline|'\n'
dedent|''
name|'sep'
op|'='
string|"''"
name|'if'
name|'prefix'
op|'.'
name|'endswith'
op|'('
string|"'-'"
op|')'
name|'else'
string|"'-'"
newline|'\n'
name|'return'
string|"'%s%s%s'"
op|'%'
op|'('
name|'prefix'
op|','
name|'sep'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): the lock name cannot contain directory'
nl|'\n'
comment|'# separators'
nl|'\n'
dedent|''
name|'lock_file_name'
op|'='
name|'add_prefix'
op|'('
name|'name'
op|'.'
name|'replace'
op|'('
name|'os'
op|'.'
name|'sep'
op|','
string|"'_'"
op|')'
op|','
nl|'\n'
name|'lock_file_prefix'
op|')'
newline|'\n'
nl|'\n'
name|'lock_file_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'local_lock_path'
op|','
name|'lock_file_name'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'lock'
op|'='
name|'InterProcessLock'
op|'('
name|'lock_file_path'
op|')'
newline|'\n'
name|'with'
name|'lock'
name|'as'
name|'lock'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got file lock "%(lock)s" at %(path)s\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
string|"'path'"
op|':'
name|'lock_file_path'
op|'}'
op|')'
newline|'\n'
name|'yield'
name|'lock'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Released file lock "%(lock)s" at %(path)s\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
string|"'path'"
op|':'
name|'lock_file_path'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'sem'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'local'
op|'.'
name|'strong_store'
op|'.'
name|'locks_held'
op|'.'
name|'remove'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|synchronized
dedent|''
dedent|''
dedent|''
name|'def'
name|'synchronized'
op|'('
name|'name'
op|','
name|'lock_file_prefix'
op|'='
name|'None'
op|','
name|'external'
op|'='
name|'False'
op|','
name|'lock_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Synchronization decorator.\n\n    Decorating a method like so::\n\n        @synchronized(\'mylock\')\n        def foo(self, *args):\n           ...\n\n    ensures that only one thread will execute the foo method at a time.\n\n    Different methods can share the same lock::\n\n        @synchronized(\'mylock\')\n        def foo(self, *args):\n           ...\n\n        @synchronized(\'mylock\')\n        def bar(self, *args):\n           ...\n\n    This way only one of either foo or bar can be executing at a time.\n    """'
newline|'\n'
nl|'\n'
DECL|function|wrap
name|'def'
name|'wrap'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'lock'
op|'('
name|'name'
op|','
name|'lock_file_prefix'
op|','
name|'external'
op|','
name|'lock_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got semaphore / lock "%(function)s"\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'function'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Semaphore / lock released "%(function)s"\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'function'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'wrap'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|synchronized_with_prefix
dedent|''
name|'def'
name|'synchronized_with_prefix'
op|'('
name|'lock_file_prefix'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Partial object generator for the synchronization decorator.\n\n    Redefine @synchronized in each project like so::\n\n        (in nova/utils.py)\n        from nova.openstack.common import lockutils\n\n        synchronized = lockutils.synchronized_with_prefix(\'nova-\')\n\n\n        (in nova/foo.py)\n        from nova import utils\n\n        @utils.synchronized(\'mylock\')\n        def bar(self, *args):\n           ...\n\n    The lock_file_prefix argument is used to provide lock files on disk with a\n    meaningful prefix.\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'functools'
op|'.'
name|'partial'
op|'('
name|'synchronized'
op|','
name|'lock_file_prefix'
op|'='
name|'lock_file_prefix'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

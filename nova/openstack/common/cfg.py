begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'r"""\nConfiguration options which may be set on the command line or in config files.\n\nThe schema for each option is defined using the Opt sub-classes, e.g.:\n\n::\n\n    common_opts = [\n        cfg.StrOpt(\'bind_host\',\n                   default=\'0.0.0.0\',\n                   help=\'IP address to listen on\'),\n        cfg.IntOpt(\'bind_port\',\n                   default=9292,\n                   help=\'Port number to listen on\')\n    ]\n\nOptions can be strings, integers, floats, booleans, lists or \'multi strings\'::\n\n    enabled_apis_opt = cfg.ListOpt(\'enabled_apis\',\n                                   default=[\'ec2\', \'osapi_compute\'],\n                                   help=\'List of APIs to enable by default\')\n\n    DEFAULT_EXTENSIONS = [\n        \'nova.api.openstack.compute.contrib.standard_extensions\'\n    ]\n    osapi_compute_extension_opt = cfg.MultiStrOpt(\'osapi_compute_extension\',\n                                                  default=DEFAULT_EXTENSIONS)\n\nOption schemas are registered with with the config manager at runtime, but\nbefore the option is referenced::\n\n    class ExtensionManager(object):\n\n        enabled_apis_opt = cfg.ListOpt(...)\n\n        def __init__(self, conf):\n            self.conf = conf\n            self.conf.register_opt(enabled_apis_opt)\n            ...\n\n        def _load_extensions(self):\n            for ext_factory in self.conf.osapi_compute_extension:\n                ....\n\nA common usage pattern is for each option schema to be defined in the module or\nclass which uses the option::\n\n    opts = ...\n\n    def add_common_opts(conf):\n        conf.register_opts(opts)\n\n    def get_bind_host(conf):\n        return conf.bind_host\n\n    def get_bind_port(conf):\n        return conf.bind_port\n\nAn option may optionally be made available via the command line. Such options\nmust registered with the config manager before the command line is parsed (for\nthe purposes of --help and CLI arg validation)::\n\n    cli_opts = [\n        cfg.BoolOpt(\'verbose\',\n                    short=\'v\',\n                    default=False,\n                    help=\'Print more verbose output\'),\n        cfg.BoolOpt(\'debug\',\n                    short=\'d\',\n                    default=False,\n                    help=\'Print debugging output\'),\n    ]\n\n    def add_common_opts(conf):\n        conf.register_cli_opts(cli_opts)\n\nThe config manager has two CLI options defined by default, --config-file\nand --config-dir::\n\n    class ConfigOpts(object):\n\n        def __call__(self, ...):\n\n            opts = [\n                MultiStrOpt(\'config-file\',\n                        ...),\n                StrOpt(\'config-dir\',\n                       ...),\n            ]\n\n            self.register_cli_opts(opts)\n\nOption values are parsed from any supplied config files using\nopenstack.common.iniparser. If none are specified, a default set is used\ne.g. glance-api.conf and glance-common.conf::\n\n    glance-api.conf:\n      [DEFAULT]\n      bind_port = 9292\n\n    glance-common.conf:\n      [DEFAULT]\n      bind_host = 0.0.0.0\n\nOption values in config files override those on the command line. Config files\nare parsed in order, with values in later files overriding those in earlier\nfiles.\n\nThe parsing of CLI args and config files is initiated by invoking the config\nmanager e.g.::\n\n    conf = ConfigOpts()\n    conf.register_opt(BoolOpt(\'verbose\', ...))\n    conf(sys.argv[1:])\n    if conf.verbose:\n        ...\n\nOptions can be registered as belonging to a group::\n\n    rabbit_group = cfg.OptGroup(name=\'rabbit\',\n                                title=\'RabbitMQ options\')\n\n    rabbit_host_opt = cfg.StrOpt(\'host\',\n                                 default=\'localhost\',\n                                 help=\'IP/hostname to listen on\'),\n    rabbit_port_opt = cfg.IntOpt(\'port\',\n                                 default=5672,\n                                 help=\'Port number to listen on\')\n\n    def register_rabbit_opts(conf):\n        conf.register_group(rabbit_group)\n        # options can be registered under a group in either of these ways:\n        conf.register_opt(rabbit_host_opt, group=rabbit_group)\n        conf.register_opt(rabbit_port_opt, group=\'rabbit\')\n\nIf it no group attributes are required other than the group name, the group\nneed not be explicitly registered e.g.\n\n    def register_rabbit_opts(conf):\n        # The group will automatically be created, equivalent calling::\n        #   conf.register_group(OptGroup(name=\'rabbit\'))\n        conf.register_opt(rabbit_port_opt, group=\'rabbit\')\n\nIf no group is specified, options belong to the \'DEFAULT\' section of config\nfiles::\n\n    glance-api.conf:\n      [DEFAULT]\n      bind_port = 9292\n      ...\n\n      [rabbit]\n      host = localhost\n      port = 5672\n      use_ssl = False\n      userid = guest\n      password = guest\n      virtual_host = /\n\nCommand-line options in a group are automatically prefixed with the\ngroup name::\n\n    --rabbit-host localhost --rabbit-port 9999\n\nOption values in the default group are referenced as attributes/properties on\nthe config manager; groups are also attributes on the config manager, with\nattributes for each of the options associated with the group::\n\n    server.start(app, conf.bind_port, conf.bind_host, conf)\n\n    self.connection = kombu.connection.BrokerConnection(\n        hostname=conf.rabbit.host,\n        port=conf.rabbit.port,\n        ...)\n\nOption values may reference other values using PEP 292 string substitution::\n\n    opts = [\n        cfg.StrOpt(\'state_path\',\n                   default=os.path.join(os.path.dirname(__file__), \'../\'),\n                   help=\'Top-level directory for maintaining nova state\'),\n        cfg.StrOpt(\'sqlite_db\',\n                   default=\'nova.sqlite\',\n                   help=\'file name for sqlite\'),\n        cfg.StrOpt(\'sql_connection\',\n                   default=\'sqlite:///$state_path/$sqlite_db\',\n                   help=\'connection string for sql database\'),\n    ]\n\nNote that interpolation can be avoided by using \'$$\'.\n\nFor command line utilities that dispatch to other command line utilities, the\ndisable_interspersed_args() method is available. If this this method is called,\nthen parsing e.g.::\n\n  script --verbose cmd --debug /tmp/mything\n\nwill no longer return::\n\n  [\'cmd\', \'/tmp/mything\']\n\nas the leftover arguments, but will instead return::\n\n  [\'cmd\', \'--debug\', \'/tmp/mything\']\n\ni.e. argument parsing is stopped at the first non-option argument.\n\nOptions may be declared as required so that an error is raised if the user\ndoes not supply a value for the option.\n\nOptions may be declared as secret so that their values are not leaked into\nlog files:\n\n     opts = [\n        cfg.StrOpt(\'s3_store_access_key\', secret=True),\n        cfg.StrOpt(\'s3_store_secret_key\', secret=True),\n        ...\n     ]\n\nThis module also contains a global instance of the CommonConfigOpts class\nin order to support a common usage pattern in OpenStack:\n\n  from openstack.common import cfg\n\n  opts = [\n    cfg.StrOpt(\'bind_host\' default=\'0.0.0.0\'),\n    cfg.IntOpt(\'bind_port\', default=9292),\n  ]\n\n  CONF = cfg.CONF\n  CONF.register_opts(opts)\n\n  def start(server, app):\n      server.start(app, CONF.bind_port, CONF.bind_host)\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'glob'
newline|'\n'
name|'import'
name|'optparse'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'iniparser'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Error
name|'class'
name|'Error'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for cfg exceptions."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'msg'
op|'='
name|'msg'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ArgsAlreadyParsedError
dedent|''
dedent|''
name|'class'
name|'ArgsAlreadyParsedError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if a CLI opt is registered after parsing."""'
newline|'\n'
nl|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
string|'"arguments already parsed"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'msg'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'+='
string|'": "'
op|'+'
name|'self'
op|'.'
name|'msg'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoSuchOptError
dedent|''
dedent|''
name|'class'
name|'NoSuchOptError'
op|'('
name|'Error'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if an opt which doesn\'t exist is referenced."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'opt_name'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'opt_name'
op|'='
name|'opt_name'
newline|'\n'
name|'self'
op|'.'
name|'group'
op|'='
name|'group'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"no such option: %s"'
op|'%'
name|'self'
op|'.'
name|'opt_name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"no such option in group %s: %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'group'
op|'.'
name|'name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'opt_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoSuchGroupError
dedent|''
dedent|''
dedent|''
name|'class'
name|'NoSuchGroupError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if a group which doesn\'t exist is referenced."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'group_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'group_name'
op|'='
name|'group_name'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"no such group: %s"'
op|'%'
name|'self'
op|'.'
name|'group_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DuplicateOptError
dedent|''
dedent|''
name|'class'
name|'DuplicateOptError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if multiple opts with the same name are registered."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'opt_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'opt_name'
op|'='
name|'opt_name'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"duplicate option: %s"'
op|'%'
name|'self'
op|'.'
name|'opt_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RequiredOptError
dedent|''
dedent|''
name|'class'
name|'RequiredOptError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if an option is required but no value is supplied by the user."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'opt_name'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'opt_name'
op|'='
name|'opt_name'
newline|'\n'
name|'self'
op|'.'
name|'group'
op|'='
name|'group'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"value required for option: %s"'
op|'%'
name|'self'
op|'.'
name|'opt_name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"value required for option: %s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'group'
op|'.'
name|'name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'opt_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TemplateSubstitutionError
dedent|''
dedent|''
dedent|''
name|'class'
name|'TemplateSubstitutionError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if an error occurs substituting a variable in an opt value."""'
newline|'\n'
nl|'\n'
DECL|member|__str__
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"template substitution error: %s"'
op|'%'
name|'self'
op|'.'
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigFilesNotFoundError
dedent|''
dedent|''
name|'class'
name|'ConfigFilesNotFoundError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if one or more config files are not found."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config_files'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config_files'
op|'='
name|'config_files'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'Failed to read some config files: %s'"
op|'%'
nl|'\n'
name|'string'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'config_files'
op|','
string|"','"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigFileParseError
dedent|''
dedent|''
name|'class'
name|'ConfigFileParseError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if there is an error parsing a config file."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config_file'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config_file'
op|'='
name|'config_file'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'msg'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Failed to parse %s: %s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'config_file'
op|','
name|'self'
op|'.'
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigFileValueError
dedent|''
dedent|''
name|'class'
name|'ConfigFileValueError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised if a config file value does not match its opt type."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_config_dirs
dedent|''
name|'def'
name|'_get_config_dirs'
op|'('
name|'project'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a list of directors where config files may be located.\n\n    :param project: an optional project name\n\n    If a project is specified, following directories are returned::\n\n      ~/.${project}/\n      ~/\n      /etc/${project}/\n      /etc/\n\n    Otherwise, these directories::\n\n      ~/\n      /etc/\n    """'
newline|'\n'
name|'fix_path'
op|'='
name|'lambda'
name|'p'
op|':'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'p'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'cfg_dirs'
op|'='
op|'['
nl|'\n'
name|'fix_path'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'~'"
op|','
string|"'.'"
op|'+'
name|'project'
op|')'
op|')'
name|'if'
name|'project'
name|'else'
name|'None'
op|','
nl|'\n'
name|'fix_path'
op|'('
string|"'~'"
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'/etc'"
op|','
name|'project'
op|')'
name|'if'
name|'project'
name|'else'
name|'None'
op|','
nl|'\n'
string|"'/etc'"
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'filter'
op|'('
name|'bool'
op|','
name|'cfg_dirs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_search_dirs
dedent|''
name|'def'
name|'_search_dirs'
op|'('
name|'dirs'
op|','
name|'basename'
op|','
name|'extension'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Search a list of directories for a given filename.\n\n    Iterator over the supplied directories, returning the first file\n    found with the supplied name and extension.\n\n    :param dirs: a list of directories\n    :param basename: the filename, e.g. \'glance-api\'\n    :param extension: the file extension, e.g. \'.conf\'\n    :returns: the path to a matching file, or None\n    """'
newline|'\n'
name|'for'
name|'d'
name|'in'
name|'dirs'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'d'
op|','
string|"'%s%s'"
op|'%'
op|'('
name|'basename'
op|','
name|'extension'
op|')'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_config_files
dedent|''
dedent|''
dedent|''
name|'def'
name|'find_config_files'
op|'('
name|'project'
op|'='
name|'None'
op|','
name|'prog'
op|'='
name|'None'
op|','
name|'extension'
op|'='
string|"'.conf'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a list of default configuration files.\n\n    :param project: an optional project name\n    :param prog: the program name, defaulting to the basename of sys.argv[0]\n    :param extension: the type of the config file\n\n    We default to two config files: [${project}.conf, ${prog}.conf]\n\n    And we look for those config files in the following directories::\n\n      ~/.${project}/\n      ~/\n      /etc/${project}/\n      /etc/\n\n    We return an absolute path for (at most) one of each the default config\n    files, for the topmost directory it exists in.\n\n    For example, if project=foo, prog=bar and /etc/foo/foo.conf, /etc/bar.conf\n    and ~/.foo/bar.conf all exist, then we return [\'/etc/foo/foo.conf\',\n    \'~/.foo/bar.conf\']\n\n    If no project name is supplied, we only look for ${prog.conf}.\n    """'
newline|'\n'
name|'if'
name|'prog'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'prog'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cfg_dirs'
op|'='
name|'_get_config_dirs'
op|'('
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'config_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'project'
op|':'
newline|'\n'
indent|'        '
name|'config_files'
op|'.'
name|'append'
op|'('
name|'_search_dirs'
op|'('
name|'cfg_dirs'
op|','
name|'project'
op|','
name|'extension'
op|')'
op|')'
newline|'\n'
dedent|''
name|'config_files'
op|'.'
name|'append'
op|'('
name|'_search_dirs'
op|'('
name|'cfg_dirs'
op|','
name|'prog'
op|','
name|'extension'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'filter'
op|'('
name|'bool'
op|','
name|'config_files'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_opt_registered
dedent|''
name|'def'
name|'_is_opt_registered'
op|'('
name|'opts'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check whether an opt with the same name is already registered.\n\n    The same opt may be registered multiple times, with only the first\n    registration having any effect. However, it is an error to attempt\n    to register a different opt with the same name.\n\n    :param opts: the set of opts already registered\n    :param opt: the opt to be registered\n    :returns: True if the opt was previously registered, False otherwise\n    :raises: DuplicateOptError if a naming conflict is detected\n    """'
newline|'\n'
name|'if'
name|'opt'
op|'.'
name|'dest'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'opts'
op|'['
name|'opt'
op|'.'
name|'dest'
op|']'
op|'['
string|"'opt'"
op|']'
name|'is'
name|'not'
name|'opt'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DuplicateOptError'
op|'('
name|'opt'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Opt
dedent|''
dedent|''
name|'class'
name|'Opt'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Base class for all configuration options.\n\n    An Opt object has no public methods, but has a number of public string\n    properties:\n\n      name:\n        the name of the option, which may include hyphens\n      dest:\n        the (hyphen-less) ConfigOpts property which contains the option value\n      short:\n        a single character CLI option name\n      default:\n        the default value of the option\n      metavar:\n        the name shown as the argument to a CLI option in --help output\n      help:\n        an string explaining how the options value is used\n    """'
newline|'\n'
DECL|variable|multi
name|'multi'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'dest'
op|'='
name|'None'
op|','
name|'short'
op|'='
name|'None'
op|','
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
name|'metavar'
op|'='
name|'None'
op|','
name|'help'
op|'='
name|'None'
op|','
name|'secret'
op|'='
name|'False'
op|','
name|'required'
op|'='
name|'False'
op|','
nl|'\n'
name|'deprecated_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct an Opt object.\n\n        The only required parameter is the option\'s name. However, it is\n        common to also supply a default and help string for all options.\n\n        :param name: the option\'s name\n        :param dest: the name of the corresponding ConfigOpts property\n        :param short: a single character CLI option name\n        :param default: the default value of the option\n        :param metavar: the option argument to show in --help\n        :param help: an explanation of how the option is used\n        :param secret: true iff the value should be obfuscated in log output\n        :param required: true iff a value must be supplied for this option\n        :param deprecated_name: deprecated name option.  Acts like an alias\n        """'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'dest'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dest'
op|'='
name|'self'
op|'.'
name|'name'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'dest'
op|'='
name|'dest'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'short'
op|'='
name|'short'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
name|'default'
newline|'\n'
name|'self'
op|'.'
name|'metavar'
op|'='
name|'metavar'
newline|'\n'
name|'self'
op|'.'
name|'help'
op|'='
name|'help'
newline|'\n'
name|'self'
op|'.'
name|'secret'
op|'='
name|'secret'
newline|'\n'
name|'self'
op|'.'
name|'required'
op|'='
name|'required'
newline|'\n'
name|'if'
name|'deprecated_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deprecated_name'
op|'='
name|'deprecated_name'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deprecated_name'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_from_config_parser
dedent|''
dedent|''
name|'def'
name|'_get_from_config_parser'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the option value from a MultiConfigParser object.\n\n        This is the method ConfigOpts uses to look up the option value from\n        config files. Most opt types override this method in order to perform\n        type appropriate conversion of the returned value.\n\n        :param cparser: a ConfigParser object\n        :param section: a section name\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_cparser_get_with_deprecated'
op|'('
name|'cparser'
op|','
name|'section'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cparser_get_with_deprecated
dedent|''
name|'def'
name|'_cparser_get_with_deprecated'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If cannot find option as dest try deprecated_name alias."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'deprecated_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cparser'
op|'.'
name|'get'
op|'('
name|'section'
op|','
op|'['
name|'self'
op|'.'
name|'dest'
op|','
name|'self'
op|'.'
name|'deprecated_name'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cparser'
op|'.'
name|'get'
op|'('
name|'section'
op|','
op|'['
name|'self'
op|'.'
name|'dest'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_to_cli
dedent|''
name|'def'
name|'_add_to_cli'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes the option available in the command line interface.\n\n        This is the method ConfigOpts uses to add the opt to the CLI interface\n        as appropriate for the opt type. Some opt types may extend this method,\n        others may just extend the helper methods it uses.\n\n        :param parser: the CLI option parser\n        :param group: an optional OptGroup object\n        """'
newline|'\n'
name|'container'
op|'='
name|'self'
op|'.'
name|'_get_optparse_container'
op|'('
name|'parser'
op|','
name|'group'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|')'
newline|'\n'
name|'prefix'
op|'='
name|'self'
op|'.'
name|'_get_optparse_prefix'
op|'('
string|"''"
op|','
name|'group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_optparse'
op|'('
name|'container'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'short'
op|','
name|'kwargs'
op|','
name|'prefix'
op|','
nl|'\n'
name|'self'
op|'.'
name|'deprecated_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_to_optparse
dedent|''
name|'def'
name|'_add_to_optparse'
op|'('
name|'self'
op|','
name|'container'
op|','
name|'name'
op|','
name|'short'
op|','
name|'kwargs'
op|','
name|'prefix'
op|'='
string|"''"
op|','
nl|'\n'
name|'deprecated_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add an option to an optparse parser or group.\n\n        :param container: an optparse.OptionContainer object\n        :param name: the opt name\n        :param short: the short opt name\n        :param kwargs: the keyword arguments for add_option()\n        :param prefix: an optional prefix to prepend to the opt name\n        :raises: DuplicateOptError if a naming confict is detected\n        """'
newline|'\n'
name|'args'
op|'='
op|'['
string|"'--'"
op|'+'
name|'prefix'
op|'+'
name|'name'
op|']'
newline|'\n'
name|'if'
name|'short'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'+='
op|'['
string|"'-'"
op|'+'
name|'short'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'deprecated_name'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'+='
op|'['
string|"'--'"
op|'+'
name|'prefix'
op|'+'
name|'deprecated_name'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'a'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'container'
op|'.'
name|'has_option'
op|'('
name|'a'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'DuplicateOptError'
op|'('
name|'a'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'container'
op|'.'
name|'add_option'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_container
dedent|''
name|'def'
name|'_get_optparse_container'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an optparse.OptionContainer.\n\n        :param parser: an optparse.OptionParser\n        :param group: an (optional) OptGroup object\n        :returns: an optparse.OptionGroup if a group is given, else the parser\n        """'
newline|'\n'
name|'if'
name|'group'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'group'
op|'.'
name|'_get_optparse_group'
op|'('
name|'parser'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'parser'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_kwargs
dedent|''
dedent|''
name|'def'
name|'_get_optparse_kwargs'
op|'('
name|'self'
op|','
name|'group'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build a dict of keyword arguments for optparse\'s add_option().\n\n        Most opt types extend this method to customize the behaviour of the\n        options added to optparse.\n\n        :param group: an optional group\n        :param kwargs: optional keyword arguments to add to\n        :returns: a dict of keyword arguments\n        """'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'dest'
newline|'\n'
name|'if'
name|'group'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'dest'
op|'='
name|'group'
op|'.'
name|'name'
op|'+'
string|"'_'"
op|'+'
name|'dest'
newline|'\n'
dedent|''
name|'kwargs'
op|'.'
name|'update'
op|'('
op|'{'
string|"'dest'"
op|':'
name|'dest'
op|','
nl|'\n'
string|"'metavar'"
op|':'
name|'self'
op|'.'
name|'metavar'
op|','
nl|'\n'
string|"'help'"
op|':'
name|'self'
op|'.'
name|'help'
op|','
op|'}'
op|')'
newline|'\n'
name|'return'
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_prefix
dedent|''
name|'def'
name|'_get_optparse_prefix'
op|'('
name|'self'
op|','
name|'prefix'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build a prefix for the CLI option name, if required.\n\n        CLI options in a group are prefixed with the group\'s name in order\n        to avoid conflicts between similarly named options in different\n        groups.\n\n        :param prefix: an existing prefix to append to (e.g. \'no\' or \'\')\n        :param group: an optional OptGroup object\n        :returns: a CLI option prefix including the group name, if appropriate\n        """'
newline|'\n'
name|'if'
name|'group'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'group'
op|'.'
name|'name'
op|'+'
string|"'-'"
op|'+'
name|'prefix'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'prefix'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StrOpt
dedent|''
dedent|''
dedent|''
name|'class'
name|'StrOpt'
op|'('
name|'Opt'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    String opts do not have their values transformed and are returned as\n    str objects.\n    """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BoolOpt
dedent|''
name|'class'
name|'BoolOpt'
op|'('
name|'Opt'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Bool opts are set to True or False on the command line using --optname or\n    --noopttname respectively.\n\n    In config files, boolean values are case insensitive and can be set using\n    1/0, yes/no, true/false or on/off.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_boolean_states
name|'_boolean_states'
op|'='
op|'{'
string|"'1'"
op|':'
name|'True'
op|','
string|"'yes'"
op|':'
name|'True'
op|','
string|"'true'"
op|':'
name|'True'
op|','
string|"'on'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'0'"
op|':'
name|'False'
op|','
string|"'no'"
op|':'
name|'False'
op|','
string|"'false'"
op|':'
name|'False'
op|','
string|"'off'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_from_config_parser
name|'def'
name|'_get_from_config_parser'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the opt value as a boolean from ConfigParser."""'
newline|'\n'
DECL|function|convert_bool
name|'def'
name|'convert_bool'
op|'('
name|'v'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'self'
op|'.'
name|'_boolean_states'
op|'.'
name|'get'
op|'('
name|'v'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|"'Unexpected boolean value %r'"
op|'%'
name|'v'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'convert_bool'
op|'('
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'_cparser_get_with_deprecated'
op|'('
name|'cparser'
op|','
name|'section'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_add_to_cli
dedent|''
name|'def'
name|'_add_to_cli'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extends the base class method to add the --nooptname option."""'
newline|'\n'
name|'super'
op|'('
name|'BoolOpt'
op|','
name|'self'
op|')'
op|'.'
name|'_add_to_cli'
op|'('
name|'parser'
op|','
name|'group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_inverse_to_optparse'
op|'('
name|'parser'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_inverse_to_optparse
dedent|''
name|'def'
name|'_add_inverse_to_optparse'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add the --nooptname option to the option parser."""'
newline|'\n'
name|'container'
op|'='
name|'self'
op|'.'
name|'_get_optparse_container'
op|'('
name|'parser'
op|','
name|'group'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|','
name|'action'
op|'='
string|"'store_false'"
op|')'
newline|'\n'
name|'prefix'
op|'='
name|'self'
op|'.'
name|'_get_optparse_prefix'
op|'('
string|"'no'"
op|','
name|'group'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|'"help"'
op|']'
op|'='
string|'"The inverse of --"'
op|'+'
name|'self'
op|'.'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_add_to_optparse'
op|'('
name|'container'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'None'
op|','
name|'kwargs'
op|','
name|'prefix'
op|','
nl|'\n'
name|'self'
op|'.'
name|'deprecated_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_kwargs
dedent|''
name|'def'
name|'_get_optparse_kwargs'
op|'('
name|'self'
op|','
name|'group'
op|','
name|'action'
op|'='
string|"'store_true'"
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extends the base optparse keyword dict for boolean options."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'BoolOpt'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|','
name|'action'
op|'='
name|'action'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IntOpt
dedent|''
dedent|''
name|'class'
name|'IntOpt'
op|'('
name|'Opt'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Int opt values are converted to integers using the int() builtin."""'
newline|'\n'
nl|'\n'
DECL|member|_get_from_config_parser
name|'def'
name|'_get_from_config_parser'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the opt value as a integer from ConfigParser."""'
newline|'\n'
name|'return'
op|'['
name|'int'
op|'('
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'_cparser_get_with_deprecated'
op|'('
name|'cparser'
op|','
nl|'\n'
name|'section'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_kwargs
dedent|''
name|'def'
name|'_get_optparse_kwargs'
op|'('
name|'self'
op|','
name|'group'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extends the base optparse keyword dict for integer options."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'IntOpt'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|','
name|'type'
op|'='
string|"'int'"
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FloatOpt
dedent|''
dedent|''
name|'class'
name|'FloatOpt'
op|'('
name|'Opt'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Float opt values are converted to floats using the float() builtin."""'
newline|'\n'
nl|'\n'
DECL|member|_get_from_config_parser
name|'def'
name|'_get_from_config_parser'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the opt value as a float from ConfigParser."""'
newline|'\n'
name|'return'
op|'['
name|'float'
op|'('
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'_cparser_get_with_deprecated'
op|'('
name|'cparser'
op|','
name|'section'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_kwargs
dedent|''
name|'def'
name|'_get_optparse_kwargs'
op|'('
name|'self'
op|','
name|'group'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extends the base optparse keyword dict for float options."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'FloatOpt'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|','
name|'type'
op|'='
string|"'float'"
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOpt
dedent|''
dedent|''
name|'class'
name|'ListOpt'
op|'('
name|'Opt'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    List opt values are simple string values separated by commas. The opt value\n    is a list containing these strings.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_get_from_config_parser
name|'def'
name|'_get_from_config_parser'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the opt value as a list from ConfigParser."""'
newline|'\n'
name|'return'
op|'['
name|'v'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
name|'for'
name|'v'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'_cparser_get_with_deprecated'
op|'('
name|'cparser'
op|','
name|'section'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_kwargs
dedent|''
name|'def'
name|'_get_optparse_kwargs'
op|'('
name|'self'
op|','
name|'group'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extends the base optparse keyword dict for list options."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'ListOpt'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|','
nl|'\n'
name|'type'
op|'='
string|"'string'"
op|','
nl|'\n'
name|'action'
op|'='
string|"'callback'"
op|','
nl|'\n'
name|'callback'
op|'='
name|'self'
op|'.'
name|'_parse_list'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_list
dedent|''
name|'def'
name|'_parse_list'
op|'('
name|'self'
op|','
name|'option'
op|','
name|'opt'
op|','
name|'value'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""An optparse callback for parsing an option value into a list."""'
newline|'\n'
name|'setattr'
op|'('
name|'parser'
op|'.'
name|'values'
op|','
name|'self'
op|'.'
name|'dest'
op|','
name|'value'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiStrOpt
dedent|''
dedent|''
name|'class'
name|'MultiStrOpt'
op|'('
name|'Opt'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Multistr opt values are string opts which may be specified multiple times.\n    The opt value is a list containing all the string values specified.\n    """'
newline|'\n'
DECL|variable|multi
name|'multi'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_kwargs
name|'def'
name|'_get_optparse_kwargs'
op|'('
name|'self'
op|','
name|'group'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extends the base optparse keyword dict for multi str options."""'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'MultiStrOpt'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'_get_optparse_kwargs'
op|'('
name|'group'
op|','
name|'action'
op|'='
string|"'append'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cparser_get_with_deprecated
dedent|''
name|'def'
name|'_cparser_get_with_deprecated'
op|'('
name|'self'
op|','
name|'cparser'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If cannot find option as dest try deprecated_name alias."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'deprecated_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cparser'
op|'.'
name|'get'
op|'('
name|'section'
op|','
op|'['
name|'self'
op|'.'
name|'dest'
op|','
name|'self'
op|'.'
name|'deprecated_name'
op|']'
op|','
nl|'\n'
name|'multi'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cparser'
op|'.'
name|'get'
op|'('
name|'section'
op|','
op|'['
name|'self'
op|'.'
name|'dest'
op|']'
op|','
name|'multi'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OptGroup
dedent|''
dedent|''
name|'class'
name|'OptGroup'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Represents a group of opts.\n\n    CLI opts in the group are automatically prefixed with the group name.\n\n    Each group corresponds to a section in config files.\n\n    An OptGroup object has no public methods, but has a number of public string\n    properties:\n\n      name:\n        the name of the group\n      title:\n        the group title as displayed in --help\n      help:\n        the group description as displayed in --help\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'title'
op|'='
name|'None'
op|','
name|'help'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Constructs an OptGroup object.\n\n        :param name: the group name\n        :param title: the group title for --help\n        :param help: the group description for --help\n        """'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'title'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'title'
op|'='
string|'"%s options"'
op|'%'
name|'title'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'title'
op|'='
name|'title'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'help'
op|'='
name|'help'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_opts'
op|'='
op|'{'
op|'}'
comment|'# dict of dicts of (opt:, override:, default:)'
newline|'\n'
name|'self'
op|'.'
name|'_optparse_group'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_register_opt
dedent|''
name|'def'
name|'_register_opt'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add an opt to this group.\n\n        :param opt: an Opt object\n        :returns: False if previously registered, True otherwise\n        :raises: DuplicateOptError if a naming conflict is detected\n        """'
newline|'\n'
name|'if'
name|'_is_opt_registered'
op|'('
name|'self'
op|'.'
name|'_opts'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_opts'
op|'['
name|'opt'
op|'.'
name|'dest'
op|']'
op|'='
op|'{'
string|"'opt'"
op|':'
name|'opt'
op|','
string|"'override'"
op|':'
name|'None'
op|','
string|"'default'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_unregister_opt
dedent|''
name|'def'
name|'_unregister_opt'
op|'('
name|'self'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove an opt from this group.\n\n        :param opt: an Opt object\n        """'
newline|'\n'
name|'if'
name|'opt'
op|'.'
name|'dest'
name|'in'
name|'self'
op|'.'
name|'_opts'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_opts'
op|'['
name|'opt'
op|'.'
name|'dest'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_optparse_group
dedent|''
dedent|''
name|'def'
name|'_get_optparse_group'
op|'('
name|'self'
op|','
name|'parser'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build an optparse.OptionGroup for this group."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_optparse_group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_optparse_group'
op|'='
name|'optparse'
op|'.'
name|'OptionGroup'
op|'('
name|'parser'
op|','
name|'self'
op|'.'
name|'title'
op|','
nl|'\n'
name|'self'
op|'.'
name|'help'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_optparse_group'
newline|'\n'
nl|'\n'
DECL|member|_clear
dedent|''
name|'def'
name|'_clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear this group\'s option parsing state."""'
newline|'\n'
name|'self'
op|'.'
name|'_optparse_group'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParseError
dedent|''
dedent|''
name|'class'
name|'ParseError'
op|'('
name|'iniparser'
op|'.'
name|'ParseError'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'lineno'
op|','
name|'line'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ParseError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg'
op|','
name|'lineno'
op|','
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'at %s:%d, %s: %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'self'
op|'.'
name|'lineno'
op|','
nl|'\n'
name|'self'
op|'.'
name|'msg'
op|','
name|'self'
op|'.'
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigParser
dedent|''
dedent|''
name|'class'
name|'ConfigParser'
op|'('
name|'iniparser'
op|'.'
name|'BaseParser'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'sections'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConfigParser'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'sections'
op|'='
name|'sections'
newline|'\n'
name|'self'
op|'.'
name|'section'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'filename'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'ConfigParser'
op|','
name|'self'
op|')'
op|'.'
name|'parse'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|member|new_section
dedent|''
dedent|''
name|'def'
name|'new_section'
op|'('
name|'self'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'section'
op|'='
name|'section'
newline|'\n'
name|'self'
op|'.'
name|'sections'
op|'.'
name|'setdefault'
op|'('
name|'self'
op|'.'
name|'section'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assignment
dedent|''
name|'def'
name|'assignment'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'section'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'error_no_section'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sections'
op|'['
name|'self'
op|'.'
name|'section'
op|']'
op|'.'
name|'setdefault'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sections'
op|'['
name|'self'
op|'.'
name|'section'
op|']'
op|'['
name|'key'
op|']'
op|'.'
name|'append'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parse_exc
dedent|''
name|'def'
name|'parse_exc'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'lineno'
op|','
name|'line'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ParseError'
op|'('
name|'msg'
op|','
name|'lineno'
op|','
name|'line'
op|','
name|'self'
op|'.'
name|'filename'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_no_section
dedent|''
name|'def'
name|'error_no_section'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'parse_exc'
op|'('
string|"'Section must be started before assignment'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'lineno'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiConfigParser
dedent|''
dedent|''
name|'class'
name|'MultiConfigParser'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'parsed'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'config_files'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'read_ok'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'filename'
name|'in'
name|'config_files'
op|':'
newline|'\n'
indent|'            '
name|'sections'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'parser'
op|'='
name|'ConfigParser'
op|'('
name|'filename'
op|','
name|'sections'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'parser'
op|'.'
name|'parse'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'parsed'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'sections'
op|')'
newline|'\n'
name|'read_ok'
op|'.'
name|'append'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'read_ok'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'section'
op|','
name|'names'
op|','
name|'multi'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rvalue'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'sections'
name|'in'
name|'self'
op|'.'
name|'parsed'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'section'
name|'not'
name|'in'
name|'sections'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'for'
name|'name'
name|'in'
name|'names'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
name|'in'
name|'sections'
op|'['
name|'section'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'multi'
op|':'
newline|'\n'
indent|'                        '
name|'rvalue'
op|'='
name|'sections'
op|'['
name|'section'
op|']'
op|'['
name|'name'
op|']'
op|'+'
name|'rvalue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'sections'
op|'['
name|'section'
op|']'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'multi'
name|'and'
name|'rvalue'
op|'!='
op|'['
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rvalue'
newline|'\n'
dedent|''
name|'raise'
name|'KeyError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigOpts
dedent|''
dedent|''
name|'class'
name|'ConfigOpts'
op|'('
name|'collections'
op|'.'
name|'Mapping'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Config options which may be set on the command line or in config files.\n\n    ConfigOpts is a configuration option manager with APIs for registering\n    option schemas, grouping options, parsing option values and retrieving\n    the values of options.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct a ConfigOpts object."""'
newline|'\n'
name|'self'
op|'.'
name|'_opts'
op|'='
op|'{'
op|'}'
comment|'# dict of dicts of (opt:, override:, default:)'
newline|'\n'
name|'self'
op|'.'
name|'_groups'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_args'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_oparser'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_cparser'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_cli_values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'__cache'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_config_opts'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_disable_interspersed_args'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_setup
dedent|''
name|'def'
name|'_setup'
op|'('
name|'self'
op|','
name|'project'
op|','
name|'prog'
op|','
name|'version'
op|','
name|'usage'
op|','
name|'default_config_files'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a ConfigOpts object for option parsing."""'
newline|'\n'
name|'if'
name|'prog'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'prog'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'default_config_files'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'default_config_files'
op|'='
name|'find_config_files'
op|'('
name|'project'
op|','
name|'prog'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_oparser'
op|'='
name|'optparse'
op|'.'
name|'OptionParser'
op|'('
name|'prog'
op|'='
name|'prog'
op|','
nl|'\n'
name|'version'
op|'='
name|'version'
op|','
nl|'\n'
name|'usage'
op|'='
name|'usage'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_disable_interspersed_args'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_oparser'
op|'.'
name|'disable_interspersed_args'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_config_opts'
op|'='
op|'['
nl|'\n'
name|'MultiStrOpt'
op|'('
string|"'config-file'"
op|','
nl|'\n'
name|'default'
op|'='
name|'default_config_files'
op|','
nl|'\n'
name|'metavar'
op|'='
string|"'PATH'"
op|','
nl|'\n'
name|'help'
op|'='
string|"'Path to a config file to use. Multiple config '"
nl|'\n'
string|"'files can be specified, with values in later '"
nl|'\n'
string|"'files taking precedence. The default files '"
nl|'\n'
string|"' used are: %s'"
op|'%'
op|'('
name|'default_config_files'
op|','
op|')'
op|')'
op|','
nl|'\n'
name|'StrOpt'
op|'('
string|"'config-dir'"
op|','
nl|'\n'
name|'metavar'
op|'='
string|"'DIR'"
op|','
nl|'\n'
name|'help'
op|'='
string|"'Path to a config directory to pull *.conf '"
nl|'\n'
string|"'files from. This file set is sorted, so as to '"
nl|'\n'
string|"'provide a predictable parse order if individual '"
nl|'\n'
string|"'options are over-ridden. The set is parsed after '"
nl|'\n'
string|"'the file(s), if any, specified via --config-file, '"
nl|'\n'
string|"'hence over-ridden options in the directory take '"
nl|'\n'
string|"'precedence.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'register_cli_opts'
op|'('
name|'self'
op|'.'
name|'_config_opts'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'project'
newline|'\n'
name|'self'
op|'.'
name|'prog'
op|'='
name|'prog'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
name|'version'
newline|'\n'
name|'self'
op|'.'
name|'usage'
op|'='
name|'usage'
newline|'\n'
name|'self'
op|'.'
name|'default_config_files'
op|'='
name|'default_config_files'
newline|'\n'
nl|'\n'
DECL|member|__clear_cache
dedent|''
name|'def'
name|'__clear_cache'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|__inner
name|'def'
name|'__inner'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'clear_cache'"
op|','
name|'True'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'__cache'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'__inner'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
nl|'\n'
name|'args'
op|'='
name|'None'
op|','
nl|'\n'
name|'project'
op|'='
name|'None'
op|','
nl|'\n'
name|'prog'
op|'='
name|'None'
op|','
nl|'\n'
name|'version'
op|'='
name|'None'
op|','
nl|'\n'
name|'usage'
op|'='
name|'None'
op|','
nl|'\n'
name|'default_config_files'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse command line arguments and config files.\n\n        Calling a ConfigOpts object causes the supplied command line arguments\n        and config files to be parsed, causing opt values to be made available\n        as attributes of the object.\n\n        The object may be called multiple times, each time causing the previous\n        set of values to be overwritten.\n\n        Automatically registers the --config-file option with either a supplied\n        list of default config files, or a list from find_config_files().\n\n        If the --config-dir option is set, any *.conf files from this\n        directory are pulled in, after all the file(s) specified by the\n        --config-file option.\n\n        :param args: command line arguments (defaults to sys.argv[1:])\n        :param project: the toplevel project name, used to locate config files\n        :param prog: the name of the program (defaults to sys.argv[0] basename)\n        :param version: the program version (for --version)\n        :param usage: a usage string (%prog will be expanded)\n        :param default_config_files: config files to use by default\n        :returns: the list of arguments left over after parsing options\n        :raises: SystemExit, ConfigFilesNotFoundError, ConfigFileParseError,\n                 RequiredOptError, DuplicateOptError\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_setup'
op|'('
name|'project'
op|','
name|'prog'
op|','
name|'version'
op|','
name|'usage'
op|','
name|'default_config_files'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_cli_values'
op|','
name|'leftovers'
op|'='
name|'self'
op|'.'
name|'_parse_cli_opts'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_parse_config_files'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_required_opts'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'leftovers'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look up an option value and perform string substitution.\n\n        :param name: the opt name (or \'dest\', more precisely)\n        :returns: the option value (after string subsititution) or a GroupAttr\n        :raises: NoSuchOptError,ConfigFileValueError,TemplateSubstitutionError\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look up an option value and perform string substitution."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__getattr__'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return True if key is the name of a registered opt or group."""'
newline|'\n'
name|'return'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_opts'
name|'or'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_groups'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Iterate over all registered opt and group names."""'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_opts'
op|'.'
name|'keys'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'_groups'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'key'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the number of options and option groups."""'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'_opts'
op|')'
op|'+'
name|'len'
op|'('
name|'self'
op|'.'
name|'_groups'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear the object state and unset overrides and defaults."""'
newline|'\n'
name|'self'
op|'.'
name|'_unset_defaults_and_overrides'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|clear
name|'def'
name|'clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Clear the state of the object to before it was called."""'
newline|'\n'
name|'self'
op|'.'
name|'_args'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_cli_values'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_oparser'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_cparser'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'unregister_opts'
op|'('
name|'self'
op|'.'
name|'_config_opts'
op|')'
newline|'\n'
name|'for'
name|'group'
name|'in'
name|'self'
op|'.'
name|'_groups'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'group'
op|'.'
name|'_clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|register_opt
name|'def'
name|'register_opt'
op|'('
name|'self'
op|','
name|'opt'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register an option schema.\n\n        Registering an option schema makes any option value which is previously\n        or subsequently parsed from the command line or config files available\n        as an attribute of this object.\n\n        :param opt: an instance of an Opt sub-class\n        :param group: an optional OptGroup object or group name\n        :return: False if the opt was already register, True otherwise\n        :raises: DuplicateOptError\n        """'
newline|'\n'
name|'if'
name|'group'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_get_group'
op|'('
name|'group'
op|','
name|'autocreate'
op|'='
name|'True'
op|')'
op|'.'
name|'_register_opt'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'_is_opt_registered'
op|'('
name|'self'
op|'.'
name|'_opts'
op|','
name|'opt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_opts'
op|'['
name|'opt'
op|'.'
name|'dest'
op|']'
op|'='
op|'{'
string|"'opt'"
op|':'
name|'opt'
op|','
string|"'override'"
op|':'
name|'None'
op|','
string|"'default'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|register_opts
name|'def'
name|'register_opts'
op|'('
name|'self'
op|','
name|'opts'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register multiple option schemas at once."""'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_opt'
op|'('
name|'opt'
op|','
name|'group'
op|','
name|'clear_cache'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|register_cli_opt
name|'def'
name|'register_cli_opt'
op|'('
name|'self'
op|','
name|'opt'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a CLI option schema.\n\n        CLI option schemas must be registered before the command line and\n        config files are parsed. This is to ensure that all CLI options are\n        show in --help and option validation works as expected.\n\n        :param opt: an instance of an Opt sub-class\n        :param group: an optional OptGroup object or group name\n        :return: False if the opt was already register, True otherwise\n        :raises: DuplicateOptError, ArgsAlreadyParsedError\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_args'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ArgsAlreadyParsedError'
op|'('
string|'"cannot register CLI option"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'register_opt'
op|'('
name|'opt'
op|','
name|'group'
op|','
name|'clear_cache'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|register_cli_opts
name|'def'
name|'register_cli_opts'
op|'('
name|'self'
op|','
name|'opts'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register multiple CLI option schemas at once."""'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_cli_opt'
op|'('
name|'opt'
op|','
name|'group'
op|','
name|'clear_cache'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_group
dedent|''
dedent|''
name|'def'
name|'register_group'
op|'('
name|'self'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register an option group.\n\n        An option group must be registered before options can be registered\n        with the group.\n\n        :param group: an OptGroup object\n        """'
newline|'\n'
name|'if'
name|'group'
op|'.'
name|'name'
name|'in'
name|'self'
op|'.'
name|'_groups'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_groups'
op|'['
name|'group'
op|'.'
name|'name'
op|']'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'group'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|unregister_opt
name|'def'
name|'unregister_opt'
op|'('
name|'self'
op|','
name|'opt'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unregister an option.\n\n        :param opt: an Opt object\n        :param group: an optional OptGroup object or group name\n        :raises: ArgsAlreadyParsedError, NoSuchGroupError\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_args'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ArgsAlreadyParsedError'
op|'('
string|'"reset before unregistering options"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'group'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_get_group'
op|'('
name|'group'
op|')'
op|'.'
name|'_unregister_opt'
op|'('
name|'opt'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'opt'
op|'.'
name|'dest'
name|'in'
name|'self'
op|'.'
name|'_opts'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'_opts'
op|'['
name|'opt'
op|'.'
name|'dest'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|unregister_opts
name|'def'
name|'unregister_opts'
op|'('
name|'self'
op|','
name|'opts'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unregister multiple CLI option schemas at once."""'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unregister_opt'
op|'('
name|'opt'
op|','
name|'group'
op|','
name|'clear_cache'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|set_override
name|'def'
name|'set_override'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'override'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override an opt value.\n\n        Override the command line, config file and default values of a\n        given option.\n\n        :param name: the name/dest of the opt\n        :param override: the override value\n        :param group: an option OptGroup object or group name\n        :raises: NoSuchOptError, NoSuchGroupError\n        """'
newline|'\n'
name|'opt_info'
op|'='
name|'self'
op|'.'
name|'_get_opt_info'
op|'('
name|'name'
op|','
name|'group'
op|')'
newline|'\n'
name|'opt_info'
op|'['
string|"'override'"
op|']'
op|'='
name|'override'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'__clear_cache'
newline|'\n'
DECL|member|set_default
name|'def'
name|'set_default'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override an opt\'s default value.\n\n        Override the default value of given option. A command line or\n        config file value will still take precedence over this default.\n\n        :param name: the name/dest of the opt\n        :param default: the default value\n        :param group: an option OptGroup object or group name\n        :raises: NoSuchOptError, NoSuchGroupError\n        """'
newline|'\n'
name|'opt_info'
op|'='
name|'self'
op|'.'
name|'_get_opt_info'
op|'('
name|'name'
op|','
name|'group'
op|')'
newline|'\n'
name|'opt_info'
op|'['
string|"'default'"
op|']'
op|'='
name|'default'
newline|'\n'
nl|'\n'
DECL|member|_all_opt_infos
dedent|''
name|'def'
name|'_all_opt_infos'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A generator function for iteration opt infos."""'
newline|'\n'
name|'for'
name|'info'
name|'in'
name|'self'
op|'.'
name|'_opts'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'info'
op|','
name|'None'
newline|'\n'
dedent|''
name|'for'
name|'group'
name|'in'
name|'self'
op|'.'
name|'_groups'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'info'
name|'in'
name|'group'
op|'.'
name|'_opts'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'info'
op|','
name|'group'
newline|'\n'
nl|'\n'
DECL|member|_all_opts
dedent|''
dedent|''
dedent|''
name|'def'
name|'_all_opts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A generator function for iteration opts."""'
newline|'\n'
name|'for'
name|'info'
op|','
name|'group'
name|'in'
name|'self'
op|'.'
name|'_all_opt_infos'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'info'
op|'['
string|"'opt'"
op|']'
op|','
name|'group'
newline|'\n'
nl|'\n'
DECL|member|_unset_defaults_and_overrides
dedent|''
dedent|''
name|'def'
name|'_unset_defaults_and_overrides'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unset any default or override on all options."""'
newline|'\n'
name|'for'
name|'info'
op|','
name|'group'
name|'in'
name|'self'
op|'.'
name|'_all_opt_infos'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
string|"'default'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'info'
op|'['
string|"'override'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|disable_interspersed_args
dedent|''
dedent|''
name|'def'
name|'disable_interspersed_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set parsing to stop on the first non-option.\n\n        If this this method is called, then parsing e.g.\n\n          script --verbose cmd --debug /tmp/mything\n\n        will no longer return:\n\n          [\'cmd\', \'/tmp/mything\']\n\n        as the leftover arguments, but will instead return:\n\n          [\'cmd\', \'--debug\', \'/tmp/mything\']\n\n        i.e. argument parsing is stopped at the first non-option argument.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_disable_interspersed_args'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|enable_interspersed_args
dedent|''
name|'def'
name|'enable_interspersed_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set parsing to not stop on the first non-option.\n\n        This it the default behaviour."""'
newline|'\n'
name|'self'
op|'.'
name|'_disable_interspersed_args'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|find_file
dedent|''
name|'def'
name|'find_file'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Locate a file located alongside the config files.\n\n        Search for a file with the supplied basename in the directories\n        which we have already loaded config files from and other known\n        configuration directories.\n\n        The directory, if any, supplied by the config_dir option is\n        searched first. Then the config_file option is iterated over\n        and each of the base directories of the config_files values\n        are searched. Failing both of these, the standard directories\n        searched by the module level find_config_files() function is\n        used. The first matching file is returned.\n\n        :param basename: the filename, e.g. \'policy.json\'\n        :returns: the path to a matching file, or None\n        """'
newline|'\n'
name|'dirs'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'config_dir'
op|':'
newline|'\n'
indent|'            '
name|'dirs'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'config_dir'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cf'
name|'in'
name|'reversed'
op|'('
name|'self'
op|'.'
name|'config_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dirs'
op|'.'
name|'append'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'cf'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'dirs'
op|'.'
name|'extend'
op|'('
name|'_get_config_dirs'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'_search_dirs'
op|'('
name|'dirs'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|log_opt_values
dedent|''
name|'def'
name|'log_opt_values'
op|'('
name|'self'
op|','
name|'logger'
op|','
name|'lvl'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Log the value of all registered opts.\n\n        It\'s often useful for an app to log its configuration to a log file at\n        startup for debugging. This method dumps to the entire config state to\n        the supplied logger at a given log level.\n\n        :param logger: a logging.Logger object\n        :param lvl: the log level (e.g. logging.DEBUG) arg to logger.log()\n        """'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"*"'
op|'*'
number|'80'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"Configuration options gathered from:"'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"command line args: %s"'
op|','
name|'self'
op|'.'
name|'_args'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"config files: %s"'
op|','
name|'self'
op|'.'
name|'config_file'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"="'
op|'*'
number|'80'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_sanitize
name|'def'
name|'_sanitize'
op|'('
name|'opt'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Obfuscate values of options declared secret"""'
newline|'\n'
name|'return'
name|'value'
name|'if'
name|'not'
name|'opt'
op|'.'
name|'secret'
name|'else'
string|"'*'"
op|'*'
name|'len'
op|'('
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'opt_name'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'_opts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'opt'
op|'='
name|'self'
op|'.'
name|'_get_opt_info'
op|'('
name|'opt_name'
op|')'
op|'['
string|"'opt'"
op|']'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"%-30s = %s"'
op|','
name|'opt_name'
op|','
nl|'\n'
name|'_sanitize'
op|'('
name|'opt'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'opt_name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'group_name'
name|'in'
name|'self'
op|'.'
name|'_groups'
op|':'
newline|'\n'
indent|'            '
name|'group_attr'
op|'='
name|'self'
op|'.'
name|'GroupAttr'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_get_group'
op|'('
name|'group_name'
op|')'
op|')'
newline|'\n'
name|'for'
name|'opt_name'
name|'in'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'_groups'
op|'['
name|'group_name'
op|']'
op|'.'
name|'_opts'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'opt'
op|'='
name|'self'
op|'.'
name|'_get_opt_info'
op|'('
name|'opt_name'
op|','
name|'group_name'
op|')'
op|'['
string|"'opt'"
op|']'
newline|'\n'
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"%-30s = %s"'
op|','
nl|'\n'
string|'"%s.%s"'
op|'%'
op|'('
name|'group_name'
op|','
name|'opt_name'
op|')'
op|','
nl|'\n'
name|'_sanitize'
op|'('
name|'opt'
op|','
name|'getattr'
op|'('
name|'group_attr'
op|','
name|'opt_name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'logger'
op|'.'
name|'log'
op|'('
name|'lvl'
op|','
string|'"*"'
op|'*'
number|'80'
op|')'
newline|'\n'
nl|'\n'
DECL|member|print_usage
dedent|''
name|'def'
name|'print_usage'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Print the usage message for the current program."""'
newline|'\n'
name|'self'
op|'.'
name|'_oparser'
op|'.'
name|'print_usage'
op|'('
name|'file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|print_help
dedent|''
name|'def'
name|'print_help'
op|'('
name|'self'
op|','
name|'file'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Print the help message for the current program."""'
newline|'\n'
name|'self'
op|'.'
name|'_oparser'
op|'.'
name|'print_help'
op|'('
name|'file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get
dedent|''
name|'def'
name|'_get'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'group'
op|','
name|'OptGroup'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
op|'('
name|'group'
op|'.'
name|'name'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
op|'('
name|'group'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__cache'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'self'
op|'.'
name|'_substitute'
op|'('
name|'self'
op|'.'
name|'_do_get'
op|'('
name|'name'
op|','
name|'group'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__cache'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_do_get
dedent|''
dedent|''
name|'def'
name|'_do_get'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look up an option value.\n\n        :param name: the opt name (or \'dest\', more precisely)\n        :param group: an OptGroup\n        :returns: the option value, or a GroupAttr object\n        :raises: NoSuchOptError, NoSuchGroupError, ConfigFileValueError,\n                 TemplateSubstitutionError\n        """'
newline|'\n'
name|'if'
name|'group'
name|'is'
name|'None'
name|'and'
name|'name'
name|'in'
name|'self'
op|'.'
name|'_groups'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'GroupAttr'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_get_group'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
name|'self'
op|'.'
name|'_get_opt_info'
op|'('
name|'name'
op|','
name|'group'
op|')'
newline|'\n'
name|'default'
op|','
name|'opt'
op|','
name|'override'
op|'='
op|'['
name|'info'
op|'['
name|'k'
op|']'
name|'for'
name|'k'
name|'in'
name|'sorted'
op|'('
name|'info'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'override'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'override'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_cparser'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'section'
op|'='
name|'group'
op|'.'
name|'name'
name|'if'
name|'group'
name|'is'
name|'not'
name|'None'
name|'else'
string|"'DEFAULT'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'opt'
op|'.'
name|'_get_from_config_parser'
op|'('
name|'self'
op|'.'
name|'_cparser'
op|','
name|'section'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'ve'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ConfigFileValueError'
op|'('
name|'str'
op|'('
name|'ve'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'opt'
op|'.'
name|'multi'
op|':'
newline|'\n'
comment|'# No need to continue since the last value wins'
nl|'\n'
indent|'                    '
name|'return'
name|'value'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'values'
op|'.'
name|'extend'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'name'
op|'='
name|'name'
name|'if'
name|'group'
name|'is'
name|'None'
name|'else'
name|'group'
op|'.'
name|'name'
op|'+'
string|"'_'"
op|'+'
name|'name'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'_cli_values'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'opt'
op|'.'
name|'multi'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'value'
op|'+'
name|'values'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'values'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'values'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'default'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'default'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'opt'
op|'.'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|_substitute
dedent|''
name|'def'
name|'_substitute'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Perform string template substitution.\n\n        Substitute any template variables (e.g. $foo, ${bar}) in the supplied\n        string value(s) with opt values.\n\n        :param value: the string value, or list of string values\n        :returns: the substituted string(s)\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
name|'self'
op|'.'
name|'_substitute'
op|'('
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'value'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tmpl'
op|'='
name|'string'
op|'.'
name|'Template'
op|'('
name|'value'
op|')'
newline|'\n'
name|'return'
name|'tmpl'
op|'.'
name|'safe_substitute'
op|'('
name|'self'
op|'.'
name|'StrSubWrapper'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_get_group
dedent|''
dedent|''
name|'def'
name|'_get_group'
op|'('
name|'self'
op|','
name|'group_or_name'
op|','
name|'autocreate'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Looks up a OptGroup object.\n\n        Helper function to return an OptGroup given a parameter which can\n        either be the group\'s name or an OptGroup object.\n\n        The OptGroup object returned is from the internal dict of OptGroup\n        objects, which will be a copy of any OptGroup object that users of\n        the API have access to.\n\n        :param group_or_name: the group\'s name or the OptGroup object itself\n        :param autocreate: whether to auto-create the group if it\'s not found\n        :raises: NoSuchGroupError\n        """'
newline|'\n'
name|'group'
op|'='
name|'group_or_name'
name|'if'
name|'isinstance'
op|'('
name|'group_or_name'
op|','
name|'OptGroup'
op|')'
name|'else'
name|'None'
newline|'\n'
name|'group_name'
op|'='
name|'group'
op|'.'
name|'name'
name|'if'
name|'group'
name|'else'
name|'group_or_name'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'group_name'
name|'in'
name|'self'
op|'.'
name|'_groups'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'group'
name|'is'
name|'None'
name|'or'
name|'not'
name|'autocreate'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'NoSuchGroupError'
op|'('
name|'group_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'register_group'
op|'('
name|'OptGroup'
op|'('
name|'name'
op|'='
name|'group_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_groups'
op|'['
name|'group_name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_opt_info
dedent|''
name|'def'
name|'_get_opt_info'
op|'('
name|'self'
op|','
name|'opt_name'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the (opt, override, default) dict for an opt.\n\n        :param opt_name: an opt name/dest\n        :param group: an optional group name or OptGroup object\n        :raises: NoSuchOptError, NoSuchGroupError\n        """'
newline|'\n'
name|'if'
name|'group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'opts'
op|'='
name|'self'
op|'.'
name|'_opts'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'group'
op|'='
name|'self'
op|'.'
name|'_get_group'
op|'('
name|'group'
op|')'
newline|'\n'
name|'opts'
op|'='
name|'group'
op|'.'
name|'_opts'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'opt_name'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NoSuchOptError'
op|'('
name|'opt_name'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'opts'
op|'['
name|'opt_name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_parse_config_files
dedent|''
name|'def'
name|'_parse_config_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse the config files from --config-file and --config-dir.\n\n        :raises: ConfigFilesNotFoundError, ConfigFileParseError\n        """'
newline|'\n'
name|'config_files'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'config_file'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'config_dir'
op|':'
newline|'\n'
indent|'            '
name|'config_dir_glob'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'config_dir'
op|','
string|"'*.conf'"
op|')'
newline|'\n'
name|'config_files'
op|'+='
name|'sorted'
op|'('
name|'glob'
op|'.'
name|'glob'
op|'('
name|'config_dir_glob'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_cparser'
op|'='
name|'MultiConfigParser'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'read_ok'
op|'='
name|'self'
op|'.'
name|'_cparser'
op|'.'
name|'read'
op|'('
name|'config_files'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'iniparser'
op|'.'
name|'ParseError'
name|'as'
name|'pe'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ConfigFileParseError'
op|'('
name|'pe'
op|'.'
name|'filename'
op|','
name|'str'
op|'('
name|'pe'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'read_ok'
op|'!='
name|'config_files'
op|':'
newline|'\n'
indent|'            '
name|'not_read_ok'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'f'
op|':'
name|'f'
name|'not'
name|'in'
name|'read_ok'
op|','
name|'config_files'
op|')'
newline|'\n'
name|'raise'
name|'ConfigFilesNotFoundError'
op|'('
name|'not_read_ok'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_required_opts
dedent|''
dedent|''
name|'def'
name|'_check_required_opts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that all opts marked as required have values specified.\n\n        :raises: RequiredOptError\n        """'
newline|'\n'
name|'for'
name|'info'
op|','
name|'group'
name|'in'
name|'self'
op|'.'
name|'_all_opt_infos'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|','
name|'opt'
op|','
name|'override'
op|'='
op|'['
name|'info'
op|'['
name|'k'
op|']'
name|'for'
name|'k'
name|'in'
name|'sorted'
op|'('
name|'info'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'opt'
op|'.'
name|'required'
op|':'
newline|'\n'
indent|'                '
name|'if'
op|'('
name|'default'
name|'is'
name|'not'
name|'None'
name|'or'
name|'override'
name|'is'
name|'not'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_get'
op|'('
name|'opt'
op|'.'
name|'name'
op|','
name|'group'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'RequiredOptError'
op|'('
name|'opt'
op|'.'
name|'name'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_cli_opts
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_parse_cli_opts'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse command line options.\n\n        Initializes the command line option parser and parses the supplied\n        command line arguments.\n\n        :param args: the command line arguments\n        :returns: a dict of parsed option values\n        :raises: SystemExit, DuplicateOptError\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_args'
op|'='
name|'args'
newline|'\n'
nl|'\n'
name|'for'
name|'opt'
op|','
name|'group'
name|'in'
name|'self'
op|'.'
name|'_all_opts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'opt'
op|'.'
name|'_add_to_cli'
op|'('
name|'self'
op|'.'
name|'_oparser'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|','
name|'leftovers'
op|'='
name|'self'
op|'.'
name|'_oparser'
op|'.'
name|'parse_args'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'vars'
op|'('
name|'values'
op|')'
op|','
name|'leftovers'
newline|'\n'
nl|'\n'
DECL|class|GroupAttr
dedent|''
name|'class'
name|'GroupAttr'
op|'('
name|'collections'
op|'.'
name|'Mapping'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
string|'"""\n        A helper class representing the option values of a group as a mapping\n        and attributes.\n        """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Construct a GroupAttr object.\n\n            :param conf: a ConfigOpts object\n            :param group: an OptGroup object\n            """'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'group'
op|'='
name|'group'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Look up an option value and perform template substitution."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'conf'
op|'.'
name|'_get'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Look up an option value and perform string substitution."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__getattr__'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return True if key is the name of a registered opt or group."""'
newline|'\n'
name|'return'
name|'key'
name|'in'
name|'self'
op|'.'
name|'group'
op|'.'
name|'_opts'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Iterate over all registered opt and group names."""'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'group'
op|'.'
name|'_opts'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'key'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return the number of options and option groups."""'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'group'
op|'.'
name|'_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|class|StrSubWrapper
dedent|''
dedent|''
name|'class'
name|'StrSubWrapper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
string|'"""\n        A helper class exposing opt values as a dict for string substitution.\n        """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Construct a StrSubWrapper object.\n\n            :param conf: a ConfigOpts object\n            """'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Look up an opt value from the ConfigOpts object.\n\n            :param key: an opt name\n            :returns: an opt value\n            :raises: TemplateSubstitutionError if attribute is a group\n            """'
newline|'\n'
name|'value'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'key'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'self'
op|'.'
name|'conf'
op|'.'
name|'GroupAttr'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TemplateSubstitutionError'
op|'('
nl|'\n'
string|"'substituting group %s not supported'"
op|'%'
name|'key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommonConfigOpts
dedent|''
dedent|''
dedent|''
name|'class'
name|'CommonConfigOpts'
op|'('
name|'ConfigOpts'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_LOG_FORMAT
indent|'    '
name|'DEFAULT_LOG_FORMAT'
op|'='
string|'"%(asctime)s %(levelname)8s [%(name)s] %(message)s"'
newline|'\n'
DECL|variable|DEFAULT_LOG_DATE_FORMAT
name|'DEFAULT_LOG_DATE_FORMAT'
op|'='
string|'"%Y-%m-%d %H:%M:%S"'
newline|'\n'
nl|'\n'
DECL|variable|common_cli_opts
name|'common_cli_opts'
op|'='
op|'['
nl|'\n'
name|'BoolOpt'
op|'('
string|"'debug'"
op|','
nl|'\n'
DECL|variable|short
name|'short'
op|'='
string|"'d'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Print debugging output'"
op|')'
op|','
nl|'\n'
name|'BoolOpt'
op|'('
string|"'verbose'"
op|','
nl|'\n'
DECL|variable|short
name|'short'
op|'='
string|"'v'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Print more verbose output'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|logging_cli_opts
name|'logging_cli_opts'
op|'='
op|'['
nl|'\n'
name|'StrOpt'
op|'('
string|"'log-config'"
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'PATH'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'If this option is specified, the logging configuration '"
nl|'\n'
string|"'file specified is used and overrides any other logging '"
nl|'\n'
string|"'options specified. Please see the Python logging module '"
nl|'\n'
string|"'documentation for details on logging configuration '"
nl|'\n'
string|"'files.'"
op|')'
op|','
nl|'\n'
name|'StrOpt'
op|'('
string|"'log-format'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'DEFAULT_LOG_FORMAT'
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'FORMAT'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'A logging.Formatter log message format string which may '"
nl|'\n'
string|"'use any of the available logging.LogRecord attributes. '"
nl|'\n'
string|"'Default: %default'"
op|')'
op|','
nl|'\n'
name|'StrOpt'
op|'('
string|"'log-date-format'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'DEFAULT_LOG_DATE_FORMAT'
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'DATE_FORMAT'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Format string for %(asctime)s in log records. '"
nl|'\n'
string|"'Default: %default'"
op|')'
op|','
nl|'\n'
name|'StrOpt'
op|'('
string|"'log-file'"
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'PATH'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'(Optional) Name of log file to output to. '"
nl|'\n'
string|"'If not set, logging will go to stdout.'"
op|')'
op|','
nl|'\n'
name|'StrOpt'
op|'('
string|"'log-dir'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'(Optional) The directory to keep log files in '"
nl|'\n'
string|"'(will be prepended to --logfile)'"
op|')'
op|','
nl|'\n'
name|'BoolOpt'
op|'('
string|"'use-syslog'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use syslog for logging.'"
op|')'
op|','
nl|'\n'
name|'StrOpt'
op|'('
string|"'syslog-log-facility'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'LOG_USER'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'syslog facility to receive log lines'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CommonConfigOpts'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'register_cli_opts'
op|'('
name|'self'
op|'.'
name|'common_cli_opts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'register_cli_opts'
op|'('
name|'self'
op|'.'
name|'logging_cli_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
dedent|''
dedent|''
name|'CONF'
op|'='
name|'CommonConfigOpts'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

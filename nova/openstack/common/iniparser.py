begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 OpenStack LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParseError
name|'class'
name|'ParseError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'lineno'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'msg'
op|'='
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'line'
op|'='
name|'line'
newline|'\n'
name|'self'
op|'.'
name|'lineno'
op|'='
name|'lineno'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'at line %d, %s: %r'"
op|'%'
op|'('
name|'self'
op|'.'
name|'lineno'
op|','
name|'self'
op|'.'
name|'msg'
op|','
name|'self'
op|'.'
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseParser
dedent|''
dedent|''
name|'class'
name|'BaseParser'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|lineno
indent|'    '
name|'lineno'
op|'='
number|'0'
newline|'\n'
DECL|variable|parse_exc
name|'parse_exc'
op|'='
name|'ParseError'
newline|'\n'
nl|'\n'
DECL|member|_assignment
name|'def'
name|'_assignment'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assignment'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'None'
op|','
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_section
dedent|''
name|'def'
name|'_get_section'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'!='
string|"']'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'error_no_section_end_bracket'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'<='
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'error_no_section_name'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'line'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_split_key_value
dedent|''
name|'def'
name|'_split_key_value'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'colon'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'equal'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'if'
name|'colon'
op|'<'
number|'0'
name|'and'
name|'equal'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'error_invalid_assignment'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'colon'
op|'<'
number|'0'
name|'or'
op|'('
name|'equal'
op|'>='
number|'0'
name|'and'
name|'equal'
op|'<'
name|'colon'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'value'
op|'='
name|'line'
op|'['
op|':'
name|'equal'
op|']'
op|','
name|'line'
op|'['
name|'equal'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'value'
op|'='
name|'line'
op|'['
op|':'
name|'colon'
op|']'
op|','
name|'line'
op|'['
name|'colon'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'value'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
op|'('
op|'('
name|'value'
name|'and'
name|'value'
op|'['
number|'0'
op|']'
op|'=='
name|'value'
op|'['
op|'-'
number|'1'
op|']'
op|')'
name|'and'
nl|'\n'
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|'=='
string|'"\\""'
name|'or'
name|'value'
op|'['
number|'0'
op|']'
op|'=='
string|'"\'"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'value'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'key'
op|'.'
name|'strip'
op|'('
op|')'
op|','
op|'['
name|'value'
op|']'
newline|'\n'
nl|'\n'
DECL|member|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'self'
op|','
name|'lineiter'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|'='
name|'None'
newline|'\n'
name|'value'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'lineiter'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lineno'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
newline|'\n'
comment|'# Blank line, ends multi-line values'
nl|'\n'
indent|'                '
name|'if'
name|'key'
op|':'
newline|'\n'
indent|'                    '
name|'key'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'_assignment'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'line'
op|'['
number|'0'
op|']'
name|'in'
op|'('
string|"' '"
op|','
string|"'\\t'"
op|')'
op|':'
newline|'\n'
comment|'# Continuation of previous assignment'
nl|'\n'
indent|'                '
name|'if'
name|'key'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'error_unexpected_continuation'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'.'
name|'append'
op|'('
name|'line'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
op|':'
newline|'\n'
comment|'# Flush previous assignment, if any'
nl|'\n'
indent|'                '
name|'key'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'_assignment'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'['
number|'0'
op|']'
op|'=='
string|"'['"
op|':'
newline|'\n'
comment|'# Section start'
nl|'\n'
indent|'                '
name|'section'
op|'='
name|'self'
op|'.'
name|'_get_section'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'section'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'new_section'
op|'('
name|'section'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'line'
op|'['
number|'0'
op|']'
name|'in'
string|"'#;'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'comment'
op|'('
name|'line'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|','
name|'value'
op|'='
name|'self'
op|'.'
name|'_split_key_value'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'error_empty_key'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'key'
op|':'
newline|'\n'
comment|'# Flush previous assignment, if any'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_assignment'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assignment
dedent|''
dedent|''
name|'def'
name|'assignment'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a full assignment is parsed"""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|new_section
dedent|''
name|'def'
name|'new_section'
op|'('
name|'self'
op|','
name|'section'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a new section is started"""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|comment
dedent|''
name|'def'
name|'comment'
op|'('
name|'self'
op|','
name|'comment'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called when a comment is parsed"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|error_invalid_assignment
dedent|''
name|'def'
name|'error_invalid_assignment'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'self'
op|'.'
name|'parse_exc'
op|'('
string|'"No \':\' or \'=\' found in assignment"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'lineno'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_empty_key
dedent|''
name|'def'
name|'error_empty_key'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'self'
op|'.'
name|'parse_exc'
op|'('
string|"'Key cannot be empty'"
op|','
name|'self'
op|'.'
name|'lineno'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_unexpected_continuation
dedent|''
name|'def'
name|'error_unexpected_continuation'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'self'
op|'.'
name|'parse_exc'
op|'('
string|"'Unexpected continuation line'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'lineno'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_no_section_end_bracket
dedent|''
name|'def'
name|'error_no_section_end_bracket'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'self'
op|'.'
name|'parse_exc'
op|'('
string|"'Invalid section (must end with ])'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'lineno'
op|','
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error_no_section_name
dedent|''
name|'def'
name|'error_no_section_name'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'self'
op|'.'
name|'parse_exc'
op|'('
string|"'Empty section name'"
op|','
name|'self'
op|'.'
name|'lineno'
op|','
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

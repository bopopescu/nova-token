begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 OpenStack Foundation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandFilter
name|'class'
name|'CommandFilter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Command filter only checking that the 1st argument matches exec_path."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exec_path'
op|','
name|'run_as'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'exec_path'
op|'='
name|'exec_path'
newline|'\n'
name|'self'
op|'.'
name|'run_as'
op|'='
name|'run_as'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'real_exec'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_exec
dedent|''
name|'def'
name|'get_exec'
op|'('
name|'self'
op|','
name|'exec_dirs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns existing executable, or empty string if none found."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'real_exec'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'real_exec'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'real_exec'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'self'
op|'.'
name|'exec_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'os'
op|'.'
name|'access'
op|'('
name|'self'
op|'.'
name|'exec_path'
op|','
name|'os'
op|'.'
name|'X_OK'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'real_exec'
op|'='
name|'self'
op|'.'
name|'exec_path'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'binary_path'
name|'in'
name|'exec_dirs'
op|':'
newline|'\n'
indent|'                '
name|'expanded_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'binary_path'
op|','
name|'self'
op|'.'
name|'exec_path'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'access'
op|'('
name|'expanded_path'
op|','
name|'os'
op|'.'
name|'X_OK'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'real_exec'
op|'='
name|'expanded_path'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'real_exec'
newline|'\n'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Only check that the first argument (command) matches exec_path."""'
newline|'\n'
name|'return'
name|'userargs'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'self'
op|'.'
name|'exec_path'
op|')'
op|'=='
name|'userargs'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_command
dedent|''
name|'def'
name|'get_command'
op|'('
name|'self'
op|','
name|'userargs'
op|','
name|'exec_dirs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns command to execute (with sudo -u if run_as != root)."""'
newline|'\n'
name|'to_exec'
op|'='
name|'self'
op|'.'
name|'get_exec'
op|'('
name|'exec_dirs'
op|'='
name|'exec_dirs'
op|')'
name|'or'
name|'self'
op|'.'
name|'exec_path'
newline|'\n'
name|'if'
op|'('
name|'self'
op|'.'
name|'run_as'
op|'!='
string|"'root'"
op|')'
op|':'
newline|'\n'
comment|'# Used to run commands at lesser privileges'
nl|'\n'
indent|'            '
name|'return'
op|'['
string|"'sudo'"
op|','
string|"'-u'"
op|','
name|'self'
op|'.'
name|'run_as'
op|','
name|'to_exec'
op|']'
op|'+'
name|'userargs'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'to_exec'
op|']'
op|'+'
name|'userargs'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_environment
dedent|''
name|'def'
name|'get_environment'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns specific environment to set, None if none."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RegExpFilter
dedent|''
dedent|''
name|'class'
name|'RegExpFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Command filter doing regexp matching for every argument."""'
newline|'\n'
nl|'\n'
DECL|member|match
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
comment|"# Early skip if command or number of args don't match"
nl|'\n'
indent|'        '
name|'if'
op|'('
name|'not'
name|'userargs'
name|'or'
name|'len'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
op|'!='
name|'len'
op|'('
name|'userargs'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# DENY: argument numbers don't match"
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
comment|'# Compare each arg (anchoring pattern explicitly at end of string)'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'pattern'
op|','
name|'arg'
op|')'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'args'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
name|'pattern'
op|'+'
string|"'$'"
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'re'
op|'.'
name|'error'
op|':'
newline|'\n'
comment|'# DENY: Badly-formed filter'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# ALLOW: All arguments matched'
nl|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|'# DENY: Some arguments did not match'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PathFilter
dedent|''
dedent|''
name|'class'
name|'PathFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Command filter checking that path arguments are within given dirs\n\n        One can specify the following constraints for command arguments:\n            1) pass     - pass an argument as is to the resulting command\n            2) some_str - check if an argument is equal to the given string\n            3) abs path - check if a path argument is within the given base dir\n\n        A typical rootwrapper filter entry looks like this:\n            # cmdname: filter name, raw command, user, arg_i_constraint [, ...]\n            chown: PathFilter, /bin/chown, root, nova, /var/lib/images\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|match
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'userargs'
name|'or'
name|'len'
op|'('
name|'userargs'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'command'
op|','
name|'arguments'
op|'='
name|'userargs'
op|'['
number|'0'
op|']'
op|','
name|'userargs'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'equal_args_num'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
op|'=='
name|'len'
op|'('
name|'arguments'
op|')'
newline|'\n'
name|'exec_is_valid'
op|'='
name|'super'
op|'('
name|'PathFilter'
op|','
name|'self'
op|')'
op|'.'
name|'match'
op|'('
name|'userargs'
op|')'
newline|'\n'
name|'args_equal_or_pass'
op|'='
name|'all'
op|'('
nl|'\n'
name|'arg'
op|'=='
string|"'pass'"
name|'or'
name|'arg'
op|'=='
name|'value'
nl|'\n'
name|'for'
name|'arg'
op|','
name|'value'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'args'
op|','
name|'arguments'
op|')'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'arg'
op|')'
comment|'# arguments not specifying abs paths'
nl|'\n'
op|')'
newline|'\n'
name|'paths_are_within_base_dirs'
op|'='
name|'all'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'commonprefix'
op|'('
op|'['
name|'arg'
op|','
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'value'
op|')'
op|']'
op|')'
op|'=='
name|'arg'
nl|'\n'
name|'for'
name|'arg'
op|','
name|'value'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'args'
op|','
name|'arguments'
op|')'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'arg'
op|')'
comment|'# arguments specifying abs paths'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'equal_args_num'
name|'and'
nl|'\n'
name|'exec_is_valid'
name|'and'
nl|'\n'
name|'args_equal_or_pass'
name|'and'
nl|'\n'
name|'paths_are_within_base_dirs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_command
dedent|''
name|'def'
name|'get_command'
op|'('
name|'self'
op|','
name|'userargs'
op|','
name|'exec_dirs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'command'
op|','
name|'arguments'
op|'='
name|'userargs'
op|'['
number|'0'
op|']'
op|','
name|'userargs'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'# convert path values to canonical ones; copy other args as is'
nl|'\n'
name|'args'
op|'='
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'value'
op|')'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'arg'
op|')'
name|'else'
name|'value'
nl|'\n'
name|'for'
name|'arg'
op|','
name|'value'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'args'
op|','
name|'arguments'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'super'
op|'('
name|'PathFilter'
op|','
name|'self'
op|')'
op|'.'
name|'get_command'
op|'('
op|'['
name|'command'
op|']'
op|'+'
name|'args'
op|','
nl|'\n'
name|'exec_dirs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KillFilter
dedent|''
dedent|''
name|'class'
name|'KillFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specific filter for the kill calls.\n\n       1st argument is the user to run /bin/kill under\n       2nd argument is the location of the affected executable\n           if the argument is not absolute, it is checked against $PATH\n       Subsequent arguments list the accepted signals (if any)\n\n       This filter relies on /proc to accurately determine affected\n       executable, so it will only work on procfs-capable systems (not OSX).\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'KillFilter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|'"/bin/kill"'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'userargs'
name|'or'
name|'userargs'
op|'['
number|'0'
op|']'
op|'!='
string|'"kill"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'args'
op|'='
name|'list'
op|'('
name|'userargs'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'=='
number|'3'
op|':'
newline|'\n'
comment|'# A specific signal is requested'
nl|'\n'
indent|'            '
name|'signal'
op|'='
name|'args'
op|'.'
name|'pop'
op|'('
number|'1'
op|')'
newline|'\n'
name|'if'
name|'signal'
name|'not'
name|'in'
name|'self'
op|'.'
name|'args'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
comment|'# Requested signal not in accepted list'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'args'
op|')'
op|'!='
number|'2'
op|':'
newline|'\n'
comment|'# Incorrect number of arguments'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
comment|'# No signal requested, but filter requires specific signal'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'command'
op|'='
name|'os'
op|'.'
name|'readlink'
op|'('
string|'"/proc/%d/exe"'
op|'%'
name|'int'
op|'('
name|'args'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'OSError'
op|')'
op|':'
newline|'\n'
comment|'# Incorrect PID'
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|"# NOTE(yufang521247): /proc/PID/exe may have '\\0' on the"
nl|'\n'
comment|"# end, because python doen't stop at '\\0' when read the"
nl|'\n'
comment|'# target path.'
nl|'\n'
dedent|''
name|'command'
op|'='
name|'command'
op|'.'
name|'partition'
op|'('
string|"'\\0'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
comment|"# NOTE(dprince): /proc/PID/exe may have ' (deleted)' on"
nl|'\n'
comment|'# the end if an executable is updated or deleted'
nl|'\n'
name|'if'
name|'command'
op|'.'
name|'endswith'
op|'('
string|'" (deleted)"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'command'
op|'='
name|'command'
op|'['
op|':'
op|'-'
name|'len'
op|'('
string|'" (deleted)"'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'kill_command'
op|'='
name|'self'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'kill_command'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'kill_command'
op|'=='
name|'command'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'command'
op|')'
name|'and'
nl|'\n'
name|'kill_command'
op|'=='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'command'
op|')'
name|'and'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'command'
op|')'
name|'in'
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PATH'"
op|','
string|"''"
nl|'\n'
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReadFileFilter
dedent|''
dedent|''
name|'class'
name|'ReadFileFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specific filter for the utils.read_file_as_root call."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file_path'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file_path'
op|'='
name|'file_path'
newline|'\n'
name|'super'
op|'('
name|'ReadFileFilter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
string|'"/bin/cat"'
op|','
string|'"root"'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'userargs'
op|'=='
op|'['
string|"'cat'"
op|','
name|'self'
op|'.'
name|'file_path'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IpFilter
dedent|''
dedent|''
name|'class'
name|'IpFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specific filter for the ip utility to that does not match exec."""'
newline|'\n'
nl|'\n'
DECL|member|match
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'userargs'
op|'['
number|'0'
op|']'
op|'=='
string|"'ip'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'userargs'
op|'['
number|'1'
op|']'
op|'=='
string|"'netns'"
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'('
name|'userargs'
op|'['
number|'2'
op|']'
name|'in'
op|'('
string|"'list'"
op|','
string|"'add'"
op|','
string|"'delete'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EnvFilter
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'EnvFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specific filter for the env utility.\n\n    Behaves like CommandFilter, except that it handles\n    leading env A=B.. strings appropriately.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_extract_env
name|'def'
name|'_extract_env'
op|'('
name|'self'
op|','
name|'arglist'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Extract all leading NAME=VALUE arguments from arglist."""'
newline|'\n'
nl|'\n'
name|'envs'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'arglist'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'='"
name|'not'
name|'in'
name|'arg'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'envs'
op|'.'
name|'add'
op|'('
name|'arg'
op|'.'
name|'partition'
op|'('
string|"'='"
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'envs'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exec_path'
op|','
name|'run_as'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'EnvFilter'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'exec_path'
op|','
name|'run_as'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'env_list'
op|'='
name|'self'
op|'.'
name|'_extract_env'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
newline|'\n'
comment|'# Set exec_path to X when args are in the form of'
nl|'\n'
comment|'# env A=a B=b C=c X Y Z'
nl|'\n'
name|'if'
string|'"env"'
name|'in'
name|'exec_path'
name|'and'
name|'len'
op|'('
name|'env_list'
op|')'
op|'<'
name|'len'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'exec_path'
op|'='
name|'self'
op|'.'
name|'args'
op|'['
name|'len'
op|'('
name|'env_list'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|match
dedent|''
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
comment|"# ignore leading 'env'"
nl|'\n'
indent|'        '
name|'if'
name|'userargs'
op|'['
number|'0'
op|']'
op|'=='
string|"'env'"
op|':'
newline|'\n'
indent|'            '
name|'userargs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# require one additional argument after configured ones'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'userargs'
op|')'
op|'<'
name|'len'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# extract all env args'
nl|'\n'
dedent|''
name|'user_envs'
op|'='
name|'self'
op|'.'
name|'_extract_env'
op|'('
name|'userargs'
op|')'
newline|'\n'
name|'filter_envs'
op|'='
name|'self'
op|'.'
name|'_extract_env'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
newline|'\n'
name|'user_command'
op|'='
name|'userargs'
op|'['
name|'len'
op|'('
name|'user_envs'
op|')'
op|':'
name|'len'
op|'('
name|'user_envs'
op|')'
op|'+'
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# match first non-env argument with CommandFilter'
nl|'\n'
name|'return'
op|'('
name|'super'
op|'('
name|'EnvFilter'
op|','
name|'self'
op|')'
op|'.'
name|'match'
op|'('
name|'user_command'
op|')'
nl|'\n'
name|'and'
name|'len'
op|'('
name|'filter_envs'
op|')'
name|'and'
name|'user_envs'
op|'=='
name|'filter_envs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exec_args
dedent|''
name|'def'
name|'exec_args'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'userargs'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|"# ignore leading 'env'"
nl|'\n'
name|'if'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
string|"'env'"
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Throw away leading NAME=VALUE arguments'
nl|'\n'
dedent|''
name|'while'
name|'args'
name|'and'
string|"'='"
name|'in'
name|'args'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'args'
newline|'\n'
nl|'\n'
DECL|member|get_command
dedent|''
name|'def'
name|'get_command'
op|'('
name|'self'
op|','
name|'userargs'
op|','
name|'exec_dirs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'to_exec'
op|'='
name|'self'
op|'.'
name|'get_exec'
op|'('
name|'exec_dirs'
op|'='
name|'exec_dirs'
op|')'
name|'or'
name|'self'
op|'.'
name|'exec_path'
newline|'\n'
name|'return'
op|'['
name|'to_exec'
op|']'
op|'+'
name|'self'
op|'.'
name|'exec_args'
op|'('
name|'userargs'
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_environment
dedent|''
name|'def'
name|'get_environment'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# ignore leading 'env'"
nl|'\n'
name|'if'
name|'userargs'
op|'['
number|'0'
op|']'
op|'=='
string|"'env'"
op|':'
newline|'\n'
indent|'            '
name|'userargs'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle leading NAME=VALUE pairs'
nl|'\n'
dedent|''
name|'for'
name|'a'
name|'in'
name|'userargs'
op|':'
newline|'\n'
indent|'            '
name|'env_name'
op|','
name|'equals'
op|','
name|'env_value'
op|'='
name|'a'
op|'.'
name|'partition'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'equals'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'env_name'
name|'and'
name|'env_value'
op|':'
newline|'\n'
indent|'                '
name|'env'
op|'['
name|'env_name'
op|']'
op|'='
name|'env_value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'env'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ChainingFilter
dedent|''
dedent|''
name|'class'
name|'ChainingFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
DECL|member|exec_args
indent|'    '
name|'def'
name|'exec_args'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IpNetnsExecFilter
dedent|''
dedent|''
name|'class'
name|'IpNetnsExecFilter'
op|'('
name|'ChainingFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specific filter for the ip utility to that does match exec."""'
newline|'\n'
nl|'\n'
DECL|member|match
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
comment|'# Network namespaces currently require root'
nl|'\n'
comment|'# require <ns> argument'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'run_as'
op|'!='
string|'"root"'
name|'or'
name|'len'
op|'('
name|'userargs'
op|')'
op|'<'
number|'4'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'userargs'
op|'['
op|':'
number|'3'
op|']'
op|'=='
op|'['
string|"'ip'"
op|','
string|"'netns'"
op|','
string|"'exec'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exec_args
dedent|''
name|'def'
name|'exec_args'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'userargs'
op|'['
number|'4'
op|':'
op|']'
newline|'\n'
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
number|'0'
op|']'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'args'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

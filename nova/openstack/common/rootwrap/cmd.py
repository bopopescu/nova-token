begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 OpenStack Foundation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Root wrapper for OpenStack services\n\n   Filters which commands a service is allowed to run as another user.\n\n   To use this with nova, you should set the following in\n   nova.conf:\n   rootwrap_config=/etc/nova/rootwrap.conf\n\n   You also need to let the nova user run nova-rootwrap\n   as root in sudoers:\n   nova ALL = (root) NOPASSWD: /usr/bin/nova-rootwrap\n                                   /etc/nova/rootwrap.conf *\n\n   Service packaging should deploy .filters files only on nodes where\n   they are needed, to avoid allowing more than is necessary.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'print_function'
newline|'\n'
nl|'\n'
name|'import'
name|'ConfigParser'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pwd'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|RC_UNAUTHORIZED
name|'RC_UNAUTHORIZED'
op|'='
number|'99'
newline|'\n'
DECL|variable|RC_NOCOMMAND
name|'RC_NOCOMMAND'
op|'='
number|'98'
newline|'\n'
DECL|variable|RC_BADCONFIG
name|'RC_BADCONFIG'
op|'='
number|'97'
newline|'\n'
DECL|variable|RC_NOEXECFOUND
name|'RC_NOEXECFOUND'
op|'='
number|'96'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_subprocess_setup
name|'def'
name|'_subprocess_setup'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Python installs a SIGPIPE handler by default. This is usually not what'
nl|'\n'
comment|'# non-Python subprocesses expect.'
nl|'\n'
indent|'    '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGPIPE'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_exit_error
dedent|''
name|'def'
name|'_exit_error'
op|'('
name|'execname'
op|','
name|'message'
op|','
name|'errorcode'
op|','
name|'log'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
string|'"%s: %s"'
op|'%'
op|'('
name|'execname'
op|','
name|'message'
op|')'
op|')'
newline|'\n'
name|'if'
name|'log'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'error'
op|'('
name|'message'
op|')'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'exit'
op|'('
name|'errorcode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Split arguments, require at least a command'
nl|'\n'
indent|'    '
name|'execname'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'        '
name|'_exit_error'
op|'('
name|'execname'
op|','
string|'"No command specified"'
op|','
name|'RC_NOCOMMAND'
op|','
name|'log'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'configfile'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'userargs'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'# Add ../ to sys.path to allow running from branch'
nl|'\n'
name|'possible_topdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'execname'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'pardir'
op|','
name|'os'
op|'.'
name|'pardir'
op|')'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'possible_topdir'
op|','
string|'"nova"'
op|','
string|'"__init__.py"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'path'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'possible_topdir'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rootwrap'
name|'import'
name|'wrapper'
newline|'\n'
nl|'\n'
comment|'# Load configuration'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'rawconfig'
op|'='
name|'ConfigParser'
op|'.'
name|'RawConfigParser'
op|'('
op|')'
newline|'\n'
name|'rawconfig'
op|'.'
name|'read'
op|'('
name|'configfile'
op|')'
newline|'\n'
name|'config'
op|'='
name|'wrapper'
op|'.'
name|'RootwrapConfig'
op|'('
name|'rawconfig'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"Incorrect value in %s: %s"'
op|'%'
op|'('
name|'configfile'
op|','
name|'exc'
op|'.'
name|'message'
op|')'
newline|'\n'
name|'_exit_error'
op|'('
name|'execname'
op|','
name|'msg'
op|','
name|'RC_BADCONFIG'
op|','
name|'log'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConfigParser'
op|'.'
name|'Error'
op|':'
newline|'\n'
indent|'        '
name|'_exit_error'
op|'('
name|'execname'
op|','
string|'"Incorrect configuration file: %s"'
op|'%'
name|'configfile'
op|','
nl|'\n'
name|'RC_BADCONFIG'
op|','
name|'log'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'config'
op|'.'
name|'use_syslog'
op|':'
newline|'\n'
indent|'        '
name|'wrapper'
op|'.'
name|'setup_syslog'
op|'('
name|'execname'
op|','
nl|'\n'
name|'config'
op|'.'
name|'syslog_log_facility'
op|','
nl|'\n'
name|'config'
op|'.'
name|'syslog_log_level'
op|')'
newline|'\n'
nl|'\n'
comment|'# Execute command if it matches any of the loaded filters'
nl|'\n'
dedent|''
name|'filters'
op|'='
name|'wrapper'
op|'.'
name|'load_filters'
op|'('
name|'config'
op|'.'
name|'filters_path'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'filtermatch'
op|'='
name|'wrapper'
op|'.'
name|'match_filter'
op|'('
name|'filters'
op|','
name|'userargs'
op|','
nl|'\n'
name|'exec_dirs'
op|'='
name|'config'
op|'.'
name|'exec_dirs'
op|')'
newline|'\n'
name|'if'
name|'filtermatch'
op|':'
newline|'\n'
indent|'            '
name|'command'
op|'='
name|'filtermatch'
op|'.'
name|'get_command'
op|'('
name|'userargs'
op|','
nl|'\n'
name|'exec_dirs'
op|'='
name|'config'
op|'.'
name|'exec_dirs'
op|')'
newline|'\n'
name|'if'
name|'config'
op|'.'
name|'use_syslog'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'info'
op|'('
string|'"(%s > %s) Executing %s (filter match = %s)"'
op|'%'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'getlogin'
op|'('
op|')'
op|','
name|'pwd'
op|'.'
name|'getpwuid'
op|'('
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'command'
op|','
name|'filtermatch'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'command'
op|','
nl|'\n'
name|'stdin'
op|'='
name|'sys'
op|'.'
name|'stdin'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'sys'
op|'.'
name|'stderr'
op|','
nl|'\n'
name|'preexec_fn'
op|'='
name|'_subprocess_setup'
op|','
nl|'\n'
name|'env'
op|'='
name|'filtermatch'
op|'.'
name|'get_environment'
op|'('
name|'userargs'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
name|'obj'
op|'.'
name|'returncode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'wrapper'
op|'.'
name|'FilterMatchNotExecutable'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
op|'('
string|'"Executable not found: %s (filter match = %s)"'
nl|'\n'
op|'%'
op|'('
name|'exc'
op|'.'
name|'match'
op|'.'
name|'exec_path'
op|','
name|'exc'
op|'.'
name|'match'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'_exit_error'
op|'('
name|'execname'
op|','
name|'msg'
op|','
name|'RC_NOEXECFOUND'
op|','
name|'log'
op|'='
name|'config'
op|'.'
name|'use_syslog'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'wrapper'
op|'.'
name|'NoFilterMatched'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
op|'('
string|'"Unauthorized command: %s (no filter matched)"'
nl|'\n'
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
name|'userargs'
op|')'
op|')'
newline|'\n'
name|'_exit_error'
op|'('
name|'execname'
op|','
name|'msg'
op|','
name|'RC_UNAUTHORIZED'
op|','
name|'log'
op|'='
name|'config'
op|'.'
name|'use_syslog'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

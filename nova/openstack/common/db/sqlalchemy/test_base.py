begin_unit
comment|'# Copyright (c) 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'import'
name|'fixtures'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'session'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DbFixture
name|'class'
name|'DbFixture'
op|'('
name|'fixtures'
op|'.'
name|'Fixture'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Basic database fixture.\n\n    Allows to run tests on various db backends, such as SQLite, MySQL and\n    PostgreSQL. By default use sqlite backend. To override default backend\n    uri set env variable OS_TEST_DBAPI_CONNECTION with database admin\n    credentials for specific backend.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_get_uri
name|'def'
name|'_get_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'OS_TEST_DBAPI_CONNECTION'"
op|','
string|"'sqlite://'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DbFixture'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'test'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DbFixture'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'engine'
op|'='
name|'session'
op|'.'
name|'create_engine'
op|'('
name|'self'
op|'.'
name|'_get_uri'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'sessionmaker'
op|'='
name|'session'
op|'.'
name|'get_maker'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'engine'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'test'
op|'.'
name|'engine'
op|'.'
name|'dispose'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DbTestCase
dedent|''
dedent|''
name|'class'
name|'DbTestCase'
op|'('
name|'test'
op|'.'
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for testing of DB code.\n\n    Using `DbFixture`. Intended to be the main database test case to use all\n    the tests on a given backend with user defined uri. Backend specific\n    tests should be decorated with `backend_specific` decorator.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|FIXTURE
name|'FIXTURE'
op|'='
name|'DbFixture'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DbTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'self'
op|'.'
name|'FIXTURE'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|ALLOWED_DIALECTS
dedent|''
dedent|''
name|'ALLOWED_DIALECTS'
op|'='
op|'['
string|"'sqlite'"
op|','
string|"'mysql'"
op|','
string|"'postgresql'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|backend_specific
name|'def'
name|'backend_specific'
op|'('
op|'*'
name|'dialects'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to skip backend specific tests on inappropriate engines.\n\n    ::dialects: list of dialects names under which the test will be launched.\n    """'
newline|'\n'
DECL|function|wrap
name|'def'
name|'wrap'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|ins_wrap
name|'def'
name|'ins_wrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'set'
op|'('
name|'dialects'
op|')'
op|'.'
name|'issubset'
op|'('
name|'ALLOWED_DIALECTS'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
nl|'\n'
string|'"Please use allowed dialects: %s"'
op|'%'
name|'ALLOWED_DIALECTS'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'engine'
op|'.'
name|'name'
name|'not'
name|'in'
name|'dialects'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
op|'('
string|'\'The test "%s" can be run \''
nl|'\n'
string|"'only on %s. Current engine is %s.'"
op|')'
newline|'\n'
name|'args'
op|'='
op|'('
name|'f'
op|'.'
name|'__name__'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'dialects'
op|')'
op|','
name|'self'
op|'.'
name|'engine'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'skip'
op|'('
name|'msg'
op|'%'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ins_wrap'
newline|'\n'
dedent|''
name|'return'
name|'wrap'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
DECL|class|OpportunisticFixture
name|'class'
name|'OpportunisticFixture'
op|'('
name|'DbFixture'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base fixture to use default CI databases.\n\n    The databases exist in OpenStack CI infrastructure. But for the\n    correct functioning in local environment the databases must be\n    created manually.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|DRIVER
name|'DRIVER'
op|'='
name|'abc'
op|'.'
name|'abstractproperty'
op|'('
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'DBNAME'
op|'='
name|'PASSWORD'
op|'='
name|'USERNAME'
op|'='
string|"'openstack_citest'"
newline|'\n'
nl|'\n'
DECL|member|_get_uri
name|'def'
name|'_get_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utils'
op|'.'
name|'get_connect_string'
op|'('
name|'backend'
op|'='
name|'self'
op|'.'
name|'DRIVER'
op|','
nl|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'USERNAME'
op|','
nl|'\n'
name|'passwd'
op|'='
name|'self'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'database'
op|'='
name|'self'
op|'.'
name|'DBNAME'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
DECL|class|OpportunisticTestCase
name|'class'
name|'OpportunisticTestCase'
op|'('
name|'DbTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base test case to use default CI databases.\n\n    The subclasses of the test case are running only when openstack_citest\n    database is available otherwise a tests will be skipped.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|FIXTURE
name|'FIXTURE'
op|'='
name|'abc'
op|'.'
name|'abstractproperty'
op|'('
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'credentials'
op|'='
op|'{'
nl|'\n'
string|"'backend'"
op|':'
name|'self'
op|'.'
name|'FIXTURE'
op|'.'
name|'DRIVER'
op|','
nl|'\n'
string|"'user'"
op|':'
name|'self'
op|'.'
name|'FIXTURE'
op|'.'
name|'USERNAME'
op|','
nl|'\n'
string|"'passwd'"
op|':'
name|'self'
op|'.'
name|'FIXTURE'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
string|"'database'"
op|':'
name|'self'
op|'.'
name|'FIXTURE'
op|'.'
name|'DBNAME'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'FIXTURE'
op|'.'
name|'DRIVER'
name|'and'
name|'not'
name|'utils'
op|'.'
name|'is_backend_avail'
op|'('
op|'**'
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|"'%s backend is not available.'"
op|'%'
name|'self'
op|'.'
name|'FIXTURE'
op|'.'
name|'DRIVER'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'skip'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'OpportunisticTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MySQLOpportunisticFixture
dedent|''
dedent|''
name|'class'
name|'MySQLOpportunisticFixture'
op|'('
name|'OpportunisticFixture'
op|')'
op|':'
newline|'\n'
DECL|variable|DRIVER
indent|'    '
name|'DRIVER'
op|'='
string|"'mysql'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PostgreSQLOpportunisticFixture
dedent|''
name|'class'
name|'PostgreSQLOpportunisticFixture'
op|'('
name|'OpportunisticFixture'
op|')'
op|':'
newline|'\n'
DECL|variable|DRIVER
indent|'    '
name|'DRIVER'
op|'='
string|"'postgresql'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MySQLOpportunisticTestCase
dedent|''
name|'class'
name|'MySQLOpportunisticTestCase'
op|'('
name|'OpportunisticTestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|FIXTURE
indent|'    '
name|'FIXTURE'
op|'='
name|'MySQLOpportunisticFixture'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PostgreSQLOpportunisticTestCase
dedent|''
name|'class'
name|'PostgreSQLOpportunisticTestCase'
op|'('
name|'OpportunisticTestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|FIXTURE
indent|'    '
name|'FIXTURE'
op|'='
name|'PostgreSQLOpportunisticFixture'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2010-2011 OpenStack Foundation.'
nl|'\n'
comment|'# Copyright 2012 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'changeset'
name|'import'
name|'UniqueConstraint'
newline|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Boolean'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'CheckConstraint'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Column'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'engine'
name|'import'
name|'reflection'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'ext'
op|'.'
name|'compiler'
name|'import'
name|'compiles'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'func'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Index'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Integer'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'MetaData'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'or_'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'expression'
name|'import'
name|'literal_column'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'expression'
name|'import'
name|'UpdateBase'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
name|'import'
name|'select'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'String'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Table'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'types'
name|'import'
name|'NullType'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'context'
name|'as'
name|'request_context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
op|','
name|'_LI'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_DBURL_REGEX
name|'_DBURL_REGEX'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"[^:]+://([^:]+):([^@]+)@.+"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sanitize_db_url
name|'def'
name|'sanitize_db_url'
op|'('
name|'url'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'match'
op|'='
name|'_DBURL_REGEX'
op|'.'
name|'match'
op|'('
name|'url'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s****:****%s'"
op|'%'
op|'('
name|'url'
op|'['
op|':'
name|'match'
op|'.'
name|'start'
op|'('
number|'1'
op|')'
op|']'
op|','
name|'url'
op|'['
name|'match'
op|'.'
name|'end'
op|'('
number|'2'
op|')'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'url'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidSortKey
dedent|''
name|'class'
name|'InvalidSortKey'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|variable|message
indent|'    '
name|'message'
op|'='
name|'_'
op|'('
string|'"Sort key supplied was not valid."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# copy from glance/db/sqlalchemy/api.py'
nl|'\n'
DECL|function|paginate_query
dedent|''
name|'def'
name|'paginate_query'
op|'('
name|'query'
op|','
name|'model'
op|','
name|'limit'
op|','
name|'sort_keys'
op|','
name|'marker'
op|'='
name|'None'
op|','
nl|'\n'
name|'sort_dir'
op|'='
name|'None'
op|','
name|'sort_dirs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a query with sorting / pagination criteria added.\n\n    Pagination works by requiring a unique sort_key, specified by sort_keys.\n    (If sort_keys is not unique, then we risk looping through values.)\n    We use the last row in the previous page as the \'marker\' for pagination.\n    So we must return values that follow the passed marker in the order.\n    With a single-valued sort_key, this would be easy: sort_key > X.\n    With a compound-values sort_key, (k1, k2, k3) we must do this to repeat\n    the lexicographical ordering:\n    (k1 > X1) or (k1 == X1 && k2 > X2) or (k1 == X1 && k2 == X2 && k3 > X3)\n\n    We also have to cope with different sort_directions.\n\n    Typically, the id of the last row is used as the client-facing pagination\n    marker, then the actual marker object must be fetched from the db and\n    passed in to us as marker.\n\n    :param query: the query object to which we should add paging/sorting\n    :param model: the ORM model class\n    :param limit: maximum number of items to return\n    :param sort_keys: array of attributes by which results should be sorted\n    :param marker: the last item of the previous page; we returns the next\n                    results after this value.\n    :param sort_dir: direction in which results should be sorted (asc, desc)\n    :param sort_dirs: per-column array of sort_dirs, corresponding to sort_keys\n\n    :rtype: sqlalchemy.orm.query.Query\n    :return: The query with sorting/pagination added.\n    """'
newline|'\n'
nl|'\n'
name|'if'
string|"'id'"
name|'not'
name|'in'
name|'sort_keys'
op|':'
newline|'\n'
comment|'# TODO(justinsb): If this ever gives a false-positive, check'
nl|'\n'
comment|'# the actual primary key, rather than assuming its id'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Id not in sort_keys; is sort_keys unique?'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
op|'('
name|'not'
op|'('
name|'sort_dir'
name|'and'
name|'sort_dirs'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Default the sort direction to ascending'
nl|'\n'
name|'if'
name|'sort_dirs'
name|'is'
name|'None'
name|'and'
name|'sort_dir'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'sort_dir'
op|'='
string|"'asc'"
newline|'\n'
nl|'\n'
comment|'# Ensure a per-column sort direction'
nl|'\n'
dedent|''
name|'if'
name|'sort_dirs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'sort_dirs'
op|'='
op|'['
name|'sort_dir'
name|'for'
name|'_sort_key'
name|'in'
name|'sort_keys'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
op|'('
name|'len'
op|'('
name|'sort_dirs'
op|')'
op|'=='
name|'len'
op|'('
name|'sort_keys'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add sorting'
nl|'\n'
name|'for'
name|'current_sort_key'
op|','
name|'current_sort_dir'
name|'in'
name|'zip'
op|'('
name|'sort_keys'
op|','
name|'sort_dirs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sort_dir_func'
op|'='
op|'{'
nl|'\n'
string|"'asc'"
op|':'
name|'sqlalchemy'
op|'.'
name|'asc'
op|','
nl|'\n'
string|"'desc'"
op|':'
name|'sqlalchemy'
op|'.'
name|'desc'
op|','
nl|'\n'
op|'}'
op|'['
name|'current_sort_dir'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"Unknown sort direction, "'
nl|'\n'
string|'"must be \'desc\' or \'asc\'"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sort_key_attr'
op|'='
name|'getattr'
op|'('
name|'model'
op|','
name|'current_sort_key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidSortKey'
op|'('
op|')'
newline|'\n'
dedent|''
name|'query'
op|'='
name|'query'
op|'.'
name|'order_by'
op|'('
name|'sort_dir_func'
op|'('
name|'sort_key_attr'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add pagination'
nl|'\n'
dedent|''
name|'if'
name|'marker'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'marker_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'sort_key'
name|'in'
name|'sort_keys'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'getattr'
op|'('
name|'marker'
op|','
name|'sort_key'
op|')'
newline|'\n'
name|'marker_values'
op|'.'
name|'append'
op|'('
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# Build up an array of sort criteria as in the docstring'
nl|'\n'
dedent|''
name|'criteria_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'sort_keys'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'crit_attrs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'j'
name|'in'
name|'range'
op|'('
name|'i'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'model_attr'
op|'='
name|'getattr'
op|'('
name|'model'
op|','
name|'sort_keys'
op|'['
name|'j'
op|']'
op|')'
newline|'\n'
name|'crit_attrs'
op|'.'
name|'append'
op|'('
op|'('
name|'model_attr'
op|'=='
name|'marker_values'
op|'['
name|'j'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'model_attr'
op|'='
name|'getattr'
op|'('
name|'model'
op|','
name|'sort_keys'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
name|'if'
name|'sort_dirs'
op|'['
name|'i'
op|']'
op|'=='
string|"'desc'"
op|':'
newline|'\n'
indent|'                '
name|'crit_attrs'
op|'.'
name|'append'
op|'('
op|'('
name|'model_attr'
op|'<'
name|'marker_values'
op|'['
name|'i'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'crit_attrs'
op|'.'
name|'append'
op|'('
op|'('
name|'model_attr'
op|'>'
name|'marker_values'
op|'['
name|'i'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'criteria'
op|'='
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'and_'
op|'('
op|'*'
name|'crit_attrs'
op|')'
newline|'\n'
name|'criteria_list'
op|'.'
name|'append'
op|'('
name|'criteria'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'f'
op|'='
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'or_'
op|'('
op|'*'
name|'criteria_list'
op|')'
newline|'\n'
name|'query'
op|'='
name|'query'
op|'.'
name|'filter'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'limit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'='
name|'query'
op|'.'
name|'limit'
op|'('
name|'limit'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'query'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_read_deleted_filter
dedent|''
name|'def'
name|'_read_deleted_filter'
op|'('
name|'query'
op|','
name|'db_model'
op|','
name|'read_deleted'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"'deleted'"
name|'not'
name|'in'
name|'db_model'
op|'.'
name|'__table__'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"There is no `deleted` column in `%s` table. "'
nl|'\n'
string|'"Project doesn\'t use soft-deleted feature."'
op|')'
nl|'\n'
op|'%'
name|'db_model'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'default_deleted_value'
op|'='
name|'db_model'
op|'.'
name|'__table__'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'.'
name|'default'
op|'.'
name|'arg'
newline|'\n'
name|'if'
name|'read_deleted'
op|'=='
string|"'no'"
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'='
name|'query'
op|'.'
name|'filter'
op|'('
name|'db_model'
op|'.'
name|'deleted'
op|'=='
name|'default_deleted_value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'read_deleted'
op|'=='
string|"'yes'"
op|':'
newline|'\n'
indent|'        '
name|'pass'
comment|'# omit the filter to include deleted and active'
newline|'\n'
dedent|''
name|'elif'
name|'read_deleted'
op|'=='
string|"'only'"
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'='
name|'query'
op|'.'
name|'filter'
op|'('
name|'db_model'
op|'.'
name|'deleted'
op|'!='
name|'default_deleted_value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"Unrecognized read_deleted value \'%s\'"'
op|')'
nl|'\n'
op|'%'
name|'read_deleted'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'query'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_project_filter
dedent|''
name|'def'
name|'_project_filter'
op|'('
name|'query'
op|','
name|'db_model'
op|','
name|'context'
op|','
name|'project_only'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'project_only'
name|'and'
string|"'project_id'"
name|'not'
name|'in'
name|'db_model'
op|'.'
name|'__table__'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"There is no `project_id` column in `%s` table."'
op|')'
nl|'\n'
op|'%'
name|'db_model'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'request_context'
op|'.'
name|'is_user_context'
op|'('
name|'context'
op|')'
name|'and'
name|'project_only'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'project_only'
op|'=='
string|"'allow_none'"
op|':'
newline|'\n'
indent|'            '
name|'is_none'
op|'='
name|'None'
newline|'\n'
name|'query'
op|'='
name|'query'
op|'.'
name|'filter'
op|'('
name|'or_'
op|'('
name|'db_model'
op|'.'
name|'project_id'
op|'=='
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'db_model'
op|'.'
name|'project_id'
op|'=='
name|'is_none'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'query'
op|'='
name|'query'
op|'.'
name|'filter'
op|'('
name|'db_model'
op|'.'
name|'project_id'
op|'=='
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'query'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|model_query
dedent|''
name|'def'
name|'model_query'
op|'('
name|'context'
op|','
name|'model'
op|','
name|'session'
op|','
name|'args'
op|'='
name|'None'
op|','
name|'project_only'
op|'='
name|'False'
op|','
nl|'\n'
name|'read_deleted'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Query helper that accounts for context\'s `read_deleted` field.\n\n    :param context:      context to query under\n\n    :param model:        Model to query. Must be a subclass of ModelBase.\n    :type model:         models.ModelBase\n\n    :param session:      The session to use.\n    :type session:       sqlalchemy.orm.session.Session\n\n    :param args:         Arguments to query. If None - model is used.\n    :type args:          tuple\n\n    :param project_only: If present and context is user-type, then restrict\n                         query to match the context\'s project_id. If set to\n                         \'allow_none\', restriction includes project_id = None.\n    :type project_only:  bool\n\n    :param read_deleted: If present, overrides context\'s read_deleted field.\n    :type read_deleted:   bool\n\n    Usage:\n        result = (utils.model_query(context, models.Instance, session=session)\n                       .filter_by(uuid=instance_uuid)\n                       .all())\n\n        query = utils.model_query(\n                    context, Node,\n                    session=session,\n                    args=(func.count(Node.id), func.sum(Node.ram))\n            ).filter_by(project_id=project_id)\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'read_deleted'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'context'
op|','
string|"'read_deleted'"
op|')'
op|':'
newline|'\n'
comment|'# NOTE(viktors): some projects use `read_deleted` attribute in'
nl|'\n'
comment|'# their contexts instead of `show_deleted`.'
nl|'\n'
indent|'            '
name|'read_deleted'
op|'='
name|'context'
op|'.'
name|'read_deleted'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'read_deleted'
op|'='
name|'context'
op|'.'
name|'show_deleted'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'issubclass'
op|'('
name|'model'
op|','
name|'models'
op|'.'
name|'ModelBase'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
name|'_'
op|'('
string|'"model should be a subclass of ModelBase"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'query'
op|'='
name|'session'
op|'.'
name|'query'
op|'('
name|'model'
op|')'
name|'if'
name|'not'
name|'args'
name|'else'
name|'session'
op|'.'
name|'query'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'query'
op|'='
name|'_read_deleted_filter'
op|'('
name|'query'
op|','
name|'model'
op|','
name|'read_deleted'
op|')'
newline|'\n'
name|'query'
op|'='
name|'_project_filter'
op|'('
name|'query'
op|','
name|'model'
op|','
name|'context'
op|','
name|'project_only'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'query'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_table
dedent|''
name|'def'
name|'get_table'
op|'('
name|'engine'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns an sqlalchemy table dynamically from db.\n\n    Needed because the models don\'t work for us in migrations\n    as models will be far out of sync with the current data.\n    """'
newline|'\n'
name|'metadata'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'return'
name|'Table'
op|'('
name|'name'
op|','
name|'metadata'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InsertFromSelect
dedent|''
name|'class'
name|'InsertFromSelect'
op|'('
name|'UpdateBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Form the base for `INSERT INTO table (SELECT ... )` statement."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table'
op|','
name|'select'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'table'
op|'='
name|'table'
newline|'\n'
name|'self'
op|'.'
name|'select'
op|'='
name|'select'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'compiles'
op|'('
name|'InsertFromSelect'
op|')'
newline|'\n'
DECL|function|visit_insert_from_select
name|'def'
name|'visit_insert_from_select'
op|'('
name|'element'
op|','
name|'compiler'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Form the `INSERT INTO table (SELECT ... )` statement."""'
newline|'\n'
name|'return'
string|'"INSERT INTO %s %s"'
op|'%'
op|'('
nl|'\n'
name|'compiler'
op|'.'
name|'process'
op|'('
name|'element'
op|'.'
name|'table'
op|','
name|'asfrom'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'compiler'
op|'.'
name|'process'
op|'('
name|'element'
op|'.'
name|'select'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ColumnError
dedent|''
name|'class'
name|'ColumnError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Error raised when no column or an invalid column is found."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_not_supported_column
dedent|''
name|'def'
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
name|'column_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'column'
op|'='
name|'col_name_col_instance'
op|'['
name|'column_name'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Please specify column %s in col_name_col_instance "'
nl|'\n'
string|'"param. It is required because column has unsupported "'
nl|'\n'
string|'"type by sqlite)."'
op|')'
newline|'\n'
name|'raise'
name|'ColumnError'
op|'('
name|'msg'
op|'%'
name|'column_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'column'
op|','
name|'Column'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"col_name_col_instance param has wrong type of "'
nl|'\n'
string|'"column instance for column %s It should be instance "'
nl|'\n'
string|'"of sqlalchemy.Column."'
op|')'
newline|'\n'
name|'raise'
name|'ColumnError'
op|'('
name|'msg'
op|'%'
name|'column_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'column'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|drop_unique_constraint
dedent|''
name|'def'
name|'drop_unique_constraint'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
op|'*'
name|'columns'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Drop unique constraint from table.\n\n    This method drops UC from table and works for mysql, postgresql and sqlite.\n    In mysql and postgresql we are able to use "alter table" construction.\n    Sqlalchemy doesn\'t support some sqlite column types and replaces their\n    type with NullType in metadata. We process these columns and replace\n    NullType with the correct column type.\n\n    :param migrate_engine: sqlalchemy engine\n    :param table_name:     name of table that contains uniq constraint.\n    :param uc_name:        name of uniq constraint that will be dropped.\n    :param columns:        columns that are in uniq constraint.\n    :param col_name_col_instance:   contains pair column_name=column_instance.\n                            column_instance is instance of Column. These params\n                            are required only for columns that have unsupported\n                            types by sqlite. For example BigInteger.\n    """'
newline|'\n'
nl|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
name|'t'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
indent|'        '
name|'override_cols'
op|'='
op|'['
nl|'\n'
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
name|'col'
op|'.'
name|'name'
op|')'
nl|'\n'
name|'for'
name|'col'
name|'in'
name|'t'
op|'.'
name|'columns'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'col'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'col'
name|'in'
name|'override_cols'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'columns'
op|'.'
name|'replace'
op|'('
name|'col'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'uc'
op|'='
name|'UniqueConstraint'
op|'('
op|'*'
name|'columns'
op|','
name|'table'
op|'='
name|'t'
op|','
name|'name'
op|'='
name|'uc_name'
op|')'
newline|'\n'
name|'uc'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|drop_old_duplicate_entries_from_table
dedent|''
name|'def'
name|'drop_old_duplicate_entries_from_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
name|'use_soft_delete'
op|','
op|'*'
name|'uc_column_names'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Drop all old rows having the same values for columns in uc_columns.\n\n    This method drop (or mark ad `deleted` if use_soft_delete is True) old\n    duplicate rows form table with name `table_name`.\n\n    :param migrate_engine:  Sqlalchemy engine\n    :param table_name:      Table with duplicates\n    :param use_soft_delete: If True - values will be marked as `deleted`,\n                            if False - values will be removed from table\n    :param uc_column_names: Unique constraint columns\n    """'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'columns_for_group_by'
op|'='
op|'['
name|'table'
op|'.'
name|'c'
op|'['
name|'name'
op|']'
name|'for'
name|'name'
name|'in'
name|'uc_column_names'
op|']'
newline|'\n'
nl|'\n'
name|'columns_for_select'
op|'='
op|'['
name|'func'
op|'.'
name|'max'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|']'
newline|'\n'
name|'columns_for_select'
op|'.'
name|'extend'
op|'('
name|'columns_for_group_by'
op|')'
newline|'\n'
nl|'\n'
name|'duplicated_rows_select'
op|'='
name|'select'
op|'('
name|'columns_for_select'
op|','
nl|'\n'
name|'group_by'
op|'='
name|'columns_for_group_by'
op|','
nl|'\n'
name|'having'
op|'='
name|'func'
op|'.'
name|'count'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'>'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'row'
name|'in'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'duplicated_rows_select'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(boris-42): Do not remove row that has the biggest ID.'
nl|'\n'
indent|'        '
name|'delete_condition'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'!='
name|'row'
op|'['
number|'0'
op|']'
newline|'\n'
name|'is_none'
op|'='
name|'None'
comment|'# workaround for pyflakes'
newline|'\n'
name|'delete_condition'
op|'&='
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted_at'
op|'=='
name|'is_none'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'uc_column_names'
op|':'
newline|'\n'
indent|'            '
name|'delete_condition'
op|'&='
name|'table'
op|'.'
name|'c'
op|'['
name|'name'
op|']'
op|'=='
name|'row'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'rows_to_delete_select'
op|'='
name|'select'
op|'('
op|'['
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|']'
op|')'
op|'.'
name|'where'
op|'('
name|'delete_condition'
op|')'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'rows_to_delete_select'
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Deleting duplicated row with id: %(id)s from table: "'
nl|'\n'
string|'"%(table)s"'
op|')'
op|'%'
name|'dict'
op|'('
name|'id'
op|'='
name|'row'
op|'['
number|'0'
op|']'
op|','
name|'table'
op|'='
name|'table_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'use_soft_delete'
op|':'
newline|'\n'
indent|'            '
name|'delete_statement'
op|'='
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'delete_condition'
op|')'
op|'.'
name|'values'
op|'('
op|'{'
nl|'\n'
string|"'deleted'"
op|':'
name|'literal_column'
op|'('
string|"'id'"
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'literal_column'
op|'('
string|"'updated_at'"
op|')'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'delete_statement'
op|'='
name|'table'
op|'.'
name|'delete'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'delete_condition'
op|')'
newline|'\n'
dedent|''
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'delete_statement'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_default_deleted_value
dedent|''
dedent|''
name|'def'
name|'_get_default_deleted_value'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
name|'Integer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
name|'String'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'""'
newline|'\n'
dedent|''
name|'raise'
name|'ColumnError'
op|'('
name|'_'
op|'('
string|'"Unsupported id columns type"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_restore_indexes_on_deleted_columns
dedent|''
name|'def'
name|'_restore_indexes_on_deleted_columns'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'indexes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'real_indexes'
op|'='
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
newline|'\n'
name|'existing_index_names'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'['
op|'('
name|'index'
op|'['
string|"'name'"
op|']'
op|','
name|'index'
op|'['
string|"'column_names'"
op|']'
op|')'
name|'for'
name|'index'
name|'in'
name|'real_indexes'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Restore indexes on `deleted` column'
nl|'\n'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'deleted'"
name|'not'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'index'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'existing_index_names'
op|':'
newline|'\n'
indent|'            '
name|'column_names'
op|'='
op|'['
name|'table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'existing_index_names'
op|'['
name|'name'
op|']'
op|']'
newline|'\n'
name|'old_index'
op|'='
name|'Index'
op|'('
name|'name'
op|','
op|'*'
name|'column_names'
op|','
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
newline|'\n'
name|'old_index'
op|'.'
name|'drop'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'column_names'
op|'='
op|'['
name|'table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'new_index'
op|'='
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
op|'*'
name|'column_names'
op|','
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
newline|'\n'
name|'new_index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|change_deleted_column_type_to_boolean
dedent|''
dedent|''
name|'def'
name|'change_deleted_column_type_to_boolean'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_change_deleted_column_type_to_boolean_sqlite'
op|'('
nl|'\n'
name|'migrate_engine'
op|','
name|'table_name'
op|','
op|'**'
name|'col_name_col_instance'
op|')'
newline|'\n'
dedent|''
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'indexes'
op|'='
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'old_deleted'
op|'='
name|'Column'
op|'('
string|"'old_deleted'"
op|','
name|'Boolean'
op|','
name|'default'
op|'='
name|'False'
op|')'
newline|'\n'
name|'old_deleted'
op|'.'
name|'create'
op|'('
name|'table'
op|','
name|'populate_default'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'values'
op|'('
name|'old_deleted'
op|'='
name|'True'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'old_deleted'
op|'.'
name|'alter'
op|'('
name|'name'
op|'='
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
name|'_restore_indexes_on_deleted_columns'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'indexes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_change_deleted_column_type_to_boolean_sqlite
dedent|''
name|'def'
name|'_change_deleted_column_type_to_boolean_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'column_copy'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'column'
op|'.'
name|'name'
op|'!='
string|'"deleted"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'column'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
nl|'\n'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'column_copy'
op|'='
name|'Column'
op|'('
string|"'deleted'"
op|','
name|'Boolean'
op|','
name|'default'
op|'='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'columns'
op|'.'
name|'append'
op|'('
name|'column_copy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'constraints'
op|'='
op|'['
name|'constraint'
op|'.'
name|'copy'
op|'('
op|')'
name|'for'
name|'constraint'
name|'in'
name|'table'
op|'.'
name|'constraints'
op|']'
newline|'\n'
nl|'\n'
name|'meta'
op|'='
name|'table'
op|'.'
name|'metadata'
newline|'\n'
name|'new_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|'+'
string|'"__tmp__"'
op|','
name|'meta'
op|','
nl|'\n'
op|'*'
op|'('
name|'columns'
op|'+'
name|'constraints'
op|')'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'indexes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'column_names'
op|'='
op|'['
name|'new_table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'indexes'
op|'.'
name|'append'
op|'('
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
op|'*'
name|'column_names'
op|','
nl|'\n'
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'c_select'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'c'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'c'
op|'.'
name|'name'
op|'!='
string|'"deleted"'
op|':'
newline|'\n'
indent|'            '
name|'c_select'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'c_select'
op|'.'
name|'append'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ins'
op|'='
name|'InsertFromSelect'
op|'('
name|'new_table'
op|','
name|'select'
op|'('
name|'c_select'
op|')'
op|')'
newline|'\n'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'ins'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
op|'['
name|'index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|']'
newline|'\n'
nl|'\n'
name|'new_table'
op|'.'
name|'rename'
op|'('
name|'table_name'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'values'
op|'('
name|'deleted'
op|'='
name|'True'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|change_deleted_column_type_to_id_type
dedent|''
name|'def'
name|'change_deleted_column_type_to_id_type'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_change_deleted_column_type_to_id_type_sqlite'
op|'('
nl|'\n'
name|'migrate_engine'
op|','
name|'table_name'
op|','
op|'**'
name|'col_name_col_instance'
op|')'
newline|'\n'
dedent|''
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'indexes'
op|'='
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'new_deleted'
op|'='
name|'Column'
op|'('
string|"'new_deleted'"
op|','
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
nl|'\n'
name|'default'
op|'='
name|'_get_default_deleted_value'
op|'('
name|'table'
op|')'
op|')'
newline|'\n'
name|'new_deleted'
op|'.'
name|'create'
op|'('
name|'table'
op|','
name|'populate_default'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'deleted'
op|'='
name|'True'
comment|'# workaround for pyflakes'
newline|'\n'
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'deleted'
op|')'
op|'.'
name|'values'
op|'('
name|'new_deleted'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'new_deleted'
op|'.'
name|'alter'
op|'('
name|'name'
op|'='
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
name|'_restore_indexes_on_deleted_columns'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'indexes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_change_deleted_column_type_to_id_type_sqlite
dedent|''
name|'def'
name|'_change_deleted_column_type_to_id_type_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(boris-42): sqlaclhemy-migrate can't drop column with check"
nl|'\n'
comment|'#                 constraints in sqlite DB and our `deleted` column has'
nl|'\n'
comment|'#                 2 check constraints. So there is only one way to remove'
nl|'\n'
comment|'#                 these constraints:'
nl|'\n'
comment|'#                 1) Create new table with the same columns, constraints'
nl|'\n'
comment|'#                 and indexes. (except deleted column).'
nl|'\n'
comment|'#                 2) Copy all data from old to new table.'
nl|'\n'
comment|'#                 3) Drop old table.'
nl|'\n'
comment|'#                 4) Rename new table to old table name.'
nl|'\n'
indent|'    '
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'migrate_engine'
op|')'
newline|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'default_deleted_value'
op|'='
name|'_get_default_deleted_value'
op|'('
name|'table'
op|')'
newline|'\n'
nl|'\n'
name|'columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'column_copy'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'column'
op|'.'
name|'name'
op|'!='
string|'"deleted"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'column'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
nl|'\n'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'column_copy'
op|'='
name|'Column'
op|'('
string|"'deleted'"
op|','
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
nl|'\n'
name|'default'
op|'='
name|'default_deleted_value'
op|')'
newline|'\n'
dedent|''
name|'columns'
op|'.'
name|'append'
op|'('
name|'column_copy'
op|')'
newline|'\n'
nl|'\n'
DECL|function|is_deleted_column_constraint
dedent|''
name|'def'
name|'is_deleted_column_constraint'
op|'('
name|'constraint'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(boris-42): There is no other way to check is CheckConstraint'
nl|'\n'
comment|'#                 associated with deleted column.'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'constraint'
op|','
name|'CheckConstraint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'sqltext'
op|'='
name|'str'
op|'('
name|'constraint'
op|'.'
name|'sqltext'
op|')'
newline|'\n'
name|'return'
op|'('
name|'sqltext'
op|'.'
name|'endswith'
op|'('
string|'"deleted in (0, 1)"'
op|')'
name|'or'
nl|'\n'
name|'sqltext'
op|'.'
name|'endswith'
op|'('
string|'"deleted IN (:deleted_1, :deleted_2)"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'constraints'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'constraint'
name|'in'
name|'table'
op|'.'
name|'constraints'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'is_deleted_column_constraint'
op|'('
name|'constraint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'constraints'
op|'.'
name|'append'
op|'('
name|'constraint'
op|'.'
name|'copy'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'new_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|'+'
string|'"__tmp__"'
op|','
name|'meta'
op|','
nl|'\n'
op|'*'
op|'('
name|'columns'
op|'+'
name|'constraints'
op|')'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'indexes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'column_names'
op|'='
op|'['
name|'new_table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'indexes'
op|'.'
name|'append'
op|'('
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
op|'*'
name|'column_names'
op|','
nl|'\n'
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ins'
op|'='
name|'InsertFromSelect'
op|'('
name|'new_table'
op|','
name|'table'
op|'.'
name|'select'
op|'('
op|')'
op|')'
newline|'\n'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'ins'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
op|'['
name|'index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|']'
newline|'\n'
nl|'\n'
name|'new_table'
op|'.'
name|'rename'
op|'('
name|'table_name'
op|')'
newline|'\n'
name|'deleted'
op|'='
name|'True'
comment|'# workaround for pyflakes'
newline|'\n'
name|'new_table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'deleted'
op|')'
op|'.'
name|'values'
op|'('
name|'deleted'
op|'='
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Fix value of deleted column: False -> "" or 0.'
nl|'\n'
name|'deleted'
op|'='
name|'False'
comment|'# workaround for pyflakes'
newline|'\n'
name|'new_table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'deleted'
op|')'
op|'.'
name|'values'
op|'('
name|'deleted'
op|'='
name|'default_deleted_value'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_connect_string
dedent|''
name|'def'
name|'get_connect_string'
op|'('
name|'backend'
op|','
name|'database'
op|','
name|'user'
op|'='
name|'None'
op|','
name|'passwd'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get database connection\n\n    Try to get a connection with a very specific set of values, if we get\n    these then we\'ll run the tests, otherwise they are skipped\n    """'
newline|'\n'
name|'args'
op|'='
op|'{'
string|"'backend'"
op|':'
name|'backend'
op|','
nl|'\n'
string|"'user'"
op|':'
name|'user'
op|','
nl|'\n'
string|"'passwd'"
op|':'
name|'passwd'
op|','
nl|'\n'
string|"'database'"
op|':'
name|'database'
op|'}'
newline|'\n'
name|'if'
name|'backend'
op|'=='
string|"'sqlite'"
op|':'
newline|'\n'
indent|'        '
name|'template'
op|'='
string|"'%(backend)s:///%(database)s'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'template'
op|'='
string|'"%(backend)s://%(user)s:%(passwd)s@localhost/%(database)s"'
newline|'\n'
dedent|''
name|'return'
name|'template'
op|'%'
name|'args'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_backend_avail
dedent|''
name|'def'
name|'is_backend_avail'
op|'('
name|'backend'
op|','
name|'database'
op|','
name|'user'
op|'='
name|'None'
op|','
name|'passwd'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'connect_uri'
op|'='
name|'get_connect_string'
op|'('
name|'backend'
op|'='
name|'backend'
op|','
nl|'\n'
name|'database'
op|'='
name|'database'
op|','
nl|'\n'
name|'user'
op|'='
name|'user'
op|','
nl|'\n'
name|'passwd'
op|'='
name|'passwd'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_uri'
op|')'
newline|'\n'
name|'connection'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# intentionally catch all to handle exceptions even if we don't"
nl|'\n'
comment|'# have any backend code loaded.'
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'dispose'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_db_connection_info
dedent|''
dedent|''
name|'def'
name|'get_db_connection_info'
op|'('
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'database'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'loc_pieces'
op|'='
name|'conn_pieces'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
newline|'\n'
name|'host'
op|'='
name|'loc_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'auth_pieces'
op|'='
name|'loc_pieces'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'user'
op|'='
name|'auth_pieces'
op|'['
number|'0'
op|']'
newline|'\n'
name|'password'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'auth_pieces'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'password'
op|'='
name|'auth_pieces'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

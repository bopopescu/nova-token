begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2010-2011 OpenStack Foundation.'
nl|'\n'
comment|'# Copyright 2012 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Implementation of paginate query."""'
newline|'\n'
nl|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidSortKey
name|'class'
name|'InvalidSortKey'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|variable|message
indent|'    '
name|'message'
op|'='
name|'_'
op|'('
string|'"Sort key supplied was not valid."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# copy from glance/db/sqlalchemy/api.py'
nl|'\n'
DECL|function|paginate_query
dedent|''
name|'def'
name|'paginate_query'
op|'('
name|'query'
op|','
name|'model'
op|','
name|'limit'
op|','
name|'sort_keys'
op|','
name|'marker'
op|'='
name|'None'
op|','
nl|'\n'
name|'sort_dir'
op|'='
name|'None'
op|','
name|'sort_dirs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a query with sorting / pagination criteria added.\n\n    Pagination works by requiring a unique sort_key, specified by sort_keys.\n    (If sort_keys is not unique, then we risk looping through values.)\n    We use the last row in the previous page as the \'marker\' for pagination.\n    So we must return values that follow the passed marker in the order.\n    With a single-valued sort_key, this would be easy: sort_key > X.\n    With a compound-values sort_key, (k1, k2, k3) we must do this to repeat\n    the lexicographical ordering:\n    (k1 > X1) or (k1 == X1 && k2 > X2) or (k1 == X1 && k2 == X2 && k3 > X3)\n\n    We also have to cope with different sort_directions.\n\n    Typically, the id of the last row is used as the client-facing pagination\n    marker, then the actual marker object must be fetched from the db and\n    passed in to us as marker.\n\n    :param query: the query object to which we should add paging/sorting\n    :param model: the ORM model class\n    :param limit: maximum number of items to return\n    :param sort_keys: array of attributes by which results should be sorted\n    :param marker: the last item of the previous page; we returns the next\n                    results after this value.\n    :param sort_dir: direction in which results should be sorted (asc, desc)\n    :param sort_dirs: per-column array of sort_dirs, corresponding to sort_keys\n\n    :rtype: sqlalchemy.orm.query.Query\n    :return: The query with sorting/pagination added.\n    """'
newline|'\n'
nl|'\n'
name|'if'
string|"'id'"
name|'not'
name|'in'
name|'sort_keys'
op|':'
newline|'\n'
comment|'# TODO(justinsb): If this ever gives a false-positive, check'
nl|'\n'
comment|'# the actual primary key, rather than assuming its id'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Id not in sort_keys; is sort_keys unique?'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
op|'('
name|'not'
op|'('
name|'sort_dir'
name|'and'
name|'sort_dirs'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Default the sort direction to ascending'
nl|'\n'
name|'if'
name|'sort_dirs'
name|'is'
name|'None'
name|'and'
name|'sort_dir'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'sort_dir'
op|'='
string|"'asc'"
newline|'\n'
nl|'\n'
comment|'# Ensure a per-column sort direction'
nl|'\n'
dedent|''
name|'if'
name|'sort_dirs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'sort_dirs'
op|'='
op|'['
name|'sort_dir'
name|'for'
name|'_sort_key'
name|'in'
name|'sort_keys'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
op|'('
name|'len'
op|'('
name|'sort_dirs'
op|')'
op|'=='
name|'len'
op|'('
name|'sort_keys'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add sorting'
nl|'\n'
name|'for'
name|'current_sort_key'
op|','
name|'current_sort_dir'
name|'in'
name|'zip'
op|'('
name|'sort_keys'
op|','
name|'sort_dirs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sort_dir_func'
op|'='
op|'{'
nl|'\n'
string|"'asc'"
op|':'
name|'sqlalchemy'
op|'.'
name|'asc'
op|','
nl|'\n'
string|"'desc'"
op|':'
name|'sqlalchemy'
op|'.'
name|'desc'
op|','
nl|'\n'
op|'}'
op|'['
name|'current_sort_dir'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sort_key_attr'
op|'='
name|'getattr'
op|'('
name|'model'
op|','
name|'current_sort_key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidSortKey'
op|'('
op|')'
newline|'\n'
dedent|''
name|'query'
op|'='
name|'query'
op|'.'
name|'order_by'
op|'('
name|'sort_dir_func'
op|'('
name|'sort_key_attr'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add pagination'
nl|'\n'
dedent|''
name|'if'
name|'marker'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'marker_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'sort_key'
name|'in'
name|'sort_keys'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'='
name|'getattr'
op|'('
name|'marker'
op|','
name|'sort_key'
op|')'
newline|'\n'
name|'marker_values'
op|'.'
name|'append'
op|'('
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# Build up an array of sort criteria as in the docstring'
nl|'\n'
dedent|''
name|'criteria_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'sort_keys'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'crit_attrs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'j'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'model_attr'
op|'='
name|'getattr'
op|'('
name|'model'
op|','
name|'sort_keys'
op|'['
name|'j'
op|']'
op|')'
newline|'\n'
name|'crit_attrs'
op|'.'
name|'append'
op|'('
op|'('
name|'model_attr'
op|'=='
name|'marker_values'
op|'['
name|'j'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'model_attr'
op|'='
name|'getattr'
op|'('
name|'model'
op|','
name|'sort_keys'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
name|'if'
name|'sort_dirs'
op|'['
name|'i'
op|']'
op|'=='
string|"'desc'"
op|':'
newline|'\n'
indent|'                '
name|'crit_attrs'
op|'.'
name|'append'
op|'('
op|'('
name|'model_attr'
op|'<'
name|'marker_values'
op|'['
name|'i'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'sort_dirs'
op|'['
name|'i'
op|']'
op|'=='
string|"'asc'"
op|':'
newline|'\n'
indent|'                '
name|'crit_attrs'
op|'.'
name|'append'
op|'('
op|'('
name|'model_attr'
op|'>'
name|'marker_values'
op|'['
name|'i'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'"Unknown sort direction, "'
nl|'\n'
string|'"must be \'desc\' or \'asc\'"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'criteria'
op|'='
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'and_'
op|'('
op|'*'
name|'crit_attrs'
op|')'
newline|'\n'
name|'criteria_list'
op|'.'
name|'append'
op|'('
name|'criteria'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'f'
op|'='
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'or_'
op|'('
op|'*'
name|'criteria_list'
op|')'
newline|'\n'
name|'query'
op|'='
name|'query'
op|'.'
name|'filter'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'limit'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'query'
op|'='
name|'query'
op|'.'
name|'limit'
op|'('
name|'limit'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'query'
newline|'\n'
dedent|''
endmarker|''
end_unit

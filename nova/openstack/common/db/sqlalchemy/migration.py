begin_unit
comment|'# coding: utf-8'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Base on code in migrate/changeset/databases/sqlite.py which is under'
nl|'\n'
comment|'# the following license:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The MIT License'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2009 Evan Rosson, Jan Dittberner, Domen Ko\xc5\xbear'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a copy'
nl|'\n'
comment|'# of this software and associated documentation files (the "Software"), to deal'
nl|'\n'
comment|'# in the Software without restriction, including without limitation the rights'
nl|'\n'
comment|'# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell'
nl|'\n'
comment|'# copies of the Software, and to permit persons to whom the Software is'
nl|'\n'
comment|'# furnished to do so, subject to the following conditions:'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included in'
nl|'\n'
comment|'# all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR'
nl|'\n'
comment|'# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,'
nl|'\n'
comment|'# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE'
nl|'\n'
comment|'# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER'
nl|'\n'
comment|'# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN'
nl|'\n'
comment|'# THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'changeset'
name|'import'
name|'ansisql'
newline|'\n'
name|'from'
name|'migrate'
op|'.'
name|'changeset'
op|'.'
name|'databases'
name|'import'
name|'sqlite'
newline|'\n'
name|'from'
name|'migrate'
name|'import'
name|'exceptions'
name|'as'
name|'versioning_exceptions'
newline|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
name|'import'
name|'api'
name|'as'
name|'versioning_api'
newline|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
op|'.'
name|'repository'
name|'import'
name|'Repository'
newline|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'schema'
name|'import'
name|'UniqueConstraint'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_unique_constraints
name|'def'
name|'_get_unique_constraints'
op|'('
name|'self'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieve information about existing unique constraints of the table\n\n    This feature is needed for _recreate_table() to work properly.\n    Unfortunately, it\'s not available in sqlalchemy 0.7.x/0.8.x.\n\n    """'
newline|'\n'
nl|'\n'
name|'data'
op|'='
name|'table'
op|'.'
name|'metadata'
op|'.'
name|'bind'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|'"""SELECT sql\n           FROM sqlite_master\n           WHERE\n               type=\'table\' AND\n               name=:table_name"""'
op|','
nl|'\n'
name|'table_name'
op|'='
name|'table'
op|'.'
name|'name'
nl|'\n'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'UNIQUE_PATTERN'
op|'='
string|'"CONSTRAINT (\\w+) UNIQUE \\(([^\\)]+)\\)"'
newline|'\n'
name|'return'
op|'['
nl|'\n'
name|'UniqueConstraint'
op|'('
nl|'\n'
op|'*'
op|'['
name|'getattr'
op|'('
name|'table'
op|'.'
name|'columns'
op|','
name|'c'
op|'.'
name|'strip'
op|'('
string|'\' "\''
op|')'
op|')'
name|'for'
name|'c'
name|'in'
name|'cols'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|']'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
nl|'\n'
op|')'
nl|'\n'
name|'for'
name|'name'
op|','
name|'cols'
name|'in'
name|'re'
op|'.'
name|'findall'
op|'('
name|'UNIQUE_PATTERN'
op|','
name|'data'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_recreate_table
dedent|''
name|'def'
name|'_recreate_table'
op|'('
name|'self'
op|','
name|'table'
op|','
name|'column'
op|'='
name|'None'
op|','
name|'delta'
op|'='
name|'None'
op|','
name|'omit_uniques'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Recreate the table properly\n\n    Unlike the corresponding original method of sqlalchemy-migrate this one\n    doesn\'t drop existing unique constraints when creating a new one.\n\n    """'
newline|'\n'
nl|'\n'
name|'table_name'
op|'='
name|'self'
op|'.'
name|'preparer'
op|'.'
name|'format_table'
op|'('
name|'table'
op|')'
newline|'\n'
nl|'\n'
comment|'# we remove all indexes so as not to have'
nl|'\n'
comment|'# problems during copy and re-create'
nl|'\n'
name|'for'
name|'index'
name|'in'
name|'table'
op|'.'
name|'indexes'
op|':'
newline|'\n'
indent|'        '
name|'index'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# reflect existing unique constraints'
nl|'\n'
dedent|''
name|'for'
name|'uc'
name|'in'
name|'self'
op|'.'
name|'_get_unique_constraints'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'.'
name|'append_constraint'
op|'('
name|'uc'
op|')'
newline|'\n'
comment|'# omit given unique constraints when creating a new table if required'
nl|'\n'
dedent|''
name|'table'
op|'.'
name|'constraints'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
name|'cons'
name|'for'
name|'cons'
name|'in'
name|'table'
op|'.'
name|'constraints'
nl|'\n'
name|'if'
name|'omit_uniques'
name|'is'
name|'None'
name|'or'
name|'cons'
op|'.'
name|'name'
name|'not'
name|'in'
name|'omit_uniques'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'append'
op|'('
string|"'ALTER TABLE %s RENAME TO migration_tmp'"
op|'%'
name|'table_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'insertion_string'
op|'='
name|'self'
op|'.'
name|'_modify_table'
op|'('
name|'table'
op|','
name|'column'
op|','
name|'delta'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'create'
op|'('
name|'bind'
op|'='
name|'self'
op|'.'
name|'connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'append'
op|'('
name|'insertion_string'
op|'%'
op|'{'
string|"'table_name'"
op|':'
name|'table_name'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'append'
op|'('
string|"'DROP TABLE migration_tmp'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_visit_migrate_unique_constraint
dedent|''
name|'def'
name|'_visit_migrate_unique_constraint'
op|'('
name|'self'
op|','
op|'*'
name|'p'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Drop the given unique constraint\n\n    The corresponding original method of sqlalchemy-migrate just\n    raises NotImplemented error\n\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recreate_table'
op|'('
name|'p'
op|'['
number|'0'
op|']'
op|'.'
name|'table'
op|','
name|'omit_uniques'
op|'='
op|'['
name|'p'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|patch_migrate
dedent|''
name|'def'
name|'patch_migrate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A workaround for SQLite\'s inability to alter things\n\n    SQLite abilities to alter tables are very limited (please read\n    http://www.sqlite.org/lang_altertable.html for more details).\n    E. g. one can\'t drop a column or a constraint in SQLite. The\n    workaround for this is to recreate the original table omitting\n    the corresponding constraint (or column).\n\n    sqlalchemy-migrate library has recreate_table() method that\n    implements this workaround, but it does it wrong:\n\n        - information about unique constraints of a table\n          is not retrieved. So if you have a table with one\n          unique constraint and a migration adding another one\n          you will end up with a table that has only the\n          latter unique constraint, and the former will be lost\n\n        - dropping of unique constraints is not supported at all\n\n    The proper way to fix this is to provide a pull-request to\n    sqlalchemy-migrate, but the project seems to be dead. So we\n    can go on with monkey-patching of the lib at least for now.\n\n    """'
newline|'\n'
nl|'\n'
comment|"# this patch is needed to ensure that recreate_table() doesn't drop"
nl|'\n'
comment|'# existing unique constraints of the table when creating a new one'
nl|'\n'
name|'helper_cls'
op|'='
name|'sqlite'
op|'.'
name|'SQLiteHelper'
newline|'\n'
name|'helper_cls'
op|'.'
name|'recreate_table'
op|'='
name|'_recreate_table'
newline|'\n'
name|'helper_cls'
op|'.'
name|'_get_unique_constraints'
op|'='
name|'_get_unique_constraints'
newline|'\n'
nl|'\n'
comment|'# this patch is needed to be able to drop existing unique constraints'
nl|'\n'
name|'constraint_cls'
op|'='
name|'sqlite'
op|'.'
name|'SQLiteConstraintDropper'
newline|'\n'
name|'constraint_cls'
op|'.'
name|'visit_migrate_unique_constraint'
op|'='
name|'_visit_migrate_unique_constraint'
newline|'\n'
name|'constraint_cls'
op|'.'
name|'__bases__'
op|'='
op|'('
name|'ansisql'
op|'.'
name|'ANSIColumnDropper'
op|','
nl|'\n'
name|'sqlite'
op|'.'
name|'SQLiteConstraintGenerator'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_sync
dedent|''
name|'def'
name|'db_sync'
op|'('
name|'engine'
op|','
name|'abs_path'
op|','
name|'version'
op|'='
name|'None'
op|','
name|'init_version'
op|'='
number|'0'
op|','
name|'sanity_check'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Upgrade or downgrade a database.\n\n    Function runs the upgrade() or downgrade() functions in change scripts.\n\n    :param engine:       SQLAlchemy engine instance for a given database\n    :param abs_path:     Absolute path to migrate repository.\n    :param version:      Database will upgrade/downgrade until this version.\n                         If None - database will update to the latest\n                         available version.\n    :param init_version: Initial database version\n    :param sanity_check: Require schema sanity checking for all tables\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'version'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
name|'int'
op|'('
name|'version'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'DbMigrationError'
op|'('
nl|'\n'
name|'message'
op|'='
name|'_'
op|'('
string|'"version should be an integer"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'current_version'
op|'='
name|'db_version'
op|'('
name|'engine'
op|','
name|'abs_path'
op|','
name|'init_version'
op|')'
newline|'\n'
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'abs_path'
op|')'
newline|'\n'
name|'if'
name|'sanity_check'
op|':'
newline|'\n'
indent|'        '
name|'_db_schema_sanity_check'
op|'('
name|'engine'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'version'
name|'is'
name|'None'
name|'or'
name|'version'
op|'>'
name|'current_version'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'versioning_api'
op|'.'
name|'upgrade'
op|'('
name|'engine'
op|','
name|'repository'
op|','
name|'version'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'versioning_api'
op|'.'
name|'downgrade'
op|'('
name|'engine'
op|','
name|'repository'
op|','
nl|'\n'
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_db_schema_sanity_check
dedent|''
dedent|''
name|'def'
name|'_db_schema_sanity_check'
op|'('
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure all database tables were created with required parameters.\n\n    :param engine:  SQLAlchemy engine instance for a given database\n\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'engine'
op|'.'
name|'name'
op|'=='
string|"'mysql'"
op|':'
newline|'\n'
indent|'        '
name|'onlyutf8_sql'
op|'='
op|'('
string|"'SELECT TABLE_NAME,TABLE_COLLATION '"
nl|'\n'
string|"'from information_schema.TABLES '"
nl|'\n'
string|"'where TABLE_SCHEMA=%s and '"
nl|'\n'
string|'\'TABLE_COLLATION NOT LIKE "%%utf8%%"\''
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(morganfainberg): exclude the sqlalchemy-migrate and alembic'
nl|'\n'
comment|'# versioning tables from the tables we need to verify utf8 status on.'
nl|'\n'
comment|'# Non-standard table names are not supported.'
nl|'\n'
name|'EXCLUDED_TABLES'
op|'='
op|'['
string|"'migrate_version'"
op|','
string|"'alembic_version'"
op|']'
newline|'\n'
nl|'\n'
name|'table_names'
op|'='
op|'['
name|'res'
op|'['
number|'0'
op|']'
name|'for'
name|'res'
name|'in'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'onlyutf8_sql'
op|','
name|'engine'
op|'.'
name|'url'
op|'.'
name|'database'
op|')'
name|'if'
nl|'\n'
name|'res'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
name|'EXCLUDED_TABLES'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'table_names'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|'\'Tables "%s" have non utf8 collation, \''
nl|'\n'
string|"'please make sure all tables are CHARSET=utf8'"
nl|'\n'
op|')'
op|'%'
string|"','"
op|'.'
name|'join'
op|'('
name|'table_names'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_version
dedent|''
dedent|''
dedent|''
name|'def'
name|'db_version'
op|'('
name|'engine'
op|','
name|'abs_path'
op|','
name|'init_version'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Show the current version of the repository.\n\n    :param engine:  SQLAlchemy engine instance for a given database\n    :param abs_path: Absolute path to migrate repository\n    :param version:  Initial database version\n    """'
newline|'\n'
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'abs_path'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'versioning_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
name|'repository'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'versioning_exceptions'
op|'.'
name|'DatabaseNotControlledError'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'reflect'
op|'('
name|'bind'
op|'='
name|'engine'
op|')'
newline|'\n'
name|'tables'
op|'='
name|'meta'
op|'.'
name|'tables'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'tables'
op|')'
op|'=='
number|'0'
name|'or'
string|"'alembic_version'"
name|'in'
name|'tables'
op|':'
newline|'\n'
indent|'            '
name|'db_version_control'
op|'('
name|'engine'
op|','
name|'abs_path'
op|','
name|'version'
op|'='
name|'init_version'
op|')'
newline|'\n'
name|'return'
name|'versioning_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
name|'repository'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'DbMigrationError'
op|'('
nl|'\n'
name|'message'
op|'='
name|'_'
op|'('
nl|'\n'
string|'"The database is not under version control, but has "'
nl|'\n'
string|'"tables. Please stamp the current version of the schema "'
nl|'\n'
string|'"manually."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_version_control
dedent|''
dedent|''
dedent|''
name|'def'
name|'db_version_control'
op|'('
name|'engine'
op|','
name|'abs_path'
op|','
name|'version'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mark a database as under this repository\'s version control.\n\n    Once a database is under version control, schema changes should\n    only be done via change scripts in this repository.\n\n    :param engine:  SQLAlchemy engine instance for a given database\n    :param abs_path: Absolute path to migrate repository\n    :param version:  Initial database version\n    """'
newline|'\n'
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'abs_path'
op|')'
newline|'\n'
name|'versioning_api'
op|'.'
name|'version_control'
op|'('
name|'engine'
op|','
name|'repository'
op|','
name|'version'
op|')'
newline|'\n'
name|'return'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_migrate_repo
dedent|''
name|'def'
name|'_find_migrate_repo'
op|'('
name|'abs_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the project\'s change script repository\n\n    :param abs_path: Absolute path to migrate repository\n    """'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'abs_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'DbMigrationError'
op|'('
string|'"Path %s not found"'
op|'%'
name|'abs_path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'Repository'
op|'('
name|'abs_path'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

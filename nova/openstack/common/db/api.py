begin_unit
comment|'# Copyright (c) 2013 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Multiple DB API backend support.\n\nA DB backend module should implement a method named \'get_backend\' which\ntakes no arguments.  The method can return any object that implements DB\nAPI methods.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_for_db_retry
name|'def'
name|'safe_for_db_retry'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Enable db-retry for decorated function, if config option enabled."""'
newline|'\n'
name|'f'
op|'.'
name|'__dict__'
op|'['
string|"'enable_retry'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|wrap_db_retry
dedent|''
name|'class'
name|'wrap_db_retry'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retry db.api methods, if DBConnectionError() raised\n\n    Retry decorated db.api methods. If we enabled `use_db_reconnect`\n    in config, this decorator will be applied to all db.api functions,\n    marked with @safe_for_db_retry decorator.\n    Decorator catchs DBConnectionError() and retries function in a\n    loop until it succeeds, or until maximum retries count will be reached.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'retry_interval'
op|','
name|'max_retries'
op|','
name|'inc_retry_interval'
op|','
nl|'\n'
name|'max_retry_interval'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'wrap_db_retry'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'retry_interval'
op|'='
name|'retry_interval'
newline|'\n'
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'max_retries'
newline|'\n'
name|'self'
op|'.'
name|'inc_retry_interval'
op|'='
name|'inc_retry_interval'
newline|'\n'
name|'self'
op|'.'
name|'max_retry_interval'
op|'='
name|'max_retry_interval'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'next_interval'
op|'='
name|'self'
op|'.'
name|'retry_interval'
newline|'\n'
name|'remaining'
op|'='
name|'self'
op|'.'
name|'max_retries'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'DBConnectionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'remaining'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'DB exceeded retry limit.'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DBError'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'remaining'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                        '
name|'remaining'
op|'-='
number|'1'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|"'DB connection error.'"
op|')'
op|')'
newline|'\n'
comment|'# NOTE(vsergeyev): We are using patched time module, so'
nl|'\n'
comment|'#                  this effectively yields the execution'
nl|'\n'
comment|'#                  context to another green thread.'
nl|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
name|'next_interval'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'inc_retry_interval'
op|':'
newline|'\n'
indent|'                        '
name|'next_interval'
op|'='
name|'min'
op|'('
nl|'\n'
name|'next_interval'
op|'*'
number|'2'
op|','
nl|'\n'
name|'self'
op|'.'
name|'max_retry_interval'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DBAPI
dedent|''
dedent|''
name|'class'
name|'DBAPI'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'backend_name'
op|','
name|'backend_mapping'
op|'='
name|'None'
op|','
name|'lazy'
op|'='
name|'False'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize the chosen DB API backend.\n\n        :param backend_name: name of the backend to load\n        :type backend_name: str\n\n        :param backend_mapping: backend name -> module/class to load mapping\n        :type backend_mapping: dict\n\n        :param lazy: load the DB backend lazily on the first DB API method call\n        :type lazy: bool\n\n        Keyword arguments:\n\n        :keyword use_db_reconnect: retry DB transactions on disconnect or not\n        :type use_db_reconnect: bool\n\n        :keyword retry_interval: seconds between transaction retries\n        :type retry_interval: int\n\n        :keyword inc_retry_interval: increase retry interval or not\n        :type inc_retry_interval: bool\n\n        :keyword max_retry_interval: max interval value between retries\n        :type max_retry_interval: int\n\n        :keyword max_retries: max number of retries before an error is raised\n        :type max_retries: int\n\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_backend'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_backend_name'
op|'='
name|'backend_name'
newline|'\n'
name|'self'
op|'.'
name|'_backend_mapping'
op|'='
name|'backend_mapping'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_lock'
op|'='
name|'threading'
op|'.'
name|'Lock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'lazy'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_backend'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'use_db_reconnect'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'use_db_reconnect'"
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'retry_interval'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'retry_interval'"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inc_retry_interval'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'inc_retry_interval'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_retry_interval'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'max_retry_interval'"
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'max_retries'"
op|','
number|'20'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_backend
dedent|''
name|'def'
name|'_load_backend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'self'
op|'.'
name|'_lock'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_backend'
op|':'
newline|'\n'
comment|"# Import the untranslated name if we don't have a mapping"
nl|'\n'
indent|'                '
name|'backend_path'
op|'='
name|'self'
op|'.'
name|'_backend_mapping'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'_backend_name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_backend_name'
op|')'
newline|'\n'
name|'backend_mod'
op|'='
name|'importutils'
op|'.'
name|'import_module'
op|'('
name|'backend_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_backend'
op|'='
name|'backend_mod'
op|'.'
name|'get_backend'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_backend'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_backend'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'attr'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_backend'
op|','
name|'key'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'attr'
op|','
string|"'__call__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'attr'
newline|'\n'
comment|'# NOTE(vsergeyev): If `use_db_reconnect` option is set to True, retry'
nl|'\n'
comment|'#                  DB API methods, decorated with @safe_for_db_retry'
nl|'\n'
comment|'#                  on disconnect.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'use_db_reconnect'
name|'and'
name|'hasattr'
op|'('
name|'attr'
op|','
string|"'enable_retry'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'attr'
op|'='
name|'wrap_db_retry'
op|'('
nl|'\n'
name|'retry_interval'
op|'='
name|'self'
op|'.'
name|'retry_interval'
op|','
nl|'\n'
name|'max_retries'
op|'='
name|'self'
op|'.'
name|'max_retries'
op|','
nl|'\n'
name|'inc_retry_interval'
op|'='
name|'self'
op|'.'
name|'inc_retry_interval'
op|','
nl|'\n'
name|'max_retry_interval'
op|'='
name|'self'
op|'.'
name|'max_retry_interval'
op|')'
op|'('
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'attr'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

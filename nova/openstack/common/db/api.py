begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2013 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Multiple DB API backend support.\n\nSupported configuration options:\n\n`db_backend`: DB backend name or full module path to DB backend module.\n`dbapi_use_tpool`: Enable thread pooling of DB API calls.\n\nA DB backend module should implement a method named \'get_backend\' which\ntakes no arguments.  The method can return any object that implements DB\nAPI methods.\n\n*NOTE*: There are bugs in eventlet when using tpool combined with\nthreading locks. The python logging module happens to use such locks.  To\nwork around this issue, be sure to specify thread=False with\neventlet.monkey_patch().\n\nA bug for eventlet has been filed here:\n\nhttps://bitbucket.org/eventlet/eventlet/issue/137/\n"""'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|db_opts
name|'db_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'db_backend'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'sqlalchemy'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The backend to use for db'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'dbapi_use_tpool'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Enable the experimental use of thread pooling for '"
nl|'\n'
string|"'all DB API calls'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'db_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DBAPI
name|'class'
name|'DBAPI'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'backend_mapping'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'backend_mapping'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'backend_mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__backend'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'__backend_mapping'
op|'='
name|'backend_mapping'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'dbapi_backend'"
op|','
string|"'nova-'"
op|')'
newline|'\n'
DECL|member|__get_backend
name|'def'
name|'__get_backend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the actual backend.  May be a module or an instance of\n        a class.  Doesn\'t matter to us.  We do this synchronized as it\'s\n        possible multiple greenthreads started very quickly trying to do\n        DB calls and eventlet can switch threads before self.__backend gets\n        assigned.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__backend'
op|':'
newline|'\n'
comment|'# Another thread assigned it'
nl|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__backend'
newline|'\n'
dedent|''
name|'backend_name'
op|'='
name|'CONF'
op|'.'
name|'db_backend'
newline|'\n'
name|'self'
op|'.'
name|'__use_tpool'
op|'='
name|'CONF'
op|'.'
name|'dbapi_use_tpool'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__use_tpool'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'eventlet'
name|'import'
name|'tpool'
newline|'\n'
name|'self'
op|'.'
name|'__tpool'
op|'='
name|'tpool'
newline|'\n'
comment|"# Import the untranslated name if we don't have a"
nl|'\n'
comment|'# mapping.'
nl|'\n'
dedent|''
name|'backend_path'
op|'='
name|'self'
op|'.'
name|'__backend_mapping'
op|'.'
name|'get'
op|'('
name|'backend_name'
op|','
nl|'\n'
name|'backend_name'
op|')'
newline|'\n'
name|'backend_mod'
op|'='
name|'importutils'
op|'.'
name|'import_module'
op|'('
name|'backend_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__backend'
op|'='
name|'backend_mod'
op|'.'
name|'get_backend'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__backend'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
name|'self'
op|'.'
name|'__backend'
name|'or'
name|'self'
op|'.'
name|'__get_backend'
op|'('
op|')'
newline|'\n'
name|'attr'
op|'='
name|'getattr'
op|'('
name|'backend'
op|','
name|'key'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'__use_tpool'
name|'or'
name|'not'
name|'hasattr'
op|'('
name|'attr'
op|','
string|"'__call__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'attr'
newline|'\n'
nl|'\n'
DECL|function|tpool_wrapper
dedent|''
name|'def'
name|'tpool_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__tpool'
op|'.'
name|'execute'
op|'('
name|'attr'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'functools'
op|'.'
name|'update_wrapper'
op|'('
name|'tpool_wrapper'
op|','
name|'attr'
op|')'
newline|'\n'
name|'return'
name|'tpool_wrapper'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

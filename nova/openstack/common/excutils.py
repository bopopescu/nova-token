begin_unit
comment|'# Copyright 2011 OpenStack Foundation.'
nl|'\n'
comment|'# Copyright 2012, Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nException related utilities.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_LE'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|save_and_reraise_exception
name|'class'
name|'save_and_reraise_exception'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Save current exception, run some code and then re-raise.\n\n    In some cases the exception context can be cleared, resulting in None\n    being attempted to be re-raised after an exception handler is run. This\n    can happen when eventlet switches greenthreads or when running an\n    exception handler, code raises and catches an exception. In both\n    cases the exception context will be cleared.\n\n    To work around this, we save the exception state, run handler code, and\n    then re-raise the original exception. If another exception occurs, the\n    saved exception is logged and the new exception is re-raised.\n\n    In some cases the caller may not want to re-raise the exception, and\n    for those circumstances this context provides a reraise flag that\n    can be used to suppress the exception.  For example::\n\n      except Exception:\n          with save_and_reraise_exception() as ctxt:\n              decide_if_need_reraise()\n              if not should_be_reraised:\n                  ctxt.reraise = False\n\n    If another exception occurs and reraise flag is False,\n    the saved exception will not be logged.\n\n    If the caller wants to raise new exception during exception handling\n    he/she sets reraise to False initially with an ability to set it back to\n    True if needed::\n\n      except Exception:\n          with save_and_reraise_exception(reraise=False) as ctxt:\n              [if statements to determine whether to raise a new exception]\n              # Not raising a new exception, so reraise\n              ctxt.reraise = True\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'reraise'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reraise'
op|'='
name|'reraise'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'type_'
op|','
name|'self'
op|'.'
name|'value'
op|','
name|'self'
op|'.'
name|'tb'
op|','
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_val'
op|','
name|'exc_tb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'exc_type'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'reraise'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Original exception being dropped: %s'"
op|')'
op|','
nl|'\n'
name|'traceback'
op|'.'
name|'format_exception'
op|'('
name|'self'
op|'.'
name|'type_'
op|','
nl|'\n'
name|'self'
op|'.'
name|'value'
op|','
nl|'\n'
name|'self'
op|'.'
name|'tb'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'reraise'
op|':'
newline|'\n'
indent|'            '
name|'six'
op|'.'
name|'reraise'
op|'('
name|'self'
op|'.'
name|'type_'
op|','
name|'self'
op|'.'
name|'value'
op|','
name|'self'
op|'.'
name|'tb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|forever_retry_uncaught_exceptions
dedent|''
dedent|''
dedent|''
name|'def'
name|'forever_retry_uncaught_exceptions'
op|'('
name|'infunc'
op|')'
op|':'
newline|'\n'
DECL|function|inner_func
indent|'    '
name|'def'
name|'inner_func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'last_log_time'
op|'='
number|'0'
newline|'\n'
name|'last_exc_message'
op|'='
name|'None'
newline|'\n'
name|'exc_count'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'infunc'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'this_exc_message'
op|'='
name|'six'
op|'.'
name|'u'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
name|'if'
name|'this_exc_message'
op|'=='
name|'last_exc_message'
op|':'
newline|'\n'
indent|'                    '
name|'exc_count'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'exc_count'
op|'='
number|'1'
newline|'\n'
comment|'# Do not log any more frequently than once a minute unless'
nl|'\n'
comment|'# the exception message changes'
nl|'\n'
dedent|''
name|'cur_time'
op|'='
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
op|'('
name|'cur_time'
op|'-'
name|'last_log_time'
op|'>'
number|'60'
name|'or'
nl|'\n'
name|'this_exc_message'
op|'!='
name|'last_exc_message'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'logging'
op|'.'
name|'exception'
op|'('
nl|'\n'
name|'_LE'
op|'('
string|"'Unexpected exception occurred %d time(s)... '"
nl|'\n'
string|"'retrying.'"
op|')'
op|'%'
name|'exc_count'
op|')'
newline|'\n'
name|'last_log_time'
op|'='
name|'cur_time'
newline|'\n'
name|'last_exc_message'
op|'='
name|'this_exc_message'
newline|'\n'
name|'exc_count'
op|'='
number|'0'
newline|'\n'
comment|"# This should be a very rare event. In case it isn't, do"
nl|'\n'
comment|'# a sleep.'
nl|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'inner_func'
newline|'\n'
dedent|''
endmarker|''
end_unit

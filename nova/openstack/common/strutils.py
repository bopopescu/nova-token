begin_unit
comment|'# Copyright 2011 OpenStack Foundation.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nSystem-level utilities and helper functions.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'unicodedata'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|UNIT_PREFIX_EXPONENT
name|'UNIT_PREFIX_EXPONENT'
op|'='
op|'{'
nl|'\n'
string|"'k'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'K'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'Ki'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'M'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'Mi'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'G'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'Gi'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'T'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'Ti'"
op|':'
number|'4'
op|','
nl|'\n'
op|'}'
newline|'\n'
DECL|variable|UNIT_SYSTEM_INFO
name|'UNIT_SYSTEM_INFO'
op|'='
op|'{'
nl|'\n'
string|"'IEC'"
op|':'
op|'('
number|'1024'
op|','
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(^[-+]?\\d*\\.?\\d+)([KMGT]i?)?(b|bit|B)$'"
op|')'
op|')'
op|','
nl|'\n'
string|"'SI'"
op|':'
op|'('
number|'1000'
op|','
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(^[-+]?\\d*\\.?\\d+)([kMGT])?(b|bit|B)$'"
op|')'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|TRUE_STRINGS
name|'TRUE_STRINGS'
op|'='
op|'('
string|"'1'"
op|','
string|"'t'"
op|','
string|"'true'"
op|','
string|"'on'"
op|','
string|"'y'"
op|','
string|"'yes'"
op|')'
newline|'\n'
DECL|variable|FALSE_STRINGS
name|'FALSE_STRINGS'
op|'='
op|'('
string|"'0'"
op|','
string|"'f'"
op|','
string|"'false'"
op|','
string|"'off'"
op|','
string|"'n'"
op|','
string|"'no'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SLUGIFY_STRIP_RE
name|'SLUGIFY_STRIP_RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"[^\\w\\s-]"'
op|')'
newline|'\n'
DECL|variable|SLUGIFY_HYPHENATE_RE
name|'SLUGIFY_HYPHENATE_RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"[-\\s]+"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(flaper87): The following globals are used by `mask_password`'
nl|'\n'
DECL|variable|_SANITIZE_KEYS
name|'_SANITIZE_KEYS'
op|'='
op|'['
string|"'adminPass'"
op|','
string|"'admin_pass'"
op|','
string|"'password'"
op|','
string|"'admin_password'"
op|']'
newline|'\n'
nl|'\n'
comment|"# NOTE(ldbragst): Let's build a list of regex objects using the list of"
nl|'\n'
comment|'# _SANITIZE_KEYS we already have. This way, we only have to add the new key'
nl|'\n'
comment|'# to the list of _SANITIZE_KEYS and we can generate regular expressions'
nl|'\n'
comment|'# for XML and JSON automatically.'
nl|'\n'
DECL|variable|_SANITIZE_PATTERNS_2
name|'_SANITIZE_PATTERNS_2'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|_SANITIZE_PATTERNS_1
name|'_SANITIZE_PATTERNS_1'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(amrith): Some regular expressions have only one parameter, some'
nl|'\n'
comment|'# have two parameters. Use different lists of patterns here.'
nl|'\n'
DECL|variable|_FORMAT_PATTERNS_1
name|'_FORMAT_PATTERNS_1'
op|'='
op|'['
string|'r\'(%(key)s\\s*[=]\\s*)[^\\s^\\\'^\\"]+\''
op|']'
newline|'\n'
DECL|variable|_FORMAT_PATTERNS_2
name|'_FORMAT_PATTERNS_2'
op|'='
op|'['
string|'r\'(%(key)s\\s*[=]\\s*[\\"\\\']).*?([\\"\\\'])\''
op|','
nl|'\n'
string|'r\'(%(key)s\\s+[\\"\\\']).*?([\\"\\\'])\''
op|','
nl|'\n'
string|'r\'([-]{2}%(key)s\\s+)[^\\\'^\\"^=^\\s]+([\\s]*)\''
op|','
nl|'\n'
string|"r'(<%(key)s>).*?(</%(key)s>)'"
op|','
nl|'\n'
string|'r\'([\\"\\\']%(key)s[\\"\\\']\\s*:\\s*[\\"\\\']).*?([\\"\\\'])\''
op|','
nl|'\n'
string|'r\'([\\\'"].*?%(key)s[\\\'"]\\s*:\\s*u?[\\\'"]).*?([\\\'"])\''
op|','
nl|'\n'
string|'r\'([\\\'"].*?%(key)s[\\\'"]\\s*,\\s*\\\'--?[A-z]+\\\'\\s*,\\s*u?\''
nl|'\n'
string|'\'[\\\'"]).*?([\\\'"])\''
op|','
nl|'\n'
string|"r'(%(key)s\\s*--?[A-z]+\\s*)\\S+(\\s*)'"
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'_SANITIZE_KEYS'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'pattern'
name|'in'
name|'_FORMAT_PATTERNS_2'
op|':'
newline|'\n'
DECL|variable|reg_ex
indent|'        '
name|'reg_ex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'pattern'
op|'%'
op|'{'
string|"'key'"
op|':'
name|'key'
op|'}'
op|','
name|'re'
op|'.'
name|'DOTALL'
op|')'
newline|'\n'
name|'_SANITIZE_PATTERNS_2'
op|'.'
name|'append'
op|'('
name|'reg_ex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'pattern'
name|'in'
name|'_FORMAT_PATTERNS_1'
op|':'
newline|'\n'
DECL|variable|reg_ex
indent|'        '
name|'reg_ex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'pattern'
op|'%'
op|'{'
string|"'key'"
op|':'
name|'key'
op|'}'
op|','
name|'re'
op|'.'
name|'DOTALL'
op|')'
newline|'\n'
name|'_SANITIZE_PATTERNS_1'
op|'.'
name|'append'
op|'('
name|'reg_ex'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|int_from_bool_as_string
dedent|''
dedent|''
name|'def'
name|'int_from_bool_as_string'
op|'('
name|'subject'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interpret a string as a boolean and return either 1 or 0.\n\n    Any string value in:\n\n        (\'True\', \'true\', \'On\', \'on\', \'1\')\n\n    is interpreted as a boolean True.\n\n    Useful for JSON-decoded stuff and config file parsing\n    """'
newline|'\n'
name|'return'
name|'bool_from_string'
op|'('
name|'subject'
op|')'
name|'and'
number|'1'
name|'or'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bool_from_string
dedent|''
name|'def'
name|'bool_from_string'
op|'('
name|'subject'
op|','
name|'strict'
op|'='
name|'False'
op|','
name|'default'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Interpret a string as a boolean.\n\n    A case-insensitive match is performed such that strings matching \'t\',\n    \'true\', \'on\', \'y\', \'yes\', or \'1\' are considered True and, when\n    `strict=False`, anything else returns the value specified by \'default\'.\n\n    Useful for JSON-decoded stuff and config file parsing.\n\n    If `strict=True`, unrecognized values, including None, will raise a\n    ValueError which is useful when parsing values passed in from an API call.\n    Strings yielding False are \'f\', \'false\', \'off\', \'n\', \'no\', or \'0\'.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'subject'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subject'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'subject'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'lowered'
op|'='
name|'subject'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'lowered'
name|'in'
name|'TRUE_STRINGS'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'lowered'
name|'in'
name|'FALSE_STRINGS'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'elif'
name|'strict'
op|':'
newline|'\n'
indent|'        '
name|'acceptable'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
nl|'\n'
string|'"\'%s\'"'
op|'%'
name|'s'
name|'for'
name|'s'
name|'in'
name|'sorted'
op|'('
name|'TRUE_STRINGS'
op|'+'
name|'FALSE_STRINGS'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Unrecognized value \'%(val)s\', acceptable values are:"'
nl|'\n'
string|'" %(acceptable)s"'
op|')'
op|'%'
op|'{'
string|"'val'"
op|':'
name|'subject'
op|','
nl|'\n'
string|"'acceptable'"
op|':'
name|'acceptable'
op|'}'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'default'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_decode
dedent|''
dedent|''
name|'def'
name|'safe_decode'
op|'('
name|'text'
op|','
name|'incoming'
op|'='
name|'None'
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decodes incoming text/bytes string using `incoming` if they\'re not\n       already unicode.\n\n    :param incoming: Text\'s current encoding\n    :param errors: Errors handling policy. See here for valid\n        values http://docs.python.org/2/library/codecs.html\n    :returns: text or a unicode `incoming` encoded\n                representation of it.\n    :raises TypeError: If text is not an instance of str\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'text'
op|','
op|'('
name|'six'
op|'.'
name|'string_types'
op|','
name|'six'
op|'.'
name|'binary_type'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
string|'"%s can\'t be decoded"'
op|'%'
name|'type'
op|'('
name|'text'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'text'
op|','
name|'six'
op|'.'
name|'text_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'text'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'incoming'
op|':'
newline|'\n'
indent|'        '
name|'incoming'
op|'='
op|'('
name|'sys'
op|'.'
name|'stdin'
op|'.'
name|'encoding'
name|'or'
nl|'\n'
name|'sys'
op|'.'
name|'getdefaultencoding'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'text'
op|'.'
name|'decode'
op|'('
name|'incoming'
op|','
name|'errors'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeDecodeError'
op|':'
newline|'\n'
comment|'# Note(flaper87) If we get here, it means that'
nl|'\n'
comment|'# sys.stdin.encoding / sys.getdefaultencoding'
nl|'\n'
comment|"# didn't return a suitable encoding to decode"
nl|'\n'
comment|'# text. This happens mostly when global LANG'
nl|'\n'
comment|"# var is not set correctly and there's no"
nl|'\n'
comment|'# default encoding. In this case, most likely'
nl|'\n'
comment|'# python will use ASCII or ANSI encoders as'
nl|'\n'
comment|"# default encodings but they won't be capable"
nl|'\n'
comment|'# of decoding non-ASCII characters.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Also, UTF-8 is being used since it's an ASCII"
nl|'\n'
comment|'# extension.'
nl|'\n'
indent|'        '
name|'return'
name|'text'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|','
name|'errors'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_encode
dedent|''
dedent|''
name|'def'
name|'safe_encode'
op|'('
name|'text'
op|','
name|'incoming'
op|'='
name|'None'
op|','
nl|'\n'
name|'encoding'
op|'='
string|"'utf-8'"
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Encodes incoming text/bytes string using `encoding`.\n\n    If incoming is not specified, text is expected to be encoded with\n    current python\'s default encoding. (`sys.getdefaultencoding`)\n\n    :param incoming: Text\'s current encoding\n    :param encoding: Expected encoding for text (Default UTF-8)\n    :param errors: Errors handling policy. See here for valid\n        values http://docs.python.org/2/library/codecs.html\n    :returns: text or a bytestring `encoding` encoded\n                representation of it.\n    :raises TypeError: If text is not an instance of str\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'text'
op|','
op|'('
name|'six'
op|'.'
name|'string_types'
op|','
name|'six'
op|'.'
name|'binary_type'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
string|'"%s can\'t be encoded"'
op|'%'
name|'type'
op|'('
name|'text'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'incoming'
op|':'
newline|'\n'
indent|'        '
name|'incoming'
op|'='
op|'('
name|'sys'
op|'.'
name|'stdin'
op|'.'
name|'encoding'
name|'or'
nl|'\n'
name|'sys'
op|'.'
name|'getdefaultencoding'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'text'
op|','
name|'six'
op|'.'
name|'text_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'text'
op|'.'
name|'encode'
op|'('
name|'encoding'
op|','
name|'errors'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'text'
name|'and'
name|'encoding'
op|'!='
name|'incoming'
op|':'
newline|'\n'
comment|'# Decode text before encoding it with `encoding`'
nl|'\n'
indent|'        '
name|'text'
op|'='
name|'safe_decode'
op|'('
name|'text'
op|','
name|'incoming'
op|','
name|'errors'
op|')'
newline|'\n'
name|'return'
name|'text'
op|'.'
name|'encode'
op|'('
name|'encoding'
op|','
name|'errors'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|string_to_bytes
dedent|''
dedent|''
name|'def'
name|'string_to_bytes'
op|'('
name|'text'
op|','
name|'unit_system'
op|'='
string|"'IEC'"
op|','
name|'return_int'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Converts a string into an float representation of bytes.\n\n    The units supported for IEC ::\n\n        Kb(it), Kib(it), Mb(it), Mib(it), Gb(it), Gib(it), Tb(it), Tib(it)\n        KB, KiB, MB, MiB, GB, GiB, TB, TiB\n\n    The units supported for SI ::\n\n        kb(it), Mb(it), Gb(it), Tb(it)\n        kB, MB, GB, TB\n\n    Note that the SI unit system does not support capital letter \'K\'\n\n    :param text: String input for bytes size conversion.\n    :param unit_system: Unit system for byte size conversion.\n    :param return_int: If True, returns integer representation of text\n                       in bytes. (default: decimal)\n    :returns: Numerical representation of text in bytes.\n    :raises ValueError: If text has an invalid value.\n\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|','
name|'reg_ex'
op|'='
name|'UNIT_SYSTEM_INFO'
op|'['
name|'unit_system'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'\'Invalid unit system: "%s"\''
op|')'
op|'%'
name|'unit_system'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'match'
op|'='
name|'reg_ex'
op|'.'
name|'match'
op|'('
name|'text'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'        '
name|'magnitude'
op|'='
name|'float'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'unit_prefix'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'match'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
name|'in'
op|'['
string|"'b'"
op|','
string|"'bit'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'magnitude'
op|'/='
number|'8'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Invalid string format: %s'"
op|')'
op|'%'
name|'text'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'unit_prefix'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'magnitude'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'magnitude'
op|'*'
name|'pow'
op|'('
name|'base'
op|','
name|'UNIT_PREFIX_EXPONENT'
op|'['
name|'unit_prefix'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'return_int'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'math'
op|'.'
name|'ceil'
op|'('
name|'res'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'res'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|to_slug
dedent|''
name|'def'
name|'to_slug'
op|'('
name|'value'
op|','
name|'incoming'
op|'='
name|'None'
op|','
name|'errors'
op|'='
string|'"strict"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Normalize string.\n\n    Convert to lowercase, remove non-word characters, and convert spaces\n    to hyphens.\n\n    Inspired by Django\'s `slugify` filter.\n\n    :param value: Text to slugify\n    :param incoming: Text\'s current encoding\n    :param errors: Errors handling policy. See here for valid\n        values http://docs.python.org/2/library/codecs.html\n    :returns: slugified unicode representation of `value`\n    :raises TypeError: If text is not an instance of str\n    """'
newline|'\n'
name|'value'
op|'='
name|'safe_decode'
op|'('
name|'value'
op|','
name|'incoming'
op|','
name|'errors'
op|')'
newline|'\n'
comment|'# NOTE(aababilov): no need to use safe_(encode|decode) here:'
nl|'\n'
comment|'# encodings are always "ascii", error handling is always "ignore"'
nl|'\n'
comment|'# and types are always known (first: unicode; second: str)'
nl|'\n'
name|'value'
op|'='
name|'unicodedata'
op|'.'
name|'normalize'
op|'('
string|'"NFKD"'
op|','
name|'value'
op|')'
op|'.'
name|'encode'
op|'('
nl|'\n'
string|'"ascii"'
op|','
string|'"ignore"'
op|')'
op|'.'
name|'decode'
op|'('
string|'"ascii"'
op|')'
newline|'\n'
name|'value'
op|'='
name|'SLUGIFY_STRIP_RE'
op|'.'
name|'sub'
op|'('
string|'""'
op|','
name|'value'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'SLUGIFY_HYPHENATE_RE'
op|'.'
name|'sub'
op|'('
string|'"-"'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mask_password
dedent|''
name|'def'
name|'mask_password'
op|'('
name|'message'
op|','
name|'secret'
op|'='
string|'"***"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Replace password with \'secret\' in message.\n\n    :param message: The string which includes security information.\n    :param secret: value with which to replace passwords.\n    :returns: The unicode value of message with the password fields masked.\n\n    For example:\n\n    >>> mask_password("\'adminPass\' : \'aaaaa\'")\n    "\'adminPass\' : \'***\'"\n    >>> mask_password("\'admin_pass\' : \'aaaaa\'")\n    "\'admin_pass\' : \'***\'"\n    >>> mask_password(\'"password" : "aaaaa"\')\n    \'"password" : "***"\'\n    >>> mask_password("\'original_password\' : \'aaaaa\'")\n    "\'original_password\' : \'***\'"\n    >>> mask_password("u\'original_password\' :   u\'aaaaa\'")\n    "u\'original_password\' :   u\'***\'"\n    """'
newline|'\n'
name|'message'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ldbragst): Check to see if anything in message contains any key'
nl|'\n'
comment|'# specified in _SANITIZE_KEYS, if not then just return the message since'
nl|'\n'
comment|"# we don't have to mask any passwords."
nl|'\n'
name|'if'
name|'not'
name|'any'
op|'('
name|'key'
name|'in'
name|'message'
name|'for'
name|'key'
name|'in'
name|'_SANITIZE_KEYS'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'message'
newline|'\n'
nl|'\n'
dedent|''
name|'substitute'
op|'='
string|"r'\\g<1>'"
op|'+'
name|'secret'
op|'+'
string|"r'\\g<2>'"
newline|'\n'
name|'for'
name|'pattern'
name|'in'
name|'_SANITIZE_PATTERNS_2'
op|':'
newline|'\n'
indent|'        '
name|'message'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
name|'pattern'
op|','
name|'substitute'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'substitute'
op|'='
string|"r'\\g<1>'"
op|'+'
name|'secret'
newline|'\n'
name|'for'
name|'pattern'
name|'in'
name|'_SANITIZE_PATTERNS_1'
op|':'
newline|'\n'
indent|'        '
name|'message'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
name|'pattern'
op|','
name|'substitute'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'message'
newline|'\n'
dedent|''
endmarker|''
end_unit

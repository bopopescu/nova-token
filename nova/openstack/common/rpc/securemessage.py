begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'requests'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'crypto'
name|'import'
name|'utils'
name|'as'
name|'cryptoutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|secure_message_opts
name|'secure_message_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'enabled'"
op|','
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether Secure Messaging (Signing) is enabled,'"
nl|'\n'
string|"' defaults to enabled'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'enforced'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether Secure Messaging (Signing) is enforced,'"
nl|'\n'
string|"' defaults to not enforced'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'encrypt'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether Secure Messaging (Encryption) is enabled,'"
nl|'\n'
string|"' defaults to not enabled'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'secret_keys_file'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path to the file containing the keys, takes precedence'"
nl|'\n'
string|"' over secret_key'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'secret_key'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'A list of keys: (ex: name:<base64 encoded key>),'"
nl|'\n'
string|"' ignored if secret_keys_file is set'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'kds_endpoint'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'KDS endpoint (ex: http://kds.example.com:35357/v3)'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|secure_message_group
name|'secure_message_group'
op|'='
name|'cfg'
op|'.'
name|'OptGroup'
op|'('
string|"'secure_messages'"
op|','
nl|'\n'
DECL|variable|title
name|'title'
op|'='
string|"'Secure Messaging options'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecureMessageException
name|'class'
name|'SecureMessageException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generic Exception for Secure Messages."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"An unknown Secure Message related exception occurred."'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'msg'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'self'
op|'.'
name|'msg'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'SecureMessageException'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SharedKeyNotFound
dedent|''
dedent|''
name|'class'
name|'SharedKeyNotFound'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""No shared key was found and no other external authentication mechanism\n    is available.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Shared Key for [%s] Not Found. (%s)"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'errmsg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SharedKeyNotFound'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
op|'('
name|'name'
op|','
name|'errmsg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidMetadata
dedent|''
dedent|''
name|'class'
name|'InvalidMetadata'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The metadata is invalid."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Invalid metadata: %s"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InvalidMetadata'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidSignature
dedent|''
dedent|''
name|'class'
name|'InvalidSignature'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Signature validation failed."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Failed to validate signature (source=%s, destination=%s)"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InvalidSignature'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
op|'('
name|'src'
op|','
name|'dst'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnknownDestinationName
dedent|''
dedent|''
name|'class'
name|'UnknownDestinationName'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The Destination name is unknown to us."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Invalid destination name (%s)"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'UnknownDestinationName'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidEncryptedTicket
dedent|''
dedent|''
name|'class'
name|'InvalidEncryptedTicket'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The Encrypted Ticket could not be successfully handled."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Invalid Ticket (source=%s, destination=%s)"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InvalidEncryptedTicket'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
op|'('
name|'src'
op|','
name|'dst'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidExpiredTicket
dedent|''
dedent|''
name|'class'
name|'InvalidExpiredTicket'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The ticket received is already expired."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Expired ticket (source=%s, destination=%s)"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InvalidExpiredTicket'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
op|'('
name|'src'
op|','
name|'dst'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommunicationError
dedent|''
dedent|''
name|'class'
name|'CommunicationError'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The Communication with the KDS failed."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Communication Error (target=%s): %s"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'target'
op|','
name|'errmsg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CommunicationError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
op|'('
name|'target'
op|','
name|'errmsg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidArgument
dedent|''
dedent|''
name|'class'
name|'InvalidArgument'
op|'('
name|'SecureMessageException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bad initialization argument."""'
newline|'\n'
nl|'\n'
DECL|variable|msg
name|'msg'
op|'='
string|'"Invalid argument: %s"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'errmsg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InvalidArgument'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|'.'
name|'msg'
op|'%'
name|'errmsg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|Ticket
dedent|''
dedent|''
name|'Ticket'
op|'='
name|'collections'
op|'.'
name|'namedtuple'
op|'('
string|"'Ticket'"
op|','
op|'['
string|"'skey'"
op|','
string|"'ekey'"
op|','
string|"'esek'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeyStore
name|'class'
name|'KeyStore'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A storage class for Signing and Encryption Keys.\n\n    This class creates an object that holds Generic Keys like Signing\n    Keys, Encryption Keys, Encrypted SEK Tickets ...\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_kvps'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_key_name
dedent|''
name|'def'
name|'_get_key_name'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|','
name|'ktype'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'source'
op|','
name|'target'
op|','
name|'ktype'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_put
dedent|''
name|'def'
name|'_put'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|','
name|'ktype'
op|','
name|'expiration'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_get_key_name'
op|'('
name|'src'
op|','
name|'dst'
op|','
name|'ktype'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_kvps'
op|'['
name|'name'
op|']'
op|'='
op|'('
name|'expiration'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get
dedent|''
name|'def'
name|'_get'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|','
name|'ktype'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_get_key_name'
op|'('
name|'src'
op|','
name|'dst'
op|','
name|'ktype'
op|')'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'_kvps'
op|':'
newline|'\n'
indent|'            '
name|'expiration'
op|','
name|'data'
op|'='
name|'self'
op|'.'
name|'_kvps'
op|'['
name|'name'
op|']'
newline|'\n'
name|'if'
name|'expiration'
op|'>'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'data'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'_kvps'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|clear
dedent|''
name|'def'
name|'clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wipes the store clear of all data."""'
newline|'\n'
name|'self'
op|'.'
name|'_kvps'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|put_ticket
dedent|''
name|'def'
name|'put_ticket'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|','
name|'skey'
op|','
name|'ekey'
op|','
name|'esek'
op|','
name|'expiration'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Puts a sek pair in the cache.\n\n        :param source: Client name\n        :param target: Target name\n        :param skey: The Signing Key\n        :param ekey: The Encription Key\n        :param esek: The token encrypted with the target key\n        :param expiration: Expiration time in seconds since Epoch\n        """'
newline|'\n'
name|'keys'
op|'='
name|'Ticket'
op|'('
name|'skey'
op|','
name|'ekey'
op|','
name|'esek'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_put'
op|'('
name|'source'
op|','
name|'target'
op|','
string|"'ticket'"
op|','
name|'expiration'
op|','
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_ticket
dedent|''
name|'def'
name|'get_ticket'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a Ticket (skey, ekey, esek) namedtuple for the\n           source/target pair.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get'
op|'('
name|'source'
op|','
name|'target'
op|','
string|"'ticket'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_KEY_STORE
dedent|''
dedent|''
name|'_KEY_STORE'
op|'='
name|'KeyStore'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_KDSClient
name|'class'
name|'_KDSClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|USER_AGENT
indent|'    '
name|'USER_AGENT'
op|'='
string|"'oslo-incubator/rpc'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'endpoint'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A KDS Client class."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_endpoint'
op|'='
name|'endpoint'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timeout'
op|'='
name|'float'
op|'('
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timeout'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_do_get
dedent|''
dedent|''
name|'def'
name|'_do_get'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req_kwargs'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'req_kwargs'
op|'['
string|"'headers'"
op|']'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'req_kwargs'
op|'['
string|"'headers'"
op|']'
op|'['
string|"'User-Agent'"
op|']'
op|'='
name|'self'
op|'.'
name|'USER_AGENT'
newline|'\n'
name|'req_kwargs'
op|'['
string|"'headers'"
op|']'
op|'['
string|"'Content-Type'"
op|']'
op|'='
string|"'application/json'"
newline|'\n'
name|'req_kwargs'
op|'['
string|"'data'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
op|'{'
string|"'request'"
op|':'
name|'request'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'timeout'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'req_kwargs'
op|'['
string|"'timeout'"
op|']'
op|'='
name|'self'
op|'.'
name|'timeout'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'requests'
op|'.'
name|'get'
op|'('
name|'url'
op|','
op|'**'
name|'req_kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'requests'
op|'.'
name|'ConnectionError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
string|'"Unable to establish connection. %s"'
op|'%'
name|'e'
newline|'\n'
name|'raise'
name|'CommunicationError'
op|'('
name|'url'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
DECL|member|_get_reply
dedent|''
name|'def'
name|'_get_reply'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'resp'
op|'.'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'body'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'resp'
op|'.'
name|'text'
op|')'
newline|'\n'
name|'reply'
op|'='
name|'body'
op|'['
string|"'reply'"
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
string|'"Failed to decode reply: %s"'
op|'%'
name|'resp'
op|'.'
name|'text'
newline|'\n'
name|'raise'
name|'CommunicationError'
op|'('
name|'url'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'"No reply data was returned."'
newline|'\n'
name|'raise'
name|'CommunicationError'
op|'('
name|'url'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'reply'
newline|'\n'
nl|'\n'
DECL|member|_get_ticket
dedent|''
name|'def'
name|'_get_ticket'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'url'
op|'='
name|'None'
op|','
name|'redirects'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send an HTTP request.\n\n        Wraps around \'requests\' to handle redirects and common errors.\n        """'
newline|'\n'
name|'if'
name|'url'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_endpoint'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'CommunicationError'
op|'('
name|'url'
op|','
string|"'Endpoint not configured'"
op|')'
newline|'\n'
dedent|''
name|'url'
op|'='
name|'self'
op|'.'
name|'_endpoint'
op|'+'
string|"'/kds/ticket'"
newline|'\n'
nl|'\n'
dedent|''
name|'while'
name|'redirects'
op|':'
newline|'\n'
indent|'            '
name|'resp'
op|'='
name|'self'
op|'.'
name|'_do_get'
op|'('
name|'url'
op|','
name|'request'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'status_code'
name|'in'
op|'('
number|'301'
op|','
number|'302'
op|','
number|'305'
op|')'
op|':'
newline|'\n'
comment|'# Redirected. Reissue the request to the new location.'
nl|'\n'
indent|'                '
name|'url'
op|'='
name|'resp'
op|'.'
name|'headers'
op|'['
string|"'location'"
op|']'
newline|'\n'
name|'redirects'
op|'-='
number|'1'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'resp'
op|'.'
name|'status_code'
op|'!='
number|'200'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
string|'"Request returned failure status: %s (%s)"'
newline|'\n'
name|'err'
op|'='
name|'msg'
op|'%'
op|'('
name|'resp'
op|'.'
name|'status_code'
op|','
name|'resp'
op|'.'
name|'text'
op|')'
newline|'\n'
name|'raise'
name|'CommunicationError'
op|'('
name|'url'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_get_reply'
op|'('
name|'url'
op|','
name|'resp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'CommunicationError'
op|'('
name|'url'
op|','
string|'"Too many redirections, giving up!"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_ticket
dedent|''
name|'def'
name|'get_ticket'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'target'
op|','
name|'crypto'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# prepare metadata'
nl|'\n'
indent|'        '
name|'md'
op|'='
op|'{'
string|"'requestor'"
op|':'
name|'source'
op|','
nl|'\n'
string|"'target'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'timestamp'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
nl|'\n'
string|"'nonce'"
op|':'
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'Q'"
op|','
name|'os'
op|'.'
name|'urandom'
op|'('
number|'8'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|'}'
newline|'\n'
name|'metadata'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'md'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# sign metadata'
nl|'\n'
name|'signature'
op|'='
name|'crypto'
op|'.'
name|'sign'
op|'('
name|'key'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# HTTP request'
nl|'\n'
name|'reply'
op|'='
name|'self'
op|'.'
name|'_get_ticket'
op|'('
op|'{'
string|"'metadata'"
op|':'
name|'metadata'
op|','
nl|'\n'
string|"'signature'"
op|':'
name|'signature'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# verify reply'
nl|'\n'
name|'signature'
op|'='
name|'crypto'
op|'.'
name|'sign'
op|'('
name|'key'
op|','
op|'('
name|'reply'
op|'['
string|"'metadata'"
op|']'
op|'+'
name|'reply'
op|'['
string|"'ticket'"
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'signature'
op|'!='
name|'reply'
op|'['
string|"'signature'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidEncryptedTicket'
op|'('
name|'md'
op|'['
string|"'source'"
op|']'
op|','
name|'md'
op|'['
string|"'destination'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'md'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'reply'
op|'['
string|"'metadata'"
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
op|'('
op|'('
name|'md'
op|'['
string|"'source'"
op|']'
op|'!='
name|'source'
name|'or'
nl|'\n'
name|'md'
op|'['
string|"'destination'"
op|']'
op|'!='
name|'target'
name|'or'
nl|'\n'
name|'md'
op|'['
string|"'expiration'"
op|']'
op|'<'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidEncryptedTicket'
op|'('
name|'md'
op|'['
string|"'source'"
op|']'
op|','
name|'md'
op|'['
string|"'destination'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# return ticket data'
nl|'\n'
dedent|''
name|'tkt'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'crypto'
op|'.'
name|'decrypt'
op|'('
name|'key'
op|','
name|'reply'
op|'['
string|"'ticket'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'tkt'
op|','
name|'md'
op|'['
string|"'expiration'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# we need to keep a global nonce, as this value should never repeat non'
nl|'\n'
comment|'# matter how many SecureMessage objects we create'
nl|'\n'
DECL|variable|_NONCE
dedent|''
dedent|''
name|'_NONCE'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_nonce
name|'def'
name|'_get_nonce'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""We keep a single counter per instance, as it is so huge we can\'t\n    possibly cycle through within 1/100 of a second anyway.\n    """'
newline|'\n'
nl|'\n'
name|'global'
name|'_NONCE'
newline|'\n'
comment|'# Lazy initialize, for now get a random value, multiply by 2^32 and'
nl|'\n'
comment|'# use it as the nonce base. The counter itself will rotate after'
nl|'\n'
comment|'# 2^32 increments.'
nl|'\n'
name|'if'
name|'_NONCE'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_NONCE'
op|'='
op|'['
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'I'"
op|','
name|'os'
op|'.'
name|'urandom'
op|'('
number|'4'
op|')'
op|')'
op|'['
number|'0'
op|']'
op|','
number|'0'
op|']'
newline|'\n'
nl|'\n'
comment|'# Increment counter and wrap at 2^32'
nl|'\n'
dedent|''
name|'_NONCE'
op|'['
number|'1'
op|']'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'_NONCE'
op|'['
number|'1'
op|']'
op|'>'
number|'0xffffffff'
op|':'
newline|'\n'
indent|'        '
name|'_NONCE'
op|'['
number|'1'
op|']'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Return base + counter'
nl|'\n'
dedent|''
name|'return'
name|'long'
op|'('
op|'('
name|'_NONCE'
op|'['
number|'0'
op|']'
op|'*'
number|'0xffffffff'
op|')'
op|')'
op|'+'
name|'_NONCE'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecureMessage
dedent|''
name|'class'
name|'SecureMessage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A Secure Message object.\n\n    This class creates a signing/encryption facility for RPC messages.\n    It encapsulates all the necessary crypto primitives to insulate\n    regular code from the intricacies of message authentication, validation\n    and optionally encryption.\n\n    :param topic: The topic name of the queue\n    :param host: The server name, together with the topic it forms a unique\n                 name that is used to source signing keys, and verify\n                 incoming messages.\n    :param conf: a ConfigOpts object\n    :param key: (optional) explicitly pass in endpoint private key.\n                  If not provided it will be sourced from the service config\n    :param key_store: (optional) Storage class for local caching\n    :param encrypt: (defaults to False) Whether to encrypt messages\n    :param enctype: (defaults to AES) Cipher to use\n    :param hashtype: (defaults to SHA256) Hash function to use for signatures\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'host'
op|','
name|'conf'
op|','
name|'key'
op|'='
name|'None'
op|','
name|'key_store'
op|'='
name|'None'
op|','
nl|'\n'
name|'encrypt'
op|'='
name|'None'
op|','
name|'enctype'
op|'='
string|"'AES'"
op|','
name|'hashtype'
op|'='
string|"'SHA256'"
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'conf'
op|'.'
name|'register_group'
op|'('
name|'secure_message_group'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'register_opts'
op|'('
name|'secure_message_opts'
op|','
name|'group'
op|'='
string|"'secure_messages'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_name'
op|'='
string|"'%s.%s'"
op|'%'
op|'('
name|'topic'
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_key'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'_conf'
op|'='
name|'conf'
op|'.'
name|'secure_messages'
newline|'\n'
name|'self'
op|'.'
name|'_encrypt'
op|'='
name|'self'
op|'.'
name|'_conf'
op|'.'
name|'encrypt'
name|'if'
op|'('
name|'encrypt'
name|'is'
name|'None'
op|')'
name|'else'
name|'encrypt'
newline|'\n'
name|'self'
op|'.'
name|'_crypto'
op|'='
name|'cryptoutils'
op|'.'
name|'SymmetricCrypto'
op|'('
name|'enctype'
op|','
name|'hashtype'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_hkdf'
op|'='
name|'cryptoutils'
op|'.'
name|'HKDF'
op|'('
name|'hashtype'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_kds'
op|'='
name|'_KDSClient'
op|'('
name|'self'
op|'.'
name|'_conf'
op|'.'
name|'kds_endpoint'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_key'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_key'
op|'='
name|'self'
op|'.'
name|'_init_key'
op|'('
name|'topic'
op|','
name|'self'
op|'.'
name|'_name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_key'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
string|'"Secret Key (or key file) is missing or malformed"'
newline|'\n'
name|'raise'
name|'SharedKeyNotFound'
op|'('
name|'self'
op|'.'
name|'_name'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_key_store'
op|'='
name|'key_store'
name|'or'
name|'_KEY_STORE'
newline|'\n'
nl|'\n'
DECL|member|_init_key
dedent|''
name|'def'
name|'_init_key'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_conf'
op|'.'
name|'secret_keys_file'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'_conf'
op|'.'
name|'secret_keys_file'
op|','
string|"'r'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'keys'
op|'='
name|'f'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_conf'
op|'.'
name|'secret_key'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
name|'self'
op|'.'
name|'_conf'
op|'.'
name|'secret_key'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'keys'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'k'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'['
number|'0'
op|']'
op|'=='
string|"'#'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
string|"':'"
name|'not'
name|'in'
name|'k'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'svc'
op|','
name|'key'
op|'='
name|'k'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'svc'
op|'=='
name|'topic'
name|'or'
name|'svc'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_split_key
dedent|''
name|'def'
name|'_split_key'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sig_key'
op|'='
name|'key'
op|'['
op|':'
name|'size'
op|']'
newline|'\n'
name|'enc_key'
op|'='
name|'key'
op|'['
name|'size'
op|':'
op|']'
newline|'\n'
name|'return'
name|'sig_key'
op|','
name|'enc_key'
newline|'\n'
nl|'\n'
DECL|member|_decode_esek
dedent|''
name|'def'
name|'_decode_esek'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'source'
op|','
name|'target'
op|','
name|'timestamp'
op|','
name|'esek'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This function decrypts the esek buffer passed in and returns a\n        KeyStore to be used to check and decrypt the received message.\n\n        :param key: The key to use to decrypt the ticket (esek)\n        :param source: The name of the source service\n        :param traget: The name of the target service\n        :param timestamp: The incoming message timestamp\n        :param esek: a base64 encoded encrypted block containing a JSON string\n        """'
newline|'\n'
name|'rkey'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'self'
op|'.'
name|'_crypto'
op|'.'
name|'decrypt'
op|'('
name|'key'
op|','
name|'esek'
op|')'
newline|'\n'
name|'j'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
name|'rkey'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'j'
op|'['
string|"'key'"
op|']'
op|')'
newline|'\n'
name|'expiration'
op|'='
name|'j'
op|'['
string|"'timestamp'"
op|']'
op|'+'
name|'j'
op|'['
string|"'ttl'"
op|']'
newline|'\n'
name|'if'
name|'j'
op|'['
string|"'timestamp'"
op|']'
op|'>'
name|'timestamp'
name|'or'
name|'timestamp'
op|'>'
name|'expiration'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InvalidExpiredTicket'
op|'('
name|'source'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidEncryptedTicket'
op|'('
name|'source'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'info'
op|'='
string|"'%s,%s,%s'"
op|'%'
op|'('
name|'source'
op|','
name|'target'
op|','
name|'str'
op|'('
name|'j'
op|'['
string|"'timestamp'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'sek'
op|'='
name|'self'
op|'.'
name|'_hkdf'
op|'.'
name|'expand'
op|'('
name|'rkey'
op|','
name|'info'
op|','
name|'len'
op|'('
name|'key'
op|')'
op|'*'
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_split_key'
op|'('
name|'sek'
op|','
name|'len'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ticket
dedent|''
name|'def'
name|'_get_ticket'
op|'('
name|'self'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This function will check if we already have a SEK for the specified\n        target in the cache, or will go and try to fetch a new SEK from the key\n        server.\n\n        :param target: The name of the target service\n        """'
newline|'\n'
name|'ticket'
op|'='
name|'self'
op|'.'
name|'_key_store'
op|'.'
name|'get_ticket'
op|'('
name|'self'
op|'.'
name|'_name'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ticket'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ticket'
newline|'\n'
nl|'\n'
dedent|''
name|'tkt'
op|','
name|'expiration'
op|'='
name|'self'
op|'.'
name|'_kds'
op|'.'
name|'get_ticket'
op|'('
name|'self'
op|'.'
name|'_name'
op|','
name|'target'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_crypto'
op|','
name|'self'
op|'.'
name|'_key'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_key_store'
op|'.'
name|'put_ticket'
op|'('
name|'self'
op|'.'
name|'_name'
op|','
name|'target'
op|','
nl|'\n'
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'tkt'
op|'['
string|"'skey'"
op|']'
op|')'
op|','
nl|'\n'
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'tkt'
op|'['
string|"'ekey'"
op|']'
op|')'
op|','
nl|'\n'
name|'tkt'
op|'['
string|"'esek'"
op|']'
op|','
name|'expiration'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_key_store'
op|'.'
name|'get_ticket'
op|'('
name|'self'
op|'.'
name|'_name'
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'target'
op|','
name|'json_msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is the main encoding function.\n\n        It takes a target and a message and returns a tuple consisting of a\n        JSON serialized metadata object, a JSON serialized (and optionally\n        encrypted) message, and a signature.\n\n        :param version: the current envelope version\n        :param target: The name of the target service (usually with hostname)\n        :param json_msg: a serialized json message object\n        """'
newline|'\n'
name|'ticket'
op|'='
name|'self'
op|'.'
name|'_get_ticket'
op|'('
name|'target'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
op|'{'
string|"'source'"
op|':'
name|'self'
op|'.'
name|'_name'
op|','
nl|'\n'
string|"'destination'"
op|':'
name|'target'
op|','
nl|'\n'
string|"'timestamp'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|','
nl|'\n'
string|"'nonce'"
op|':'
name|'_get_nonce'
op|'('
op|')'
op|','
nl|'\n'
string|"'esek'"
op|':'
name|'ticket'
op|'.'
name|'esek'
op|','
nl|'\n'
string|"'encryption'"
op|':'
name|'self'
op|'.'
name|'_encrypt'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'message'
op|'='
name|'json_msg'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_encrypt'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'self'
op|'.'
name|'_crypto'
op|'.'
name|'encrypt'
op|'('
name|'ticket'
op|'.'
name|'ekey'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'signature'
op|'='
name|'self'
op|'.'
name|'_crypto'
op|'.'
name|'sign'
op|'('
name|'ticket'
op|'.'
name|'skey'
op|','
nl|'\n'
name|'version'
op|'+'
name|'metadata'
op|'+'
name|'message'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'metadata'
op|','
name|'message'
op|','
name|'signature'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'version'
op|','
name|'metadata'
op|','
name|'message'
op|','
name|'signature'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is the main decoding function.\n\n        It takes a version, metadata, message and signature strings and\n        returns a tuple with a (decrypted) message and metadata or raises\n        an exception in case of error.\n\n        :param version: the current envelope version\n        :param metadata: a JSON serialized object with metadata for validation\n        :param message: a JSON serialized (base64 encoded encrypted) message\n        :param signature: a base64 encoded signature\n        """'
newline|'\n'
name|'md'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'check_args'
op|'='
op|'('
string|"'source'"
op|','
string|"'destination'"
op|','
string|"'timestamp'"
op|','
nl|'\n'
string|"'nonce'"
op|','
string|"'esek'"
op|','
string|"'encryption'"
op|')'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'check_args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'arg'
name|'not'
name|'in'
name|'md'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InvalidMetadata'
op|'('
string|'\'Missing metadata "%s"\''
op|'%'
name|'arg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'md'
op|'['
string|"'destination'"
op|']'
op|'!='
name|'self'
op|'.'
name|'_name'
op|':'
newline|'\n'
comment|'# TODO(simo) handle group keys by checking target'
nl|'\n'
indent|'            '
name|'raise'
name|'UnknownDestinationName'
op|'('
name|'md'
op|'['
string|"'destination'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'skey'
op|','
name|'ekey'
op|'='
name|'self'
op|'.'
name|'_decode_esek'
op|'('
name|'self'
op|'.'
name|'_key'
op|','
nl|'\n'
name|'md'
op|'['
string|"'source'"
op|']'
op|','
name|'md'
op|'['
string|"'destination'"
op|']'
op|','
nl|'\n'
name|'md'
op|'['
string|"'timestamp'"
op|']'
op|','
name|'md'
op|'['
string|"'esek'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'InvalidExpiredTicket'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidMetadata'
op|'('
string|"'Failed to decode ESEK for %s/%s'"
op|'%'
op|'('
nl|'\n'
name|'md'
op|'['
string|"'source'"
op|']'
op|','
name|'md'
op|'['
string|"'destination'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sig'
op|'='
name|'self'
op|'.'
name|'_crypto'
op|'.'
name|'sign'
op|'('
name|'skey'
op|','
name|'version'
op|'+'
name|'metadata'
op|'+'
name|'message'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'sig'
op|'!='
name|'signature'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InvalidSignature'
op|'('
name|'md'
op|'['
string|"'source'"
op|']'
op|','
name|'md'
op|'['
string|"'destination'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'md'
op|'['
string|"'encryption'"
op|']'
name|'is'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'self'
op|'.'
name|'_crypto'
op|'.'
name|'decrypt'
op|'('
name|'ekey'
op|','
name|'message'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'message'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'md'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

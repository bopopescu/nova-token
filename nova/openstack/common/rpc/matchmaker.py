begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 Cloudscaling Group, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nThe MatchMaker classes should except a Topic or Fanout exchange key and\nreturn keys for direct exchanges, per (approximate) AMQP parlance.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
comment|'# noqa'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|matchmaker_opts
name|'matchmaker_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'matchmaker_heartbeat_freq'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'300'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Heartbeat frequency'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'matchmaker_heartbeat_ttl'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Heartbeat time-to-live.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'matchmaker_opts'
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|contextmanager
name|'contextmanager'
op|'='
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MatchMakerException
name|'class'
name|'MatchMakerException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Signified a match could not be found."""'
newline|'\n'
DECL|variable|message
name|'message'
op|'='
name|'_'
op|'('
string|'"Match not found by MatchMaker."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Exchange
dedent|''
name|'class'
name|'Exchange'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Implements lookups.\n\n    Subclass this to support hashtables, dns, etc.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Binding
dedent|''
dedent|''
name|'class'
name|'Binding'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A binding on which to perform a lookup."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test
dedent|''
name|'def'
name|'test'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MatchMakerBase
dedent|''
dedent|''
name|'class'
name|'MatchMakerBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Match Maker Base Class.\n\n    Build off HeartbeatMatchMakerBase if building a heartbeat-capable\n    MatchMaker.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Array of tuples. Index [2] toggles negation, [3] is last-if-true'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'bindings'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'no_heartbeat_msg'
op|'='
name|'_'
op|'('
string|"'Matchmaker does not implement '"
nl|'\n'
string|"'registration or heartbeat.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a host on a backend.\n\n        Heartbeats, if applicable, may keepalive registration.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|ack_alive
dedent|''
name|'def'
name|'ack_alive'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acknowledge that a key.host is alive.\n\n        Used internally for updating heartbeats, but may also be used\n        publically to acknowledge a system is alive (i.e. rpc message\n        successfully sent to host)\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|is_alive
dedent|''
name|'def'
name|'is_alive'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Checks if a host is alive."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|expire
dedent|''
name|'def'
name|'expire'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Explicitly expire a host\'s registration."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|send_heartbeats
dedent|''
name|'def'
name|'send_heartbeats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send all heartbeats.\n\n        Use start_heartbeat to spawn a heartbeat greenthread,\n        which loops this method.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unregister
dedent|''
name|'def'
name|'unregister'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unregister a topic."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|start_heartbeat
dedent|''
name|'def'
name|'start_heartbeat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawn heartbeat greenthread."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|stop_heartbeat
dedent|''
name|'def'
name|'stop_heartbeat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the heartbeat greenthread."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|add_binding
dedent|''
name|'def'
name|'add_binding'
op|'('
name|'self'
op|','
name|'binding'
op|','
name|'rule'
op|','
name|'last'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bindings'
op|'.'
name|'append'
op|'('
op|'('
name|'binding'
op|','
name|'rule'
op|','
name|'False'
op|','
name|'last'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE(ewindisch): kept the following method in case we implement the'
nl|'\n'
comment|'#                 underlying support.'
nl|'\n'
comment|'#def add_negate_binding(self, binding, rule, last=True):'
nl|'\n'
comment|'#    self.bindings.append((binding, rule, True, last))'
nl|'\n'
nl|'\n'
DECL|member|queues
dedent|''
name|'def'
name|'queues'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'workers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# bit is for negate bindings - if we choose to implement it.'
nl|'\n'
comment|'# last stops processing rules if this matches.'
nl|'\n'
name|'for'
op|'('
name|'binding'
op|','
name|'exchange'
op|','
name|'bit'
op|','
name|'last'
op|')'
name|'in'
name|'self'
op|'.'
name|'bindings'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'binding'
op|'.'
name|'test'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'workers'
op|'.'
name|'extend'
op|'('
name|'exchange'
op|'.'
name|'run'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Support last.'
nl|'\n'
name|'if'
name|'last'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'workers'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'workers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HeartbeatMatchMakerBase
dedent|''
dedent|''
name|'class'
name|'HeartbeatMatchMakerBase'
op|'('
name|'MatchMakerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base for a heart-beat capable MatchMaker.\n\n    Provides common methods for registering, unregistering, and maintaining\n    heartbeats.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'hosts'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_heart'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'host_topic'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'HeartbeatMatchMakerBase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|send_heartbeats
dedent|''
name|'def'
name|'send_heartbeats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send all heartbeats.\n\n        Use start_heartbeat to spawn a heartbeat greenthread,\n        which loops this method.\n        """'
newline|'\n'
name|'for'
name|'key'
op|','
name|'host'
name|'in'
name|'self'
op|'.'
name|'host_topic'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ack_alive'
op|'('
name|'key'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ack_alive
dedent|''
dedent|''
name|'def'
name|'ack_alive'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acknowledge that a host.topic is alive.\n\n        Used internally for updating heartbeats, but may also be used\n        publically to acknowledge a system is alive (i.e. rpc message\n        successfully sent to host)\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Must implement ack_alive"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|backend_register
dedent|''
name|'def'
name|'backend_register'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implements registration logic.\n\n        Called by register(self,key,host)\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Must implement backend_register"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|backend_unregister
dedent|''
name|'def'
name|'backend_unregister'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'key_host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implements de-registration logic.\n\n        Called by unregister(self,key,host)\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Must implement backend_unregister"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a host on a backend.\n\n        Heartbeats, if applicable, may keepalive registration.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'add'
op|'('
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host_topic'
op|'['
op|'('
name|'key'
op|','
name|'host'
op|')'
op|']'
op|'='
name|'host'
newline|'\n'
name|'key_host'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
op|'('
name|'key'
op|','
name|'host'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'backend_register'
op|'('
name|'key'
op|','
name|'key_host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ack_alive'
op|'('
name|'key'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregister
dedent|''
name|'def'
name|'unregister'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unregister a topic."""'
newline|'\n'
name|'if'
op|'('
name|'key'
op|','
name|'host'
op|')'
name|'in'
name|'self'
op|'.'
name|'host_topic'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'host_topic'
op|'['
op|'('
name|'key'
op|','
name|'host'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'hosts'
op|'.'
name|'discard'
op|'('
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'backend_unregister'
op|'('
name|'key'
op|','
string|"'.'"
op|'.'
name|'join'
op|'('
op|'('
name|'key'
op|','
name|'host'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Matchmaker unregistered: %(key)s, %(host)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
name|'key'
op|','
string|"'host'"
op|':'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start_heartbeat
dedent|''
name|'def'
name|'start_heartbeat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implementation of MatchMakerBase.start_heartbeat.\n\n        Launches greenthread looping send_heartbeats(),\n        yielding for CONF.matchmaker_heartbeat_freq seconds\n        between iterations.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MatchMakerException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Register before starting heartbeat."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|do_heartbeat
dedent|''
name|'def'
name|'do_heartbeat'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'send_heartbeats'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
name|'CONF'
op|'.'
name|'matchmaker_heartbeat_freq'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_heart'
op|'='
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'do_heartbeat'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop_heartbeat
dedent|''
name|'def'
name|'stop_heartbeat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroys the heartbeat greenthread."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_heart'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_heart'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectBinding
dedent|''
dedent|''
dedent|''
name|'class'
name|'DirectBinding'
op|'('
name|'Binding'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specifies a host in the key via a \'.\' character.\n\n    Although dots are used in the key, the behavior here is\n    that it maps directly to a host, thus direct.\n    """'
newline|'\n'
DECL|member|test
name|'def'
name|'test'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'.'"
name|'in'
name|'key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicBinding
dedent|''
dedent|''
name|'class'
name|'TopicBinding'
op|'('
name|'Binding'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Where a \'bare\' key without dots.\n\n    AMQP generally considers topic exchanges to be those *with* dots,\n    but we deviate here in terminology as the behavior here matches\n    that of a topic exchange (whereas where there are dots, behavior\n    matches that of a direct exchange.\n    """'
newline|'\n'
DECL|member|test
name|'def'
name|'test'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'.'"
name|'not'
name|'in'
name|'key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutBinding
dedent|''
dedent|''
name|'class'
name|'FanoutBinding'
op|'('
name|'Binding'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Match on fanout keys, where key starts with \'fanout.\' string."""'
newline|'\n'
DECL|member|test
name|'def'
name|'test'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'fanout~'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StubExchange
dedent|''
dedent|''
name|'class'
name|'StubExchange'
op|'('
name|'Exchange'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exchange that does nothing."""'
newline|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'('
name|'key'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalhostExchange
dedent|''
dedent|''
name|'class'
name|'LocalhostExchange'
op|'('
name|'Exchange'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exchange where all direct topics are local."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|'='
string|"'localhost'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'super'
op|'('
name|'Exchange'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'('
string|"'.'"
op|'.'
name|'join'
op|'('
op|'('
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|')'
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectExchange
dedent|''
dedent|''
name|'class'
name|'DirectExchange'
op|'('
name|'Exchange'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exchange where all topic keys are split, sending to second half.\n\n    i.e. "compute.host" sends a message to "compute.host" running on "host"\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Exchange'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'e'
op|'='
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'return'
op|'['
op|'('
name|'key'
op|','
name|'e'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MatchMakerLocalhost
dedent|''
dedent|''
name|'class'
name|'MatchMakerLocalhost'
op|'('
name|'MatchMakerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Match Maker where all bare topics resolve to localhost.\n\n    Useful for testing.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|'='
string|"'localhost'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MatchMakerLocalhost'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_binding'
op|'('
name|'FanoutBinding'
op|'('
op|')'
op|','
name|'LocalhostExchange'
op|'('
name|'host'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_binding'
op|'('
name|'DirectBinding'
op|'('
op|')'
op|','
name|'DirectExchange'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_binding'
op|'('
name|'TopicBinding'
op|'('
op|')'
op|','
name|'LocalhostExchange'
op|'('
name|'host'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MatchMakerStub
dedent|''
dedent|''
name|'class'
name|'MatchMakerStub'
op|'('
name|'MatchMakerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Match Maker where topics are untouched.\n\n    Useful for testing, or for AMQP/brokered queues.\n    Will not work where knowledge of hosts is known (i.e. zeromq)\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MatchMakerStub'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'add_binding'
op|'('
name|'FanoutBinding'
op|'('
op|')'
op|','
name|'StubExchange'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_binding'
op|'('
name|'DirectBinding'
op|'('
op|')'
op|','
name|'StubExchange'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_binding'
op|'('
name|'TopicBinding'
op|'('
op|')'
op|','
name|'StubExchange'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

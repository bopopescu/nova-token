begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2011 - 2012, Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nShared code between AMQP based openstack.common.rpc implementations.\n\nThe code in this module is shared between the rpc implemenations based on AMQP.\nSpecifically, this includes impl_kombu and impl_qpid.  impl_carrot also uses\nAMQP, but is deprecated and predates this code.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenpool'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'pools'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'queue'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'semaphore'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
comment|'# noqa'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'local'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|amqp_opts
name|'amqp_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'amqp_durable_queues'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|deprecated_name
name|'deprecated_name'
op|'='
string|"'rabbit_durable_queues'"
op|','
nl|'\n'
DECL|variable|deprecated_group
name|'deprecated_group'
op|'='
string|"'DEFAULT'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Use durable queues in amqp.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'amqp_auto_delete'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Auto-delete queues in amqp.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'cfg'
op|'.'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'amqp_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|UNIQUE_ID
name|'UNIQUE_ID'
op|'='
string|"'_unique_id'"
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pool
name|'class'
name|'Pool'
op|'('
name|'pools'
op|'.'
name|'Pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class that implements a Pool of Connections."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'connection_cls'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection_cls'
op|'='
name|'connection_cls'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'kwargs'
op|'.'
name|'setdefault'
op|'('
string|'"max_size"'
op|','
name|'self'
op|'.'
name|'conf'
op|'.'
name|'rpc_conn_pool_size'
op|')'
newline|'\n'
name|'kwargs'
op|'.'
name|'setdefault'
op|'('
string|'"order_as_stack"'
op|','
name|'True'
op|')'
newline|'\n'
name|'super'
op|'('
name|'Pool'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reply_proxy'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# TODO(comstud): Timeout connections not used in a while'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Pool creating new connection'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connection_cls'
op|'('
name|'self'
op|'.'
name|'conf'
op|')'
newline|'\n'
nl|'\n'
DECL|member|empty
dedent|''
name|'def'
name|'empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'self'
op|'.'
name|'free_items'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'get'
op|'('
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
comment|'# Force a new connection pool to be created.'
nl|'\n'
comment|'# Note that this was added due to failing unit test cases. The issue'
nl|'\n'
comment|'# is the above "while loop" gets all the cached connections from the'
nl|'\n'
comment|'# pool and closes them, but never returns them to the pool, a pool'
nl|'\n'
comment|'# leak. The unit tests hang waiting for an item to be returned to the'
nl|'\n'
comment|'# pool. The unit tests get here via the tearDown() method. In the run'
nl|'\n'
comment|'# time code, it gets here via cleanup() and only appears in service.py'
nl|'\n'
comment|'# just before doing a sys.exit(), so cleanup() only happens once and'
nl|'\n'
comment|'# the leakage is not a problem.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connection_cls'
op|'.'
name|'pool'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_pool_create_sem
dedent|''
dedent|''
name|'_pool_create_sem'
op|'='
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_connection_pool
name|'def'
name|'get_connection_pool'
op|'('
name|'conf'
op|','
name|'connection_cls'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'with'
name|'_pool_create_sem'
op|':'
newline|'\n'
comment|'# Make sure only one thread tries to create the connection pool.'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'connection_cls'
op|'.'
name|'pool'
op|':'
newline|'\n'
indent|'            '
name|'connection_cls'
op|'.'
name|'pool'
op|'='
name|'Pool'
op|'('
name|'conf'
op|','
name|'connection_cls'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'connection_cls'
op|'.'
name|'pool'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionContext
dedent|''
name|'class'
name|'ConnectionContext'
op|'('
name|'rpc_common'
op|'.'
name|'Connection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The class that is actually returned to the create_connection() caller.\n\n    This is essentially a wrapper around Connection that supports \'with\'.\n    It can also return a new Connection, or one from a pool.\n\n    The function will also catch when an instance of this class is to be\n    deleted.  With that we can return Connections to the pool on exceptions\n    and so forth without making the caller be responsible for catching them.\n    If possible the function makes sure to return a connection to the pool.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'connection_pool'
op|','
name|'pooled'
op|'='
name|'True'
op|','
name|'server_params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new connection, or get one from the pool."""'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'connection_pool'
op|'='
name|'connection_pool'
newline|'\n'
name|'if'
name|'pooled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection_pool'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection_pool'
op|'.'
name|'connection_cls'
op|'('
nl|'\n'
name|'conf'
op|','
nl|'\n'
name|'server_params'
op|'='
name|'server_params'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pooled'
op|'='
name|'pooled'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""When with ConnectionContext() is used, return self."""'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|_done
dedent|''
name|'def'
name|'_done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If the connection came from a pool, clean it up and put it back.\n        If it did not come from a pool, close it.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'pooled'
op|':'
newline|'\n'
comment|"# Reset the connection so it's ready for the next caller"
nl|'\n'
comment|'# to grab from the pool'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection_pool'
op|'.'
name|'put'
op|'('
name|'self'
op|'.'
name|'connection'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_value'
op|','
name|'tb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""End of \'with\' statement.  We\'re done here."""'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Caller is done with this connection.  Make sure we cleaned up."""'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Caller is done with this connection."""'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_consumer
dedent|''
name|'def'
name|'create_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'fanout'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'create_consumer'
op|'('
name|'topic'
op|','
name|'proxy'
op|','
name|'fanout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_worker
dedent|''
name|'def'
name|'create_worker'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'pool_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'create_worker'
op|'('
name|'topic'
op|','
name|'proxy'
op|','
name|'pool_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|join_consumer_pool
dedent|''
name|'def'
name|'join_consumer_pool'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'pool_name'
op|','
name|'topic'
op|','
name|'exchange_name'
op|','
nl|'\n'
name|'ack_on_error'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'join_consumer_pool'
op|'('
name|'callback'
op|','
nl|'\n'
name|'pool_name'
op|','
nl|'\n'
name|'topic'
op|','
nl|'\n'
name|'exchange_name'
op|','
nl|'\n'
name|'ack_on_error'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume_in_thread
dedent|''
name|'def'
name|'consume_in_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'consume_in_thread'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Proxy all other calls to the Connection instance."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'connection'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'rpc_common'
op|'.'
name|'InvalidRPCConnectionReuse'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReplyProxy
dedent|''
dedent|''
dedent|''
name|'class'
name|'ReplyProxy'
op|'('
name|'ConnectionContext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Connection class for RPC replies / callbacks."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_call_waiters'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_num_call_waiters'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_num_call_waiters_wrn_threshhold'
op|'='
number|'10'
newline|'\n'
name|'self'
op|'.'
name|'_reply_q'
op|'='
string|"'reply_'"
op|'+'
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'super'
op|'('
name|'ReplyProxy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|','
name|'pooled'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'declare_direct_consumer'
op|'('
name|'self'
op|'.'
name|'_reply_q'
op|','
name|'self'
op|'.'
name|'_process_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consume_in_thread'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_data
dedent|''
name|'def'
name|'_process_data'
op|'('
name|'self'
op|','
name|'message_data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg_id'
op|'='
name|'message_data'
op|'.'
name|'pop'
op|'('
string|"'_msg_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'waiter'
op|'='
name|'self'
op|'.'
name|'_call_waiters'
op|'.'
name|'get'
op|'('
name|'msg_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'waiter'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'No calling threads waiting for msg_id : %(msg_id)s'"
nl|'\n'
string|"', message : %(data)s'"
op|')'
op|','
op|'{'
string|"'msg_id'"
op|':'
name|'msg_id'
op|','
nl|'\n'
string|"'data'"
op|':'
name|'message_data'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'_call_waiters: %s'"
op|')'
op|'%'
name|'str'
op|'('
name|'self'
op|'.'
name|'_call_waiters'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'waiter'
op|'.'
name|'put'
op|'('
name|'message_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_call_waiter
dedent|''
dedent|''
name|'def'
name|'add_call_waiter'
op|'('
name|'self'
op|','
name|'waiter'
op|','
name|'msg_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_num_call_waiters'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_num_call_waiters'
op|'>'
name|'self'
op|'.'
name|'_num_call_waiters_wrn_threshhold'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Number of call waiters is greater than warning '"
nl|'\n'
string|"'threshhold: %d. There could be a MulticallProxyWaiter '"
nl|'\n'
string|"'leak.'"
op|')'
op|'%'
name|'self'
op|'.'
name|'_num_call_waiters_wrn_threshhold'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_num_call_waiters_wrn_threshhold'
op|'*='
number|'2'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_call_waiters'
op|'['
name|'msg_id'
op|']'
op|'='
name|'waiter'
newline|'\n'
nl|'\n'
DECL|member|del_call_waiter
dedent|''
name|'def'
name|'del_call_waiter'
op|'('
name|'self'
op|','
name|'msg_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_num_call_waiters'
op|'-='
number|'1'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_call_waiters'
op|'['
name|'msg_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_reply_q
dedent|''
name|'def'
name|'get_reply_q'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_reply_q'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|msg_reply
dedent|''
dedent|''
name|'def'
name|'msg_reply'
op|'('
name|'conf'
op|','
name|'msg_id'
op|','
name|'reply_q'
op|','
name|'connection_pool'
op|','
name|'reply'
op|'='
name|'None'
op|','
nl|'\n'
name|'failure'
op|'='
name|'None'
op|','
name|'ending'
op|'='
name|'False'
op|','
name|'log_failure'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a reply or an error on the channel signified by msg_id.\n\n    Failure should be a sys.exc_info() tuple.\n\n    """'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|':'
newline|'\n'
indent|'            '
name|'failure'
op|'='
name|'rpc_common'
op|'.'
name|'serialize_remote_exception'
op|'('
name|'failure'
op|','
nl|'\n'
name|'log_failure'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
op|'{'
string|"'result'"
op|':'
name|'reply'
op|','
string|"'failure'"
op|':'
name|'failure'
op|'}'
newline|'\n'
name|'if'
name|'ending'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'['
string|"'ending'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
comment|'# If a reply_q exists, add the msg_id to the reply and pass the'
nl|'\n'
comment|'# reply_q to direct_send() to use it as the response queue.'
nl|'\n'
comment|'# Otherwise use the msg_id for backward compatibilty.'
nl|'\n'
name|'if'
name|'reply_q'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'['
string|"'_msg_id'"
op|']'
op|'='
name|'msg_id'
newline|'\n'
name|'conn'
op|'.'
name|'direct_send'
op|'('
name|'reply_q'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'direct_send'
op|'('
name|'msg_id'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcContext
dedent|''
dedent|''
dedent|''
name|'class'
name|'RpcContext'
op|'('
name|'rpc_common'
op|'.'
name|'CommonRpcContext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Context that supports replying to a rpc.call."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'msg_id'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'msg_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reply_q'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'reply_q'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'conf'"
op|')'
newline|'\n'
name|'super'
op|'('
name|'RpcContext'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deepcopy
dedent|''
name|'def'
name|'deepcopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'self'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'values'
op|'['
string|"'conf'"
op|']'
op|'='
name|'self'
op|'.'
name|'conf'
newline|'\n'
name|'values'
op|'['
string|"'msg_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'msg_id'
newline|'\n'
name|'values'
op|'['
string|"'reply_q'"
op|']'
op|'='
name|'self'
op|'.'
name|'reply_q'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'('
op|'**'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reply
dedent|''
name|'def'
name|'reply'
op|'('
name|'self'
op|','
name|'reply'
op|'='
name|'None'
op|','
name|'failure'
op|'='
name|'None'
op|','
name|'ending'
op|'='
name|'False'
op|','
nl|'\n'
name|'connection_pool'
op|'='
name|'None'
op|','
name|'log_failure'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'msg_id'
op|':'
newline|'\n'
indent|'            '
name|'msg_reply'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'self'
op|'.'
name|'msg_id'
op|','
name|'self'
op|'.'
name|'reply_q'
op|','
name|'connection_pool'
op|','
nl|'\n'
name|'reply'
op|','
name|'failure'
op|','
name|'ending'
op|','
name|'log_failure'
op|')'
newline|'\n'
name|'if'
name|'ending'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'msg_id'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unpack_context
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'unpack_context'
op|'('
name|'conf'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unpack context from msg."""'
newline|'\n'
name|'context_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'list'
op|'('
name|'msg'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): Some versions of python don't like unicode keys"
nl|'\n'
comment|'#             in kwargs.'
nl|'\n'
indent|'        '
name|'key'
op|'='
name|'str'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'_context_'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'msg'
op|'.'
name|'pop'
op|'('
name|'key'
op|')'
newline|'\n'
name|'context_dict'
op|'['
name|'key'
op|'['
number|'9'
op|':'
op|']'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'context_dict'
op|'['
string|"'msg_id'"
op|']'
op|'='
name|'msg'
op|'.'
name|'pop'
op|'('
string|"'_msg_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'context_dict'
op|'['
string|"'reply_q'"
op|']'
op|'='
name|'msg'
op|'.'
name|'pop'
op|'('
string|"'_reply_q'"
op|','
name|'None'
op|')'
newline|'\n'
name|'context_dict'
op|'['
string|"'conf'"
op|']'
op|'='
name|'conf'
newline|'\n'
name|'ctx'
op|'='
name|'RpcContext'
op|'.'
name|'from_dict'
op|'('
name|'context_dict'
op|')'
newline|'\n'
name|'rpc_common'
op|'.'
name|'_safe_log'
op|'('
name|'LOG'
op|'.'
name|'debug'
op|','
name|'_'
op|'('
string|"'unpacked context: %s'"
op|')'
op|','
name|'ctx'
op|'.'
name|'to_dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'ctx'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|pack_context
dedent|''
name|'def'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Pack context into msg.\n\n    Values for message keys need to be less than 255 chars, so we pull\n    context out into a bunch of separate keys. If we want to support\n    more arguments in rabbit messages, we may want to do the same\n    for args at some point.\n\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'context'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context_d'
op|'='
name|'dict'
op|'('
op|'['
op|'('
string|"'_context_%s'"
op|'%'
name|'key'
op|','
name|'value'
op|')'
nl|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'value'
op|')'
name|'in'
name|'context'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'context_d'
op|'='
name|'dict'
op|'('
op|'['
op|'('
string|"'_context_%s'"
op|'%'
name|'key'
op|','
name|'value'
op|')'
nl|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'value'
op|')'
name|'in'
name|'context'
op|'.'
name|'to_dict'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'.'
name|'update'
op|'('
name|'context_d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_MsgIdCache
dedent|''
name|'class'
name|'_MsgIdCache'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This class checks any duplicate messages."""'
newline|'\n'
nl|'\n'
comment|'# NOTE: This value is considered can be a configuration item, but'
nl|'\n'
comment|'#       it is not necessary to change its value in most cases,'
nl|'\n'
comment|'#       so let this value as static for now.'
nl|'\n'
DECL|variable|DUP_MSG_CHECK_SIZE
name|'DUP_MSG_CHECK_SIZE'
op|'='
number|'16'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'prev_msgids'
op|'='
name|'collections'
op|'.'
name|'deque'
op|'('
op|'['
op|']'
op|','
nl|'\n'
name|'maxlen'
op|'='
name|'self'
op|'.'
name|'DUP_MSG_CHECK_SIZE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_duplicate_message
dedent|''
name|'def'
name|'check_duplicate_message'
op|'('
name|'self'
op|','
name|'message_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""AMQP consumers may read same message twice when exceptions occur\n           before ack is returned. This method prevents doing it.\n        """'
newline|'\n'
name|'if'
name|'UNIQUE_ID'
name|'in'
name|'message_data'
op|':'
newline|'\n'
indent|'            '
name|'msg_id'
op|'='
name|'message_data'
op|'['
name|'UNIQUE_ID'
op|']'
newline|'\n'
name|'if'
name|'msg_id'
name|'not'
name|'in'
name|'self'
op|'.'
name|'prev_msgids'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'prev_msgids'
op|'.'
name|'append'
op|'('
name|'msg_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'rpc_common'
op|'.'
name|'DuplicateMessageError'
op|'('
name|'msg_id'
op|'='
name|'msg_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_add_unique_id
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Add unique_id for checking duplicate messages."""'
newline|'\n'
name|'unique_id'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'msg'
op|'.'
name|'update'
op|'('
op|'{'
name|'UNIQUE_ID'
op|':'
name|'unique_id'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'UNIQUE_ID is %s.'"
op|')'
op|'%'
op|'('
name|'unique_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ThreadPoolWithWait
dedent|''
name|'class'
name|'_ThreadPoolWithWait'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for a delayed invocation manager.\n\n    Used by the Connection class to start up green threads\n    to handle incoming messages.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'pool'
op|'='
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
name|'conf'
op|'.'
name|'rpc_thread_pool_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection_pool'
op|'='
name|'connection_pool'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wait for all callback threads to exit."""'
newline|'\n'
name|'self'
op|'.'
name|'pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CallbackWrapper
dedent|''
dedent|''
name|'class'
name|'CallbackWrapper'
op|'('
name|'_ThreadPoolWithWait'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wraps a straight callback.\n\n    Allows it to be invoked in a green thread.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'callback'
op|','
name|'connection_pool'
op|','
nl|'\n'
name|'wait_for_consumers'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initiates CallbackWrapper object.\n\n        :param conf: cfg.CONF instance\n        :param callback: a callable (probably a function)\n        :param connection_pool: connection pool as returned by\n                                get_connection_pool()\n        :param wait_for_consumers: wait for all green threads to\n                                   complete and raise the last\n                                   caught exception, if any.\n\n        """'
newline|'\n'
name|'super'
op|'('
name|'CallbackWrapper'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'conf'
op|'='
name|'conf'
op|','
nl|'\n'
name|'connection_pool'
op|'='
name|'connection_pool'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'wait_for_consumers'
op|'='
name|'wait_for_consumers'
newline|'\n'
name|'self'
op|'.'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_wrap
dedent|''
name|'def'
name|'_wrap'
op|'('
name|'self'
op|','
name|'message_data'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrap the callback invocation to catch exceptions.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callback'
op|'('
name|'message_data'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'message_data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'pool'
op|'.'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'_wrap'
op|','
name|'message_data'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'wait_for_consumers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'exc_info'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'exc_info'
op|'['
number|'1'
op|']'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'exc_info'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyCallback
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ProxyCallback'
op|'('
name|'_ThreadPoolWithWait'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Calls methods on a proxy object based on method and args."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'proxy'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ProxyCallback'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'conf'
op|'='
name|'conf'
op|','
nl|'\n'
name|'connection_pool'
op|'='
name|'connection_pool'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'proxy'
op|'='
name|'proxy'
newline|'\n'
name|'self'
op|'.'
name|'msg_id_cache'
op|'='
name|'_MsgIdCache'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'message_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consumer callback to call a method on a proxy object.\n\n        Parses the message for validity and fires off a thread to call the\n        proxy object method.\n\n        Message data should be a dictionary with two keys:\n            method: string representing the method to call\n            args: dictionary of arg: value\n\n        Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}\n\n        """'
newline|'\n'
comment|'# It is important to clear the context here, because at this point'
nl|'\n'
comment|'# the previous context is stored in local.store.context'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'local'
op|'.'
name|'store'
op|','
string|"'context'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'local'
op|'.'
name|'store'
op|'.'
name|'context'
newline|'\n'
dedent|''
name|'rpc_common'
op|'.'
name|'_safe_log'
op|'('
name|'LOG'
op|'.'
name|'debug'
op|','
name|'_'
op|'('
string|"'received %s'"
op|')'
op|','
name|'message_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg_id_cache'
op|'.'
name|'check_duplicate_message'
op|'('
name|'message_data'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'unpack_context'
op|'('
name|'self'
op|'.'
name|'conf'
op|','
name|'message_data'
op|')'
newline|'\n'
name|'method'
op|'='
name|'message_data'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
newline|'\n'
name|'args'
op|'='
name|'message_data'
op|'.'
name|'get'
op|'('
string|"'args'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'version'
op|'='
name|'message_data'
op|'.'
name|'get'
op|'('
string|"'version'"
op|')'
newline|'\n'
name|'namespace'
op|'='
name|'message_data'
op|'.'
name|'get'
op|'('
string|"'namespace'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'method'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'no method for message: %s'"
op|')'
op|'%'
name|'message_data'
op|')'
newline|'\n'
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'_'
op|'('
string|"'No method for message: %s'"
op|')'
op|'%'
name|'message_data'
op|','
nl|'\n'
name|'connection_pool'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pool'
op|'.'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'_process_data'
op|','
name|'ctxt'
op|','
name|'version'
op|','
name|'method'
op|','
nl|'\n'
name|'namespace'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_data
dedent|''
name|'def'
name|'_process_data'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'version'
op|','
name|'method'
op|','
name|'namespace'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process a message in a new thread.\n\n        If the proxy object we have has a dispatch method\n        (see rpc.dispatcher.RpcDispatcher), pass it the version,\n        method, and args and let it dispatch as appropriate.  If not, use\n        the old behavior of magically calling the specified method on the\n        proxy we have here.\n        """'
newline|'\n'
name|'ctxt'
op|'.'
name|'update_store'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'='
name|'self'
op|'.'
name|'proxy'
op|'.'
name|'dispatch'
op|'('
name|'ctxt'
op|','
name|'version'
op|','
name|'method'
op|','
name|'namespace'
op|','
nl|'\n'
op|'**'
name|'args'
op|')'
newline|'\n'
comment|'# Check if the result was a generator'
nl|'\n'
name|'if'
name|'inspect'
op|'.'
name|'isgenerator'
op|'('
name|'rval'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'x'
name|'in'
name|'rval'
op|':'
newline|'\n'
indent|'                    '
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'x'
op|','
name|'None'
op|','
name|'connection_pool'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'rval'
op|','
name|'None'
op|','
name|'connection_pool'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|')'
newline|'\n'
comment|'# This final None tells multicall that it is done.'
nl|'\n'
dedent|''
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'ending'
op|'='
name|'True'
op|','
name|'connection_pool'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'rpc_common'
op|'.'
name|'ClientException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Expected exception during message handling (%s)'"
op|')'
op|'%'
nl|'\n'
name|'e'
op|'.'
name|'_exc_info'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'None'
op|','
name|'e'
op|'.'
name|'_exc_info'
op|','
nl|'\n'
name|'connection_pool'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|','
nl|'\n'
name|'log_failure'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# sys.exc_info() is deleted by LOG.exception().'
nl|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Exception during message handling'"
op|')'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'None'
op|','
name|'exc_info'
op|','
name|'connection_pool'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MulticallProxyWaiter
dedent|''
dedent|''
dedent|''
name|'class'
name|'MulticallProxyWaiter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'msg_id'
op|','
name|'timeout'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_msg_id'
op|'='
name|'msg_id'
newline|'\n'
name|'self'
op|'.'
name|'_timeout'
op|'='
name|'timeout'
name|'or'
name|'conf'
op|'.'
name|'rpc_response_timeout'
newline|'\n'
name|'self'
op|'.'
name|'_reply_proxy'
op|'='
name|'connection_pool'
op|'.'
name|'reply_proxy'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_got_ending'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'_dataqueue'
op|'='
name|'queue'
op|'.'
name|'LightQueue'
op|'('
op|')'
newline|'\n'
comment|"# Add this caller to the reply proxy's call_waiters"
nl|'\n'
name|'self'
op|'.'
name|'_reply_proxy'
op|'.'
name|'add_call_waiter'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_msg_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg_id_cache'
op|'='
name|'_MsgIdCache'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|put
dedent|''
name|'def'
name|'put'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_dataqueue'
op|'.'
name|'put'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|done
dedent|''
name|'def'
name|'done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_done'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_done'
op|'='
name|'True'
newline|'\n'
comment|"# Remove this caller from reply proxy's call_waiters"
nl|'\n'
name|'self'
op|'.'
name|'_reply_proxy'
op|'.'
name|'del_call_waiter'
op|'('
name|'self'
op|'.'
name|'_msg_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_data
dedent|''
name|'def'
name|'_process_data'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'msg_id_cache'
op|'.'
name|'check_duplicate_message'
op|'('
name|'data'
op|')'
newline|'\n'
name|'if'
name|'data'
op|'['
string|"'failure'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'failure'
op|'='
name|'data'
op|'['
string|"'failure'"
op|']'
newline|'\n'
name|'result'
op|'='
name|'rpc_common'
op|'.'
name|'deserialize_remote_exception'
op|'('
name|'self'
op|'.'
name|'_conf'
op|','
nl|'\n'
name|'failure'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'data'
op|'.'
name|'get'
op|'('
string|"'ending'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_got_ending'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'data'
op|'['
string|"'result'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a result until we get a reply with an \'ending\' flag."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_done'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
name|'self'
op|'.'
name|'_dataqueue'
op|'.'
name|'get'
op|'('
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_timeout'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_process_data'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'queue'
op|'.'
name|'Empty'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'rpc_common'
op|'.'
name|'Timeout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_got_ending'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'result'
newline|'\n'
dedent|''
name|'yield'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_connection
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_connection'
op|'('
name|'conf'
op|','
name|'new'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a connection."""'
newline|'\n'
name|'return'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|','
name|'pooled'
op|'='
name|'not'
name|'new'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_reply_proxy_create_sem
dedent|''
name|'_reply_proxy_create_sem'
op|'='
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|multicall
name|'def'
name|'multicall'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make a call that returns multiple times."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Making synchronous call on %s ...'"
op|')'
op|','
name|'topic'
op|')'
newline|'\n'
name|'msg_id'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'msg'
op|'.'
name|'update'
op|'('
op|'{'
string|"'_msg_id'"
op|':'
name|'msg_id'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'MSG_ID is %s'"
op|')'
op|'%'
op|'('
name|'msg_id'
op|')'
op|')'
newline|'\n'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'_reply_proxy_create_sem'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'connection_pool'
op|'.'
name|'reply_proxy'
op|':'
newline|'\n'
indent|'            '
name|'connection_pool'
op|'.'
name|'reply_proxy'
op|'='
name|'ReplyProxy'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'msg'
op|'.'
name|'update'
op|'('
op|'{'
string|"'_reply_q'"
op|':'
name|'connection_pool'
op|'.'
name|'reply_proxy'
op|'.'
name|'get_reply_q'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
name|'wait_msg'
op|'='
name|'MulticallProxyWaiter'
op|'('
name|'conf'
op|','
name|'msg_id'
op|','
name|'timeout'
op|','
name|'connection_pool'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'topic_send'
op|'('
name|'topic'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|','
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wait_msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|call
dedent|''
name|'def'
name|'call'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic and wait for a response."""'
newline|'\n'
name|'rv'
op|'='
name|'multicall'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|','
name|'connection_pool'
op|')'
newline|'\n'
comment|'# NOTE(vish): return the last result from the multicall'
nl|'\n'
name|'rv'
op|'='
name|'list'
op|'('
name|'rv'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rv'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'rv'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic without waiting for a response."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Making asynchronous cast on %s...'"
op|')'
op|','
name|'topic'
op|')'
newline|'\n'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'topic_send'
op|'('
name|'topic'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fanout_cast
dedent|''
dedent|''
name|'def'
name|'fanout_cast'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a fanout exchange without waiting for a response."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Making asynchronous fanout cast...'"
op|')'
op|')'
newline|'\n'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'fanout_send'
op|'('
name|'topic'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cast_to_server
dedent|''
dedent|''
name|'def'
name|'cast_to_server'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'server_params'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic to a specific server."""'
newline|'\n'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|','
name|'pooled'
op|'='
name|'False'
op|','
nl|'\n'
name|'server_params'
op|'='
name|'server_params'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'topic_send'
op|'('
name|'topic'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fanout_cast_to_server
dedent|''
dedent|''
name|'def'
name|'fanout_cast_to_server'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'server_params'
op|','
name|'topic'
op|','
name|'msg'
op|','
nl|'\n'
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a fanout exchange to a specific server."""'
newline|'\n'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|','
name|'pooled'
op|'='
name|'False'
op|','
nl|'\n'
name|'server_params'
op|'='
name|'server_params'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'fanout_send'
op|'('
name|'topic'
op|','
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|notify
dedent|''
dedent|''
name|'def'
name|'notify'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'connection_pool'
op|','
name|'envelope'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a notification event on a topic."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Sending %(event_type)s on %(topic)s'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'event_type'
op|'='
name|'msg'
op|'.'
name|'get'
op|'('
string|"'event_type'"
op|')'
op|','
nl|'\n'
name|'topic'
op|'='
name|'topic'
op|')'
op|')'
newline|'\n'
name|'_add_unique_id'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
name|'conf'
op|','
name|'connection_pool'
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'envelope'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'rpc_common'
op|'.'
name|'serialize_msg'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'notify_send'
op|'('
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cleanup
dedent|''
dedent|''
name|'def'
name|'cleanup'
op|'('
name|'connection_pool'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'connection_pool'
op|':'
newline|'\n'
indent|'        '
name|'connection_pool'
op|'.'
name|'empty'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_control_exchange
dedent|''
dedent|''
name|'def'
name|'get_control_exchange'
op|'('
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'conf'
op|'.'
name|'control_exchange'
newline|'\n'
dedent|''
endmarker|''
end_unit

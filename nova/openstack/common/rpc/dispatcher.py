begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCode for rpc message dispatching.\n\nMessages that come in have a version number associated with them.  RPC API\nversion numbers are in the form:\n\n    Major.Minor\n\nFor a given message with version X.Y, the receiver must be marked as able to\nhandle messages of version A.B, where:\n\n    A = X\n\n    B >= Y\n\nThe Major version number would be incremented for an almost completely new API.\nThe Minor version number would be incremented for backwards compatible changes\nto an existing API.  A backwards compatible change could be something like\nadding a new method, adding an argument to an existing method (but not\nrequiring it), or changing the type for an existing argument (but still\nhandling the old type as well).\n\nThe conversion over to a versioned API must be done on both the client side and\nserver side of the API at the same time.  However, as the code stands today,\nthere can be both versioned and unversioned APIs implemented in the same code\nbase.\n\nEXAMPLES\n========\n\nNova was the first project to use versioned rpc APIs.  Consider the compute rpc\nAPI as an example.  The client side is in nova/compute/rpcapi.py and the server\nside is in nova/compute/manager.py.\n\n\nExample 1) Adding a new method.\n-------------------------------\n\nAdding a new method is a backwards compatible change.  It should be added to\nnova/compute/manager.py, and RPC_API_VERSION should be bumped from X.Y to\nX.Y+1.  On the client side, the new method in nova/compute/rpcapi.py should\nhave a specific version specified to indicate the minimum API version that must\nbe implemented for the method to be supported.  For example::\n\n    def get_host_uptime(self, ctxt, host):\n        topic = _compute_topic(self.topic, ctxt, host, None)\n        return self.call(ctxt, self.make_msg(\'get_host_uptime\'), topic,\n                version=\'1.1\')\n\nIn this case, version \'1.1\' is the first version that supported the\nget_host_uptime() method.\n\n\nExample 2) Adding a new parameter.\n----------------------------------\n\nAdding a new parameter to an rpc method can be made backwards compatible.  The\nRPC_API_VERSION on the server side (nova/compute/manager.py) should be bumped.\nThe implementation of the method must not expect the parameter to be present.::\n\n    def some_remote_method(self, arg1, arg2, newarg=None):\n        # The code needs to deal with newarg=None for cases\n        # where an older client sends a message without it.\n        pass\n\nOn the client side, the same changes should be made as in example 1.  The\nminimum version that supports the new parameter should be specified.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcDispatcher
name|'class'
name|'RpcDispatcher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Dispatch rpc messages according to the requested API version.\n\n    This class can be used as the top level \'manager\' for a service.  It\n    contains a list of underlying managers that have an API_VERSION attribute.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'callbacks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize the rpc dispatcher.\n\n        :param callbacks: List of proxy objects that are an instance\n                          of a class with rpc methods exposed.  Each proxy\n                          object should have an RPC_API_VERSION attribute.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callbacks'
op|'='
name|'callbacks'
newline|'\n'
name|'super'
op|'('
name|'RpcDispatcher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|dispatch
dedent|''
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'version'
op|','
name|'method'
op|','
name|'namespace'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Dispatch a message based on a requested version.\n\n        :param ctxt: The request context\n        :param version: The requested API version from the incoming message\n        :param method: The method requested to be called by the incoming\n                       message.\n        :param namespace: The namespace for the requested method.  If None,\n                          the dispatcher will look for a method on a callback\n                          object with no namespace set.\n        :param kwargs: A dict of keyword arguments to be passed to the method.\n\n        :returns: Whatever is returned by the underlying method that gets\n                  called.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
dedent|''
name|'had_compatible'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'proxyobj'
name|'in'
name|'self'
op|'.'
name|'callbacks'
op|':'
newline|'\n'
comment|'# Check for namespace compatibility'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cb_namespace'
op|'='
name|'proxyobj'
op|'.'
name|'RPC_API_NAMESPACE'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'cb_namespace'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'namespace'
op|'!='
name|'cb_namespace'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Check for version compatibility'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'rpc_api_version'
op|'='
name|'proxyobj'
op|'.'
name|'RPC_API_VERSION'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'rpc_api_version'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
dedent|''
name|'is_compatible'
op|'='
name|'rpc_common'
op|'.'
name|'version_is_compatible'
op|'('
name|'rpc_api_version'
op|','
nl|'\n'
name|'version'
op|')'
newline|'\n'
name|'had_compatible'
op|'='
name|'had_compatible'
name|'or'
name|'is_compatible'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'proxyobj'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'is_compatible'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'getattr'
op|'('
name|'proxyobj'
op|','
name|'method'
op|')'
op|'('
name|'ctxt'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'had_compatible'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
string|'"No such RPC function \'%s\'"'
op|'%'
name|'method'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'rpc_common'
op|'.'
name|'UnsupportedRpcVersion'
op|'('
name|'version'
op|'='
name|'version'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

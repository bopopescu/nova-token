begin_unit
comment|'#    Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Provides the definition of an RPC serialization handler"""'
newline|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Serializer
name|'class'
name|'Serializer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generic (de-)serialization definition base class."""'
newline|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'abc'
op|'.'
name|'ABCMeta'
newline|'\n'
nl|'\n'
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|serialize_entity
name|'def'
name|'serialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialize something to primitive form.\n\n        :param context: Security context\n        :param entity: Entity to be serialized\n        :returns: Serialized form of entity\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|deserialize_entity
name|'def'
name|'deserialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialize something from primitive form.\n\n        :param context: Security context\n        :param entity: Primitive to be deserialized\n        :returns: Deserialized form of entity\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoOpSerializer
dedent|''
dedent|''
name|'class'
name|'NoOpSerializer'
op|'('
name|'Serializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A serializer that does nothing."""'
newline|'\n'
nl|'\n'
DECL|member|serialize_entity
name|'def'
name|'serialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'entity'
newline|'\n'
nl|'\n'
DECL|member|deserialize_entity
dedent|''
name|'def'
name|'deserialize_entity'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'entity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'entity'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

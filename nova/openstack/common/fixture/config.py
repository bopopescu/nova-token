begin_unit
comment|'#'
nl|'\n'
comment|'# Copyright 2013 Mirantis, Inc.'
nl|'\n'
comment|'# Copyright 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'fixtures'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Config
name|'class'
name|'Config'
op|'('
name|'fixtures'
op|'.'
name|'Fixture'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allows overriding configuration settings for the test.\n\n    `conf` will be reset on cleanup.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|'='
name|'cfg'
op|'.'
name|'CONF'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Config'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(morganfainberg): unregister must be added to cleanup before'
nl|'\n'
comment|'# reset is because cleanup works in reverse order of registered items,'
nl|'\n'
comment|'# and a reset must occur before unregistering options can occur.'
nl|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'_unregister_config_opts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'conf'
op|'.'
name|'reset'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_registered_config_opts'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|config
dedent|''
name|'def'
name|'config'
op|'('
name|'self'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override configuration values.\n\n        The keyword arguments are the names of configuration options to\n        override and their values.\n\n        If a `group` argument is supplied, the overrides are applied to\n        the specified configuration option group, otherwise the overrides\n        are applied to the ``default`` group.\n\n        """'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'kw'
op|'.'
name|'pop'
op|'('
string|"'group'"
op|','
name|'None'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conf'
op|'.'
name|'set_override'
op|'('
name|'k'
op|','
name|'v'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unregister_config_opts
dedent|''
dedent|''
name|'def'
name|'_unregister_config_opts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'group'
name|'in'
name|'self'
op|'.'
name|'_registered_config_opts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conf'
op|'.'
name|'unregister_opts'
op|'('
name|'self'
op|'.'
name|'_registered_config_opts'
op|'['
name|'group'
op|']'
op|','
nl|'\n'
name|'group'
op|'='
name|'group'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_opt
dedent|''
dedent|''
name|'def'
name|'register_opt'
op|'('
name|'self'
op|','
name|'opt'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a single option for the test run.\n\n        Options registered in this manner will automatically be unregistered\n        during cleanup.\n\n        If a `group` argument is supplied, it will register the new option\n        to that group, otherwise the option is registered to the ``default``\n        group.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'conf'
op|'.'
name|'register_opt'
op|'('
name|'opt'
op|','
name|'group'
op|'='
name|'group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_registered_config_opts'
op|'.'
name|'setdefault'
op|'('
name|'group'
op|','
name|'set'
op|'('
op|')'
op|')'
op|'.'
name|'add'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_opts
dedent|''
name|'def'
name|'register_opts'
op|'('
name|'self'
op|','
name|'opts'
op|','
name|'group'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register multiple options for the test run.\n\n        This works in the same manner as register_opt() but takes a list of\n        options as the first argument. All arguments will be registered to the\n        same group if the ``group`` argument is supplied, otherwise all options\n        will be registered to the ``default`` group.\n        """'
newline|'\n'
name|'for'
name|'opt'
name|'in'
name|'opts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_opt'
op|'('
name|'opt'
op|','
name|'group'
op|'='
name|'group'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'plugin'
name|'import'
name|'plugin'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_CallbackNotifier
name|'class'
name|'_CallbackNotifier'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages plugin-defined notification callbacks.\n\n    For each Plugin, a CallbackNotifier will be added to the\n    notification driver list.  Calls to notify() with appropriate\n    messages will be hooked and prompt callbacks.\n\n    A callback should look like this:\n      def callback(context, message, user_data)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_callback_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_add_callback
dedent|''
name|'def'
name|'_add_callback'
op|'('
name|'self'
op|','
name|'event_type'
op|','
name|'callback'
op|','
name|'user_data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'callback_list'
op|'='
name|'self'
op|'.'
name|'_callback_dict'
op|'.'
name|'get'
op|'('
name|'event_type'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'callback_list'
op|'.'
name|'append'
op|'('
op|'{'
string|"'function'"
op|':'
name|'callback'
op|','
nl|'\n'
string|"'user_data'"
op|':'
name|'user_data'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_callback_dict'
op|'['
name|'event_type'
op|']'
op|'='
name|'callback_list'
newline|'\n'
nl|'\n'
DECL|member|_remove_callback
dedent|''
name|'def'
name|'_remove_callback'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'callback_list'
name|'in'
name|'self'
op|'.'
name|'_callback_dict'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'entry'
name|'in'
name|'callback_list'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'entry'
op|'['
string|"'function'"
op|']'
op|'=='
name|'callback'
op|':'
newline|'\n'
indent|'                    '
name|'callback_list'
op|'.'
name|'remove'
op|'('
name|'entry'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notify
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'notify'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'message'
op|'.'
name|'get'
op|'('
string|"'event_type'"
op|')'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_callback_dict'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'entry'
name|'in'
name|'self'
op|'.'
name|'_callback_dict'
op|'['
name|'message'
op|'.'
name|'get'
op|'('
string|"'event_type'"
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'entry'
op|'['
string|"'function'"
op|']'
op|'('
name|'context'
op|','
name|'message'
op|','
name|'entry'
op|'.'
name|'get'
op|'('
string|"'user_data'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|callbacks
dedent|''
dedent|''
name|'def'
name|'callbacks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_callback_dict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CallbackPlugin
dedent|''
dedent|''
name|'class'
name|'CallbackPlugin'
op|'('
name|'plugin'
op|'.'
name|'Plugin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Plugin with a simple callback interface.\n\n    This class is provided as a convenience for producing a simple\n    plugin that only watches a couple of events.  For example, here\'s\n    a subclass which prints a line the first time an instance is created.\n\n    class HookInstanceCreation(CallbackPlugin):\n\n        def __init__(self, _service_name):\n            super(HookInstanceCreation, self).__init__()\n            self._add_callback(self.magic, \'compute.instance.create.start\')\n\n        def magic(self):\n            print "An instance was created!"\n            self._remove_callback(self, self.magic)\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'service_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CallbackPlugin'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_callback_notifier'
op|'='
name|'_CallbackNotifier'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_notifier'
op|'('
name|'self'
op|'.'
name|'_callback_notifier'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_callback
dedent|''
name|'def'
name|'_add_callback'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'event_type'
op|','
name|'user_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add callback for a given event notification.\n\n        Subclasses can call this as an alternative to implementing\n        a fullblown notify notifier.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_callback_notifier'
op|'.'
name|'_add_callback'
op|'('
name|'event_type'
op|','
name|'callback'
op|','
name|'user_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_callback
dedent|''
name|'def'
name|'_remove_callback'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove all notification callbacks to specified function."""'
newline|'\n'
name|'self'
op|'.'
name|'_callback_notifier'
op|'.'
name|'_remove_callback'
op|'('
name|'callback'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

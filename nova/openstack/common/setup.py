begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nUtilities with minimum-depends for use in setup.py\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'setuptools'
op|'.'
name|'command'
name|'import'
name|'sdist'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_mailmap
name|'def'
name|'parse_mailmap'
op|'('
name|'mailmap'
op|'='
string|"'.mailmap'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'mailmap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
name|'mailmap'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
name|'and'
string|"' '"
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'                '
name|'canonical_email'
op|','
name|'alias'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'l'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
nl|'\n'
name|'if'
name|'x'
op|'.'
name|'startswith'
op|'('
string|"'<'"
op|')'
op|']'
newline|'\n'
name|'mapping'
op|'['
name|'alias'
op|']'
op|'='
name|'canonical_email'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|canonicalize_emails
dedent|''
name|'def'
name|'canonicalize_emails'
op|'('
name|'changelog'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Takes in a string and an email alias mapping and replaces all\n       instances of the aliases in the string with their real email.\n    """'
newline|'\n'
name|'for'
name|'alias'
op|','
name|'email'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'changelog'
op|'='
name|'changelog'
op|'.'
name|'replace'
op|'('
name|'alias'
op|','
name|'email'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'changelog'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Get requirements from the first file that exists'
nl|'\n'
DECL|function|get_reqs_from_files
dedent|''
name|'def'
name|'get_reqs_from_files'
op|'('
name|'requirements_files'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'requirements_file'
name|'in'
name|'requirements_files'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'requirements_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'open'
op|'('
name|'requirements_file'
op|','
string|"'r'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_requirements
dedent|''
name|'def'
name|'parse_requirements'
op|'('
name|'requirements_files'
op|'='
op|'['
string|"'requirements.txt'"
op|','
nl|'\n'
string|"'tools/pip-requires'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'requirements'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'get_reqs_from_files'
op|'('
name|'requirements_files'
op|')'
op|':'
newline|'\n'
comment|'# For the requirements list, we need to inject only the portion'
nl|'\n'
comment|"# after egg= so that distutils knows the package it's looking for"
nl|'\n'
comment|'# such as:'
nl|'\n'
comment|'# -e git://github.com/openstack/nova/master#egg=nova'
nl|'\n'
indent|'        '
name|'if'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\s*-e\\s+'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'requirements'
op|'.'
name|'append'
op|'('
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'\\s*-e\\s+.*#egg=(.*)$'"
op|','
string|"r'\\1'"
op|','
nl|'\n'
name|'line'
op|')'
op|')'
newline|'\n'
comment|'# such as:'
nl|'\n'
comment|'# http://github.com/openstack/nova/zipball/master#egg=nova'
nl|'\n'
dedent|''
name|'elif'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\s*https?:'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'requirements'
op|'.'
name|'append'
op|'('
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'\\s*https?:.*#egg=(.*)$'"
op|','
string|"r'\\1'"
op|','
nl|'\n'
name|'line'
op|')'
op|')'
newline|'\n'
comment|"# -f lines are for index locations, and don't get used here"
nl|'\n'
dedent|''
name|'elif'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\s*-f\\s+'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# argparse is part of the standard library starting with 2.7'
nl|'\n'
comment|'# adding it to the requirements list screws distro installs'
nl|'\n'
dedent|''
name|'elif'
name|'line'
op|'=='
string|"'argparse'"
name|'and'
name|'sys'
op|'.'
name|'version_info'
op|'>='
op|'('
number|'2'
op|','
number|'7'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'requirements'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'requirements'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_dependency_links
dedent|''
name|'def'
name|'parse_dependency_links'
op|'('
name|'requirements_files'
op|'='
op|'['
string|"'requirements.txt'"
op|','
nl|'\n'
string|"'tools/pip-requires'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dependency_links'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# dependency_links inject alternate locations to find packages listed'
nl|'\n'
comment|'# in requirements'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'get_reqs_from_files'
op|'('
name|'requirements_files'
op|')'
op|':'
newline|'\n'
comment|'# skip comments and blank lines'
nl|'\n'
indent|'        '
name|'if'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'(\\s*#)|(\\s*$)'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
comment|'# lines with -e or -f need the whole line, minus the flag'
nl|'\n'
dedent|''
name|'if'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\s*-[ef]\\s+'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dependency_links'
op|'.'
name|'append'
op|'('
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'\\s*-[ef]\\s+'"
op|','
string|"''"
op|','
name|'line'
op|')'
op|')'
newline|'\n'
comment|'# lines that are only urls can go in unmolested'
nl|'\n'
dedent|''
name|'elif'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\s*https?:'"
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dependency_links'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'dependency_links'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_requirements
dedent|''
name|'def'
name|'write_requirements'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'venv'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'VIRTUAL_ENV'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'venv'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
string|'"requirements.txt"'
op|','
string|'"w"'
op|')'
name|'as'
name|'req_file'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
op|'['
string|'"pip"'
op|','
string|'"-E"'
op|','
name|'venv'
op|','
string|'"freeze"'
op|','
string|'"-l"'
op|']'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|')'
newline|'\n'
name|'requirements'
op|'='
name|'output'
op|'.'
name|'communicate'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'req_file'
op|'.'
name|'write'
op|'('
name|'requirements'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_run_shell_command
dedent|''
dedent|''
dedent|''
name|'def'
name|'_run_shell_command'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'output'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
op|'['
string|'"/bin/sh"'
op|','
string|'"-c"'
op|','
name|'cmd'
op|']'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|')'
newline|'\n'
name|'out'
op|'='
name|'output'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'out'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'out'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'out'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_git_next_version_suffix
dedent|''
name|'def'
name|'_get_git_next_version_suffix'
op|'('
name|'branch_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'datestamp'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
op|'.'
name|'strftime'
op|'('
string|"'%Y%m%d'"
op|')'
newline|'\n'
name|'if'
name|'branch_name'
op|'=='
string|"'milestone-proposed'"
op|':'
newline|'\n'
indent|'        '
name|'revno_prefix'
op|'='
string|'"r"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'revno_prefix'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'_run_shell_command'
op|'('
string|'"git fetch origin +refs/meta/*:refs/remotes/meta/*"'
op|')'
newline|'\n'
name|'milestone_cmd'
op|'='
string|'"git show meta/openstack/release:%s"'
op|'%'
name|'branch_name'
newline|'\n'
name|'milestonever'
op|'='
name|'_run_shell_command'
op|'('
name|'milestone_cmd'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'milestonever'
op|':'
newline|'\n'
indent|'        '
name|'milestonever'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'post_version'
op|'='
name|'_get_git_post_version'
op|'('
op|')'
newline|'\n'
comment|'# post version should look like:'
nl|'\n'
comment|'# 0.1.1.4.gcc9e28a'
nl|'\n'
comment|'# where the bit after the last . is the short sha, and the bit between'
nl|'\n'
comment|'# the last and second to last is the revno count'
nl|'\n'
op|'('
name|'revno'
op|','
name|'sha'
op|')'
op|'='
name|'post_version'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|'-'
number|'2'
op|':'
op|']'
newline|'\n'
name|'first_half'
op|'='
string|'"%s~%s"'
op|'%'
op|'('
name|'milestonever'
op|','
name|'datestamp'
op|')'
newline|'\n'
name|'second_half'
op|'='
string|'"%s%s.%s"'
op|'%'
op|'('
name|'revno_prefix'
op|','
name|'revno'
op|','
name|'sha'
op|')'
newline|'\n'
name|'return'
string|'"."'
op|'.'
name|'join'
op|'('
op|'('
name|'first_half'
op|','
name|'second_half'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_git_current_tag
dedent|''
name|'def'
name|'_get_git_current_tag'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_run_shell_command'
op|'('
string|'"git tag --contains HEAD"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_git_tag_info
dedent|''
name|'def'
name|'_get_git_tag_info'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_run_shell_command'
op|'('
string|'"git describe --tags"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_git_post_version
dedent|''
name|'def'
name|'_get_git_post_version'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'current_tag'
op|'='
name|'_get_git_current_tag'
op|'('
op|')'
newline|'\n'
name|'if'
name|'current_tag'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'current_tag'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'tag_info'
op|'='
name|'_get_git_tag_info'
op|'('
op|')'
newline|'\n'
name|'if'
name|'tag_info'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'base_version'
op|'='
string|'"0.0"'
newline|'\n'
name|'cmd'
op|'='
string|'"git --no-pager log --oneline"'
newline|'\n'
name|'out'
op|'='
name|'_run_shell_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'revno'
op|'='
name|'len'
op|'('
name|'out'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
op|')'
newline|'\n'
name|'sha'
op|'='
name|'_run_shell_command'
op|'('
string|'"git describe --always"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tag_infos'
op|'='
name|'tag_info'
op|'.'
name|'split'
op|'('
string|'"-"'
op|')'
newline|'\n'
name|'base_version'
op|'='
string|'"-"'
op|'.'
name|'join'
op|'('
name|'tag_infos'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|')'
newline|'\n'
op|'('
name|'revno'
op|','
name|'sha'
op|')'
op|'='
name|'tag_infos'
op|'['
op|'-'
number|'2'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
string|'"%s.%s.%s"'
op|'%'
op|'('
name|'base_version'
op|','
name|'revno'
op|','
name|'sha'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_git_changelog
dedent|''
dedent|''
name|'def'
name|'write_git_changelog'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write a changelog based on the git changelog."""'
newline|'\n'
name|'new_changelog'
op|'='
string|"'ChangeLog'"
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'SKIP_WRITE_GIT_CHANGELOG'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
string|"'.git'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'git_log_cmd'
op|'='
string|"'git log --stat'"
newline|'\n'
name|'changelog'
op|'='
name|'_run_shell_command'
op|'('
name|'git_log_cmd'
op|')'
newline|'\n'
name|'mailmap'
op|'='
name|'parse_mailmap'
op|'('
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'new_changelog'
op|','
string|'"w"'
op|')'
name|'as'
name|'changelog_file'
op|':'
newline|'\n'
indent|'                '
name|'changelog_file'
op|'.'
name|'write'
op|'('
name|'canonicalize_emails'
op|'('
name|'changelog'
op|','
name|'mailmap'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'open'
op|'('
name|'new_changelog'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_authors
dedent|''
dedent|''
name|'def'
name|'generate_authors'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create AUTHORS file using git commits."""'
newline|'\n'
name|'jenkins_email'
op|'='
string|"'jenkins@review.openstack.org'"
newline|'\n'
name|'old_authors'
op|'='
string|"'AUTHORS.in'"
newline|'\n'
name|'new_authors'
op|'='
string|"'AUTHORS'"
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'SKIP_GENERATE_AUTHORS'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
string|"'.git'"
op|')'
op|':'
newline|'\n'
comment|"# don't include jenkins email address in AUTHORS file"
nl|'\n'
indent|'            '
name|'git_log_cmd'
op|'='
op|'('
string|'"git log --format=\'%aN <%aE>\' | sort -u | "'
nl|'\n'
string|'"grep -v "'
op|'+'
name|'jenkins_email'
op|')'
newline|'\n'
name|'changelog'
op|'='
name|'_run_shell_command'
op|'('
name|'git_log_cmd'
op|')'
newline|'\n'
name|'mailmap'
op|'='
name|'parse_mailmap'
op|'('
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'new_authors'
op|','
string|"'w'"
op|')'
name|'as'
name|'new_authors_fh'
op|':'
newline|'\n'
indent|'                '
name|'new_authors_fh'
op|'.'
name|'write'
op|'('
name|'canonicalize_emails'
op|'('
name|'changelog'
op|','
name|'mailmap'
op|')'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'old_authors'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'open'
op|'('
name|'old_authors'
op|','
string|'"r"'
op|')'
name|'as'
name|'old_authors_fh'
op|':'
newline|'\n'
indent|'                        '
name|'new_authors_fh'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|'+'
name|'old_authors_fh'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'open'
op|'('
name|'new_authors'
op|','
string|"'w'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'_rst_template'
op|'='
string|'"""%(heading)s\n%(underline)s\n\n.. automodule:: %(module)s\n  :members:\n  :undoc-members:\n  :show-inheritance:\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_versioninfo
name|'def'
name|'read_versioninfo'
op|'('
name|'project'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read the versioninfo file. If it doesn\'t exist, we\'re in a github\n       zipball, and there\'s really no way to know what version we really\n       are, but that should be ok, because the utility of that should be\n       just about nil if this code path is in use in the first place."""'
newline|'\n'
name|'versioninfo_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'project'
op|','
string|"'versioninfo'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'versioninfo_path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'open'
op|'('
name|'versioninfo_path'
op|','
string|"'r'"
op|')'
name|'as'
name|'vinfo'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
name|'vinfo'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'version'
op|'='
string|'"0.0.0"'
newline|'\n'
dedent|''
name|'return'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_versioninfo
dedent|''
name|'def'
name|'write_versioninfo'
op|'('
name|'project'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Write a simple file containing the version of the package."""'
newline|'\n'
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'project'
op|','
string|"'versioninfo'"
op|')'
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
string|'"%s\\n"'
op|'%'
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cmdclass
dedent|''
name|'def'
name|'get_cmdclass'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return dict of commands to run from setup.py."""'
newline|'\n'
nl|'\n'
name|'cmdclass'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_find_modules
name|'def'
name|'_find_modules'
op|'('
name|'arg'
op|','
name|'dirname'
op|','
name|'files'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'filename'
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.py'"
op|')'
name|'and'
name|'filename'
op|'!='
string|"'__init__.py'"
op|':'
newline|'\n'
indent|'                '
name|'arg'
op|'['
string|'"%s.%s"'
op|'%'
op|'('
name|'dirname'
op|'.'
name|'replace'
op|'('
string|"'/'"
op|','
string|"'.'"
op|')'
op|','
nl|'\n'
name|'filename'
op|'['
op|':'
op|'-'
number|'3'
op|']'
op|')'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|class|LocalSDist
dedent|''
dedent|''
dedent|''
name|'class'
name|'LocalSDist'
op|'('
name|'sdist'
op|'.'
name|'sdist'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Builds the ChangeLog and Authors files from VC first."""'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'write_git_changelog'
op|'('
op|')'
newline|'\n'
name|'generate_authors'
op|'('
op|')'
newline|'\n'
comment|"# sdist.sdist is an old style class, can't use super()"
nl|'\n'
name|'sdist'
op|'.'
name|'sdist'
op|'.'
name|'run'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'cmdclass'
op|'['
string|"'sdist'"
op|']'
op|'='
name|'LocalSDist'
newline|'\n'
nl|'\n'
comment|'# If Sphinx is installed on the box running setup.py,'
nl|'\n'
comment|'# enable setup.py to build the documentation, otherwise,'
nl|'\n'
comment|'# just ignore it'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'sphinx'
op|'.'
name|'setup_command'
name|'import'
name|'BuildDoc'
newline|'\n'
nl|'\n'
DECL|class|LocalBuildDoc
name|'class'
name|'LocalBuildDoc'
op|'('
name|'BuildDoc'
op|')'
op|':'
newline|'\n'
DECL|member|generate_autoindex
indent|'            '
name|'def'
name|'generate_autoindex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'print'
string|'"**Autodocumenting from %s"'
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'curdir'
op|')'
newline|'\n'
name|'modules'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'option_dict'
op|'='
name|'self'
op|'.'
name|'distribution'
op|'.'
name|'get_option_dict'
op|'('
string|"'build_sphinx'"
op|')'
newline|'\n'
name|'source_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'option_dict'
op|'['
string|"'source_dir'"
op|']'
op|'['
number|'1'
op|']'
op|','
string|"'api'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'source_dir'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'source_dir'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'pkg'
name|'in'
name|'self'
op|'.'
name|'distribution'
op|'.'
name|'packages'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'.'"
name|'not'
name|'in'
name|'pkg'
op|':'
newline|'\n'
indent|'                        '
name|'os'
op|'.'
name|'path'
op|'.'
name|'walk'
op|'('
name|'pkg'
op|','
name|'_find_modules'
op|','
name|'modules'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'module_list'
op|'='
name|'modules'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'module_list'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'autoindex_filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'source_dir'
op|','
string|"'autoindex.rst'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'autoindex_filename'
op|','
string|"'w'"
op|')'
name|'as'
name|'autoindex'
op|':'
newline|'\n'
indent|'                    '
name|'autoindex'
op|'.'
name|'write'
op|'('
string|'""".. toctree::\n   :maxdepth: 1\n\n"""'
op|')'
newline|'\n'
name|'for'
name|'module'
name|'in'
name|'module_list'
op|':'
newline|'\n'
indent|'                        '
name|'output_filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'source_dir'
op|','
nl|'\n'
string|'"%s.rst"'
op|'%'
name|'module'
op|')'
newline|'\n'
name|'heading'
op|'='
string|'"The :mod:`%s` Module"'
op|'%'
name|'module'
newline|'\n'
name|'underline'
op|'='
string|'"="'
op|'*'
name|'len'
op|'('
name|'heading'
op|')'
newline|'\n'
name|'values'
op|'='
name|'dict'
op|'('
name|'module'
op|'='
name|'module'
op|','
name|'heading'
op|'='
name|'heading'
op|','
nl|'\n'
name|'underline'
op|'='
name|'underline'
op|')'
newline|'\n'
nl|'\n'
name|'print'
string|'"Generating %s"'
op|'%'
name|'output_filename'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'output_filename'
op|','
string|"'w'"
op|')'
name|'as'
name|'output_file'
op|':'
newline|'\n'
indent|'                            '
name|'output_file'
op|'.'
name|'write'
op|'('
name|'_rst_template'
op|'%'
name|'values'
op|')'
newline|'\n'
dedent|''
name|'autoindex'
op|'.'
name|'write'
op|'('
string|'"   %s.rst\\n"'
op|'%'
name|'module'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
dedent|''
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'SPHINX_DEBUG'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'generate_autoindex'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'builder'
name|'in'
op|'['
string|"'html'"
op|','
string|"'man'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'builder'
op|'='
name|'builder'
newline|'\n'
name|'self'
op|'.'
name|'finalize_options'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'distribution'
op|'.'
name|'get_name'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
name|'self'
op|'.'
name|'distribution'
op|'.'
name|'get_version'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'release'
op|'='
name|'self'
op|'.'
name|'distribution'
op|'.'
name|'get_version'
op|'('
op|')'
newline|'\n'
name|'BuildDoc'
op|'.'
name|'run'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'cmdclass'
op|'['
string|"'build_sphinx'"
op|']'
op|'='
name|'LocalBuildDoc'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'cmdclass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_git_branchname
dedent|''
name|'def'
name|'get_git_branchname'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'branch'
name|'in'
name|'_run_shell_command'
op|'('
string|'"git branch --color=never"'
op|')'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'branch'
op|'.'
name|'startswith'
op|'('
string|"'*'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_branch_name'
op|'='
name|'branch'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'_branch_name'
op|'=='
string|'"(no"'
op|':'
newline|'\n'
indent|'        '
name|'_branch_name'
op|'='
string|'"no-branch"'
newline|'\n'
dedent|''
name|'return'
name|'_branch_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_pre_version
dedent|''
name|'def'
name|'get_pre_version'
op|'('
name|'projectname'
op|','
name|'base_version'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a version which is leading up to a version that will\n       be released in the future."""'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
string|"'.git'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'current_tag'
op|'='
name|'_get_git_current_tag'
op|'('
op|')'
newline|'\n'
name|'if'
name|'current_tag'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
name|'current_tag'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'branch_name'
op|'='
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'BRANCHNAME'"
op|','
nl|'\n'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'GERRIT_REFNAME'"
op|','
nl|'\n'
name|'get_git_branchname'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'version_suffix'
op|'='
name|'_get_git_next_version_suffix'
op|'('
name|'branch_name'
op|')'
newline|'\n'
name|'version'
op|'='
string|'"%s~%s"'
op|'%'
op|'('
name|'base_version'
op|','
name|'version_suffix'
op|')'
newline|'\n'
dedent|''
name|'write_versioninfo'
op|'('
name|'projectname'
op|','
name|'version'
op|')'
newline|'\n'
name|'return'
name|'version'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'version'
op|'='
name|'read_versioninfo'
op|'('
name|'projectname'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_post_version
dedent|''
name|'def'
name|'get_post_version'
op|'('
name|'projectname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a version which is equal to the tag that\'s on the current\n    revision if there is one, or tag plus number of additional revisions\n    if the current revision has no tag."""'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
string|"'.git'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'version'
op|'='
name|'_get_git_post_version'
op|'('
op|')'
newline|'\n'
name|'write_versioninfo'
op|'('
name|'projectname'
op|','
name|'version'
op|')'
newline|'\n'
name|'return'
name|'version'
newline|'\n'
dedent|''
name|'return'
name|'read_versioninfo'
op|'('
name|'projectname'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\ngettext for openstack-common modules.\n\nUsual usage in an openstack.common module:\n\n    from nova.openstack.common.gettextutils import _\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'gettext'
newline|'\n'
name|'import'
name|'logging'
op|'.'
name|'handlers'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'UserString'
newline|'\n'
nl|'\n'
DECL|variable|_localedir
name|'_localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'nova'"
op|'.'
name|'upper'
op|'('
op|')'
op|'+'
string|"'_LOCALEDIR'"
op|')'
newline|'\n'
DECL|variable|_t
name|'_t'
op|'='
name|'gettext'
op|'.'
name|'translation'
op|'('
string|"'nova'"
op|','
name|'localedir'
op|'='
name|'_localedir'
op|','
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_
name|'def'
name|'_'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_t'
op|'.'
name|'ugettext'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|install
dedent|''
name|'def'
name|'install'
op|'('
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Install a _() function using the given translation domain.\n\n    Given a translation domain, install a _() function using gettext\'s\n    install() function.\n\n    The main difference from gettext.install() is that we allow\n    overriding the default localedir (e.g. /usr/share/locale) using\n    a translation-domain-specific environment variable (e.g.\n    NOVA_LOCALEDIR).\n    """'
newline|'\n'
name|'gettext'
op|'.'
name|'install'
op|'('
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'domain'
op|'.'
name|'upper'
op|'('
op|')'
op|'+'
string|"'_LOCALEDIR'"
op|')'
op|','
nl|'\n'
name|'unicode'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
string|'"""\nLazy gettext functionality.\n\nThe following is an attempt to introduce a deferred way\nto do translations on messages in OpenStack. We attempt to\noverride the standard _() function and % (format string) operation\nto build Message objects that can later be translated when we have\nmore information. Also included is an example LogHandler that\ntranslates Messages to an associated locale, effectively allowing\nmany logs, each with their own locale.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_lazy_gettext
name|'def'
name|'get_lazy_gettext'
op|'('
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Assemble and return a lazy gettext function for a given domain.\n\n    Factory method for a project/module to get a lazy gettext function\n    for its own translation domain (i.e. nova, glance, cinder, etc.)\n    """'
newline|'\n'
nl|'\n'
DECL|function|_lazy_gettext
name|'def'
name|'_lazy_gettext'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create and return a Message object.\n\n        Message encapsulates a string so that we can translate it later when\n        needed.\n        """'
newline|'\n'
name|'return'
name|'Message'
op|'('
name|'msg'
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'_lazy_gettext'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
dedent|''
name|'class'
name|'Message'
op|'('
name|'UserString'
op|'.'
name|'UserString'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class used to encapsulate translatable messages."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
comment|'# _msg is the gettext msgid and should never change'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_msg'
op|'='
name|'msg'
newline|'\n'
name|'self'
op|'.'
name|'_left_extra_msg'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_right_extra_msg'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'params'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'locale'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'domain'
op|'='
name|'domain'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|data
name|'def'
name|'data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mrodden): this should always resolve to a unicode string'
nl|'\n'
comment|'# that best represents the state of the message currently'
nl|'\n'
nl|'\n'
indent|'        '
name|'localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'domain'
op|'.'
name|'upper'
op|'('
op|')'
op|'+'
string|"'_LOCALEDIR'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'locale'
op|':'
newline|'\n'
indent|'            '
name|'lang'
op|'='
name|'gettext'
op|'.'
name|'translation'
op|'('
name|'self'
op|'.'
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'localedir'
op|','
nl|'\n'
name|'languages'
op|'='
op|'['
name|'self'
op|'.'
name|'locale'
op|']'
op|','
nl|'\n'
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# use system locale for translations'
nl|'\n'
indent|'            '
name|'lang'
op|'='
name|'gettext'
op|'.'
name|'translation'
op|'('
name|'self'
op|'.'
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'localedir'
op|','
nl|'\n'
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'full_msg'
op|'='
op|'('
name|'self'
op|'.'
name|'_left_extra_msg'
op|'+'
nl|'\n'
name|'lang'
op|'.'
name|'ugettext'
op|'('
name|'self'
op|'.'
name|'_msg'
op|')'
op|'+'
nl|'\n'
name|'self'
op|'.'
name|'_right_extra_msg'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'params'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'full_msg'
op|'='
name|'full_msg'
op|'%'
name|'self'
op|'.'
name|'params'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'unicode'
op|'('
name|'full_msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_dictionary_parameter
dedent|''
name|'def'
name|'_save_dictionary_parameter'
op|'('
name|'self'
op|','
name|'dict_param'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'full_msg'
op|'='
name|'self'
op|'.'
name|'data'
newline|'\n'
comment|'# look for %(blah) fields in string;'
nl|'\n'
comment|'# ignore %% and deal with the'
nl|'\n'
comment|'# case where % is first character on the line'
nl|'\n'
name|'keys'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"'(?:[^%]|^)%\\((\\w*)\\)[a-z]'"
op|','
name|'full_msg'
op|')'
newline|'\n'
nl|'\n'
comment|"# if we don't find any %(blah) blocks but have a %s"
nl|'\n'
name|'if'
name|'not'
name|'keys'
name|'and'
name|'re'
op|'.'
name|'findall'
op|'('
string|"'(?:[^%]|^)%[a-z]'"
op|','
name|'full_msg'
op|')'
op|':'
newline|'\n'
comment|'# apparently the full dictionary is the parameter'
nl|'\n'
indent|'            '
name|'params'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'dict_param'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'params'
op|'['
name|'key'
op|']'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'dict_param'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# cast uncopyable thing to unicode string'
nl|'\n'
indent|'                    '
name|'params'
op|'['
name|'key'
op|']'
op|'='
name|'unicode'
op|'('
name|'dict_param'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'params'
newline|'\n'
nl|'\n'
DECL|member|_save_parameters
dedent|''
name|'def'
name|'_save_parameters'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
comment|'# we check for None later to see if'
nl|'\n'
comment|'# we actually have parameters to inject,'
nl|'\n'
comment|'# so encapsulate if our parameter is actually None'
nl|'\n'
indent|'        '
name|'if'
name|'other'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'='
op|'('
name|'other'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'other'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'='
name|'self'
op|'.'
name|'_save_dictionary_parameter'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# fallback to casting to unicode,'
nl|'\n'
comment|'# this will handle the problematic python code-like'
nl|'\n'
comment|'# objects that cannot be deep-copied'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'params'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'params'
op|'='
name|'unicode'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
comment|'# overrides to be more string-like'
nl|'\n'
DECL|member|__unicode__
dedent|''
name|'def'
name|'__unicode__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'to_copy'
op|'='
op|'['
string|"'_msg'"
op|','
string|"'_right_extra_msg'"
op|','
string|"'_left_extra_msg'"
op|','
nl|'\n'
string|"'domain'"
op|','
string|"'params'"
op|','
string|"'locale'"
op|']'
newline|'\n'
name|'new_dict'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'fromkeys'
op|'('
name|'to_copy'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'to_copy'
op|':'
newline|'\n'
indent|'            '
name|'new_dict'
op|'['
name|'attr'
op|']'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'attr'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'new_dict'
newline|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'state'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# operator overloads'
nl|'\n'
DECL|member|__add__
dedent|''
dedent|''
name|'def'
name|'__add__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copied'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'copied'
op|'.'
name|'_right_extra_msg'
op|'+='
name|'other'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
name|'return'
name|'copied'
newline|'\n'
nl|'\n'
DECL|member|__radd__
dedent|''
name|'def'
name|'__radd__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copied'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'copied'
op|'.'
name|'_left_extra_msg'
op|'+='
name|'other'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
name|'return'
name|'copied'
newline|'\n'
nl|'\n'
DECL|member|__mod__
dedent|''
name|'def'
name|'__mod__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
comment|'# do a format string to catch and raise'
nl|'\n'
comment|'# any possible KeyErrors from missing parameters'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'%'
name|'other'
newline|'\n'
name|'copied'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'copied'
op|'.'
name|'_save_parameters'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__mul__
dedent|''
name|'def'
name|'__mul__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'*'
name|'other'
newline|'\n'
nl|'\n'
DECL|member|__rmul__
dedent|''
name|'def'
name|'__rmul__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'other'
op|'*'
name|'self'
op|'.'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__getslice__
dedent|''
name|'def'
name|'__getslice__'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'end'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'__getslice__'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
dedent|''
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(mrodden): handle lossy operations that we can't deal with yet"
nl|'\n'
comment|'# These override the UserString implementation, since UserString'
nl|'\n'
comment|'# uses our __class__ attribute to try and build a new message'
nl|'\n'
comment|'# after running the inner data string through the operation.'
nl|'\n'
comment|'# At that point, we have lost the gettext message id and can just'
nl|'\n'
comment|'# safely resolve to a string instead.'
nl|'\n'
indent|'        '
name|'ops'
op|'='
op|'['
string|"'capitalize'"
op|','
string|"'center'"
op|','
string|"'decode'"
op|','
string|"'encode'"
op|','
nl|'\n'
string|"'expandtabs'"
op|','
string|"'ljust'"
op|','
string|"'lstrip'"
op|','
string|"'replace'"
op|','
string|"'rjust'"
op|','
string|"'rstrip'"
op|','
nl|'\n'
string|"'strip'"
op|','
string|"'swapcase'"
op|','
string|"'title'"
op|','
string|"'translate'"
op|','
string|"'upper'"
op|','
string|"'zfill'"
op|']'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'ops'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'data'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'UserString'
op|'.'
name|'UserString'
op|'.'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocaleHandler
dedent|''
dedent|''
dedent|''
name|'class'
name|'LocaleHandler'
op|'('
name|'logging'
op|'.'
name|'Handler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handler that can have a locale associated to translate Messages.\n\n    A quick example of how to utilize the Message class above.\n    LocaleHandler takes a locale and a target logging.Handler object\n    to forward LogRecord objects to after translating the internal Message.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'locale'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a LocaleHandler\n\n        :param locale: locale to use for translating messages\n        :param target: logging.Handler object to forward\n                       LogRecord objects to after translation\n        """'
newline|'\n'
name|'logging'
op|'.'
name|'Handler'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'locale'
op|'='
name|'locale'
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'='
name|'target'
newline|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'record'
op|'.'
name|'msg'
op|','
name|'Message'
op|')'
op|':'
newline|'\n'
comment|'# set the locale and resolve to a string'
nl|'\n'
indent|'            '
name|'record'
op|'.'
name|'msg'
op|'.'
name|'locale'
op|'='
name|'self'
op|'.'
name|'locale'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'target'
op|'.'
name|'emit'
op|'('
name|'record'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

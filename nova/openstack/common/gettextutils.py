begin_unit
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\ngettext for openstack-common modules.\n\nUsual usage in an openstack.common module:\n\n    from nova.openstack.common.gettextutils import _\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'gettext'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'UserString'
name|'as'
name|'_userString'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'collections'
name|'as'
name|'_userString'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'babel'
name|'import'
name|'localedata'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
DECL|variable|_localedir
name|'_localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'nova'"
op|'.'
name|'upper'
op|'('
op|')'
op|'+'
string|"'_LOCALEDIR'"
op|')'
newline|'\n'
DECL|variable|_t
name|'_t'
op|'='
name|'gettext'
op|'.'
name|'translation'
op|'('
string|"'nova'"
op|','
name|'localedir'
op|'='
name|'_localedir'
op|','
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_AVAILABLE_LANGUAGES
name|'_AVAILABLE_LANGUAGES'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|USE_LAZY
name|'USE_LAZY'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|enable_lazy
name|'def'
name|'enable_lazy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience function for configuring _() to use lazy gettext\n\n    Call this at the start of execution to enable the gettextutils._\n    function to use lazy gettext functionality. This is useful if\n    your project is importing _ directly instead of using the\n    gettextutils.install() way of importing the _ function.\n    """'
newline|'\n'
name|'global'
name|'USE_LAZY'
newline|'\n'
name|'USE_LAZY'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_
dedent|''
name|'def'
name|'_'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'USE_LAZY'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'Message'
op|'('
name|'msg'
op|','
string|"'nova'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_t'
op|'.'
name|'gettext'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_t'
op|'.'
name|'ugettext'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|install
dedent|''
dedent|''
name|'def'
name|'install'
op|'('
name|'domain'
op|','
name|'lazy'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Install a _() function using the given translation domain.\n\n    Given a translation domain, install a _() function using gettext\'s\n    install() function.\n\n    The main difference from gettext.install() is that we allow\n    overriding the default localedir (e.g. /usr/share/locale) using\n    a translation-domain-specific environment variable (e.g.\n    NOVA_LOCALEDIR).\n\n    :param domain: the translation domain\n    :param lazy: indicates whether or not to install the lazy _() function.\n                 The lazy _() introduces a way to do deferred translation\n                 of messages by installing a _ that builds Message objects,\n                 instead of strings, which can then be lazily translated into\n                 any available locale.\n    """'
newline|'\n'
name|'if'
name|'lazy'
op|':'
newline|'\n'
comment|'# NOTE(mrodden): Lazy gettext functionality.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The following introduces a deferred way to do translations on'
nl|'\n'
comment|'# messages in OpenStack. We override the standard _() function'
nl|'\n'
comment|'# and % (format string) operation to build Message objects that can'
nl|'\n'
comment|'# later be translated when we have more information.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Also included below is an example LocaleHandler that translates'
nl|'\n'
comment|'# Messages to an associated locale, effectively allowing many logs,'
nl|'\n'
comment|'# each with their own locale.'
nl|'\n'
nl|'\n'
DECL|function|_lazy_gettext
indent|'        '
name|'def'
name|'_lazy_gettext'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Create and return a Message object.\n\n            Lazy gettext function for a given domain, it is a factory method\n            for a project/module to get a lazy gettext function for its own\n            translation domain (i.e. nova, glance, cinder, etc.)\n\n            Message encapsulates a string so that we can translate\n            it later when needed.\n            """'
newline|'\n'
name|'return'
name|'Message'
op|'('
name|'msg'
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'six'
name|'import'
name|'moves'
newline|'\n'
name|'moves'
op|'.'
name|'builtins'
op|'.'
name|'__dict__'
op|'['
string|"'_'"
op|']'
op|'='
name|'_lazy_gettext'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'localedir'
op|'='
string|"'%s_LOCALEDIR'"
op|'%'
name|'domain'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
indent|'            '
name|'gettext'
op|'.'
name|'install'
op|'('
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'localedir'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'gettext'
op|'.'
name|'install'
op|'('
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'localedir'
op|')'
op|','
nl|'\n'
name|'unicode'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
dedent|''
dedent|''
dedent|''
name|'class'
name|'Message'
op|'('
name|'_userString'
op|'.'
name|'UserString'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class used to encapsulate translatable messages."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
comment|'# _msg is the gettext msgid and should never change'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_msg'
op|'='
name|'msg'
newline|'\n'
name|'self'
op|'.'
name|'_left_extra_msg'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_right_extra_msg'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_locale'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'params'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'domain'
op|'='
name|'domain'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|data
name|'def'
name|'data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mrodden): this should always resolve to a unicode string'
nl|'\n'
comment|'# that best represents the state of the message currently'
nl|'\n'
nl|'\n'
indent|'        '
name|'localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'domain'
op|'.'
name|'upper'
op|'('
op|')'
op|'+'
string|"'_LOCALEDIR'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'locale'
op|':'
newline|'\n'
indent|'            '
name|'lang'
op|'='
name|'gettext'
op|'.'
name|'translation'
op|'('
name|'self'
op|'.'
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'localedir'
op|','
nl|'\n'
name|'languages'
op|'='
op|'['
name|'self'
op|'.'
name|'locale'
op|']'
op|','
nl|'\n'
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# use system locale for translations'
nl|'\n'
indent|'            '
name|'lang'
op|'='
name|'gettext'
op|'.'
name|'translation'
op|'('
name|'self'
op|'.'
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'localedir'
op|','
nl|'\n'
name|'fallback'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
indent|'            '
name|'ugettext'
op|'='
name|'lang'
op|'.'
name|'gettext'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ugettext'
op|'='
name|'lang'
op|'.'
name|'ugettext'
newline|'\n'
nl|'\n'
dedent|''
name|'full_msg'
op|'='
op|'('
name|'self'
op|'.'
name|'_left_extra_msg'
op|'+'
nl|'\n'
name|'ugettext'
op|'('
name|'self'
op|'.'
name|'_msg'
op|')'
op|'+'
nl|'\n'
name|'self'
op|'.'
name|'_right_extra_msg'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'params'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'full_msg'
op|'='
name|'full_msg'
op|'%'
name|'self'
op|'.'
name|'params'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'six'
op|'.'
name|'text_type'
op|'('
name|'full_msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|locale
name|'def'
name|'locale'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_locale'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'locale'
op|'.'
name|'setter'
newline|'\n'
DECL|member|locale
name|'def'
name|'locale'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_locale'
op|'='
name|'value'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# This Message object may have been constructed with one or more'
nl|'\n'
comment|'# Message objects as substitution parameters, given as a single'
nl|'\n'
comment|'# Message, or a tuple or Map containing some, so when setting the'
nl|'\n'
comment|'# locale for this Message we need to set it for those Messages too.'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'params'
op|','
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'.'
name|'locale'
op|'='
name|'value'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'params'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'param'
name|'in'
name|'self'
op|'.'
name|'params'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'param'
op|','
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'param'
op|'.'
name|'locale'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'params'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'param'
name|'in'
name|'self'
op|'.'
name|'params'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'param'
op|','
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'param'
op|'.'
name|'locale'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_save_dictionary_parameter
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_save_dictionary_parameter'
op|'('
name|'self'
op|','
name|'dict_param'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'full_msg'
op|'='
name|'self'
op|'.'
name|'data'
newline|'\n'
comment|'# look for %(blah) fields in string;'
nl|'\n'
comment|'# ignore %% and deal with the'
nl|'\n'
comment|'# case where % is first character on the line'
nl|'\n'
name|'keys'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"'(?:[^%]|^)?%\\((\\w*)\\)[a-z]'"
op|','
name|'full_msg'
op|')'
newline|'\n'
nl|'\n'
comment|"# if we don't find any %(blah) blocks but have a %s"
nl|'\n'
name|'if'
name|'not'
name|'keys'
name|'and'
name|'re'
op|'.'
name|'findall'
op|'('
string|"'(?:[^%]|^)%[a-z]'"
op|','
name|'full_msg'
op|')'
op|':'
newline|'\n'
comment|'# apparently the full dictionary is the parameter'
nl|'\n'
indent|'            '
name|'params'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'dict_param'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'params'
op|'['
name|'key'
op|']'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'dict_param'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# cast uncopyable thing to unicode string'
nl|'\n'
indent|'                    '
name|'params'
op|'['
name|'key'
op|']'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'dict_param'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'params'
newline|'\n'
nl|'\n'
DECL|member|_save_parameters
dedent|''
name|'def'
name|'_save_parameters'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
comment|'# we check for None later to see if'
nl|'\n'
comment|'# we actually have parameters to inject,'
nl|'\n'
comment|'# so encapsulate if our parameter is actually None'
nl|'\n'
indent|'        '
name|'if'
name|'other'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'='
op|'('
name|'other'
op|','
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'other'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'='
name|'self'
op|'.'
name|'_save_dictionary_parameter'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# fallback to casting to unicode,'
nl|'\n'
comment|'# this will handle the problematic python code-like'
nl|'\n'
comment|'# objects that cannot be deep-copied'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'params'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'other'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'params'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
comment|'# overrides to be more string-like'
nl|'\n'
DECL|member|__unicode__
dedent|''
name|'def'
name|'__unicode__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__unicode__'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getstate__
dedent|''
name|'def'
name|'__getstate__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'to_copy'
op|'='
op|'['
string|"'_msg'"
op|','
string|"'_right_extra_msg'"
op|','
string|"'_left_extra_msg'"
op|','
nl|'\n'
string|"'domain'"
op|','
string|"'params'"
op|','
string|"'_locale'"
op|']'
newline|'\n'
name|'new_dict'
op|'='
name|'self'
op|'.'
name|'__dict__'
op|'.'
name|'fromkeys'
op|'('
name|'to_copy'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'to_copy'
op|':'
newline|'\n'
indent|'            '
name|'new_dict'
op|'['
name|'attr'
op|']'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'attr'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'new_dict'
newline|'\n'
nl|'\n'
DECL|member|__setstate__
dedent|''
name|'def'
name|'__setstate__'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'state'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# operator overloads'
nl|'\n'
DECL|member|__add__
dedent|''
dedent|''
name|'def'
name|'__add__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copied'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'copied'
op|'.'
name|'_right_extra_msg'
op|'+='
name|'other'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
name|'return'
name|'copied'
newline|'\n'
nl|'\n'
DECL|member|__radd__
dedent|''
name|'def'
name|'__radd__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'copied'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'copied'
op|'.'
name|'_left_extra_msg'
op|'+='
name|'other'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
name|'return'
name|'copied'
newline|'\n'
nl|'\n'
DECL|member|__mod__
dedent|''
name|'def'
name|'__mod__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
comment|'# do a format string to catch and raise'
nl|'\n'
comment|'# any possible KeyErrors from missing parameters'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'%'
name|'other'
newline|'\n'
name|'copied'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'copied'
op|'.'
name|'_save_parameters'
op|'('
name|'other'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__mul__
dedent|''
name|'def'
name|'__mul__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'*'
name|'other'
newline|'\n'
nl|'\n'
DECL|member|__rmul__
dedent|''
name|'def'
name|'__rmul__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'other'
op|'*'
name|'self'
op|'.'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__getslice__
dedent|''
name|'def'
name|'__getslice__'
op|'('
name|'self'
op|','
name|'start'
op|','
name|'end'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'data'
op|'.'
name|'__getslice__'
op|'('
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattribute__
dedent|''
name|'def'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(mrodden): handle lossy operations that we can't deal with yet"
nl|'\n'
comment|'# These override the UserString implementation, since UserString'
nl|'\n'
comment|'# uses our __class__ attribute to try and build a new message'
nl|'\n'
comment|'# after running the inner data string through the operation.'
nl|'\n'
comment|'# At that point, we have lost the gettext message id and can just'
nl|'\n'
comment|'# safely resolve to a string instead.'
nl|'\n'
indent|'        '
name|'ops'
op|'='
op|'['
string|"'capitalize'"
op|','
string|"'center'"
op|','
string|"'decode'"
op|','
string|"'encode'"
op|','
nl|'\n'
string|"'expandtabs'"
op|','
string|"'ljust'"
op|','
string|"'lstrip'"
op|','
string|"'replace'"
op|','
string|"'rjust'"
op|','
string|"'rstrip'"
op|','
nl|'\n'
string|"'strip'"
op|','
string|"'swapcase'"
op|','
string|"'title'"
op|','
string|"'translate'"
op|','
string|"'upper'"
op|','
string|"'zfill'"
op|']'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'ops'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'data'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_userString'
op|'.'
name|'UserString'
op|'.'
name|'__getattribute__'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_available_languages
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_available_languages'
op|'('
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Lists the available languages for the given translation domain.\n\n    :param domain: the domain to get languages for\n    """'
newline|'\n'
name|'if'
name|'domain'
name|'in'
name|'_AVAILABLE_LANGUAGES'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'copy'
op|'.'
name|'copy'
op|'('
name|'_AVAILABLE_LANGUAGES'
op|'['
name|'domain'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'localedir'
op|'='
string|"'%s_LOCALEDIR'"
op|'%'
name|'domain'
op|'.'
name|'upper'
op|'('
op|')'
newline|'\n'
name|'find'
op|'='
name|'lambda'
name|'x'
op|':'
name|'gettext'
op|'.'
name|'find'
op|'('
name|'domain'
op|','
nl|'\n'
name|'localedir'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
name|'localedir'
op|')'
op|','
nl|'\n'
name|'languages'
op|'='
op|'['
name|'x'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mrodden): en_US should always be available (and first in case'
nl|'\n'
comment|'# order matters) since our in-line message strings are en_US'
nl|'\n'
name|'language_list'
op|'='
op|'['
string|"'en_US'"
op|']'
newline|'\n'
comment|'# NOTE(luisg): Babel <1.0 used a function called list(), which was'
nl|'\n'
comment|'# renamed to locale_identifiers() in >=1.0, the requirements master list'
nl|'\n'
comment|'# requires >=0.9.6, uncapped, so defensively work with both. We can remove'
nl|'\n'
comment|'# this check when the master list updates to >=1.0, and update all projects'
nl|'\n'
name|'list_identifiers'
op|'='
op|'('
name|'getattr'
op|'('
name|'localedata'
op|','
string|"'list'"
op|','
name|'None'
op|')'
name|'or'
nl|'\n'
name|'getattr'
op|'('
name|'localedata'
op|','
string|"'locale_identifiers'"
op|')'
op|')'
newline|'\n'
name|'locale_identifiers'
op|'='
name|'list_identifiers'
op|'('
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'locale_identifiers'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'find'
op|'('
name|'i'
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'language_list'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'_AVAILABLE_LANGUAGES'
op|'['
name|'domain'
op|']'
op|'='
name|'language_list'
newline|'\n'
name|'return'
name|'copy'
op|'.'
name|'copy'
op|'('
name|'language_list'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_localized_message
dedent|''
name|'def'
name|'get_localized_message'
op|'('
name|'message'
op|','
name|'user_locale'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets a localized version of the given message in the given locale.\n\n    If the message is not a Message object the message is returned as-is.\n    If the locale is None the message is translated to the default locale.\n\n    :returns: the translated message in unicode, or the original message if\n              it could not be translated\n    """'
newline|'\n'
name|'translated'
op|'='
name|'message'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'message'
op|','
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'original_locale'
op|'='
name|'message'
op|'.'
name|'locale'
newline|'\n'
name|'message'
op|'.'
name|'locale'
op|'='
name|'user_locale'
newline|'\n'
name|'translated'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'message'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'locale'
op|'='
name|'original_locale'
newline|'\n'
dedent|''
name|'return'
name|'translated'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocaleHandler
dedent|''
name|'class'
name|'LocaleHandler'
op|'('
name|'logging'
op|'.'
name|'Handler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handler that can have a locale associated to translate Messages.\n\n    A quick example of how to utilize the Message class above.\n    LocaleHandler takes a locale and a target logging.Handler object\n    to forward LogRecord objects to after translating the internal Message.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'locale'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a LocaleHandler\n\n        :param locale: locale to use for translating messages\n        :param target: logging.Handler object to forward\n                       LogRecord objects to after translation\n        """'
newline|'\n'
name|'logging'
op|'.'
name|'Handler'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'locale'
op|'='
name|'locale'
newline|'\n'
name|'self'
op|'.'
name|'target'
op|'='
name|'target'
newline|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'record'
op|'.'
name|'msg'
op|','
name|'Message'
op|')'
op|':'
newline|'\n'
comment|'# set the locale and resolve to a string'
nl|'\n'
indent|'            '
name|'record'
op|'.'
name|'msg'
op|'.'
name|'locale'
op|'='
name|'self'
op|'.'
name|'locale'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'target'
op|'.'
name|'emit'
op|'('
name|'record'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'webob'
name|'import'
name|'exc'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'wsgi'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'faults'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
op|'.'
name|'service'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_translate_keys
name|'def'
name|'_translate_keys'
op|'('
name|'item'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Maps key names to Rackspace-like attributes for return\n    also pares down attributes to those we want\n    item is a dict\n\n    Note: should be removed when the set of keys expected by the api\n    and the set of keys returned by the image service are equivalent\n\n    """'
newline|'\n'
comment|'# TODO(tr3buchet): this map is specific to s3 object store,'
nl|'\n'
comment|'# replace with a list of keys for _filter_keys later'
nl|'\n'
name|'mapped_keys'
op|'='
op|'{'
string|"'status'"
op|':'
string|"'imageState'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'imageId'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'imageLocation'"
op|'}'
newline|'\n'
nl|'\n'
name|'mapped_item'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# TODO(tr3buchet):'
nl|'\n'
comment|'# this chunk of code works with s3 and the local image service/glance'
nl|'\n'
comment|'# when we switch to glance/local image service it can be replaced with'
nl|'\n'
comment|'# a call to _filter_keys, and mapped_keys can be changed to a list'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'mapped_keys'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# map s3 fields'
nl|'\n'
indent|'            '
name|'mapped_item'
op|'['
name|'k'
op|']'
op|'='
name|'item'
op|'['
name|'v'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# return only the fields api expects'
nl|'\n'
indent|'        '
name|'mapped_item'
op|'='
name|'_filter_keys'
op|'('
name|'item'
op|','
name|'mapped_keys'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'mapped_item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_translate_status
dedent|''
name|'def'
name|'_translate_status'
op|'('
name|'item'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Translates status of image to match current Rackspace api bindings\n    item is a dict\n\n    Note: should be removed when the set of statuses expected by the api\n    and the set of statuses returned by the image service are equivalent\n\n    """'
newline|'\n'
name|'status_mapping'
op|'='
op|'{'
nl|'\n'
string|"'pending'"
op|':'
string|"'queued'"
op|','
nl|'\n'
string|"'decrypting'"
op|':'
string|"'preparing'"
op|','
nl|'\n'
string|"'untarring'"
op|':'
string|"'saving'"
op|','
nl|'\n'
string|"'available'"
op|':'
string|"'active'"
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'item'
op|'['
string|"'status'"
op|']'
op|'='
name|'status_mapping'
op|'['
name|'item'
op|'['
string|"'status'"
op|']'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# TODO(sirp): Performing translation of status (if necessary) here for'
nl|'\n'
comment|'# now. Perhaps this should really be done in EC2 API and'
nl|'\n'
comment|'# S3ImageService'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_filter_keys
dedent|''
name|'def'
name|'_filter_keys'
op|'('
name|'item'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Filters all model attributes except for keys\n    item is a dict\n\n    """'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'item'
op|'.'
name|'iteritems'
op|'('
op|')'
name|'if'
name|'k'
name|'in'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_convert_image_id_to_hash
dedent|''
name|'def'
name|'_convert_image_id_to_hash'
op|'('
name|'image'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
string|"'imageId'"
name|'in'
name|'image'
op|':'
newline|'\n'
comment|'# Convert EC2-style ID (i-blah) to Rackspace-style (int)'
nl|'\n'
indent|'        '
name|'image_id'
op|'='
name|'abs'
op|'('
name|'hash'
op|'('
name|'image'
op|'['
string|"'imageId'"
op|']'
op|')'
op|')'
newline|'\n'
name|'image'
op|'['
string|"'imageId'"
op|']'
op|'='
name|'image_id'
newline|'\n'
name|'image'
op|'['
string|"'id'"
op|']'
op|'='
name|'image_id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Controller
dedent|''
dedent|''
name|'class'
name|'Controller'
op|'('
name|'wsgi'
op|'.'
name|'Controller'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|_serialization_metadata
indent|'    '
name|'_serialization_metadata'
op|'='
op|'{'
nl|'\n'
string|"'application/xml'"
op|':'
op|'{'
nl|'\n'
string|'"attributes"'
op|':'
op|'{'
nl|'\n'
string|'"image"'
op|':'
op|'['
string|'"id"'
op|','
string|'"name"'
op|','
string|'"updated"'
op|','
string|'"created"'
op|','
string|'"status"'
op|','
nl|'\n'
string|'"serverId"'
op|','
string|'"progress"'
op|']'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_service'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'image_service'
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all public images in brief"""'
newline|'\n'
name|'items'
op|'='
name|'self'
op|'.'
name|'_service'
op|'.'
name|'index'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
op|')'
newline|'\n'
name|'items'
op|'='
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|')'
newline|'\n'
name|'items'
op|'='
op|'['
name|'_filter_keys'
op|'('
name|'item'
op|','
op|'('
string|"'id'"
op|','
string|"'name'"
op|')'
op|')'
name|'for'
name|'item'
name|'in'
name|'items'
op|']'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'images'
op|'='
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detail
dedent|''
name|'def'
name|'detail'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all public images in detail"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'items'
op|'='
name|'self'
op|'.'
name|'_service'
op|'.'
name|'detail'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'items'
op|'='
name|'self'
op|'.'
name|'_service'
op|'.'
name|'index'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'image'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'_convert_image_id_to_hash'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'items'
op|'='
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|')'
newline|'\n'
name|'items'
op|'='
op|'['
name|'_translate_keys'
op|'('
name|'item'
op|')'
name|'for'
name|'item'
name|'in'
name|'items'
op|']'
newline|'\n'
name|'items'
op|'='
op|'['
name|'_translate_status'
op|'('
name|'item'
op|')'
name|'for'
name|'item'
name|'in'
name|'items'
op|']'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'images'
op|'='
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the given image id"""'
newline|'\n'
name|'image_id'
op|'='
name|'common'
op|'.'
name|'get_image_id_from_image_hash'
op|'('
name|'self'
op|'.'
name|'_service'
op|','
nl|'\n'
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
op|','
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'_service'
op|'.'
name|'show'
op|'('
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'_convert_image_id_to_hash'
op|'('
name|'image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_format_image_dates'
op|'('
name|'image'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'image'
op|'='
name|'image'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
comment|'# Only public images are supported for now.'
nl|'\n'
indent|'        '
name|'raise'
name|'faults'
op|'.'
name|'Fault'
op|'('
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'env'
op|'='
name|'self'
op|'.'
name|'_deserialize'
op|'('
name|'req'
op|'.'
name|'body'
op|','
name|'req'
op|'.'
name|'get_content_type'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'env'
op|'['
string|'"image"'
op|']'
op|'['
string|'"serverId"'
op|']'
newline|'\n'
name|'name'
op|'='
name|'env'
op|'['
string|'"image"'
op|']'
op|'['
string|'"name"'
op|']'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
op|'.'
name|'snapshot'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_id'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'dict'
op|'('
name|'image'
op|'='
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
comment|"# Users may not modify public images, and that's all that"
nl|'\n'
comment|'# we support for now.'
nl|'\n'
indent|'        '
name|'raise'
name|'faults'
op|'.'
name|'Fault'
op|'('
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_format_image_dates
dedent|''
name|'def'
name|'_format_image_dates'
op|'('
name|'self'
op|','
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'attr'
name|'in'
op|'['
string|"'created_at'"
op|','
string|"'updated_at'"
op|','
string|"'deleted_at'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image'
op|'['
name|'attr'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'image'
op|'['
name|'attr'
op|']'
op|'='
name|'image'
op|'['
name|'attr'
op|']'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

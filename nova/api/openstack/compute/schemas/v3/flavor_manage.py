begin_unit
comment|'# Copyright 2014 NEC Corporation.  All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'validation'
name|'import'
name|'parameter_types'
newline|'\n'
nl|'\n'
DECL|variable|create
name|'create'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'object'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
nl|'\n'
string|"'flavor'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'object'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
nl|'\n'
comment|'# in nova/flavors.py, name with all white spaces is forbidden.'
nl|'\n'
string|"'name'"
op|':'
name|'parameter_types'
op|'.'
name|'name'
op|','
nl|'\n'
comment|'# forbid leading/trailing whitespaces'
nl|'\n'
string|"'id'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'string'"
op|','
string|"'number'"
op|','
string|"'null'"
op|']'
op|','
nl|'\n'
string|"'minLength'"
op|':'
number|'1'
op|','
string|"'maxLength'"
op|':'
number|'255'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^(?! )[a-zA-Z0-9. _-]+(?<! )$'"
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# positive ( > 0) integer'
nl|'\n'
string|"'ram'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# positive ( > 0) integer'
nl|'\n'
string|"'vcpus'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# non-negative ( >= 0) integer'
nl|'\n'
string|"'disk'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'0'
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# non-negative ( >= 0) integer'
nl|'\n'
string|"'OS-FLV-EXT-DATA:ephemeral'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'0'
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# non-negative ( >= 0) integer'
nl|'\n'
string|"'swap'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'0'
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# positive ( > 0) float'
nl|'\n'
string|"'rxtx_factor'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'number'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]+(\\.[0-9]+)?$'"
op|','
nl|'\n'
string|"'minimum'"
op|':'
number|'0'
op|','
string|"'exclusiveMinimum'"
op|':'
name|'True'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'os-flavor-access:is_public'"
op|':'
name|'parameter_types'
op|'.'
name|'boolean'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|"# TODO(oomichi): 'id' should be required with v2.1+microversions."
nl|'\n'
comment|'# On v2.0 API, nova-api generates a flavor-id automatically if'
nl|'\n'
comment|"# specifying null as 'id' or not specifying 'id'. Ideally a client"
nl|'\n'
comment|"# should specify null as 'id' for requesting auto-generated id"
nl|'\n'
comment|'# exactly. However, this strict limitation causes a backwards'
nl|'\n'
comment|'# incompatible issue on v2.1. So now here relaxes the requirement'
nl|'\n'
comment|"# of 'id'."
nl|'\n'
string|"'required'"
op|':'
op|'['
string|"'name'"
op|','
string|"'ram'"
op|','
string|"'vcpus'"
op|','
string|"'disk'"
op|']'
op|','
nl|'\n'
string|"'additionalProperties'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'required'"
op|':'
op|'['
string|"'flavor'"
op|']'
op|','
nl|'\n'
string|"'additionalProperties'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
newline|'\n'
endmarker|''
end_unit

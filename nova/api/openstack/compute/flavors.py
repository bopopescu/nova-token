begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'webob'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
op|'.'
name|'compute'
op|'.'
name|'views'
name|'import'
name|'flavors'
name|'as'
name|'flavors_view'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'wsgi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'xmlutil'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_flavor
name|'def'
name|'make_flavor'
op|'('
name|'elem'
op|','
name|'detailed'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'elem'
op|'.'
name|'set'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'if'
name|'detailed'
op|':'
newline|'\n'
indent|'        '
name|'elem'
op|'.'
name|'set'
op|'('
string|"'ram'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'disk'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'vcpus'"
op|','
name|'xmlutil'
op|'.'
name|'EmptyStringSelector'
op|'('
string|"'vcpus'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xmlutil'
op|'.'
name|'make_links'
op|'('
name|'elem'
op|','
string|"'links'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|flavor_nsmap
dedent|''
name|'flavor_nsmap'
op|'='
op|'{'
name|'None'
op|':'
name|'xmlutil'
op|'.'
name|'XMLNS_V11'
op|','
string|"'atom'"
op|':'
name|'xmlutil'
op|'.'
name|'XMLNS_ATOM'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlavorTemplate
name|'class'
name|'FlavorTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'flavor'"
op|','
name|'selector'
op|'='
string|"'flavor'"
op|')'
newline|'\n'
name|'make_flavor'
op|'('
name|'root'
op|','
name|'detailed'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'flavor_nsmap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MinimalFlavorsTemplate
dedent|''
dedent|''
name|'class'
name|'MinimalFlavorsTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'flavors'"
op|')'
newline|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root'
op|','
string|"'flavor'"
op|','
name|'selector'
op|'='
string|"'flavors'"
op|')'
newline|'\n'
name|'make_flavor'
op|'('
name|'elem'
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'flavor_nsmap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlavorsTemplate
dedent|''
dedent|''
name|'class'
name|'FlavorsTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'flavors'"
op|')'
newline|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root'
op|','
string|"'flavor'"
op|','
name|'selector'
op|'='
string|"'flavors'"
op|')'
newline|'\n'
name|'make_flavor'
op|'('
name|'elem'
op|','
name|'detailed'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'flavor_nsmap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Controller
dedent|''
dedent|''
name|'class'
name|'Controller'
op|'('
name|'wsgi'
op|'.'
name|'Controller'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Flavor controller for the OpenStack API."""'
newline|'\n'
nl|'\n'
DECL|variable|_view_builder_class
name|'_view_builder_class'
op|'='
name|'flavors_view'
op|'.'
name|'ViewBuilder'
newline|'\n'
nl|'\n'
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'MinimalFlavorsTemplate'
op|')'
newline|'\n'
DECL|member|index
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all flavors in brief."""'
newline|'\n'
name|'limited_flavors'
op|'='
name|'self'
op|'.'
name|'_get_flavors'
op|'('
name|'req'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_view_builder'
op|'.'
name|'index'
op|'('
name|'req'
op|','
name|'limited_flavors'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'FlavorsTemplate'
op|')'
newline|'\n'
DECL|member|detail
name|'def'
name|'detail'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all flavors in detail."""'
newline|'\n'
name|'limited_flavors'
op|'='
name|'self'
op|'.'
name|'_get_flavors'
op|'('
name|'req'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'cache_db_flavors'
op|'('
name|'limited_flavors'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_view_builder'
op|'.'
name|'detail'
op|'('
name|'req'
op|','
name|'limited_flavors'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'FlavorTemplate'
op|')'
newline|'\n'
DECL|member|show
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the given flavor id."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
name|'id'
op|','
name|'ctxt'
op|'='
name|'context'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'cache_db_flavor'
op|'('
name|'flavor'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_view_builder'
op|'.'
name|'show'
op|'('
name|'req'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_is_public
dedent|''
name|'def'
name|'_parse_is_public'
op|'('
name|'self'
op|','
name|'is_public'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse is_public into something usable."""'
newline|'\n'
nl|'\n'
name|'if'
name|'is_public'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# preserve default value of showing only public flavors'
nl|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'utils'
op|'.'
name|'is_none_string'
op|'('
name|'is_public'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'strutils'
op|'.'
name|'bool_from_string'
op|'('
name|'is_public'
op|','
name|'strict'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Invalid is_public filter [%s]'"
op|')'
op|'%'
name|'is_public'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_flavors
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_flavors'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Helper function that returns a list of flavor dicts."""'
newline|'\n'
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
comment|'# Only admin has query access to all flavor types'
nl|'\n'
indent|'            '
name|'filters'
op|'['
string|"'is_public'"
op|']'
op|'='
name|'self'
op|'.'
name|'_parse_is_public'
op|'('
nl|'\n'
name|'req'
op|'.'
name|'params'
op|'.'
name|'get'
op|'('
string|"'is_public'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'['
string|"'is_public'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'filters'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'minRam'"
name|'in'
name|'req'
op|'.'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'filters'
op|'['
string|"'min_memory_mb'"
op|']'
op|'='
name|'int'
op|'('
name|'req'
op|'.'
name|'params'
op|'['
string|"'minRam'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Invalid minRam filter [%s]'"
op|')'
op|'%'
name|'req'
op|'.'
name|'params'
op|'['
string|"'minRam'"
op|']'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'minDisk'"
name|'in'
name|'req'
op|'.'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'filters'
op|'['
string|"'min_root_gb'"
op|']'
op|'='
name|'int'
op|'('
name|'req'
op|'.'
name|'params'
op|'['
string|"'minDisk'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Invalid minDisk filter [%s]'"
op|')'
op|'%'
name|'req'
op|'.'
name|'params'
op|'['
string|"'minDisk'"
op|']'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'limited_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
name|'flavors_list'
op|'='
name|'limited_flavors'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
name|'sorted_flavors'
op|'='
name|'sorted'
op|'('
name|'flavors_list'
op|','
nl|'\n'
name|'key'
op|'='
name|'lambda'
name|'item'
op|':'
name|'item'
op|'['
string|"'flavorid'"
op|']'
op|')'
newline|'\n'
name|'limited_flavors'
op|'='
name|'common'
op|'.'
name|'limited_by_marker'
op|'('
name|'sorted_flavors'
op|','
name|'req'
op|')'
newline|'\n'
name|'return'
name|'limited_flavors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_resource
dedent|''
dedent|''
name|'def'
name|'create_resource'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'wsgi'
op|'.'
name|'Resource'
op|'('
name|'Controller'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

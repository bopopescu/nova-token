begin_unit
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'# Copyright 2012 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""The security groups extension."""'
newline|'\n'
nl|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'webob'
name|'import'
name|'exc'
newline|'\n'
name|'import'
name|'webob'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'extensions'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'wsgi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'xmlutil'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
DECL|variable|authorize
name|'authorize'
op|'='
name|'extensions'
op|'.'
name|'extension_authorizer'
op|'('
string|"'compute'"
op|','
string|"'security_groups'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_rule
name|'def'
name|'make_rule'
op|'('
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'elem'
op|'.'
name|'set'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'parent_group_id'"
op|')'
newline|'\n'
nl|'\n'
name|'proto'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'ip_protocol'"
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'text'
op|'='
string|"'ip_protocol'"
newline|'\n'
nl|'\n'
name|'from_port'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'from_port'"
op|')'
newline|'\n'
name|'from_port'
op|'.'
name|'text'
op|'='
string|"'from_port'"
newline|'\n'
nl|'\n'
name|'to_port'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'to_port'"
op|')'
newline|'\n'
name|'to_port'
op|'.'
name|'text'
op|'='
string|"'to_port'"
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'group'"
op|','
name|'selector'
op|'='
string|"'group'"
op|')'
newline|'\n'
name|'name'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'group'
op|','
string|"'name'"
op|')'
newline|'\n'
name|'name'
op|'.'
name|'text'
op|'='
string|"'name'"
newline|'\n'
name|'tenant_id'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'group'
op|','
string|"'tenant_id'"
op|')'
newline|'\n'
name|'tenant_id'
op|'.'
name|'text'
op|'='
string|"'tenant_id'"
newline|'\n'
nl|'\n'
name|'ip_range'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'ip_range'"
op|','
nl|'\n'
name|'selector'
op|'='
string|"'ip_range'"
op|')'
newline|'\n'
name|'cidr'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'ip_range'
op|','
string|"'cidr'"
op|')'
newline|'\n'
name|'cidr'
op|'.'
name|'text'
op|'='
string|"'cidr'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_sg
dedent|''
name|'def'
name|'make_sg'
op|'('
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'elem'
op|'.'
name|'set'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'tenant_id'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'name'"
op|')'
newline|'\n'
nl|'\n'
name|'desc'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'description'"
op|')'
newline|'\n'
name|'desc'
op|'.'
name|'text'
op|'='
string|"'description'"
newline|'\n'
nl|'\n'
name|'rules'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'elem'
op|','
string|"'rules'"
op|')'
newline|'\n'
name|'rule'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'rules'
op|','
string|"'rule'"
op|','
name|'selector'
op|'='
string|"'rules'"
op|')'
newline|'\n'
name|'make_rule'
op|'('
name|'rule'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|sg_nsmap
dedent|''
name|'sg_nsmap'
op|'='
op|'{'
name|'None'
op|':'
name|'wsgi'
op|'.'
name|'XMLNS_V11'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupRuleTemplate
name|'class'
name|'SecurityGroupRuleTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'security_group_rule'"
op|','
nl|'\n'
name|'selector'
op|'='
string|"'security_group_rule'"
op|')'
newline|'\n'
name|'make_rule'
op|'('
name|'root'
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'sg_nsmap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupTemplate
dedent|''
dedent|''
name|'class'
name|'SecurityGroupTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'security_group'"
op|','
nl|'\n'
name|'selector'
op|'='
string|"'security_group'"
op|')'
newline|'\n'
name|'make_sg'
op|'('
name|'root'
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'sg_nsmap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupsTemplate
dedent|''
dedent|''
name|'class'
name|'SecurityGroupsTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'security_groups'"
op|')'
newline|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root'
op|','
string|"'security_group'"
op|','
nl|'\n'
name|'selector'
op|'='
string|"'security_groups'"
op|')'
newline|'\n'
name|'make_sg'
op|'('
name|'elem'
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'sg_nsmap'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupXMLDeserializer
dedent|''
dedent|''
name|'class'
name|'SecurityGroupXMLDeserializer'
op|'('
name|'wsgi'
op|'.'
name|'MetadataXMLDeserializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Deserializer to handle xml-formatted security group requests.\n    """'
newline|'\n'
DECL|member|default
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialize an xml-formatted security group create request"""'
newline|'\n'
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'string'
op|')'
newline|'\n'
name|'security_group'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sg_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'dom'
op|','
nl|'\n'
string|"'security_group'"
op|')'
newline|'\n'
name|'if'
name|'sg_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'sg_node'
op|'.'
name|'hasAttribute'
op|'('
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'security_group'
op|'['
string|"'name'"
op|']'
op|'='
name|'sg_node'
op|'.'
name|'getAttribute'
op|'('
string|"'name'"
op|')'
newline|'\n'
dedent|''
name|'desc_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_node'
op|','
nl|'\n'
string|'"description"'
op|')'
newline|'\n'
name|'if'
name|'desc_node'
op|':'
newline|'\n'
indent|'                '
name|'security_group'
op|'['
string|"'description'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'desc_node'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'body'"
op|':'
op|'{'
string|"'security_group'"
op|':'
name|'security_group'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupRulesXMLDeserializer
dedent|''
dedent|''
name|'class'
name|'SecurityGroupRulesXMLDeserializer'
op|'('
name|'wsgi'
op|'.'
name|'MetadataXMLDeserializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Deserializer to handle xml-formatted security group requests.\n    """'
newline|'\n'
nl|'\n'
DECL|member|default
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialize an xml-formatted security group create request"""'
newline|'\n'
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'string'
op|')'
newline|'\n'
name|'security_group_rule'
op|'='
name|'self'
op|'.'
name|'_extract_security_group_rule'
op|'('
name|'dom'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'body'"
op|':'
op|'{'
string|"'security_group_rule'"
op|':'
name|'security_group_rule'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_extract_security_group_rule
dedent|''
name|'def'
name|'_extract_security_group_rule'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Marshal the security group rule attribute of a parsed request"""'
newline|'\n'
name|'sg_rule'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sg_rule_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'node'
op|','
nl|'\n'
string|"'security_group_rule'"
op|')'
newline|'\n'
name|'if'
name|'sg_rule_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ip_protocol_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_rule_node'
op|','
nl|'\n'
string|'"ip_protocol"'
op|')'
newline|'\n'
name|'if'
name|'ip_protocol_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sg_rule'
op|'['
string|"'ip_protocol'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'ip_protocol_node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'from_port_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_rule_node'
op|','
nl|'\n'
string|'"from_port"'
op|')'
newline|'\n'
name|'if'
name|'from_port_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sg_rule'
op|'['
string|"'from_port'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'from_port_node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'to_port_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_rule_node'
op|','
string|'"to_port"'
op|')'
newline|'\n'
name|'if'
name|'to_port_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sg_rule'
op|'['
string|"'to_port'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'to_port_node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'parent_group_id_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_rule_node'
op|','
nl|'\n'
string|'"parent_group_id"'
op|')'
newline|'\n'
name|'if'
name|'parent_group_id_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sg_rule'
op|'['
string|"'parent_group_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
nl|'\n'
name|'parent_group_id_node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group_id_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_rule_node'
op|','
nl|'\n'
string|'"group_id"'
op|')'
newline|'\n'
name|'if'
name|'group_id_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sg_rule'
op|'['
string|"'group_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'group_id_node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cidr_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'sg_rule_node'
op|','
string|'"cidr"'
op|')'
newline|'\n'
name|'if'
name|'cidr_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sg_rule'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'cidr_node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'sg_rule'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupControllerBase
dedent|''
dedent|''
name|'class'
name|'SecurityGroupControllerBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for Security Group controllers."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'security_group_handler'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_format_security_group_rule
dedent|''
name|'def'
name|'_format_security_group_rule'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'rule'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sg_rule'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sg_rule'
op|'['
string|"'id'"
op|']'
op|'='
name|'rule'
op|'.'
name|'id'
newline|'\n'
name|'sg_rule'
op|'['
string|"'parent_group_id'"
op|']'
op|'='
name|'rule'
op|'.'
name|'parent_group_id'
newline|'\n'
name|'sg_rule'
op|'['
string|"'ip_protocol'"
op|']'
op|'='
name|'rule'
op|'.'
name|'protocol'
newline|'\n'
name|'sg_rule'
op|'['
string|"'from_port'"
op|']'
op|'='
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
name|'sg_rule'
op|'['
string|"'to_port'"
op|']'
op|'='
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
name|'sg_rule'
op|'['
string|"'group'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'sg_rule'
op|'['
string|"'ip_range'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'group_id'
op|':'
newline|'\n'
indent|'            '
name|'source_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'rule'
op|'.'
name|'group_id'
op|')'
newline|'\n'
name|'sg_rule'
op|'['
string|"'group'"
op|']'
op|'='
op|'{'
string|"'name'"
op|':'
name|'source_group'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'source_group'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sg_rule'
op|'['
string|"'ip_range'"
op|']'
op|'='
op|'{'
string|"'cidr'"
op|':'
name|'rule'
op|'.'
name|'cidr'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'sg_rule'
newline|'\n'
nl|'\n'
DECL|member|_format_security_group
dedent|''
name|'def'
name|'_format_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_group'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'security_group'
op|'['
string|"'id'"
op|']'
op|'='
name|'group'
op|'.'
name|'id'
newline|'\n'
name|'security_group'
op|'['
string|"'description'"
op|']'
op|'='
name|'group'
op|'.'
name|'description'
newline|'\n'
name|'security_group'
op|'['
string|"'name'"
op|']'
op|'='
name|'group'
op|'.'
name|'name'
newline|'\n'
name|'security_group'
op|'['
string|"'tenant_id'"
op|']'
op|'='
name|'group'
op|'.'
name|'project_id'
newline|'\n'
name|'security_group'
op|'['
string|"'rules'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'security_group'
op|'['
string|"'rules'"
op|']'
op|'+='
op|'['
name|'self'
op|'.'
name|'_format_security_group_rule'
op|'('
nl|'\n'
name|'context'
op|','
name|'rule'
op|')'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'security_group'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupController
dedent|''
dedent|''
name|'class'
name|'SecurityGroupController'
op|'('
name|'SecurityGroupControllerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The Security group API controller for the OpenStack API."""'
newline|'\n'
nl|'\n'
DECL|member|_get_security_group
name|'def'
name|'_get_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'int'
op|'('
name|'id'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group id should be integer"'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'security_group'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupTemplate'
op|')'
newline|'\n'
DECL|member|show
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the given security group."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'_get_security_group'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'security_group'"
op|':'
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a security group."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'_get_security_group'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'if'
name|'db'
op|'.'
name|'security_group_in_use'
op|'('
name|'context'
op|','
name|'security_group'
op|'.'
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group is still in use"'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Delete security group %s"'
op|')'
op|','
name|'id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'context'
op|','
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_destroy_refresh'
op|'('
nl|'\n'
name|'context'
op|','
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'webob'
op|'.'
name|'Response'
op|'('
name|'status_int'
op|'='
number|'202'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupsTemplate'
op|')'
newline|'\n'
DECL|member|index
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of security groups"""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'groups'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'limited_list'
op|'='
name|'common'
op|'.'
name|'limited'
op|'('
name|'groups'
op|','
name|'req'
op|')'
newline|'\n'
name|'result'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
name|'group'
op|')'
nl|'\n'
name|'for'
name|'group'
name|'in'
name|'limited_list'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'security_groups'"
op|':'
nl|'\n'
name|'list'
op|'('
name|'sorted'
op|'('
name|'result'
op|','
nl|'\n'
name|'key'
op|'='
name|'lambda'
name|'k'
op|':'
op|'('
name|'k'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'k'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupTemplate'
op|')'
newline|'\n'
op|'@'
name|'wsgi'
op|'.'
name|'deserializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupXMLDeserializer'
op|')'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a new security group."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPUnprocessableEntity'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'security_group'
op|'='
name|'body'
op|'.'
name|'get'
op|'('
string|"'security_group'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'security_group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPUnprocessableEntity'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group_name'
op|'='
name|'security_group'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
name|'None'
op|')'
newline|'\n'
name|'group_description'
op|'='
name|'security_group'
op|'.'
name|'get'
op|'('
string|"'description'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_validate_security_group_property'
op|'('
name|'group_name'
op|','
string|'"name"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_validate_security_group_property'
op|'('
name|'group_description'
op|','
nl|'\n'
string|'"description"'
op|')'
newline|'\n'
name|'group_name'
op|'='
name|'group_name'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'group_description'
op|'='
name|'group_description'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'quota'
op|'.'
name|'allowed_security_groups'
op|'('
name|'context'
op|','
number|'1'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Quota exceeded, too many security groups."'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create Security Group %s"'
op|')'
op|','
name|'group_name'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'db'
op|'.'
name|'security_group_exists'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'project_id'
op|','
name|'group_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Security group %s already exists'"
op|')'
op|'%'
name|'group_name'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group'
op|'='
op|'{'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'group_name'
op|','
nl|'\n'
string|"'description'"
op|':'
name|'group_description'
op|'}'
newline|'\n'
name|'group_ref'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'context'
op|','
name|'group'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_create_refresh'
op|'('
name|'context'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'security_group'"
op|':'
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
nl|'\n'
name|'group_ref'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_validate_security_group_property
dedent|''
name|'def'
name|'_validate_security_group_property'
op|'('
name|'self'
op|','
name|'value'
op|','
name|'typ'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" typ will be either \'name\' or \'description\',\n            depending on the caller\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group %s is not a string or unicode"'
op|')'
op|'%'
name|'typ'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'val'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group %s cannot be empty."'
op|')'
op|'%'
name|'typ'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'val'
op|')'
op|'>'
number|'255'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group %s should not be greater "'
nl|'\n'
string|'"than 255 characters."'
op|')'
op|'%'
name|'typ'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupRulesController
dedent|''
dedent|''
dedent|''
name|'class'
name|'SecurityGroupRulesController'
op|'('
name|'SecurityGroupControllerBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupRuleTemplate'
op|')'
newline|'\n'
op|'@'
name|'wsgi'
op|'.'
name|'deserializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupRulesXMLDeserializer'
op|')'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPUnprocessableEntity'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
string|"'security_group_rule'"
name|'in'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPUnprocessableEntity'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'sg_rule'
op|'='
name|'body'
op|'['
string|"'security_group_rule'"
op|']'
newline|'\n'
name|'parent_group_id'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'parent_group_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'parent_group_id'
op|'='
name|'int'
op|'('
name|'parent_group_id'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'parent_group_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Parent group id is not integer"'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group (%s) not found"'
op|')'
op|'%'
name|'parent_group_id'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"Authorize security group ingress %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|','
name|'security_group'
op|'['
string|"'name'"
op|']'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
name|'self'
op|'.'
name|'_rule_args_to_dict'
op|'('
name|'context'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'to_port'"
op|')'
op|','
nl|'\n'
name|'from_port'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'from_port'"
op|')'
op|','
nl|'\n'
name|'parent_group_id'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'parent_group_id'"
op|')'
op|','
nl|'\n'
name|'ip_protocol'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'ip_protocol'"
op|')'
op|','
nl|'\n'
name|'cidr'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'cidr'"
op|')'
op|','
nl|'\n'
name|'group_id'
op|'='
name|'sg_rule'
op|'.'
name|'get'
op|'('
string|"'group_id'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'values'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Not enough parameters to build a "'
nl|'\n'
string|'"valid rule."'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'parent_group_id'"
op|']'
op|'='
name|'security_group'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_security_group_rule_exists'
op|'('
name|'security_group'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'This rule already exists in group %s'"
op|')'
op|'%'
name|'parent_group_id'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'allowed'
op|'='
name|'quota'
op|'.'
name|'allowed_security_group_rules'
op|'('
name|'context'
op|','
nl|'\n'
name|'parent_group_id'
op|','
nl|'\n'
number|'1'
op|')'
newline|'\n'
name|'if'
name|'allowed'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Quota exceeded, too many security group rules."'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'security_group_rule'
op|'='
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_rule_create_refresh'
op|'('
nl|'\n'
name|'context'
op|','
op|'['
name|'security_group_rule'
op|'['
string|"'id'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'trigger_security_group_rules_refresh'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group_id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|'"security_group_rule"'
op|':'
name|'self'
op|'.'
name|'_format_security_group_rule'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'security_group_rule'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_security_group_rule_exists
dedent|''
name|'def'
name|'_security_group_rule_exists'
op|'('
name|'self'
op|','
name|'security_group'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicates whether the specified rule values are already\n           defined in the given security group.\n        """'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'is_duplicate'
op|'='
name|'True'
newline|'\n'
name|'keys'
op|'='
op|'('
string|"'group_id'"
op|','
string|"'cidr'"
op|','
string|"'from_port'"
op|','
string|"'to_port'"
op|','
string|"'protocol'"
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|'!='
name|'values'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'is_duplicate'
op|'='
name|'False'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'is_duplicate'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_rule_args_to_dict
dedent|''
name|'def'
name|'_rule_args_to_dict'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'to_port'
op|'='
name|'None'
op|','
name|'from_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'parent_group_id'
op|'='
name|'None'
op|','
name|'ip_protocol'
op|'='
name|'None'
op|','
nl|'\n'
name|'cidr'
op|'='
name|'None'
op|','
name|'group_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'group_id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'parent_group_id'
op|'='
name|'int'
op|'('
name|'parent_group_id'
op|')'
newline|'\n'
name|'group_id'
op|'='
name|'int'
op|'('
name|'group_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Parent or group id is not integer"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'group_id'"
op|']'
op|'='
name|'group_id'
newline|'\n'
comment|'#check if groupId exists'
nl|'\n'
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'group_id'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'cidr'
op|':'
newline|'\n'
comment|'# If this fails, it throws an exception. This is what we want.'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cidr'
op|'='
name|'urllib'
op|'.'
name|'unquote'
op|'('
name|'cidr'
op|')'
op|'.'
name|'decode'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCidr'
op|'('
name|'cidr'
op|'='
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'utils'
op|'.'
name|'is_valid_cidr'
op|'('
name|'cidr'
op|')'
op|':'
newline|'\n'
comment|'# Raise exception for non-valid address'
nl|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidCidr'
op|'('
name|'cidr'
op|'='
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'cidr'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'cidr'"
op|']'
op|'='
string|"'0.0.0.0/0'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'group_id'
op|':'
newline|'\n'
comment|'# Open everything if an explicit port range or type/code are not'
nl|'\n'
comment|'# specified, but only if a source group was specified.'
nl|'\n'
indent|'            '
name|'ip_proto_upper'
op|'='
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'if'
name|'ip_protocol'
name|'else'
string|"''"
newline|'\n'
name|'if'
op|'('
name|'ip_proto_upper'
op|'=='
string|"'ICMP'"
name|'and'
nl|'\n'
name|'from_port'
name|'is'
name|'None'
name|'and'
name|'to_port'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'from_port'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'to_port'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'ip_proto_upper'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|']'
name|'and'
name|'from_port'
name|'is'
name|'None'
nl|'\n'
name|'and'
name|'to_port'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'from_port'
op|'='
number|'1'
newline|'\n'
name|'to_port'
op|'='
number|'65535'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ip_protocol'
name|'and'
name|'from_port'
name|'is'
name|'not'
name|'None'
name|'and'
name|'to_port'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'ip_protocol'
op|'='
name|'str'
op|'('
name|'ip_protocol'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'from_port'
op|'='
name|'int'
op|'('
name|'from_port'
op|')'
newline|'\n'
name|'to_port'
op|'='
name|'int'
op|'('
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'ICMP'"
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
string|'"Type and"'
nl|'\n'
string|'" Code must be integers for ICMP protocol type"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
string|'"To and From ports "'
nl|'\n'
string|'"must be integers"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|','
string|"'ICMP'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidIpProtocol'
op|'('
name|'protocol'
op|'='
name|'ip_protocol'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that from_port must always be less than'
nl|'\n'
comment|'# or equal to to_port'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|']'
name|'and'
nl|'\n'
name|'from_port'
op|'>'
name|'to_port'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidPortRange'
op|'('
name|'from_port'
op|'='
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'to_port'
op|','
name|'msg'
op|'='
string|'"Former value cannot"'
nl|'\n'
string|'" be greater than the later"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify valid TCP, UDP port ranges'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|']'
name|'and'
nl|'\n'
op|'('
name|'from_port'
op|'<'
number|'1'
name|'or'
name|'to_port'
op|'>'
number|'65535'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidPortRange'
op|'('
name|'from_port'
op|'='
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'to_port'
op|','
name|'msg'
op|'='
string|'"Valid TCP ports should"'
nl|'\n'
string|'" be between 1-65535"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify ICMP type and code'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|'"ICMP"'
name|'and'
nl|'\n'
op|'('
name|'from_port'
op|'<'
op|'-'
number|'1'
name|'or'
name|'from_port'
op|'>'
number|'255'
name|'or'
nl|'\n'
name|'to_port'
op|'<'
op|'-'
number|'1'
name|'or'
name|'to_port'
op|'>'
number|'255'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidPortRange'
op|'('
name|'from_port'
op|'='
name|'from_port'
op|','
nl|'\n'
name|'to_port'
op|'='
name|'to_port'
op|','
name|'msg'
op|'='
string|'"For ICMP, the"'
nl|'\n'
string|'" type:code must be valid"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'protocol'"
op|']'
op|'='
name|'ip_protocol'
newline|'\n'
name|'values'
op|'['
string|"'from_port'"
op|']'
op|'='
name|'from_port'
newline|'\n'
name|'values'
op|'['
string|"'to_port'"
op|']'
op|'='
name|'to_port'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If cidr based filtering, protocol and ports are mandatory'
nl|'\n'
indent|'            '
name|'if'
string|"'cidr'"
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'int'
op|'('
name|'id'
op|')'
newline|'\n'
name|'rule'
op|'='
name|'db'
op|'.'
name|'security_group_rule_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Rule id is not integer"'
op|')'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Rule (%s) not found"'
op|')'
op|'%'
name|'id'
newline|'\n'
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group_id'
op|'='
name|'rule'
op|'.'
name|'parent_group_id'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'group_id'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Revoke security group ingress %s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'msg'
op|','
name|'security_group'
op|'['
string|"'name'"
op|']'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_destroy'
op|'('
name|'context'
op|','
name|'rule'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_security_group_rule_destroy_refresh'
op|'('
nl|'\n'
name|'context'
op|','
op|'['
name|'rule'
op|'['
string|"'id'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'trigger_security_group_rules_refresh'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_group_id'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'webob'
op|'.'
name|'Response'
op|'('
name|'status_int'
op|'='
number|'202'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerSecurityGroupController
dedent|''
dedent|''
name|'class'
name|'ServerSecurityGroupController'
op|'('
name|'SecurityGroupControllerBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'wsgi'
op|'.'
name|'serializers'
op|'('
name|'xml'
op|'='
name|'SecurityGroupsTemplate'
op|')'
newline|'\n'
DECL|member|index
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'server_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of security groups for the given instance."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'server_id'
op|')'
newline|'\n'
name|'groups'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ApiError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'e'
op|'.'
name|'message'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPUnauthorized'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
name|'group'
op|')'
nl|'\n'
name|'for'
name|'group'
name|'in'
name|'groups'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'security_groups'"
op|':'
nl|'\n'
name|'list'
op|'('
name|'sorted'
op|'('
name|'result'
op|','
nl|'\n'
name|'key'
op|'='
name|'lambda'
name|'k'
op|':'
op|'('
name|'k'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'k'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityGroupActionController
dedent|''
dedent|''
name|'class'
name|'SecurityGroupActionController'
op|'('
name|'wsgi'
op|'.'
name|'Controller'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SecurityGroupActionController'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'security_group_handler'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'action'
op|'('
string|"'addSecurityGroup'"
op|')'
newline|'\n'
DECL|member|_addSecurityGroup
name|'def'
name|'_addSecurityGroup'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'body'
op|'['
string|"'addSecurityGroup'"
op|']'
newline|'\n'
name|'group_name'
op|'='
name|'body'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Missing parameter dict"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group not specified"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'group_name'
name|'or'
name|'group_name'
op|'.'
name|'strip'
op|'('
op|')'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group name cannot be empty"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'add_security_group'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_instance_add_security_group_refresh'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'group_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'SecurityGroupNotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'webob'
op|'.'
name|'Response'
op|'('
name|'status_int'
op|'='
number|'202'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'wsgi'
op|'.'
name|'action'
op|'('
string|"'removeSecurityGroup'"
op|')'
newline|'\n'
DECL|member|_removeSecurityGroup
name|'def'
name|'_removeSecurityGroup'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'authorize'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'body'
op|'['
string|"'removeSecurityGroup'"
op|']'
newline|'\n'
name|'group_name'
op|'='
name|'body'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Missing parameter dict"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group not specified"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'group_name'
name|'or'
name|'group_name'
op|'.'
name|'strip'
op|'('
op|')'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Security group name cannot be empty"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'remove_security_group'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sgh'
op|'.'
name|'trigger_instance_remove_security_group_refresh'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
name|'group_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'SecurityGroupNotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
name|'as'
name|'exp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'unicode'
op|'('
name|'exp'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'webob'
op|'.'
name|'Response'
op|'('
name|'status_int'
op|'='
number|'202'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Security_groups
dedent|''
dedent|''
name|'class'
name|'Security_groups'
op|'('
name|'extensions'
op|'.'
name|'ExtensionDescriptor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Security group support"""'
newline|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
string|'"SecurityGroups"'
newline|'\n'
DECL|variable|alias
name|'alias'
op|'='
string|'"security_groups"'
newline|'\n'
DECL|variable|namespace
name|'namespace'
op|'='
string|'"http://docs.openstack.org/compute/ext/securitygroups/api/v1.1"'
newline|'\n'
DECL|variable|updated
name|'updated'
op|'='
string|'"2011-07-21T00:00:00+00:00"'
newline|'\n'
nl|'\n'
DECL|member|get_controller_extensions
name|'def'
name|'get_controller_extensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'controller'
op|'='
name|'SecurityGroupActionController'
op|'('
op|')'
newline|'\n'
name|'extension'
op|'='
name|'extensions'
op|'.'
name|'ControllerExtension'
op|'('
name|'self'
op|','
string|"'servers'"
op|','
name|'controller'
op|')'
newline|'\n'
name|'return'
op|'['
name|'extension'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_resources
dedent|''
name|'def'
name|'get_resources'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resources'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'res'
op|'='
name|'extensions'
op|'.'
name|'ResourceExtension'
op|'('
string|"'os-security-groups'"
op|','
nl|'\n'
name|'controller'
op|'='
name|'SecurityGroupController'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'resources'
op|'.'
name|'append'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
name|'res'
op|'='
name|'extensions'
op|'.'
name|'ResourceExtension'
op|'('
string|"'os-security-group-rules'"
op|','
nl|'\n'
name|'controller'
op|'='
name|'SecurityGroupRulesController'
op|'('
op|')'
op|')'
newline|'\n'
name|'resources'
op|'.'
name|'append'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
name|'res'
op|'='
name|'extensions'
op|'.'
name|'ResourceExtension'
op|'('
nl|'\n'
string|"'os-security-groups'"
op|','
nl|'\n'
name|'controller'
op|'='
name|'ServerSecurityGroupController'
op|'('
op|')'
op|','
nl|'\n'
name|'parent'
op|'='
name|'dict'
op|'('
name|'member_name'
op|'='
string|"'server'"
op|','
name|'collection_name'
op|'='
string|"'servers'"
op|')'
op|')'
newline|'\n'
name|'resources'
op|'.'
name|'append'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'resources'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

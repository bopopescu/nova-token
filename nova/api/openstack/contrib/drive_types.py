begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 Zadara Storage Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'""" The Drive Types extension for Virtual Storage Arrays"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'webob'
name|'import'
name|'exc'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'vsa'
name|'import'
name|'drive_types'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'extensions'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'faults'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'wsgi'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.api.drive_types"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DriveTypeController
name|'class'
name|'DriveTypeController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The Drive Type API controller for the OpenStack API."""'
newline|'\n'
nl|'\n'
DECL|variable|_serialization_metadata
name|'_serialization_metadata'
op|'='
op|'{'
nl|'\n'
string|"'application/xml'"
op|':'
op|'{'
nl|'\n'
string|'"attributes"'
op|':'
op|'{'
nl|'\n'
string|'"drive_type"'
op|':'
op|'['
nl|'\n'
string|'"id"'
op|','
nl|'\n'
string|'"displayName"'
op|','
nl|'\n'
string|'"type"'
op|','
nl|'\n'
string|'"size"'
op|','
nl|'\n'
string|'"rpm"'
op|','
nl|'\n'
string|'"capabilities"'
op|','
nl|'\n'
op|']'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_drive_type_view
name|'def'
name|'_drive_type_view'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'drive'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Maps keys for drive types view."""'
newline|'\n'
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'d'
op|'['
string|"'id'"
op|']'
op|'='
name|'drive'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'d'
op|'['
string|"'displayName'"
op|']'
op|'='
name|'drive'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'d'
op|'['
string|"'type'"
op|']'
op|'='
name|'drive'
op|'['
string|"'type'"
op|']'
newline|'\n'
name|'d'
op|'['
string|"'size'"
op|']'
op|'='
name|'drive'
op|'['
string|"'size_gb'"
op|']'
newline|'\n'
name|'d'
op|'['
string|"'rpm'"
op|']'
op|'='
name|'drive'
op|'['
string|"'rpm'"
op|']'
newline|'\n'
name|'d'
op|'['
string|"'capabilities'"
op|']'
op|'='
name|'drive'
op|'['
string|"'capabilities'"
op|']'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of drive types."""'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
name|'drive_types'
op|'='
name|'drive_types'
op|'.'
name|'drive_type_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'limited_list'
op|'='
name|'common'
op|'.'
name|'limited'
op|'('
name|'drive_types'
op|','
name|'req'
op|')'
newline|'\n'
name|'res'
op|'='
op|'['
name|'self'
op|'.'
name|'_drive_type_view'
op|'('
name|'context'
op|','
name|'drive'
op|')'
name|'for'
name|'drive'
name|'in'
name|'limited_list'
op|']'
newline|'\n'
name|'return'
op|'{'
string|"'drive_types'"
op|':'
name|'res'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return data about the given drive type."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'drive'
op|'='
name|'drive_types'
op|'.'
name|'drive_type_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'faults'
op|'.'
name|'Fault'
op|'('
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'drive_type'"
op|':'
name|'self'
op|'.'
name|'_drive_type_view'
op|'('
name|'context'
op|','
name|'drive'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a new drive type."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'faults'
op|'.'
name|'Fault'
op|'('
name|'exc'
op|'.'
name|'HTTPUnprocessableEntity'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'drive'
op|'='
name|'body'
op|'['
string|"'drive_type'"
op|']'
newline|'\n'
nl|'\n'
name|'name'
op|'='
name|'drive'
op|'.'
name|'get'
op|'('
string|"'displayName'"
op|')'
newline|'\n'
name|'type'
op|'='
name|'drive'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
newline|'\n'
name|'size'
op|'='
name|'drive'
op|'.'
name|'get'
op|'('
string|"'size'"
op|')'
newline|'\n'
name|'rpm'
op|'='
name|'drive'
op|'.'
name|'get'
op|'('
string|"'rpm'"
op|')'
newline|'\n'
name|'capabilities'
op|'='
name|'drive'
op|'.'
name|'get'
op|'('
string|"'capabilities'"
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create drive type %(name)s for "'
string|'"%(type)s:%(size)s:%(rpm)s"'
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'new_drive'
op|'='
name|'drive_types'
op|'.'
name|'drive_type_create'
op|'('
name|'context'
op|','
nl|'\n'
name|'type'
op|'='
name|'type'
op|','
nl|'\n'
name|'size_gb'
op|'='
name|'size'
op|','
nl|'\n'
name|'rpm'
op|'='
name|'rpm'
op|','
nl|'\n'
name|'capabilities'
op|'='
name|'capabilities'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'drive_type'"
op|':'
name|'self'
op|'.'
name|'_drive_type_view'
op|'('
name|'context'
op|','
name|'new_drive'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'req'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes a drive type."""'
newline|'\n'
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'['
string|"'nova.context'"
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Delete drive type with id: %s"'
op|')'
op|','
name|'id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'drive'
op|'='
name|'drive_types'
op|'.'
name|'drive_type_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'drive_types'
op|'.'
name|'drive_type_delete'
op|'('
name|'context'
op|','
name|'drive'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'faults'
op|'.'
name|'Fault'
op|'('
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'exc'
op|'.'
name|'HTTPAccepted'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Drive_types
dedent|''
dedent|''
name|'class'
name|'Drive_types'
op|'('
name|'extensions'
op|'.'
name|'ExtensionDescriptor'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|get_name
indent|'    '
name|'def'
name|'get_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"DriveTypes"'
newline|'\n'
nl|'\n'
DECL|member|get_alias
dedent|''
name|'def'
name|'get_alias'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"zadr-drive_types"'
newline|'\n'
nl|'\n'
DECL|member|get_description
dedent|''
name|'def'
name|'get_description'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"Drive Types support"'
newline|'\n'
nl|'\n'
DECL|member|get_namespace
dedent|''
name|'def'
name|'get_namespace'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"http://docs.openstack.org/ext/drive_types/api/v1.1"'
newline|'\n'
nl|'\n'
DECL|member|get_updated
dedent|''
name|'def'
name|'get_updated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"2011-06-29T00:00:00+00:00"'
newline|'\n'
nl|'\n'
DECL|member|get_resources
dedent|''
name|'def'
name|'get_resources'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resources'
op|'='
op|'['
op|']'
newline|'\n'
name|'res'
op|'='
name|'extensions'
op|'.'
name|'ResourceExtension'
op|'('
nl|'\n'
string|"'zadr-drive_types'"
op|','
nl|'\n'
name|'DriveTypeController'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'resources'
op|'.'
name|'append'
op|'('
name|'res'
op|')'
newline|'\n'
name|'return'
name|'resources'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'wsgi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|XMLNS_V10
name|'XMLNS_V10'
op|'='
string|"'http://docs.rackspacecloud.com/servers/api/v1.0'"
newline|'\n'
DECL|variable|XMLNS_V11
name|'XMLNS_V11'
op|'='
string|"'http://docs.openstack.org/compute/api/v1.1'"
newline|'\n'
DECL|variable|XMLNS_ATOM
name|'XMLNS_ATOM'
op|'='
string|"'http://www.w3.org/2005/Atom'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_schema
name|'def'
name|'validate_schema'
op|'('
name|'xml'
op|','
name|'schema_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'xml'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'base_path'
op|'='
string|"'nova/api/openstack/compute/schemas/v1.1/'"
newline|'\n'
name|'if'
name|'schema_name'
name|'in'
op|'('
string|"'atom'"
op|','
string|"'atom-link'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_path'
op|'='
string|"'nova/api/openstack/compute/schemas/'"
newline|'\n'
dedent|''
name|'schema_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'utils'
op|'.'
name|'novadir'
op|'('
op|')'
op|','
nl|'\n'
string|"'%s%s.rng'"
op|'%'
op|'('
name|'base_path'
op|','
name|'schema_name'
op|')'
op|')'
newline|'\n'
name|'schema_doc'
op|'='
name|'etree'
op|'.'
name|'parse'
op|'('
name|'schema_path'
op|')'
newline|'\n'
name|'relaxng'
op|'='
name|'etree'
op|'.'
name|'RelaxNG'
op|'('
name|'schema_doc'
op|')'
newline|'\n'
name|'relaxng'
op|'.'
name|'assertValid'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Selector
dedent|''
name|'class'
name|'Selector'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Selects datum to operate on from an object."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'chain'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize the selector.\n\n        Each argument is a subsequent index into the object.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'chain'
op|'='
name|'chain'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a representation of the selector."""'
newline|'\n'
nl|'\n'
name|'return'
string|'"Selector"'
op|'+'
name|'repr'
op|'('
name|'self'
op|'.'
name|'chain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'do_raise'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select a datum to operate on.\n\n        Selects the relevant datum within the object.\n\n        :param obj: The object from which to select the object.\n        :param do_raise: If False (the default), return None if the\n                         indexed datum does not exist.  Otherwise,\n                         raise a KeyError.\n        """'
newline|'\n'
nl|'\n'
comment|'# Walk the selector list'
nl|'\n'
name|'for'
name|'elem'
name|'in'
name|'self'
op|'.'
name|'chain'
op|':'
newline|'\n'
comment|"# If it's callable, call it"
nl|'\n'
indent|'            '
name|'if'
name|'callable'
op|'('
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'obj'
op|'='
name|'elem'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Use indexing'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'obj'
op|'='
name|'obj'
op|'['
name|'elem'
op|']'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'IndexError'
op|')'
op|':'
newline|'\n'
comment|'# No sense going any further'
nl|'\n'
indent|'                    '
name|'if'
name|'do_raise'
op|':'
newline|'\n'
comment|'# Convert to a KeyError, for consistency'
nl|'\n'
indent|'                        '
name|'raise'
name|'KeyError'
op|'('
name|'elem'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Return the finally-selected object'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_items
dedent|''
dedent|''
name|'def'
name|'get_items'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get items in obj."""'
newline|'\n'
nl|'\n'
name|'return'
name|'list'
op|'('
name|'obj'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EmptyStringSelector
dedent|''
name|'class'
name|'EmptyStringSelector'
op|'('
name|'Selector'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the empty string if Selector would return None."""'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'do_raise'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns empty string if the selected value does not exist."""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'EmptyStringSelector'
op|','
name|'self'
op|')'
op|'.'
name|'__call__'
op|'('
name|'obj'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConstantSelector
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConstantSelector'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a constant."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize the selector.\n\n        :param value: The value to return.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a representation of the selector."""'
newline|'\n'
nl|'\n'
name|'return'
name|'repr'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'_obj'
op|','
name|'_do_raise'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select a datum to operate on.\n\n        Returns a constant value.  Compatible with\n        Selector.__call__().\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TemplateElement
dedent|''
dedent|''
name|'class'
name|'TemplateElement'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represent an element in the template."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'attrib'
op|'='
name|'None'
op|','
name|'selector'
op|'='
name|'None'
op|','
name|'subselector'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'extra'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize an element.\n\n        Initializes an element in the template.  Keyword arguments\n        specify attributes to be set on the element; values must be\n        callables.  See TemplateElement.set() for more information.\n\n        :param tag: The name of the tag to create.\n        :param attrib: An optional dictionary of element attributes.\n        :param selector: An optional callable taking an object and\n                         optional boolean do_raise indicator and\n                         returning the object bound to the element.\n        :param subselector: An optional callable taking an object and\n                            optional boolean do_raise indicator and\n                            returning the object bound to the element.\n                            This is used to further refine the datum\n                            object returned by selector in the event\n                            that it is a list of objects.\n        """'
newline|'\n'
nl|'\n'
comment|'# Convert selector into a Selector'
nl|'\n'
name|'if'
name|'selector'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'selector'
op|'='
name|'Selector'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'callable'
op|'('
name|'selector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'selector'
op|'='
name|'Selector'
op|'('
name|'selector'
op|')'
newline|'\n'
nl|'\n'
comment|'# Convert subselector into a Selector'
nl|'\n'
dedent|''
name|'if'
name|'subselector'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'callable'
op|'('
name|'subselector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'subselector'
op|'='
name|'Selector'
op|'('
name|'subselector'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'tag'
op|'='
name|'tag'
newline|'\n'
name|'self'
op|'.'
name|'selector'
op|'='
name|'selector'
newline|'\n'
name|'self'
op|'.'
name|'subselector'
op|'='
name|'subselector'
newline|'\n'
name|'self'
op|'.'
name|'attrib'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_text'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_children'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_childmap'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Run the incoming attributes through set() so that they'
nl|'\n'
comment|'# become selectorized'
nl|'\n'
name|'if'
name|'not'
name|'attrib'
op|':'
newline|'\n'
indent|'            '
name|'attrib'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'attrib'
op|'.'
name|'update'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'set'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a representation of the template element."""'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|"'<%s.%s %r at %#x>'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|','
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'tag'
op|','
name|'id'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the number of child elements."""'
newline|'\n'
nl|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'_children'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine whether a child node named by key exists."""'
newline|'\n'
nl|'\n'
name|'return'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_childmap'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'idx'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve a child node by index or name."""'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'idx'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
comment|'# Allow access by node name'
nl|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_childmap'
op|'['
name|'idx'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_children'
op|'['
name|'idx'
op|']'
newline|'\n'
nl|'\n'
DECL|member|append
dedent|''
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Append a child to the element."""'
newline|'\n'
nl|'\n'
comment|'# Unwrap templates...'
nl|'\n'
name|'elem'
op|'='
name|'elem'
op|'.'
name|'unwrap'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Avoid duplications'
nl|'\n'
name|'if'
name|'elem'
op|'.'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'_childmap'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
name|'elem'
op|'.'
name|'tag'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_children'
op|'.'
name|'append'
op|'('
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_childmap'
op|'['
name|'elem'
op|'.'
name|'tag'
op|']'
op|'='
name|'elem'
newline|'\n'
nl|'\n'
DECL|member|extend
dedent|''
name|'def'
name|'extend'
op|'('
name|'self'
op|','
name|'elems'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Append children to the element."""'
newline|'\n'
nl|'\n'
comment|'# Pre-evaluate the elements'
nl|'\n'
name|'elemmap'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'elemlist'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'elem'
name|'in'
name|'elems'
op|':'
newline|'\n'
comment|'# Unwrap templates...'
nl|'\n'
indent|'            '
name|'elem'
op|'='
name|'elem'
op|'.'
name|'unwrap'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Avoid duplications'
nl|'\n'
name|'if'
name|'elem'
op|'.'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'_childmap'
name|'or'
name|'elem'
op|'.'
name|'tag'
name|'in'
name|'elemmap'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'KeyError'
op|'('
name|'elem'
op|'.'
name|'tag'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elemmap'
op|'['
name|'elem'
op|'.'
name|'tag'
op|']'
op|'='
name|'elem'
newline|'\n'
name|'elemlist'
op|'.'
name|'append'
op|'('
name|'elem'
op|')'
newline|'\n'
nl|'\n'
comment|'# Update the children'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_children'
op|'.'
name|'extend'
op|'('
name|'elemlist'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_childmap'
op|'.'
name|'update'
op|'('
name|'elemmap'
op|')'
newline|'\n'
nl|'\n'
DECL|member|insert
dedent|''
name|'def'
name|'insert'
op|'('
name|'self'
op|','
name|'idx'
op|','
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Insert a child element at the given index."""'
newline|'\n'
nl|'\n'
comment|'# Unwrap templates...'
nl|'\n'
name|'elem'
op|'='
name|'elem'
op|'.'
name|'unwrap'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Avoid duplications'
nl|'\n'
name|'if'
name|'elem'
op|'.'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'_childmap'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
name|'elem'
op|'.'
name|'tag'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_children'
op|'.'
name|'insert'
op|'('
name|'idx'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_childmap'
op|'['
name|'elem'
op|'.'
name|'tag'
op|']'
op|'='
name|'elem'
newline|'\n'
nl|'\n'
DECL|member|remove
dedent|''
name|'def'
name|'remove'
op|'('
name|'self'
op|','
name|'elem'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove a child element."""'
newline|'\n'
nl|'\n'
comment|'# Unwrap templates...'
nl|'\n'
name|'elem'
op|'='
name|'elem'
op|'.'
name|'unwrap'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if element exists'
nl|'\n'
name|'if'
name|'elem'
op|'.'
name|'tag'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_childmap'
name|'or'
name|'self'
op|'.'
name|'_childmap'
op|'['
name|'elem'
op|'.'
name|'tag'
op|']'
op|'!='
name|'elem'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'element is not a child'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_children'
op|'.'
name|'remove'
op|'('
name|'elem'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'_childmap'
op|'['
name|'elem'
op|'.'
name|'tag'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an attribute.\n\n        Returns a callable which performs datum selection.\n\n        :param key: The name of the attribute to get.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'attrib'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set an attribute.\n\n        :param key: The name of the attribute to set.\n\n        :param value: A callable taking an object and optional boolean\n                      do_raise indicator and returning the datum bound\n                      to the attribute.  If None, a Selector() will be\n                      constructed from the key.  If a string, a\n                      Selector() will be constructed from the string.\n        """'
newline|'\n'
nl|'\n'
comment|'# Convert value to a selector'
nl|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'Selector'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'callable'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'Selector'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'attrib'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the attribute names."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'attrib'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|items
dedent|''
name|'def'
name|'items'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the attribute names and values."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unwrap
dedent|''
name|'def'
name|'unwrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unwraps a template to return a template element."""'
newline|'\n'
nl|'\n'
comment|'# We are a template element'
nl|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|wrap
dedent|''
name|'def'
name|'wrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wraps a template element to return a template."""'
newline|'\n'
nl|'\n'
comment|'# Wrap in a basic Template'
nl|'\n'
name|'return'
name|'Template'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|apply
dedent|''
name|'def'
name|'apply'
op|'('
name|'self'
op|','
name|'elem'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Apply text and attributes to an etree.Element.\n\n        Applies the text and attribute instructions in the template\n        element to an etree.Element instance.\n\n        :param elem: An etree.Element instance.\n        :param obj: The base object associated with this template\n                    element.\n        """'
newline|'\n'
nl|'\n'
comment|'# Start with the text...'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'text'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'elem'
op|'.'
name|'text'
op|'='
name|'unicode'
op|'('
name|'self'
op|'.'
name|'text'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now set up all the attributes...'
nl|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'elem'
op|'.'
name|'set'
op|'('
name|'key'
op|','
name|'unicode'
op|'('
name|'value'
op|'('
name|'obj'
op|','
name|'True'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|"# Attribute has no value, so don't include it"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_render
dedent|''
dedent|''
dedent|''
name|'def'
name|'_render'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'datum'
op|','
name|'patches'
op|','
name|'nsmap'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Internal rendering.\n\n        Renders the template node into an etree.Element object.\n        Returns the etree.Element object.\n\n        :param parent: The parent etree.Element instance.\n        :param datum: The datum associated with this template element.\n        :param patches: A list of other template elements that must\n                        also be applied.\n        :param nsmap: An optional namespace dictionary to be\n                      associated with the etree.Element instance.\n        """'
newline|'\n'
nl|'\n'
comment|'# Allocate a node'
nl|'\n'
name|'if'
name|'callable'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tagname'
op|'='
name|'self'
op|'.'
name|'tag'
op|'('
name|'datum'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tagname'
op|'='
name|'self'
op|'.'
name|'tag'
newline|'\n'
dedent|''
name|'elem'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
name|'tagname'
op|','
name|'nsmap'
op|'='
name|'nsmap'
op|')'
newline|'\n'
nl|'\n'
comment|'# If we have a parent, append the node to the parent'
nl|'\n'
name|'if'
name|'parent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'parent'
op|'.'
name|'append'
op|'('
name|'elem'
op|')'
newline|'\n'
nl|'\n'
comment|'# If the datum is None, do nothing else'
nl|'\n'
dedent|''
name|'if'
name|'datum'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'elem'
newline|'\n'
nl|'\n'
comment|'# Apply this template element to the element'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'apply'
op|'('
name|'elem'
op|','
name|'datum'
op|')'
newline|'\n'
nl|'\n'
comment|'# Additionally, apply the patches'
nl|'\n'
name|'for'
name|'patch'
name|'in'
name|'patches'
op|':'
newline|'\n'
indent|'            '
name|'patch'
op|'.'
name|'apply'
op|'('
name|'elem'
op|','
name|'datum'
op|')'
newline|'\n'
nl|'\n'
comment|'# We have fully rendered the element; return it'
nl|'\n'
dedent|''
name|'return'
name|'elem'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'obj'
op|','
name|'patches'
op|'='
op|'['
op|']'
op|','
name|'nsmap'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Render an object.\n\n        Renders an object against this template node.  Returns a list\n        of two-item tuples, where the first item is an etree.Element\n        instance and the second item is the datum associated with that\n        instance.\n\n        :param parent: The parent for the etree.Element instances.\n        :param obj: The object to render this template element\n                    against.\n        :param patches: A list of other template elements to apply\n                        when rendering this template element.\n        :param nsmap: An optional namespace dictionary to attach to\n                      the etree.Element instances.\n        """'
newline|'\n'
nl|'\n'
comment|"# First, get the datum we're rendering"
nl|'\n'
name|'data'
op|'='
name|'None'
name|'if'
name|'obj'
name|'is'
name|'None'
name|'else'
name|'self'
op|'.'
name|'selector'
op|'('
name|'obj'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if we should render at all'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'will_render'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'data'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|'('
name|'self'
op|'.'
name|'_render'
op|'('
name|'parent'
op|','
name|'None'
op|','
name|'patches'
op|','
name|'nsmap'
op|')'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|"# Make the data into a list if it isn't already"
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'data'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
op|'['
name|'data'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'parent'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'root element selecting a list'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Render all the elements'
nl|'\n'
dedent|''
name|'elems'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'datum'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'subselector'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'datum'
op|'='
name|'self'
op|'.'
name|'subselector'
op|'('
name|'datum'
op|')'
newline|'\n'
dedent|''
name|'elems'
op|'.'
name|'append'
op|'('
op|'('
name|'self'
op|'.'
name|'_render'
op|'('
name|'parent'
op|','
name|'datum'
op|','
name|'patches'
op|','
name|'nsmap'
op|')'
op|','
name|'datum'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Return all the elements rendered, as well as the'
nl|'\n'
comment|'# corresponding datum for the next step down the tree'
nl|'\n'
dedent|''
name|'return'
name|'elems'
newline|'\n'
nl|'\n'
DECL|member|will_render
dedent|''
name|'def'
name|'will_render'
op|'('
name|'self'
op|','
name|'datum'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method.\n\n        An overridable hook method to determine whether this template\n        element will be rendered at all.  By default, returns False\n        (inhibiting rendering) if the datum is None.\n\n        :param datum: The datum associated with this template element.\n        """'
newline|'\n'
nl|'\n'
comment|"# Don't render if datum is None"
nl|'\n'
name|'return'
name|'datum'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_text_get
dedent|''
name|'def'
name|'_text_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Template element text.\n\n        Either None or a callable taking an object and optional\n        boolean do_raise indicator and returning the datum bound to\n        the text of the template element.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_text'
newline|'\n'
nl|'\n'
DECL|member|_text_set
dedent|''
name|'def'
name|'_text_set'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
comment|'# Convert value to a selector'
nl|'\n'
indent|'        '
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'callable'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'Selector'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_text'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_text_del
dedent|''
name|'def'
name|'_text_del'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_text'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|text
dedent|''
name|'text'
op|'='
name|'property'
op|'('
name|'_text_get'
op|','
name|'_text_set'
op|','
name|'_text_del'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tree
name|'def'
name|'tree'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return string representation of the template tree.\n\n        Returns a representation of the template rooted at this\n        element as a string, suitable for inclusion in debug logs.\n        """'
newline|'\n'
nl|'\n'
comment|'# Build the inner contents of the tag...'
nl|'\n'
name|'contents'
op|'='
op|'['
name|'self'
op|'.'
name|'tag'
op|','
string|"'!selector=%r'"
op|'%'
name|'self'
op|'.'
name|'selector'
op|']'
newline|'\n'
nl|'\n'
comment|'# Add the text...'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'text'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'contents'
op|'.'
name|'append'
op|'('
string|"'!text=%r'"
op|'%'
name|'self'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add all the other attributes'
nl|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'attrib'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'contents'
op|'.'
name|'append'
op|'('
string|"'%s=%r'"
op|'%'
op|'('
name|'key'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# If there are no children, return it as a closed tag'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'self'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'<%s/>'"
op|'%'
string|"' '"
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'contents'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# OK, recurse to our children'
nl|'\n'
dedent|''
name|'children'
op|'='
op|'['
name|'c'
op|'.'
name|'tree'
op|'('
op|')'
name|'for'
name|'c'
name|'in'
name|'self'
op|']'
newline|'\n'
nl|'\n'
comment|'# Return the result'
nl|'\n'
name|'return'
op|'('
string|"'<%s>%s</%s>'"
op|'%'
nl|'\n'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'contents'
op|')'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'children'
op|')'
op|','
name|'self'
op|'.'
name|'tag'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|SubTemplateElement
dedent|''
dedent|''
name|'def'
name|'SubTemplateElement'
op|'('
name|'parent'
op|','
name|'tag'
op|','
name|'attrib'
op|'='
name|'None'
op|','
name|'selector'
op|'='
name|'None'
op|','
nl|'\n'
name|'subselector'
op|'='
name|'None'
op|','
op|'**'
name|'extra'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a template element as a child of another.\n\n    Corresponds to the etree.SubElement interface.  Parameters are as\n    for TemplateElement, with the addition of the parent.\n    """'
newline|'\n'
nl|'\n'
comment|'# Convert attributes'
nl|'\n'
name|'attrib'
op|'='
name|'attrib'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'attrib'
op|'.'
name|'update'
op|'('
name|'extra'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get a TemplateElement'
nl|'\n'
name|'elem'
op|'='
name|'TemplateElement'
op|'('
name|'tag'
op|','
name|'attrib'
op|'='
name|'attrib'
op|','
name|'selector'
op|'='
name|'selector'
op|','
nl|'\n'
name|'subselector'
op|'='
name|'subselector'
op|')'
newline|'\n'
nl|'\n'
comment|'# Append the parent safely'
nl|'\n'
name|'if'
name|'parent'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'parent'
op|'.'
name|'append'
op|'('
name|'elem'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'elem'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Template
dedent|''
name|'class'
name|'Template'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represent a template."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'nsmap'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a template.\n\n        :param root: The root element of the template.\n        :param nsmap: An optional namespace dictionary to be\n                      associated with the root element of the\n                      template.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'root'
op|'='
name|'root'
op|'.'
name|'unwrap'
op|'('
op|')'
name|'if'
name|'root'
name|'is'
name|'not'
name|'None'
name|'else'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'nsmap'
op|'='
name|'nsmap'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'serialize_options'
op|'='
name|'dict'
op|'('
name|'encoding'
op|'='
string|"'UTF-8'"
op|','
name|'xml_declaration'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_serialize
dedent|''
name|'def'
name|'_serialize'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'obj'
op|','
name|'siblings'
op|','
name|'nsmap'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Internal serialization.\n\n        Recursive routine to build a tree of etree.Element instances\n        from an object based on the template.  Returns the first\n        etree.Element instance rendered, or None.\n\n        :param parent: The parent etree.Element instance.  Can be\n                       None.\n        :param obj: The object to render.\n        :param siblings: The TemplateElement instances against which\n                         to render the object.\n        :param nsmap: An optional namespace dictionary to be\n                      associated with the etree.Element instance\n                      rendered.\n        """'
newline|'\n'
nl|'\n'
comment|'# First step, render the element'
nl|'\n'
name|'elems'
op|'='
name|'siblings'
op|'['
number|'0'
op|']'
op|'.'
name|'render'
op|'('
name|'parent'
op|','
name|'obj'
op|','
name|'siblings'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'nsmap'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, recurse to all child elements'
nl|'\n'
name|'seen'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'idx'
op|','
name|'sibling'
name|'in'
name|'enumerate'
op|'('
name|'siblings'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'child'
name|'in'
name|'sibling'
op|':'
newline|'\n'
comment|'# Have we handled this child already?'
nl|'\n'
indent|'                '
name|'if'
name|'child'
op|'.'
name|'tag'
name|'in'
name|'seen'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'seen'
op|'.'
name|'add'
op|'('
name|'child'
op|'.'
name|'tag'
op|')'
newline|'\n'
nl|'\n'
comment|"# Determine the child's siblings"
nl|'\n'
name|'nieces'
op|'='
op|'['
name|'child'
op|']'
newline|'\n'
name|'for'
name|'sib'
name|'in'
name|'siblings'
op|'['
name|'idx'
op|'+'
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'child'
op|'.'
name|'tag'
name|'in'
name|'sib'
op|':'
newline|'\n'
indent|'                        '
name|'nieces'
op|'.'
name|'append'
op|'('
name|'sib'
op|'['
name|'child'
op|'.'
name|'tag'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now we recurse for every data element'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'elem'
op|','
name|'datum'
name|'in'
name|'elems'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_serialize'
op|'('
name|'elem'
op|','
name|'datum'
op|','
name|'nieces'
op|')'
newline|'\n'
nl|'\n'
comment|'# Return the first element; at the top level, this will be the'
nl|'\n'
comment|'# root element'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'elems'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'elems'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'obj'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialize an object.\n\n        Serializes an object against the template.  Returns a string\n        with the serialized XML.  Positional and keyword arguments are\n        passed to etree.tostring().\n\n        :param obj: The object to serialize.\n        """'
newline|'\n'
nl|'\n'
name|'elem'
op|'='
name|'self'
op|'.'
name|'make_tree'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'if'
name|'elem'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'serialize_options'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'.'
name|'setdefault'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# Serialize it into XML'
nl|'\n'
dedent|''
name|'return'
name|'etree'
op|'.'
name|'tostring'
op|'('
name|'elem'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_tree
dedent|''
name|'def'
name|'make_tree'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a tree.\n\n        Serializes an object against the template.  Returns an Element\n        node with appropriate children.\n\n        :param obj: The object to serialize.\n        """'
newline|'\n'
nl|'\n'
comment|'# If the template is empty, return the empty string'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'root'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Get the siblings and nsmap of the root element'
nl|'\n'
dedent|''
name|'siblings'
op|'='
name|'self'
op|'.'
name|'_siblings'
op|'('
op|')'
newline|'\n'
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'_nsmap'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Form the element tree'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_serialize'
op|'('
name|'None'
op|','
name|'obj'
op|','
name|'siblings'
op|','
name|'nsmap'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_siblings
dedent|''
name|'def'
name|'_siblings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method for computing root siblings.\n\n        An overridable hook method to return the siblings of the root\n        element.  By default, this is the root element itself.\n        """'
newline|'\n'
nl|'\n'
name|'return'
op|'['
name|'self'
op|'.'
name|'root'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_nsmap
dedent|''
name|'def'
name|'_nsmap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method for computing the namespace dictionary.\n\n        An overridable hook method to return the namespace dictionary.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'nsmap'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unwrap
dedent|''
name|'def'
name|'unwrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unwraps a template to return a template element."""'
newline|'\n'
nl|'\n'
comment|'# Return the root element'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'root'
newline|'\n'
nl|'\n'
DECL|member|wrap
dedent|''
name|'def'
name|'wrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wraps a template element to return a template."""'
newline|'\n'
nl|'\n'
comment|'# We are a template'
nl|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|apply
dedent|''
name|'def'
name|'apply'
op|'('
name|'self'
op|','
name|'master'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method for determining slave applicability.\n\n        An overridable hook method used to determine if this template\n        is applicable as a slave to a given master template.\n\n        :param master: The master template to test.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|tree
dedent|''
name|'def'
name|'tree'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return string representation of the template tree.\n\n        Returns a representation of the template as a string, suitable\n        for inclusion in debug logs.\n        """'
newline|'\n'
nl|'\n'
name|'return'
string|'"%r: %s"'
op|'%'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'root'
op|'.'
name|'tree'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MasterTemplate
dedent|''
dedent|''
name|'class'
name|'MasterTemplate'
op|'('
name|'Template'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represent a master template.\n\n    Master templates are versioned derivatives of templates that\n    additionally allow slave templates to be attached.  Slave\n    templates allow modification of the serialized result without\n    directly changing the master.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'version'
op|','
name|'nsmap'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a master template.\n\n        :param root: The root element of the template.\n        :param version: The version number of the template.\n        :param nsmap: An optional namespace dictionary to be\n                      associated with the root element of the\n                      template.\n        """'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'MasterTemplate'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'root'
op|','
name|'nsmap'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
name|'version'
newline|'\n'
name|'self'
op|'.'
name|'slaves'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return string representation of the template."""'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|'"<%s.%s object version %s at %#x>"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|','
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'version'
op|','
name|'id'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_siblings
dedent|''
name|'def'
name|'_siblings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method for computing root siblings.\n\n        An overridable hook method to return the siblings of the root\n        element.  This is the root element plus the root elements of\n        all the slave templates.\n        """'
newline|'\n'
nl|'\n'
name|'return'
op|'['
name|'self'
op|'.'
name|'root'
op|']'
op|'+'
op|'['
name|'slave'
op|'.'
name|'root'
name|'for'
name|'slave'
name|'in'
name|'self'
op|'.'
name|'slaves'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_nsmap
dedent|''
name|'def'
name|'_nsmap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method for computing the namespace dictionary.\n\n        An overridable hook method to return the namespace dictionary.\n        The namespace dictionary is computed by taking the master\n        template\'s namespace dictionary and updating it from all the\n        slave templates.\n        """'
newline|'\n'
nl|'\n'
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'nsmap'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'for'
name|'slave'
name|'in'
name|'self'
op|'.'
name|'slaves'
op|':'
newline|'\n'
indent|'            '
name|'nsmap'
op|'.'
name|'update'
op|'('
name|'slave'
op|'.'
name|'_nsmap'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'nsmap'
newline|'\n'
nl|'\n'
DECL|member|attach
dedent|''
name|'def'
name|'attach'
op|'('
name|'self'
op|','
op|'*'
name|'slaves'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach one or more slave templates.\n\n        Attaches one or more slave templates to the master template.\n        Slave templates must have a root element with the same tag as\n        the master template.  The slave template\'s apply() method will\n        be called to determine if the slave should be applied to this\n        master; if it returns False, that slave will be skipped.\n        (This allows filtering of slaves based on the version of the\n        master template.)\n        """'
newline|'\n'
nl|'\n'
name|'slave_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'slave'
name|'in'
name|'slaves'
op|':'
newline|'\n'
indent|'            '
name|'slave'
op|'='
name|'slave'
op|'.'
name|'wrap'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we have a tree match'
nl|'\n'
name|'if'
name|'slave'
op|'.'
name|'root'
op|'.'
name|'tag'
op|'!='
name|'self'
op|'.'
name|'root'
op|'.'
name|'tag'
op|':'
newline|'\n'
indent|'                '
name|'slavetag'
op|'='
name|'slave'
op|'.'
name|'root'
op|'.'
name|'tag'
newline|'\n'
name|'mastertag'
op|'='
name|'self'
op|'.'
name|'root'
op|'.'
name|'tag'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Template tree mismatch; adding slave %(slavetag)s "'
nl|'\n'
string|'"to master %(mastertag)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure slave applies to this template'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'slave'
op|'.'
name|'apply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'slave_list'
op|'.'
name|'append'
op|'('
name|'slave'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add the slaves'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'slaves'
op|'.'
name|'extend'
op|'('
name|'slave_list'
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a copy of this master template."""'
newline|'\n'
nl|'\n'
comment|'# Return a copy of the MasterTemplate'
nl|'\n'
name|'tmp'
op|'='
name|'self'
op|'.'
name|'__class__'
op|'('
name|'self'
op|'.'
name|'root'
op|','
name|'self'
op|'.'
name|'version'
op|','
name|'self'
op|'.'
name|'nsmap'
op|')'
newline|'\n'
name|'tmp'
op|'.'
name|'slaves'
op|'='
name|'self'
op|'.'
name|'slaves'
op|'['
op|':'
op|']'
newline|'\n'
name|'return'
name|'tmp'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SlaveTemplate
dedent|''
dedent|''
name|'class'
name|'SlaveTemplate'
op|'('
name|'Template'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represent a slave template.\n\n    Slave templates are versioned derivatives of templates.  Each\n    slave has a minimum version and optional maximum version of the\n    master template to which they can be attached.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'root'
op|','
name|'min_vers'
op|','
name|'max_vers'
op|'='
name|'None'
op|','
name|'nsmap'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a slave template.\n\n        :param root: The root element of the template.\n        :param min_vers: The minimum permissible version of the master\n                         template for this slave template to apply.\n        :param max_vers: An optional upper bound for the master\n                         template version.\n        :param nsmap: An optional namespace dictionary to be\n                      associated with the root element of the\n                      template.\n        """'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'SlaveTemplate'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'root'
op|','
name|'nsmap'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'min_vers'
op|'='
name|'min_vers'
newline|'\n'
name|'self'
op|'.'
name|'max_vers'
op|'='
name|'max_vers'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return string representation of the template."""'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|'"<%s.%s object versions %s-%s at %#x>"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|','
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'min_vers'
op|','
name|'self'
op|'.'
name|'max_vers'
op|','
name|'id'
op|'('
name|'self'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|apply
dedent|''
name|'def'
name|'apply'
op|'('
name|'self'
op|','
name|'master'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hook method for determining slave applicability.\n\n        An overridable hook method used to determine if this template\n        is applicable as a slave to a given master template.  This\n        version requires the master template to have a version number\n        between min_vers and max_vers.\n\n        :param master: The master template to test.\n        """'
newline|'\n'
nl|'\n'
comment|'# Does the master meet our minimum version requirement?'
nl|'\n'
name|'if'
name|'master'
op|'.'
name|'version'
op|'<'
name|'self'
op|'.'
name|'min_vers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# How about our maximum version requirement?'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'max_vers'
name|'is'
name|'not'
name|'None'
name|'and'
name|'master'
op|'.'
name|'version'
op|'>'
name|'self'
op|'.'
name|'max_vers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TemplateBuilder
dedent|''
dedent|''
name|'class'
name|'TemplateBuilder'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Template builder.\n\n    This class exists to allow templates to be lazily built without\n    having to build them each time they are needed.  It must be\n    subclassed, and the subclass must implement the construct()\n    method, which must return a Template (or subclass) instance.  The\n    constructor will always return the template returned by\n    construct(), or, if it has a copy() method, a copy of that\n    template.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|_tmpl
name|'_tmpl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__new__
name|'def'
name|'__new__'
op|'('
name|'cls'
op|','
name|'copy'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct and return a template.\n\n        :param copy: If True (the default), a copy of the template\n                     will be constructed and returned, if possible.\n        """'
newline|'\n'
nl|'\n'
comment|'# Do we need to construct the template?'
nl|'\n'
name|'if'
name|'cls'
op|'.'
name|'_tmpl'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'tmp'
op|'='
name|'super'
op|'('
name|'TemplateBuilder'
op|','
name|'cls'
op|')'
op|'.'
name|'__new__'
op|'('
name|'cls'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct the template'
nl|'\n'
name|'cls'
op|'.'
name|'_tmpl'
op|'='
name|'tmp'
op|'.'
name|'construct'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# If the template has a copy attribute, return the result of'
nl|'\n'
comment|'# calling it'
nl|'\n'
dedent|''
name|'if'
name|'copy'
name|'and'
name|'hasattr'
op|'('
name|'cls'
op|'.'
name|'_tmpl'
op|','
string|"'copy'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_tmpl'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Return the template'
nl|'\n'
dedent|''
name|'return'
name|'cls'
op|'.'
name|'_tmpl'
newline|'\n'
nl|'\n'
DECL|member|construct
dedent|''
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Construct a template.\n\n        Called to construct a template instance, which it must return.\n        Only called once.\n        """'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
name|'_'
op|'('
string|'"subclasses must implement construct()!"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_links
dedent|''
dedent|''
name|'def'
name|'make_links'
op|'('
name|'parent'
op|','
name|'selector'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Attach an Atom <links> element to the parent.\n    """'
newline|'\n'
nl|'\n'
name|'elem'
op|'='
name|'SubTemplateElement'
op|'('
name|'parent'
op|','
string|"'{%s}link'"
op|'%'
name|'XMLNS_ATOM'
op|','
nl|'\n'
name|'selector'
op|'='
name|'selector'
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'rel'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'type'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'href'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Just for completeness...'
nl|'\n'
name|'return'
name|'elem'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_flat_dict
dedent|''
name|'def'
name|'make_flat_dict'
op|'('
name|'name'
op|','
name|'selector'
op|'='
name|'None'
op|','
name|'subselector'
op|'='
name|'None'
op|','
name|'ns'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility for simple XML templates that traditionally used\n    XMLDictSerializer with no metadata.  Returns a template element\n    where the top-level element has the given tag name, and where\n    sub-elements have tag names derived from the object\'s keys and\n    text derived from the object\'s values.  This only works for flat\n    dictionary objects, not dictionaries containing nested lists or\n    dictionaries.\n    """'
newline|'\n'
nl|'\n'
comment|'# Set up the names we need...'
nl|'\n'
name|'if'
name|'ns'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'elemname'
op|'='
name|'name'
newline|'\n'
name|'tagname'
op|'='
name|'Selector'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'elemname'
op|'='
string|"'{%s}%s'"
op|'%'
op|'('
name|'ns'
op|','
name|'name'
op|')'
newline|'\n'
name|'tagname'
op|'='
name|'lambda'
name|'obj'
op|','
name|'do_raise'
op|'='
name|'False'
op|':'
string|"'{%s}%s'"
op|'%'
op|'('
name|'ns'
op|','
name|'obj'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'selector'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'selector'
op|'='
name|'name'
newline|'\n'
nl|'\n'
comment|'# Build the root element'
nl|'\n'
dedent|''
name|'root'
op|'='
name|'TemplateElement'
op|'('
name|'elemname'
op|','
name|'selector'
op|'='
name|'selector'
op|','
nl|'\n'
name|'subselector'
op|'='
name|'subselector'
op|')'
newline|'\n'
nl|'\n'
comment|'# Build an element to represent all the keys and values'
nl|'\n'
name|'elem'
op|'='
name|'SubTemplateElement'
op|'('
name|'root'
op|','
name|'tagname'
op|','
name|'selector'
op|'='
name|'get_items'
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'text'
op|'='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Return the template'
nl|'\n'
name|'return'
name|'root'
newline|'\n'
dedent|''
endmarker|''
end_unit

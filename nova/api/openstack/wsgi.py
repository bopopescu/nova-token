begin_unit
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'math'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'import'
name|'webob'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'xmlutil'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'gettextutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'wsgi'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|XMLNS_V10
name|'XMLNS_V10'
op|'='
string|"'http://docs.rackspacecloud.com/servers/api/v1.0'"
newline|'\n'
DECL|variable|XMLNS_V11
name|'XMLNS_V11'
op|'='
string|"'http://docs.openstack.org/compute/api/v1.1'"
newline|'\n'
nl|'\n'
DECL|variable|XMLNS_ATOM
name|'XMLNS_ATOM'
op|'='
string|"'http://www.w3.org/2005/Atom'"
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SUPPORTED_CONTENT_TYPES
name|'SUPPORTED_CONTENT_TYPES'
op|'='
op|'('
nl|'\n'
string|"'application/json'"
op|','
nl|'\n'
string|"'application/vnd.openstack.compute+json'"
op|','
nl|'\n'
string|"'application/xml'"
op|','
nl|'\n'
string|"'application/vnd.openstack.compute+xml'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_MEDIA_TYPE_MAP
name|'_MEDIA_TYPE_MAP'
op|'='
op|'{'
nl|'\n'
string|"'application/vnd.openstack.compute+json'"
op|':'
string|"'json'"
op|','
nl|'\n'
string|"'application/json'"
op|':'
string|"'json'"
op|','
nl|'\n'
string|"'application/vnd.openstack.compute+xml'"
op|':'
string|"'xml'"
op|','
nl|'\n'
string|"'application/xml'"
op|':'
string|"'xml'"
op|','
nl|'\n'
string|"'application/atom+xml'"
op|':'
string|"'atom'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# These are typically automatically created by routes as either defaults'
nl|'\n'
comment|'# collection or member methods.'
nl|'\n'
DECL|variable|_ROUTES_METHODS
name|'_ROUTES_METHODS'
op|'='
op|'['
nl|'\n'
string|"'create'"
op|','
nl|'\n'
string|"'delete'"
op|','
nl|'\n'
string|"'show'"
op|','
nl|'\n'
string|"'update'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|_METHODS_WITH_BODY
name|'_METHODS_WITH_BODY'
op|'='
op|'['
nl|'\n'
string|"'POST'"
op|','
nl|'\n'
string|"'PUT'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Request
name|'class'
name|'Request'
op|'('
name|'webob'
op|'.'
name|'Request'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Add some OpenStack API-specific logic to the base webob.Request."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Request'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_extension_data'
op|'='
op|'{'
string|"'db_items'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|cache_db_items
dedent|''
name|'def'
name|'cache_db_items'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'items'
op|','
name|'item_key'
op|'='
string|"'id'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow API methods to store objects from a DB query to be\n        used by API extensions within the same API request.\n\n        An instance of this class only lives for the lifetime of a\n        single API request, so there\'s no need to implement full\n        cache management.\n        """'
newline|'\n'
name|'db_items'
op|'='
name|'self'
op|'.'
name|'_extension_data'
op|'['
string|"'db_items'"
op|']'
op|'.'
name|'setdefault'
op|'('
name|'key'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'db_items'
op|'['
name|'item'
op|'['
name|'item_key'
op|']'
op|']'
op|'='
name|'item'
newline|'\n'
nl|'\n'
DECL|member|get_db_items
dedent|''
dedent|''
name|'def'
name|'get_db_items'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow an API extension to get previously stored objects within\n        the same API request.\n\n        Note that the object data will be slightly stale.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_extension_data'
op|'['
string|"'db_items'"
op|']'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_db_item
dedent|''
name|'def'
name|'get_db_item'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'item_key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow an API extension to get a previously stored object\n        within the same API request.\n\n        Note that the object data will be slightly stale.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_db_items'
op|'('
name|'key'
op|')'
op|'.'
name|'get'
op|'('
name|'item_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache_db_instances
dedent|''
name|'def'
name|'cache_db_instances'
op|'('
name|'self'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache_db_items'
op|'('
string|"'instances'"
op|','
name|'instances'
op|','
string|"'uuid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache_db_instance
dedent|''
name|'def'
name|'cache_db_instance'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache_db_items'
op|'('
string|"'instances'"
op|','
op|'['
name|'instance'
op|']'
op|','
string|"'uuid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_instances
dedent|''
name|'def'
name|'get_db_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_db_items'
op|'('
string|"'instances'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_instance
dedent|''
name|'def'
name|'get_db_instance'
op|'('
name|'self'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_db_item'
op|'('
string|"'instances'"
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache_db_flavors
dedent|''
name|'def'
name|'cache_db_flavors'
op|'('
name|'self'
op|','
name|'flavors'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache_db_items'
op|'('
string|"'flavors'"
op|','
name|'flavors'
op|','
string|"'flavorid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache_db_flavor
dedent|''
name|'def'
name|'cache_db_flavor'
op|'('
name|'self'
op|','
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache_db_items'
op|'('
string|"'flavors'"
op|','
op|'['
name|'flavor'
op|']'
op|','
string|"'flavorid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_flavors
dedent|''
name|'def'
name|'get_db_flavors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_db_items'
op|'('
string|"'flavors'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_flavor
dedent|''
name|'def'
name|'get_db_flavor'
op|'('
name|'self'
op|','
name|'flavorid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_db_item'
op|'('
string|"'flavors'"
op|','
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache_db_compute_nodes
dedent|''
name|'def'
name|'cache_db_compute_nodes'
op|'('
name|'self'
op|','
name|'compute_nodes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache_db_items'
op|'('
string|"'compute_nodes'"
op|','
name|'compute_nodes'
op|','
string|"'id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|cache_db_compute_node
dedent|''
name|'def'
name|'cache_db_compute_node'
op|'('
name|'self'
op|','
name|'compute_node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'cache_db_items'
op|'('
string|"'compute_nodes'"
op|','
op|'['
name|'compute_node'
op|']'
op|','
string|"'id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_compute_nodes
dedent|''
name|'def'
name|'get_db_compute_nodes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_db_items'
op|'('
string|"'compute_nodes'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_db_compute_node
dedent|''
name|'def'
name|'get_db_compute_node'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'get_db_item'
op|'('
string|"'compute_nodes'"
op|','
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|best_match_content_type
dedent|''
name|'def'
name|'best_match_content_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine the requested response content-type."""'
newline|'\n'
name|'if'
string|"'nova.best_content_type'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'environ'
op|':'
newline|'\n'
comment|'# Calculate the best MIME type'
nl|'\n'
indent|'            '
name|'content_type'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Check URL path suffix'
nl|'\n'
name|'parts'
op|'='
name|'self'
op|'.'
name|'path'
op|'.'
name|'rsplit'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'possible_type'
op|'='
string|"'application/'"
op|'+'
name|'parts'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'possible_type'
name|'in'
name|'SUPPORTED_CONTENT_TYPES'
op|':'
newline|'\n'
indent|'                    '
name|'content_type'
op|'='
name|'possible_type'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'content_type'
op|':'
newline|'\n'
indent|'                '
name|'content_type'
op|'='
name|'self'
op|'.'
name|'accept'
op|'.'
name|'best_match'
op|'('
name|'SUPPORTED_CONTENT_TYPES'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'environ'
op|'['
string|"'nova.best_content_type'"
op|']'
op|'='
op|'('
name|'content_type'
name|'or'
nl|'\n'
string|"'application/json'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'environ'
op|'['
string|"'nova.best_content_type'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_content_type
dedent|''
name|'def'
name|'get_content_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine content type of the request body.\n\n        Does not do any body introspection, only checks header\n\n        """'
newline|'\n'
name|'if'
string|'"Content-Type"'
name|'not'
name|'in'
name|'self'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'content_type'
op|'='
name|'self'
op|'.'
name|'content_type'
newline|'\n'
nl|'\n'
comment|'# NOTE(markmc): text/plain is the default for eventlet and'
nl|'\n'
comment|'# other webservers which use mimetools.Message.gettype()'
nl|'\n'
comment|"# whereas twisted defaults to ''."
nl|'\n'
name|'if'
name|'not'
name|'content_type'
name|'or'
name|'content_type'
op|'=='
string|"'text/plain'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'content_type'
name|'not'
name|'in'
name|'SUPPORTED_CONTENT_TYPES'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidContentType'
op|'('
name|'content_type'
op|'='
name|'content_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'content_type'
newline|'\n'
nl|'\n'
DECL|member|best_match_language
dedent|''
name|'def'
name|'best_match_language'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine the best available language for the request.\n\n        :returns: the best language match or None if the \'Accept-Language\'\n                  header was not available in the request.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'accept_language'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'accept_language'
op|'.'
name|'best_match'
op|'('
nl|'\n'
name|'gettextutils'
op|'.'
name|'get_available_languages'
op|'('
string|"'nova'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ActionDispatcher
dedent|''
dedent|''
name|'class'
name|'ActionDispatcher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Maps method name to local methods through action name."""'
newline|'\n'
nl|'\n'
DECL|member|dispatch
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Find and call local method."""'
newline|'\n'
name|'action'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'action'"
op|','
string|"'default'"
op|')'
newline|'\n'
name|'action_method'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'str'
op|'('
name|'action'
op|')'
op|','
name|'self'
op|'.'
name|'default'
op|')'
newline|'\n'
name|'return'
name|'action_method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TextDeserializer
dedent|''
dedent|''
name|'class'
name|'TextDeserializer'
op|'('
name|'ActionDispatcher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Default request body deserialization."""'
newline|'\n'
nl|'\n'
DECL|member|deserialize
name|'def'
name|'deserialize'
op|'('
name|'self'
op|','
name|'datastring'
op|','
name|'action'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'datastring'
op|','
name|'action'
op|'='
name|'action'
op|')'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|JSONDeserializer
dedent|''
dedent|''
name|'class'
name|'JSONDeserializer'
op|'('
name|'TextDeserializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_from_json
indent|'    '
name|'def'
name|'_from_json'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'datastring'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"cannot understand JSON"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'body'"
op|':'
name|'self'
op|'.'
name|'_from_json'
op|'('
name|'datastring'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLDeserializer
dedent|''
dedent|''
name|'class'
name|'XMLDeserializer'
op|'('
name|'TextDeserializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'metadata'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""":param metadata: information needed to deserialize xml into\n           a dictionary.\n        """'
newline|'\n'
name|'super'
op|'('
name|'XMLDeserializer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'metadata'
op|'='
name|'metadata'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_from_xml
dedent|''
name|'def'
name|'_from_xml'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'plurals'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'plurals'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'xmlutil'
op|'.'
name|'safe_minidom_parse_string'
op|'('
name|'datastring'
op|')'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'{'
name|'node'
op|'.'
name|'nodeName'
op|':'
name|'self'
op|'.'
name|'_from_xml_node'
op|'('
name|'node'
op|','
name|'plurals'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_from_xml_node
dedent|''
name|'def'
name|'_from_xml_node'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'listnames'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert a minidom node to a simple Python type.\n\n        :param listnames: list of XML node names whose subnodes should\n                          be considered list items.\n\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'node'
op|'.'
name|'childNodes'
op|')'
op|'=='
number|'1'
name|'and'
name|'node'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'nodeType'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'node'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
op|'.'
name|'nodeValue'
newline|'\n'
dedent|''
name|'elif'
name|'node'
op|'.'
name|'nodeName'
name|'in'
name|'listnames'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
name|'self'
op|'.'
name|'_from_xml_node'
op|'('
name|'n'
op|','
name|'listnames'
op|')'
name|'for'
name|'n'
name|'in'
name|'node'
op|'.'
name|'childNodes'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'node'
op|'.'
name|'attributes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'attr'
op|'.'
name|'startswith'
op|'('
string|'"xmlns"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'['
name|'attr'
op|']'
op|'='
name|'node'
op|'.'
name|'attributes'
op|'['
name|'attr'
op|']'
op|'.'
name|'nodeValue'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'child'
op|'.'
name|'nodeType'
op|'!='
name|'node'
op|'.'
name|'TEXT_NODE'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'['
name|'child'
op|'.'
name|'nodeName'
op|']'
op|'='
name|'self'
op|'.'
name|'_from_xml_node'
op|'('
name|'child'
op|','
nl|'\n'
name|'listnames'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|find_first_child_named_in_namespace
dedent|''
dedent|''
name|'def'
name|'find_first_child_named_in_namespace'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'namespace'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Search a nodes children for the first child with a given name."""'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'parent'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'node'
op|'.'
name|'localName'
op|'=='
name|'name'
name|'and'
nl|'\n'
name|'node'
op|'.'
name|'namespaceURI'
name|'and'
nl|'\n'
name|'node'
op|'.'
name|'namespaceURI'
op|'=='
name|'namespace'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'node'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|find_first_child_named
dedent|''
name|'def'
name|'find_first_child_named'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Search a nodes children for the first child with a given name."""'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'parent'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'node'
op|'.'
name|'localName'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'node'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|find_children_named
dedent|''
name|'def'
name|'find_children_named'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return all of a nodes children who have the given name."""'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'parent'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'node'
op|'.'
name|'localName'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'node'
newline|'\n'
nl|'\n'
DECL|member|extract_text
dedent|''
dedent|''
dedent|''
name|'def'
name|'extract_text'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the text field contained by the given node."""'
newline|'\n'
name|'ret_val'
op|'='
string|'""'
newline|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'child'
op|'.'
name|'nodeType'
op|'=='
name|'child'
op|'.'
name|'TEXT_NODE'
op|':'
newline|'\n'
indent|'                '
name|'ret_val'
op|'+='
name|'child'
op|'.'
name|'nodeValue'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ret_val'
newline|'\n'
nl|'\n'
DECL|member|extract_elements
dedent|''
name|'def'
name|'extract_elements'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get only Element type childs from node."""'
newline|'\n'
name|'elements'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'child'
name|'in'
name|'node'
op|'.'
name|'childNodes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'child'
op|'.'
name|'nodeType'
op|'=='
name|'child'
op|'.'
name|'ELEMENT_NODE'
op|':'
newline|'\n'
indent|'                '
name|'elements'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'elements'
newline|'\n'
nl|'\n'
DECL|member|find_attribute_or_element
dedent|''
name|'def'
name|'find_attribute_or_element'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an attribute value; fallback to an element if not found."""'
newline|'\n'
name|'if'
name|'parent'
op|'.'
name|'hasAttribute'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'parent'
op|'.'
name|'getAttribute'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'parent'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'node'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'body'"
op|':'
name|'self'
op|'.'
name|'_from_xml'
op|'('
name|'datastring'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataXMLDeserializer
dedent|''
dedent|''
name|'class'
name|'MetadataXMLDeserializer'
op|'('
name|'XMLDeserializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|extract_metadata
indent|'    '
name|'def'
name|'extract_metadata'
op|'('
name|'self'
op|','
name|'metadata_node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Marshal the metadata attribute of a parsed request."""'
newline|'\n'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'metadata_node'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'meta_node'
name|'in'
name|'self'
op|'.'
name|'find_children_named'
op|'('
name|'metadata_node'
op|','
string|'"meta"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
name|'meta_node'
op|'.'
name|'getAttribute'
op|'('
string|'"key"'
op|')'
newline|'\n'
name|'metadata'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'meta_node'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'metadata'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictSerializer
dedent|''
dedent|''
name|'class'
name|'DictSerializer'
op|'('
name|'ActionDispatcher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Default request body serialization."""'
newline|'\n'
nl|'\n'
DECL|member|serialize
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'action'
op|'='
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'data'
op|','
name|'action'
op|'='
name|'action'
op|')'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|JSONDictSerializer
dedent|''
dedent|''
name|'class'
name|'JSONDictSerializer'
op|'('
name|'DictSerializer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Default JSON request body serialization."""'
newline|'\n'
nl|'\n'
DECL|member|default
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XMLDictSerializer
dedent|''
dedent|''
name|'class'
name|'XMLDictSerializer'
op|'('
name|'DictSerializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'metadata'
op|'='
name|'None'
op|','
name|'xmlns'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""":param metadata: information needed to deserialize xml into\n           a dictionary.\n           :param xmlns: XML namespace to include with serialized xml\n        """'
newline|'\n'
name|'super'
op|'('
name|'XMLDictSerializer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'metadata'
op|'='
name|'metadata'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'xmlns'
op|'='
name|'xmlns'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# We expect data to contain a single key which is the XML root.'
nl|'\n'
indent|'        '
name|'root_key'
op|'='
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'doc'
op|'='
name|'minidom'
op|'.'
name|'Document'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_to_xml_node'
op|'('
name|'doc'
op|','
name|'self'
op|'.'
name|'metadata'
op|','
name|'root_key'
op|','
name|'data'
op|'['
name|'root_key'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'to_xml_string'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
DECL|member|to_xml_string
dedent|''
name|'def'
name|'to_xml_string'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'has_atom'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_add_xmlns'
op|'('
name|'node'
op|','
name|'has_atom'
op|')'
newline|'\n'
name|'return'
name|'node'
op|'.'
name|'toxml'
op|'('
string|"'UTF-8'"
op|')'
newline|'\n'
nl|'\n'
comment|'#NOTE (ameade): the has_atom should be removed after all of the'
nl|'\n'
comment|'# xml serializers and view builders have been updated to the current'
nl|'\n'
comment|'# spec that required all responses include the xmlns:atom, the has_atom'
nl|'\n'
comment|'# flag is to prevent current tests from breaking'
nl|'\n'
DECL|member|_add_xmlns
dedent|''
name|'def'
name|'_add_xmlns'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'has_atom'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'xmlns'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'.'
name|'setAttribute'
op|'('
string|"'xmlns'"
op|','
name|'self'
op|'.'
name|'xmlns'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'has_atom'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'.'
name|'setAttribute'
op|'('
string|"'xmlns:atom'"
op|','
string|'"http://www.w3.org/2005/Atom"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_to_xml_node
dedent|''
dedent|''
name|'def'
name|'_to_xml_node'
op|'('
name|'self'
op|','
name|'doc'
op|','
name|'metadata'
op|','
name|'nodename'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Recursive method to convert data members to XML nodes."""'
newline|'\n'
name|'result'
op|'='
name|'doc'
op|'.'
name|'createElement'
op|'('
name|'nodename'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the xml namespace if one is specified'
nl|'\n'
comment|'# TODO(justinsb): We could also use prefixes on the keys'
nl|'\n'
name|'xmlns'
op|'='
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'xmlns'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'xmlns'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'setAttribute'
op|'('
string|"'xmlns'"
op|','
name|'xmlns'
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO(bcwaldon): accomplish this without a type-check'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'data'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'collections'
op|'='
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'list_collections'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'nodename'
name|'in'
name|'collections'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
name|'collections'
op|'['
name|'nodename'
op|']'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'                    '
name|'node'
op|'='
name|'doc'
op|'.'
name|'createElement'
op|'('
name|'metadata'
op|'['
string|"'item_name'"
op|']'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'setAttribute'
op|'('
name|'metadata'
op|'['
string|"'item_key'"
op|']'
op|','
name|'str'
op|'('
name|'item'
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'appendChild'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'singular'
op|'='
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'plurals'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'get'
op|'('
name|'nodename'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'singular'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'nodename'
op|'.'
name|'endswith'
op|'('
string|"'s'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'singular'
op|'='
name|'nodename'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'singular'
op|'='
string|"'item'"
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'item'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'                '
name|'node'
op|'='
name|'self'
op|'.'
name|'_to_xml_node'
op|'('
name|'doc'
op|','
name|'metadata'
op|','
name|'singular'
op|','
name|'item'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'appendChild'
op|'('
name|'node'
op|')'
newline|'\n'
comment|'#TODO(bcwaldon): accomplish this without a type-check'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'data'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'collections'
op|'='
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'dict_collections'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'nodename'
name|'in'
name|'collections'
op|':'
newline|'\n'
indent|'                '
name|'metadata'
op|'='
name|'collections'
op|'['
name|'nodename'
op|']'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'data'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'node'
op|'='
name|'doc'
op|'.'
name|'createElement'
op|'('
name|'metadata'
op|'['
string|"'item_name'"
op|']'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'setAttribute'
op|'('
name|'metadata'
op|'['
string|"'item_key'"
op|']'
op|','
name|'str'
op|'('
name|'k'
op|')'
op|')'
newline|'\n'
name|'text'
op|'='
name|'doc'
op|'.'
name|'createTextNode'
op|'('
name|'str'
op|'('
name|'v'
op|')'
op|')'
newline|'\n'
name|'node'
op|'.'
name|'appendChild'
op|'('
name|'text'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'appendChild'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'attrs'
op|'='
name|'metadata'
op|'.'
name|'get'
op|'('
string|"'attributes'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'get'
op|'('
name|'nodename'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'data'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'k'
name|'in'
name|'attrs'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'.'
name|'setAttribute'
op|'('
name|'k'
op|','
name|'str'
op|'('
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'k'
op|'=='
string|'"deleted"'
op|':'
newline|'\n'
indent|'                        '
name|'v'
op|'='
name|'str'
op|'('
name|'bool'
op|'('
name|'v'
op|')'
op|')'
newline|'\n'
dedent|''
name|'node'
op|'='
name|'self'
op|'.'
name|'_to_xml_node'
op|'('
name|'doc'
op|','
name|'metadata'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'appendChild'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Type is atom'
nl|'\n'
indent|'            '
name|'node'
op|'='
name|'doc'
op|'.'
name|'createTextNode'
op|'('
name|'str'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'appendChild'
op|'('
name|'node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_create_link_nodes
dedent|''
name|'def'
name|'_create_link_nodes'
op|'('
name|'self'
op|','
name|'xml_doc'
op|','
name|'links'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'link_nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'link'
name|'in'
name|'links'
op|':'
newline|'\n'
indent|'            '
name|'link_node'
op|'='
name|'xml_doc'
op|'.'
name|'createElement'
op|'('
string|"'atom:link'"
op|')'
newline|'\n'
name|'link_node'
op|'.'
name|'setAttribute'
op|'('
string|"'rel'"
op|','
name|'link'
op|'['
string|"'rel'"
op|']'
op|')'
newline|'\n'
name|'link_node'
op|'.'
name|'setAttribute'
op|'('
string|"'href'"
op|','
name|'link'
op|'['
string|"'href'"
op|']'
op|')'
newline|'\n'
name|'if'
string|"'type'"
name|'in'
name|'link'
op|':'
newline|'\n'
indent|'                '
name|'link_node'
op|'.'
name|'setAttribute'
op|'('
string|"'type'"
op|','
name|'link'
op|'['
string|"'type'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'link_nodes'
op|'.'
name|'append'
op|'('
name|'link_node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'link_nodes'
newline|'\n'
nl|'\n'
DECL|member|_to_xml
dedent|''
name|'def'
name|'_to_xml'
op|'('
name|'self'
op|','
name|'root'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert the xml object to an xml string."""'
newline|'\n'
name|'return'
name|'etree'
op|'.'
name|'tostring'
op|'('
name|'root'
op|','
name|'encoding'
op|'='
string|"'UTF-8'"
op|','
name|'xml_declaration'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|serializers
dedent|''
dedent|''
name|'def'
name|'serializers'
op|'('
op|'**'
name|'serializers'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Attaches serializers to a method.\n\n    This decorator associates a dictionary of serializers with a\n    method.  Note that the function attributes are directly\n    manipulated; the method is not wrapped.\n    """'
newline|'\n'
nl|'\n'
DECL|function|decorator
name|'def'
name|'decorator'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'func'
op|','
string|"'wsgi_serializers'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'.'
name|'wsgi_serializers'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'func'
op|'.'
name|'wsgi_serializers'
op|'.'
name|'update'
op|'('
name|'serializers'
op|')'
newline|'\n'
name|'return'
name|'func'
newline|'\n'
dedent|''
name|'return'
name|'decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|deserializers
dedent|''
name|'def'
name|'deserializers'
op|'('
op|'**'
name|'deserializers'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Attaches deserializers to a method.\n\n    This decorator associates a dictionary of deserializers with a\n    method.  Note that the function attributes are directly\n    manipulated; the method is not wrapped.\n    """'
newline|'\n'
nl|'\n'
DECL|function|decorator
name|'def'
name|'decorator'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'func'
op|','
string|"'wsgi_deserializers'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'.'
name|'wsgi_deserializers'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'func'
op|'.'
name|'wsgi_deserializers'
op|'.'
name|'update'
op|'('
name|'deserializers'
op|')'
newline|'\n'
name|'return'
name|'func'
newline|'\n'
dedent|''
name|'return'
name|'decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|response
dedent|''
name|'def'
name|'response'
op|'('
name|'code'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Attaches response code to a method.\n\n    This decorator associates a response code with a method.  Note\n    that the function attributes are directly manipulated; the method\n    is not wrapped.\n    """'
newline|'\n'
nl|'\n'
DECL|function|decorator
name|'def'
name|'decorator'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'func'
op|'.'
name|'wsgi_code'
op|'='
name|'code'
newline|'\n'
name|'return'
name|'func'
newline|'\n'
dedent|''
name|'return'
name|'decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResponseObject
dedent|''
name|'class'
name|'ResponseObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Bundles a response object with appropriate serializers.\n\n    Object that app methods may return in order to bind alternate\n    serializers with a response object to be serialized.  Its use is\n    optional.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'code'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|','
op|'**'
name|'serializers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Binds serializers with an object.\n\n        Takes keyword arguments akin to the @serializer() decorator\n        for specifying serializers.  Serializers specified will be\n        given preference over default serializers or method-specific\n        serializers on return.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'obj'
op|'='
name|'obj'
newline|'\n'
name|'self'
op|'.'
name|'serializers'
op|'='
name|'serializers'
newline|'\n'
name|'self'
op|'.'
name|'_default_code'
op|'='
number|'200'
newline|'\n'
name|'self'
op|'.'
name|'_code'
op|'='
name|'code'
newline|'\n'
name|'self'
op|'.'
name|'_headers'
op|'='
name|'headers'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'serializer'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'media_type'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves a header with the given name."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_headers'
op|'['
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets a header with the given name to the given value."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_headers'
op|'['
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the header with the given name."""'
newline|'\n'
nl|'\n'
name|'del'
name|'self'
op|'.'
name|'_headers'
op|'['
name|'key'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_bind_method_serializers
dedent|''
name|'def'
name|'_bind_method_serializers'
op|'('
name|'self'
op|','
name|'meth_serializers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Binds method serializers with the response object.\n\n        Binds the method serializers with the response object.\n        Serializers specified to the constructor will take precedence\n        over serializers specified to this method.\n\n        :param meth_serializers: A dictionary with keys mapping to\n                                 response types and values containing\n                                 serializer objects.\n        """'
newline|'\n'
nl|'\n'
comment|"# We can't use update because that would be the wrong"
nl|'\n'
comment|'# precedence'
nl|'\n'
name|'for'
name|'mtype'
op|','
name|'serializer'
name|'in'
name|'meth_serializers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'serializers'
op|'.'
name|'setdefault'
op|'('
name|'mtype'
op|','
name|'serializer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_serializer
dedent|''
dedent|''
name|'def'
name|'get_serializer'
op|'('
name|'self'
op|','
name|'content_type'
op|','
name|'default_serializers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the serializer for the wrapped object.\n\n        Returns the serializer for the wrapped object subject to the\n        indicated content type.  If no serializer matching the content\n        type is attached, an appropriate serializer drawn from the\n        default serializers will be used.  If no appropriate\n        serializer is available, raises InvalidContentType.\n        """'
newline|'\n'
nl|'\n'
name|'default_serializers'
op|'='
name|'default_serializers'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'mtype'
op|'='
name|'_MEDIA_TYPE_MAP'
op|'.'
name|'get'
op|'('
name|'content_type'
op|','
name|'content_type'
op|')'
newline|'\n'
name|'if'
name|'mtype'
name|'in'
name|'self'
op|'.'
name|'serializers'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'mtype'
op|','
name|'self'
op|'.'
name|'serializers'
op|'['
name|'mtype'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'mtype'
op|','
name|'default_serializers'
op|'['
name|'mtype'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidContentType'
op|'('
name|'content_type'
op|'='
name|'content_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|preserialize
dedent|''
dedent|''
name|'def'
name|'preserialize'
op|'('
name|'self'
op|','
name|'content_type'
op|','
name|'default_serializers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prepares the serializer that will be used to serialize.\n\n        Determines the serializer that will be used and prepares an\n        instance of it for later call.  This allows the serializer to\n        be accessed by extensions for, e.g., template extension.\n        """'
newline|'\n'
nl|'\n'
name|'mtype'
op|','
name|'serializer'
op|'='
name|'self'
op|'.'
name|'get_serializer'
op|'('
name|'content_type'
op|','
nl|'\n'
name|'default_serializers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'media_type'
op|'='
name|'mtype'
newline|'\n'
name|'self'
op|'.'
name|'serializer'
op|'='
name|'serializer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach
dedent|''
name|'def'
name|'attach'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attach slave templates to serializers."""'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'media_type'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'serializer'
op|'.'
name|'attach'
op|'('
name|'kwargs'
op|'['
name|'self'
op|'.'
name|'media_type'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'content_type'
op|','
name|'default_serializers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serializes the wrapped object.\n\n        Utility method for serializing the wrapped object.  Returns a\n        webob.Response object.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'serializer'
op|':'
newline|'\n'
indent|'            '
name|'serializer'
op|'='
name|'self'
op|'.'
name|'serializer'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_mtype'
op|','
name|'_serializer'
op|'='
name|'self'
op|'.'
name|'get_serializer'
op|'('
name|'content_type'
op|','
nl|'\n'
name|'default_serializers'
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'_serializer'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'response'
op|'='
name|'webob'
op|'.'
name|'Response'
op|'('
op|')'
newline|'\n'
name|'response'
op|'.'
name|'status_int'
op|'='
name|'self'
op|'.'
name|'code'
newline|'\n'
name|'for'
name|'hdr'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'_headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'headers'
op|'['
name|'hdr'
op|']'
op|'='
name|'utils'
op|'.'
name|'utf8'
op|'('
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'headers'
op|'['
string|"'Content-Type'"
op|']'
op|'='
name|'utils'
op|'.'
name|'utf8'
op|'('
name|'content_type'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'obj'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'.'
name|'body'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'self'
op|'.'
name|'obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|code
name|'def'
name|'code'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the response status."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_code'
name|'or'
name|'self'
op|'.'
name|'_default_code'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|headers
name|'def'
name|'headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the headers."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_headers'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|action_peek_json
dedent|''
dedent|''
name|'def'
name|'action_peek_json'
op|'('
name|'body'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine action to invoke."""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'decoded'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'body'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"cannot understand JSON"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure there's exactly one key..."
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'decoded'
op|')'
op|'!='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"too many body keys"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# Return the action and the decoded body...'
nl|'\n'
dedent|''
name|'return'
name|'decoded'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|action_peek_xml
dedent|''
name|'def'
name|'action_peek_xml'
op|'('
name|'body'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Determine action to invoke."""'
newline|'\n'
nl|'\n'
name|'dom'
op|'='
name|'xmlutil'
op|'.'
name|'safe_minidom_parse_string'
op|'('
name|'body'
op|')'
newline|'\n'
name|'action_node'
op|'='
name|'dom'
op|'.'
name|'childNodes'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'action_node'
op|'.'
name|'tagName'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceExceptionHandler
dedent|''
name|'class'
name|'ResourceExceptionHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Context manager to handle Resource exceptions.\n\n    Used when processing exceptions generated by API implementation\n    methods (or their extensions).  Converts most exceptions to Fault\n    exceptions, with the appropriate logging.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__enter__
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'ex_type'
op|','
name|'ex_value'
op|','
name|'ex_traceback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'ex_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'ex_value'
op|','
name|'exception'
op|'.'
name|'Forbidden'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPForbidden'
op|'('
nl|'\n'
name|'explanation'
op|'='
name|'ex_value'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'ex_value'
op|','
name|'exception'
op|'.'
name|'Invalid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Fault'
op|'('
name|'exception'
op|'.'
name|'ConvertedException'
op|'('
nl|'\n'
name|'code'
op|'='
name|'ex_value'
op|'.'
name|'code'
op|','
nl|'\n'
name|'explanation'
op|'='
name|'ex_value'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Under python 2.6, TypeError's exception value is actually a string,"
nl|'\n'
comment|'# so test # here via ex_type instead:'
nl|'\n'
comment|'# http://bugs.python.org/issue7853'
nl|'\n'
dedent|''
name|'elif'
name|'issubclass'
op|'('
name|'ex_type'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
op|'('
name|'ex_type'
op|','
name|'ex_value'
op|','
name|'ex_traceback'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Exception handling resource: %s'"
op|')'
op|'%'
name|'ex_value'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
name|'raise'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'ex_value'
op|','
name|'Fault'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Fault thrown: %s"'
op|')'
op|','
name|'unicode'
op|'('
name|'ex_value'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'ex_value'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'ex_value'
op|','
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPException'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"HTTP exception thrown: %s"'
op|')'
op|','
name|'unicode'
op|'('
name|'ex_value'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'Fault'
op|'('
name|'ex_value'
op|')'
newline|'\n'
nl|'\n'
comment|"# We didn't handle the exception"
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Resource
dedent|''
dedent|''
name|'class'
name|'Resource'
op|'('
name|'wsgi'
op|'.'
name|'Application'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""WSGI app that handles (de)serialization and controller dispatch.\n\n    WSGI app that reads routing information supplied by RoutesMiddleware\n    and calls the requested action method upon its controller.  All\n    controller action methods must accept a \'req\' argument, which is the\n    incoming wsgi.Request. If the operation is a PUT or POST, the controller\n    method must also accept a \'body\' argument (the deserialized request body).\n    They may raise a webob.exc exception or return a dict, which will be\n    serialized by requested content type.\n\n    Exceptions derived from webob.exc.HTTPException will be automatically\n    wrapped in Fault() to provide API friendly error responses.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'controller'
op|','
name|'action_peek'
op|'='
name|'None'
op|','
name|'inherits'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'deserializers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""":param controller: object that implement methods created by routes\n                              lib\n           :param action_peek: dictionary of routines for peeking into an\n                               action request body to determine the\n                               desired action\n           :param inherits: another resource object that this resource should\n                            inherit extensions from. Any action extensions that\n                            are applied to the parent resource will also apply\n                            to this resource.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'controller'
op|'='
name|'controller'
newline|'\n'
nl|'\n'
name|'default_deserializers'
op|'='
name|'dict'
op|'('
name|'xml'
op|'='
name|'XMLDeserializer'
op|','
nl|'\n'
name|'json'
op|'='
name|'JSONDeserializer'
op|')'
newline|'\n'
name|'default_deserializers'
op|'.'
name|'update'
op|'('
name|'deserializers'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'default_deserializers'
op|'='
name|'default_deserializers'
newline|'\n'
name|'self'
op|'.'
name|'default_serializers'
op|'='
name|'dict'
op|'('
name|'xml'
op|'='
name|'XMLDictSerializer'
op|','
nl|'\n'
name|'json'
op|'='
name|'JSONDictSerializer'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'action_peek'
op|'='
name|'dict'
op|'('
name|'xml'
op|'='
name|'action_peek_xml'
op|','
nl|'\n'
name|'json'
op|'='
name|'action_peek_json'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'action_peek'
op|'.'
name|'update'
op|'('
name|'action_peek'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Copy over the actions dictionary'
nl|'\n'
name|'self'
op|'.'
name|'wsgi_actions'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'controller'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_actions'
op|'('
name|'controller'
op|')'
newline|'\n'
nl|'\n'
comment|'# Save a mapping of extensions'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'wsgi_extensions'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'wsgi_action_extensions'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'inherits'
op|'='
name|'inherits'
newline|'\n'
nl|'\n'
DECL|member|register_actions
dedent|''
name|'def'
name|'register_actions'
op|'('
name|'self'
op|','
name|'controller'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Registers controller actions with this resource."""'
newline|'\n'
nl|'\n'
name|'actions'
op|'='
name|'getattr'
op|'('
name|'controller'
op|','
string|"'wsgi_actions'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'method_name'
name|'in'
name|'actions'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'wsgi_actions'
op|'['
name|'key'
op|']'
op|'='
name|'getattr'
op|'('
name|'controller'
op|','
name|'method_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_extensions
dedent|''
dedent|''
name|'def'
name|'register_extensions'
op|'('
name|'self'
op|','
name|'controller'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Registers controller extensions with this resource."""'
newline|'\n'
nl|'\n'
name|'extensions'
op|'='
name|'getattr'
op|'('
name|'controller'
op|','
string|"'wsgi_extensions'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'for'
name|'method_name'
op|','
name|'action_name'
name|'in'
name|'extensions'
op|':'
newline|'\n'
comment|'# Look up the extending method'
nl|'\n'
indent|'            '
name|'extension'
op|'='
name|'getattr'
op|'('
name|'controller'
op|','
name|'method_name'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'action_name'
op|':'
newline|'\n'
comment|'# Extending an action...'
nl|'\n'
indent|'                '
name|'if'
name|'action_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'wsgi_action_extensions'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'wsgi_action_extensions'
op|'['
name|'action_name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'wsgi_action_extensions'
op|'['
name|'action_name'
op|']'
op|'.'
name|'append'
op|'('
name|'extension'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Extending a regular method'
nl|'\n'
indent|'                '
name|'if'
name|'method_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'wsgi_extensions'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'wsgi_extensions'
op|'['
name|'method_name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'wsgi_extensions'
op|'['
name|'method_name'
op|']'
op|'.'
name|'append'
op|'('
name|'extension'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_action_args
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_action_args'
op|'('
name|'self'
op|','
name|'request_environment'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse dictionary created by routes library."""'
newline|'\n'
nl|'\n'
comment|'# NOTE(Vek): Check for get_action_args() override in the'
nl|'\n'
comment|'# controller'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'controller'
op|','
string|"'get_action_args'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'controller'
op|'.'
name|'get_action_args'
op|'('
name|'request_environment'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
name|'request_environment'
op|'['
string|"'wsgiorg.routing_args'"
op|']'
op|'['
number|'1'
op|']'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'IndexError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'args'
op|'['
string|"'controller'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'args'
op|'['
string|"'format'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'args'
newline|'\n'
nl|'\n'
DECL|member|get_body
dedent|''
name|'def'
name|'get_body'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'content_type'
op|'='
name|'request'
op|'.'
name|'get_content_type'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidContentType'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Unrecognized Content-Type provided in request"'
op|')'
newline|'\n'
name|'return'
name|'None'
op|','
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'content_type'
op|','
name|'request'
op|'.'
name|'body'
newline|'\n'
nl|'\n'
DECL|member|deserialize
dedent|''
name|'def'
name|'deserialize'
op|'('
name|'self'
op|','
name|'meth'
op|','
name|'content_type'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meth_deserializers'
op|'='
name|'getattr'
op|'('
name|'meth'
op|','
string|"'wsgi_deserializers'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'mtype'
op|'='
name|'_MEDIA_TYPE_MAP'
op|'.'
name|'get'
op|'('
name|'content_type'
op|','
name|'content_type'
op|')'
newline|'\n'
name|'if'
name|'mtype'
name|'in'
name|'meth_deserializers'
op|':'
newline|'\n'
indent|'                '
name|'deserializer'
op|'='
name|'meth_deserializers'
op|'['
name|'mtype'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'deserializer'
op|'='
name|'self'
op|'.'
name|'default_deserializers'
op|'['
name|'mtype'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidContentType'
op|'('
name|'content_type'
op|'='
name|'content_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'hasattr'
op|'('
name|'deserializer'
op|','
string|"'want_controller'"
op|')'
nl|'\n'
name|'and'
name|'deserializer'
op|'.'
name|'want_controller'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'deserializer'
op|'('
name|'self'
op|'.'
name|'controller'
op|')'
op|'.'
name|'deserialize'
op|'('
name|'body'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'deserializer'
op|'('
op|')'
op|'.'
name|'deserialize'
op|'('
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pre_process_extensions
dedent|''
dedent|''
name|'def'
name|'pre_process_extensions'
op|'('
name|'self'
op|','
name|'extensions'
op|','
name|'request'
op|','
name|'action_args'
op|')'
op|':'
newline|'\n'
comment|'# List of callables for post-processing extensions'
nl|'\n'
indent|'        '
name|'post'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'ext'
name|'in'
name|'extensions'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'inspect'
op|'.'
name|'isgeneratorfunction'
op|'('
name|'ext'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|"# If it's a generator function, the part before the"
nl|'\n'
comment|'# yield is the preprocessing stage'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'ResourceExceptionHandler'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'gen'
op|'='
name|'ext'
op|'('
name|'req'
op|'='
name|'request'
op|','
op|'**'
name|'action_args'
op|')'
newline|'\n'
name|'response'
op|'='
name|'gen'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Fault'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                    '
name|'response'
op|'='
name|'ex'
newline|'\n'
nl|'\n'
comment|'# We had a response...'
nl|'\n'
dedent|''
name|'if'
name|'response'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'response'
op|','
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# No response, queue up generator for post-processing'
nl|'\n'
dedent|''
name|'post'
op|'.'
name|'append'
op|'('
name|'gen'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Regular functions only perform post-processing'
nl|'\n'
indent|'                '
name|'post'
op|'.'
name|'append'
op|'('
name|'ext'
op|')'
newline|'\n'
nl|'\n'
comment|'# Run post-processing in the reverse order'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
op|','
name|'reversed'
op|'('
name|'post'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post_process_extensions
dedent|''
name|'def'
name|'post_process_extensions'
op|'('
name|'self'
op|','
name|'extensions'
op|','
name|'resp_obj'
op|','
name|'request'
op|','
nl|'\n'
name|'action_args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ext'
name|'in'
name|'extensions'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'inspect'
op|'.'
name|'isgenerator'
op|'('
name|'ext'
op|')'
op|':'
newline|'\n'
comment|"# If it's a generator, run the second half of"
nl|'\n'
comment|'# processing'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'ResourceExceptionHandler'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'response'
op|'='
name|'ext'
op|'.'
name|'send'
op|'('
name|'resp_obj'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
comment|'# Normal exit of generator'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'except'
name|'Fault'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                    '
name|'response'
op|'='
name|'ex'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Regular functions get post-processing...'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'with'
name|'ResourceExceptionHandler'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'response'
op|'='
name|'ext'
op|'('
name|'req'
op|'='
name|'request'
op|','
name|'resp_obj'
op|'='
name|'resp_obj'
op|','
nl|'\n'
op|'**'
name|'action_args'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Fault'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                    '
name|'response'
op|'='
name|'ex'
newline|'\n'
nl|'\n'
comment|'# We had a response...'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'response'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'response'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_should_have_body
dedent|''
name|'def'
name|'_should_have_body'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'request'
op|'.'
name|'method'
name|'in'
name|'_METHODS_WITH_BODY'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'webob'
op|'.'
name|'dec'
op|'.'
name|'wsgify'
op|'('
name|'RequestClass'
op|'='
name|'Request'
op|')'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""WSGI method that controls (de)serialization and method dispatch."""'
newline|'\n'
nl|'\n'
comment|'# Identify the action, its arguments, and the requested'
nl|'\n'
comment|'# content type'
nl|'\n'
name|'action_args'
op|'='
name|'self'
op|'.'
name|'get_action_args'
op|'('
name|'request'
op|'.'
name|'environ'
op|')'
newline|'\n'
name|'action'
op|'='
name|'action_args'
op|'.'
name|'pop'
op|'('
string|"'action'"
op|','
name|'None'
op|')'
newline|'\n'
name|'content_type'
op|','
name|'body'
op|'='
name|'self'
op|'.'
name|'get_body'
op|'('
name|'request'
op|')'
newline|'\n'
name|'accept'
op|'='
name|'request'
op|'.'
name|'best_match_content_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(Vek): Splitting the function up this way allows for'
nl|'\n'
comment|'#            auditing by external tools that wrap the existing'
nl|'\n'
comment|'#            function.  If we try to audit __call__(), we can'
nl|'\n'
comment|'#            run into troubles due to the @webob.dec.wsgify()'
nl|'\n'
comment|'#            decorator.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_stack'
op|'('
name|'request'
op|','
name|'action'
op|','
name|'action_args'
op|','
nl|'\n'
name|'content_type'
op|','
name|'body'
op|','
name|'accept'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_stack
dedent|''
name|'def'
name|'_process_stack'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'action'
op|','
name|'action_args'
op|','
nl|'\n'
name|'content_type'
op|','
name|'body'
op|','
name|'accept'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Implement the processing stack."""'
newline|'\n'
nl|'\n'
comment|'# Get the implementing method'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'meth'
op|','
name|'extensions'
op|'='
name|'self'
op|'.'
name|'get_method'
op|'('
name|'request'
op|','
name|'action'
op|','
nl|'\n'
name|'content_type'
op|','
name|'body'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'AttributeError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"There is no such action: %s"'
op|')'
op|'%'
name|'ex'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Malformed request body"'
op|')'
newline|'\n'
name|'return'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Action: \'%(action)s\', body: "'
nl|'\n'
string|'"%(body)s"'
op|')'
op|'%'
op|'{'
string|"'action'"
op|':'
name|'action'
op|','
nl|'\n'
string|"'body'"
op|':'
name|'unicode'
op|'('
name|'body'
op|','
string|"'utf-8'"
op|')'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'logging'
op|'.'
name|'mask_password'
op|'('
name|'msg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Calling method \'%(meth)s\' (Content-type=\'%(ctype)s\', "'
nl|'\n'
string|'"Accept=\'%(accept)s\')"'
op|','
nl|'\n'
op|'{'
string|"'meth'"
op|':'
name|'str'
op|'('
name|'meth'
op|')'
op|','
nl|'\n'
string|"'ctype'"
op|':'
name|'content_type'
op|','
nl|'\n'
string|"'accept'"
op|':'
name|'accept'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, deserialize the request body...'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'contents'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_should_have_body'
op|'('
name|'request'
op|')'
op|':'
newline|'\n'
comment|'#allow empty body with PUT and POST'
nl|'\n'
indent|'                '
name|'if'
name|'request'
op|'.'
name|'content_length'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'contents'
op|'='
op|'{'
string|"'body'"
op|':'
name|'None'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'contents'
op|'='
name|'self'
op|'.'
name|'deserialize'
op|'('
name|'meth'
op|','
name|'content_type'
op|','
name|'body'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidContentType'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Unsupported Content-Type"'
op|')'
newline|'\n'
name|'return'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Malformed request body"'
op|')'
newline|'\n'
name|'return'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Update the action args'
nl|'\n'
dedent|''
name|'action_args'
op|'.'
name|'update'
op|'('
name|'contents'
op|')'
newline|'\n'
nl|'\n'
name|'project_id'
op|'='
name|'action_args'
op|'.'
name|'pop'
op|'('
string|'"project_id"'
op|','
name|'None'
op|')'
newline|'\n'
name|'context'
op|'='
name|'request'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'nova.context'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'context'
name|'and'
name|'project_id'
name|'and'
op|'('
name|'project_id'
op|'!='
name|'context'
op|'.'
name|'project_id'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Malformed request URL: URL\'s project_id \'%(project_id)s\'"'
nl|'\n'
string|'" doesn\'t match Context\'s project_id"'
nl|'\n'
string|'" \'%(context_project_id)s\'"'
op|')'
op|'%'
op|'{'
string|"'project_id'"
op|':'
name|'project_id'
op|','
nl|'\n'
string|"'context_project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'return'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Run pre-processing extensions'
nl|'\n'
dedent|''
name|'response'
op|','
name|'post'
op|'='
name|'self'
op|'.'
name|'pre_process_extensions'
op|'('
name|'extensions'
op|','
nl|'\n'
name|'request'
op|','
name|'action_args'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'response'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'ResourceExceptionHandler'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'action_result'
op|'='
name|'self'
op|'.'
name|'dispatch'
op|'('
name|'meth'
op|','
name|'request'
op|','
name|'action_args'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Fault'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'ex'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'response'
op|':'
newline|'\n'
comment|'# No exceptions; convert action_result into a'
nl|'\n'
comment|'# ResponseObject'
nl|'\n'
indent|'            '
name|'resp_obj'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'action_result'
op|')'
name|'is'
name|'dict'
name|'or'
name|'action_result'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'resp_obj'
op|'='
name|'ResponseObject'
op|'('
name|'action_result'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'action_result'
op|','
name|'ResponseObject'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'resp_obj'
op|'='
name|'action_result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'action_result'
newline|'\n'
nl|'\n'
comment|'# Run post-processing extensions'
nl|'\n'
dedent|''
name|'if'
name|'resp_obj'
op|':'
newline|'\n'
comment|'# Do a preserialize to set up the response object'
nl|'\n'
indent|'                '
name|'serializers'
op|'='
name|'getattr'
op|'('
name|'meth'
op|','
string|"'wsgi_serializers'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'resp_obj'
op|'.'
name|'_bind_method_serializers'
op|'('
name|'serializers'
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'meth'
op|','
string|"'wsgi_code'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'resp_obj'
op|'.'
name|'_default_code'
op|'='
name|'meth'
op|'.'
name|'wsgi_code'
newline|'\n'
dedent|''
name|'resp_obj'
op|'.'
name|'preserialize'
op|'('
name|'accept'
op|','
name|'self'
op|'.'
name|'default_serializers'
op|')'
newline|'\n'
nl|'\n'
comment|'# Process post-processing extensions'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'post_process_extensions'
op|'('
name|'post'
op|','
name|'resp_obj'
op|','
nl|'\n'
name|'request'
op|','
name|'action_args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'resp_obj'
name|'and'
name|'not'
name|'response'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'resp_obj'
op|'.'
name|'serialize'
op|'('
name|'request'
op|','
name|'accept'
op|','
nl|'\n'
name|'self'
op|'.'
name|'default_serializers'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'response'
op|','
string|"'headers'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'context'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'.'
name|'headers'
op|'.'
name|'add'
op|'('
string|"'x-compute-request-id'"
op|','
nl|'\n'
name|'context'
op|'.'
name|'request_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'hdr'
op|','
name|'val'
name|'in'
name|'response'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Headers must be utf-8 strings'
nl|'\n'
indent|'                '
name|'response'
op|'.'
name|'headers'
op|'['
name|'hdr'
op|']'
op|'='
name|'utils'
op|'.'
name|'utf8'
op|'('
name|'str'
op|'('
name|'val'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|get_method
dedent|''
name|'def'
name|'get_method'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'action'
op|','
name|'content_type'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meth'
op|','
name|'extensions'
op|'='
name|'self'
op|'.'
name|'_get_method'
op|'('
name|'request'
op|','
nl|'\n'
name|'action'
op|','
nl|'\n'
name|'content_type'
op|','
nl|'\n'
name|'body'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'inherits'
op|':'
newline|'\n'
indent|'            '
name|'_meth'
op|','
name|'parent_ext'
op|'='
name|'self'
op|'.'
name|'inherits'
op|'.'
name|'get_method'
op|'('
name|'request'
op|','
nl|'\n'
name|'action'
op|','
nl|'\n'
name|'content_type'
op|','
nl|'\n'
name|'body'
op|')'
newline|'\n'
name|'extensions'
op|'.'
name|'extend'
op|'('
name|'parent_ext'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'meth'
op|','
name|'extensions'
newline|'\n'
nl|'\n'
DECL|member|_get_method
dedent|''
name|'def'
name|'_get_method'
op|'('
name|'self'
op|','
name|'request'
op|','
name|'action'
op|','
name|'content_type'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Look up the action-specific method and its extensions."""'
newline|'\n'
nl|'\n'
comment|'# Look up the method'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'controller'
op|':'
newline|'\n'
indent|'                '
name|'meth'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'action'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'meth'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'controller'
op|','
name|'action'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'not'
name|'self'
op|'.'
name|'wsgi_actions'
name|'or'
nl|'\n'
name|'action'
name|'not'
name|'in'
name|'_ROUTES_METHODS'
op|'+'
op|'['
string|"'action'"
op|']'
op|')'
op|':'
newline|'\n'
comment|'# Propagate the error'
nl|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'meth'
op|','
name|'self'
op|'.'
name|'wsgi_extensions'
op|'.'
name|'get'
op|'('
name|'action'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'action'
op|'=='
string|"'action'"
op|':'
newline|'\n'
comment|"# OK, it's an action; figure out which action..."
nl|'\n'
indent|'            '
name|'mtype'
op|'='
name|'_MEDIA_TYPE_MAP'
op|'.'
name|'get'
op|'('
name|'content_type'
op|')'
newline|'\n'
name|'action_name'
op|'='
name|'self'
op|'.'
name|'action_peek'
op|'['
name|'mtype'
op|']'
op|'('
name|'body'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'action_name'
op|'='
name|'action'
newline|'\n'
nl|'\n'
comment|'# Look up the action method'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'self'
op|'.'
name|'wsgi_actions'
op|'['
name|'action_name'
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'wsgi_action_extensions'
op|'.'
name|'get'
op|'('
name|'action_name'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dispatch
dedent|''
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'request'
op|','
name|'action_args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Dispatch a call to the action-specific method."""'
newline|'\n'
nl|'\n'
name|'return'
name|'method'
op|'('
name|'req'
op|'='
name|'request'
op|','
op|'**'
name|'action_args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|action
dedent|''
dedent|''
name|'def'
name|'action'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mark a function as an action.\n\n    The given name will be taken as the action key in the body.\n\n    This is also overloaded to allow extensions to provide\n    non-extending definitions of create and delete operations.\n    """'
newline|'\n'
nl|'\n'
DECL|function|decorator
name|'def'
name|'decorator'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'func'
op|'.'
name|'wsgi_action'
op|'='
name|'name'
newline|'\n'
name|'return'
name|'func'
newline|'\n'
dedent|''
name|'return'
name|'decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|extends
dedent|''
name|'def'
name|'extends'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Indicate a function extends an operation.\n\n    Can be used as either::\n\n        @extends\n        def index(...):\n            pass\n\n    or as::\n\n        @extends(action=\'resize\')\n        def _action_resize(...):\n            pass\n    """'
newline|'\n'
nl|'\n'
DECL|function|decorator
name|'def'
name|'decorator'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
comment|"# Store enough information to find what we're extending"
nl|'\n'
indent|'        '
name|'func'
op|'.'
name|'wsgi_extends'
op|'='
op|'('
name|'func'
op|'.'
name|'__name__'
op|','
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'action'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'func'
newline|'\n'
nl|'\n'
comment|'# If we have positional arguments, call the decorator'
nl|'\n'
dedent|''
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'decorator'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
comment|'# OK, return the decorator instead'
nl|'\n'
dedent|''
name|'return'
name|'decorator'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ControllerMetaclass
dedent|''
name|'class'
name|'ControllerMetaclass'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Controller metaclass.\n\n    This metaclass automates the task of assembling a dictionary\n    mapping action keys to method names.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__new__
name|'def'
name|'__new__'
op|'('
name|'mcs'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'cls_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the wsgi_actions dictionary to the class."""'
newline|'\n'
nl|'\n'
comment|'# Find all actions'
nl|'\n'
name|'actions'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'extensions'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# start with wsgi actions from base classes'
nl|'\n'
name|'for'
name|'base'
name|'in'
name|'bases'
op|':'
newline|'\n'
indent|'            '
name|'actions'
op|'.'
name|'update'
op|'('
name|'getattr'
op|'('
name|'base'
op|','
string|"'wsgi_actions'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'cls_dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'callable'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'value'
op|','
string|"'wsgi_action'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'actions'
op|'['
name|'value'
op|'.'
name|'wsgi_action'
op|']'
op|'='
name|'key'
newline|'\n'
dedent|''
name|'elif'
name|'getattr'
op|'('
name|'value'
op|','
string|"'wsgi_extends'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'extensions'
op|'.'
name|'append'
op|'('
name|'value'
op|'.'
name|'wsgi_extends'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add the actions and extensions to the class dict'
nl|'\n'
dedent|''
dedent|''
name|'cls_dict'
op|'['
string|"'wsgi_actions'"
op|']'
op|'='
name|'actions'
newline|'\n'
name|'cls_dict'
op|'['
string|"'wsgi_extensions'"
op|']'
op|'='
name|'extensions'
newline|'\n'
nl|'\n'
name|'return'
name|'super'
op|'('
name|'ControllerMetaclass'
op|','
name|'mcs'
op|')'
op|'.'
name|'__new__'
op|'('
name|'mcs'
op|','
name|'name'
op|','
name|'bases'
op|','
nl|'\n'
name|'cls_dict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'ControllerMetaclass'
op|')'
newline|'\n'
DECL|class|Controller
name|'class'
name|'Controller'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Default controller."""'
newline|'\n'
nl|'\n'
DECL|variable|_view_builder_class
name|'_view_builder_class'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'view_builder'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize controller with a view builder instance."""'
newline|'\n'
name|'if'
name|'view_builder'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_view_builder'
op|'='
name|'view_builder'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_view_builder_class'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_view_builder'
op|'='
name|'self'
op|'.'
name|'_view_builder_class'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_view_builder'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|is_valid_body
name|'def'
name|'is_valid_body'
op|'('
name|'body'
op|','
name|'entity_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
op|'('
name|'body'
name|'and'
name|'entity_name'
name|'in'
name|'body'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|function|is_dict
dedent|''
name|'def'
name|'is_dict'
op|'('
name|'d'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'.'
name|'get'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'is_dict'
op|'('
name|'body'
op|'['
name|'entity_name'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Fault
dedent|''
dedent|''
name|'class'
name|'Fault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrap webob.exc.HTTPException to provide API friendly response."""'
newline|'\n'
nl|'\n'
DECL|variable|_fault_names
name|'_fault_names'
op|'='
op|'{'
nl|'\n'
number|'400'
op|':'
string|'"badRequest"'
op|','
nl|'\n'
number|'401'
op|':'
string|'"unauthorized"'
op|','
nl|'\n'
number|'403'
op|':'
string|'"forbidden"'
op|','
nl|'\n'
number|'404'
op|':'
string|'"itemNotFound"'
op|','
nl|'\n'
number|'405'
op|':'
string|'"badMethod"'
op|','
nl|'\n'
number|'409'
op|':'
string|'"conflictingRequest"'
op|','
nl|'\n'
number|'413'
op|':'
string|'"overLimit"'
op|','
nl|'\n'
number|'415'
op|':'
string|'"badMediaType"'
op|','
nl|'\n'
number|'429'
op|':'
string|'"overLimit"'
op|','
nl|'\n'
number|'501'
op|':'
string|'"notImplemented"'
op|','
nl|'\n'
number|'503'
op|':'
string|'"serviceUnavailable"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exception'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a Fault for the given webob.exc.exception."""'
newline|'\n'
name|'self'
op|'.'
name|'wrapped_exc'
op|'='
name|'exception'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'headers'
op|'['
name|'key'
op|']'
op|'='
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'status_int'
op|'='
name|'exception'
op|'.'
name|'status_int'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'webob'
op|'.'
name|'dec'
op|'.'
name|'wsgify'
op|'('
name|'RequestClass'
op|'='
name|'Request'
op|')'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'req'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate a WSGI response based on the exception passed to ctor."""'
newline|'\n'
nl|'\n'
name|'user_locale'
op|'='
name|'req'
op|'.'
name|'best_match_language'
op|'('
op|')'
newline|'\n'
comment|'# Replace the body with fault details.'
nl|'\n'
name|'code'
op|'='
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'status_int'
newline|'\n'
name|'fault_name'
op|'='
name|'self'
op|'.'
name|'_fault_names'
op|'.'
name|'get'
op|'('
name|'code'
op|','
string|'"computeFault"'
op|')'
newline|'\n'
name|'explanation'
op|'='
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'explanation'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Returning %(code)s to user: %(explanation)s"'
op|','
nl|'\n'
op|'{'
string|"'code'"
op|':'
name|'code'
op|','
string|"'explanation'"
op|':'
name|'explanation'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'explanation'
op|'='
name|'gettextutils'
op|'.'
name|'translate'
op|'('
name|'explanation'
op|','
nl|'\n'
name|'user_locale'
op|')'
newline|'\n'
name|'fault_data'
op|'='
op|'{'
nl|'\n'
name|'fault_name'
op|':'
op|'{'
nl|'\n'
string|"'code'"
op|':'
name|'code'
op|','
nl|'\n'
string|"'message'"
op|':'
name|'explanation'
op|'}'
op|'}'
newline|'\n'
name|'if'
name|'code'
op|'=='
number|'413'
name|'or'
name|'code'
op|'=='
number|'429'
op|':'
newline|'\n'
indent|'            '
name|'retry'
op|'='
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|"'Retry-After'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'retry'
op|':'
newline|'\n'
indent|'                '
name|'fault_data'
op|'['
name|'fault_name'
op|']'
op|'['
string|"'retryAfter'"
op|']'
op|'='
name|'retry'
newline|'\n'
nl|'\n'
comment|"# 'code' is an attribute on the fault tag itself"
nl|'\n'
dedent|''
dedent|''
name|'metadata'
op|'='
op|'{'
string|"'attributes'"
op|':'
op|'{'
name|'fault_name'
op|':'
string|"'code'"
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'xml_serializer'
op|'='
name|'XMLDictSerializer'
op|'('
name|'metadata'
op|','
name|'XMLNS_V11'
op|')'
newline|'\n'
nl|'\n'
name|'content_type'
op|'='
name|'req'
op|'.'
name|'best_match_content_type'
op|'('
op|')'
newline|'\n'
name|'serializer'
op|'='
op|'{'
nl|'\n'
string|"'application/xml'"
op|':'
name|'xml_serializer'
op|','
nl|'\n'
string|"'application/json'"
op|':'
name|'JSONDictSerializer'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
op|'['
name|'content_type'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'body'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fault_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'content_type'
op|'='
name|'content_type'
newline|'\n'
name|'_set_request_id_header'
op|'('
name|'req'
op|','
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'headers'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'wrapped_exc'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'__str__'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RateLimitFault
dedent|''
dedent|''
name|'class'
name|'RateLimitFault'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Rate-limited request response."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'details'
op|','
name|'retry_time'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize new `RateLimitFault` with relevant information."""'
newline|'\n'
name|'hdrs'
op|'='
name|'RateLimitFault'
op|'.'
name|'_retry_after'
op|'('
name|'retry_time'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrapped_exc'
op|'='
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPTooManyRequests'
op|'('
name|'headers'
op|'='
name|'hdrs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content'
op|'='
op|'{'
nl|'\n'
string|'"overLimit"'
op|':'
op|'{'
nl|'\n'
string|'"code"'
op|':'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'status_int'
op|','
nl|'\n'
string|'"message"'
op|':'
name|'message'
op|','
nl|'\n'
string|'"details"'
op|':'
name|'details'
op|','
nl|'\n'
string|'"retryAfter"'
op|':'
name|'hdrs'
op|'['
string|"'Retry-After'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_retry_after
name|'def'
name|'_retry_after'
op|'('
name|'retry_time'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'delay'
op|'='
name|'int'
op|'('
name|'math'
op|'.'
name|'ceil'
op|'('
name|'retry_time'
op|'-'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'retry_after'
op|'='
name|'delay'
name|'if'
name|'delay'
op|'>'
number|'0'
name|'else'
number|'0'
newline|'\n'
name|'headers'
op|'='
op|'{'
string|"'Retry-After'"
op|':'
string|"'%d'"
op|'%'
name|'retry_after'
op|'}'
newline|'\n'
name|'return'
name|'headers'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'webob'
op|'.'
name|'dec'
op|'.'
name|'wsgify'
op|'('
name|'RequestClass'
op|'='
name|'Request'
op|')'
newline|'\n'
DECL|member|__call__
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the wrapped exception with a serialized body conforming\n        to our error format.\n        """'
newline|'\n'
name|'user_locale'
op|'='
name|'request'
op|'.'
name|'best_match_language'
op|'('
op|')'
newline|'\n'
name|'content_type'
op|'='
name|'request'
op|'.'
name|'best_match_content_type'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|'"attributes"'
op|':'
op|'{'
string|'"overLimit"'
op|':'
op|'['
string|'"code"'
op|','
string|'"retryAfter"'
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'content'
op|'['
string|"'overLimit'"
op|']'
op|'['
string|"'message'"
op|']'
op|'='
name|'gettextutils'
op|'.'
name|'translate'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'content'
op|'['
string|"'overLimit'"
op|']'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
name|'user_locale'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content'
op|'['
string|"'overLimit'"
op|']'
op|'['
string|"'details'"
op|']'
op|'='
name|'gettextutils'
op|'.'
name|'translate'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'content'
op|'['
string|"'overLimit'"
op|']'
op|'['
string|"'details'"
op|']'
op|','
nl|'\n'
name|'user_locale'
op|')'
newline|'\n'
nl|'\n'
name|'xml_serializer'
op|'='
name|'XMLDictSerializer'
op|'('
name|'metadata'
op|','
name|'XMLNS_V11'
op|')'
newline|'\n'
name|'serializer'
op|'='
op|'{'
nl|'\n'
string|"'application/xml'"
op|':'
name|'xml_serializer'
op|','
nl|'\n'
string|"'application/json'"
op|':'
name|'JSONDictSerializer'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
op|'['
name|'content_type'
op|']'
newline|'\n'
nl|'\n'
name|'content'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'self'
op|'.'
name|'content'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'body'
op|'='
name|'content'
newline|'\n'
name|'self'
op|'.'
name|'wrapped_exc'
op|'.'
name|'content_type'
op|'='
name|'content_type'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'wrapped_exc'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_request_id_header
dedent|''
dedent|''
name|'def'
name|'_set_request_id_header'
op|'('
name|'req'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'context'
op|'='
name|'req'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'nova.context'"
op|')'
newline|'\n'
name|'if'
name|'context'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'['
string|"'x-compute-request-id'"
op|']'
op|'='
name|'context'
op|'.'
name|'request_id'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

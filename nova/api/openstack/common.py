begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'import'
name|'webob'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.api.openstack.common'"
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|XML_NS_V10
name|'XML_NS_V10'
op|'='
string|"'http://docs.rackspacecloud.com/servers/api/v1.0'"
newline|'\n'
DECL|variable|XML_NS_V11
name|'XML_NS_V11'
op|'='
string|"'http://docs.openstack.org/compute/api/v1.1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_pagination_params
name|'def'
name|'get_pagination_params'
op|'('
name|'request'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return marker, limit tuple from request.\n\n    :param request: `wsgi.Request` possibly containing \'marker\' and \'limit\'\n                    GET variables. \'marker\' is the id of the last element\n                    the client has seen, and \'limit\' is the maximum number\n                    of items to return. If \'limit\' is not specified, 0, or\n                    > max_limit, we default to max_limit. Negative values\n                    for either marker or limit will cause\n                    exc.HTTPBadRequest() exceptions to be raised.\n\n    """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'param'
name|'in'
op|'['
string|"'marker'"
op|','
string|"'limit'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'param'
name|'in'
name|'request'
op|'.'
name|'GET'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
name|'param'
op|']'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'GET'
op|'['
name|'param'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s param must be an integer'"
op|')'
op|'%'
name|'param'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'params'
op|'['
name|'param'
op|']'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s param must be positive'"
op|')'
op|'%'
name|'param'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'params'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|limited
dedent|''
name|'def'
name|'limited'
op|'('
name|'items'
op|','
name|'request'
op|','
name|'max_limit'
op|'='
name|'FLAGS'
op|'.'
name|'osapi_max_limit'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a slice of items according to requested offset and limit.\n\n    @param items: A sliceable entity\n    @param request: `wsgi.Request` possibly containing \'offset\' and \'limit\'\n                    GET variables. \'offset\' is where to start in the list,\n                    and \'limit\' is the maximum number of items to return. If\n                    \'limit\' is not specified, 0, or > max_limit, we default\n                    to max_limit. Negative values for either offset or limit\n                    will cause exc.HTTPBadRequest() exceptions to be raised.\n    @kwarg max_limit: The maximum number of items to return from \'items\'\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'offset'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'GET'
op|'.'
name|'get'
op|'('
string|"'offset'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'_'
op|'('
string|"'offset param must be an integer'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'limit'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'GET'
op|'.'
name|'get'
op|'('
string|"'limit'"
op|','
name|'max_limit'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'_'
op|'('
string|"'limit param must be an integer'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'limit'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'_'
op|'('
string|"'limit param must be positive'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'offset'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'_'
op|'('
string|"'offset param must be positive'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'limit'
op|'='
name|'min'
op|'('
name|'max_limit'
op|','
name|'limit'
name|'or'
name|'max_limit'
op|')'
newline|'\n'
name|'range_end'
op|'='
name|'offset'
op|'+'
name|'limit'
newline|'\n'
name|'return'
name|'items'
op|'['
name|'offset'
op|':'
name|'range_end'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|limited_by_marker
dedent|''
name|'def'
name|'limited_by_marker'
op|'('
name|'items'
op|','
name|'request'
op|','
name|'max_limit'
op|'='
name|'FLAGS'
op|'.'
name|'osapi_max_limit'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a slice of items according to the requested marker and limit."""'
newline|'\n'
name|'params'
op|'='
name|'get_pagination_params'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'limit'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'limit'"
op|','
name|'max_limit'
op|')'
newline|'\n'
name|'marker'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'marker'"
op|')'
newline|'\n'
nl|'\n'
name|'limit'
op|'='
name|'min'
op|'('
name|'max_limit'
op|','
name|'limit'
op|')'
newline|'\n'
name|'start_index'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'marker'
op|':'
newline|'\n'
indent|'        '
name|'start_index'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'for'
name|'i'
op|','
name|'item'
name|'in'
name|'enumerate'
op|'('
name|'items'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'item'
op|'['
string|"'id'"
op|']'
op|'=='
name|'marker'
op|':'
newline|'\n'
indent|'                '
name|'start_index'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'start_index'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'_'
op|'('
string|"'marker [%s] not found'"
op|'%'
name|'marker'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'range_end'
op|'='
name|'start_index'
op|'+'
name|'limit'
newline|'\n'
name|'return'
name|'items'
op|'['
name|'start_index'
op|':'
name|'range_end'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_id_from_href
dedent|''
name|'def'
name|'get_id_from_href'
op|'('
name|'href'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the id portion of a url as an int.\n\n    Given: \'http://www.foo.com/bar/123?q=4\'\n    Returns: 123\n\n    In order to support local hrefs, the href argument can be just an id:\n    Given: \'123\'\n    Returns: 123\n\n    """'
newline|'\n'
name|'if'
name|'re'
op|'.'
name|'match'
op|'('
string|"r'\\d+$'"
op|','
name|'str'
op|'('
name|'href'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'href'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'urlparse'
op|'('
name|'href'
op|')'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Error extracting id from href: %s"'
op|')'
op|'%'
name|'href'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'_'
op|'('
string|"'could not parse id from href'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|remove_version
dedent|''
dedent|''
name|'def'
name|'remove_version'
op|'('
name|'base_url'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'base_url'
op|'.'
name|'rsplit'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

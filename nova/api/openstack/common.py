begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'import'
name|'webob'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'wsgi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'xmlutil'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
name|'as'
name|'compute_power_state'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.api.openstack.common'"
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|XML_NS_V10
name|'XML_NS_V10'
op|'='
string|"'http://docs.rackspacecloud.com/servers/api/v1.0'"
newline|'\n'
DECL|variable|XML_NS_V11
name|'XML_NS_V11'
op|'='
string|"'http://docs.openstack.org/compute/api/v1.1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_STATUS_MAP
name|'_STATUS_MAP'
op|'='
op|'{'
nl|'\n'
name|'None'
op|':'
string|"'BUILD'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'NOSTATE'
op|':'
string|"'BUILD'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'RUNNING'
op|':'
string|"'ACTIVE'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'BLOCKED'
op|':'
string|"'ACTIVE'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'SUSPENDED'
op|':'
string|"'SUSPENDED'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'PAUSED'
op|':'
string|"'PAUSED'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'SHUTDOWN'
op|':'
string|"'SHUTDOWN'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'SHUTOFF'
op|':'
string|"'SHUTOFF'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'CRASHED'
op|':'
string|"'ERROR'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'FAILED'
op|':'
string|"'ERROR'"
op|','
nl|'\n'
name|'compute_power_state'
op|'.'
name|'BUILDING'
op|':'
string|"'BUILD'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|status_from_power_state
name|'def'
name|'status_from_power_state'
op|'('
name|'power_state'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Map the power state to the server status string"""'
newline|'\n'
name|'return'
name|'_STATUS_MAP'
op|'['
name|'power_state'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|power_states_from_status
dedent|''
name|'def'
name|'power_states_from_status'
op|'('
name|'status'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Map the server status string to a list of power states"""'
newline|'\n'
name|'power_states'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'power_state'
op|','
name|'status_map'
name|'in'
name|'_STATUS_MAP'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# Skip the 'None' state"
nl|'\n'
indent|'        '
name|'if'
name|'power_state'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'status'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'status_map'
op|'.'
name|'lower'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'power_states'
op|'.'
name|'append'
op|'('
name|'power_state'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'power_states'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_pagination_params
dedent|''
name|'def'
name|'get_pagination_params'
op|'('
name|'request'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return marker, limit tuple from request.\n\n    :param request: `wsgi.Request` possibly containing \'marker\' and \'limit\'\n                    GET variables. \'marker\' is the id of the last element\n                    the client has seen, and \'limit\' is the maximum number\n                    of items to return. If \'limit\' is not specified, 0, or\n                    > max_limit, we default to max_limit. Negative values\n                    for either marker or limit will cause\n                    exc.HTTPBadRequest() exceptions to be raised.\n\n    """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'param'
name|'in'
op|'['
string|"'marker'"
op|','
string|"'limit'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'param'
name|'in'
name|'request'
op|'.'
name|'GET'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
name|'param'
op|']'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'GET'
op|'['
name|'param'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s param must be an integer'"
op|')'
op|'%'
name|'param'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'params'
op|'['
name|'param'
op|']'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%s param must be positive'"
op|')'
op|'%'
name|'param'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'params'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|limited
dedent|''
name|'def'
name|'limited'
op|'('
name|'items'
op|','
name|'request'
op|','
name|'max_limit'
op|'='
name|'FLAGS'
op|'.'
name|'osapi_max_limit'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a slice of items according to requested offset and limit.\n\n    @param items: A sliceable entity\n    @param request: `wsgi.Request` possibly containing \'offset\' and \'limit\'\n                    GET variables. \'offset\' is where to start in the list,\n                    and \'limit\' is the maximum number of items to return. If\n                    \'limit\' is not specified, 0, or > max_limit, we default\n                    to max_limit. Negative values for either offset or limit\n                    will cause exc.HTTPBadRequest() exceptions to be raised.\n    @kwarg max_limit: The maximum number of items to return from \'items\'\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'offset'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'GET'
op|'.'
name|'get'
op|'('
string|"'offset'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'offset param must be an integer'"
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'limit'
op|'='
name|'int'
op|'('
name|'request'
op|'.'
name|'GET'
op|'.'
name|'get'
op|'('
string|"'limit'"
op|','
name|'max_limit'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'limit param must be an integer'"
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'limit'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'limit param must be positive'"
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'offset'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'offset param must be positive'"
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'limit'
op|'='
name|'min'
op|'('
name|'max_limit'
op|','
name|'limit'
name|'or'
name|'max_limit'
op|')'
newline|'\n'
name|'range_end'
op|'='
name|'offset'
op|'+'
name|'limit'
newline|'\n'
name|'return'
name|'items'
op|'['
name|'offset'
op|':'
name|'range_end'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|limited_by_marker
dedent|''
name|'def'
name|'limited_by_marker'
op|'('
name|'items'
op|','
name|'request'
op|','
name|'max_limit'
op|'='
name|'FLAGS'
op|'.'
name|'osapi_max_limit'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a slice of items according to the requested marker and limit."""'
newline|'\n'
name|'params'
op|'='
name|'get_pagination_params'
op|'('
name|'request'
op|')'
newline|'\n'
nl|'\n'
name|'limit'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'limit'"
op|','
name|'max_limit'
op|')'
newline|'\n'
name|'marker'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'marker'"
op|')'
newline|'\n'
nl|'\n'
name|'limit'
op|'='
name|'min'
op|'('
name|'max_limit'
op|','
name|'limit'
op|')'
newline|'\n'
name|'start_index'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'marker'
op|':'
newline|'\n'
indent|'        '
name|'start_index'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'for'
name|'i'
op|','
name|'item'
name|'in'
name|'enumerate'
op|'('
name|'items'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'item'
op|'['
string|"'id'"
op|']'
op|'=='
name|'marker'
op|':'
newline|'\n'
indent|'                '
name|'start_index'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'start_index'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'marker [%s] not found'"
op|')'
op|'%'
name|'marker'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'range_end'
op|'='
name|'start_index'
op|'+'
name|'limit'
newline|'\n'
name|'return'
name|'items'
op|'['
name|'start_index'
op|':'
name|'range_end'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_id_from_href
dedent|''
name|'def'
name|'get_id_from_href'
op|'('
name|'href'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the id portion of a url as an int.\n\n    Given: \'http://www.foo.com/bar/123?q=4\'\n    Returns: 123\n\n    In order to support local hrefs, the href argument can be just an id:\n    Given: \'123\'\n    Returns: 123\n\n    """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Attempting to treat %(href)s as an integer ID."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'href'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Attempting to treat %(href)s as a URL."'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'urlparse'
op|'.'
name|'urlsplit'
op|'('
name|'href'
op|')'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Failed to parse ID from %(href)s: %(error)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_version_from_href
dedent|''
dedent|''
name|'def'
name|'remove_version_from_href'
op|'('
name|'href'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Removes the first api version from the href.\n\n    Given: \'http://www.nova.com/v1.1/123\'\n    Returns: \'http://www.nova.com/123\'\n\n    Given: \'http://www.nova.com/v1.1\'\n    Returns: \'http://www.nova.com\'\n\n    """'
newline|'\n'
name|'parsed_url'
op|'='
name|'urlparse'
op|'.'
name|'urlsplit'
op|'('
name|'href'
op|')'
newline|'\n'
name|'new_path'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'^/v[0-9]+\\.[0-9]+(/|$)'"
op|','
string|"r'\\1'"
op|','
name|'parsed_url'
op|'.'
name|'path'
op|','
nl|'\n'
name|'count'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'new_path'
op|'=='
name|'parsed_url'
op|'.'
name|'path'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'href %s does not contain version'"
op|')'
op|'%'
name|'href'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'parsed_url'
op|'='
name|'list'
op|'('
name|'parsed_url'
op|')'
newline|'\n'
name|'parsed_url'
op|'['
number|'2'
op|']'
op|'='
name|'new_path'
newline|'\n'
name|'return'
name|'urlparse'
op|'.'
name|'urlunsplit'
op|'('
name|'parsed_url'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_version_from_href
dedent|''
name|'def'
name|'get_version_from_href'
op|'('
name|'href'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the api version in the href.\n\n    Returns the api version in the href.\n    If no version is found, 1.0 is returned\n\n    Given: \'http://www.nova.com/123\'\n    Returns: \'1.0\'\n\n    Given: \'http://www.nova.com/v1.1\'\n    Returns: \'1.1\'\n\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'#finds the first instance that matches /v#.#/'
nl|'\n'
indent|'        '
name|'version'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"r'[/][v][0-9]+\\.[0-9]+[/]'"
op|','
name|'href'
op|')'
newline|'\n'
comment|'#if no version was found, try finding /v#.# at the end of the string'
nl|'\n'
name|'if'
name|'not'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"r'[/][v][0-9]+\\.[0-9]+$'"
op|','
name|'href'
op|')'
newline|'\n'
dedent|''
name|'version'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
string|"r'[0-9]+\\.[0-9]'"
op|','
name|'version'
op|'['
number|'0'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'        '
name|'version'
op|'='
string|"'1.0'"
newline|'\n'
dedent|''
name|'return'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_img_metadata_quota_limit
dedent|''
name|'def'
name|'check_img_metadata_quota_limit'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'metadata'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'num_metadata'
op|'='
name|'len'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'quota_metadata'
op|'='
name|'quota'
op|'.'
name|'allowed_metadata_items'
op|'('
name|'context'
op|','
name|'num_metadata'
op|')'
newline|'\n'
name|'if'
name|'quota_metadata'
op|'<'
name|'num_metadata'
op|':'
newline|'\n'
indent|'        '
name|'expl'
op|'='
name|'_'
op|'('
string|'"Image metadata limit exceeded"'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPRequestEntityTooLarge'
op|'('
name|'explanation'
op|'='
name|'expl'
op|','
nl|'\n'
name|'headers'
op|'='
op|'{'
string|"'Retry-After'"
op|':'
number|'0'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataXMLDeserializer
dedent|''
dedent|''
name|'class'
name|'MetadataXMLDeserializer'
op|'('
name|'wsgi'
op|'.'
name|'XMLDeserializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|extract_metadata
indent|'    '
name|'def'
name|'extract_metadata'
op|'('
name|'self'
op|','
name|'metadata_node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Marshal the metadata attribute of a parsed request"""'
newline|'\n'
name|'if'
name|'metadata_node'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'meta_node'
name|'in'
name|'self'
op|'.'
name|'find_children_named'
op|'('
name|'metadata_node'
op|','
string|'"meta"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'meta_node'
op|'.'
name|'getAttribute'
op|'('
string|'"key"'
op|')'
newline|'\n'
name|'metadata'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'extract_text'
op|'('
name|'meta_node'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'metadata'
newline|'\n'
nl|'\n'
DECL|member|_extract_metadata_container
dedent|''
name|'def'
name|'_extract_metadata_container'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'datastring'
op|')'
newline|'\n'
name|'metadata_node'
op|'='
name|'self'
op|'.'
name|'find_first_child_named'
op|'('
name|'dom'
op|','
string|'"metadata"'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'extract_metadata'
op|'('
name|'metadata_node'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'body'"
op|':'
op|'{'
string|"'metadata'"
op|':'
name|'metadata'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_extract_metadata_container'
op|'('
name|'datastring'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_all
dedent|''
name|'def'
name|'update_all'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_extract_metadata_container'
op|'('
name|'datastring'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'datastring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'datastring'
op|')'
newline|'\n'
name|'metadata_item'
op|'='
name|'self'
op|'.'
name|'extract_metadata'
op|'('
name|'dom'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'body'"
op|':'
op|'{'
string|"'meta'"
op|':'
name|'metadata_item'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataHeadersSerializer
dedent|''
dedent|''
name|'class'
name|'MetadataHeadersSerializer'
op|'('
name|'wsgi'
op|'.'
name|'ResponseHeadersSerializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|delete
indent|'    '
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'.'
name|'status_int'
op|'='
number|'204'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataXMLSerializer
dedent|''
dedent|''
name|'class'
name|'MetadataXMLSerializer'
op|'('
name|'wsgi'
op|'.'
name|'XMLDictSerializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|NSMAP
indent|'    '
name|'NSMAP'
op|'='
op|'{'
name|'None'
op|':'
name|'xmlutil'
op|'.'
name|'XMLNS_V11'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'xmlns'
op|'='
name|'wsgi'
op|'.'
name|'XMLNS_V11'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MetadataXMLSerializer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'xmlns'
op|'='
name|'xmlns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|populate_metadata
dedent|''
name|'def'
name|'populate_metadata'
op|'('
name|'self'
op|','
name|'metadata_elem'
op|','
name|'meta_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'key'
op|','
name|'value'
op|')'
name|'in'
name|'meta_dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'elem'
op|'='
name|'etree'
op|'.'
name|'SubElement'
op|'('
name|'metadata_elem'
op|','
string|"'meta'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'set'
op|'('
string|"'key'"
op|','
name|'str'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'text'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_populate_meta_item
dedent|''
dedent|''
name|'def'
name|'_populate_meta_item'
op|'('
name|'self'
op|','
name|'meta_elem'
op|','
name|'meta_item_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate a meta xml element from a dict."""'
newline|'\n'
op|'('
name|'key'
op|','
name|'value'
op|')'
op|'='
name|'meta_item_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'meta_elem'
op|'.'
name|'set'
op|'('
string|"'key'"
op|','
name|'str'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
name|'meta_elem'
op|'.'
name|'text'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'metadata_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'metadata'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'metadata'"
op|','
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'NSMAP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'populate_metadata'
op|'('
name|'metadata'
op|','
name|'metadata_dict'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_to_xml'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'metadata_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'metadata'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'metadata'"
op|','
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'NSMAP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'populate_metadata'
op|'('
name|'metadata'
op|','
name|'metadata_dict'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_to_xml'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_all
dedent|''
name|'def'
name|'update_all'
op|'('
name|'self'
op|','
name|'metadata_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'metadata'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'metadata'"
op|','
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'NSMAP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'populate_metadata'
op|'('
name|'metadata'
op|','
name|'metadata_dict'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_to_xml'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'meta_item_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'meta'"
op|','
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'NSMAP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_populate_meta_item'
op|'('
name|'meta'
op|','
name|'meta_item_dict'
op|'['
string|"'meta'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_to_xml'
op|'('
name|'meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'meta_item_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'meta'"
op|','
name|'nsmap'
op|'='
name|'self'
op|'.'
name|'NSMAP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_populate_meta_item'
op|'('
name|'meta'
op|','
name|'meta_item_dict'
op|'['
string|"'meta'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_to_xml'
op|'('
name|'meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|default
dedent|''
name|'def'
name|'default'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_snapshots_enabled
dedent|''
dedent|''
name|'def'
name|'check_snapshots_enabled'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'allow_instance_snapshots'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Rejecting snapshot request, snapshots currently'"
nl|'\n'
string|"' disabled'"
op|')'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_'
op|'('
string|'"Instance snapshots are not permitted at this time."'
op|')'
newline|'\n'
name|'raise'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|'('
name|'explanation'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
endmarker|''
end_unit

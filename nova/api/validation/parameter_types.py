begin_unit
comment|'# Copyright 2014 NEC Corporation.  All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nCommon parameter types for validating request Body.\n\n"""'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'unicodedata'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_printable
name|'def'
name|'_is_printable'
op|'('
name|'char'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""determine if a unicode code point is printable.\n\n    This checks if the character is either "other" (mostly control\n    codes), or a non-horizontal space. All characters that don\'t match\n    those criteria are considered printable; that is: letters;\n    combining marks; numbers; punctuation; symbols; (horizontal) space\n    separators.\n    """'
newline|'\n'
name|'category'
op|'='
name|'unicodedata'
op|'.'
name|'category'
op|'('
name|'char'
op|')'
newline|'\n'
name|'return'
op|'('
name|'not'
name|'category'
op|'.'
name|'startswith'
op|'('
string|'"C"'
op|')'
name|'and'
nl|'\n'
op|'('
name|'not'
name|'category'
op|'.'
name|'startswith'
op|'('
string|'"Z"'
op|')'
name|'or'
name|'category'
op|'=='
string|'"Zs"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_all_chars
dedent|''
name|'def'
name|'_get_all_chars'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0xFFFF'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'unichr'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
comment|'# build a regex that matches all printable characters. This allows'
nl|'\n'
comment|'# spaces in the middle of the name. Also note that the regexp below'
nl|'\n'
comment|'# deliberately allows the empty string. This is so only the constraint'
nl|'\n'
comment|'# which enforces a minimum length for the name is triggered when an'
nl|'\n'
comment|'# empty string is tested. Otherwise it is not deterministic which'
nl|'\n'
comment|'# constraint fails and this causes issues for some unittests when'
nl|'\n'
comment|'# PYTHONHASHSEED is set randomly.'
nl|'\n'
DECL|variable|_printable
dedent|''
dedent|''
name|'_printable'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'c'
name|'for'
name|'c'
name|'in'
name|'_get_all_chars'
op|'('
op|')'
name|'if'
name|'_is_printable'
op|'('
name|'c'
op|')'
op|')'
newline|'\n'
DECL|variable|_printable_ws
name|'_printable_ws'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'c'
name|'for'
name|'c'
name|'in'
name|'_get_all_chars'
op|'('
op|')'
nl|'\n'
name|'if'
name|'unicodedata'
op|'.'
name|'category'
op|'('
name|'c'
op|')'
op|'=='
string|'"Zs"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|valid_name_regex
name|'valid_name_regex'
op|'='
string|"'^(?![%s])[%s]*(?<![%s])$'"
op|'%'
op|'('
nl|'\n'
name|'re'
op|'.'
name|'escape'
op|'('
name|'_printable_ws'
op|')'
op|','
name|'re'
op|'.'
name|'escape'
op|'('
name|'_printable'
op|')'
op|','
name|'re'
op|'.'
name|'escape'
op|'('
name|'_printable_ws'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|boolean
name|'boolean'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'boolean'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'enum'"
op|':'
op|'['
name|'True'
op|','
string|"'True'"
op|','
string|"'TRUE'"
op|','
string|"'true'"
op|','
string|"'1'"
op|','
string|"'ON'"
op|','
string|"'On'"
op|','
string|"'on'"
op|','
nl|'\n'
string|"'YES'"
op|','
string|"'Yes'"
op|','
string|"'yes'"
op|','
nl|'\n'
name|'False'
op|','
string|"'False'"
op|','
string|"'FALSE'"
op|','
string|"'false'"
op|','
string|"'0'"
op|','
string|"'OFF'"
op|','
string|"'Off'"
op|','
string|"'off'"
op|','
nl|'\n'
string|"'NO'"
op|','
string|"'No'"
op|','
string|"'no'"
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|positive_integer
name|'positive_integer'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'1'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|non_negative_integer
name|'non_negative_integer'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
string|"'minimum'"
op|':'
number|'0'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|hostname
name|'hostname'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'minLength'"
op|':'
number|'1'
op|','
string|"'maxLength'"
op|':'
number|'255'
op|','
nl|'\n'
comment|'# NOTE: \'host\' is defined in "services" table, and that'
nl|'\n'
comment|'# means a hostname. The hostname grammar in RFC952 does'
nl|'\n'
comment|'# not allow for underscores in hostnames. However, this'
nl|'\n'
comment|'# schema allows them, because it sometimes occurs in'
nl|'\n'
comment|'# real systems.'
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[a-zA-Z0-9-._]*$'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|hostname_or_ip_address
name|'hostname_or_ip_address'
op|'='
op|'{'
nl|'\n'
comment|'# NOTE: Allow to specify hostname, ipv4 and ipv6.'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'maxLength'"
op|':'
number|'255'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[a-zA-Z0-9-_.:]*$'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|name
name|'name'
op|'='
op|'{'
nl|'\n'
comment|"# NOTE: Nova v3 API contains some 'name' parameters such"
nl|'\n'
comment|'# as keypair, server, flavor, aggregate and so on. They are'
nl|'\n'
comment|'# stored in the DB and Nova specific parameters.'
nl|'\n'
comment|'# This definition is used for all their parameters.'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'minLength'"
op|':'
number|'1'
op|','
string|"'maxLength'"
op|':'
number|'255'
op|','
nl|'\n'
string|"'pattern'"
op|':'
name|'valid_name_regex'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|tcp_udp_port
name|'tcp_udp_port'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'integer'"
op|','
string|"'string'"
op|']'
op|','
string|"'pattern'"
op|':'
string|"'^[0-9]*$'"
op|','
nl|'\n'
string|"'minimum'"
op|':'
number|'0'
op|','
string|"'maximum'"
op|':'
number|'65535'
op|','
nl|'\n'
string|"'minLength'"
op|':'
number|'1'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|project_id
name|'project_id'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'minLength'"
op|':'
number|'1'
op|','
string|"'maxLength'"
op|':'
number|'255'
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^[a-zA-Z0-9-]*$'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|server_id
name|'server_id'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'format'"
op|':'
string|"'uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|image_id
name|'image_id'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'format'"
op|':'
string|"'uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|volume_id
name|'volume_id'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'format'"
op|':'
string|"'uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|network_id
name|'network_id'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'format'"
op|':'
string|"'uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|network_port_id
name|'network_port_id'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'format'"
op|':'
string|"'uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|admin_password
name|'admin_password'
op|'='
op|'{'
nl|'\n'
comment|'# NOTE: admin_password is the admin password of a server'
nl|'\n'
comment|"# instance, and it is not stored into nova's data base."
nl|'\n'
comment|'# In addition, users set sometimes long/strange string'
nl|'\n'
comment|'# as password. It is unnecessary to limit string length'
nl|'\n'
comment|'# and string pattern.'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|image_ref
name|'image_ref'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|flavor_ref
name|'flavor_ref'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
op|'['
string|"'string'"
op|','
string|"'integer'"
op|']'
op|','
string|"'minLength'"
op|':'
number|'1'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|metadata
name|'metadata'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'object'"
op|','
nl|'\n'
string|"'patternProperties'"
op|':'
op|'{'
nl|'\n'
string|"'^[a-zA-Z0-9-_:. ]{1,255}$'"
op|':'
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
string|"'maxLength'"
op|':'
number|'255'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'additionalProperties'"
op|':'
name|'False'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|metadata_with_null
name|'metadata_with_null'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'metadata_with_null'
op|'['
string|"'patternProperties'"
op|']'
op|'['
string|"'^[a-zA-Z0-9-_:. ]{1,255}$'"
op|']'
op|'['
string|"'type'"
op|']'
op|'='
op|'['
string|"'string'"
op|','
string|"'null'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|mac_address
name|'mac_address'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
nl|'\n'
string|"'pattern'"
op|':'
string|"'^([0-9a-fA-F]{2})(:[0-9a-fA-F]{2}){5}$'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|ip_address
name|'ip_address'
op|'='
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'string'"
op|','
nl|'\n'
string|"'oneOf'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'format'"
op|':'
string|"'ipv4'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'format'"
op|':'
string|"'ipv6'"
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
endmarker|''
end_unit

begin_unit
name|'from'
name|'nova'
name|'import'
name|'datastore'
newline|'\n'
nl|'\n'
DECL|class|RackspaceAPIIdTranslator
name|'class'
name|'RackspaceAPIIdTranslator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Converts Rackspace API ids to and from the id format for a given\n    strategy.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'id_type'
op|','
name|'service_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a translator for ids of the given type (e.g. \'flavor\'), for the\n        given storage service backend class name (e.g. \'LocalFlavorService\').\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_store'
op|'='
name|'datastore'
op|'.'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'key_prefix'
op|'='
string|'"rsapi.idtranslator.%s.%s"'
op|'%'
op|'('
name|'id_type'
op|','
name|'service_name'
op|')'
newline|'\n'
comment|'# Forward (strategy format -> RS format) and reverse translation keys'
nl|'\n'
name|'self'
op|'.'
name|'_fwd_key'
op|'='
string|'"%s.fwd"'
op|'%'
name|'key_prefix'
newline|'\n'
name|'self'
op|'.'
name|'_rev_key'
op|'='
string|'"%s.rev"'
op|'%'
name|'key_prefix'
newline|'\n'
nl|'\n'
DECL|member|to_rs_id
dedent|''
name|'def'
name|'to_rs_id'
op|'('
name|'self'
op|','
name|'opaque_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert an id from a strategy-specific one to a Rackspace one."""'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_store'
op|'.'
name|'hget'
op|'('
name|'self'
op|'.'
name|'_fwd_key'
op|','
name|'str'
op|'('
name|'opaque_id'
op|')'
op|')'
newline|'\n'
name|'if'
name|'result'
op|':'
comment|'# we have a mapping from opaque to RS for this strategy'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Store the mapping.'
nl|'\n'
indent|'            '
name|'nextid'
op|'='
name|'self'
op|'.'
name|'_store'
op|'.'
name|'incr'
op|'('
string|'"%s.lastid"'
op|'%'
name|'self'
op|'.'
name|'_fwd_key'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_store'
op|'.'
name|'hsetnx'
op|'('
name|'self'
op|'.'
name|'_fwd_key'
op|','
name|'str'
op|'('
name|'opaque_id'
op|')'
op|','
name|'nextid'
op|')'
op|':'
newline|'\n'
comment|"# If someone else didn't beat us to it, store the reverse"
nl|'\n'
comment|'# mapping as well.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_store'
op|'.'
name|'hset'
op|'('
name|'self'
op|'.'
name|'_rev_key'
op|','
name|'nextid'
op|','
name|'str'
op|'('
name|'opaque_id'
op|')'
op|')'
newline|'\n'
name|'return'
name|'nextid'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Someone beat us to it; use their number instead, and'
nl|'\n'
comment|"# discard nextid (which is OK -- we don't require that"
nl|'\n'
comment|'# every int id be used.)'
nl|'\n'
indent|'                '
name|'return'
name|'int'
op|'('
name|'self'
op|'.'
name|'_store'
op|'.'
name|'hget'
op|'('
name|'self'
op|'.'
name|'_fwd_key'
op|','
name|'str'
op|'('
name|'opaque_id'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_rs_id
dedent|''
dedent|''
dedent|''
name|'def'
name|'from_rs_id'
op|'('
name|'self'
op|','
name|'rs_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert a Rackspace id to a strategy-specific one."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_store'
op|'.'
name|'hget'
op|'('
name|'self'
op|'.'
name|'_rev_key'
op|','
name|'rs_id'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

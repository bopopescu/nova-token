begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'wsgi'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Controller
name|'class'
name|'Controller'
op|'('
name|'wsgi'
op|'.'
name|'Controller'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""TODO(eday): Base controller for all rackspace controllers. What is this\n    for? Is this just Rackspace specific? """'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|render
name|'def'
name|'render'
op|'('
name|'cls'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
name|'cls'
op|'.'
name|'entity_name'
op|':'
name|'cls'
op|'.'
name|'render'
op|'('
name|'instance'
op|')'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|'"TODO"'
op|':'
string|'"TODO"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize the given dict to the response type requested in request.\n        Uses self._serialization_metadata if it exists, which is a dict mapping\n        MIME types to information needed to serialize to that type.\n        """'
newline|'\n'
name|'_metadata'
op|'='
name|'getattr'
op|'('
name|'type'
op|'('
name|'self'
op|')'
op|','
string|'"_serialization_metadata"'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'wsgi'
op|'.'
name|'Serializer'
op|'('
name|'request'
op|'.'
name|'environ'
op|','
name|'_metadata'
op|')'
newline|'\n'
name|'return'
name|'serializer'
op|'.'
name|'to_content_type'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

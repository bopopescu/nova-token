begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ec2_id_to_id
name|'def'
name|'ec2_id_to_id'
op|'('
name|'ec2_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert an ec2 ID (i-[base 16 number]) to an instance id (int)"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'ec2_id'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidEc2Id'
op|'('
name|'ec2_id'
op|'='
name|'ec2_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|id_to_ec2_id
dedent|''
dedent|''
name|'def'
name|'id_to_ec2_id'
op|'('
name|'instance_id'
op|','
name|'template'
op|'='
string|"'i-%08x'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert an instance ID (int) to an ec2 ID (i-[base 16 number])"""'
newline|'\n'
name|'return'
name|'template'
op|'%'
name|'instance_id'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|id_to_ec2_snap_id
dedent|''
name|'def'
name|'id_to_ec2_snap_id'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert an snapshot ID (int) to an ec2 snapshot ID\n    (snap-[base 16 number])"""'
newline|'\n'
name|'return'
name|'id_to_ec2_id'
op|'('
name|'instance_id'
op|','
string|"'snap-%08x'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|id_to_ec2_vol_id
dedent|''
name|'def'
name|'id_to_ec2_vol_id'
op|'('
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert an volume ID (int) to an ec2 volume ID (vol-[base 16 number])"""'
newline|'\n'
name|'return'
name|'id_to_ec2_id'
op|'('
name|'instance_id'
op|','
string|"'vol-%08x'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_c2u
dedent|''
name|'_c2u'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|camelcase_to_underscore
name|'def'
name|'camelcase_to_underscore'
op|'('
name|'str'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_c2u'
op|'.'
name|'sub'
op|'('
string|"r'_\\1'"
op|','
name|'str'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
string|"'_'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_try_convert
dedent|''
name|'def'
name|'_try_convert'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a non-string from a string or unicode, if possible.\n\n    ============= =====================================================\n    When value is returns\n    ============= =====================================================\n    zero-length   \'\'\n    \'None\'        None\n    \'True\'        True case insensitive\n    \'False\'       False case insensitive\n    \'0\', \'-0\'     0\n    0xN, -0xN     int from hex (postitive) (N is any number)\n    0bN, -0bN     int from binary (positive) (N is any number)\n    *             try conversion to int, float, complex, fallback value\n\n    """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'=='
string|"'None'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'lowered_value'
op|'='
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'lowered_value'
op|'=='
string|"'true'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'lowered_value'
op|'=='
string|"'false'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'valueneg'
op|'='
name|'value'
op|'['
number|'1'
op|':'
op|']'
name|'if'
name|'value'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
name|'else'
name|'value'
newline|'\n'
name|'if'
name|'valueneg'
op|'=='
string|"'0'"
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'valueneg'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'if'
name|'valueneg'
op|'['
number|'0'
op|']'
op|'=='
string|"'0'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'valueneg'
op|'['
number|'1'
op|']'
name|'in'
string|"'xX'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'value'
op|','
number|'16'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'valueneg'
op|'['
number|'1'
op|']'
name|'in'
string|"'bB'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'value'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'int'
op|'('
name|'value'
op|','
number|'8'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'float'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'complex'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dict_from_dotted_str
dedent|''
dedent|''
name|'def'
name|'dict_from_dotted_str'
op|'('
name|'items'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""parse multi dot-separated argument into dict.\n    EBS boot uses multi dot-separeted arguments like\n    BlockDeviceMapping.1.DeviceName=snap-id\n    Convert the above into\n    {\'block_device_mapping\': {\'1\': {\'device_name\': snap-id}}}\n    """'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
name|'key'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
newline|'\n'
name|'key'
op|'='
name|'camelcase_to_underscore'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): Automatically convert strings back'
nl|'\n'
comment|'#             into their respective values'
nl|'\n'
indent|'            '
name|'value'
op|'='
name|'_try_convert'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'args'
op|'.'
name|'get'
op|'('
name|'key'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'args'
op|'['
name|'key'
op|']'
op|'='
name|'d'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'parts'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'k'
op|'='
name|'camelcase_to_underscore'
op|'('
name|'k'
op|')'
newline|'\n'
name|'v'
op|'='
name|'d'
op|'.'
name|'get'
op|'('
name|'k'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'d'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
name|'d'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'d'
op|'['
name|'camelcase_to_underscore'
op|'('
name|'parts'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'args'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mappings_prepend_dev
dedent|''
name|'def'
name|'mappings_prepend_dev'
op|'('
name|'mappings'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Prepend \'/dev/\' to \'device\' entry of swap/ephemeral virtual type"""'
newline|'\n'
name|'for'
name|'m'
name|'in'
name|'mappings'
op|':'
newline|'\n'
indent|'        '
name|'virtual'
op|'='
name|'m'
op|'['
string|"'virtual'"
op|']'
newline|'\n'
name|'if'
op|'('
op|'('
name|'virtual'
op|'=='
string|"'swap'"
name|'or'
name|'virtual'
op|'.'
name|'startswith'
op|'('
string|"'ephemeral'"
op|')'
op|')'
name|'and'
nl|'\n'
op|'('
name|'not'
name|'m'
op|'['
string|"'device'"
op|']'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'['
string|"'device'"
op|']'
op|'='
string|"'/dev/'"
op|'+'
name|'m'
op|'['
string|"'device'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'mappings'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCloud Controller: Implementation of EC2 REST API calls, which are\ndispatched to other nodes via AMQP RPC. State is via distributed\ndatastore.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'ec2utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'inst_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'metadata'
name|'import'
name|'password'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'extensions'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
name|'import'
name|'validator'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'availability_zones'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cloudpipe'
name|'import'
name|'pipelib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'s3'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'security_group'
name|'import'
name|'neutron_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'block_device'
name|'as'
name|'block_device_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'flavor'
name|'as'
name|'flavor_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'security_group'
name|'as'
name|'sec_group_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'service'
name|'as'
name|'service_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'servicegroup'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'volume'
newline|'\n'
nl|'\n'
DECL|variable|ec2_opts
name|'ec2_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'ec2_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$my_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The IP address of the EC2 API server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'ec2_dmz_host'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'$my_ip'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The internal IP address of the EC2 API server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'ec2_port'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'8773'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The port of the EC2 API server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'ec2_scheme'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'http'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The protocol to use when connecting to the EC2 API '"
nl|'\n'
string|"'server (http, https)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'ec2_path'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'/services/Cloud'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'The path prefix used to call the ec2 API server'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'region_list'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'help'
op|'='
string|"'List of region=fqdn pairs separated by commas'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'ec2_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'my_ip'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'vpn_key_suffix'"
op|','
string|"'nova.cloudpipe.pipelib'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'internal_service_availability_zone'"
op|','
nl|'\n'
string|"'nova.availability_zones'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|QUOTAS
name|'QUOTAS'
op|'='
name|'quota'
op|'.'
name|'QUOTAS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_ec2_id
name|'def'
name|'validate_ec2_id'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'validator'
op|'.'
name|'validate_str'
op|'('
op|')'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInstanceIDMalformed'
op|'('
name|'val'
op|'='
name|'val'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidEc2Id'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInstanceIDMalformed'
op|'('
name|'val'
op|'='
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# EC2 API can return the following values as documented in the EC2 API'
nl|'\n'
comment|'# http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/'
nl|'\n'
comment|'#    ApiReference-ItemType-InstanceStateType.html'
nl|'\n'
comment|'# pending 0 | running 16 | shutting-down 32 | terminated 48 | stopping 64 |'
nl|'\n'
comment|'# stopped 80'
nl|'\n'
DECL|variable|_STATE_DESCRIPTION_MAP
dedent|''
dedent|''
name|'_STATE_DESCRIPTION_MAP'
op|'='
op|'{'
nl|'\n'
name|'None'
op|':'
name|'inst_state'
op|'.'
name|'PENDING'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|':'
name|'inst_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
name|'inst_state'
op|'.'
name|'PENDING'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'DELETED'
op|':'
name|'inst_state'
op|'.'
name|'TERMINATED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|':'
name|'inst_state'
op|'.'
name|'TERMINATED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'STOPPED'
op|':'
name|'inst_state'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'PAUSED'
op|':'
name|'inst_state'
op|'.'
name|'PAUSE'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|':'
name|'inst_state'
op|'.'
name|'SUSPEND'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|':'
name|'inst_state'
op|'.'
name|'RESCUE'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESIZED'
op|':'
name|'inst_state'
op|'.'
name|'RESIZE'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_state_description
name|'def'
name|'_state_description'
op|'('
name|'vm_state'
op|','
name|'_shutdown_terminate'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Map the vm state to the server status string."""'
newline|'\n'
comment|'# Note(maoy): We do not provide EC2 compatibility'
nl|'\n'
comment|'# in shutdown_terminate flag behavior. So we ignore'
nl|'\n'
comment|'# it here.'
nl|'\n'
name|'name'
op|'='
name|'_STATE_DESCRIPTION_MAP'
op|'.'
name|'get'
op|'('
name|'vm_state'
op|','
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'code'"
op|':'
name|'inst_state'
op|'.'
name|'name_to_code'
op|'('
name|'name'
op|')'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parse_block_device_mapping
dedent|''
name|'def'
name|'_parse_block_device_mapping'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse BlockDeviceMappingItemType into flat hash\n    BlockDevicedMapping.<N>.DeviceName\n    BlockDevicedMapping.<N>.Ebs.SnapshotId\n    BlockDevicedMapping.<N>.Ebs.VolumeSize\n    BlockDevicedMapping.<N>.Ebs.DeleteOnTermination\n    BlockDevicedMapping.<N>.Ebs.NoDevice\n    BlockDevicedMapping.<N>.VirtualName\n    => remove .Ebs and allow volume id in SnapshotId\n    """'
newline|'\n'
name|'ebs'
op|'='
name|'bdm'
op|'.'
name|'pop'
op|'('
string|"'ebs'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'ebs'
op|':'
newline|'\n'
indent|'        '
name|'ec2_id'
op|'='
name|'ebs'
op|'.'
name|'pop'
op|'('
string|"'snapshot_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'ec2_id'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ec2_id'
op|'.'
name|'startswith'
op|'('
string|"'snap-'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
string|"'snapshot_id'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_snap_id_to_uuid'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ec2_id'
op|'.'
name|'startswith'
op|'('
string|"'vol-'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_vol_id_to_uuid'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
dedent|''
name|'ebs'
op|'.'
name|'setdefault'
op|'('
string|"'delete_on_termination'"
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'bdm'
op|'.'
name|'update'
op|'('
name|'ebs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_properties_get_mappings
dedent|''
name|'def'
name|'_properties_get_mappings'
op|'('
name|'properties'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'block_device'
op|'.'
name|'mappings_prepend_dev'
op|'('
name|'properties'
op|'.'
name|'get'
op|'('
string|"'mappings'"
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_format_block_device_mapping
dedent|''
name|'def'
name|'_format_block_device_mapping'
op|'('
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Construct BlockDeviceMappingItemType\n    {\'device_name\': \'...\', \'snapshot_id\': , ...}\n    => BlockDeviceMappingItemType\n    """'
newline|'\n'
name|'keys'
op|'='
op|'('
op|'('
string|"'deviceName'"
op|','
string|"'device_name'"
op|')'
op|','
nl|'\n'
op|'('
string|"'virtualName'"
op|','
string|"'virtual_name'"
op|')'
op|')'
newline|'\n'
name|'item'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'k'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'k'
name|'in'
name|'bdm'
op|':'
newline|'\n'
indent|'            '
name|'item'
op|'['
name|'name'
op|']'
op|'='
name|'bdm'
op|'['
name|'k'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'item'
op|'['
string|"'noDevice'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
op|'('
string|"'snapshot_id'"
name|'in'
name|'bdm'
op|')'
name|'or'
op|'('
string|"'volume_id'"
name|'in'
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ebs_keys'
op|'='
op|'('
op|'('
string|"'snapshotId'"
op|','
string|"'snapshot_id'"
op|')'
op|','
nl|'\n'
op|'('
string|"'snapshotId'"
op|','
string|"'volume_id'"
op|')'
op|','
comment|'# snapshotId is abused'
nl|'\n'
op|'('
string|"'volumeSize'"
op|','
string|"'volume_size'"
op|')'
op|','
nl|'\n'
op|'('
string|"'deleteOnTermination'"
op|','
string|"'delete_on_termination'"
op|')'
op|')'
newline|'\n'
name|'ebs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'k'
name|'in'
name|'ebs_keys'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
name|'in'
name|'bdm'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'k'
op|'=='
string|"'snapshot_id'"
op|':'
newline|'\n'
indent|'                    '
name|'ebs'
op|'['
name|'name'
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_snap_id'
op|'('
name|'bdm'
op|'['
name|'k'
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'k'
op|'=='
string|"'volume_id'"
op|':'
newline|'\n'
indent|'                    '
name|'ebs'
op|'['
name|'name'
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
name|'bdm'
op|'['
name|'k'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'ebs'
op|'['
name|'name'
op|']'
op|'='
name|'bdm'
op|'['
name|'k'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'assert'
string|"'snapshotId'"
name|'in'
name|'ebs'
newline|'\n'
name|'item'
op|'['
string|"'ebs'"
op|']'
op|'='
name|'ebs'
newline|'\n'
dedent|''
name|'return'
name|'item'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_format_mappings
dedent|''
name|'def'
name|'_format_mappings'
op|'('
name|'properties'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Format multiple BlockDeviceMappingItemType."""'
newline|'\n'
name|'mappings'
op|'='
op|'['
op|'{'
string|"'virtualName'"
op|':'
name|'m'
op|'['
string|"'virtual'"
op|']'
op|','
string|"'deviceName'"
op|':'
name|'m'
op|'['
string|"'device'"
op|']'
op|'}'
nl|'\n'
name|'for'
name|'m'
name|'in'
name|'_properties_get_mappings'
op|'('
name|'properties'
op|')'
nl|'\n'
name|'if'
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
name|'m'
op|'['
string|"'virtual'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
name|'_format_block_device_mapping'
op|'('
name|'bdm'
op|')'
name|'for'
name|'bdm'
name|'in'
nl|'\n'
name|'properties'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): overwrite mappings with block_device_mapping'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'block_device_mapping'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'mappings'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bdm'
op|'['
string|"'deviceName'"
op|']'
op|'=='
name|'mappings'
op|'['
name|'i'
op|']'
op|'['
string|"'deviceName'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'mappings'
op|'['
name|'i'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'mappings'
op|'.'
name|'append'
op|'('
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): trim ebs.no_device == true. Is this necessary?'
nl|'\n'
dedent|''
name|'mappings'
op|'='
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'mappings'
name|'if'
name|'not'
op|'('
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'noDevice'"
op|','
name|'False'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'mappings'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'['
string|"'blockDeviceMapping'"
op|']'
op|'='
name|'mappings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CloudController
dedent|''
dedent|''
name|'class'
name|'CloudController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""CloudController provides the critical dispatch between\n inbound API calls through the endpoint and messages\n sent to the other nodes.\n"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'image_service'
op|'='
name|'s3'
op|'.'
name|'S3ImageService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'='
name|'volume'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'='
name|'get_cloud_security_group_api'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
name|'network_api'
op|'='
name|'self'
op|'.'
name|'network_api'
op|','
nl|'\n'
name|'volume_api'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|','
nl|'\n'
name|'security_group_api'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'='
name|'compute_api'
op|'.'
name|'KeypairAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'servicegroup_api'
op|'='
name|'servicegroup'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'CloudController'"
newline|'\n'
nl|'\n'
DECL|member|_enforce_valid_instance_ids
dedent|''
name|'def'
name|'_enforce_valid_instance_ids'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ids'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(mikal): Amazon's implementation of the EC2 API requires that"
nl|'\n'
comment|'# _all_ instance ids passed in be valid.'
nl|'\n'
indent|'        '
name|'instances'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'ec2_id'
name|'in'
name|'instance_ids'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instances'
op|'['
name|'ec2_id'
op|']'
op|'='
name|'instance'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|_get_image_state
dedent|''
name|'def'
name|'_get_image_state'
op|'('
name|'self'
op|','
name|'image'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): fallback status if image_state isn't set"
nl|'\n'
indent|'        '
name|'state'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'status'"
op|')'
newline|'\n'
name|'if'
name|'state'
op|'=='
string|"'active'"
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'='
string|"'available'"
newline|'\n'
dedent|''
name|'return'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'image_state'"
op|','
name|'state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_availability_zones
dedent|''
name|'def'
name|'describe_availability_zones'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
string|"'zone_name'"
name|'in'
name|'kwargs'
name|'and'
nl|'\n'
string|"'verbose'"
name|'in'
name|'kwargs'
op|'['
string|"'zone_name'"
op|']'
name|'and'
nl|'\n'
name|'context'
op|'.'
name|'is_admin'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_describe_availability_zones_verbose'
op|'('
name|'context'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_describe_availability_zones'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_describe_availability_zones
dedent|''
dedent|''
name|'def'
name|'_describe_availability_zones'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'available_zones'
op|','
name|'not_available_zones'
op|'='
name|'availability_zones'
op|'.'
name|'get_availability_zones'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'zone'
name|'in'
name|'available_zones'
op|':'
newline|'\n'
comment|'# Hide internal_service_availability_zone'
nl|'\n'
indent|'            '
name|'if'
name|'zone'
op|'=='
name|'CONF'
op|'.'
name|'internal_service_availability_zone'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'zoneName'"
op|':'
name|'zone'
op|','
nl|'\n'
string|"'zoneState'"
op|':'
string|'"available"'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'zone'
name|'in'
name|'not_available_zones'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'zoneName'"
op|':'
name|'zone'
op|','
nl|'\n'
string|"'zoneState'"
op|':'
string|'"not available"'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'availabilityZoneInfo'"
op|':'
name|'result'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_describe_availability_zones_verbose
dedent|''
name|'def'
name|'_describe_availability_zones_verbose'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'available_zones'
op|','
name|'not_available_zones'
op|'='
name|'availability_zones'
op|'.'
name|'get_availability_zones'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
comment|'# Available services'
nl|'\n'
name|'enabled_services'
op|'='
name|'service_obj'
op|'.'
name|'ServiceList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'disabled'
op|'='
name|'False'
op|','
name|'set_zones'
op|'='
name|'True'
op|')'
newline|'\n'
name|'zone_hosts'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'host_services'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'enabled_services'
op|':'
newline|'\n'
indent|'            '
name|'zone_hosts'
op|'.'
name|'setdefault'
op|'('
name|'service'
op|'.'
name|'availability_zone'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'if'
name|'service'
op|'.'
name|'host'
name|'not'
name|'in'
name|'zone_hosts'
op|'['
name|'service'
op|'.'
name|'availability_zone'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'zone_hosts'
op|'['
name|'service'
op|'.'
name|'availability_zone'
op|']'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'service'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'host_services'
op|'.'
name|'setdefault'
op|'('
name|'service'
op|'.'
name|'availability_zone'
op|'+'
nl|'\n'
name|'service'
op|'.'
name|'host'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'host_services'
op|'['
name|'service'
op|'.'
name|'availability_zone'
op|'+'
name|'service'
op|'.'
name|'host'
op|']'
op|'.'
name|'append'
op|'('
name|'service'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'zone'
name|'in'
name|'available_zones'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'zoneName'"
op|':'
name|'zone'
op|','
nl|'\n'
string|"'zoneState'"
op|':'
string|'"available"'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'zone_hosts'
op|'['
name|'zone'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'zoneName'"
op|':'
string|"'|- %s'"
op|'%'
name|'host'
op|','
nl|'\n'
string|"'zoneState'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'service'
name|'in'
name|'host_services'
op|'['
name|'zone'
op|'+'
name|'host'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'alive'
op|'='
name|'self'
op|'.'
name|'servicegroup_api'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
newline|'\n'
name|'art'
op|'='
op|'('
name|'alive'
name|'and'
string|'":-)"'
op|')'
name|'or'
string|'"XXX"'
newline|'\n'
name|'active'
op|'='
string|"'enabled'"
newline|'\n'
name|'if'
name|'service'
op|'.'
name|'disabled'
op|':'
newline|'\n'
indent|'                        '
name|'active'
op|'='
string|"'disabled'"
newline|'\n'
dedent|''
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'zoneName'"
op|':'
string|"'| |- %s'"
op|'%'
name|'service'
op|'.'
name|'binary'
op|','
nl|'\n'
string|"'zoneState'"
op|':'
op|'('
string|"'%s %s %s'"
nl|'\n'
op|'%'
op|'('
name|'active'
op|','
name|'art'
op|','
nl|'\n'
name|'service'
op|'.'
name|'updated_at'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'zone'
name|'in'
name|'not_available_zones'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
string|"'zoneName'"
op|':'
name|'zone'
op|','
nl|'\n'
string|"'zoneState'"
op|':'
string|'"not available"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'availabilityZoneInfo'"
op|':'
name|'result'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_regions
dedent|''
name|'def'
name|'describe_regions'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'region_name'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'region_list'
op|':'
newline|'\n'
indent|'            '
name|'regions'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'region'
name|'in'
name|'CONF'
op|'.'
name|'region_list'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'_sep'
op|','
name|'host'
op|'='
name|'region'
op|'.'
name|'partition'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'endpoint'
op|'='
string|"'%s://%s:%s%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'ec2_scheme'
op|','
nl|'\n'
name|'host'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'ec2_port'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'ec2_path'
op|')'
newline|'\n'
name|'regions'
op|'.'
name|'append'
op|'('
op|'{'
string|"'regionName'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'regionEndpoint'"
op|':'
name|'endpoint'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'regions'
op|'='
op|'['
op|'{'
string|"'regionName'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'regionEndpoint'"
op|':'
string|"'%s://%s:%s%s'"
op|'%'
op|'('
name|'CONF'
op|'.'
name|'ec2_scheme'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'ec2_host'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'ec2_port'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'ec2_path'
op|')'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'regionInfo'"
op|':'
name|'regions'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_snapshots
dedent|''
name|'def'
name|'describe_snapshots'
op|'('
name|'self'
op|','
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'snapshot_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'owner'
op|'='
name|'None'
op|','
nl|'\n'
name|'restorable_by'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'snapshot_id'
op|':'
newline|'\n'
indent|'            '
name|'snapshots'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'snapshot_id'
op|':'
newline|'\n'
indent|'                '
name|'internal_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_snap_id_to_uuid'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'snapshot_id'
op|'='
name|'internal_id'
op|')'
newline|'\n'
name|'snapshots'
op|'.'
name|'append'
op|'('
name|'snapshot'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'snapshots'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_all_snapshots'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'formatted_snapshots'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'snapshots'
op|':'
newline|'\n'
indent|'            '
name|'formatted'
op|'='
name|'self'
op|'.'
name|'_format_snapshot'
op|'('
name|'context'
op|','
name|'s'
op|')'
newline|'\n'
name|'if'
name|'formatted'
op|':'
newline|'\n'
indent|'                '
name|'formatted_snapshots'
op|'.'
name|'append'
op|'('
name|'formatted'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'snapshotSet'"
op|':'
name|'formatted_snapshots'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_snapshot
dedent|''
name|'def'
name|'_format_snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'snapshot'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mikal): this is just a set of strings in cinder. If they'
nl|'\n'
comment|'# implement an enum, then we should move this code to use it. The'
nl|'\n'
comment|'# valid ec2 statuses are "pending", "completed", and "error".'
nl|'\n'
indent|'        '
name|'status_map'
op|'='
op|'{'
string|"'new'"
op|':'
string|"'pending'"
op|','
nl|'\n'
string|"'creating'"
op|':'
string|"'pending'"
op|','
nl|'\n'
string|"'available'"
op|':'
string|"'completed'"
op|','
nl|'\n'
string|"'active'"
op|':'
string|"'completed'"
op|','
nl|'\n'
string|"'deleting'"
op|':'
string|"'pending'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'error'"
op|':'
string|"'error'"
op|'}'
newline|'\n'
nl|'\n'
name|'mapped_status'
op|'='
name|'status_map'
op|'.'
name|'get'
op|'('
name|'snapshot'
op|'['
string|"'status'"
op|']'
op|','
name|'snapshot'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'mapped_status'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'s'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'s'
op|'['
string|"'snapshotId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_snap_id'
op|'('
name|'snapshot'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'s'
op|'['
string|"'volumeId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
name|'snapshot'
op|'['
string|"'volume_id'"
op|']'
op|')'
newline|'\n'
name|'s'
op|'['
string|"'status'"
op|']'
op|'='
name|'mapped_status'
newline|'\n'
name|'s'
op|'['
string|"'startTime'"
op|']'
op|'='
name|'snapshot'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
name|'s'
op|'['
string|"'progress'"
op|']'
op|'='
name|'snapshot'
op|'['
string|"'progress'"
op|']'
newline|'\n'
name|'s'
op|'['
string|"'ownerId'"
op|']'
op|'='
name|'snapshot'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'s'
op|'['
string|"'volumeSize'"
op|']'
op|'='
name|'snapshot'
op|'['
string|"'volume_size'"
op|']'
newline|'\n'
name|'s'
op|'['
string|"'description'"
op|']'
op|'='
name|'snapshot'
op|'['
string|"'display_description'"
op|']'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|create_snapshot
dedent|''
name|'def'
name|'create_snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'validate_ec2_id'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create snapshot of volume %s"'
op|')'
op|','
name|'volume_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'volume_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_vol_id_to_uuid'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'args'
op|'='
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'description'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'force'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create_snapshot_force'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create_snapshot'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'db'
op|'.'
name|'ec2_snapshot_create'
op|'('
name|'context'
op|','
name|'snapshot'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_format_snapshot'
op|'('
name|'context'
op|','
name|'snapshot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_snapshot
dedent|''
name|'def'
name|'delete_snapshot'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'snapshot_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'snapshot_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_snap_id_to_uuid'
op|'('
name|'snapshot_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete_snapshot'
op|'('
name|'context'
op|','
name|'snapshot_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|describe_key_pairs
dedent|''
name|'def'
name|'describe_key_pairs'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key_pairs'
op|'='
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'get_key_pairs'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'if'
name|'key_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'key_pairs'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'key_pairs'
name|'if'
name|'x'
op|'['
string|"'name'"
op|']'
name|'in'
name|'key_name'
op|']'
newline|'\n'
nl|'\n'
comment|'#If looking for non existent key pair'
nl|'\n'
dedent|''
name|'if'
name|'key_name'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'key_pairs'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Could not find key pair(s): %s'"
op|')'
op|'%'
string|"','"
op|'.'
name|'join'
op|'('
name|'key_name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'KeypairNotFound'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key_pair'
name|'in'
name|'key_pairs'
op|':'
newline|'\n'
comment|'# filter out the vpn keys'
nl|'\n'
indent|'            '
name|'suffix'
op|'='
name|'CONF'
op|'.'
name|'vpn_key_suffix'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
name|'or'
name|'not'
name|'key_pair'
op|'['
string|"'name'"
op|']'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'keyName'"
op|':'
name|'key_pair'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'keyFingerprint'"
op|':'
name|'key_pair'
op|'['
string|"'fingerprint'"
op|']'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'keySet'"
op|':'
name|'result'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|create_key_pair
dedent|''
name|'def'
name|'create_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create key pair %s"'
op|')'
op|','
name|'key_name'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'keypair'
op|','
name|'private_key'
op|'='
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'create_key_pair'
op|'('
nl|'\n'
name|'context'
op|','
name|'context'
op|'.'
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'keyName'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'keyFingerprint'"
op|':'
name|'keypair'
op|'['
string|"'fingerprint'"
op|']'
op|','
nl|'\n'
string|"'keyMaterial'"
op|':'
name|'private_key'
op|'}'
newline|'\n'
comment|'# TODO(vish): when context is no longer an object, pass it here'
nl|'\n'
nl|'\n'
DECL|member|import_key_pair
dedent|''
name|'def'
name|'import_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|','
name|'public_key_material'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Import key %s"'
op|')'
op|','
name|'key_name'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'public_key'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'public_key_material'
op|')'
newline|'\n'
nl|'\n'
name|'keypair'
op|'='
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'import_key_pair'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'key_name'
op|','
nl|'\n'
name|'public_key'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'keyName'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'keyFingerprint'"
op|':'
name|'keypair'
op|'['
string|"'fingerprint'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|delete_key_pair
dedent|''
name|'def'
name|'delete_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Delete key pair %s"'
op|')'
op|','
name|'key_name'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'delete_key_pair'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'key_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|"# aws returns true even if the key doesn't exist"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|describe_security_groups
dedent|''
name|'def'
name|'describe_security_groups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|'='
name|'None'
op|','
name|'group_id'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'search_opts'
op|'='
name|'ec2utils'
op|'.'
name|'search_opts_from_filters'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'filter'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'raw_groups'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'list'
op|'('
name|'context'
op|','
nl|'\n'
name|'group_name'
op|','
nl|'\n'
name|'group_id'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'search_opts'
op|'='
name|'search_opts'
op|')'
newline|'\n'
nl|'\n'
name|'groups'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
name|'g'
op|')'
name|'for'
name|'g'
name|'in'
name|'raw_groups'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'securityGroupInfo'"
op|':'
nl|'\n'
name|'list'
op|'('
name|'sorted'
op|'('
name|'groups'
op|','
nl|'\n'
name|'key'
op|'='
name|'lambda'
name|'k'
op|':'
op|'('
name|'k'
op|'['
string|"'ownerId'"
op|']'
op|','
name|'k'
op|'['
string|"'groupName'"
op|']'
op|')'
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_security_group
dedent|''
name|'def'
name|'_format_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'g'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'g'
op|'['
string|"'groupDescription'"
op|']'
op|'='
name|'group'
op|'['
string|"'description'"
op|']'
newline|'\n'
name|'g'
op|'['
string|"'groupName'"
op|']'
op|'='
name|'group'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'g'
op|'['
string|"'ownerId'"
op|']'
op|'='
name|'group'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'g'
op|'['
string|"'ipPermissions'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'group'
op|'['
string|"'rules'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'r'
op|'['
string|"'groups'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'r'
op|'['
string|"'ipRanges'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'rule'
op|'['
string|"'group_id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'.'
name|'get'
op|'('
string|"'grantee_group'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'source_group'
op|'='
name|'rule'
op|'['
string|"'grantee_group'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'groups'"
op|']'
op|'+='
op|'['
op|'{'
string|"'groupName'"
op|':'
name|'source_group'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'userId'"
op|':'
name|'source_group'
op|'['
string|"'project_id'"
op|']'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# rule is not always joined with grantee_group'
nl|'\n'
comment|'# for example when using neutron driver.'
nl|'\n'
indent|'                    '
name|'source_group'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'context'
op|','
name|'id'
op|'='
name|'rule'
op|'['
string|"'group_id'"
op|']'
op|')'
newline|'\n'
name|'r'
op|'['
string|"'groups'"
op|']'
op|'+='
op|'['
op|'{'
string|"'groupName'"
op|':'
name|'source_group'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
nl|'\n'
string|"'userId'"
op|':'
name|'source_group'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|')'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'rule'
op|'['
string|"'protocol'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'r'
op|'['
string|"'ipProtocol'"
op|']'
op|'='
name|'rule'
op|'['
string|"'protocol'"
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'r'
op|'['
string|"'fromPort'"
op|']'
op|'='
name|'rule'
op|'['
string|"'from_port'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'toPort'"
op|']'
op|'='
name|'rule'
op|'['
string|"'to_port'"
op|']'
newline|'\n'
name|'g'
op|'['
string|"'ipPermissions'"
op|']'
op|'+='
op|'['
name|'dict'
op|'('
name|'r'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'protocol'
op|','
name|'min_port'
op|','
name|'max_port'
name|'in'
op|'('
op|'('
string|"'icmp'"
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|"'tcp'"
op|','
number|'1'
op|','
number|'65535'
op|')'
op|','
nl|'\n'
op|'('
string|"'udp'"
op|','
number|'1'
op|','
number|'65535'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'r'
op|'['
string|"'ipProtocol'"
op|']'
op|'='
name|'protocol'
newline|'\n'
name|'r'
op|'['
string|"'fromPort'"
op|']'
op|'='
name|'min_port'
newline|'\n'
name|'r'
op|'['
string|"'toPort'"
op|']'
op|'='
name|'max_port'
newline|'\n'
name|'g'
op|'['
string|"'ipPermissions'"
op|']'
op|'+='
op|'['
name|'dict'
op|'('
name|'r'
op|')'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'['
string|"'ipProtocol'"
op|']'
op|'='
name|'rule'
op|'['
string|"'protocol'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'fromPort'"
op|']'
op|'='
name|'rule'
op|'['
string|"'from_port'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'toPort'"
op|']'
op|'='
name|'rule'
op|'['
string|"'to_port'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'ipRanges'"
op|']'
op|'+='
op|'['
op|'{'
string|"'cidrIp'"
op|':'
name|'rule'
op|'['
string|"'cidr'"
op|']'
op|'}'
op|']'
newline|'\n'
name|'g'
op|'['
string|"'ipPermissions'"
op|']'
op|'+='
op|'['
name|'r'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'g'
newline|'\n'
nl|'\n'
DECL|member|_rule_args_to_dict
dedent|''
name|'def'
name|'_rule_args_to_dict'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
string|"'groups'"
name|'not'
name|'in'
name|'kwargs'
name|'and'
string|"'ip_ranges'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'rule'
op|'='
name|'self'
op|'.'
name|'_rule_dict_last_step'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'rules'
op|'.'
name|'append'
op|'('
name|'rule'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'rules'
newline|'\n'
dedent|''
name|'if'
string|"'ip_ranges'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'rules'
op|'='
name|'self'
op|'.'
name|'_cidr_args_split'
op|'('
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'rules'
op|'='
op|'['
name|'kwargs'
op|']'
newline|'\n'
dedent|''
name|'finalset'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'groups'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'groups_values'
op|'='
name|'self'
op|'.'
name|'_groups_args_split'
op|'('
name|'rule'
op|')'
newline|'\n'
name|'for'
name|'groups_value'
name|'in'
name|'groups_values'
op|':'
newline|'\n'
indent|'                    '
name|'final'
op|'='
name|'self'
op|'.'
name|'_rule_dict_last_step'
op|'('
name|'context'
op|','
op|'**'
name|'groups_value'
op|')'
newline|'\n'
name|'finalset'
op|'.'
name|'append'
op|'('
name|'final'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'final'
op|'='
name|'self'
op|'.'
name|'_rule_dict_last_step'
op|'('
name|'context'
op|','
op|'**'
name|'rule'
op|')'
newline|'\n'
name|'finalset'
op|'.'
name|'append'
op|'('
name|'final'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'finalset'
newline|'\n'
nl|'\n'
DECL|member|_cidr_args_split
dedent|''
name|'def'
name|'_cidr_args_split'
op|'('
name|'self'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cidr_args_split'
op|'='
op|'['
op|']'
newline|'\n'
name|'cidrs'
op|'='
name|'kwargs'
op|'['
string|"'ip_ranges'"
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'cidr'
name|'in'
name|'cidrs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mykwargs'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'del'
name|'mykwargs'
op|'['
string|"'ip_ranges'"
op|']'
newline|'\n'
name|'mykwargs'
op|'['
string|"'cidr_ip'"
op|']'
op|'='
name|'cidr'
op|'['
string|"'cidr_ip'"
op|']'
newline|'\n'
name|'cidr_args_split'
op|'.'
name|'append'
op|'('
name|'mykwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cidr_args_split'
newline|'\n'
nl|'\n'
DECL|member|_groups_args_split
dedent|''
name|'def'
name|'_groups_args_split'
op|'('
name|'self'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'groups_args_split'
op|'='
op|'['
op|']'
newline|'\n'
name|'groups'
op|'='
name|'kwargs'
op|'['
string|"'groups'"
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'group'
name|'in'
name|'groups'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mykwargs'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'del'
name|'mykwargs'
op|'['
string|"'groups'"
op|']'
newline|'\n'
name|'if'
string|"'group_name'"
name|'in'
name|'group'
op|':'
newline|'\n'
indent|'                '
name|'mykwargs'
op|'['
string|"'source_security_group_name'"
op|']'
op|'='
name|'group'
op|'['
string|"'group_name'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'user_id'"
name|'in'
name|'group'
op|':'
newline|'\n'
indent|'                '
name|'mykwargs'
op|'['
string|"'source_security_group_owner_id'"
op|']'
op|'='
name|'group'
op|'['
string|"'user_id'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'group_id'"
name|'in'
name|'group'
op|':'
newline|'\n'
indent|'                '
name|'mykwargs'
op|'['
string|"'source_security_group_id'"
op|']'
op|'='
name|'group'
op|'['
string|"'group_id'"
op|']'
newline|'\n'
dedent|''
name|'groups_args_split'
op|'.'
name|'append'
op|'('
name|'mykwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'groups_args_split'
newline|'\n'
nl|'\n'
DECL|member|_rule_dict_last_step
dedent|''
name|'def'
name|'_rule_dict_last_step'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'to_port'
op|'='
name|'None'
op|','
name|'from_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'ip_protocol'
op|'='
name|'None'
op|','
name|'cidr_ip'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source_security_group_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'source_security_group_owner_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'source_security_group_name'
op|':'
newline|'\n'
indent|'            '
name|'source_project_id'
op|'='
name|'self'
op|'.'
name|'_get_source_project_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'source_security_group_owner_id'
op|')'
newline|'\n'
nl|'\n'
name|'source_security_group'
op|'='
name|'sec_group_obj'
op|'.'
name|'SecurityGroup'
op|'.'
name|'get_by_name'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'source_project_id'
op|','
nl|'\n'
name|'source_security_group_name'
op|')'
newline|'\n'
name|'notfound'
op|'='
name|'exception'
op|'.'
name|'SecurityGroupNotFound'
newline|'\n'
name|'if'
name|'not'
name|'source_security_group'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'notfound'
op|'('
name|'security_group_id'
op|'='
name|'source_security_group_name'
op|')'
newline|'\n'
dedent|''
name|'group_id'
op|'='
name|'source_security_group'
op|'.'
name|'id'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'new_group_ingress_rule'
op|'('
nl|'\n'
name|'group_id'
op|','
name|'ip_protocol'
op|','
name|'from_port'
op|','
name|'to_port'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'cidr'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'parse_cidr'
op|'('
name|'cidr_ip'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'new_cidr_ingress_rule'
op|'('
nl|'\n'
name|'cidr'
op|','
name|'ip_protocol'
op|','
name|'from_port'
op|','
name|'to_port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_group_identifier
dedent|''
dedent|''
name|'def'
name|'_validate_group_identifier'
op|'('
name|'self'
op|','
name|'group_name'
op|','
name|'group_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'group_name'
name|'and'
name|'not'
name|'group_id'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
name|'_'
op|'('
string|'"need group_name or group_id"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_rulevalues
dedent|''
dedent|''
name|'def'
name|'_validate_rulevalues'
op|'('
name|'self'
op|','
name|'rulesvalues'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'rulesvalues'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
name|'_'
op|'('
string|'"can\'t build a valid rule"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_security_group_protocol
dedent|''
dedent|''
name|'def'
name|'_validate_security_group_protocol'
op|'('
name|'self'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'validprotocols'
op|'='
op|'['
string|"'tcp'"
op|','
string|"'udp'"
op|','
string|"'icmp'"
op|','
string|"'6'"
op|','
string|"'17'"
op|','
string|"'1'"
op|']'
newline|'\n'
name|'if'
string|"'ip_protocol'"
name|'in'
name|'values'
name|'and'
name|'values'
op|'['
string|"'ip_protocol'"
op|']'
name|'not'
name|'in'
name|'validprotocols'
op|':'
newline|'\n'
indent|'            '
name|'protocol'
op|'='
name|'values'
op|'['
string|"'ip_protocol'"
op|']'
newline|'\n'
name|'err'
op|'='
name|'_'
op|'('
string|'"Invalid IP protocol %(protocol)s"'
op|')'
op|'%'
op|'{'
string|"'protocol'"
op|':'
name|'protocol'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
DECL|member|revoke_security_group_ingress
dedent|''
dedent|''
name|'def'
name|'revoke_security_group_ingress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'group_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_validate_group_identifier'
op|'('
name|'group_name'
op|','
name|'group_id'
op|')'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'group_name'
op|','
nl|'\n'
name|'group_id'
op|')'
newline|'\n'
nl|'\n'
name|'extensions'
op|'.'
name|'check_compute_policy'
op|'('
name|'context'
op|','
string|"'security_groups'"
op|','
nl|'\n'
name|'security_group'
op|','
string|"'compute_extension'"
op|')'
newline|'\n'
nl|'\n'
name|'prevalues'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ip_permissions'"
op|','
op|'['
name|'kwargs'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'rule_ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'values'
name|'in'
name|'prevalues'
op|':'
newline|'\n'
indent|'            '
name|'rulesvalues'
op|'='
name|'self'
op|'.'
name|'_rule_args_to_dict'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_validate_rulevalues'
op|'('
name|'rulesvalues'
op|')'
newline|'\n'
name|'for'
name|'values_for_rule'
name|'in'
name|'rulesvalues'
op|':'
newline|'\n'
indent|'                '
name|'values_for_rule'
op|'['
string|"'parent_group_id'"
op|']'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'rule_ids'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'rule_exists'
op|'('
nl|'\n'
name|'security_group'
op|','
name|'values_for_rule'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'rule_ids'
op|'='
op|'['
name|'id'
name|'for'
name|'id'
name|'in'
name|'rule_ids'
name|'if'
name|'id'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'rule_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'remove_rules'
op|'('
name|'context'
op|','
name|'security_group'
op|','
nl|'\n'
name|'rule_ids'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"No rule for the specified parameters."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(soren): This has only been tested with Boto as the client.'
nl|'\n'
comment|'#              Unfortunately, it seems Boto is using an old API'
nl|'\n'
comment|'#              for these operations, so support for newer API versions'
nl|'\n'
comment|'#              is sketchy.'
nl|'\n'
DECL|member|authorize_security_group_ingress
dedent|''
name|'def'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'group_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_validate_group_identifier'
op|'('
name|'group_name'
op|','
name|'group_id'
op|')'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'group_name'
op|','
nl|'\n'
name|'group_id'
op|')'
newline|'\n'
nl|'\n'
name|'extensions'
op|'.'
name|'check_compute_policy'
op|'('
name|'context'
op|','
string|"'security_groups'"
op|','
nl|'\n'
name|'security_group'
op|','
string|"'compute_extension'"
op|')'
newline|'\n'
nl|'\n'
name|'prevalues'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ip_permissions'"
op|','
op|'['
name|'kwargs'
op|']'
op|')'
newline|'\n'
name|'postvalues'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'values'
name|'in'
name|'prevalues'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_validate_security_group_protocol'
op|'('
name|'values'
op|')'
newline|'\n'
name|'rulesvalues'
op|'='
name|'self'
op|'.'
name|'_rule_args_to_dict'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_validate_rulevalues'
op|'('
name|'rulesvalues'
op|')'
newline|'\n'
name|'for'
name|'values_for_rule'
name|'in'
name|'rulesvalues'
op|':'
newline|'\n'
indent|'                '
name|'values_for_rule'
op|'['
string|"'parent_group_id'"
op|']'
op|'='
name|'security_group'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'rule_exists'
op|'('
name|'security_group'
op|','
nl|'\n'
name|'values_for_rule'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupRuleExists'
op|'('
nl|'\n'
name|'rule'
op|'='
name|'values_for_rule'
op|')'
newline|'\n'
dedent|''
name|'postvalues'
op|'.'
name|'append'
op|'('
name|'values_for_rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'postvalues'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'add_rules'
op|'('
name|'context'
op|','
name|'security_group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'security_group'
op|'['
string|"'name'"
op|']'
op|','
name|'postvalues'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'msg'
op|'='
name|'_'
op|'('
string|'"No rule for the specified parameters."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_source_project_id
dedent|''
name|'def'
name|'_get_source_project_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'source_security_group_owner_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'source_security_group_owner_id'
op|':'
newline|'\n'
comment|'# Parse user:project for source group.'
nl|'\n'
indent|'            '
name|'source_parts'
op|'='
name|'source_security_group_owner_id'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
nl|'\n'
comment|"# If no project name specified, assume it's same as user name."
nl|'\n'
comment|"# Since we're looking up by project name, the user name is not"
nl|'\n'
comment|"# used here.  It's only read for EC2 API compatibility."
nl|'\n'
name|'if'
name|'len'
op|'('
name|'source_parts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'source_project_id'
op|'='
name|'source_parts'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'source_project_id'
op|'='
name|'source_parts'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'source_project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'source_project_id'
newline|'\n'
nl|'\n'
DECL|member|create_security_group
dedent|''
name|'def'
name|'create_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|','
name|'group_description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'group_name'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'group_name'
op|'='
name|'utils'
op|'.'
name|'utf8'
op|'('
name|'group_name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'ec2_strict_validation'
op|':'
newline|'\n'
comment|'# EC2 specification gives constraints for name and description:'
nl|'\n'
comment|'# Accepts alphanumeric characters, spaces, dashes, and underscores'
nl|'\n'
indent|'            '
name|'allowed'
op|'='
string|"'^[a-zA-Z0-9_\\- ]+$'"
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'validate_property'
op|'('
name|'group_name'
op|','
string|"'name'"
op|','
nl|'\n'
name|'allowed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'validate_property'
op|'('
name|'group_description'
op|','
nl|'\n'
string|"'description'"
op|','
name|'allowed'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Amazon accepts more symbols.'
nl|'\n'
comment|'# So, allow POSIX [:print:] characters.'
nl|'\n'
indent|'            '
name|'allowed'
op|'='
string|"r'^[\\x20-\\x7E]+$'"
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'validate_property'
op|'('
name|'group_name'
op|','
string|"'name'"
op|','
nl|'\n'
name|'allowed'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group_ref'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'create_security_group'
op|'('
nl|'\n'
name|'context'
op|','
name|'group_name'
op|','
name|'group_description'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'securityGroupSet'"
op|':'
op|'['
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
nl|'\n'
name|'group_ref'
op|')'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|delete_security_group
dedent|''
name|'def'
name|'delete_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|'='
name|'None'
op|','
name|'group_id'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'group_name'
name|'and'
name|'not'
name|'group_id'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'='
name|'_'
op|'('
string|'"need group_name or group_id"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'security_group'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'group_name'
op|','
nl|'\n'
name|'group_id'
op|')'
newline|'\n'
nl|'\n'
name|'extensions'
op|'.'
name|'check_compute_policy'
op|'('
name|'context'
op|','
string|"'security_groups'"
op|','
nl|'\n'
name|'security_group'
op|','
string|"'compute_extension'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'destroy'
op|'('
name|'context'
op|','
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|get_password_data
dedent|''
name|'def'
name|'get_password_data'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# instance_id may be passed in as a list of instances'
nl|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'instance_id'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ec2_id'
op|'='
name|'instance_id'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ec2_id'
op|'='
name|'instance_id'
newline|'\n'
dedent|''
name|'validate_ec2_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'output'
op|'='
name|'password'
op|'.'
name|'extract_password'
op|'('
name|'instance'
op|')'
newline|'\n'
comment|'# NOTE(vish): this should be timestamp from the metadata fields'
nl|'\n'
comment|"#             but it isn't important enough to implement properly"
nl|'\n'
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|'"InstanceId"'
op|':'
name|'ec2_id'
op|','
nl|'\n'
string|'"Timestamp"'
op|':'
name|'now'
op|','
nl|'\n'
string|'"passwordData"'
op|':'
name|'output'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Get console output for instance %s"'
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
comment|'# instance_id may be passed in as a list of instances'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'instance_id'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ec2_id'
op|'='
name|'instance_id'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ec2_id'
op|'='
name|'instance_id'
newline|'\n'
dedent|''
name|'validate_ec2_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_console_output'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|'"InstanceId"'
op|':'
name|'ec2_id'
op|','
nl|'\n'
string|'"Timestamp"'
op|':'
name|'now'
op|','
nl|'\n'
string|'"output"'
op|':'
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'output'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_volumes
dedent|''
name|'def'
name|'describe_volumes'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'volume_id'
op|':'
newline|'\n'
indent|'            '
name|'volumes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'volume_id'
op|':'
newline|'\n'
indent|'                '
name|'validate_ec2_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'internal_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_vol_id_to_uuid'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
name|'volumes'
op|'.'
name|'append'
op|'('
name|'volume'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'volumes'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'volumes'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_volume'
op|'('
name|'context'
op|','
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
name|'volumes'
op|']'
newline|'\n'
name|'return'
op|'{'
string|"'volumeSet'"
op|':'
name|'volumes'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_volume
dedent|''
name|'def'
name|'_format_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'valid_ec2_api_volume_status_map'
op|'='
op|'{'
nl|'\n'
string|"'attaching'"
op|':'
string|"'in-use'"
op|','
nl|'\n'
string|"'detaching'"
op|':'
string|"'in-use'"
op|'}'
newline|'\n'
nl|'\n'
name|'instance_ec2_id'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'if'
name|'volume'
op|'.'
name|'get'
op|'('
string|"'instance_uuid'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'volume'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
comment|'# Make sure instance exists'
nl|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ec2_id'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'v'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'v'
op|'['
string|"'volumeId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
name|'volume'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'v'
op|'['
string|"'status'"
op|']'
op|'='
name|'valid_ec2_api_volume_status_map'
op|'.'
name|'get'
op|'('
name|'volume'
op|'['
string|"'status'"
op|']'
op|','
nl|'\n'
name|'volume'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
name|'v'
op|'['
string|"'size'"
op|']'
op|'='
name|'volume'
op|'['
string|"'size'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'availabilityZone'"
op|']'
op|'='
name|'volume'
op|'['
string|"'availability_zone'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'createTime'"
op|']'
op|'='
name|'volume'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
name|'if'
name|'volume'
op|'['
string|"'attach_status'"
op|']'
op|'=='
string|"'attached'"
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'attachmentSet'"
op|']'
op|'='
op|'['
op|'{'
string|"'attachTime'"
op|':'
name|'volume'
op|'['
string|"'attach_time'"
op|']'
op|','
nl|'\n'
string|"'deleteOnTermination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'volume'
op|'['
string|"'mountpoint'"
op|']'
op|','
nl|'\n'
string|"'instanceId'"
op|':'
name|'instance_ec2_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'attached'"
op|','
nl|'\n'
string|"'volumeId'"
op|':'
name|'v'
op|'['
string|"'volumeId'"
op|']'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'attachmentSet'"
op|']'
op|'='
op|'['
op|'{'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'volume'
op|'.'
name|'get'
op|'('
string|"'snapshot_id'"
op|')'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'snapshotId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_snap_id'
op|'('
name|'volume'
op|'['
string|"'snapshot_id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'snapshotId'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'v'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'snapshot_ec2id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'snapshot_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'snapshot_ec2id'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'snapshot_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_snap_id_to_uuid'
op|'('
name|'kwargs'
op|'['
string|"'snapshot_id'"
op|']'
op|')'
newline|'\n'
name|'snapshot'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get_snapshot'
op|'('
name|'context'
op|','
name|'snapshot_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create volume from snapshot %s"'
op|')'
op|','
name|'snapshot_ec2id'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'snapshot'
op|'='
name|'None'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Create volume of %s GB"'
op|')'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'size'"
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'create_kwargs'
op|'='
name|'dict'
op|'('
name|'snapshot'
op|'='
name|'snapshot'
op|','
nl|'\n'
name|'volume_type'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'volume_type'"
op|')'
op|','
nl|'\n'
name|'metadata'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
op|','
nl|'\n'
name|'availability_zone'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'availability_zone'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'size'"
op|')'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'description'"
op|')'
op|','
nl|'\n'
op|'**'
name|'create_kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'ec2_volume_create'
op|'('
name|'context'
op|','
name|'volume'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
comment|'# TODO(vish): Instance should be None at db layer instead of'
nl|'\n'
comment|'#             trying to lazy load, but for now we turn it into'
nl|'\n'
comment|'#             a dict to avoid an error.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_format_volume'
op|'('
name|'context'
op|','
name|'dict'
op|'('
name|'volume'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'validate_ec2_id'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'volume_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_vol_id_to_uuid'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
nl|'\n'
name|'volume_id'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'device'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'validate_ec2_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'validate_ec2_id'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'volume_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_vol_id_to_uuid'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Attach volume %(volume_id)s to instance %(instance_id)s '"
nl|'\n'
string|"'at %(device)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'device'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume_id'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'attachTime'"
op|':'
name|'volume'
op|'['
string|"'attach_time'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'volume'
op|'['
string|"'mountpoint'"
op|']'
op|','
nl|'\n'
string|"'instanceId'"
op|':'
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
name|'instance_uuid'
op|')'
op|','
nl|'\n'
string|"'requestId'"
op|':'
name|'context'
op|'.'
name|'request_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'volume'
op|'['
string|"'attach_status'"
op|']'
op|','
nl|'\n'
string|"'volumeId'"
op|':'
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
name|'volume_id'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_from_volume
dedent|''
name|'def'
name|'_get_instance_from_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'volume'
op|'.'
name|'get'
op|'('
string|"'instance_uuid'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'inst_uuid'
op|'='
name|'volume'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'return'
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'VolumeUnattached'
op|'('
name|'volume_id'
op|'='
name|'volume'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'validate_ec2_id'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'volume_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_vol_id_to_uuid'
op|'('
name|'volume_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Detach volume %s"'
op|')'
op|','
name|'volume_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_get_instance_from_volume'
op|'('
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'detach_volume'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'attachTime'"
op|':'
name|'volume'
op|'['
string|"'attach_time'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'volume'
op|'['
string|"'mountpoint'"
op|']'
op|','
nl|'\n'
string|"'instanceId'"
op|':'
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
nl|'\n'
name|'volume'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
op|','
nl|'\n'
string|"'requestId'"
op|':'
name|'context'
op|'.'
name|'request_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'volume'
op|'['
string|"'attach_status'"
op|']'
op|','
nl|'\n'
string|"'volumeId'"
op|':'
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
name|'volume_id'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_kernel_id
dedent|''
name|'def'
name|'_format_kernel_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'result'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kernel_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'kernel_id'"
op|']'
newline|'\n'
name|'if'
name|'kernel_uuid'
name|'is'
name|'None'
name|'or'
name|'kernel_uuid'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'result'
op|'['
name|'key'
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'glance_id_to_ec2_id'
op|'('
name|'context'
op|','
name|'kernel_uuid'
op|','
string|"'aki'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_format_ramdisk_id
dedent|''
name|'def'
name|'_format_ramdisk_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'result'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ramdisk_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'ramdisk_id'"
op|']'
newline|'\n'
name|'if'
name|'ramdisk_uuid'
name|'is'
name|'None'
name|'or'
name|'ramdisk_uuid'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'result'
op|'['
name|'key'
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'glance_id_to_ec2_id'
op|'('
name|'context'
op|','
name|'ramdisk_uuid'
op|','
nl|'\n'
string|"'ari'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_instance_attribute
dedent|''
name|'def'
name|'describe_instance_attribute'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'attribute'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
DECL|function|_unsupported_attribute
indent|'        '
name|'def'
name|'_unsupported_attribute'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAttribute'
op|'('
name|'attr'
op|'='
name|'attribute'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_block_device_mapping
dedent|''
name|'def'
name|'_format_attr_block_device_mapping'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tmp'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_format_instance_root_device_name'
op|'('
name|'instance'
op|','
name|'tmp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_format_instance_bdm'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'tmp'
op|'['
string|"'rootDeviceName'"
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_disable_api_termination
dedent|''
name|'def'
name|'_format_attr_disable_api_termination'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'disableApiTermination'"
op|']'
op|'='
name|'instance'
op|'['
string|"'disable_terminate'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_group_set
dedent|''
name|'def'
name|'_format_attr_group_set'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'CloudController'
op|'.'
name|'_format_group_set'
op|'('
name|'instance'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_instance_initiated_shutdown_behavior
dedent|''
name|'def'
name|'_format_attr_instance_initiated_shutdown_behavior'
op|'('
name|'instance'
op|','
nl|'\n'
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'shutdown_terminate'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
string|"'instanceInitiatedShutdownBehavior'"
op|']'
op|'='
string|"'terminate'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
string|"'instanceInitiatedShutdownBehavior'"
op|']'
op|'='
string|"'stop'"
newline|'\n'
nl|'\n'
DECL|function|_format_attr_instance_type
dedent|''
dedent|''
name|'def'
name|'_format_attr_instance_type'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_format_instance_type'
op|'('
name|'instance'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_kernel
dedent|''
name|'def'
name|'_format_attr_kernel'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_format_kernel_id'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'result'
op|','
string|"'kernel'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_ramdisk
dedent|''
name|'def'
name|'_format_attr_ramdisk'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_format_ramdisk_id'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'result'
op|','
string|"'ramdisk'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_root_device_name
dedent|''
name|'def'
name|'_format_attr_root_device_name'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_format_instance_root_device_name'
op|'('
name|'instance'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_source_dest_check
dedent|''
name|'def'
name|'_format_attr_source_dest_check'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_unsupported_attribute'
op|'('
name|'instance'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_format_attr_user_data
dedent|''
name|'def'
name|'_format_attr_user_data'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'userData'"
op|']'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'instance'
op|'['
string|"'user_data'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'attribute_formatter'
op|'='
op|'{'
nl|'\n'
string|"'blockDeviceMapping'"
op|':'
name|'_format_attr_block_device_mapping'
op|','
nl|'\n'
string|"'disableApiTermination'"
op|':'
name|'_format_attr_disable_api_termination'
op|','
nl|'\n'
string|"'groupSet'"
op|':'
name|'_format_attr_group_set'
op|','
nl|'\n'
string|"'instanceInitiatedShutdownBehavior'"
op|':'
nl|'\n'
name|'_format_attr_instance_initiated_shutdown_behavior'
op|','
nl|'\n'
string|"'instanceType'"
op|':'
name|'_format_attr_instance_type'
op|','
nl|'\n'
string|"'kernel'"
op|':'
name|'_format_attr_kernel'
op|','
nl|'\n'
string|"'ramdisk'"
op|':'
name|'_format_attr_ramdisk'
op|','
nl|'\n'
string|"'rootDeviceName'"
op|':'
name|'_format_attr_root_device_name'
op|','
nl|'\n'
string|"'sourceDestCheck'"
op|':'
name|'_format_attr_source_dest_check'
op|','
nl|'\n'
string|"'userData'"
op|':'
name|'_format_attr_user_data'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'fn'
op|'='
name|'attribute_formatter'
op|'.'
name|'get'
op|'('
name|'attribute'
op|')'
newline|'\n'
name|'if'
name|'fn'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAttribute'
op|'('
name|'attr'
op|'='
name|'attribute'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'validate_ec2_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'result'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'fn'
op|'('
name|'instance'
op|','
name|'result'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|describe_instances
dedent|''
name|'def'
name|'describe_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# Optional DescribeInstances argument'
nl|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'filters'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'filter'"
op|','
name|'None'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_enforce_valid_instance_ids'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_format_describe_instances'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_id'
op|','
nl|'\n'
name|'instance_cache'
op|'='
name|'instances'
op|','
nl|'\n'
name|'filter'
op|'='
name|'filters'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_instances_v6
dedent|''
name|'def'
name|'describe_instances_v6'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# Optional DescribeInstancesV6 argument'
nl|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'filters'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'filter'"
op|','
name|'None'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_enforce_valid_instance_ids'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_format_describe_instances'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_id'
op|','
nl|'\n'
name|'instance_cache'
op|'='
name|'instances'
op|','
nl|'\n'
name|'filter'
op|'='
name|'filters'
op|','
nl|'\n'
name|'use_v6'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_format_describe_instances
dedent|''
name|'def'
name|'_format_describe_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'reservationSet'"
op|':'
name|'self'
op|'.'
name|'_format_instances'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_run_instances
dedent|''
name|'def'
name|'_format_run_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservation_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'self'
op|'.'
name|'_format_instances'
op|'('
name|'context'
op|','
name|'reservation_id'
op|'='
name|'reservation_id'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'i'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'return'
name|'i'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_format_terminate_instances
dedent|''
name|'def'
name|'_format_terminate_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'previous_states'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances_set'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'ec2_id'
op|','
name|'previous_state'
op|')'
name|'in'
name|'zip'
op|'('
name|'instance_id'
op|','
name|'previous_states'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'i'
op|'['
string|"'instanceId'"
op|']'
op|'='
name|'ec2_id'
newline|'\n'
name|'i'
op|'['
string|"'previousState'"
op|']'
op|'='
name|'_state_description'
op|'('
name|'previous_state'
op|'['
string|"'vm_state'"
op|']'
op|','
nl|'\n'
name|'previous_state'
op|'['
string|"'shutdown_terminate'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'currentState'"
op|']'
op|'='
name|'_state_description'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'shutdown_terminate'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'currentState'"
op|']'
op|'='
name|'_state_description'
op|'('
name|'vm_states'
op|'.'
name|'DELETED'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
dedent|''
name|'instances_set'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'instancesSet'"
op|':'
name|'instances_set'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_instance_bdm
dedent|''
name|'def'
name|'_format_instance_bdm'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|','
name|'root_device_name'
op|','
nl|'\n'
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Format InstanceBlockDeviceMappingResponseItemType."""'
newline|'\n'
name|'root_device_type'
op|'='
string|"'instance-store'"
newline|'\n'
name|'mapping'
op|'='
op|'['
op|']'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'volume_id'
op|'='
name|'bdm'
op|'.'
name|'volume_id'
newline|'\n'
name|'if'
name|'volume_id'
name|'is'
name|'None'
name|'or'
name|'bdm'
op|'.'
name|'no_device'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'bdm'
op|'.'
name|'device_name'
op|'=='
name|'root_device_name'
name|'and'
name|'bdm'
op|'.'
name|'is_volume'
op|':'
newline|'\n'
indent|'                '
name|'root_device_type'
op|'='
string|"'ebs'"
newline|'\n'
nl|'\n'
dedent|''
name|'vol'
op|'='
name|'self'
op|'.'
name|'volume_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"vol = %s\\n"'
op|')'
op|','
name|'vol'
op|')'
newline|'\n'
comment|'# TODO(yamahata): volume attach time'
nl|'\n'
name|'ebs'
op|'='
op|'{'
string|"'volumeId'"
op|':'
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
name|'volume_id'
op|')'
op|','
nl|'\n'
string|"'deleteOnTermination'"
op|':'
name|'bdm'
op|'.'
name|'delete_on_termination'
op|','
nl|'\n'
string|"'attachTime'"
op|':'
name|'vol'
op|'['
string|"'attach_time'"
op|']'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'status'"
op|':'
name|'vol'
op|'['
string|"'attach_status'"
op|']'
op|','
op|'}'
newline|'\n'
name|'res'
op|'='
op|'{'
string|"'deviceName'"
op|':'
name|'bdm'
op|'.'
name|'device_name'
op|','
nl|'\n'
string|"'ebs'"
op|':'
name|'ebs'
op|','
op|'}'
newline|'\n'
name|'mapping'
op|'.'
name|'append'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'blockDeviceMapping'"
op|']'
op|'='
name|'mapping'
newline|'\n'
dedent|''
name|'result'
op|'['
string|"'rootDeviceType'"
op|']'
op|'='
name|'root_device_type'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_format_instance_root_device_name
name|'def'
name|'_format_instance_root_device_name'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'['
string|"'rootDeviceName'"
op|']'
op|'='
op|'('
name|'instance'
op|'.'
name|'get'
op|'('
string|"'root_device_name'"
op|')'
name|'or'
nl|'\n'
name|'block_device'
op|'.'
name|'DEFAULT_ROOT_DEV_NAME'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_format_instance_type
name|'def'
name|'_format_instance_type'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'instance'
op|'.'
name|'get_flavor'
op|'('
op|')'
newline|'\n'
name|'result'
op|'['
string|"'instanceType'"
op|']'
op|'='
name|'flavor'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_format_group_set
name|'def'
name|'_format_group_set'
op|'('
name|'instance'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_group_names'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'security_groups'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'security_group'
name|'in'
name|'instance'
op|'['
string|"'security_groups'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'security_group_names'
op|'.'
name|'append'
op|'('
name|'security_group'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'result'
op|'['
string|"'groupSet'"
op|']'
op|'='
name|'utils'
op|'.'
name|'convert_to_list_dict'
op|'('
nl|'\n'
name|'security_group_names'
op|','
string|"'groupId'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_format_instances
dedent|''
name|'def'
name|'_format_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|'='
name|'None'
op|','
name|'use_v6'
op|'='
name|'False'
op|','
nl|'\n'
name|'instances_cache'
op|'='
name|'None'
op|','
op|'**'
name|'search_opts'
op|')'
op|':'
newline|'\n'
comment|'# TODO(termie): this method is poorly named as its name does not imply'
nl|'\n'
comment|'#               that it will be making a variety of database calls'
nl|'\n'
comment|'#               rather than simply formatting a bunch of instances that'
nl|'\n'
comment|'#               were handed to it'
nl|'\n'
indent|'        '
name|'reservations'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'instances_cache'
op|':'
newline|'\n'
indent|'            '
name|'instances_cache'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# NOTE(vish): instance_id is an optional list of ids to filter by'
nl|'\n'
dedent|''
name|'if'
name|'instance_id'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'instance_id'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ec2_id'
name|'in'
name|'instances_cache'
op|':'
newline|'\n'
indent|'                    '
name|'instances'
op|'.'
name|'append'
op|'('
name|'instances_cache'
op|'['
name|'ec2_id'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                        '
name|'continue'
newline|'\n'
dedent|''
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# always filter out deleted instances'
nl|'\n'
indent|'                '
name|'search_opts'
op|'['
string|"'deleted'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'context'
op|','
nl|'\n'
name|'search_opts'
op|'='
name|'search_opts'
op|','
nl|'\n'
name|'sort_dir'
op|'='
string|"'asc'"
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'pipelib'
op|'.'
name|'is_vpn_image'
op|'('
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'ec2_id'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'instanceId'"
op|']'
op|'='
name|'ec2_id'
newline|'\n'
name|'image_uuid'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'imageId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'glance_id_to_ec2_id'
op|'('
name|'context'
op|','
name|'image_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_format_kernel_id'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'i'
op|','
string|"'kernelId'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_format_ramdisk_id'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'i'
op|','
string|"'ramdiskId'"
op|')'
newline|'\n'
name|'i'
op|'['
string|"'instanceState'"
op|']'
op|'='
name|'_state_description'
op|'('
nl|'\n'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'instance'
op|'['
string|"'shutdown_terminate'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
name|'None'
newline|'\n'
name|'floating_ip'
op|'='
name|'None'
newline|'\n'
name|'ip_info'
op|'='
name|'ec2utils'
op|'.'
name|'get_ip_info_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'ip_info'
op|'['
string|"'fixed_ips'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fixed_ip'
op|'='
name|'ip_info'
op|'['
string|"'fixed_ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'ip_info'
op|'['
string|"'floating_ips'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'floating_ip'
op|'='
name|'ip_info'
op|'['
string|"'floating_ips'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'ip_info'
op|'['
string|"'fixed_ip6s'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'dnsNameV6'"
op|']'
op|'='
name|'ip_info'
op|'['
string|"'fixed_ip6s'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'ec2_private_dns_show_ip'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'privateDnsName'"
op|']'
op|'='
name|'fixed_ip'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'privateDnsName'"
op|']'
op|'='
name|'instance'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
dedent|''
name|'i'
op|'['
string|"'privateIpAddress'"
op|']'
op|'='
name|'fixed_ip'
newline|'\n'
name|'if'
name|'floating_ip'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'ipAddress'"
op|']'
op|'='
name|'floating_ip'
newline|'\n'
dedent|''
name|'i'
op|'['
string|"'dnsName'"
op|']'
op|'='
name|'floating_ip'
newline|'\n'
name|'i'
op|'['
string|"'keyName'"
op|']'
op|'='
name|'instance'
op|'['
string|"'key_name'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'tagSet'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'utils'
op|'.'
name|'instance_meta'
op|'('
name|'instance'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'tagSet'"
op|']'
op|'.'
name|'append'
op|'('
op|'{'
string|"'key'"
op|':'
name|'k'
op|','
string|"'value'"
op|':'
name|'v'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'client_token'
op|'='
name|'self'
op|'.'
name|'_get_client_token'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'if'
name|'client_token'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'clientToken'"
op|']'
op|'='
name|'client_token'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'keyName'"
op|']'
op|'='
string|"'%s (%s, %s)'"
op|'%'
op|'('
name|'i'
op|'['
string|"'keyName'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'i'
op|'['
string|"'productCodesSet'"
op|']'
op|'='
name|'utils'
op|'.'
name|'convert_to_list_dict'
op|'('
op|'['
op|']'
op|','
nl|'\n'
string|"'product_codes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_format_instance_type'
op|'('
name|'instance'
op|','
name|'i'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'launchTime'"
op|']'
op|'='
name|'instance'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'amiLaunchIndex'"
op|']'
op|'='
name|'instance'
op|'['
string|"'launch_index'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_format_instance_root_device_name'
op|'('
name|'instance'
op|','
name|'i'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_format_instance_bdm'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'i'
op|'['
string|"'rootDeviceName'"
op|']'
op|','
name|'i'
op|')'
newline|'\n'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'zone'
op|'='
name|'ec2utils'
op|'.'
name|'get_availability_zone_by_host'
op|'('
name|'host'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'placement'"
op|']'
op|'='
op|'{'
string|"'availabilityZone'"
op|':'
name|'zone'
op|'}'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
name|'not'
name|'in'
name|'reservations'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'r'
op|'['
string|"'reservationId'"
op|']'
op|'='
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'ownerId'"
op|']'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_format_group_set'
op|'('
name|'instance'
op|','
name|'r'
op|')'
newline|'\n'
name|'r'
op|'['
string|"'instancesSet'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'reservations'
op|'['
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|']'
op|'='
name|'r'
newline|'\n'
dedent|''
name|'reservations'
op|'['
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|']'
op|'['
string|"'instancesSet'"
op|']'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'list'
op|'('
name|'reservations'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_addresses
dedent|''
name|'def'
name|'describe_addresses'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'public_ip'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'public_ip'
op|':'
newline|'\n'
indent|'            '
name|'floatings'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'address'
name|'in'
name|'public_ip'
op|':'
newline|'\n'
indent|'                '
name|'floating'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ip_by_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'floatings'
op|'.'
name|'append'
op|'('
name|'floating'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'floatings'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ips_by_project'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'addresses'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_address'
op|'('
name|'context'
op|','
name|'f'
op|')'
name|'for'
name|'f'
name|'in'
name|'floatings'
op|']'
newline|'\n'
name|'return'
op|'{'
string|"'addressesSet'"
op|':'
name|'addresses'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_address
dedent|''
name|'def'
name|'_format_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ec2_id'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'floating_ip'
op|'['
string|"'fixed_ip_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fixed_vm_uuid'
op|'='
name|'floating_ip'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'if'
name|'fixed_vm_uuid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'ec2_id'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
name|'fixed_vm_uuid'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fixed_id'
op|'='
name|'floating_ip'
op|'['
string|"'fixed_ip_id'"
op|']'
newline|'\n'
name|'fixed'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_fixed_ip'
op|'('
name|'context'
op|','
name|'fixed_id'
op|')'
newline|'\n'
name|'if'
name|'fixed'
op|'['
string|"'instance_uuid'"
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'ec2_id'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
name|'fixed'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'address'
op|'='
op|'{'
string|"'public_ip'"
op|':'
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'ec2_id'
op|'}'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'            '
name|'details'
op|'='
string|'"%s (%s)"'
op|'%'
op|'('
name|'address'
op|'['
string|"'instance_id'"
op|']'
op|','
nl|'\n'
name|'floating_ip'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'address'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'details'
newline|'\n'
dedent|''
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|allocate_address
dedent|''
name|'def'
name|'allocate_address'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Allocate address"'
op|')'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'public_ip'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'publicIp'"
op|':'
name|'public_ip'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|release_address
dedent|''
name|'def'
name|'release_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'public_ip'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Release address %s'"
op|')'
op|','
name|'public_ip'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'release_floating_ip'
op|'('
name|'context'
op|','
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'return'"
op|':'
string|'"true"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'public_ip'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Associate address %(public_ip)s to instance "'
nl|'\n'
string|'"%(instance_id)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'public_ip'"
op|':'
name|'public_ip'
op|','
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'cached_ipinfo'
op|'='
name|'ec2utils'
op|'.'
name|'get_ip_info_for_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fixed_ips'
op|'='
name|'cached_ipinfo'
op|'['
string|"'fixed_ips'"
op|']'
op|'+'
name|'cached_ipinfo'
op|'['
string|"'fixed_ip6s'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'fixed_ips'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Unable to associate IP Address, no fixed_ips.'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoMoreFixedIps'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(tr3buchet): this will associate the floating IP with the'
nl|'\n'
comment|'# first fixed_ip an instance has. This should be'
nl|'\n'
comment|'# changed to support specifying a particular fixed_ip if'
nl|'\n'
comment|'# multiple exist but this may not apply to ec2..'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'fixed_ips'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'multiple fixed_ips exist, using the first: %s'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'msg'
op|','
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'floating_address'
op|'='
name|'public_ip'
op|','
nl|'\n'
name|'fixed_address'
op|'='
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'return'"
op|':'
string|"'true'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'public_ip'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_id_by_floating_address'
op|'('
nl|'\n'
name|'context'
op|','
name|'public_ip'
op|')'
newline|'\n'
name|'if'
name|'instance_id'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Disassociate address %s"'
op|')'
op|','
name|'public_ip'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'address'
op|'='
name|'public_ip'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'return'"
op|':'
string|'"true"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|run_instances
dedent|''
name|'def'
name|'run_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'min_count'
op|'='
name|'int'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'min_count'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'int'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'max_count'"
op|','
name|'min_count'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'min_count'
op|'='
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
name|'min_count'
op|','
string|'"min_count"'
op|','
name|'min_value'
op|'='
number|'1'
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
name|'max_count'
op|','
string|'"max_count"'
op|','
name|'min_value'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InvalidInput'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'e'
op|'.'
name|'format_message'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'min_count'
op|'>'
name|'max_count'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'min_count must be <= max_count'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'client_token'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'client_token'"
op|')'
newline|'\n'
name|'if'
name|'client_token'
op|':'
newline|'\n'
indent|'            '
name|'resv_id'
op|'='
name|'self'
op|'.'
name|'_resv_id_from_token'
op|'('
name|'context'
op|','
name|'client_token'
op|')'
newline|'\n'
name|'if'
name|'resv_id'
op|':'
newline|'\n'
comment|'# since this client_token already corresponds to a reservation'
nl|'\n'
comment|'# id, this returns a proper response without creating a new'
nl|'\n'
comment|'# instance'
nl|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'_format_run_instances'
op|'('
name|'context'
op|','
name|'resv_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'kwargs'
op|'['
string|"'kernel_id'"
op|']'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|"'kernel_id'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_glance_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'kernel'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ramdisk'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'kwargs'
op|'['
string|"'ramdisk_id'"
op|']'
op|')'
newline|'\n'
name|'kwargs'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_glance_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'ramdisk'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'bdm'
name|'in'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_parse_block_device_mapping'
op|'('
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'kwargs'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
name|'image_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_glance_id'
op|'('
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'image_state'
op|'='
name|'self'
op|'.'
name|'_get_image_state'
op|'('
name|'image'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFoundEC2'
op|'('
name|'image_id'
op|'='
name|'kwargs'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'image_state'
op|'!='
string|"'available'"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Image must be available'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ImageNotActive'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'flavor'
op|'='
name|'flavor_obj'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_type'"
op|','
nl|'\n'
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'instances'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'flavor'
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'image_uuid'
op|','
nl|'\n'
name|'max_count'
op|'='
name|'int'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'max_count'"
op|','
name|'min_count'
op|')'
op|')'
op|','
nl|'\n'
name|'min_count'
op|'='
name|'min_count'
op|','
nl|'\n'
name|'kernel_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|')'
op|','
nl|'\n'
name|'ramdisk_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|')'
op|','
nl|'\n'
name|'key_name'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'key_name'"
op|')'
op|','
nl|'\n'
name|'user_data'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'user_data'"
op|')'
op|','
nl|'\n'
name|'security_group'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'security_group'"
op|')'
op|','
nl|'\n'
name|'availability_zone'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'placement'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'availability_zone'"
op|')'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_format_run_instances'
op|'('
name|'context'
op|','
name|'resv_id'
op|')'
newline|'\n'
name|'if'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'instance_ids'
op|'='
op|'['
name|'i'
op|'['
string|"'instanceId'"
op|']'
name|'for'
name|'i'
name|'in'
name|'instances'
op|'['
string|"'instancesSet'"
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_add_client_token'
op|'('
name|'context'
op|','
name|'client_token'
op|','
name|'instance_ids'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|_add_client_token
dedent|''
name|'def'
name|'_add_client_token'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'client_token'
op|','
name|'instance_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add client token to reservation ID mapping."""'
newline|'\n'
name|'if'
name|'client_token'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'ec2_id'
name|'in'
name|'instance_ids'
op|':'
newline|'\n'
indent|'                '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'{'
string|"'EC2_client_token'"
op|':'
name|'client_token'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_client_token
dedent|''
dedent|''
dedent|''
name|'def'
name|'_get_client_token'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get client token for a given instance."""'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'EC2_client_token'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_remove_client_token
dedent|''
name|'def'
name|'_remove_client_token'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove client token to reservation ID mapping."""'
newline|'\n'
nl|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'pop'
op|'('
string|"'EC2_client_token'"
op|','
name|'None'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_resv_id_from_token
dedent|''
dedent|''
name|'def'
name|'_resv_id_from_token'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'client_token'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get reservation ID from db."""'
newline|'\n'
name|'resv_id'
op|'='
name|'None'
newline|'\n'
name|'sys_metas'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all_system_metadata'
op|'('
nl|'\n'
name|'context'
op|','
name|'search_filts'
op|'='
op|'['
op|'{'
string|"'key'"
op|':'
op|'['
string|"'EC2_client_token'"
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'value'"
op|':'
op|'['
name|'client_token'
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'sys_meta'
name|'in'
name|'sys_metas'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'sys_meta'
name|'and'
name|'sys_meta'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|'=='
name|'client_token'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'sys_meta'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'expected_attrs'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resv_id'
op|'='
name|'instance'
op|'.'
name|'get'
op|'('
string|"'reservation_id'"
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'resv_id'
newline|'\n'
nl|'\n'
DECL|member|_ec2_ids_to_instances
dedent|''
name|'def'
name|'_ec2_ids_to_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'objects'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get all instances first, to prevent partial executions."""'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|','
string|"'info_cache'"
op|']'
newline|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'instance_id'
op|':'
newline|'\n'
indent|'            '
name|'validate_ec2_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'if'
name|'objects'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
nl|'\n'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|member|terminate_instances
dedent|''
name|'def'
name|'terminate_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate each instance in instance_id, which is a list of ec2 ids.\n        instance_id is a kwarg so its name cannot be modified.\n        """'
newline|'\n'
name|'previous_states'
op|'='
name|'self'
op|'.'
name|'_ec2_ids_to_instances'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_remove_client_token'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to start terminating instances"'
op|')'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'previous_states'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_format_terminate_instances'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|','
nl|'\n'
name|'previous_states'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot_instances
dedent|''
name|'def'
name|'reboot_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""instance_id is a list of instance ids."""'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_ec2_ids_to_instances'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Reboot instance %r"'
op|')'
op|','
name|'instance_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'HARD'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|stop_instances
dedent|''
name|'def'
name|'stop_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop each instances in instance_id.\n        Here instance_id is a list of instance ids\n        """'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_ec2_ids_to_instances'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'True'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to stop instances"'
op|')'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'extensions'
op|'.'
name|'check_compute_policy'
op|'('
name|'context'
op|','
string|"'stop'"
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|start_instances
dedent|''
name|'def'
name|'start_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Start each instances in instance_id.\n        Here instance_id is a list of instance ids\n        """'
newline|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'_ec2_ids_to_instances'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'True'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Going to start instances"'
op|')'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'extensions'
op|'.'
name|'check_compute_policy'
op|'('
name|'context'
op|','
string|"'start'"
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'start'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_get_image
dedent|''
name|'def'
name|'_get_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'ec2_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'internal_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'exception'
op|'.'
name|'InvalidEc2Id'
op|','
name|'exception'
op|'.'
name|'ImageNotFound'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
string|"'name'"
op|':'
name|'ec2_id'
op|'}'
newline|'\n'
name|'images'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'detail'
op|'('
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'images'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'ec2_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'image_type'
op|'='
name|'ec2_id'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'ec2utils'
op|'.'
name|'image_type'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'container_format'"
op|')'
op|')'
op|'!='
name|'image_type'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'ec2_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'image'
newline|'\n'
nl|'\n'
DECL|member|_format_image
dedent|''
name|'def'
name|'_format_image'
op|'('
name|'self'
op|','
name|'image'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert from format defined by GlanceImageService to S3 format."""'
newline|'\n'
name|'i'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'image_type'
op|'='
name|'ec2utils'
op|'.'
name|'image_type'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'container_format'"
op|')'
op|')'
newline|'\n'
name|'ec2_id'
op|'='
name|'ec2utils'
op|'.'
name|'image_ec2_id'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
op|','
name|'image_type'
op|')'
newline|'\n'
name|'name'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'i'
op|'['
string|"'imageId'"
op|']'
op|'='
name|'ec2_id'
newline|'\n'
name|'kernel_id'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|')'
newline|'\n'
name|'if'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'['
string|"'kernelId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'image_ec2_id'
op|'('
name|'kernel_id'
op|','
string|"'aki'"
op|')'
newline|'\n'
dedent|''
name|'ramdisk_id'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|')'
newline|'\n'
name|'if'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'['
string|"'ramdiskId'"
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'image_ec2_id'
op|'('
name|'ramdisk_id'
op|','
string|"'ari'"
op|')'
newline|'\n'
dedent|''
name|'i'
op|'['
string|"'imageOwnerId'"
op|']'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'owner'"
op|')'
newline|'\n'
nl|'\n'
name|'img_loc'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'image_location'"
op|')'
newline|'\n'
name|'if'
name|'img_loc'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'['
string|"'imageLocation'"
op|']'
op|'='
name|'img_loc'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'['
string|"'imageLocation'"
op|']'
op|'='
string|'"%s (%s)"'
op|'%'
op|'('
name|'img_loc'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'i'
op|'['
string|"'name'"
op|']'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'not'
name|'name'
name|'and'
name|'img_loc'
op|':'
newline|'\n'
comment|'# This should only occur for images registered with ec2 api'
nl|'\n'
comment|'# prior to that api populating the glance name'
nl|'\n'
indent|'            '
name|'i'
op|'['
string|"'name'"
op|']'
op|'='
name|'img_loc'
newline|'\n'
nl|'\n'
dedent|''
name|'i'
op|'['
string|"'imageState'"
op|']'
op|'='
name|'self'
op|'.'
name|'_get_image_state'
op|'('
name|'image'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'description'"
op|']'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'description'"
op|')'
newline|'\n'
name|'display_mapping'
op|'='
op|'{'
string|"'aki'"
op|':'
string|"'kernel'"
op|','
nl|'\n'
string|"'ari'"
op|':'
string|"'ramdisk'"
op|','
nl|'\n'
string|"'ami'"
op|':'
string|"'machine'"
op|'}'
newline|'\n'
name|'i'
op|'['
string|"'imageType'"
op|']'
op|'='
name|'display_mapping'
op|'.'
name|'get'
op|'('
name|'image_type'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'isPublic'"
op|']'
op|'='
name|'not'
name|'not'
name|'image'
op|'.'
name|'get'
op|'('
string|"'is_public'"
op|')'
newline|'\n'
name|'i'
op|'['
string|"'architecture'"
op|']'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'architecture'"
op|')'
newline|'\n'
nl|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'root_device_name'
op|'='
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
name|'properties'
op|')'
newline|'\n'
name|'root_device_type'
op|'='
string|"'instance-store'"
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'properties'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'device_name'"
op|')'
op|')'
op|'=='
nl|'\n'
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
name|'root_device_name'
op|')'
name|'and'
nl|'\n'
op|'('
string|"'snapshot_id'"
name|'in'
name|'bdm'
name|'or'
string|"'volume_id'"
name|'in'
name|'bdm'
op|')'
name|'and'
nl|'\n'
name|'not'
name|'bdm'
op|'.'
name|'get'
op|'('
string|"'no_device'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'root_device_type'
op|'='
string|"'ebs'"
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'['
string|"'rootDeviceName'"
op|']'
op|'='
op|'('
name|'root_device_name'
name|'or'
nl|'\n'
name|'block_device'
op|'.'
name|'DEFAULT_ROOT_DEV_NAME'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'rootDeviceType'"
op|']'
op|'='
name|'root_device_type'
newline|'\n'
nl|'\n'
name|'_format_mappings'
op|'('
name|'properties'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'i'
newline|'\n'
nl|'\n'
DECL|member|describe_images
dedent|''
name|'def'
name|'describe_images'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE: image_id is a list!'
nl|'\n'
indent|'        '
name|'if'
name|'image_id'
op|':'
newline|'\n'
indent|'            '
name|'images'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'image_id'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'ec2_id'
op|')'
newline|'\n'
dedent|''
name|'images'
op|'.'
name|'append'
op|'('
name|'image'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'images'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'detail'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'images'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_image'
op|'('
name|'i'
op|')'
name|'for'
name|'i'
name|'in'
name|'images'
op|']'
newline|'\n'
name|'return'
op|'{'
string|"'imagesSet'"
op|':'
name|'images'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|deregister_image
dedent|''
name|'def'
name|'deregister_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"De-registering image %s"'
op|')'
op|','
name|'image_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'internal_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_register_image
dedent|''
name|'def'
name|'_register_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'image_type'
op|'='
name|'ec2utils'
op|'.'
name|'image_type'
op|'('
name|'image'
op|'.'
name|'get'
op|'('
string|"'container_format'"
op|')'
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'ec2utils'
op|'.'
name|'image_ec2_id'
op|'('
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'image_type'
op|')'
newline|'\n'
name|'return'
name|'image_id'
newline|'\n'
nl|'\n'
DECL|member|register_image
dedent|''
name|'def'
name|'register_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_location'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'image_location'
name|'is'
name|'None'
name|'and'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'image_location'
op|'='
name|'kwargs'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'image_location'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'imageLocation is required'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'metadata'
op|'='
op|'{'
string|"'properties'"
op|':'
op|'{'
string|"'image_location'"
op|':'
name|'image_location'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'name'"
op|']'
op|'='
name|'kwargs'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'name'"
op|']'
op|'='
name|'image_location'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'root_device_name'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'root_device_name'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'root_device_name'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mappings'
op|'='
op|'['
name|'_parse_block_device_mapping'
op|'('
name|'bdm'
op|')'
name|'for'
name|'bdm'
name|'in'
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'block_device_mapping'"
op|','
op|'['
op|']'
op|')'
op|']'
newline|'\n'
name|'if'
name|'mappings'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'block_device_mapping'"
op|']'
op|'='
name|'mappings'
newline|'\n'
nl|'\n'
dedent|''
name|'image_id'
op|'='
name|'self'
op|'.'
name|'_register_image'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|"'Registered image %(image_location)s with id '"
nl|'\n'
string|"'%(image_id)s'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'image_location'"
op|':'
name|'image_location'
op|','
string|"'image_id'"
op|':'
name|'image_id'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'imageId'"
op|':'
name|'image_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_image_attribute
dedent|''
name|'def'
name|'describe_image_attribute'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'attribute'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
DECL|function|_block_device_mapping_attribute
indent|'        '
name|'def'
name|'_block_device_mapping_attribute'
op|'('
name|'image'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_format_mappings'
op|'('
name|'image'
op|'['
string|"'properties'"
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_launch_permission_attribute
dedent|''
name|'def'
name|'_launch_permission_attribute'
op|'('
name|'image'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'launchPermission'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'image'
op|'['
string|"'is_public'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
string|"'launchPermission'"
op|']'
op|'.'
name|'append'
op|'('
op|'{'
string|"'group'"
op|':'
string|"'all'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_root_device_name_attribute
dedent|''
dedent|''
name|'def'
name|'_root_device_name_attribute'
op|'('
name|'image'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_prop_root_dev_name'
op|'='
name|'block_device'
op|'.'
name|'properties_root_device_name'
newline|'\n'
name|'result'
op|'['
string|"'rootDeviceName'"
op|']'
op|'='
name|'_prop_root_dev_name'
op|'('
name|'image'
op|'['
string|"'properties'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'result'
op|'['
string|"'rootDeviceName'"
op|']'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
string|"'rootDeviceName'"
op|']'
op|'='
name|'block_device'
op|'.'
name|'DEFAULT_ROOT_DEV_NAME'
newline|'\n'
nl|'\n'
DECL|function|_kernel_attribute
dedent|''
dedent|''
name|'def'
name|'_kernel_attribute'
op|'('
name|'image'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel_id'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|')'
newline|'\n'
name|'if'
name|'kernel_id'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
string|"'kernel'"
op|']'
op|'='
op|'{'
nl|'\n'
string|"'value'"
op|':'
name|'ec2utils'
op|'.'
name|'image_ec2_id'
op|'('
name|'kernel_id'
op|','
string|"'aki'"
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_ramdisk_attribute
dedent|''
dedent|''
name|'def'
name|'_ramdisk_attribute'
op|'('
name|'image'
op|','
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ramdisk_id'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|')'
newline|'\n'
name|'if'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
string|"'ramdisk'"
op|']'
op|'='
op|'{'
nl|'\n'
string|"'value'"
op|':'
name|'ec2utils'
op|'.'
name|'image_ec2_id'
op|'('
name|'ramdisk_id'
op|','
string|"'ari'"
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'supported_attributes'
op|'='
op|'{'
nl|'\n'
string|"'blockDeviceMapping'"
op|':'
name|'_block_device_mapping_attribute'
op|','
nl|'\n'
string|"'launchPermission'"
op|':'
name|'_launch_permission_attribute'
op|','
nl|'\n'
string|"'rootDeviceName'"
op|':'
name|'_root_device_name_attribute'
op|','
nl|'\n'
string|"'kernel'"
op|':'
name|'_kernel_attribute'
op|','
nl|'\n'
string|"'ramdisk'"
op|':'
name|'_ramdisk_attribute'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'fn'
op|'='
name|'supported_attributes'
op|'.'
name|'get'
op|'('
name|'attribute'
op|')'
newline|'\n'
name|'if'
name|'fn'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAttribute'
op|'('
name|'attr'
op|'='
name|'attribute'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'{'
string|"'imageId'"
op|':'
name|'image_id'
op|'}'
newline|'\n'
name|'fn'
op|'('
name|'image'
op|','
name|'result'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|modify_image_attribute
dedent|''
name|'def'
name|'modify_image_attribute'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'attribute'
op|','
nl|'\n'
name|'operation_type'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|"# TODO(devcamcar): Support users and groups other than 'all'."
nl|'\n'
indent|'        '
name|'if'
name|'attribute'
op|'!='
string|"'launchPermission'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidAttribute'
op|'('
name|'attr'
op|'='
name|'attribute'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'user_group'"
name|'not'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'user or group not specified'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'kwargs'
op|'['
string|"'user_group'"
op|']'
op|')'
op|'!='
number|'1'
name|'and'
name|'kwargs'
op|'['
string|"'user_group'"
op|']'
op|'['
number|'0'
op|']'
op|'!='
string|"'all'"
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'\'only group "all" is supported\''
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'operation_type'
name|'not'
name|'in'
op|'['
string|"'add'"
op|','
string|"'remove'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'operation_type must be add or remove'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Updating image %s publicity"'
op|')'
op|','
name|'image_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'internal_id'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'del'
op|'('
name|'image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|"'is_public'"
op|']'
op|'='
op|'('
name|'operation_type'
op|'=='
string|"'add'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'internal_id'
op|','
name|'image'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ImageNotAuthorized'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Not allowed to modify attributes for image %s'"
op|')'
op|'%'
name|'image_id'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Forbidden'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_image
dedent|''
dedent|''
name|'def'
name|'update_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'internal_id'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
name|'image_id'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'image_service'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'internal_id'
op|','
name|'dict'
op|'('
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
comment|'# TODO(yamahata): race condition'
nl|'\n'
comment|'# At the moment there is no way to prevent others from'
nl|'\n'
comment|'# manipulating instances/volumes/snapshots.'
nl|'\n'
comment|"# As other code doesn't take it into consideration, here we don't"
nl|'\n'
comment|'# care of it for now. Ostrich algorithm'
nl|'\n'
DECL|member|create_image
dedent|''
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(yamahata): name/description are ignored by register_image(),'
nl|'\n'
comment|'#                 do so here'
nl|'\n'
indent|'        '
name|'no_reboot'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'no_reboot'"
op|','
name|'False'
op|')'
newline|'\n'
name|'name'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'validate_ec2_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'ec2_instance_id'
op|'='
name|'instance_id'
newline|'\n'
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_instance_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# CreateImage only supported for the analogue of EBS-backed instances'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Invalid value \'%(ec2_instance_id)s\' for instanceId. "'
nl|'\n'
string|'"Instance does not have a volume attached at root "'
nl|'\n'
string|'"(%(root)s)"'
op|')'
op|'%'
op|'{'
string|"'root'"
op|':'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|','
nl|'\n'
string|"'ec2_instance_id'"
op|':'
name|'ec2_instance_id'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'err'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
comment|'# stop the instance if necessary'
nl|'\n'
dedent|''
name|'restart_instance'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'no_reboot'
op|':'
newline|'\n'
indent|'            '
name|'vm_state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
nl|'\n'
comment|'# if the instance is in subtle state, refuse to proceed.'
nl|'\n'
name|'if'
name|'vm_state'
name|'not'
name|'in'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotRunning'
op|'('
name|'instance_id'
op|'='
name|'ec2_instance_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vm_state'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|':'
newline|'\n'
indent|'                '
name|'restart_instance'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'stop'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# wait instance for really stopped'
nl|'\n'
dedent|''
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'while'
name|'vm_state'
op|'!='
name|'vm_states'
op|'.'
name|'STOPPED'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vm_state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
comment|'# NOTE(yamahata): timeout and error. 1 hour for now for safety.'
nl|'\n'
comment|'#                 Is it too short/long?'
nl|'\n'
comment|'#                 Or is there any better way?'
nl|'\n'
name|'timeout'
op|'='
number|'1'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
name|'if'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'>'
name|'start_time'
op|'+'
name|'timeout'
op|':'
newline|'\n'
indent|'                    '
name|'err'
op|'='
name|'_'
op|'('
string|'"Couldn\'t stop instance within %d sec"'
op|')'
op|'%'
name|'timeout'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InternalError'
op|'('
name|'message'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'glance_uuid'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'ec2_image_id'
op|'='
name|'ec2utils'
op|'.'
name|'glance_id_to_ec2_id'
op|'('
name|'context'
op|','
name|'glance_uuid'
op|')'
newline|'\n'
name|'src_image'
op|'='
name|'self'
op|'.'
name|'_get_image'
op|'('
name|'context'
op|','
name|'ec2_image_id'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'dict'
op|'('
name|'src_image'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_unmap_id_property
name|'def'
name|'_unmap_id_property'
op|'('
name|'properties'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'properties'
op|'['
name|'name'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'properties'
op|'['
name|'name'
op|']'
op|'='
name|'ec2utils'
op|'.'
name|'id_to_glance_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'properties'
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure the ID properties are unmapped back to the glance UUID'
nl|'\n'
dedent|''
dedent|''
name|'_unmap_id_property'
op|'('
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|','
string|"'kernel_id'"
op|')'
newline|'\n'
name|'_unmap_id_property'
op|'('
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|','
string|"'ramdisk_id'"
op|')'
newline|'\n'
nl|'\n'
comment|'# meaningful image name'
nl|'\n'
name|'name_map'
op|'='
name|'dict'
op|'('
name|'instance'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'isotime'
op|'('
op|')'
op|')'
newline|'\n'
name|'name'
op|'='
name|'name'
name|'or'
name|'_'
op|'('
string|"'image of %(instance)s at %(now)s'"
op|')'
op|'%'
name|'name_map'
newline|'\n'
nl|'\n'
name|'new_image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot_volume_backed'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|','
nl|'\n'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'ec2_id'
op|'='
name|'ec2utils'
op|'.'
name|'glance_id_to_ec2_id'
op|'('
name|'context'
op|','
name|'new_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'restart_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'start'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'imageId'"
op|':'
name|'ec2_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|create_tags
dedent|''
name|'def'
name|'create_tags'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add tags to a resource\n\n        Returns True on success, error on failure.\n\n        :param context: context under which the method is called\n        """'
newline|'\n'
name|'resources'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'resource_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'tags'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'tag'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'resources'
name|'is'
name|'None'
name|'or'
name|'tags'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'resource_id and tag are required'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'resources'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Expecting a list of resources'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'r'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ec2utils'
op|'.'
name|'resource_type_from_id'
op|'('
name|'context'
op|','
name|'r'
op|')'
op|'!='
string|"'instance'"
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Only instances implemented'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'tags'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Expecting a list of tagSets'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'tags'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'tag'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'='
name|'_'
op|'('
string|"'Expecting tagSet to be key/value pairs'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'key'
op|'='
name|'tag'
op|'.'
name|'get'
op|'('
string|"'key'"
op|','
name|'None'
op|')'
newline|'\n'
name|'val'
op|'='
name|'tag'
op|'.'
name|'get'
op|'('
string|"'value'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'key'
name|'is'
name|'None'
name|'or'
name|'val'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'err'
op|'='
name|'_'
op|'('
string|"'Expecting both key and value to be set'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'metadata'
op|'['
name|'key'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'ec2_id'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|delete_tags
dedent|''
name|'def'
name|'delete_tags'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete tags\n\n        Returns True on success, error on failure.\n\n        :param context: context under which the method is called\n        """'
newline|'\n'
name|'resources'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'resource_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'tags'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'tag'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'resources'
name|'is'
name|'None'
name|'or'
name|'tags'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'resource_id and tag are required'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'MissingParameter'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'resources'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Expecting a list of resources'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'r'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ec2utils'
op|'.'
name|'resource_type_from_id'
op|'('
name|'context'
op|','
name|'r'
op|')'
op|'!='
string|"'instance'"
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Only instances implemented'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'tags'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Expecting a list of tagSets'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'ec2_id'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuid'
op|'='
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'ec2_id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'tags'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'tag'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Expecting tagSet to be key/value pairs'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'key'
op|'='
name|'tag'
op|'.'
name|'get'
op|'('
string|"'key'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'key'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Expecting key to be set'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|describe_tags
dedent|''
name|'def'
name|'describe_tags'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List tags\n\n        Returns a dict with a single key \'tagSet\' on success, error on failure.\n\n        :param context: context under which the method is called\n        """'
newline|'\n'
name|'filters'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'filter'"
op|','
name|'None'
op|')'
newline|'\n'
name|'search_filts'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'filter_block'
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'                '
name|'key_name'
op|'='
name|'filter_block'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
name|'None'
op|')'
newline|'\n'
name|'val'
op|'='
name|'filter_block'
op|'.'
name|'get'
op|'('
string|"'value'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'val'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'isinstance'
op|'('
name|'val'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'val'
op|'='
name|'val'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'val'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|','
name|'set'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'val'
op|'='
op|'('
name|'val'
op|','
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'key_name'
op|':'
newline|'\n'
indent|'                    '
name|'search_block'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'key_name'
name|'in'
op|'('
string|"'resource_id'"
op|','
string|"'resource-id'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'search_block'
op|'['
string|"'resource_id'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'res_id'
name|'in'
name|'val'
op|':'
newline|'\n'
indent|'                            '
name|'search_block'
op|'['
string|"'resource_id'"
op|']'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'ec2utils'
op|'.'
name|'ec2_inst_id_to_uuid'
op|'('
name|'context'
op|','
name|'res_id'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'key_name'
name|'in'
op|'['
string|"'key'"
op|','
string|"'value'"
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'search_block'
op|'['
name|'key_name'
op|']'
op|'='
op|'['
name|'ec2utils'
op|'.'
name|'regex_from_ec2_regex'
op|'('
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
name|'val'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'key_name'
name|'in'
op|'('
string|"'resource_type'"
op|','
string|"'resource-type'"
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'for'
name|'res_type'
name|'in'
name|'val'
op|':'
newline|'\n'
indent|'                            '
name|'if'
name|'res_type'
op|'!='
string|"'instance'"
op|':'
newline|'\n'
indent|'                                '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
nl|'\n'
name|'message'
op|'='
name|'_'
op|'('
string|"'Only instances implemented'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'search_block'
op|'['
name|'key_name'
op|']'
op|'='
string|"'instance'"
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'search_block'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'search_filts'
op|'.'
name|'append'
op|'('
name|'search_block'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'ts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all_instance_metadata'
op|'('
name|'context'
op|','
nl|'\n'
name|'search_filts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ts'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'resource_id'"
op|':'
name|'ec2utils'
op|'.'
name|'id_to_ec2_inst_id'
op|'('
name|'tag'
op|'['
string|"'instance_id'"
op|']'
op|')'
op|','
nl|'\n'
string|"'resource_type'"
op|':'
string|"'instance'"
op|','
nl|'\n'
string|"'key'"
op|':'
name|'tag'
op|'['
string|"'key'"
op|']'
op|','
nl|'\n'
string|"'value'"
op|':'
name|'tag'
op|'['
string|"'value'"
op|']'
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|'"tagSet"'
op|':'
name|'ts'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EC2SecurityGroupExceptions
dedent|''
dedent|''
name|'class'
name|'EC2SecurityGroupExceptions'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_invalid_property
name|'def'
name|'raise_invalid_property'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_group_already_exists
name|'def'
name|'raise_group_already_exists'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupExists'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_invalid_group
name|'def'
name|'raise_invalid_group'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidGroup'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_invalid_cidr
name|'def'
name|'raise_invalid_cidr'
op|'('
name|'cidr'
op|','
name|'decoding_exception'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'decoding_exception'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'decoding_exception'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
name|'message'
op|'='
name|'_'
op|'('
string|'"Invalid CIDR"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_over_quota
name|'def'
name|'raise_over_quota'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'SecurityGroupLimitExceeded'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|raise_not_found
name|'def'
name|'raise_not_found'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'CloudSecurityGroupNovaAPI'
op|'('
name|'EC2SecurityGroupExceptions'
op|','
nl|'\n'
DECL|class|CloudSecurityGroupNovaAPI
name|'compute_api'
op|'.'
name|'SecurityGroupAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'CloudSecurityGroupNeutronAPI'
op|'('
name|'EC2SecurityGroupExceptions'
op|','
nl|'\n'
DECL|class|CloudSecurityGroupNeutronAPI
name|'neutron_driver'
op|'.'
name|'SecurityGroupAPI'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_cloud_security_group_api
dedent|''
name|'def'
name|'get_cloud_security_group_api'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'cfg'
op|'.'
name|'CONF'
op|'.'
name|'security_group_api'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'nova'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CloudSecurityGroupNovaAPI'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'cfg'
op|'.'
name|'CONF'
op|'.'
name|'security_group_api'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'('
string|"'neutron'"
op|','
string|"'quantum'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CloudSecurityGroupNeutronAPI'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

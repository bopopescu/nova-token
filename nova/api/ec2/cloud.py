begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCloud Controller: Implementation of EC2 REST API calls, which are\ndispatched to other nodes via AMQP RPC. State is via distributed\ndatastore.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'import'
name|'IPy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'crypto'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'instance_types'
name|'import'
name|'INSTANCE_TYPES'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
name|'import'
name|'cloud'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'images'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'storage_availability_zone'"
op|','
string|"'nova.volume.manager'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|InvalidInputException
name|'InvalidInputException'
op|'='
name|'exception'
op|'.'
name|'InvalidInputException'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuotaError
name|'class'
name|'QuotaError'
op|'('
name|'exception'
op|'.'
name|'ApiError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Quota Exceeeded"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_gen_key
dedent|''
name|'def'
name|'_gen_key'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a key\n\n    This is a module level method because it is slow and we need to defer\n    it into a process pool."""'
newline|'\n'
comment|'# NOTE(vish): generating key pair is slow so check for legal'
nl|'\n'
comment|'#             creation before creating key_pair'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'db'
op|'.'
name|'key_pair_get'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'key_name'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Duplicate'
op|'('
string|'"The key_pair %s already exists"'
nl|'\n'
op|'%'
name|'key_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'private_key'
op|','
name|'public_key'
op|','
name|'fingerprint'
op|'='
name|'crypto'
op|'.'
name|'generate_key_pair'
op|'('
op|')'
newline|'\n'
name|'key'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'key'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'user_id'
newline|'\n'
name|'key'
op|'['
string|"'name'"
op|']'
op|'='
name|'key_name'
newline|'\n'
name|'key'
op|'['
string|"'public_key'"
op|']'
op|'='
name|'public_key'
newline|'\n'
name|'key'
op|'['
string|"'fingerprint'"
op|']'
op|'='
name|'fingerprint'
newline|'\n'
name|'db'
op|'.'
name|'key_pair_create'
op|'('
name|'context'
op|','
name|'key'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'private_key'"
op|':'
name|'private_key'
op|','
string|"'fingerprint'"
op|':'
name|'fingerprint'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ec2_id_to_internal_id
dedent|''
name|'def'
name|'ec2_id_to_internal_id'
op|'('
name|'ec2_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert an ec2 ID (i-[base 36 number]) to an internal id (int)"""'
newline|'\n'
name|'return'
name|'int'
op|'('
name|'ec2_id'
op|'['
number|'2'
op|':'
op|']'
op|','
number|'36'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|internal_id_to_ec2_id
dedent|''
name|'def'
name|'internal_id_to_ec2_id'
op|'('
name|'internal_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert an internal ID (int) to an ec2 ID (i-[base 36 number])"""'
newline|'\n'
name|'digits'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'internal_id'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'internal_id'
op|','
name|'remainder'
op|'='
name|'divmod'
op|'('
name|'internal_id'
op|','
number|'36'
op|')'
newline|'\n'
name|'digits'
op|'.'
name|'append'
op|'('
string|"'0123456789abcdefghijklmnopqrstuvwxyz'"
op|'['
name|'remainder'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
string|'"i-%s"'
op|'%'
string|"''"
op|'.'
name|'join'
op|'('
name|'reversed'
op|'('
name|'digits'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CloudController
dedent|''
name|'class'
name|'CloudController'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" CloudController provides the critical dispatch between\n inbound API calls through the endpoint and messages\n sent to the other nodes.\n"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setup'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'CloudController'"
newline|'\n'
nl|'\n'
DECL|member|setup
dedent|''
name|'def'
name|'setup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Ensure the keychains and folders exist. """'
newline|'\n'
comment|'# FIXME(ja): this should be moved to a nova-manage command,'
nl|'\n'
comment|'# if not setup throw exceptions instead of running'
nl|'\n'
comment|"# Create keys folder, if it doesn't exist"
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'FLAGS'
op|'.'
name|'keys_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'FLAGS'
op|'.'
name|'keys_path'
op|')'
newline|'\n'
comment|"# Gen root CA, if we don't have one"
nl|'\n'
dedent|''
name|'root_ca_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'ca_path'
op|','
name|'FLAGS'
op|'.'
name|'ca_file'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'root_ca_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chdir'
op|'('
name|'FLAGS'
op|'.'
name|'ca_path'
op|')'
newline|'\n'
comment|'# TODO(vish): Do this with M2Crypto instead'
nl|'\n'
name|'utils'
op|'.'
name|'runthis'
op|'('
string|'"Generating root CA: %s"'
op|','
string|'"sh genrootca.sh"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chdir'
op|'('
name|'start'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_mpi_data
dedent|''
dedent|''
name|'def'
name|'_get_mpi_data'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'db'
op|'.'
name|'instance_get_all_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'fixed_ip'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'line'
op|'='
string|"'%s slots=%d'"
op|'%'
op|'('
name|'instance'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'INSTANCE_TYPES'
op|'['
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|']'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'key'
op|'='
name|'str'
op|'('
name|'instance'
op|'['
string|"'key_name'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'key'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'['
name|'key'
op|']'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'result'
op|'['
name|'key'
op|']'
op|'='
op|'['
name|'line'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_trigger_refresh_security_group
dedent|''
name|'def'
name|'_trigger_refresh_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'security_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nodes'
op|'='
name|'set'
op|'('
op|'['
name|'instance'
op|'['
string|"'host'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'security_group'
op|'.'
name|'instances'
nl|'\n'
name|'if'
name|'instance'
op|'['
string|"'host'"
op|']'
name|'is'
name|'not'
name|'None'
op|']'
op|')'
newline|'\n'
name|'for'
name|'node'
name|'in'
name|'nodes'
op|':'
newline|'\n'
indent|'            '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
string|"'%s.%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'node'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_security_group"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"security_group_id"'
op|':'
name|'security_group'
op|'.'
name|'id'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_metadata
dedent|''
dedent|''
name|'def'
name|'get_metadata'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_instance'
op|'('
name|'ctxt'
op|','
name|'address'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'mpi'
op|'='
name|'self'
op|'.'
name|'_get_mpi_data'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'instance_ref'
op|'['
string|"'key_name'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
op|'{'
string|"'0'"
op|':'
op|'{'
string|"'_name'"
op|':'
name|'instance_ref'
op|'['
string|"'key_name'"
op|']'
op|','
nl|'\n'
string|"'openssh-key'"
op|':'
name|'instance_ref'
op|'['
string|"'key_data'"
op|']'
op|'}'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'keys'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'hostname'
op|'='
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
name|'floating_ip'
op|'='
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'ec2_id'
op|'='
name|'internal_id_to_ec2_id'
op|'('
name|'instance_ref'
op|'['
string|"'internal_id'"
op|']'
op|')'
newline|'\n'
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'user-data'"
op|':'
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'instance_ref'
op|'['
string|"'user_data'"
op|']'
op|')'
op|','
nl|'\n'
string|"'meta-data'"
op|':'
op|'{'
nl|'\n'
string|"'ami-id'"
op|':'
name|'instance_ref'
op|'['
string|"'image_id'"
op|']'
op|','
nl|'\n'
string|"'ami-launch-index'"
op|':'
name|'instance_ref'
op|'['
string|"'launch_index'"
op|']'
op|','
nl|'\n'
string|"'ami-manifest-path'"
op|':'
string|"'FIXME'"
op|','
nl|'\n'
string|"'block-device-mapping'"
op|':'
op|'{'
nl|'\n'
comment|'# TODO(vish): replace with real data'
nl|'\n'
string|"'ami'"
op|':'
string|"'sda1'"
op|','
nl|'\n'
string|"'ephemeral0'"
op|':'
string|"'sda2'"
op|','
nl|'\n'
string|"'root'"
op|':'
string|"'/dev/sda1'"
op|','
nl|'\n'
string|"'swap'"
op|':'
string|"'sda3'"
op|'}'
op|','
nl|'\n'
string|"'hostname'"
op|':'
name|'hostname'
op|','
nl|'\n'
string|"'instance-action'"
op|':'
string|"'none'"
op|','
nl|'\n'
string|"'instance-id'"
op|':'
name|'ec2_id'
op|','
nl|'\n'
string|"'instance-type'"
op|':'
name|'instance_ref'
op|'['
string|"'instance_type'"
op|']'
op|','
nl|'\n'
string|"'local-hostname'"
op|':'
name|'hostname'
op|','
nl|'\n'
string|"'local-ipv4'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'kernel-id'"
op|':'
name|'instance_ref'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
comment|'# TODO(vish): real zone'
nl|'\n'
string|"'placement'"
op|':'
op|'{'
string|"'availability-zone'"
op|':'
string|"'nova'"
op|'}'
op|','
nl|'\n'
string|"'public-hostname'"
op|':'
name|'hostname'
op|','
nl|'\n'
string|"'public-ipv4'"
op|':'
name|'floating_ip'
name|'or'
string|"''"
op|','
nl|'\n'
string|"'public-keys'"
op|':'
name|'keys'
op|','
nl|'\n'
string|"'ramdisk-id'"
op|':'
name|'instance_ref'
op|'['
string|"'ramdisk_id'"
op|']'
op|','
nl|'\n'
string|"'reservation-id'"
op|':'
name|'instance_ref'
op|'['
string|"'reservation_id'"
op|']'
op|','
nl|'\n'
string|"'security-groups'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'mpi'"
op|':'
name|'mpi'
op|'}'
op|'}'
newline|'\n'
name|'if'
name|'False'
op|':'
comment|'# TODO(vish): store ancestor ids'
newline|'\n'
indent|'            '
name|'data'
op|'['
string|"'ancestor-ami-ids'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'False'
op|':'
comment|'# TODO(vish): store product codes'
newline|'\n'
indent|'            '
name|'data'
op|'['
string|"'product-codes'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|describe_availability_zones
dedent|''
name|'def'
name|'describe_availability_zones'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'availabilityZoneInfo'"
op|':'
op|'['
op|'{'
string|"'zoneName'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'zoneState'"
op|':'
string|"'available'"
op|'}'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_regions
dedent|''
name|'def'
name|'describe_regions'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'region_name'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'FLAGS'
op|'.'
name|'region_list'
op|':'
newline|'\n'
indent|'            '
name|'regions'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'region'
name|'in'
name|'FLAGS'
op|'.'
name|'region_list'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'_sep'
op|','
name|'url'
op|'='
name|'region'
op|'.'
name|'partition'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'regions'
op|'.'
name|'append'
op|'('
op|'{'
string|"'regionName'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'regionEndpoint'"
op|':'
name|'url'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'regions'
op|'='
op|'['
op|'{'
string|"'regionName'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'regionEndpoint'"
op|':'
name|'FLAGS'
op|'.'
name|'ec2_url'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'region_name'
op|':'
newline|'\n'
indent|'            '
name|'regions'
op|'='
op|'['
name|'r'
name|'for'
name|'r'
name|'in'
name|'regions'
name|'if'
name|'r'
op|'['
string|"'regionName'"
op|']'
name|'in'
name|'region_name'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'regionInfo'"
op|':'
name|'regions'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_snapshots
dedent|''
name|'def'
name|'describe_snapshots'
op|'('
name|'self'
op|','
nl|'\n'
name|'context'
op|','
nl|'\n'
name|'snapshot_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'owner'
op|'='
name|'None'
op|','
nl|'\n'
name|'restorable_by'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'snapshotSet'"
op|':'
op|'['
op|'{'
string|"'snapshotId'"
op|':'
string|"'fixme'"
op|','
nl|'\n'
string|"'volumeId'"
op|':'
string|"'fixme'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'fixme'"
op|','
nl|'\n'
string|"'startTime'"
op|':'
string|"'fixme'"
op|','
nl|'\n'
string|"'progress'"
op|':'
string|"'fixme'"
op|','
nl|'\n'
string|"'ownerId'"
op|':'
string|"'fixme'"
op|','
nl|'\n'
string|"'volumeSize'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'fixme'"
op|'}'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_key_pairs
dedent|''
name|'def'
name|'describe_key_pairs'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key_pairs'
op|'='
name|'db'
op|'.'
name|'key_pair_get_all_by_user'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'key_pairs'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'key_pairs'
name|'if'
name|'x'
op|'['
string|"'name'"
op|']'
name|'in'
name|'key_name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key_pair'
name|'in'
name|'key_pairs'
op|':'
newline|'\n'
comment|'# filter out the vpn keys'
nl|'\n'
indent|'            '
name|'suffix'
op|'='
name|'FLAGS'
op|'.'
name|'vpn_key_suffix'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
name|'or'
name|'not'
name|'key_pair'
op|'['
string|"'name'"
op|']'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'keyName'"
op|':'
name|'key_pair'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'keyFingerprint'"
op|':'
name|'key_pair'
op|'['
string|"'fingerprint'"
op|']'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'keypairsSet'"
op|':'
name|'result'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|create_key_pair
dedent|''
name|'def'
name|'create_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'_gen_key'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
op|','
name|'key_name'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'keyName'"
op|':'
name|'key_name'
op|','
nl|'\n'
string|"'keyFingerprint'"
op|':'
name|'data'
op|'['
string|"'fingerprint'"
op|']'
op|','
nl|'\n'
string|"'keyMaterial'"
op|':'
name|'data'
op|'['
string|"'private_key'"
op|']'
op|'}'
newline|'\n'
comment|'# TODO(vish): when context is no longer an object, pass it here'
nl|'\n'
nl|'\n'
DECL|member|delete_key_pair
dedent|''
name|'def'
name|'delete_key_pair'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'key_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'key_pair_destroy'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
op|','
name|'key_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|"# aws returns true even if the key doesn't exist"
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|describe_security_groups
dedent|''
name|'def'
name|'describe_security_groups'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'groups'
op|'='
name|'db'
op|'.'
name|'security_group_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'groups'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'groups'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
name|'g'
op|')'
name|'for'
name|'g'
name|'in'
name|'groups'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'group_name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'groups'
op|'='
op|'['
name|'g'
name|'for'
name|'g'
name|'in'
name|'groups'
name|'if'
name|'g'
op|'.'
name|'name'
name|'in'
name|'group_name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'{'
string|"'securityGroupInfo'"
op|':'
name|'groups'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_security_group
dedent|''
name|'def'
name|'_format_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'g'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'g'
op|'['
string|"'groupDescription'"
op|']'
op|'='
name|'group'
op|'.'
name|'description'
newline|'\n'
name|'g'
op|'['
string|"'groupName'"
op|']'
op|'='
name|'group'
op|'.'
name|'name'
newline|'\n'
name|'g'
op|'['
string|"'ownerId'"
op|']'
op|'='
name|'group'
op|'.'
name|'project_id'
newline|'\n'
name|'g'
op|'['
string|"'ipPermissions'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'r'
op|'['
string|"'ipProtocol'"
op|']'
op|'='
name|'rule'
op|'.'
name|'protocol'
newline|'\n'
name|'r'
op|'['
string|"'fromPort'"
op|']'
op|'='
name|'rule'
op|'.'
name|'from_port'
newline|'\n'
name|'r'
op|'['
string|"'toPort'"
op|']'
op|'='
name|'rule'
op|'.'
name|'to_port'
newline|'\n'
name|'r'
op|'['
string|"'groups'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'r'
op|'['
string|"'ipRanges'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'rule'
op|'.'
name|'group_id'
op|':'
newline|'\n'
indent|'                '
name|'source_group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'context'
op|','
name|'rule'
op|'.'
name|'group_id'
op|')'
newline|'\n'
name|'r'
op|'['
string|"'groups'"
op|']'
op|'+='
op|'['
op|'{'
string|"'groupName'"
op|':'
name|'source_group'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'userId'"
op|':'
name|'source_group'
op|'.'
name|'project_id'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'['
string|"'ipRanges'"
op|']'
op|'+='
op|'['
op|'{'
string|"'cidrIp'"
op|':'
name|'rule'
op|'.'
name|'cidr'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'g'
op|'['
string|"'ipPermissions'"
op|']'
op|'+='
op|'['
name|'r'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'g'
newline|'\n'
nl|'\n'
DECL|member|_revoke_rule_args_to_dict
dedent|''
name|'def'
name|'_revoke_rule_args_to_dict'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'to_port'
op|'='
name|'None'
op|','
name|'from_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'ip_protocol'
op|'='
name|'None'
op|','
name|'cidr_ip'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'source_security_group_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'source_security_group_owner_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'source_security_group_name'
op|':'
newline|'\n'
indent|'            '
name|'source_project_id'
op|'='
name|'self'
op|'.'
name|'_get_source_project_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'source_security_group_owner_id'
op|')'
newline|'\n'
nl|'\n'
name|'source_security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'source_project_id'
op|','
nl|'\n'
name|'source_security_group_name'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'group_id'"
op|']'
op|'='
name|'source_security_group'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'cidr_ip'
op|':'
newline|'\n'
comment|'# If this fails, it throws an exception. This is what we want.'
nl|'\n'
indent|'            '
name|'IPy'
op|'.'
name|'IP'
op|'('
name|'cidr_ip'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'cidr'"
op|']'
op|'='
name|'cidr_ip'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'['
string|"'cidr'"
op|']'
op|'='
string|"'0.0.0.0/0'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ip_protocol'
name|'and'
name|'from_port'
name|'and'
name|'to_port'
op|':'
newline|'\n'
indent|'            '
name|'from_port'
op|'='
name|'int'
op|'('
name|'from_port'
op|')'
newline|'\n'
name|'to_port'
op|'='
name|'int'
op|'('
name|'to_port'
op|')'
newline|'\n'
name|'ip_protocol'
op|'='
name|'str'
op|'('
name|'ip_protocol'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ip_protocol'
op|'.'
name|'upper'
op|'('
op|')'
name|'not'
name|'in'
op|'['
string|"'TCP'"
op|','
string|"'UDP'"
op|','
string|"'ICMP'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InvalidInputException'
op|'('
string|"'%s is not a valid ipProtocol'"
op|'%'
nl|'\n'
op|'('
name|'ip_protocol'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
op|'('
op|'('
name|'min'
op|'('
name|'from_port'
op|','
name|'to_port'
op|')'
op|'<'
op|'-'
number|'1'
op|')'
name|'or'
nl|'\n'
op|'('
name|'max'
op|'('
name|'from_port'
op|','
name|'to_port'
op|')'
op|'>'
number|'65535'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'InvalidInputException'
op|'('
string|"'Invalid port range'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'values'
op|'['
string|"'protocol'"
op|']'
op|'='
name|'ip_protocol'
newline|'\n'
name|'values'
op|'['
string|"'from_port'"
op|']'
op|'='
name|'from_port'
newline|'\n'
name|'values'
op|'['
string|"'to_port'"
op|']'
op|'='
name|'to_port'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If cidr based filtering, protocol and ports are mandatory'
nl|'\n'
indent|'            '
name|'if'
string|"'cidr'"
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
DECL|member|_security_group_rule_exists
dedent|''
name|'def'
name|'_security_group_rule_exists'
op|'('
name|'self'
op|','
name|'security_group'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Indicates whether the specified rule values are already\n           defined in the given security group.\n        """'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'group_id'"
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'rule'
op|'['
string|"'group_id'"
op|']'
op|'=='
name|'values'
op|'['
string|"'group_id'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'is_duplicate'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'key'
name|'in'
op|'('
string|"'cidr'"
op|','
string|"'from_port'"
op|','
string|"'to_port'"
op|','
string|"'protocol'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'rule'
op|'['
name|'key'
op|']'
op|'!='
name|'values'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'is_duplicate'
op|'='
name|'False'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'is_duplicate'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|revoke_security_group_ingress
dedent|''
name|'def'
name|'revoke_security_group_ingress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'group_name'
op|')'
newline|'\n'
nl|'\n'
name|'criteria'
op|'='
name|'self'
op|'.'
name|'_revoke_rule_args_to_dict'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'criteria'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"No rule for the specified parameters."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'rule'
name|'in'
name|'security_group'
op|'.'
name|'rules'
op|':'
newline|'\n'
indent|'            '
name|'match'
op|'='
name|'True'
newline|'\n'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'criteria'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'getattr'
op|'('
name|'rule'
op|','
name|'k'
op|','
name|'False'
op|')'
op|'!='
name|'v'
op|':'
newline|'\n'
indent|'                    '
name|'match'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'security_group_rule_destroy'
op|'('
name|'context'
op|','
name|'rule'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_trigger_refresh_security_group'
op|'('
name|'context'
op|','
name|'security_group'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"No rule for the specified parameters."'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(soren): This has only been tested with Boto as the client.'
nl|'\n'
comment|'#              Unfortunately, it seems Boto is using an old API'
nl|'\n'
comment|'#              for these operations, so support for newer API versions'
nl|'\n'
comment|'#              is sketchy.'
nl|'\n'
DECL|member|authorize_security_group_ingress
dedent|''
name|'def'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'group_name'
op|')'
newline|'\n'
nl|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'_revoke_rule_args_to_dict'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'values'
op|'['
string|"'parent_group_id'"
op|']'
op|'='
name|'security_group'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_security_group_rule_exists'
op|'('
name|'security_group'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'This rule already exists in group %s'"
op|'%'
nl|'\n'
name|'group_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'security_group_rule'
op|'='
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_trigger_refresh_security_group'
op|'('
name|'context'
op|','
name|'security_group'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_get_source_project_id
dedent|''
name|'def'
name|'_get_source_project_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'source_security_group_owner_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'source_security_group_owner_id'
op|':'
newline|'\n'
comment|'# Parse user:project for source group.'
nl|'\n'
indent|'            '
name|'source_parts'
op|'='
name|'source_security_group_owner_id'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
nl|'\n'
comment|"# If no project name specified, assume it's same as user name."
nl|'\n'
comment|"# Since we're looking up by project name, the user name is not"
nl|'\n'
comment|"# used here.  It's only read for EC2 API compatibility."
nl|'\n'
name|'if'
name|'len'
op|'('
name|'source_parts'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'source_project_id'
op|'='
name|'source_parts'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'source_project_id'
op|'='
name|'source_parts'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'source_project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'source_project_id'
newline|'\n'
nl|'\n'
DECL|member|create_security_group
dedent|''
name|'def'
name|'create_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|','
name|'group_description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'if'
name|'db'
op|'.'
name|'security_group_exists'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'project_id'
op|','
name|'group_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'group %s already exists'"
op|'%'
name|'group_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'group'
op|'='
op|'{'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'group_name'
op|','
nl|'\n'
string|"'description'"
op|':'
name|'group_description'
op|'}'
newline|'\n'
name|'group_ref'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'context'
op|','
name|'group'
op|')'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'securityGroupSet'"
op|':'
op|'['
name|'self'
op|'.'
name|'_format_security_group'
op|'('
name|'context'
op|','
nl|'\n'
name|'group_ref'
op|')'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|delete_security_group
dedent|''
name|'def'
name|'delete_security_group'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'group_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'group_name'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'context'
op|','
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# instance_id is passed in as a list of instances'
nl|'\n'
indent|'        '
name|'ec2_id'
op|'='
name|'instance_id'
op|'['
number|'0'
op|']'
newline|'\n'
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
name|'output'
op|'='
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
string|"'%s.%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'host'"
op|']'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"get_console_output"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"instance_id"'
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'now'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'return'
op|'{'
string|'"InstanceId"'
op|':'
name|'ec2_id'
op|','
nl|'\n'
string|'"Timestamp"'
op|':'
name|'now'
op|','
nl|'\n'
string|'"output"'
op|':'
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'output'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_volumes
dedent|''
name|'def'
name|'describe_volumes'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volumes'
op|'='
name|'db'
op|'.'
name|'volume_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'volumes'
op|'='
name|'db'
op|'.'
name|'volume_get_all_by_project'
op|'('
name|'context'
op|','
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'volumes'
op|'='
op|'['
name|'self'
op|'.'
name|'_format_volume'
op|'('
name|'context'
op|','
name|'v'
op|')'
name|'for'
name|'v'
name|'in'
name|'volumes'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'{'
string|"'volumeSet'"
op|':'
name|'volumes'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_volume
dedent|''
name|'def'
name|'_format_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ec2_id'
op|'='
name|'None'
newline|'\n'
name|'instance_data'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'volume'
op|'.'
name|'get'
op|'('
string|"'instance'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'internal_id'
op|'='
name|'volume'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'internal_id'"
op|']'
newline|'\n'
name|'instance_ec2_id'
op|'='
name|'internal_id_to_ec2_id'
op|'('
name|'internal_id'
op|')'
newline|'\n'
name|'instance_data'
op|'='
string|"'%s[%s]'"
op|'%'
op|'('
name|'instance_ec2_id'
op|','
nl|'\n'
name|'volume'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'v'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'v'
op|'['
string|"'volumeId'"
op|']'
op|'='
name|'volume'
op|'['
string|"'ec2_id'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'status'"
op|']'
op|'='
name|'volume'
op|'['
string|"'status'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'size'"
op|']'
op|'='
name|'volume'
op|'['
string|"'size'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'availabilityZone'"
op|']'
op|'='
name|'volume'
op|'['
string|"'availability_zone'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'createTime'"
op|']'
op|'='
name|'volume'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'status'"
op|']'
op|'='
string|"'%s (%s, %s, %s, %s)'"
op|'%'
op|'('
nl|'\n'
name|'volume'
op|'['
string|"'status'"
op|']'
op|','
nl|'\n'
name|'volume'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'volume'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'instance_data'
op|','
nl|'\n'
name|'volume'
op|'['
string|"'mountpoint'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'volume'
op|'['
string|"'attach_status'"
op|']'
op|'=='
string|"'attached'"
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'attachmentSet'"
op|']'
op|'='
op|'['
op|'{'
string|"'attachTime'"
op|':'
name|'volume'
op|'['
string|"'attach_time'"
op|']'
op|','
nl|'\n'
string|"'deleteOnTermination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'volume'
op|'['
string|"'mountpoint'"
op|']'
op|','
nl|'\n'
string|"'instanceId'"
op|':'
name|'instance_ec2_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'attached'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume'
op|'['
string|"'ec2_id'"
op|']'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'v'
op|'['
string|"'attachmentSet'"
op|']'
op|'='
op|'['
op|'{'
op|'}'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'v'
op|'['
string|"'display_name'"
op|']'
op|'='
name|'volume'
op|'['
string|"'display_name'"
op|']'
newline|'\n'
name|'v'
op|'['
string|"'display_description'"
op|']'
op|'='
name|'volume'
op|'['
string|"'display_description'"
op|']'
newline|'\n'
name|'return'
name|'v'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'size'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# check quota'
nl|'\n'
indent|'        '
name|'if'
name|'quota'
op|'.'
name|'allowed_volumes'
op|'('
name|'context'
op|','
number|'1'
op|','
name|'size'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warn'
op|'('
string|'"Quota exceeeded for %s, tried to create %sG volume"'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
name|'size'
op|')'
newline|'\n'
name|'raise'
name|'QuotaError'
op|'('
string|'"Volume quota exceeded. You cannot "'
nl|'\n'
string|'"create a volume of size %s"'
op|'%'
nl|'\n'
name|'size'
op|')'
newline|'\n'
dedent|''
name|'vol'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'vol'
op|'['
string|"'size'"
op|']'
op|'='
name|'size'
newline|'\n'
name|'vol'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
newline|'\n'
name|'vol'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'vol'
op|'['
string|"'availability_zone'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'storage_availability_zone'
newline|'\n'
name|'vol'
op|'['
string|"'status'"
op|']'
op|'='
string|'"creating"'
newline|'\n'
name|'vol'
op|'['
string|"'attach_status'"
op|']'
op|'='
string|'"detached"'
newline|'\n'
name|'vol'
op|'['
string|"'display_name'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'display_name'"
op|')'
newline|'\n'
name|'vol'
op|'['
string|"'display_description'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'display_description'"
op|')'
newline|'\n'
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_create'
op|'('
name|'context'
op|','
name|'vol'
op|')'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'scheduler_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"create_volume"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"topic"'
op|':'
name|'FLAGS'
op|'.'
name|'volume_topic'
op|','
nl|'\n'
string|'"volume_id"'
op|':'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(vish): Instance should be None at db layer instead of'
nl|'\n'
comment|'#             trying to lazy load, but for now we turn it into'
nl|'\n'
comment|'#             a dict to avoid an error.'
nl|'\n'
name|'return'
op|'{'
string|"'volumeSet'"
op|':'
op|'['
name|'self'
op|'.'
name|'_format_volume'
op|'('
name|'context'
op|','
name|'dict'
op|'('
name|'volume_ref'
op|')'
op|')'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance_id'
op|','
name|'device'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_get_by_ec2_id'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
string|'"^/dev/[a-z]d[a-z]+$"'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Invalid device specified: %s. "'
nl|'\n'
string|'"Example device: /dev/vdb"'
op|'%'
name|'device'
op|')'
newline|'\n'
comment|'# TODO(vish): abstract status checking?'
nl|'\n'
dedent|''
name|'if'
name|'volume_ref'
op|'['
string|"'status'"
op|']'
op|'!='
string|'"available"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Volume status must be available"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'volume_ref'
op|'['
string|"'attach_status'"
op|']'
op|'=='
string|'"attached"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Volume is already attached"'
op|')'
newline|'\n'
dedent|''
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
name|'host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"attach_volume"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"volume_id"'
op|':'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|'"instance_id"'
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|'"mountpoint"'
op|':'
name|'device'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'attachTime'"
op|':'
name|'volume_ref'
op|'['
string|"'attach_time'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'volume_ref'
op|'['
string|"'mountpoint'"
op|']'
op|','
nl|'\n'
string|"'instanceId'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'requestId'"
op|':'
name|'context'
op|'.'
name|'request_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'volume_ref'
op|'['
string|"'attach_status'"
op|']'
op|','
nl|'\n'
string|"'volumeId'"
op|':'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_get_by_ec2_id'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'volume_get_instance'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance_ref'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Volume isn\'t attached to anything!"'
op|')'
newline|'\n'
comment|'# TODO(vish): abstract status checking?'
nl|'\n'
dedent|''
name|'if'
name|'volume_ref'
op|'['
string|"'status'"
op|']'
op|'=='
string|'"available"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Volume is already detached"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"detach_volume"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"instance_id"'
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|'"volume_id"'
op|':'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|"# If the instance doesn't exist anymore,"
nl|'\n'
comment|'# then we need to call detach blind'
nl|'\n'
indent|'            '
name|'db'
op|'.'
name|'volume_detached'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'internal_id'
op|'='
name|'instance_ref'
op|'['
string|"'internal_id'"
op|']'
newline|'\n'
name|'ec2_id'
op|'='
name|'internal_id_to_ec2_id'
op|'('
name|'internal_id'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'attachTime'"
op|':'
name|'volume_ref'
op|'['
string|"'attach_time'"
op|']'
op|','
nl|'\n'
string|"'device'"
op|':'
name|'volume_ref'
op|'['
string|"'mountpoint'"
op|']'
op|','
nl|'\n'
string|"'instanceId'"
op|':'
name|'internal_id'
op|','
nl|'\n'
string|"'requestId'"
op|':'
name|'context'
op|'.'
name|'request_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'volume_ref'
op|'['
string|"'attach_status'"
op|']'
op|','
nl|'\n'
string|"'volumeId'"
op|':'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_convert_to_set
dedent|''
name|'def'
name|'_convert_to_set'
op|'('
name|'self'
op|','
name|'lst'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'lst'
op|'=='
name|'None'
name|'or'
name|'lst'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'lst'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lst'
op|'='
op|'['
name|'lst'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|'{'
name|'label'
op|':'
name|'x'
op|'}'
name|'for'
name|'x'
name|'in'
name|'lst'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update_volume
dedent|''
name|'def'
name|'update_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'updatable_fields'
op|'='
op|'['
string|"'display_name'"
op|','
string|"'display_description'"
op|']'
newline|'\n'
name|'changes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'field'
name|'in'
name|'updatable_fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'field'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'                '
name|'changes'
op|'['
name|'field'
op|']'
op|'='
name|'kwargs'
op|'['
name|'field'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'changes'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|describe_instances
dedent|''
name|'def'
name|'describe_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_format_describe_instances'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_format_describe_instances
dedent|''
name|'def'
name|'_format_describe_instances'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'reservationSet'"
op|':'
name|'self'
op|'.'
name|'_format_instances'
op|'('
name|'context'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_format_run_instances
dedent|''
name|'def'
name|'_format_run_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservation_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'self'
op|'.'
name|'_format_instances'
op|'('
name|'context'
op|','
name|'reservation_id'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'i'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'return'
name|'i'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_format_instances
dedent|''
name|'def'
name|'_format_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservation_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reservations'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'reservation_id'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_reservation'
op|'('
name|'context'
op|','
nl|'\n'
name|'reservation_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'instance'
op|'['
string|"'image_id'"
op|']'
op|'=='
name|'FLAGS'
op|'.'
name|'vpn_image_id'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'internal_id'
op|'='
name|'instance'
op|'['
string|"'internal_id'"
op|']'
newline|'\n'
name|'ec2_id'
op|'='
name|'internal_id_to_ec2_id'
op|'('
name|'internal_id'
op|')'
newline|'\n'
name|'i'
op|'['
string|"'instanceId'"
op|']'
op|'='
name|'ec2_id'
newline|'\n'
name|'i'
op|'['
string|"'imageId'"
op|']'
op|'='
name|'instance'
op|'['
string|"'image_id'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'instanceState'"
op|']'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
name|'instance'
op|'['
string|"'state'"
op|']'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'instance'
op|'['
string|"'state_description'"
op|']'
op|'}'
newline|'\n'
name|'fixed_addr'
op|'='
name|'None'
newline|'\n'
name|'floating_addr'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'fixed_ip'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'fixed_addr'
op|'='
name|'instance'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'floating_ips'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'fixed'
op|'='
name|'instance'
op|'['
string|"'fixed_ip'"
op|']'
newline|'\n'
name|'floating_addr'
op|'='
name|'fixed'
op|'['
string|"'floating_ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'['
string|"'privateDnsName'"
op|']'
op|'='
name|'fixed_addr'
newline|'\n'
name|'i'
op|'['
string|"'publicDnsName'"
op|']'
op|'='
name|'floating_addr'
newline|'\n'
name|'i'
op|'['
string|"'dnsName'"
op|']'
op|'='
name|'i'
op|'['
string|"'publicDnsName'"
op|']'
name|'or'
name|'i'
op|'['
string|"'privateDnsName'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'keyName'"
op|']'
op|'='
name|'instance'
op|'['
string|"'key_name'"
op|']'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'i'
op|'['
string|"'keyName'"
op|']'
op|'='
string|"'%s (%s, %s)'"
op|'%'
op|'('
name|'i'
op|'['
string|"'keyName'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'i'
op|'['
string|"'productCodesSet'"
op|']'
op|'='
name|'self'
op|'.'
name|'_convert_to_set'
op|'('
op|'['
op|']'
op|','
string|"'product_codes'"
op|')'
newline|'\n'
name|'i'
op|'['
string|"'instanceType'"
op|']'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'launchTime'"
op|']'
op|'='
name|'instance'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'amiLaunchIndex'"
op|']'
op|'='
name|'instance'
op|'['
string|"'launch_index'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'displayName'"
op|']'
op|'='
name|'instance'
op|'['
string|"'display_name'"
op|']'
newline|'\n'
name|'i'
op|'['
string|"'displayDescription'"
op|']'
op|'='
name|'instance'
op|'['
string|"'display_description'"
op|']'
newline|'\n'
name|'if'
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
name|'not'
name|'in'
name|'reservations'
op|':'
newline|'\n'
indent|'                '
name|'r'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'r'
op|'['
string|"'reservationId'"
op|']'
op|'='
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'ownerId'"
op|']'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'r'
op|'['
string|"'groupSet'"
op|']'
op|'='
name|'self'
op|'.'
name|'_convert_to_set'
op|'('
op|'['
op|']'
op|','
string|"'groups'"
op|')'
newline|'\n'
name|'r'
op|'['
string|"'instancesSet'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'reservations'
op|'['
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|']'
op|'='
name|'r'
newline|'\n'
dedent|''
name|'reservations'
op|'['
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|']'
op|'['
string|"'instancesSet'"
op|']'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'list'
op|'('
name|'reservations'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|describe_addresses
dedent|''
name|'def'
name|'describe_addresses'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'format_addresses'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|format_addresses
dedent|''
name|'def'
name|'format_addresses'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'addresses'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'iterator'
op|'='
name|'db'
op|'.'
name|'floating_ip_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'iterator'
op|'='
name|'db'
op|'.'
name|'floating_ip_get_all_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'floating_ip_ref'
name|'in'
name|'iterator'
op|':'
newline|'\n'
indent|'            '
name|'address'
op|'='
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'instance_id'
op|'='
name|'None'
newline|'\n'
name|'if'
op|'('
name|'floating_ip_ref'
op|'['
string|"'fixed_ip'"
op|']'
nl|'\n'
name|'and'
name|'floating_ip_ref'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'instance'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'internal_id'
op|'='
name|'floating_ip_ref'
op|'['
string|"'fixed_ip'"
op|']'
op|'['
string|"'instance'"
op|']'
op|'['
string|"'ec2_id'"
op|']'
newline|'\n'
name|'ec2_id'
op|'='
name|'internal_id_to_ec2_id'
op|'('
name|'internal_id'
op|')'
newline|'\n'
dedent|''
name|'address_rv'
op|'='
op|'{'
string|"'public_ip'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'ec2_id'
op|'}'
newline|'\n'
name|'if'
name|'context'
op|'.'
name|'user'
op|'.'
name|'is_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'details'
op|'='
string|'"%s (%s)"'
op|'%'
op|'('
name|'address_rv'
op|'['
string|"'instance_id'"
op|']'
op|','
nl|'\n'
name|'floating_ip_ref'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'address_rv'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'details'
newline|'\n'
dedent|''
name|'addresses'
op|'.'
name|'append'
op|'('
name|'address_rv'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'addressesSet'"
op|':'
name|'addresses'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|allocate_address
dedent|''
name|'def'
name|'allocate_address'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# check quota'
nl|'\n'
indent|'        '
name|'if'
name|'quota'
op|'.'
name|'allowed_floating_ips'
op|'('
name|'context'
op|','
number|'1'
op|')'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warn'
op|'('
string|'"Quota exceeeded for %s, tried to allocate address"'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'raise'
name|'QuotaError'
op|'('
string|'"Address quota exceeded. You cannot "'
nl|'\n'
string|'"allocate any more addresses"'
op|')'
newline|'\n'
dedent|''
name|'network_topic'
op|'='
name|'self'
op|'.'
name|'_get_network_topic'
op|'('
name|'context'
op|')'
newline|'\n'
name|'public_ip'
op|'='
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"allocate_floating_ip"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"project_id"'
op|':'
name|'context'
op|'.'
name|'project_id'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'addressSet'"
op|':'
op|'['
op|'{'
string|"'publicIp'"
op|':'
name|'public_ip'
op|'}'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|release_address
dedent|''
name|'def'
name|'release_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'public_ip'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish): Should we make sure this works?'
nl|'\n'
indent|'        '
name|'floating_ip_ref'
op|'='
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'context'
op|','
name|'public_ip'
op|')'
newline|'\n'
name|'network_topic'
op|'='
name|'self'
op|'.'
name|'_get_network_topic'
op|'('
name|'context'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"deallocate_floating_ip"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"floating_address"'
op|':'
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'releaseResponse'"
op|':'
op|'['
string|'"Address released."'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'ec2_id'
op|','
name|'public_ip'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
name|'fixed_address'
op|'='
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'floating_ip_ref'
op|'='
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'context'
op|','
name|'public_ip'
op|')'
newline|'\n'
name|'network_topic'
op|'='
name|'self'
op|'.'
name|'_get_network_topic'
op|'('
name|'context'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"associate_floating_ip"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"floating_address"'
op|':'
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|'"fixed_address"'
op|':'
name|'fixed_address'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'associateResponse'"
op|':'
op|'['
string|'"Address associated."'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'public_ip'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floating_ip_ref'
op|'='
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'context'
op|','
name|'public_ip'
op|')'
newline|'\n'
name|'network_topic'
op|'='
name|'self'
op|'.'
name|'_get_network_topic'
op|'('
name|'context'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"disassociate_floating_ip"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"floating_address"'
op|':'
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'disassociateResponse'"
op|':'
op|'['
string|'"Address disassociated."'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_network_topic
dedent|''
name|'def'
name|'_get_network_topic'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the network host for a project"""'
newline|'\n'
name|'network_ref'
op|'='
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'get_network'
op|'('
name|'context'
op|')'
newline|'\n'
name|'host'
op|'='
name|'network_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'not'
name|'host'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'rpc'
op|'.'
name|'call'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"set_network_host"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"network_id"'
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'network_topic'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_default_security_group
dedent|''
name|'def'
name|'_ensure_default_security_group'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'default'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'default'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'default'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_instances
dedent|''
dedent|''
name|'def'
name|'run_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'instance_type'"
op|','
string|"'m1.small'"
op|')'
newline|'\n'
name|'if'
name|'instance_type'
name|'not'
name|'in'
name|'INSTANCE_TYPES'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Unknown instance type: %s"'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
comment|'# check quota'
nl|'\n'
dedent|''
name|'max_instances'
op|'='
name|'int'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'max_count'"
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'min_instances'
op|'='
name|'int'
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'min_count'"
op|','
name|'max_instances'
op|')'
op|')'
newline|'\n'
name|'num_instances'
op|'='
name|'quota'
op|'.'
name|'allowed_instances'
op|'('
name|'context'
op|','
nl|'\n'
name|'max_instances'
op|','
nl|'\n'
name|'instance_type'
op|')'
newline|'\n'
name|'if'
name|'num_instances'
op|'<'
name|'min_instances'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warn'
op|'('
string|'"Quota exceeeded for %s, tried to run %s instances"'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
name|'min_instances'
op|')'
newline|'\n'
name|'raise'
name|'QuotaError'
op|'('
string|'"Instance quota exceeded. You can only "'
nl|'\n'
string|'"run %s more instances of this type."'
op|'%'
nl|'\n'
name|'num_instances'
op|','
string|'"InstanceLimitExceeded"'
op|')'
newline|'\n'
comment|'# make sure user can access the image'
nl|'\n'
comment|"# vpn image is private so it doesn't show up on lists"
nl|'\n'
dedent|''
name|'vpn'
op|'='
name|'kwargs'
op|'['
string|"'image_id'"
op|']'
op|'=='
name|'FLAGS'
op|'.'
name|'vpn_image_id'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'vpn'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'='
name|'images'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'kwargs'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(ja): if image is vpn, this breaks'
nl|'\n'
comment|'# get defaults from imagestore'
nl|'\n'
dedent|''
name|'image_id'
op|'='
name|'image'
op|'['
string|"'imageId'"
op|']'
newline|'\n'
name|'kernel_id'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'kernelId'"
op|','
name|'FLAGS'
op|'.'
name|'default_kernel'
op|')'
newline|'\n'
name|'ramdisk_id'
op|'='
name|'image'
op|'.'
name|'get'
op|'('
string|"'ramdiskId'"
op|','
name|'FLAGS'
op|'.'
name|'default_ramdisk'
op|')'
newline|'\n'
nl|'\n'
comment|'# API parameters overrides of defaults'
nl|'\n'
name|'kernel_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'kernel_id'"
op|','
name|'kernel_id'
op|')'
newline|'\n'
name|'ramdisk_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'ramdisk_id'"
op|','
name|'ramdisk_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure we have access to kernel and ramdisk'
nl|'\n'
name|'images'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'kernel_id'
op|')'
newline|'\n'
name|'images'
op|'.'
name|'get'
op|'('
name|'context'
op|','
name|'ramdisk_id'
op|')'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Going to run %s instances..."'
op|','
name|'num_instances'
op|')'
newline|'\n'
name|'launch_time'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|','
name|'time'
op|'.'
name|'gmtime'
op|'('
op|')'
op|')'
newline|'\n'
name|'key_data'
op|'='
name|'None'
newline|'\n'
name|'if'
string|"'key_name'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'key_pair_ref'
op|'='
name|'db'
op|'.'
name|'key_pair_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
op|','
nl|'\n'
name|'kwargs'
op|'['
string|"'key_name'"
op|']'
op|')'
newline|'\n'
name|'key_data'
op|'='
name|'key_pair_ref'
op|'['
string|"'public_key'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'security_group_arg'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'security_group'"
op|','
op|'['
string|'"default"'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'type'
op|'('
name|'security_group_arg'
op|')'
name|'is'
name|'list'
op|':'
newline|'\n'
indent|'            '
name|'security_group_arg'
op|'='
op|'['
name|'security_group_arg'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'security_groups'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_ensure_default_security_group'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'security_group_name'
name|'in'
name|'security_group_arg'
op|':'
newline|'\n'
indent|'            '
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'context'
op|','
nl|'\n'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
name|'security_groups'
op|'.'
name|'append'
op|'('
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reservation_id'
op|'='
name|'utils'
op|'.'
name|'generate_uid'
op|'('
string|"'r'"
op|')'
newline|'\n'
name|'base_options'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'base_options'
op|'['
string|"'state_description'"
op|']'
op|'='
string|"'scheduling'"
newline|'\n'
name|'base_options'
op|'['
string|"'image_id'"
op|']'
op|'='
name|'image_id'
newline|'\n'
name|'base_options'
op|'['
string|"'kernel_id'"
op|']'
op|'='
name|'kernel_id'
newline|'\n'
name|'base_options'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
name|'ramdisk_id'
newline|'\n'
name|'base_options'
op|'['
string|"'reservation_id'"
op|']'
op|'='
name|'reservation_id'
newline|'\n'
name|'base_options'
op|'['
string|"'key_data'"
op|']'
op|'='
name|'key_data'
newline|'\n'
name|'base_options'
op|'['
string|"'key_name'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'key_name'"
op|','
name|'None'
op|')'
newline|'\n'
name|'base_options'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'context'
op|'.'
name|'user'
op|'.'
name|'id'
newline|'\n'
name|'base_options'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'base_options'
op|'['
string|"'user_data'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'user_data'"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'base_options'
op|'['
string|"'display_name'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'display_name'"
op|')'
newline|'\n'
name|'base_options'
op|'['
string|"'display_description'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'display_description'"
op|')'
newline|'\n'
nl|'\n'
name|'type_data'
op|'='
name|'INSTANCE_TYPES'
op|'['
name|'instance_type'
op|']'
newline|'\n'
name|'base_options'
op|'['
string|"'instance_type'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
name|'base_options'
op|'['
string|"'memory_mb'"
op|']'
op|'='
name|'type_data'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
name|'base_options'
op|'['
string|"'vcpus'"
op|']'
op|'='
name|'type_data'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
name|'base_options'
op|'['
string|"'local_gb'"
op|']'
op|'='
name|'type_data'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'num'
name|'in'
name|'range'
op|'('
name|'num_instances'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'compute_manager'
op|'.'
name|'create_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'security_groups'
op|','
nl|'\n'
name|'mac_address'
op|'='
name|'utils'
op|'.'
name|'generate_mac'
op|'('
op|')'
op|','
nl|'\n'
name|'launch_index'
op|'='
name|'num'
op|','
nl|'\n'
op|'**'
name|'base_options'
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'internal_id'
op|'='
name|'instance_ref'
op|'['
string|"'internal_id'"
op|']'
newline|'\n'
name|'ec2_id'
op|'='
name|'internal_id_to_ec2_id'
op|'('
name|'internal_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_manager'
op|'.'
name|'update_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_id'
op|','
nl|'\n'
name|'hostname'
op|'='
name|'ec2_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(vish): This probably should be done in the scheduler'
nl|'\n'
comment|'#             or in compute as a call.  The network should be'
nl|'\n'
comment|'#             allocated after the host is assigned and setup'
nl|'\n'
comment|'#             can happen at the same time.'
nl|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_id'
op|','
nl|'\n'
name|'vpn'
op|')'
newline|'\n'
name|'network_topic'
op|'='
name|'self'
op|'.'
name|'_get_network_topic'
op|'('
name|'context'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'elevated'
op|','
nl|'\n'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"setup_fixed_ip"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"address"'
op|':'
name|'address'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'scheduler_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"run_instance"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"topic"'
op|':'
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
string|'"instance_id"'
op|':'
name|'inst_id'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Casting to scheduler for %s/%s\'s instance %s"'
op|'%'
nl|'\n'
op|'('
name|'context'
op|'.'
name|'project'
op|'.'
name|'name'
op|','
name|'context'
op|'.'
name|'user'
op|'.'
name|'name'
op|','
name|'inst_id'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_format_run_instances'
op|'('
name|'context'
op|','
name|'reservation_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|terminate_instances
dedent|''
name|'def'
name|'terminate_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Terminate each instance in instance_id, which is a list of ec2 ids.\n\n        instance_id is a kwarg so its name cannot be modified.\n        """'
newline|'\n'
name|'ec2_id_list'
op|'='
name|'instance_id'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Going to start terminating instances"'
op|')'
newline|'\n'
name|'for'
name|'id_str'
name|'in'
name|'ec2_id_list'
op|':'
newline|'\n'
indent|'            '
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'id_str'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Going to try and terminate %s"'
op|'%'
name|'id_str'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'('
name|'context'
op|','
nl|'\n'
name|'internal_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'warning'
op|'('
string|'"Instance %s was not found during terminate"'
op|','
nl|'\n'
name|'id_str'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'instance_ref'
op|'['
string|"'state_description'"
op|']'
op|'=='
string|"'terminating'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'warning'
op|'('
string|'"Instance %s is already being terminated"'
op|','
nl|'\n'
name|'id_str'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_manager'
op|'.'
name|'update_instance'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'state_description'
op|'='
string|"'terminating'"
op|','
nl|'\n'
name|'state'
op|'='
number|'0'
op|','
nl|'\n'
name|'terminated_at'
op|'='
name|'now'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(ja): where should network deallocate occur?'
nl|'\n'
name|'address'
op|'='
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Disassociating address %s"'
op|'%'
name|'address'
op|')'
newline|'\n'
comment|"# NOTE(vish): Right now we don't really care if the ip is"
nl|'\n'
comment|'#             disassociated.  We may need to worry about'
nl|'\n'
comment|'#             checking this later.  Perhaps in the scheduler?'
nl|'\n'
name|'network_topic'
op|'='
name|'self'
op|'.'
name|'_get_network_topic'
op|'('
name|'context'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'network_topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"disassociate_floating_ip"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"floating_address"'
op|':'
name|'address'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'address'
op|'='
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Deallocating address %s"'
op|'%'
name|'address'
op|')'
newline|'\n'
comment|'# NOTE(vish): Currently, nothing needs to be done on the'
nl|'\n'
comment|'#             network node until release. If this changes,'
nl|'\n'
comment|'#             we will need to cast here.'
nl|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'host'
op|'='
name|'instance_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'if'
name|'host'
op|':'
newline|'\n'
indent|'                '
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"terminate_instance"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"instance_id"'
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|reboot_instances
dedent|''
name|'def'
name|'reboot_instances'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""instance_id is a list of instance ids"""'
newline|'\n'
name|'for'
name|'ec2_id'
name|'in'
name|'instance_id'
op|':'
newline|'\n'
indent|'            '
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'cloud'
op|'.'
name|'reboot'
op|'('
name|'internal_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|rescue_instance
dedent|''
name|'def'
name|'rescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is an extension to the normal ec2_api"""'
newline|'\n'
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'cloud'
op|'.'
name|'rescue'
op|'('
name|'internal_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|unrescue_instance
dedent|''
name|'def'
name|'unrescue_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is an extension to the normal ec2_api"""'
newline|'\n'
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'instance_id'
op|')'
newline|'\n'
name|'cloud'
op|'.'
name|'unrescue'
op|'('
name|'internal_id'
op|','
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|update_instance
dedent|''
name|'def'
name|'update_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'ec2_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'updatable_fields'
op|'='
op|'['
string|"'display_name'"
op|','
string|"'display_description'"
op|']'
newline|'\n'
name|'changes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'field'
name|'in'
name|'updatable_fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'field'
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'                '
name|'changes'
op|'['
name|'field'
op|']'
op|'='
name|'kwargs'
op|'['
name|'field'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'changes'
op|':'
newline|'\n'
indent|'            '
name|'internal_id'
op|'='
name|'ec2_id_to_internal_id'
op|'('
name|'ec2_id'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'('
name|'context'
op|','
name|'internal_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'inst'
op|'['
string|"'id'"
op|']'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# TODO: return error if not authorized'
nl|'\n'
indent|'        '
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_get_by_ec2_id'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'if'
name|'volume_ref'
op|'['
string|"'status'"
op|']'
op|'!='
string|'"available"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'"Volume status must be available"'
op|')'
newline|'\n'
dedent|''
name|'now'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'status'"
op|':'
string|"'deleting'"
op|','
nl|'\n'
string|"'terminated_at'"
op|':'
name|'now'
op|'}'
op|')'
newline|'\n'
name|'host'
op|'='
name|'volume_ref'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'FLAGS'
op|'.'
name|'volume_topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"delete_volume"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"volume_id"'
op|':'
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|describe_images
dedent|''
name|'def'
name|'describe_images'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# The objectstore does its own authorization for describe'
nl|'\n'
indent|'        '
name|'imageSet'
op|'='
name|'images'
op|'.'
name|'list'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'imagesSet'"
op|':'
name|'imageSet'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|deregister_image
dedent|''
name|'def'
name|'deregister_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: should the objectstore be doing these authorization checks?'
nl|'\n'
indent|'        '
name|'images'
op|'.'
name|'deregister'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'imageId'"
op|':'
name|'image_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|register_image
dedent|''
name|'def'
name|'register_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_location'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: should the objectstore be doing these authorization checks?'
nl|'\n'
indent|'        '
name|'if'
name|'image_location'
name|'is'
name|'None'
name|'and'
string|"'name'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'image_location'
op|'='
name|'kwargs'
op|'['
string|"'name'"
op|']'
newline|'\n'
dedent|''
name|'image_id'
op|'='
name|'images'
op|'.'
name|'register'
op|'('
name|'context'
op|','
name|'image_location'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Registered %s as %s"'
op|'%'
op|'('
name|'image_location'
op|','
name|'image_id'
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
string|"'imageId'"
op|':'
name|'image_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|describe_image_attribute
dedent|''
name|'def'
name|'describe_image_attribute'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'attribute'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attribute'
op|'!='
string|"'launchPermission'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'attribute not supported: %s'"
op|'%'
name|'attribute'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'='
name|'images'
op|'.'
name|'list'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'invalid id: %s'"
op|'%'
name|'image_id'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'='
op|'{'
string|"'image_id'"
op|':'
name|'image_id'
op|','
string|"'launchPermission'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'if'
name|'image'
op|'['
string|"'isPublic'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'launchPermission'"
op|']'
op|'.'
name|'append'
op|'('
op|'{'
string|"'group'"
op|':'
string|"'all'"
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|modify_image_attribute
dedent|''
name|'def'
name|'modify_image_attribute'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'attribute'
op|','
nl|'\n'
name|'operation_type'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|"# TODO(devcamcar): Support users and groups other than 'all'."
nl|'\n'
indent|'        '
name|'if'
name|'attribute'
op|'!='
string|"'launchPermission'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'attribute not supported: %s'"
op|'%'
name|'attribute'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
string|"'user_group'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'user or group not specified'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'kwargs'
op|'['
string|"'user_group'"
op|']'
op|')'
op|'!='
number|'1'
name|'and'
name|'kwargs'
op|'['
string|"'user_group'"
op|']'
op|'['
number|'0'
op|']'
op|'!='
string|"'all'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|'\'only group "all" is supported\''
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'operation_type'
name|'in'
op|'['
string|"'add'"
op|','
string|"'remove'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ApiError'
op|'('
string|"'operation_type must be add or remove'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'images'
op|'.'
name|'modify'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'operation_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_image
dedent|''
name|'def'
name|'update_image'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'images'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'dict'
op|'('
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

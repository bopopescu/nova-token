begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Quotas for instances, and floating ips."""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LE'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|quota_opts
name|'quota_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_instances'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of instances allowed per project'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_cores'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'20'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of instance cores allowed per project'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_ram'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'50'
op|'*'
number|'1024'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Megabytes of instance RAM allowed per project'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_floating_ips'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of floating IPs allowed per project'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_fixed_ips'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
op|'('
string|"'Number of fixed IPs allowed per project (this should be '"
nl|'\n'
string|"'at least the number of instances allowed)'"
op|')'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_metadata_items'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'128'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of metadata items allowed per instance'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_injected_files'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of injected files allowed'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_injected_file_content_bytes'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|'*'
number|'1024'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of bytes allowed per injected file'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_injected_file_path_length'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'255'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Length of injected file path'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_security_groups'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of security groups per project'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_security_group_rules'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'20'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of security rules per security group'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_key_pairs'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'100'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of key pairs per user'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_server_groups'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of server groups per project'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'quota_server_group_members'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of servers per server group'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'reservation_expire'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'86400'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds until a reservation expires'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'until_refresh'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Count of reservations until usage is refreshed'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'max_age'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of seconds between subsequent usage refreshes'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'quota_driver'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.quota.DbQuotaDriver'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Default driver to use for quota checks'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'quota_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DbQuotaDriver
name|'class'
name|'DbQuotaDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver to perform necessary checks to enforce quotas and obtain\n    quota information.  The default driver utilizes the local\n    database.\n    """'
newline|'\n'
DECL|variable|UNLIMITED_VALUE
name|'UNLIMITED_VALUE'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|get_by_project_and_user
name|'def'
name|'get_by_project_and_user'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by project and user."""'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'quota_get'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'resource'
op|','
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_by_project
dedent|''
name|'def'
name|'get_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by project."""'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'quota_get'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_by_class
dedent|''
name|'def'
name|'get_by_class'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'quota_class'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by quota class."""'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'quota_class_get'
op|'('
name|'context'
op|','
name|'quota_class'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_defaults
dedent|''
name|'def'
name|'get_defaults'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the default quotas.\n        Use the class quotas named `_DEFAULT_QUOTA_NAME` as default quotas,\n        if it exists.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        """'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'default_quotas'
op|'='
name|'db'
op|'.'
name|'quota_class_get_default'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
name|'default_quotas'
op|'.'
name|'get'
op|'('
name|'resource'
op|'.'
name|'name'
op|','
nl|'\n'
name|'resource'
op|'.'
name|'default'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|get_class_quotas
dedent|''
name|'def'
name|'get_class_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'quota_class'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the quotas for the given\n        quota class.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param quota_class: The name of the quota class to return\n                            quotas for.\n        :param defaults: If True, the default value will be reported\n                         if there is no specific value for the\n                         resource.\n        """'
newline|'\n'
nl|'\n'
name|'quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'class_quotas'
op|'='
name|'db'
op|'.'
name|'quota_class_get_all_by_name'
op|'('
name|'context'
op|','
name|'quota_class'
op|')'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'defaults'
name|'or'
name|'resource'
op|'.'
name|'name'
name|'in'
name|'class_quotas'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
name|'class_quotas'
op|'.'
name|'get'
op|'('
name|'resource'
op|'.'
name|'name'
op|','
nl|'\n'
name|'resource'
op|'.'
name|'default'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|_process_quotas
dedent|''
name|'def'
name|'_process_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
name|'quotas'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'None'
op|','
name|'defaults'
op|'='
name|'True'
op|','
name|'usages'
op|'='
name|'None'
op|','
nl|'\n'
name|'remains'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modified_quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Get the quotas for the appropriate class.  If the project ID'
nl|'\n'
comment|'# matches the one in the context, we use the quota_class from'
nl|'\n'
comment|'# the context, otherwise, we use the provided quota_class (if'
nl|'\n'
comment|'# any)'
nl|'\n'
name|'if'
name|'project_id'
op|'=='
name|'context'
op|'.'
name|'project_id'
op|':'
newline|'\n'
indent|'            '
name|'quota_class'
op|'='
name|'context'
op|'.'
name|'quota_class'
newline|'\n'
dedent|''
name|'if'
name|'quota_class'
op|':'
newline|'\n'
indent|'            '
name|'class_quotas'
op|'='
name|'db'
op|'.'
name|'quota_class_get_all_by_name'
op|'('
name|'context'
op|','
name|'quota_class'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'class_quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'default_quotas'
op|'='
name|'self'
op|'.'
name|'get_defaults'
op|'('
name|'context'
op|','
name|'resources'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Omit default/quota class values'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'defaults'
name|'and'
name|'resource'
op|'.'
name|'name'
name|'not'
name|'in'
name|'quotas'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'limit'
op|'='
name|'quotas'
op|'.'
name|'get'
op|'('
name|'resource'
op|'.'
name|'name'
op|','
name|'class_quotas'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'resource'
op|'.'
name|'name'
op|','
name|'default_quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|')'
op|')'
newline|'\n'
name|'modified_quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
name|'dict'
op|'('
name|'limit'
op|'='
name|'limit'
op|')'
newline|'\n'
nl|'\n'
comment|'# Include usages if desired.  This is optional because one'
nl|'\n'
comment|'# internal consumer of this interface wants to access the'
nl|'\n'
comment|'# usages directly from inside a transaction.'
nl|'\n'
name|'if'
name|'usages'
op|':'
newline|'\n'
indent|'                '
name|'usage'
op|'='
name|'usages'
op|'.'
name|'get'
op|'('
name|'resource'
op|'.'
name|'name'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'modified_quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'.'
name|'update'
op|'('
nl|'\n'
name|'in_use'
op|'='
name|'usage'
op|'.'
name|'get'
op|'('
string|"'in_use'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
name|'reserved'
op|'='
name|'usage'
op|'.'
name|'get'
op|'('
string|"'reserved'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
comment|'# Initialize remains quotas.'
nl|'\n'
dedent|''
name|'if'
name|'remains'
op|':'
newline|'\n'
indent|'                '
name|'modified_quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'.'
name|'update'
op|'('
name|'remains'
op|'='
name|'limit'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'remains'
op|':'
newline|'\n'
indent|'            '
name|'all_quotas'
op|'='
name|'db'
op|'.'
name|'quota_get_all'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'for'
name|'quota'
name|'in'
name|'all_quotas'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'quota'
op|'.'
name|'resource'
name|'in'
name|'modified_quotas'
op|':'
newline|'\n'
indent|'                    '
name|'modified_quotas'
op|'['
name|'quota'
op|'.'
name|'resource'
op|']'
op|'['
string|"'remains'"
op|']'
op|'-='
name|'quota'
op|'.'
name|'hard_limit'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'modified_quotas'
newline|'\n'
nl|'\n'
DECL|member|get_user_quotas
dedent|''
name|'def'
name|'get_user_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
name|'user_id'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'None'
op|','
name|'defaults'
op|'='
name|'True'
op|','
nl|'\n'
name|'usages'
op|'='
name|'True'
op|','
name|'project_quotas'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_quotas'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the quotas for the given\n        user and project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param user_id: The ID of the user to return quotas for.\n        :param quota_class: If project_id != context.project_id, the\n                            quota class cannot be determined.  This\n                            parameter allows it to be specified.  It\n                            will be ignored if project_id ==\n                            context.project_id.\n        :param defaults: If True, the quota class value (or the\n                         default value, if there is no value from the\n                         quota class) will be reported if there is no\n                         specific value for the resource.\n        :param usages: If True, the current in_use and reserved counts\n                       will also be returned.\n        :param project_quotas: Quotas dictionary for the specified project.\n        :param user_quotas: Quotas dictionary for the specified project\n                            and user.\n        """'
newline|'\n'
name|'user_quotas'
op|'='
name|'user_quotas'
name|'or'
name|'db'
op|'.'
name|'quota_get_all_by_project_and_user'
op|'('
nl|'\n'
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|')'
newline|'\n'
comment|'# Use the project quota for default user quota.'
nl|'\n'
name|'proj_quotas'
op|'='
name|'project_quotas'
name|'or'
name|'db'
op|'.'
name|'quota_get_all_by_project'
op|'('
nl|'\n'
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'proj_quotas'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'user_quotas'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'user_quotas'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'user_usages'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'usages'
op|':'
newline|'\n'
indent|'            '
name|'user_usages'
op|'='
name|'db'
op|'.'
name|'quota_usage_get_all_by_project_and_user'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
nl|'\n'
name|'user_quotas'
op|','
name|'quota_class'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'defaults'
op|','
name|'usages'
op|'='
name|'user_usages'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_project_quotas
dedent|''
name|'def'
name|'get_project_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'None'
op|','
name|'defaults'
op|'='
name|'True'
op|','
nl|'\n'
name|'usages'
op|'='
name|'True'
op|','
name|'remains'
op|'='
name|'False'
op|','
name|'project_quotas'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the quotas for the given\n        project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param quota_class: If project_id != context.project_id, the\n                            quota class cannot be determined.  This\n                            parameter allows it to be specified.  It\n                            will be ignored if project_id ==\n                            context.project_id.\n        :param defaults: If True, the quota class value (or the\n                         default value, if there is no value from the\n                         quota class) will be reported if there is no\n                         specific value for the resource.\n        :param usages: If True, the current in_use and reserved counts\n                       will also be returned.\n        :param remains: If True, the current remains of the project will\n                        will be returned.\n        :param project_quotas: Quotas dictionary for the specified project.\n        """'
newline|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
name|'or'
name|'db'
op|'.'
name|'quota_get_all_by_project'
op|'('
nl|'\n'
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'project_usages'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'usages'
op|':'
newline|'\n'
indent|'            '
name|'project_usages'
op|'='
name|'db'
op|'.'
name|'quota_usage_get_all_by_project'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
nl|'\n'
name|'project_quotas'
op|','
name|'quota_class'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'defaults'
op|','
name|'usages'
op|'='
name|'project_usages'
op|','
nl|'\n'
name|'remains'
op|'='
name|'remains'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_is_unlimited_value
dedent|''
name|'def'
name|'_is_unlimited_value'
op|'('
name|'self'
op|','
name|'v'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A helper method to check for unlimited value.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'v'
op|'<='
name|'self'
op|'.'
name|'UNLIMITED_VALUE'
newline|'\n'
nl|'\n'
DECL|member|_sum_quota_values
dedent|''
name|'def'
name|'_sum_quota_values'
op|'('
name|'self'
op|','
name|'v1'
op|','
name|'v2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A helper method that handles unlimited values when performing\n        sum operation.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_unlimited_value'
op|'('
name|'v1'
op|')'
name|'or'
name|'self'
op|'.'
name|'_is_unlimited_value'
op|'('
name|'v2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'UNLIMITED_VALUE'
newline|'\n'
dedent|''
name|'return'
name|'v1'
op|'+'
name|'v2'
newline|'\n'
nl|'\n'
DECL|member|_sub_quota_values
dedent|''
name|'def'
name|'_sub_quota_values'
op|'('
name|'self'
op|','
name|'v1'
op|','
name|'v2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A helper method that handles unlimited values when performing\n        subtraction operation.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_unlimited_value'
op|'('
name|'v1'
op|')'
name|'or'
name|'self'
op|'.'
name|'_is_unlimited_value'
op|'('
name|'v2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'UNLIMITED_VALUE'
newline|'\n'
dedent|''
name|'return'
name|'v1'
op|'-'
name|'v2'
newline|'\n'
nl|'\n'
DECL|member|get_settable_quotas
dedent|''
name|'def'
name|'get_settable_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the range of settable quotas for\n        the given user or project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param user_id: The ID of the user to return quotas for.\n        """'
newline|'\n'
nl|'\n'
name|'settable_quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'db_proj_quotas'
op|'='
name|'db'
op|'.'
name|'quota_get_all_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'project_quotas'
op|'='
name|'self'
op|'.'
name|'get_project_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
nl|'\n'
name|'project_id'
op|','
name|'remains'
op|'='
name|'True'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'db_proj_quotas'
op|')'
newline|'\n'
name|'if'
name|'user_id'
op|':'
newline|'\n'
indent|'            '
name|'setted_quotas'
op|'='
name|'db'
op|'.'
name|'quota_get_all_by_project_and_user'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|')'
newline|'\n'
name|'user_quotas'
op|'='
name|'self'
op|'.'
name|'get_user_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
nl|'\n'
name|'project_id'
op|','
name|'user_id'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'db_proj_quotas'
op|','
nl|'\n'
name|'user_quotas'
op|'='
name|'setted_quotas'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'user_quotas'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'maximum'
op|'='
name|'self'
op|'.'
name|'_sum_quota_values'
op|'('
name|'project_quotas'
op|'['
name|'key'
op|']'
op|'['
string|"'remains'"
op|']'
op|','
nl|'\n'
name|'setted_quotas'
op|'.'
name|'get'
op|'('
name|'key'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'minimum'
op|'='
name|'value'
op|'['
string|"'in_use'"
op|']'
op|'+'
name|'value'
op|'['
string|"'reserved'"
op|']'
newline|'\n'
name|'settable_quotas'
op|'['
name|'key'
op|']'
op|'='
op|'{'
string|"'minimum'"
op|':'
name|'minimum'
op|','
string|"'maximum'"
op|':'
name|'maximum'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'project_quotas'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'minimum'
op|'='
name|'max'
op|'('
name|'int'
op|'('
name|'self'
op|'.'
name|'_sub_quota_values'
op|'('
name|'value'
op|'['
string|"'limit'"
op|']'
op|','
nl|'\n'
name|'value'
op|'['
string|"'remains'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
name|'int'
op|'('
name|'value'
op|'['
string|"'in_use'"
op|']'
op|'+'
name|'value'
op|'['
string|"'reserved'"
op|']'
op|')'
op|')'
newline|'\n'
name|'settable_quotas'
op|'['
name|'key'
op|']'
op|'='
op|'{'
string|"'minimum'"
op|':'
name|'minimum'
op|','
string|"'maximum'"
op|':'
op|'-'
number|'1'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'settable_quotas'
newline|'\n'
nl|'\n'
DECL|member|_get_quotas
dedent|''
name|'def'
name|'_get_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'keys'
op|','
name|'has_sync'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|','
name|'project_quotas'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A helper method which retrieves the quotas for the specific\n        resources identified by keys, and which apply to the current\n        context.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param keys: A list of the desired quotas to retrieve.\n        :param has_sync: If True, indicates that the resource must\n                         have a sync function; if False, indicates\n                         that the resource must NOT have a sync\n                         function.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        :param project_quotas: Quotas dictionary for the specified project.\n        """'
newline|'\n'
nl|'\n'
comment|'# Filter resources'
nl|'\n'
name|'if'
name|'has_sync'
op|':'
newline|'\n'
indent|'            '
name|'sync_filt'
op|'='
name|'lambda'
name|'x'
op|':'
name|'hasattr'
op|'('
name|'x'
op|','
string|"'sync'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sync_filt'
op|'='
name|'lambda'
name|'x'
op|':'
name|'not'
name|'hasattr'
op|'('
name|'x'
op|','
string|"'sync'"
op|')'
newline|'\n'
dedent|''
name|'desired'
op|'='
name|'set'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'sub_resources'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'resources'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'if'
name|'k'
name|'in'
name|'desired'
name|'and'
name|'sync_filt'
op|'('
name|'v'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we accounted for all of them...'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'keys'
op|')'
op|'!='
name|'len'
op|'('
name|'sub_resources'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unknown'
op|'='
name|'desired'
op|'-'
name|'set'
op|'('
name|'sub_resources'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'QuotaResourceUnknown'
op|'('
name|'unknown'
op|'='
name|'sorted'
op|'('
name|'unknown'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'user_id'
op|':'
newline|'\n'
comment|'# Grab and return the quotas (without usages)'
nl|'\n'
indent|'            '
name|'quotas'
op|'='
name|'self'
op|'.'
name|'get_user_quotas'
op|'('
name|'context'
op|','
name|'sub_resources'
op|','
nl|'\n'
name|'project_id'
op|','
name|'user_id'
op|','
nl|'\n'
name|'context'
op|'.'
name|'quota_class'
op|','
name|'usages'
op|'='
name|'False'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Grab and return the quotas (without usages)'
nl|'\n'
indent|'            '
name|'quotas'
op|'='
name|'self'
op|'.'
name|'get_project_quotas'
op|'('
name|'context'
op|','
name|'sub_resources'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'context'
op|'.'
name|'quota_class'
op|','
nl|'\n'
name|'usages'
op|'='
name|'False'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|'['
string|"'limit'"
op|']'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'quotas'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|limit_check
dedent|''
name|'def'
name|'limit_check'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'values'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check simple quota limits.\n\n        For limits--those quotas for which there is no usage\n        synchronization function--this method checks that a set of\n        proposed values are permitted by the limit restriction.\n\n        This method will raise a QuotaResourceUnknown exception if a\n        given resource is unknown or if it is not a simple limit\n        resource.\n\n        If any of the proposed values is over the defined quota, an\n        OverQuota exception will be raised with the sorted list of the\n        resources which are too high.  Otherwise, the method returns\n        nothing.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param values: A dictionary of the values to check against the\n                       quota.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
name|'_valid_method_call_check_resources'
op|'('
name|'values'
op|','
string|"'check'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure no value is less than zero'
nl|'\n'
name|'unders'
op|'='
op|'['
name|'key'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'values'
op|'.'
name|'items'
op|'('
op|')'
name|'if'
name|'val'
op|'<'
number|'0'
op|']'
newline|'\n'
name|'if'
name|'unders'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidQuotaValue'
op|'('
name|'unders'
op|'='
name|'sorted'
op|'('
name|'unders'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# If project_id is None, then we use the project_id in context'
nl|'\n'
dedent|''
name|'if'
name|'project_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
comment|'# If user id is None, then we use the user_id in context'
nl|'\n'
dedent|''
name|'if'
name|'user_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'user_id'
op|'='
name|'context'
op|'.'
name|'user_id'
newline|'\n'
nl|'\n'
comment|'# Get the applicable quotas'
nl|'\n'
dedent|''
name|'project_quotas'
op|'='
name|'db'
op|'.'
name|'quota_get_all_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'quotas'
op|'='
name|'self'
op|'.'
name|'_get_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'values'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
name|'has_sync'
op|'='
name|'False'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
op|')'
newline|'\n'
name|'user_quotas'
op|'='
name|'self'
op|'.'
name|'_get_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'values'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
name|'has_sync'
op|'='
name|'False'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the quotas and construct a list of the resources that'
nl|'\n'
comment|'# would be put over limit by the desired values'
nl|'\n'
name|'overs'
op|'='
op|'['
name|'key'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'values'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'if'
name|'quotas'
op|'['
name|'key'
op|']'
op|'>='
number|'0'
name|'and'
name|'quotas'
op|'['
name|'key'
op|']'
op|'<'
name|'val'
name|'or'
nl|'\n'
op|'('
name|'user_quotas'
op|'['
name|'key'
op|']'
op|'>='
number|'0'
name|'and'
name|'user_quotas'
op|'['
name|'key'
op|']'
op|'<'
name|'val'
op|')'
op|']'
newline|'\n'
name|'if'
name|'overs'
op|':'
newline|'\n'
indent|'            '
name|'headroom'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'overs'
op|':'
newline|'\n'
indent|'                '
name|'headroom'
op|'['
name|'key'
op|']'
op|'='
name|'min'
op|'('
nl|'\n'
name|'val'
name|'for'
name|'val'
name|'in'
op|'('
name|'quotas'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|','
name|'project_quotas'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
op|')'
nl|'\n'
name|'if'
name|'val'
name|'is'
name|'not'
name|'None'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'OverQuota'
op|'('
name|'overs'
op|'='
name|'sorted'
op|'('
name|'overs'
op|')'
op|','
name|'quotas'
op|'='
name|'quotas'
op|','
nl|'\n'
name|'usages'
op|'='
op|'{'
op|'}'
op|','
name|'headroom'
op|'='
name|'headroom'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reserve
dedent|''
dedent|''
name|'def'
name|'reserve'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'deltas'
op|','
name|'expire'
op|'='
name|'None'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check quotas and reserve resources.\n\n        For counting quotas--those quotas for which there is a usage\n        synchronization function--this method checks quotas against\n        current usage and the desired deltas.\n\n        This method will raise a QuotaResourceUnknown exception if a\n        given resource is unknown or if it does not have a usage\n        synchronization function.\n\n        If any of the proposed values is over the defined quota, an\n        OverQuota exception will be raised with the sorted list of the\n        resources which are too high.  Otherwise, the method returns a\n        list of reservation UUIDs which were created.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param deltas: A dictionary of the proposed delta changes.\n        :param expire: An optional parameter specifying an expiration\n                       time for the reservations.  If it is a simple\n                       number, it is interpreted as a number of\n                       seconds and added to the current time; if it is\n                       a datetime.timedelta object, it will also be\n                       added to the current time.  A datetime.datetime\n                       object will be interpreted as the absolute\n                       expiration time.  If None is specified, the\n                       default expiration time set by\n                       --default-reservation-expire will be used (this\n                       value will be treated as a number of seconds).\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
name|'_valid_method_call_check_resources'
op|'('
name|'deltas'
op|','
string|"'reserve'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up the reservation expiration'
nl|'\n'
name|'if'
name|'expire'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'expire'
op|'='
name|'CONF'
op|'.'
name|'reservation_expire'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'expire'
op|','
op|'('
name|'int'
op|','
name|'long'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expire'
op|'='
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
name|'expire'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'expire'
op|','
name|'datetime'
op|'.'
name|'timedelta'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expire'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'expire'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'expire'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidReservationExpiration'
op|'('
name|'expire'
op|'='
name|'expire'
op|')'
newline|'\n'
nl|'\n'
comment|'# If project_id is None, then we use the project_id in context'
nl|'\n'
dedent|''
name|'if'
name|'project_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
comment|'# If user_id is None, then we use the project_id in context'
nl|'\n'
dedent|''
name|'if'
name|'user_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'user_id'
op|'='
name|'context'
op|'.'
name|'user_id'
newline|'\n'
nl|'\n'
comment|'# Get the applicable quotas.'
nl|'\n'
comment|"# NOTE(Vek): We're not worried about races at this point."
nl|'\n'
comment|'#            Yes, the admin may be in the process of reducing'
nl|'\n'
comment|"#            quotas, but that's a pretty rare thing."
nl|'\n'
dedent|''
name|'project_quotas'
op|'='
name|'db'
op|'.'
name|'quota_get_all_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'quotas'
op|'='
name|'self'
op|'.'
name|'_get_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'deltas'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
name|'has_sync'
op|'='
name|'True'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
op|')'
newline|'\n'
name|'user_quotas'
op|'='
name|'self'
op|'.'
name|'_get_quotas'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'deltas'
op|'.'
name|'keys'
op|'('
op|')'
op|','
nl|'\n'
name|'has_sync'
op|'='
name|'True'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|','
nl|'\n'
name|'project_quotas'
op|'='
name|'project_quotas'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(Vek): Most of the work here has to be done in the DB'
nl|'\n'
comment|'#            API, because we have to do it in a transaction,'
nl|'\n'
comment|'#            which means access to the session.  Since the'
nl|'\n'
comment|"#            session isn't available outside the DBAPI, we"
nl|'\n'
comment|'#            have to do the work there.'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'quota_reserve'
op|'('
name|'context'
op|','
name|'resources'
op|','
name|'quotas'
op|','
name|'user_quotas'
op|','
nl|'\n'
name|'deltas'
op|','
name|'expire'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'until_refresh'
op|','
name|'CONF'
op|'.'
name|'max_age'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Commit reservations.\n\n        :param context: The request context, for access checks.\n        :param reservations: A list of the reservation UUIDs, as\n                             returned by the reserve() method.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
comment|'# If project_id is None, then we use the project_id in context'
nl|'\n'
name|'if'
name|'project_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
comment|'# If user_id is None, then we use the user_id in context'
nl|'\n'
dedent|''
name|'if'
name|'user_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'user_id'
op|'='
name|'context'
op|'.'
name|'user_id'
newline|'\n'
nl|'\n'
dedent|''
name|'db'
op|'.'
name|'reservation_commit'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback
dedent|''
name|'def'
name|'rollback'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Roll back reservations.\n\n        :param context: The request context, for access checks.\n        :param reservations: A list of the reservation UUIDs, as\n                             returned by the reserve() method.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
comment|'# If project_id is None, then we use the project_id in context'
nl|'\n'
name|'if'
name|'project_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'project_id'
op|'='
name|'context'
op|'.'
name|'project_id'
newline|'\n'
comment|'# If user_id is None, then we use the user_id in context'
nl|'\n'
dedent|''
name|'if'
name|'user_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'user_id'
op|'='
name|'context'
op|'.'
name|'user_id'
newline|'\n'
nl|'\n'
dedent|''
name|'db'
op|'.'
name|'reservation_rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|usage_reset
dedent|''
name|'def'
name|'usage_reset'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the usage records for a particular user on a list of\n        resources.  This will force that user\'s usage records to be\n        refreshed the next time a reservation is made.\n\n        Note: this does not affect the currently outstanding\n        reservations the user has; those reservations must be\n        committed or rolled back (or expired).\n\n        :param context: The request context, for access checks.\n        :param resources: A list of the resource names for which the\n                          usage must be reset.\n        """'
newline|'\n'
nl|'\n'
comment|'# We need an elevated context for the calls to'
nl|'\n'
comment|'# quota_usage_update()'
nl|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# Reset the usage to -1, which will force it to be'
nl|'\n'
comment|'# refreshed'
nl|'\n'
indent|'                '
name|'db'
op|'.'
name|'quota_usage_update'
op|'('
name|'elevated'
op|','
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'resource'
op|','
name|'in_use'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'QuotaUsageNotFound'
op|':'
newline|'\n'
comment|"# That means it'll be refreshed anyway"
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|destroy_all_by_project_and_user
dedent|''
dedent|''
dedent|''
name|'def'
name|'destroy_all_by_project_and_user'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy all quotas, usages, and reservations associated with a\n        project and user.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project being deleted.\n        :param user_id: The ID of the user being deleted.\n        """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'quota_destroy_all_by_project_and_user'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy_all_by_project
dedent|''
name|'def'
name|'destroy_all_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy all quotas, usages, and reservations associated with a\n        project.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project being deleted.\n        """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'quota_destroy_all_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expire
dedent|''
name|'def'
name|'expire'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Expire reservations.\n\n        Explores all currently existing reservations and rolls back\n        any that have expired.\n\n        :param context: The request context, for access checks.\n        """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'reservation_expire'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoopQuotaDriver
dedent|''
dedent|''
name|'class'
name|'NoopQuotaDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Driver that turns quotas calls into no-ops and pretends that quotas\n    for all resources are unlimited.  This can be used if you do not\n    wish to have any quota checking.  For instance, with nova compute\n    cells, the parent cell should do quota checking, but the child cell\n    should not.\n    """'
newline|'\n'
nl|'\n'
DECL|member|get_by_project_and_user
name|'def'
name|'get_by_project_and_user'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by project and user."""'
newline|'\n'
comment|'# Unlimited'
nl|'\n'
name|'return'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|get_by_project
dedent|''
name|'def'
name|'get_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by project."""'
newline|'\n'
comment|'# Unlimited'
nl|'\n'
name|'return'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|get_by_class
dedent|''
name|'def'
name|'get_by_class'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'quota_class'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by quota class."""'
newline|'\n'
comment|'# Unlimited'
nl|'\n'
name|'return'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|get_defaults
dedent|''
name|'def'
name|'get_defaults'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the default quotas.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        """'
newline|'\n'
name|'quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|get_class_quotas
dedent|''
name|'def'
name|'get_class_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'quota_class'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the quotas for the given\n        quota class.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param quota_class: The name of the quota class to return\n                            quotas for.\n        :param defaults: If True, the default value will be reported\n                         if there is no specific value for the\n                         resource.\n        """'
newline|'\n'
name|'quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|_get_noop_quotas
dedent|''
name|'def'
name|'_get_noop_quotas'
op|'('
name|'self'
op|','
name|'resources'
op|','
name|'usages'
op|'='
name|'None'
op|','
name|'remains'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'['
string|"'limit'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'if'
name|'usages'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'['
string|"'in_use'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'['
string|"'reserved'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'remains'
op|':'
newline|'\n'
indent|'                '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'['
string|"'remains'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|get_user_quotas
dedent|''
name|'def'
name|'get_user_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
name|'user_id'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'None'
op|','
name|'defaults'
op|'='
name|'True'
op|','
nl|'\n'
name|'usages'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the quotas for the given\n        user and project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param user_id: The ID of the user to return quotas for.\n        :param quota_class: If project_id != context.project_id, the\n                            quota class cannot be determined.  This\n                            parameter allows it to be specified.  It\n                            will be ignored if project_id ==\n                            context.project_id.\n        :param defaults: If True, the quota class value (or the\n                         default value, if there is no value from the\n                         quota class) will be reported if there is no\n                         specific value for the resource.\n        :param usages: If True, the current in_use and reserved counts\n                       will also be returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_noop_quotas'
op|'('
name|'resources'
op|','
name|'usages'
op|'='
name|'usages'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_project_quotas
dedent|''
name|'def'
name|'get_project_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'None'
op|','
name|'defaults'
op|'='
name|'True'
op|','
nl|'\n'
name|'usages'
op|'='
name|'True'
op|','
name|'remains'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the quotas for the given\n        project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param quota_class: If project_id != context.project_id, the\n                            quota class cannot be determined.  This\n                            parameter allows it to be specified.  It\n                            will be ignored if project_id ==\n                            context.project_id.\n        :param defaults: If True, the quota class value (or the\n                         default value, if there is no value from the\n                         quota class) will be reported if there is no\n                         specific value for the resource.\n        :param usages: If True, the current in_use and reserved counts\n                       will also be returned.\n        :param remains: If True, the current remains of the project will\n                        will be returned.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_get_noop_quotas'
op|'('
name|'resources'
op|','
name|'usages'
op|'='
name|'usages'
op|','
name|'remains'
op|'='
name|'remains'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_settable_quotas
dedent|''
name|'def'
name|'get_settable_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the range of settable quotas for\n        the given user or project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param user_id: The ID of the user to return quotas for.\n        """'
newline|'\n'
name|'quotas'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'quotas'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
op|'{'
string|"'minimum'"
op|':'
number|'0'
op|','
string|"'maximum'"
op|':'
op|'-'
number|'1'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'quotas'
newline|'\n'
nl|'\n'
DECL|member|limit_check
dedent|''
name|'def'
name|'limit_check'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'values'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check simple quota limits.\n\n        For limits--those quotas for which there is no usage\n        synchronization function--this method checks that a set of\n        proposed values are permitted by the limit restriction.\n\n        This method will raise a QuotaResourceUnknown exception if a\n        given resource is unknown or if it is not a simple limit\n        resource.\n\n        If any of the proposed values is over the defined quota, an\n        OverQuota exception will be raised with the sorted list of the\n        resources which are too high.  Otherwise, the method returns\n        nothing.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param values: A dictionary of the values to check against the\n                       quota.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|reserve
dedent|''
name|'def'
name|'reserve'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|','
name|'deltas'
op|','
name|'expire'
op|'='
name|'None'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check quotas and reserve resources.\n\n        For counting quotas--those quotas for which there is a usage\n        synchronization function--this method checks quotas against\n        current usage and the desired deltas.\n\n        This method will raise a QuotaResourceUnknown exception if a\n        given resource is unknown or if it does not have a usage\n        synchronization function.\n\n        If any of the proposed values is over the defined quota, an\n        OverQuota exception will be raised with the sorted list of the\n        resources which are too high.  Otherwise, the method returns a\n        list of reservation UUIDs which were created.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param deltas: A dictionary of the proposed delta changes.\n        :param expire: An optional parameter specifying an expiration\n                       time for the reservations.  If it is a simple\n                       number, it is interpreted as a number of\n                       seconds and added to the current time; if it is\n                       a datetime.timedelta object, it will also be\n                       added to the current time.  A datetime.datetime\n                       object will be interpreted as the absolute\n                       expiration time.  If None is specified, the\n                       default expiration time set by\n                       --default-reservation-expire will be used (this\n                       value will be treated as a number of seconds).\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Commit reservations.\n\n        :param context: The request context, for access checks.\n        :param reservations: A list of the reservation UUIDs, as\n                             returned by the reserve() method.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|rollback
dedent|''
name|'def'
name|'rollback'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Roll back reservations.\n\n        :param context: The request context, for access checks.\n        :param reservations: A list of the reservation UUIDs, as\n                             returned by the reserve() method.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|usage_reset
dedent|''
name|'def'
name|'usage_reset'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the usage records for a particular user on a list of\n        resources.  This will force that user\'s usage records to be\n        refreshed the next time a reservation is made.\n\n        Note: this does not affect the currently outstanding\n        reservations the user has; those reservations must be\n        committed or rolled back (or expired).\n\n        :param context: The request context, for access checks.\n        :param resources: A list of the resource names for which the\n                          usage must be reset.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|destroy_all_by_project_and_user
dedent|''
name|'def'
name|'destroy_all_by_project_and_user'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy all quotas, usages, and reservations associated with a\n        project and user.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project being deleted.\n        :param user_id: The ID of the user being deleted.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|destroy_all_by_project
dedent|''
name|'def'
name|'destroy_all_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy all quotas, usages, and reservations associated with a\n        project.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project being deleted.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|expire
dedent|''
name|'def'
name|'expire'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Expire reservations.\n\n        Explores all currently existing reservations and rolls back\n        any that have expired.\n\n        :param context: The request context, for access checks.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseResource
dedent|''
dedent|''
name|'class'
name|'BaseResource'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describe a single resource for quota checking."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'flag'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializes a Resource.\n\n        :param name: The name of the resource, i.e., "instances".\n        :param flag: The name of the flag or configuration option\n                     which specifies the default value of the quota\n                     for this resource.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'flag'
op|'='
name|'flag'
newline|'\n'
nl|'\n'
DECL|member|quota
dedent|''
name|'def'
name|'quota'
op|'('
name|'self'
op|','
name|'driver'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a driver and context, obtain the quota for this\n        resource.\n\n        :param driver: A quota driver.\n        :param context: The request context.\n        :param project_id: The project to obtain the quota value for.\n                           If not provided, it is taken from the\n                           context.  If it is given as None, no\n                           project-specific quota will be searched\n                           for.\n        :param quota_class: The quota class corresponding to the\n                            project, or for which the quota is to be\n                            looked up.  If not provided, it is taken\n                            from the context.  If it is given as None,\n                            no quota class-specific quota will be\n                            searched for.  Note that the quota class\n                            defaults to the value in the context,\n                            which may not correspond to the project if\n                            project_id is not the same as the one in\n                            the context.\n        """'
newline|'\n'
nl|'\n'
comment|'# Get the project ID'
nl|'\n'
name|'project_id'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'project_id'"
op|','
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ditto for the quota class'
nl|'\n'
name|'quota_class'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'quota_class'"
op|','
name|'context'
op|'.'
name|'quota_class'
op|')'
newline|'\n'
nl|'\n'
comment|'# Look up the quota for the project'
nl|'\n'
name|'if'
name|'project_id'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'driver'
op|'.'
name|'get_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProjectQuotaNotFound'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Try for the quota class'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'quota_class'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'driver'
op|'.'
name|'get_by_class'
op|'('
name|'context'
op|','
name|'quota_class'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'QuotaClassNotFound'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# OK, return the default'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'default'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|default
name|'def'
name|'default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the default value of the quota."""'
newline|'\n'
nl|'\n'
name|'return'
name|'CONF'
op|'['
name|'self'
op|'.'
name|'flag'
op|']'
name|'if'
name|'self'
op|'.'
name|'flag'
name|'else'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReservableResource
dedent|''
dedent|''
name|'class'
name|'ReservableResource'
op|'('
name|'BaseResource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describe a reservable resource."""'
newline|'\n'
DECL|variable|valid_method
name|'valid_method'
op|'='
string|"'reserve'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'sync'
op|','
name|'flag'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializes a ReservableResource.\n\n        Reservable resources are those resources which directly\n        correspond to objects in the database, i.e., instances,\n        cores, etc.\n\n        Usage synchronization function must be associated with each\n        object. This function will be called to determine the current\n        counts of one or more resources. This association is done in\n        database backend.\n\n        The usage synchronization function will be passed three\n        arguments: an admin context, the project ID, and an opaque\n        session object, which should in turn be passed to the\n        underlying database function.  Synchronization functions\n        should return a dictionary mapping resource names to the\n        current in_use count for those resources; more than one\n        resource and resource count may be returned.  Note that\n        synchronization functions may be associated with more than one\n        ReservableResource.\n\n        :param name: The name of the resource, i.e., "volumes".\n        :param sync: A dbapi methods name which returns a dictionary\n                     to resynchronize the in_use count for one or more\n                     resources, as described above.\n        :param flag: The name of the flag or configuration option\n                     which specifies the default value of the quota\n                     for this resource.\n        """'
newline|'\n'
name|'super'
op|'('
name|'ReservableResource'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'name'
op|','
name|'flag'
op|'='
name|'flag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sync'
op|'='
name|'sync'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AbsoluteResource
dedent|''
dedent|''
name|'class'
name|'AbsoluteResource'
op|'('
name|'BaseResource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describe a non-reservable resource."""'
newline|'\n'
DECL|variable|valid_method
name|'valid_method'
op|'='
string|"'check'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CountableResource
dedent|''
name|'class'
name|'CountableResource'
op|'('
name|'AbsoluteResource'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describe a resource where the counts aren\'t based solely on the\n    project ID.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'count'
op|','
name|'flag'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializes a CountableResource.\n\n        Countable resources are those resources which directly\n        correspond to objects in the database, i.e., instances, cores,\n        etc., but for which a count by project ID is inappropriate.  A\n        CountableResource must be constructed with a counting\n        function, which will be called to determine the current counts\n        of the resource.\n\n        The counting function will be passed the context, along with\n        the extra positional and keyword arguments that are passed to\n        Quota.count().  It should return an integer specifying the\n        count.\n\n        Note that this counting is not performed in a transaction-safe\n        manner.  This resource class is a temporary measure to provide\n        required functionality, until a better approach to solving\n        this problem can be evolved.\n\n        :param name: The name of the resource, i.e., "instances".\n        :param count: A callable which returns the count of the\n                      resource.  The arguments passed are as described\n                      above.\n        :param flag: The name of the flag or configuration option\n                     which specifies the default value of the quota\n                     for this resource.\n        """'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'CountableResource'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'name'
op|','
name|'flag'
op|'='
name|'flag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'count'
op|'='
name|'count'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuotaEngine
dedent|''
dedent|''
name|'class'
name|'QuotaEngine'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Represent the set of recognized quotas."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'quota_driver_class'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize a Quota object."""'
newline|'\n'
name|'self'
op|'.'
name|'_resources'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_driver_cls'
op|'='
name|'quota_driver_class'
newline|'\n'
name|'self'
op|'.'
name|'__driver'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_driver
name|'def'
name|'_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'__driver'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'__driver'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_driver_cls'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_cls'
op|'='
name|'CONF'
op|'.'
name|'quota_driver'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'_driver_cls'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_cls'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'self'
op|'.'
name|'_driver_cls'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'__driver'
op|'='
name|'self'
op|'.'
name|'_driver_cls'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__driver'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'resource'
name|'in'
name|'self'
op|'.'
name|'_resources'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'_resources'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_resources'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|register_resource
dedent|''
dedent|''
name|'def'
name|'register_resource'
op|'('
name|'self'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a resource."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_resources'
op|'['
name|'resource'
op|'.'
name|'name'
op|']'
op|'='
name|'resource'
newline|'\n'
nl|'\n'
DECL|member|register_resources
dedent|''
name|'def'
name|'register_resources'
op|'('
name|'self'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a list of resources."""'
newline|'\n'
nl|'\n'
name|'for'
name|'resource'
name|'in'
name|'resources'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_resource'
op|'('
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_by_project_and_user
dedent|''
dedent|''
name|'def'
name|'get_by_project_and_user'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by project and user."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_by_project_and_user'
op|'('
name|'context'
op|','
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_by_project
dedent|''
name|'def'
name|'get_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by project."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_by_class
dedent|''
name|'def'
name|'get_by_class'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'quota_class'
op|','
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a specific quota by quota class."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_by_class'
op|'('
name|'context'
op|','
name|'quota_class'
op|','
name|'resource'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_defaults
dedent|''
name|'def'
name|'get_defaults'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the default quotas.\n\n        :param context: The request context, for access checks.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_defaults'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_class_quotas
dedent|''
name|'def'
name|'get_class_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'quota_class'
op|','
name|'defaults'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the quotas for the given quota class.\n\n        :param context: The request context, for access checks.\n        :param quota_class: The name of the quota class to return\n                            quotas for.\n        :param defaults: If True, the default value will be reported\n                         if there is no specific value for the\n                         resource.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_class_quotas'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|','
nl|'\n'
name|'quota_class'
op|','
name|'defaults'
op|'='
name|'defaults'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_user_quotas
dedent|''
name|'def'
name|'get_user_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|','
name|'quota_class'
op|'='
name|'None'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'True'
op|','
name|'usages'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the quotas for the given user and project.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project to return quotas for.\n        :param user_id: The ID of the user to return quotas for.\n        :param quota_class: If project_id != context.project_id, the\n                            quota class cannot be determined.  This\n                            parameter allows it to be specified.\n        :param defaults: If True, the quota class value (or the\n                         default value, if there is no value from the\n                         quota class) will be reported if there is no\n                         specific value for the resource.\n        :param usages: If True, the current in_use and reserved counts\n                       will also be returned.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_user_quotas'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|','
nl|'\n'
name|'project_id'
op|','
name|'user_id'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'quota_class'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'defaults'
op|','
nl|'\n'
name|'usages'
op|'='
name|'usages'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_project_quotas
dedent|''
name|'def'
name|'get_project_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'quota_class'
op|'='
name|'None'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'True'
op|','
name|'usages'
op|'='
name|'True'
op|','
name|'remains'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieve the quotas for the given project.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project to return quotas for.\n        :param quota_class: If project_id != context.project_id, the\n                            quota class cannot be determined.  This\n                            parameter allows it to be specified.\n        :param defaults: If True, the quota class value (or the\n                         default value, if there is no value from the\n                         quota class) will be reported if there is no\n                         specific value for the resource.\n        :param usages: If True, the current in_use and reserved counts\n                       will also be returned.\n        :param remains: If True, the current remains of the project will\n                        will be returned.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_project_quotas'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'quota_class'
op|'='
name|'quota_class'
op|','
nl|'\n'
name|'defaults'
op|'='
name|'defaults'
op|','
nl|'\n'
name|'usages'
op|'='
name|'usages'
op|','
nl|'\n'
name|'remains'
op|'='
name|'remains'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_settable_quotas
dedent|''
name|'def'
name|'get_settable_quotas'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given a list of resources, retrieve the range of settable quotas for\n        the given user or project.\n\n        :param context: The request context, for access checks.\n        :param resources: A dictionary of the registered resources.\n        :param project_id: The ID of the project to return quotas for.\n        :param user_id: The ID of the user to return quotas for.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'get_settable_quotas'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|count
dedent|''
name|'def'
name|'count'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resource'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Count a resource.\n\n        For countable resources, invokes the count() function and\n        returns its result.  Arguments following the context and\n        resource are passed directly to the count function declared by\n        the resource.\n\n        :param context: The request context, for access checks.\n        :param resource: The name of the resource, as a string.\n        """'
newline|'\n'
nl|'\n'
comment|'# Get the resource'
nl|'\n'
name|'res'
op|'='
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'get'
op|'('
name|'resource'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'res'
name|'or'
name|'not'
name|'hasattr'
op|'('
name|'res'
op|','
string|"'count'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'QuotaResourceUnknown'
op|'('
name|'unknown'
op|'='
op|'['
name|'resource'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'res'
op|'.'
name|'count'
op|'('
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|limit_check
dedent|''
name|'def'
name|'limit_check'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|','
op|'**'
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check simple quota limits.\n\n        For limits--those quotas for which there is no usage\n        synchronization function--this method checks that a set of\n        proposed values are permitted by the limit restriction.  The\n        values to check are given as keyword arguments, where the key\n        identifies the specific quota limit to check, and the value is\n        the proposed value.\n\n        This method will raise a QuotaResourceUnknown exception if a\n        given resource is unknown or if it is not a simple limit\n        resource.\n\n        If any of the proposed values is over the defined quota, an\n        OverQuota exception will be raised with the sorted list of the\n        resources which are too high.  Otherwise, the method returns\n        nothing.\n\n        :param context: The request context, for access checks.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        :param user_id: Specify the user_id if current context\n                        is admin and admin wants to impact on\n                        common user.\n        """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'limit_check'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|','
name|'values'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reserve
dedent|''
name|'def'
name|'reserve'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'expire'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'deltas'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check quotas and reserve resources.\n\n        For counting quotas--those quotas for which there is a usage\n        synchronization function--this method checks quotas against\n        current usage and the desired deltas.  The deltas are given as\n        keyword arguments, and current usage and other reservations\n        are factored into the quota check.\n\n        This method will raise a QuotaResourceUnknown exception if a\n        given resource is unknown or if it does not have a usage\n        synchronization function.\n\n        If any of the proposed values is over the defined quota, an\n        OverQuota exception will be raised with the sorted list of the\n        resources which are too high.  Otherwise, the method returns a\n        list of reservation UUIDs which were created.\n\n        :param context: The request context, for access checks.\n        :param expire: An optional parameter specifying an expiration\n                       time for the reservations.  If it is a simple\n                       number, it is interpreted as a number of\n                       seconds and added to the current time; if it is\n                       a datetime.timedelta object, it will also be\n                       added to the current time.  A datetime.datetime\n                       object will be interpreted as the absolute\n                       expiration time.  If None is specified, the\n                       default expiration time set by\n                       --default-reservation-expire will be used (this\n                       value will be treated as a number of seconds).\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        """'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'reserve'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'_resources'
op|','
name|'deltas'
op|','
nl|'\n'
name|'expire'
op|'='
name|'expire'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Created reservations %s"'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Commit reservations.\n\n        :param context: The request context, for access checks.\n        :param reservations: A list of the reservation UUIDs, as\n                             returned by the reserve() method.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'commit'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# NOTE(Vek): Ignoring exceptions here is safe, because the'
nl|'\n'
comment|'# usage resynchronization and the reservation expiration'
nl|'\n'
comment|'# mechanisms will resolve the issue.  The exception is'
nl|'\n'
comment|'# logged, however, because this is less than optimal.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed to commit reservations %s"'
op|')'
op|','
nl|'\n'
name|'reservations'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Committed reservations %s"'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback
dedent|''
name|'def'
name|'rollback'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'None'
op|','
name|'user_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Roll back reservations.\n\n        :param context: The request context, for access checks.\n        :param reservations: A list of the reservation UUIDs, as\n                             returned by the reserve() method.\n        :param project_id: Specify the project_id if current context\n                           is admin and admin wants to impact on\n                           common user\'s tenant.\n        """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'rollback'
op|'('
name|'context'
op|','
name|'reservations'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'user_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# NOTE(Vek): Ignoring exceptions here is safe, because the'
nl|'\n'
comment|'# usage resynchronization and the reservation expiration'
nl|'\n'
comment|'# mechanisms will resolve the issue.  The exception is'
nl|'\n'
comment|'# logged, however, because this is less than optimal.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_LE'
op|'('
string|'"Failed to roll back reservations %s"'
op|')'
op|','
nl|'\n'
name|'reservations'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Rolled back reservations %s"'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|usage_reset
dedent|''
name|'def'
name|'usage_reset'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resources'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset the usage records for a particular user on a list of\n        resources.  This will force that user\'s usage records to be\n        refreshed the next time a reservation is made.\n\n        Note: this does not affect the currently outstanding\n        reservations the user has; those reservations must be\n        committed or rolled back (or expired).\n\n        :param context: The request context, for access checks.\n        :param resources: A list of the resource names for which the\n                          usage must be reset.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'usage_reset'
op|'('
name|'context'
op|','
name|'resources'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy_all_by_project_and_user
dedent|''
name|'def'
name|'destroy_all_by_project_and_user'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy all quotas, usages, and reservations associated with a\n        project and user.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project being deleted.\n        :param user_id: The ID of the user being deleted.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'destroy_all_by_project_and_user'
op|'('
name|'context'
op|','
nl|'\n'
name|'project_id'
op|','
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|destroy_all_by_project
dedent|''
name|'def'
name|'destroy_all_by_project'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy all quotas, usages, and reservations associated with a\n        project.\n\n        :param context: The request context, for access checks.\n        :param project_id: The ID of the project being deleted.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'destroy_all_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expire
dedent|''
name|'def'
name|'expire'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Expire reservations.\n\n        Explores all currently existing reservations and rolls back\n        any that have expired.\n\n        :param context: The request context, for access checks.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_driver'
op|'.'
name|'expire'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|resources
name|'def'
name|'resources'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'sorted'
op|'('
name|'self'
op|'.'
name|'_resources'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_keypair_get_count_by_user
dedent|''
dedent|''
name|'def'
name|'_keypair_get_count_by_user'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper method to avoid referencing objects.KeyPairList on import."""'
newline|'\n'
name|'return'
name|'objects'
op|'.'
name|'KeyPairList'
op|'.'
name|'get_count_by_user'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_server_group_count_members_by_user
dedent|''
name|'def'
name|'_server_group_count_members_by_user'
op|'('
name|'context'
op|','
name|'group'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper method to avoid referencing objects.InstanceGroup on import."""'
newline|'\n'
name|'return'
name|'group'
op|'.'
name|'count_members_by_user'
op|'('
name|'context'
op|','
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|QUOTAS
dedent|''
name|'QUOTAS'
op|'='
name|'QuotaEngine'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|resources
name|'resources'
op|'='
op|'['
nl|'\n'
name|'ReservableResource'
op|'('
string|"'instances'"
op|','
string|"'_sync_instances'"
op|','
string|"'quota_instances'"
op|')'
op|','
nl|'\n'
name|'ReservableResource'
op|'('
string|"'cores'"
op|','
string|"'_sync_instances'"
op|','
string|"'quota_cores'"
op|')'
op|','
nl|'\n'
name|'ReservableResource'
op|'('
string|"'ram'"
op|','
string|"'_sync_instances'"
op|','
string|"'quota_ram'"
op|')'
op|','
nl|'\n'
name|'ReservableResource'
op|'('
string|"'security_groups'"
op|','
string|"'_sync_security_groups'"
op|','
nl|'\n'
string|"'quota_security_groups'"
op|')'
op|','
nl|'\n'
name|'ReservableResource'
op|'('
string|"'floating_ips'"
op|','
string|"'_sync_floating_ips'"
op|','
nl|'\n'
string|"'quota_floating_ips'"
op|')'
op|','
nl|'\n'
name|'ReservableResource'
op|'('
string|"'fixed_ips'"
op|','
string|"'_sync_fixed_ips'"
op|','
string|"'quota_fixed_ips'"
op|')'
op|','
nl|'\n'
name|'AbsoluteResource'
op|'('
string|"'metadata_items'"
op|','
string|"'quota_metadata_items'"
op|')'
op|','
nl|'\n'
name|'AbsoluteResource'
op|'('
string|"'injected_files'"
op|','
string|"'quota_injected_files'"
op|')'
op|','
nl|'\n'
name|'AbsoluteResource'
op|'('
string|"'injected_file_content_bytes'"
op|','
nl|'\n'
string|"'quota_injected_file_content_bytes'"
op|')'
op|','
nl|'\n'
name|'AbsoluteResource'
op|'('
string|"'injected_file_path_bytes'"
op|','
nl|'\n'
string|"'quota_injected_file_path_length'"
op|')'
op|','
nl|'\n'
name|'CountableResource'
op|'('
string|"'security_group_rules'"
op|','
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_count_by_group'
op|','
nl|'\n'
string|"'quota_security_group_rules'"
op|')'
op|','
nl|'\n'
name|'CountableResource'
op|'('
string|"'key_pairs'"
op|','
name|'_keypair_get_count_by_user'
op|','
nl|'\n'
string|"'quota_key_pairs'"
op|')'
op|','
nl|'\n'
name|'ReservableResource'
op|'('
string|"'server_groups'"
op|','
string|"'_sync_server_groups'"
op|','
nl|'\n'
string|"'quota_server_groups'"
op|')'
op|','
nl|'\n'
name|'CountableResource'
op|'('
string|"'server_group_members'"
op|','
nl|'\n'
name|'_server_group_count_members_by_user'
op|','
nl|'\n'
string|"'quota_server_group_members'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
name|'QUOTAS'
op|'.'
name|'register_resources'
op|'('
name|'resources'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_valid_method_call_check_resource
name|'def'
name|'_valid_method_call_check_resource'
op|'('
name|'name'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
name|'not'
name|'in'
name|'QUOTAS'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidQuotaMethodUsage'
op|'('
name|'method'
op|'='
name|'method'
op|','
name|'res'
op|'='
name|'name'
op|')'
newline|'\n'
dedent|''
name|'res'
op|'='
name|'QUOTAS'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'res'
op|'.'
name|'valid_method'
op|'!='
name|'method'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'InvalidQuotaMethodUsage'
op|'('
name|'method'
op|'='
name|'method'
op|','
name|'res'
op|'='
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_valid_method_call_check_resources
dedent|''
dedent|''
name|'def'
name|'_valid_method_call_check_resources'
op|'('
name|'resource'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A method to check whether the resource can use the quota method."""'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'resource'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_valid_method_call_check_resource'
op|'('
name|'name'
op|','
name|'method'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

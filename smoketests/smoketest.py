begin_unit
comment|'# COPYRIGHT NASA'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'re'
op|','
name|'sys'
op|','
name|'time'
op|','
name|'unittest'
op|','
name|'random'
newline|'\n'
name|'from'
name|'novatestcase'
name|'import'
name|'NovaTestCase'
newline|'\n'
name|'from'
name|'commands'
name|'import'
name|'getstatusoutput'
newline|'\n'
name|'from'
name|'paramiko'
name|'import'
name|'SSHException'
newline|'\n'
name|'from'
name|'zipfile'
name|'import'
name|'ZipFile'
op|','
name|'ZIP_DEFLATED'
newline|'\n'
nl|'\n'
comment|'# TODO: Make endpoint configurable'
nl|'\n'
nl|'\n'
DECL|variable|DEBUG
name|'DEBUG'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|variable|KERNEL_FILENAME
name|'KERNEL_FILENAME'
op|'='
string|"'openwrt-x86-vmlinuz'"
newline|'\n'
DECL|variable|IMAGE_FILENAME
name|'IMAGE_FILENAME'
op|'='
string|"'openwrt-x86-ext2.image'"
newline|'\n'
nl|'\n'
DECL|variable|ZIP_FILENAME
name|'ZIP_FILENAME'
op|'='
string|"'/tmp/nova-x509.zip'"
newline|'\n'
nl|'\n'
DECL|variable|data
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|test_prefix
name|'test_prefix'
op|'='
string|"'test%s'"
op|'%'
name|'int'
op|'('
name|'random'
op|'.'
name|'random'
op|'('
op|')'
op|'*'
number|'1000000'
op|')'
newline|'\n'
DECL|variable|test_username
name|'test_username'
op|'='
string|"'%suser'"
op|'%'
name|'test_prefix'
newline|'\n'
DECL|variable|test_bucket
name|'test_bucket'
op|'='
string|"'%s_bucket'"
op|'%'
name|'test_prefix'
newline|'\n'
DECL|variable|test_key
name|'test_key'
op|'='
string|"'%s_key'"
op|'%'
name|'test_prefix'
newline|'\n'
nl|'\n'
comment|'# Test admin credentials and user creation'
nl|'\n'
DECL|class|UserTests
name|'class'
name|'UserTests'
op|'('
name|'NovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_001_admin_can_connect
indent|'    '
name|'def'
name|'test_001_admin_can_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'admin'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'conn'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_002_admin_can_create_user
dedent|''
name|'def'
name|'test_002_admin_can_create_user'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'userinfo'
op|'='
name|'self'
op|'.'
name|'create_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'userinfo'
op|'.'
name|'username'
op|','
name|'test_username'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_003_user_can_download_credentials
dedent|''
name|'def'
name|'test_003_user_can_download_credentials'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'buf'
op|'='
name|'self'
op|'.'
name|'get_signed_zip'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'output'
op|'='
name|'open'
op|'('
name|'ZIP_FILENAME'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'output'
op|'.'
name|'write'
op|'('
name|'buf'
op|')'
newline|'\n'
name|'output'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'zip'
op|'='
name|'ZipFile'
op|'('
name|'ZIP_FILENAME'
op|','
string|"'a'"
op|','
name|'ZIP_DEFLATED'
op|')'
newline|'\n'
name|'bad'
op|'='
name|'zip'
op|'.'
name|'testzip'
op|'('
op|')'
newline|'\n'
name|'zip'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'bad'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_999_tearDown
dedent|''
name|'def'
name|'test_999_tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'delete_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'get_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'user'
name|'is'
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'ZIP_FILENAME'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Test image bundling, registration, and launching'
nl|'\n'
DECL|class|ImageTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'ImageTests'
op|'('
name|'NovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_000_setUp
indent|'    '
name|'def'
name|'test_000_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'create_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_001_admin_can_bundle_image
dedent|''
name|'def'
name|'test_001_admin_can_bundle_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'bundle_image'
op|'('
name|'IMAGE_FILENAME'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_002_admin_can_upload_image
dedent|''
name|'def'
name|'test_002_admin_can_upload_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'upload_image'
op|'('
name|'test_bucket'
op|','
name|'IMAGE_FILENAME'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_003_admin_can_register_image
dedent|''
name|'def'
name|'test_003_admin_can_register_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_id'
op|'='
name|'self'
op|'.'
name|'register_image'
op|'('
name|'test_bucket'
op|','
name|'IMAGE_FILENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'image_id'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|'='
name|'image_id'
newline|'\n'
nl|'\n'
DECL|member|test_004_admin_can_bundle_kernel
dedent|''
name|'def'
name|'test_004_admin_can_bundle_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'bundle_image'
op|'('
name|'KERNEL_FILENAME'
op|','
name|'kernel'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_005_admin_can_upload_kernel
dedent|''
name|'def'
name|'test_005_admin_can_upload_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'upload_image'
op|'('
name|'test_bucket'
op|','
name|'KERNEL_FILENAME'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_006_admin_can_register_kernel
dedent|''
name|'def'
name|'test_006_admin_can_register_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: registeration should verify that bucket/manifest exists before returning successfully!'
nl|'\n'
indent|'        '
name|'kernel_id'
op|'='
name|'self'
op|'.'
name|'register_image'
op|'('
name|'test_bucket'
op|','
name|'KERNEL_FILENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'kernel_id'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
name|'kernel_id'
newline|'\n'
nl|'\n'
DECL|member|test_007_admin_images_are_available_within_10_seconds
dedent|''
name|'def'
name|'test_007_admin_images_are_available_within_10_seconds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'='
name|'self'
op|'.'
name|'admin'
op|'.'
name|'get_image'
op|'('
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'image'
name|'and'
name|'image'
op|'.'
name|'state'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'print'
name|'image'
op|'.'
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'False'
op|')'
comment|"# wasn't available within 10 seconds"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'image'
op|'.'
name|'type'
op|'=='
string|"'machine'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kernel'
op|'='
name|'self'
op|'.'
name|'admin'
op|'.'
name|'get_image'
op|'('
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'kernel'
name|'and'
name|'kernel'
op|'.'
name|'state'
op|'=='
string|"'available'"
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'False'
op|')'
comment|"# wasn't available within 10 seconds"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'kernel'
op|'.'
name|'type'
op|'=='
string|"'kernel'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_008_images_not_public_by_default
dedent|''
name|'def'
name|'test_008_images_not_public_by_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'images'
op|'='
name|'conn'
op|'.'
name|'get_all_images'
op|'('
name|'image_ids'
op|'='
op|'['
name|'data'
op|'['
string|"'image_id'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'images'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'images'
op|'='
name|'conn'
op|'.'
name|'get_all_images'
op|'('
name|'image_ids'
op|'='
op|'['
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'images'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_009_images_can_be_made_public
dedent|''
name|'def'
name|'test_009_images_can_be_made_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'userconn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'admin'
op|'.'
name|'modify_image_attribute'
op|'('
name|'image_id'
op|'='
name|'data'
op|'['
string|"'image_id'"
op|']'
op|','
nl|'\n'
name|'operation'
op|'='
string|"'add'"
op|','
nl|'\n'
name|'attribute'
op|'='
string|"'launchPermission'"
op|','
nl|'\n'
name|'groups'
op|'='
string|"'all'"
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'userconn'
op|'.'
name|'get_image'
op|'('
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'.'
name|'id'
op|','
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'admin'
op|'.'
name|'modify_image_attribute'
op|'('
name|'image_id'
op|'='
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|','
nl|'\n'
name|'operation'
op|'='
string|"'add'"
op|','
nl|'\n'
name|'attribute'
op|'='
string|"'launchPermission'"
op|','
nl|'\n'
name|'groups'
op|'='
string|"'all'"
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'userconn'
op|'.'
name|'get_image'
op|'('
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'.'
name|'id'
op|','
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME: add tests that user can launch image'
nl|'\n'
nl|'\n'
comment|'#     def test_010_user_can_launch_admin_public_image(self):'
nl|'\n'
comment|'#         # TODO: Use openwrt kernel instead of default kernel'
nl|'\n'
comment|'#         conn = self.connection_for(test_username)'
nl|'\n'
comment|"#         reservation = conn.run_instances(data['image_id'])"
nl|'\n'
comment|'#         self.assertEqual(len(reservation.instances), 1)'
nl|'\n'
comment|"#         data['my_instance_id'] = reservation.instances[0].id"
nl|'\n'
nl|'\n'
comment|'#     def test_011_instances_launch_within_30_seconds(self):'
nl|'\n'
comment|'#         pass'
nl|'\n'
nl|'\n'
comment|'#     def test_012_user_can_terminate(self):'
nl|'\n'
comment|'#         conn = self.connection_for(test_username)'
nl|'\n'
comment|"#         terminated = conn.terminate_instances(instance_ids=[data['my_instance_id']])"
nl|'\n'
comment|'#         self.assertEqual(len(terminated), 1)'
nl|'\n'
nl|'\n'
DECL|member|test_013_admin_can_deregister_kernel
dedent|''
name|'def'
name|'test_013_admin_can_deregister_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'admin'
op|'.'
name|'deregister_image'
op|'('
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_014_admin_can_deregister_image
dedent|''
name|'def'
name|'test_014_admin_can_deregister_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'admin'
op|'.'
name|'deregister_image'
op|'('
name|'data'
op|'['
string|"'image_id'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_015_admin_can_delete_bundle
dedent|''
name|'def'
name|'test_015_admin_can_delete_bundle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'delete_bundle_bucket'
op|'('
name|'test_bucket'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_999_tearDown
dedent|''
name|'def'
name|'test_999_tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'delete_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Test key pairs and security groups'
nl|'\n'
DECL|class|SecurityTests
dedent|''
dedent|''
name|'class'
name|'SecurityTests'
op|'('
name|'NovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_000_setUp
indent|'    '
name|'def'
name|'test_000_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'create_user'
op|'('
name|'test_username'
op|'+'
string|"'_me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_user'
op|'('
name|'test_username'
op|'+'
string|"'_you'"
op|')'
newline|'\n'
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-EAB510D9'"
newline|'\n'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|'='
string|"'ami-25CB1213'"
newline|'\n'
nl|'\n'
DECL|member|test_001_me_can_create_keypair
dedent|''
name|'def'
name|'test_001_me_can_create_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|'+'
string|"'_me'"
op|')'
newline|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'create_key_pair'
op|'('
name|'conn'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'key'
op|'.'
name|'name'
op|','
name|'test_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_002_you_can_create_keypair
dedent|''
name|'def'
name|'test_002_you_can_create_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|'+'
string|"'_you'"
op|')'
newline|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'create_key_pair'
op|'('
name|'conn'
op|','
name|'test_key'
op|'+'
string|"'yourkey'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'key'
op|'.'
name|'name'
op|','
name|'test_key'
op|'+'
string|"'yourkey'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_003_me_can_create_instance_with_keypair
dedent|''
name|'def'
name|'test_003_me_can_create_instance_with_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|'+'
string|"'_me'"
op|')'
newline|'\n'
name|'reservation'
op|'='
name|'conn'
op|'.'
name|'run_instances'
op|'('
name|'data'
op|'['
string|"'image_id'"
op|']'
op|','
name|'kernel_id'
op|'='
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|','
name|'key_name'
op|'='
name|'test_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'reservation'
op|'.'
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'my_instance_id'"
op|']'
op|'='
name|'reservation'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
DECL|member|test_004_me_can_obtain_private_ip_within_60_seconds
dedent|''
name|'def'
name|'test_004_me_can_obtain_private_ip_within_60_seconds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|'+'
string|"'_me'"
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'conn'
op|'.'
name|'get_all_instances'
op|'('
op|'['
name|'data'
op|'['
string|"'my_instance_id'"
op|']'
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'reservations'
op|'['
number|'0'
op|']'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# allow 60 seconds to exit pending with IP'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'60'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'update'
op|'('
op|')'
newline|'\n'
name|'if'
name|'instance'
op|'.'
name|'state'
op|'!='
string|"u'pending'"
op|':'
newline|'\n'
indent|'                 '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'False'
op|')'
newline|'\n'
comment|"# self.assertEqual(instance.state, u'running')"
nl|'\n'
dedent|''
name|'ip'
op|'='
name|'reservations'
op|'['
number|'0'
op|']'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'private_dns_name'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'ip'
op|'=='
string|"'0.0.0.0'"
op|')'
newline|'\n'
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|'='
name|'ip'
newline|'\n'
name|'print'
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
newline|'\n'
nl|'\n'
DECL|member|test_005_can_ping_private_ip
dedent|''
name|'def'
name|'test_005_can_ping_private_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# allow 30 seconds for PING to work'
nl|'\n'
indent|'        '
name|'print'
string|'"ping -c1 -w1 %s"'
op|'%'
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'120'
op|')'
op|':'
newline|'\n'
comment|'# ping waits for 1 second'
nl|'\n'
indent|'            '
name|'status'
op|','
name|'output'
op|'='
name|'getstatusoutput'
op|'('
string|'"ping -c1 -w1 %s"'
op|'%'
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'status'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                 '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'False'
op|')'
newline|'\n'
comment|'#def test_005_me_cannot_ssh_when_unauthorized(self):'
nl|'\n'
comment|"#    self.assertRaises(SSHException, self.connect_ssh, data['my_private_ip'], 'mykey')"
nl|'\n'
nl|'\n'
comment|'#def test_006_me_can_authorize_ssh(self):'
nl|'\n'
comment|"#    conn = self.connection_for(test_username + '_me')"
nl|'\n'
comment|'#    self.assertTrue('
nl|'\n'
comment|'#        conn.authorize_security_group('
nl|'\n'
comment|"#            'default',"
nl|'\n'
comment|"#            ip_protocol='tcp',"
nl|'\n'
comment|'#            from_port=22,'
nl|'\n'
comment|'#            to_port=22,'
nl|'\n'
comment|"#            cidr_ip='0.0.0.0/0'"
nl|'\n'
comment|'#        )'
nl|'\n'
comment|'#    )'
nl|'\n'
nl|'\n'
DECL|member|test_007_me_can_ssh_when_authorized
dedent|''
dedent|''
name|'def'
name|'test_007_me_can_ssh_when_authorized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Wait for the instance to ACTUALLY have ssh ru/nning'
nl|'\n'
indent|'        '
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'120'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'#def test_008_me_can_revoke_ssh_authorization(self):'
nl|'\n'
comment|"#    conn = self.connection_for('me')"
nl|'\n'
comment|'#    self.assertTrue('
nl|'\n'
comment|'#        conn.revoke_security_group('
nl|'\n'
comment|"#            'default',"
nl|'\n'
comment|"#            ip_protocol='tcp',"
nl|'\n'
comment|'#            from_port=22,'
nl|'\n'
comment|'#            to_port=22,'
nl|'\n'
comment|"#            cidr_ip='0.0.0.0/0'"
nl|'\n'
comment|'#        )'
nl|'\n'
comment|'#    )'
nl|'\n'
nl|'\n'
comment|'#def test_009_you_cannot_ping_my_instance(self):'
nl|'\n'
comment|'# TODO: should ping my_private_ip from with an instance started by "you"'
nl|'\n'
comment|"#self.assertFalse(self.can_ping(data['my_private_ip']))"
nl|'\n'
nl|'\n'
DECL|member|test_010_you_cannot_ssh_to_my_instance
dedent|''
dedent|''
name|'def'
name|'test_010_you_cannot_ssh_to_my_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
name|'test_key'
op|'+'
string|"'yourkey'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SSHException'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"expected SSHException"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_999_tearDown
dedent|''
dedent|''
name|'def'
name|'test_999_tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|'+'
string|"'_me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_key_pair'
op|'('
name|'conn'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'if'
name|'data'
op|'.'
name|'has_key'
op|'('
string|"'my_instance_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'terminate_instances'
op|'('
op|'['
name|'data'
op|'['
string|"'my_instance_id'"
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|'+'
string|"'_you'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_key_pair'
op|'('
name|'conn'
op|','
name|'test_key'
op|'+'
string|"'yourkey'"
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'admin'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_user'
op|'('
name|'test_username'
op|'+'
string|"'_me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_user'
op|'('
name|'test_username'
op|'+'
string|"'_you'"
op|')'
newline|'\n'
comment|"#self.tearDown_test_image(conn, data['image_id'])"
nl|'\n'
comment|"#self.tearDown_test_image(conn, data['kernel_id'])"
nl|'\n'
nl|'\n'
comment|'# TODO: verify wrt image boots'
nl|'\n'
comment|'#       build python into wrt image'
nl|'\n'
comment|'#       build boto/m2crypto into wrt image'
nl|'\n'
comment|'#       build euca2ools into wrt image'
nl|'\n'
comment|'#       build a script to download and unpack credentials'
nl|'\n'
comment|'#         - return "ok" to stdout for comparison in self.assertEqual()'
nl|'\n'
comment|'#       build a script to bundle the instance'
nl|'\n'
comment|'#       build a script to upload the bundle'
nl|'\n'
nl|'\n'
comment|"# status, output = getstatusoutput('cmd')"
nl|'\n'
comment|'# if status == 0:'
nl|'\n'
comment|"#    print 'ok'"
nl|'\n'
comment|'# else:'
nl|'\n'
comment|'#    print output'
nl|'\n'
nl|'\n'
comment|'# Testing rebundling'
nl|'\n'
DECL|class|RebundlingTests
dedent|''
dedent|''
name|'class'
name|'RebundlingTests'
op|'('
name|'NovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_000_setUp
indent|'    '
name|'def'
name|'test_000_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'create_user'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_user'
op|'('
string|"'you'"
op|')'
newline|'\n'
comment|'# TODO: create keypair for me'
nl|'\n'
comment|'#       upload smoketest img'
nl|'\n'
comment|'#       run instance'
nl|'\n'
nl|'\n'
DECL|member|test_001_me_can_download_credentials_within_instance
dedent|''
name|'def'
name|'test_001_me_can_download_credentials_within_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
string|"'mykey'"
op|')'
newline|'\n'
name|'stdin'
op|','
name|'stdout'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|"'python ~/smoketests/install-credentials.py'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stdout'
op|','
string|"'ok'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_002_me_can_rebundle_within_instance
dedent|''
name|'def'
name|'test_002_me_can_rebundle_within_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
string|"'mykey'"
op|')'
newline|'\n'
name|'stdin'
op|','
name|'stdout'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|"'python ~/smoketests/rebundle-instance.py'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stdout'
op|','
string|"'ok'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_003_me_can_upload_image_within_instance
dedent|''
name|'def'
name|'test_003_me_can_upload_image_within_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
string|"'mykey'"
op|')'
newline|'\n'
name|'stdin'
op|','
name|'stdout'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|"'python ~/smoketests/upload-bundle.py'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stdout'
op|','
string|"'ok'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_004_me_can_register_image_within_instance
dedent|''
name|'def'
name|'test_004_me_can_register_image_within_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_private_ip'"
op|']'
op|','
string|"'mykey'"
op|')'
newline|'\n'
name|'stdin'
op|','
name|'stdout'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|"'python ~/smoketests/register-image.py'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'re'
op|'.'
name|'matches'
op|'('
string|"'emi-{\\w+}'"
op|','
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'['
string|"'my_image_id'"
op|']'
op|'='
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'expected emi-nnnnnn, got:\\n '"
op|'+'
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_005_you_cannot_see_my_private_image
dedent|''
dedent|''
name|'def'
name|'test_005_you_cannot_see_my_private_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'you'"
op|')'
newline|'\n'
name|'image'
op|'='
name|'conn'
op|'.'
name|'get_image'
op|'('
name|'data'
op|'['
string|"'my_image_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'#    def test_006_me_can_make_image_public(self):'
nl|'\n'
comment|'#        # TODO: research this'
nl|'\n'
comment|'#        self.assert_(False)'
nl|'\n'
comment|'#'
nl|'\n'
DECL|member|test_007_you_can_see_my_public_image
dedent|''
name|'def'
name|'test_007_you_can_see_my_public_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'you'"
op|')'
newline|'\n'
name|'image'
op|'='
name|'conn'
op|'.'
name|'get_image'
op|'('
name|'data'
op|'['
string|"'my_image_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'.'
name|'id'
op|','
name|'data'
op|'['
string|"'my_image_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_999_tearDown
dedent|''
name|'def'
name|'test_999_tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'delete_user'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_user'
op|'('
string|"'you'"
op|')'
newline|'\n'
nl|'\n'
comment|"#if data.has_key('image_id'):"
nl|'\n'
comment|'# deregister rebundled image'
nl|'\n'
nl|'\n'
comment|'# TODO: tear down instance'
nl|'\n'
comment|'#       delete keypairs'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Test elastic IPs'
nl|'\n'
DECL|class|ElasticIPTests
dedent|''
dedent|''
name|'class'
name|'ElasticIPTests'
op|'('
name|'NovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_000_setUp
indent|'    '
name|'def'
name|'test_000_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-EAB510D9'"
newline|'\n'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|'='
string|"'ami-25CB1213'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'create_user'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_key_pair'
op|'('
name|'conn'
op|','
string|"'mykey'"
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'admin'"
op|')'
newline|'\n'
comment|"#data['kernel_id'] = self.setUp_test_image(KERNEL_FILENAME, kernel=True)"
nl|'\n'
comment|"#data['image_id'] = self.setUp_test_image(IMAGE_FILENAME)"
nl|'\n'
nl|'\n'
DECL|member|test_001_me_can_launch_image_with_keypair
dedent|''
name|'def'
name|'test_001_me_can_launch_image_with_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'reservation'
op|'='
name|'conn'
op|'.'
name|'run_instances'
op|'('
name|'data'
op|'['
string|"'image_id'"
op|']'
op|','
name|'key_name'
op|'='
string|"'mykey'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'reservation'
op|'.'
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'my_instance_id'"
op|']'
op|'='
name|'reservation'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
DECL|member|test_002_me_can_allocate_elastic_ip
dedent|''
name|'def'
name|'test_002_me_can_allocate_elastic_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'data'
op|'['
string|"'my_public_ip'"
op|']'
op|'='
name|'conn'
op|'.'
name|'allocate_address'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'data'
op|'['
string|"'my_public_ip'"
op|']'
op|'.'
name|'public_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_003_me_can_associate_ip_with_instance
dedent|''
name|'def'
name|'test_003_me_can_associate_ip_with_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'data'
op|'['
string|"'my_public_ip'"
op|']'
op|'.'
name|'associate'
op|'('
name|'data'
op|'['
string|"'my_instance_id'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_004_me_can_ssh_with_public_ip
dedent|''
name|'def'
name|'test_004_me_can_ssh_with_public_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'my_public_ip'"
op|']'
op|'.'
name|'public_ip'
op|','
string|"'mykey'"
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_005_me_can_disassociate_ip_from_instance
dedent|''
name|'def'
name|'test_005_me_can_disassociate_ip_from_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'data'
op|'['
string|"'my_public_ip'"
op|']'
op|'.'
name|'disassociate'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_006_me_can_deallocate_elastic_ip
dedent|''
name|'def'
name|'test_006_me_can_deallocate_elastic_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'data'
op|'['
string|"'my_public_ip'"
op|']'
op|'.'
name|'delete'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_999_tearDown
dedent|''
name|'def'
name|'test_999_tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'me'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_key_pair'
op|'('
name|'conn'
op|','
string|"'mykey'"
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
string|"'admin'"
op|')'
newline|'\n'
comment|"#self.tearDown_test_image(conn, data['image_id'])"
nl|'\n'
comment|"#self.tearDown_test_image(conn, data['kernel_id'])"
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|ZONE
dedent|''
dedent|''
name|'ZONE'
op|'='
string|"'nova'"
newline|'\n'
DECL|variable|DEVICE
name|'DEVICE'
op|'='
string|"'/dev/vdb'"
newline|'\n'
comment|'# Test iscsi volumes'
nl|'\n'
DECL|class|VolumeTests
name|'class'
name|'VolumeTests'
op|'('
name|'NovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_000_setUp
indent|'    '
name|'def'
name|'test_000_setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'create_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'image_id'"
op|']'
op|'='
string|"'ami-tiny'"
comment|'# A7370FE3'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_key_pair'
op|'('
name|'conn'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'reservation'
op|'='
name|'conn'
op|'.'
name|'run_instances'
op|'('
name|'data'
op|'['
string|"'image_id'"
op|']'
op|','
name|'size'
op|'='
string|"'m1.tiny'"
op|','
name|'key_name'
op|'='
name|'test_key'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'reservation'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
newline|'\n'
name|'data'
op|'['
string|"'private_ip'"
op|']'
op|'='
name|'reservation'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'private_dns_name'
newline|'\n'
comment|'# wait for instance to show up'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'120'
op|')'
op|':'
newline|'\n'
comment|'# ping waits for 1 second'
nl|'\n'
indent|'            '
name|'status'
op|','
name|'output'
op|'='
name|'getstatusoutput'
op|'('
string|'"ping -c1 -w1 %s"'
op|'%'
name|'data'
op|'['
string|"'private_ip'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'status'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                  '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'unable to ping instance'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_001_me_can_create_volume
dedent|''
dedent|''
name|'def'
name|'test_001_me_can_create_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'conn'
op|'.'
name|'create_volume'
op|'('
number|'1'
op|','
name|'ZONE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'volume'
op|'.'
name|'size'
op|','
number|'1'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'volume_id'"
op|']'
op|'='
name|'volume'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
DECL|member|test_002_me_can_attach_volume
dedent|''
name|'def'
name|'test_002_me_can_attach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'attach_volume'
op|'('
nl|'\n'
name|'volume_id'
op|'='
name|'data'
op|'['
string|"'volume_id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'data'
op|'['
string|"'instance_id'"
op|']'
op|','
nl|'\n'
name|'device'
op|'='
name|'DEVICE'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_003_me_can_mount_volume
dedent|''
name|'def'
name|'test_003_me_can_mount_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'private_ip'"
op|']'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'stdin'
op|','
name|'stdout'
op|','
name|'stderr'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|'\'sudo bash -c "mkdir -p /mnt/vol && mkfs.ext3 %s && mount %s /mnt/vol && echo success"\''
op|'%'
op|'('
name|'DEVICE'
op|','
name|'DEVICE'
op|')'
op|')'
newline|'\n'
name|'out'
op|'='
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'success'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unable to mount: %s %s'"
op|'%'
op|'('
name|'out'
op|','
name|'stderr'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_004_me_can_write_to_volume
dedent|''
dedent|''
name|'def'
name|'test_004_me_can_write_to_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'private_ip'"
op|']'
op|','
name|'test_key'
op|')'
newline|'\n'
comment|"# FIXME: This doesn't fail if the volume hasn't been mounted"
nl|'\n'
name|'stdin'
op|','
name|'stdout'
op|','
name|'stderr'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|'\'sudo bash -c "echo hello > /mnt/vol/test.txt"\''
op|')'
newline|'\n'
name|'err'
op|'='
name|'stderr'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'err'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unable to write to mount: %s'"
op|'%'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_005_volume_is_correct_size
dedent|''
dedent|''
name|'def'
name|'test_005_volume_is_correct_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'private_ip'"
op|']'
op|','
name|'test_key'
op|')'
newline|'\n'
comment|"# FIXME: This doesn't fail if the volume hasn't been mounted"
nl|'\n'
name|'stdin'
op|','
name|'stdout'
op|','
name|'stderr'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|'"df -h | grep %s | awk {\'print $2\'}"'
op|'%'
name|'DEVICE'
op|')'
newline|'\n'
name|'out'
op|'='
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'out'
op|'.'
name|'strip'
op|'('
op|')'
op|'=='
string|"'1008M'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Volume is not the right size: %s %s'"
op|'%'
op|'('
name|'out'
op|','
name|'stderr'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_006_me_can_umount_volume
dedent|''
dedent|''
name|'def'
name|'test_006_me_can_umount_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connect_ssh'
op|'('
name|'data'
op|'['
string|"'private_ip'"
op|']'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'stdin'
op|','
name|'stdout'
op|','
name|'stderr'
op|'='
name|'conn'
op|'.'
name|'exec_command'
op|'('
string|"'sudo umount /mnt/vol'"
op|')'
newline|'\n'
name|'err'
op|'='
name|'stderr'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'err'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unable to unmount: %s'"
op|'%'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_007_me_can_detach_volume
dedent|''
dedent|''
name|'def'
name|'test_007_me_can_detach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'conn'
op|'.'
name|'detach_volume'
op|'('
name|'volume_id'
op|'='
name|'data'
op|'['
string|"'volume_id'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_008_me_can_delete_volume
dedent|''
name|'def'
name|'test_008_me_can_delete_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'conn'
op|'.'
name|'delete_volume'
op|'('
name|'data'
op|'['
string|"'volume_id'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_999_tearDown
dedent|''
name|'def'
name|'test_999_tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'data'
newline|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_for'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delete_key_pair'
op|'('
name|'conn'
op|','
name|'test_key'
op|')'
newline|'\n'
name|'if'
name|'data'
op|'.'
name|'has_key'
op|'('
string|"'instance_id'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'terminate_instances'
op|'('
op|'['
name|'data'
op|'['
string|"'instance_id'"
op|']'
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'delete_user'
op|'('
name|'test_username'
op|')'
newline|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|build_suites
dedent|''
dedent|''
name|'def'
name|'build_suites'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
nl|'\n'
string|"'user'"
op|':'
name|'unittest'
op|'.'
name|'makeSuite'
op|'('
name|'UserTests'
op|')'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'unittest'
op|'.'
name|'makeSuite'
op|'('
name|'ImageTests'
op|')'
op|','
nl|'\n'
string|"'security'"
op|':'
name|'unittest'
op|'.'
name|'makeSuite'
op|'('
name|'SecurityTests'
op|')'
op|','
nl|'\n'
string|"'public_network'"
op|':'
name|'unittest'
op|'.'
name|'makeSuite'
op|'('
name|'ElasticIPTests'
op|')'
op|','
nl|'\n'
string|"'volume'"
op|':'
name|'unittest'
op|'.'
name|'makeSuite'
op|'('
name|'VolumeTests'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
name|'argv'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'suites'
op|'='
name|'build_suites'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'suite'
op|'='
name|'suites'
op|'['
name|'argv'
op|'['
number|'1'
op|']'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|"'Available test suites: [user, image, security, public_network, volume]'"
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'unittest'
op|'.'
name|'TextTestRunner'
op|'('
name|'verbosity'
op|'='
number|'2'
op|')'
op|'.'
name|'run'
op|'('
name|'suite'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'exit'
op|'('
name|'main'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

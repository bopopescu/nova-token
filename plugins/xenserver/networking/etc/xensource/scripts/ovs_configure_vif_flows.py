begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nThis script is used to configure openvswitch flows on XenServer hosts.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
comment|'# This is written to Python 2.4, since that is what is available on XenServer'
nl|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'import'
name|'simplejson'
name|'as'
name|'json'
newline|'\n'
nl|'\n'
name|'import'
name|'novalib'
comment|'# noqa'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|OVS_OFCTL
name|'OVS_OFCTL'
op|'='
string|"'/usr/bin/ovs-ofctl'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OvsFlow
name|'class'
name|'OvsFlow'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'bridge'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bridge'
op|'='
name|'bridge'
newline|'\n'
name|'self'
op|'.'
name|'params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
DECL|member|add
dedent|''
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'rule'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'novalib'
op|'.'
name|'execute'
op|'('
name|'OVS_OFCTL'
op|','
string|"'add-flow'"
op|','
name|'self'
op|'.'
name|'bridge'
op|','
name|'rule'
op|'%'
name|'self'
op|'.'
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clear_flows
dedent|''
name|'def'
name|'clear_flows'
op|'('
name|'self'
op|','
name|'ofport'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'novalib'
op|'.'
name|'execute'
op|'('
name|'OVS_OFCTL'
op|','
string|"'del-flows'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'bridge'
op|','
string|'"in_port=%s"'
op|'%'
name|'ofport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
name|'command'
op|','
name|'vif_raw'
op|','
name|'net_type'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'command'
name|'not'
name|'in'
op|'('
string|"'online'"
op|','
string|"'offline'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'vif_name'
op|','
name|'dom_id'
op|','
name|'vif_index'
op|'='
name|'vif_raw'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
newline|'\n'
name|'vif'
op|'='
string|'"%s%s.%s"'
op|'%'
op|'('
name|'vif_name'
op|','
name|'dom_id'
op|','
name|'vif_index'
op|')'
newline|'\n'
nl|'\n'
name|'bridge'
op|'='
name|'novalib'
op|'.'
name|'execute_get_output'
op|'('
string|"'/usr/bin/ovs-vsctl'"
op|','
nl|'\n'
string|"'iface-to-br'"
op|','
name|'vif'
op|')'
newline|'\n'
nl|'\n'
name|'xsls'
op|'='
name|'novalib'
op|'.'
name|'execute_get_output'
op|'('
string|"'/usr/bin/xenstore-ls'"
op|','
nl|'\n'
string|"'/local/domain/%s/vm-data/networking'"
op|'%'
name|'dom_id'
op|')'
newline|'\n'
name|'macs'
op|'='
op|'['
name|'line'
op|'.'
name|'split'
op|'('
string|'"="'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'line'
name|'in'
name|'xsls'
op|'.'
name|'splitlines'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'mac'
name|'in'
name|'macs'
op|':'
newline|'\n'
indent|'        '
name|'xsread'
op|'='
name|'novalib'
op|'.'
name|'execute_get_output'
op|'('
string|"'/usr/bin/xenstore-read'"
op|','
nl|'\n'
string|"'/local/domain/%s/vm-data/networking/%s'"
op|'%'
nl|'\n'
op|'('
name|'dom_id'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
name|'data'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'xsread'
op|')'
newline|'\n'
name|'if'
name|'data'
op|'['
string|'"label"'
op|']'
op|'=='
string|'"public"'
op|':'
newline|'\n'
indent|'            '
name|'this_vif'
op|'='
string|'"vif%s.0"'
op|'%'
name|'dom_id'
newline|'\n'
name|'phys_dev'
op|'='
string|'"eth0"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'this_vif'
op|'='
string|'"vif%s.1"'
op|'%'
name|'dom_id'
newline|'\n'
name|'phys_dev'
op|'='
string|'"eth1"'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'vif'
op|'=='
name|'this_vif'
op|':'
newline|'\n'
indent|'            '
name|'vif_ofport'
op|'='
name|'novalib'
op|'.'
name|'execute_get_output'
op|'('
string|"'/usr/bin/ovs-vsctl'"
op|','
nl|'\n'
string|"'get'"
op|','
string|"'Interface'"
op|','
name|'vif'
op|','
string|"'ofport'"
op|')'
newline|'\n'
name|'phys_ofport'
op|'='
name|'novalib'
op|'.'
name|'execute_get_output'
op|'('
string|"'/usr/bin/ovs-vsctl'"
op|','
nl|'\n'
string|"'get'"
op|','
string|"'Interface'"
op|','
name|'phys_dev'
op|','
string|"'ofport'"
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
name|'dict'
op|'('
name|'VIF_NAME'
op|'='
name|'vif'
op|','
nl|'\n'
name|'MAC'
op|'='
name|'data'
op|'['
string|"'mac'"
op|']'
op|','
nl|'\n'
name|'OF_PORT'
op|'='
name|'vif_ofport'
op|','
nl|'\n'
name|'PHYS_PORT'
op|'='
name|'phys_ofport'
op|')'
newline|'\n'
nl|'\n'
name|'ovs'
op|'='
name|'OvsFlow'
op|'('
name|'bridge'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'command'
op|'=='
string|"'offline'"
op|':'
newline|'\n'
comment|"# I haven't found a way to clear only IPv4 or IPv6 rules."
nl|'\n'
indent|'                '
name|'ovs'
op|'.'
name|'clear_flows'
op|'('
name|'vif_ofport'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'command'
op|'=='
string|"'online'"
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'net_type'
name|'in'
op|'('
string|"'ipv4'"
op|','
string|"'all'"
op|')'
name|'and'
string|"'ips'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'ip4'
name|'in'
name|'data'
op|'['
string|"'ips'"
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'ovs'
op|'.'
name|'params'
op|'.'
name|'update'
op|'('
op|'{'
string|"'IPV4_ADDR'"
op|':'
name|'ip4'
op|'['
string|"'ip'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'apply_ovs_ipv4_flows'
op|'('
name|'ovs'
op|','
name|'bridge'
op|','
name|'params'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'net_type'
name|'in'
op|'('
string|"'ipv6'"
op|','
string|"'all'"
op|')'
name|'and'
string|"'ip6s'"
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'ip6'
name|'in'
name|'data'
op|'['
string|"'ip6s'"
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'mac_eui64'
op|'='
name|'netaddr'
op|'.'
name|'EUI'
op|'('
name|'data'
op|'['
string|"'mac'"
op|']'
op|')'
op|'.'
name|'eui64'
op|'('
op|')'
newline|'\n'
name|'link_local'
op|'='
name|'str'
op|'('
name|'mac_eui64'
op|'.'
name|'ipv6_link_local'
op|'('
op|')'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'params'
op|'.'
name|'update'
op|'('
op|'{'
string|"'IPV6_LINK_LOCAL_ADDR'"
op|':'
name|'link_local'
op|'}'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'params'
op|'.'
name|'update'
op|'('
op|'{'
string|"'IPV6_GLOBAL_ADDR'"
op|':'
name|'ip6'
op|'['
string|"'ip'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'apply_ovs_ipv6_flows'
op|'('
name|'ovs'
op|','
name|'bridge'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|apply_ovs_ipv4_flows
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'apply_ovs_ipv4_flows'
op|'('
name|'ovs'
op|','
name|'bridge'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
comment|'# When ARP traffic arrives from a vif, push it to virtual port'
nl|'\n'
comment|'# 9999 for further processing'
nl|'\n'
indent|'    '
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,arp,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"nw_src=%(IPV4_ADDR)s,arp_sha=%(MAC)s,actions=resubmit:9999"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,arp,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"nw_src=0.0.0.0,arp_sha=%(MAC)s,actions=resubmit:9999"'
op|')'
newline|'\n'
nl|'\n'
comment|'# When IP traffic arrives from a vif, push it to virtual port 9999'
nl|'\n'
comment|'# for further processing'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,ip,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"nw_src=%(IPV4_ADDR)s,actions=resubmit:9999"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Drop IP bcast/mcast'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,ip,in_port=%(OF_PORT)s,dl_dst=ff:ff:ff:ff:ff:ff,"'
nl|'\n'
string|'"actions=drop"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,ip,in_port=%(OF_PORT)s,nw_dst=224.0.0.0/4,"'
nl|'\n'
string|'"actions=drop"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,ip,in_port=%(OF_PORT)s,nw_dst=240.0.0.0/4,"'
nl|'\n'
string|'"actions=drop"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass ARP requests coming from any VMs on the local HV (port'
nl|'\n'
comment|'# 9999) or coming from external sources (PHYS_PORT) to the VM and'
nl|'\n'
comment|'# physical NIC.  We output this to the physical NIC as well, since'
nl|'\n'
comment|'# with instances of shared ip groups, the active host for the'
nl|'\n'
comment|'# destination IP might be elsewhere...'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=3,arp,in_port=9999,nw_dst=%(IPV4_ADDR)s,"'
nl|'\n'
string|'"actions=output:%(OF_PORT)s,output:%(PHYS_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass ARP traffic originating from external sources the VM with'
nl|'\n'
comment|'# the matching IP address'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=3,arp,in_port=%(PHYS_PORT)s,nw_dst=%(IPV4_ADDR)s,"'
nl|'\n'
string|'"actions=output:%(OF_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass ARP traffic from one VM (src mac already validated) to'
nl|'\n'
comment|'# another VM on the same HV'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=3,arp,in_port=9999,dl_dst=%(MAC)s,"'
nl|'\n'
string|'"actions=output:%(OF_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass ARP replies coming from the external environment to the'
nl|'\n'
comment|'# target VM'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=3,arp,in_port=%(PHYS_PORT)s,dl_dst=%(MAC)s,"'
nl|'\n'
string|'"actions=output:%(OF_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
comment|'# ALL IP traffic: Pass IP data coming from any VMs on the local HV'
nl|'\n'
comment|'# (port 9999) or coming from external sources (PHYS_PORT) to the'
nl|'\n'
comment|'# VM and physical NIC.  We output this to the physical NIC as'
nl|'\n'
comment|'# well, since with instances of shared ip groups, the active host'
nl|'\n'
comment|'# for the destination IP might be elsewhere...'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=3,ip,in_port=9999,dl_dst=%(MAC)s,"'
nl|'\n'
string|'"nw_dst=%(IPV4_ADDR)s,actions=output:%(OF_PORT)s,"'
nl|'\n'
string|'"output:%(PHYS_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass IP traffic from the external environment to the VM'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=3,ip,in_port=%(PHYS_PORT)s,dl_dst=%(MAC)s,"'
nl|'\n'
string|'"nw_dst=%(IPV4_ADDR)s,actions=output:%(OF_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
comment|"# Send any local traffic to the physical NIC's OVS port for"
nl|'\n'
comment|'# physical network learning'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=2,in_port=9999,actions=output:%(PHYS_PORT)s"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|apply_ovs_ipv6_flows
dedent|''
name|'def'
name|'apply_ovs_ipv6_flows'
op|'('
name|'ovs'
op|','
name|'bridge'
op|','
name|'params'
op|')'
op|':'
newline|'\n'
comment|'# allow valid IPv6 ND outbound (are both global and local IPs needed?)'
nl|'\n'
comment|'# Neighbor Solicitation'
nl|'\n'
indent|'    '
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,icmp_type=135,nd_sll=%(MAC)s,"'
nl|'\n'
string|'"actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,icmp_type=135,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,icmp_type=135,nd_sll=%(MAC)s,"'
nl|'\n'
string|'"actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,icmp_type=135,actions=normal"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Neighbor Advertisement'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,icmp_type=136,"'
nl|'\n'
string|'"nd_target=%(IPV6_LINK_LOCAL_ADDR)s,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,icmp_type=136,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,icmp_type=136,"'
nl|'\n'
string|'"nd_target=%(IPV6_GLOBAL_ADDR)s,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=6,in_port=%(OF_PORT)s,dl_src=%(MAC)s,icmp6,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,icmp_type=136,actions=normal"'
op|')'
newline|'\n'
nl|'\n'
comment|'# drop all other neighbor discovery (req b/c we permit all icmp6 below)'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=135,actions=drop"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=136,actions=drop"'
op|')'
newline|'\n'
nl|'\n'
comment|'# do not allow sending specific ICMPv6 types'
nl|'\n'
comment|'# Router Advertisement'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=134,actions=drop"'
op|')'
newline|'\n'
comment|'# Redirect Gateway'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=137,actions=drop"'
op|')'
newline|'\n'
comment|'# Mobile Prefix Solicitation'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=146,actions=drop"'
op|')'
newline|'\n'
comment|'# Mobile Prefix Advertisement'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=147,actions=drop"'
op|')'
newline|'\n'
comment|'# Multicast Router Advertisement'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=151,actions=drop"'
op|')'
newline|'\n'
comment|'# Multicast Router Solicitation'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=152,actions=drop"'
op|')'
newline|'\n'
comment|'# Multicast Router Termination'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=5,in_port=%(OF_PORT)s,icmp6,icmp_type=153,actions=drop"'
op|')'
newline|'\n'
nl|'\n'
comment|'# allow valid IPv6 outbound, by type'
nl|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,icmp6,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,icmp6,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,tcp6,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,tcp6,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_GLOBAL_ADDR)s,udp6,actions=normal"'
op|')'
newline|'\n'
name|'ovs'
op|'.'
name|'add'
op|'('
string|'"priority=4,in_port=%(OF_PORT)s,dl_src=%(MAC)s,"'
nl|'\n'
string|'"ipv6_src=%(IPV6_LINK_LOCAL_ADDR)s,udp6,actions=normal"'
op|')'
newline|'\n'
comment|'# all else will be dropped ...'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"usage: %s [online|offline] vif-domid-idx [ipv4|ipv6|all] "'
op|'%'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'command'
op|','
name|'vif_raw'
op|','
name|'net_type'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
number|'4'
op|']'
newline|'\n'
name|'main'
op|'('
name|'command'
op|','
name|'vif_raw'
op|','
name|'net_type'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

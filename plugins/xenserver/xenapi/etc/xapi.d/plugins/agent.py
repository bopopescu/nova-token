begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# XenAPI plugin for reading/writing information to xenstore'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'json'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'simplejson'
name|'as'
name|'json'
newline|'\n'
dedent|''
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'XenAPIPlugin'
newline|'\n'
nl|'\n'
name|'from'
name|'pluginlib_nova'
name|'import'
op|'*'
newline|'\n'
name|'configure_logging'
op|'('
string|'"xenstore"'
op|')'
newline|'\n'
name|'import'
name|'xenstore'
newline|'\n'
nl|'\n'
DECL|variable|AGENT_TIMEOUT
name|'AGENT_TIMEOUT'
op|'='
number|'30'
newline|'\n'
comment|'# Used for simulating an external agent for testing'
nl|'\n'
DECL|variable|PRETEND_SECRET
name|'PRETEND_SECRET'
op|'='
number|'11111'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutError
name|'class'
name|'TimeoutError'
op|'('
name|'StandardError'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|SimpleDH
dedent|''
name|'class'
name|'SimpleDH'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This class wraps all the functionality needed to implement\n    basic Diffie-Hellman-Merkle key exchange in Python. It features\n    intelligent defaults for the prime and base numbers needed for the\n    calculation, while allowing you to supply your own. It requires that\n    the openssl binary be installed on the system on which this is run,\n    as it uses that to handle the encryption and decryption. If openssl\n    is not available, a RuntimeError will be raised.\n\n    Please note that nova already uses the M2Crypto library for most\n    cryptographic functions, and that it includes a Diffie-Hellman\n    implementation. However, that is a much more complex implementation,\n    and is not compatible with the DH algorithm that the agent uses. Hence\n    the need for this \'simple\' version.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'prime'
op|'='
name|'None'
op|','
name|'base'
op|'='
name|'None'
op|','
name|'secret'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""You can specify the values for prime and base if you wish;\n        otherwise, reasonable default values will be used.\n        """'
newline|'\n'
name|'if'
name|'prime'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prime'
op|'='
number|'162259276829213363391578010288127'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_prime'
op|'='
name|'prime'
newline|'\n'
dedent|''
name|'if'
name|'base'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_base'
op|'='
number|'5'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_base'
op|'='
name|'base'
newline|'\n'
dedent|''
name|'if'
name|'secret'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_secret'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'5000'
op|','
number|'15000'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_secret'
op|'='
name|'secret'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_shared'
op|'='
name|'self'
op|'.'
name|'_public'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_public
dedent|''
name|'def'
name|'get_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the public key"""'
newline|'\n'
name|'self'
op|'.'
name|'_public'
op|'='
op|'('
name|'self'
op|'.'
name|'_base'
op|'**'
name|'self'
op|'.'
name|'_secret'
op|')'
op|'%'
name|'self'
op|'.'
name|'_prime'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_public'
newline|'\n'
nl|'\n'
DECL|member|compute_shared
dedent|''
name|'def'
name|'compute_shared'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Given the other end\'s public key, compute the\n        shared secret.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_shared'
op|'='
op|'('
name|'other'
op|'**'
name|'self'
op|'.'
name|'_secret'
op|')'
op|'%'
name|'self'
op|'.'
name|'_prime'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_shared'
newline|'\n'
nl|'\n'
DECL|member|_run_ssl
dedent|''
name|'def'
name|'_run_ssl'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'which'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The encryption/decryption methods require running the openssl\n        installed on the system. This method abstracts out the common\n        code required.\n        """'
newline|'\n'
name|'base_cmd'
op|'='
op|'('
string|'"cat %(tmpfile)s | openssl enc -aes-128-cbc "'
nl|'\n'
string|'"-a -pass pass:%(shared)s -nosalt %(dec_flag)s"'
op|')'
newline|'\n'
name|'if'
name|'which'
op|'.'
name|'lower'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'=='
string|'"d"'
op|':'
newline|'\n'
indent|'            '
name|'dec_flag'
op|'='
string|'" -d"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'dec_flag'
op|'='
string|'""'
newline|'\n'
comment|"# Note: instead of using 'cat' and a tempfile, it is also"
nl|'\n'
comment|"# possible to just 'echo' the value. However, we can not assume"
nl|'\n'
comment|"# that the value is 'safe'; i.e., it may contain semi-colons,"
nl|'\n'
comment|'# octothorpes, or other characters that would not be allowed'
nl|'\n'
comment|"# in an 'echo' construct."
nl|'\n'
dedent|''
name|'fd'
op|','
name|'tmpfile'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'file'
op|'('
name|'tmpfile'
op|','
string|'"w"'
op|')'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
name|'shared'
op|'='
name|'self'
op|'.'
name|'_shared'
newline|'\n'
name|'cmd'
op|'='
name|'base_cmd'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'_run_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'PluginError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"OpenSSL error: %s"'
op|'%'
name|'e'
op|')'
newline|'\n'
nl|'\n'
DECL|member|encrypt
dedent|''
dedent|''
name|'def'
name|'encrypt'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses the shared key to encrypt the given text."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_run_ssl'
op|'('
name|'text'
op|','
string|'"enc"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decrypt
dedent|''
name|'def'
name|'decrypt'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Uses the shared key to decrypt the given text."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_run_ssl'
op|'('
name|'text'
op|','
string|'"dec"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_run_command
dedent|''
dedent|''
name|'def'
name|'_run_command'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Abstracts out the basics of issuing system commands. If the command\n    returns anything in stderr, a PluginError is raised with that information.\n    Otherwise, the output from stdout is returned.\n    """'
newline|'\n'
name|'pipe'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
newline|'\n'
name|'proc'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
op|'['
name|'cmd'
op|']'
op|','
name|'shell'
op|'='
name|'True'
op|','
name|'stdin'
op|'='
name|'pipe'
op|','
name|'stdout'
op|'='
name|'pipe'
op|','
name|'stderr'
op|'='
name|'pipe'
op|','
name|'close_fds'
op|'='
name|'True'
op|')'
newline|'\n'
name|'proc'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'proc'
op|'.'
name|'stderr'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'err'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'PluginError'
op|'('
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'proc'
op|'.'
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|key_init
dedent|''
name|'def'
name|'key_init'
op|'('
name|'self'
op|','
name|'arg_dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handles the Diffie-Hellman key exchange with the agent to\n    establish the shared secret key used to encrypt/decrypt sensitive\n    info to be passed, such as passwords. Returns the shared\n    secret key value.\n    """'
newline|'\n'
name|'pub'
op|'='
name|'int'
op|'('
name|'arg_dict'
op|'['
string|'"pub"'
op|']'
op|')'
newline|'\n'
name|'arg_dict'
op|'['
string|'"value"'
op|']'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
op|'{'
string|'"name"'
op|':'
string|'"keyinit"'
op|','
string|'"value"'
op|':'
name|'pub'
op|'}'
op|')'
newline|'\n'
name|'request_id'
op|'='
name|'arg_dict'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'if'
name|'arg_dict'
op|'.'
name|'get'
op|'('
string|'"testing_mode"'
op|')'
op|':'
newline|'\n'
comment|'# Pretend!'
nl|'\n'
indent|'        '
name|'pretend'
op|'='
name|'SimpleDH'
op|'('
name|'secret'
op|'='
name|'PRETEND_SECRET'
op|')'
newline|'\n'
name|'shared'
op|'='
name|'pretend'
op|'.'
name|'compute_shared'
op|'('
name|'pub'
op|')'
newline|'\n'
comment|"# Simulate the agent's response"
nl|'\n'
name|'ret'
op|'='
string|'\'{ "returncode": "D0", "message": "%s", "shared": "%s" }\''
op|'%'
op|'('
name|'pretend'
op|'.'
name|'get_public'
op|'('
op|')'
op|','
name|'shared'
op|')'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
dedent|''
name|'arg_dict'
op|'['
string|'"path"'
op|']'
op|'='
string|'"data/host/%s"'
op|'%'
name|'request_id'
newline|'\n'
name|'xenstore'
op|'.'
name|'write_record'
op|'('
name|'self'
op|','
name|'arg_dict'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'='
name|'_wait_for_agent'
op|'('
name|'self'
op|','
name|'request_id'
op|','
name|'arg_dict'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TimeoutError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'PluginError'
op|'('
string|'"%s"'
op|'%'
name|'e'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
DECL|function|password
dedent|''
name|'def'
name|'password'
op|'('
name|'self'
op|','
name|'arg_dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Writes a request to xenstore that tells the agent to set\n    the root password for the given VM. The password should be \n    encrypted using the shared secret key that was returned by a \n    previous call to key_init. The encrypted password value should\n    be passed as the value for the \'enc_pass\' key in arg_dict.\n    """'
newline|'\n'
name|'pub'
op|'='
name|'int'
op|'('
name|'arg_dict'
op|'['
string|'"pub"'
op|']'
op|')'
newline|'\n'
name|'enc_pass'
op|'='
name|'arg_dict'
op|'['
string|'"enc_pass"'
op|']'
newline|'\n'
name|'if'
name|'arg_dict'
op|'.'
name|'get'
op|'('
string|'"testing_mode"'
op|')'
op|':'
newline|'\n'
comment|'# Decrypt the password, and send it back to verify'
nl|'\n'
indent|'        '
name|'pretend'
op|'='
name|'SimpleDH'
op|'('
name|'secret'
op|'='
name|'PRETEND_SECRET'
op|')'
newline|'\n'
name|'pretend'
op|'.'
name|'compute_shared'
op|'('
name|'pub'
op|')'
newline|'\n'
name|'pw'
op|'='
name|'pretend'
op|'.'
name|'decrypt'
op|'('
name|'enc_pass'
op|')'
newline|'\n'
name|'ret'
op|'='
string|'\'{ "returncode": "0", "message": "%s" }\''
op|'%'
name|'pw'
newline|'\n'
name|'return'
name|'ret'
newline|'\n'
dedent|''
name|'arg_dict'
op|'['
string|'"value"'
op|']'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
op|'{'
string|'"name"'
op|':'
string|'"password"'
op|','
string|'"value"'
op|':'
name|'enc_pass'
op|'}'
op|')'
newline|'\n'
name|'request_id'
op|'='
name|'arg_dict'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'arg_dict'
op|'['
string|'"path"'
op|']'
op|'='
string|'"data/host/%s"'
op|'%'
name|'request_id'
newline|'\n'
name|'xenstore'
op|'.'
name|'write_record'
op|'('
name|'self'
op|','
name|'arg_dict'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'='
name|'_wait_for_agent'
op|'('
name|'self'
op|','
name|'request_id'
op|','
name|'arg_dict'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TimeoutError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'PluginError'
op|'('
string|'"%s"'
op|'%'
name|'e'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'resp'
newline|'\n'
nl|'\n'
DECL|function|_wait_for_agent
dedent|''
name|'def'
name|'_wait_for_agent'
op|'('
name|'self'
op|','
name|'request_id'
op|','
name|'arg_dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Periodically checks xenstore for a response from the agent.\n    The request is always written to \'data/host/{id}\', and\n    the agent\'s response for that request will be in \'data/guest/{id}\'.\n    If no value appears from the agent within the time specified by\n    AGENT_TIMEOUT, the original request is deleted and a TimeoutError\n    is returned.\n    """'
newline|'\n'
name|'arg_dict'
op|'['
string|'"path"'
op|']'
op|'='
string|'"data/guest/%s"'
op|'%'
name|'request_id'
newline|'\n'
name|'arg_dict'
op|'['
string|'"ignore_missing_path"'
op|']'
op|'='
name|'True'
newline|'\n'
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|'>'
name|'AGENT_TIMEOUT'
op|':'
newline|'\n'
comment|'# No response within the timeout period; bail out'
nl|'\n'
comment|'# First, delete the request record'
nl|'\n'
indent|'            '
name|'arg_dict'
op|'['
string|'"path"'
op|']'
op|'='
string|'"data/host/%s"'
op|'%'
name|'request_id'
newline|'\n'
name|'xenstore'
op|'.'
name|'delete_record'
op|'('
name|'self'
op|','
name|'arg_dict'
op|')'
newline|'\n'
name|'raise'
name|'TimeoutError'
op|'('
string|'"No response from agent within %s seconds."'
op|'%'
nl|'\n'
name|'AGENT_TIMEOUT'
op|')'
newline|'\n'
dedent|''
name|'ret'
op|'='
name|'xenstore'
op|'.'
name|'read_record'
op|'('
name|'self'
op|','
name|'arg_dict'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|'!='
string|'"None"'
op|':'
newline|'\n'
comment|'# The agent responded'
nl|'\n'
indent|'            '
name|'return'
name|'ret'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'XenAPIPlugin'
op|'.'
name|'dispatch'
op|'('
nl|'\n'
op|'{'
string|'"key_init"'
op|':'
name|'key_init'
op|','
nl|'\n'
string|'"password"'
op|':'
name|'password'
op|'}'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
